
CHARTRAK2v3_controllerRETARGETED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fe8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  080090f8  080090f8  000190f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009894  08009894  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009894  08009894  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009894  08009894  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009894  08009894  00019894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009898  08009898  00019898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800989c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001d8  08009a74  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08009a74  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010514  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c07  00000000  00000000  00030758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  00033360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b31  00000000  00000000  000341d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199e1  00000000  00000000  00034d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013585  00000000  00000000  0004e6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e0dc  00000000  00000000  00061c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004dd8  00000000  00000000  000efd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f4b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080090e0 	.word	0x080090e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080090e0 	.word	0x080090e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr
 800115c:	0000      	movs	r0, r0
	...

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b093      	sub	sp, #76	; 0x4c
 8001164:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f000 fd67 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f000 f8ef 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116e:	f000 fa15 	bl	800159c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001172:	f000 f947 	bl	8001404 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001176:	f000 f983 	bl	8001480 <MX_I2C1_Init>
  MX_SPI1_Init();
 800117a:	f000 f9af 	bl	80014dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800117e:	f000 f9e3 	bl	8001548 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  	//GPIO SETUP
    HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001188:	4861      	ldr	r0, [pc, #388]	; (8001310 <main+0x1b0>)
 800118a:	f001 fb48 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 800118e:	2201      	movs	r2, #1
 8001190:	2110      	movs	r1, #16
 8001192:	4860      	ldr	r0, [pc, #384]	; (8001314 <main+0x1b4>)
 8001194:	f001 fb43 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800119e:	485c      	ldr	r0, [pc, #368]	; (8001310 <main+0x1b0>)
 80011a0:	f001 fb3d 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, Voltage_output);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011aa:	485b      	ldr	r0, [pc, #364]	; (8001318 <main+0x1b8>)
 80011ac:	f001 fb37 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2120      	movs	r1, #32
 80011b4:	4858      	ldr	r0, [pc, #352]	; (8001318 <main+0x1b8>)
 80011b6:	f001 fb32 	bl	800281e <HAL_GPIO_WritePin>

    // ADC board expander setup
    TCA_Init(0b0100001, hi2c1);
 80011ba:	4c58      	ldr	r4, [pc, #352]	; (800131c <main+0x1bc>)
 80011bc:	4668      	mov	r0, sp
 80011be:	f104 030c 	add.w	r3, r4, #12
 80011c2:	2248      	movs	r2, #72	; 0x48
 80011c4:	4619      	mov	r1, r3
 80011c6:	f005 fb82 	bl	80068ce <memcpy>
 80011ca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80011ce:	2021      	movs	r0, #33	; 0x21
 80011d0:	f004 fbba 	bl	8005948 <TCA_Init>

    TCA_PinMode(P07, 0);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2007      	movs	r0, #7
 80011d8:	f004 fbdc 	bl	8005994 <TCA_PinMode>
    TCA_PinMode(P11, 0);
 80011dc:	2100      	movs	r1, #0
 80011de:	2009      	movs	r0, #9
 80011e0:	f004 fbd8 	bl	8005994 <TCA_PinMode>
    TCA_PinMode(P12, 0);
 80011e4:	2100      	movs	r1, #0
 80011e6:	200a      	movs	r0, #10
 80011e8:	f004 fbd4 	bl	8005994 <TCA_PinMode>

    TCA_WritePin(P07, 1);
 80011ec:	2101      	movs	r1, #1
 80011ee:	2007      	movs	r0, #7
 80011f0:	f004 fc28 	bl	8005a44 <TCA_WritePin>
    TCA_WritePin(P11, 0);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2009      	movs	r0, #9
 80011f8:	f004 fc24 	bl	8005a44 <TCA_WritePin>
    TCA_WritePin(P12, 0);
 80011fc:	2100      	movs	r1, #0
 80011fe:	200a      	movs	r0, #10
 8001200:	f004 fc20 	bl	8005a44 <TCA_WritePin>

    // High-speed DAC setup
    DACREF(0.0);
 8001204:	f04f 0000 	mov.w	r0, #0
 8001208:	f004 f9d4 	bl	80055b4 <DACREF>
    DACOFFS(0.0);
 800120c:	f04f 0000 	mov.w	r0, #0
 8001210:	f004 fa30 	bl	8005674 <DACOFFS>

    // High-speed ADC setup
    ADCREF(2.0);
 8001214:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001218:	f004 fa94 	bl	8005744 <ADCREF>
    ADCOFFS(0.0);
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	f004 faec 	bl	80057fc <ADCOFFS>

    // RS485 receive interrupt setup
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 8001224:	2220      	movs	r2, #32
 8001226:	493e      	ldr	r1, [pc, #248]	; (8001320 <main+0x1c0>)
 8001228:	483e      	ldr	r0, [pc, #248]	; (8001324 <main+0x1c4>)
 800122a:	f002 ffc4 	bl	80041b6 <HAL_UARTEx_ReceiveToIdle_IT>

    //SPARTAN3 SETUP
    HAL_Delay(100);
 800122e:	2064      	movs	r0, #100	; 0x64
 8001230:	f000 fd64 	bl	8001cfc <HAL_Delay>
    LOLA_Reset();
 8001234:	f004 f8d8 	bl	80053e8 <LOLA_Reset>

    RS485_Transmit("awaiting FPGA config\r\n");
 8001238:	483b      	ldr	r0, [pc, #236]	; (8001328 <main+0x1c8>)
 800123a:	f004 fb47 	bl	80058cc <RS485_Transmit>
    LOLA_Init(JTAG, 50);
 800123e:	2132      	movs	r1, #50	; 0x32
 8001240:	2006      	movs	r0, #6
 8001242:	f003 ffef 	bl	8005224 <LOLA_Init>
    RS485_Transmit("FPGA config done\r\n");
 8001246:	4839      	ldr	r0, [pc, #228]	; (800132c <main+0x1cc>)
 8001248:	f004 fb40 	bl	80058cc <RS485_Transmit>

    //CharTrak setup
    CHT1.Enable = 0;
 800124c:	4b38      	ldr	r3, [pc, #224]	; (8001330 <main+0x1d0>)
 800124e:	2200      	movs	r2, #0
 8001250:	705a      	strb	r2, [r3, #1]
    CHT1.characteristic = Open;
 8001252:	4b37      	ldr	r3, [pc, #220]	; (8001330 <main+0x1d0>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
    CHT1.Upp = 0;
 8001258:	4b35      	ldr	r3, [pc, #212]	; (8001330 <main+0x1d0>)
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	605a      	str	r2, [r3, #4]

    // Arbitrary waveform generator setup
    AWG1.Enable = 0;
 8001260:	4b34      	ldr	r3, [pc, #208]	; (8001334 <main+0x1d4>)
 8001262:	2200      	movs	r2, #0
 8001264:	705a      	strb	r2, [r3, #1]
    AWG1.waveform = Sine;
 8001266:	4b33      	ldr	r3, [pc, #204]	; (8001334 <main+0x1d4>)
 8001268:	2202      	movs	r2, #2
 800126a:	701a      	strb	r2, [r3, #0]
    AWG1.Uavg = 0.0;
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <main+0x1d4>)
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
    AWG1.Upp = 5.0;
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <main+0x1d4>)
 8001276:	4a30      	ldr	r2, [pc, #192]	; (8001338 <main+0x1d8>)
 8001278:	609a      	str	r2, [r3, #8]
    AWG1.DutyCycle = 20.0;
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <main+0x1d4>)
 800127c:	4a2f      	ldr	r2, [pc, #188]	; (800133c <main+0x1dc>)
 800127e:	60da      	str	r2, [r3, #12]
    AWG1.Freq = 332.0;
 8001280:	492c      	ldr	r1, [pc, #176]	; (8001334 <main+0x1d4>)
 8001282:	a31f      	add	r3, pc, #124	; (adr r3, 8001300 <main+0x1a0>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	e9c1 2304 	strd	r2, r3, [r1, #16]

    // Noise generator setup
    NOISE1.Enable = 0;
 800128c:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <main+0x1e0>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
    NOISE1.Freq = 10000.0;
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <main+0x1e0>)
 8001294:	4a2b      	ldr	r2, [pc, #172]	; (8001344 <main+0x1e4>)
 8001296:	609a      	str	r2, [r3, #8]
    NOISE1.Upp = 1.0;
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <main+0x1e0>)
 800129a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800129e:	605a      	str	r2, [r3, #4]
    NOISE1.Seed = 0x800f000f000f0001;
 80012a0:	4927      	ldr	r1, [pc, #156]	; (8001340 <main+0x1e0>)
 80012a2:	a319      	add	r3, pc, #100	; (adr r3, 8001308 <main+0x1a8>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	e9c1 2304 	strd	r2, r3, [r1, #16]

    LOLA_enable_features(ALL_EN, 0); // disable all features
 80012ac:	2100      	movs	r1, #0
 80012ae:	f04f 30ff 	mov.w	r0, #4294967295
 80012b2:	f004 f8af 	bl	8005414 <LOLA_enable_features>
    LOLA_SET_MAX_AMPLITUDE(6.0);
 80012b6:	4824      	ldr	r0, [pc, #144]	; (8001348 <main+0x1e8>)
 80012b8:	f004 f90a 	bl	80054d0 <LOLA_SET_MAX_AMPLITUDE>
    DAC_DIRECT_DATA(2.0);
 80012bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012c0:	f004 f930 	bl	8005524 <DAC_DIRECT_DATA>
    AWG_Load_Waveform(AWG1);
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <main+0x1d4>)
 80012c6:	466c      	mov	r4, sp
 80012c8:	f103 0210 	add.w	r2, r3, #16
 80012cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80012d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d6:	f003 fd4b 	bl	8004d70 <AWG_Load_Waveform>
	  //AWG_Load_Waveform(AWG1);
	  //LOLA_enable_features(ALL_EN, 0); // disable
	  //LOLA_enable_features(AWG_EN, 0);
	  //AWG_Load_Waveform(AWG1);
	  //LOLA_enable_features(AWG_EN, 1);
	  HAL_Delay(100);
 80012da:	2064      	movs	r0, #100	; 0x64
 80012dc:	f000 fd0e 	bl	8001cfc <HAL_Delay>
	  //LOLA_GET_FIRMWAREID();
	  HAL_Delay(100);
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f000 fd0b 	bl	8001cfc <HAL_Delay>
	  AWG_Load_Waveform(AWG1);
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <main+0x1d4>)
 80012e8:	466c      	mov	r4, sp
 80012ea:	f103 0210 	add.w	r2, r3, #16
 80012ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80012f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f8:	f003 fd3a 	bl	8004d70 <AWG_Load_Waveform>
	  HAL_Delay(100);
 80012fc:	e7ed      	b.n	80012da <main+0x17a>
 80012fe:	bf00      	nop
 8001300:	00000000 	.word	0x00000000
 8001304:	4074c000 	.word	0x4074c000
 8001308:	000f0001 	.word	0x000f0001
 800130c:	800f000f 	.word	0x800f000f
 8001310:	40011000 	.word	0x40011000
 8001314:	40010800 	.word	0x40010800
 8001318:	40010c00 	.word	0x40010c00
 800131c:	20000224 	.word	0x20000224
 8001320:	20000364 	.word	0x20000364
 8001324:	200002d0 	.word	0x200002d0
 8001328:	080090f8 	.word	0x080090f8
 800132c:	08009110 	.word	0x08009110
 8001330:	20000348 	.word	0x20000348
 8001334:	20000318 	.word	0x20000318
 8001338:	40a00000 	.word	0x40a00000
 800133c:	41a00000 	.word	0x41a00000
 8001340:	20000330 	.word	0x20000330
 8001344:	461c4000 	.word	0x461c4000
 8001348:	40c00000 	.word	0x40c00000

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b094      	sub	sp, #80	; 0x50
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001356:	2228      	movs	r2, #40	; 0x28
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f005 fa19 	bl	8006792 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800137c:	2301      	movs	r3, #1
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138a:	2301      	movs	r3, #1
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138e:	2302      	movs	r3, #2
 8001390:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001398:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800139c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 ff00 	bl	80031a8 <HAL_RCC_OscConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013ae:	f000 f9b5 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b2:	230f      	movs	r3, #15
 80013b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2101      	movs	r1, #1
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 f96c 	bl	80036ac <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013da:	f000 f99f 	bl	800171c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013de:	2302      	movs	r3, #2
 80013e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80013e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 faec 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013f6:	f000 f991 	bl	800171c <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3750      	adds	r7, #80	; 0x50
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_ADC1_Init+0x74>)
 8001416:	4a19      	ldr	r2, [pc, #100]	; (800147c <MX_ADC1_Init+0x78>)
 8001418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <MX_ADC1_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_ADC1_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_ADC1_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_ADC1_Init+0x74>)
 800142e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001432:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_ADC1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_ADC1_Init+0x74>)
 800143c:	2201      	movs	r2, #1
 800143e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <MX_ADC1_Init+0x74>)
 8001442:	f000 fc7f 	bl	8001d44 <HAL_ADC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800144c:	f000 f966 	bl	800171c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001454:	2301      	movs	r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_ADC1_Init+0x74>)
 8001462:	f000 fd47 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800146c:	f000 f956 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200001f4 	.word	0x200001f4
 800147c:	40012400 	.word	0x40012400

08001480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C1_Init+0x50>)
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <MX_I2C1_Init+0x54>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_I2C1_Init+0x50>)
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_I2C1_Init+0x58>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_I2C1_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_I2C1_Init+0x50>)
 800149e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MX_I2C1_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_I2C1_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_I2C1_Init+0x50>)
 80014be:	f001 f9c7 	bl	8002850 <HAL_I2C_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014c8:	f000 f928 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000224 	.word	0x20000224
 80014d4:	40005400 	.word	0x40005400
 80014d8:	000186a0 	.word	0x000186a0

080014dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_SPI1_Init+0x64>)
 80014e2:	4a18      	ldr	r2, [pc, #96]	; (8001544 <MX_SPI1_Init+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_SPI1_Init+0x64>)
 80014e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_SPI1_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_SPI1_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_SPI1_Init+0x64>)
 80014fc:	2202      	movs	r2, #2
 80014fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_SPI1_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_SPI1_Init+0x64>)
 8001508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_SPI1_Init+0x64>)
 8001510:	2228      	movs	r2, #40	; 0x28
 8001512:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MX_SPI1_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_SPI1_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <MX_SPI1_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_SPI1_Init+0x64>)
 8001528:	220a      	movs	r2, #10
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_SPI1_Init+0x64>)
 800152e:	f002 fb01 	bl	8003b34 <HAL_SPI_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001538:	f000 f8f0 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000278 	.word	0x20000278
 8001544:	40013000 	.word	0x40013000

08001548 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_USART1_UART_Init+0x4c>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_USART1_UART_Init+0x50>)
 8001550:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_USART1_UART_Init+0x4c>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_USART1_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_USART1_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_USART1_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_USART1_UART_Init+0x4c>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_USART1_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_USART1_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_USART1_UART_Init+0x4c>)
 8001580:	f002 fd46 	bl	8004010 <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800158a:	f000 f8c7 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002d0 	.word	0x200002d0
 8001598:	40013800 	.word	0x40013800

0800159c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b0:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <MX_GPIO_Init+0x144>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a4a      	ldr	r2, [pc, #296]	; (80016e0 <MX_GPIO_Init+0x144>)
 80015b6:	f043 0310 	orr.w	r3, r3, #16
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b48      	ldr	r3, [pc, #288]	; (80016e0 <MX_GPIO_Init+0x144>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c8:	4b45      	ldr	r3, [pc, #276]	; (80016e0 <MX_GPIO_Init+0x144>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a44      	ldr	r2, [pc, #272]	; (80016e0 <MX_GPIO_Init+0x144>)
 80015ce:	f043 0320 	orr.w	r3, r3, #32
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b42      	ldr	r3, [pc, #264]	; (80016e0 <MX_GPIO_Init+0x144>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <MX_GPIO_Init+0x144>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a3e      	ldr	r2, [pc, #248]	; (80016e0 <MX_GPIO_Init+0x144>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b3c      	ldr	r3, [pc, #240]	; (80016e0 <MX_GPIO_Init+0x144>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <MX_GPIO_Init+0x144>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a38      	ldr	r2, [pc, #224]	; (80016e0 <MX_GPIO_Init+0x144>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b36      	ldr	r3, [pc, #216]	; (80016e0 <MX_GPIO_Init+0x144>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_DACS_Pin|LDAC_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001616:	4833      	ldr	r0, [pc, #204]	; (80016e4 <MX_GPIO_Init+0x148>)
 8001618:	f001 f901 	bl	800281e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	211e      	movs	r1, #30
 8001620:	4831      	ldr	r0, [pc, #196]	; (80016e8 <MX_GPIO_Init+0x14c>)
 8001622:	f001 f8fc 	bl	800281e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 8001626:	2200      	movs	r2, #0
 8001628:	f24f 4127 	movw	r1, #62503	; 0xf427
 800162c:	482f      	ldr	r0, [pc, #188]	; (80016ec <MX_GPIO_Init+0x150>)
 800162e:	f001 f8f6 	bl	800281e <HAL_GPIO_WritePin>
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SPI1_DACS_Pin LDAC_Pin */
  GPIO_InitStruct.Pin = SPI1_DACS_Pin|LDAC_Pin;
 8001632:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2302      	movs	r3, #2
 8001642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4619      	mov	r1, r3
 800164a:	4826      	ldr	r0, [pc, #152]	; (80016e4 <MX_GPIO_Init+0x148>)
 800164c:	f000 ff4c 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VselC0_Pin VselC1_Pin PROGB_Pin SPI1_FPGAS_Pin */
  GPIO_InitStruct.Pin = VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin;
 8001650:	231e      	movs	r3, #30
 8001652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2302      	movs	r3, #2
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4619      	mov	r1, r3
 8001666:	4820      	ldr	r0, [pc, #128]	; (80016e8 <MX_GPIO_Init+0x14c>)
 8001668:	f000 ff3e 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VselB1_Pin VselB0_Pin VselA1_Pin VselA0_Pin
                           MODE_Pin M2_Pin M1_Pin M0_Pin
                           DIR_Pin */
  GPIO_InitStruct.Pin = VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 800166c:	f24f 4327 	movw	r3, #62503	; 0xf427
 8001670:	613b      	str	r3, [r7, #16]
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2302      	movs	r3, #2
 800167c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4619      	mov	r1, r3
 8001684:	4819      	ldr	r0, [pc, #100]	; (80016ec <MX_GPIO_Init+0x150>)
 8001686:	f000 ff2f 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FPGA_IRQ_Pin USB_detect_Pin */
  GPIO_InitStruct.Pin = FPGA_IRQ_Pin|USB_detect_Pin;
 800168a:	f640 0308 	movw	r3, #2056	; 0x808
 800168e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_GPIO_Init+0x154>)
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	4619      	mov	r1, r3
 800169e:	4813      	ldr	r0, [pc, #76]	; (80016ec <MX_GPIO_Init+0x150>)
 80016a0:	f000 ff22 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DONE_Pin INITB_Pin */
  GPIO_InitStruct.Pin = DONE_Pin|INITB_Pin;
 80016a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4619      	mov	r1, r3
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <MX_GPIO_Init+0x14c>)
 80016ba:	f000 ff15 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_IRQ_Pin */
  GPIO_InitStruct.Pin = UI_IRQ_Pin;
 80016be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MX_GPIO_Init+0x154>)
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UI_IRQ_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_GPIO_Init+0x14c>)
 80016d4:	f000 ff08 	bl	80024e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d8:	bf00      	nop
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40011000 	.word	0x40011000
 80016e8:	40010800 	.word	0x40010800
 80016ec:	40010c00 	.word	0x40010c00
 80016f0:	10110000 	.word	0x10110000

080016f4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
	//SCPIencode(TXbuff, RXbuff, AWG1, NOISE1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 8001700:	2220      	movs	r2, #32
 8001702:	4904      	ldr	r1, [pc, #16]	; (8001714 <HAL_UARTEx_RxEventCallback+0x20>)
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <HAL_UARTEx_RxEventCallback+0x24>)
 8001706:	f002 fd56 	bl	80041b6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000364 	.word	0x20000364
 8001718:	200002d0 	.word	0x200002d0

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	e7fe      	b.n	8001724 <Error_Handler+0x8>
	...

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_MspInit+0x5c>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <HAL_MspInit+0x5c>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6193      	str	r3, [r2, #24]
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_MspInit+0x5c>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_MspInit+0x5c>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <HAL_MspInit+0x5c>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_MspInit+0x5c>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_MspInit+0x60>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_MspInit+0x60>)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000

0800178c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <HAL_ADC_MspInit+0x6c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d121      	bne.n	80017f0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_ADC_MspInit+0x70>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <HAL_ADC_MspInit+0x70>)
 80017b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HAL_ADC_MspInit+0x70>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_ADC_MspInit+0x70>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <HAL_ADC_MspInit+0x70>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_ADC_MspInit+0x70>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Ain_Pin;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e0:	2303      	movs	r3, #3
 80017e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Ain_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4619      	mov	r1, r3
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <HAL_ADC_MspInit+0x74>)
 80017ec:	f000 fe7c 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40012400 	.word	0x40012400
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010800 	.word	0x40010800

08001804 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <HAL_I2C_MspInit+0x90>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d132      	bne.n	800188a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_I2C_MspInit+0x94>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <HAL_I2C_MspInit+0x94>)
 800182a:	f043 0308 	orr.w	r3, r3, #8
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_I2C_MspInit+0x94>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800183c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001842:	2312      	movs	r3, #18
 8001844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4812      	ldr	r0, [pc, #72]	; (800189c <HAL_I2C_MspInit+0x98>)
 8001852:	f000 fe49 	bl	80024e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_I2C_MspInit+0x9c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
 800186c:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <HAL_I2C_MspInit+0x9c>)
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_I2C_MspInit+0x94>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_I2C_MspInit+0x94>)
 8001878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_I2C_MspInit+0x94>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40005400 	.word	0x40005400
 8001898:	40021000 	.word	0x40021000
 800189c:	40010c00 	.word	0x40010c00
 80018a0:	40010000 	.word	0x40010000

080018a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1b      	ldr	r2, [pc, #108]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d12f      	bne.n	8001924 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_SPI_MspInit+0x8c>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <HAL_SPI_MspInit+0x8c>)
 80018ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_SPI_MspInit+0x8c>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_SPI_MspInit+0x8c>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a13      	ldr	r2, [pc, #76]	; (8001930 <HAL_SPI_MspInit+0x8c>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_SPI_MspInit+0x8c>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018f4:	23a0      	movs	r3, #160	; 0xa0
 80018f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	4619      	mov	r1, r3
 8001906:	480b      	ldr	r0, [pc, #44]	; (8001934 <HAL_SPI_MspInit+0x90>)
 8001908:	f000 fdee 	bl	80024e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800190c:	2340      	movs	r3, #64	; 0x40
 800190e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	4619      	mov	r1, r3
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <HAL_SPI_MspInit+0x90>)
 8001920:	f000 fde2 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	3720      	adds	r7, #32
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40013000 	.word	0x40013000
 8001930:	40021000 	.word	0x40021000
 8001934:	40010800 	.word	0x40010800

08001938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a26      	ldr	r2, [pc, #152]	; (80019ec <HAL_UART_MspInit+0xb4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d145      	bne.n	80019e4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_UART_MspInit+0xb8>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a24      	ldr	r2, [pc, #144]	; (80019f0 <HAL_UART_MspInit+0xb8>)
 800195e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <HAL_UART_MspInit+0xb8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <HAL_UART_MspInit+0xb8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a1e      	ldr	r2, [pc, #120]	; (80019f0 <HAL_UART_MspInit+0xb8>)
 8001976:	f043 0308 	orr.w	r3, r3, #8
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <HAL_UART_MspInit+0xb8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001988:	2340      	movs	r3, #64	; 0x40
 800198a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	4816      	ldr	r0, [pc, #88]	; (80019f4 <HAL_UART_MspInit+0xbc>)
 800199c:	f000 fda4 	bl	80024e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4810      	ldr	r0, [pc, #64]	; (80019f4 <HAL_UART_MspInit+0xbc>)
 80019b4:	f000 fd98 	bl	80024e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_UART_MspInit+0xc0>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_UART_MspInit+0xc0>)
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	2025      	movs	r0, #37	; 0x25
 80019da:	f000 fc9c 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019de:	2025      	movs	r0, #37	; 0x25
 80019e0:	f000 fcb5 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40013800 	.word	0x40013800
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	40010000 	.word	0x40010000

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a00:	e7fe      	b.n	8001a00 <NMI_Handler+0x4>

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a42:	f000 f93f 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <USART1_IRQHandler+0x10>)
 8001a52:	f002 fc0d 	bl	8004270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200002d0 	.word	0x200002d0

08001a60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return 1;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <_kill>:

int _kill(int pid, int sig)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a78:	f004 feee 	bl	8006858 <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2216      	movs	r2, #22
 8001a80:	601a      	str	r2, [r3, #0]
  return -1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_exit>:

void _exit (int status)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a96:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffe7 	bl	8001a6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa0:	e7fe      	b.n	8001aa0 <_exit+0x12>

08001aa2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e00a      	b.n	8001aca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	4601      	mov	r1, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	60ba      	str	r2, [r7, #8]
 8001ac0:	b2ca      	uxtb	r2, r1
 8001ac2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dbf0      	blt.n	8001ab4 <_read+0x12>
  }

  return len;
 8001ad2:	687b      	ldr	r3, [r7, #4]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	e009      	b.n	8001b02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	60ba      	str	r2, [r7, #8]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbf1      	blt.n	8001aee <_write+0x12>
  }
  return len;
 8001b0a:	687b      	ldr	r3, [r7, #4]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_close>:

int _close(int file)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <_isatty>:

int _isatty(int file)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b50:	2301      	movs	r3, #1
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba4:	f004 fe58 	bl	8006858 <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20005000 	.word	0x20005000
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	20000350 	.word	0x20000350
 8001bdc:	20000528 	.word	0x20000528

08001be0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bec:	f7ff fff8 	bl	8001be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf0:	480b      	ldr	r0, [pc, #44]	; (8001c20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bf2:	490c      	ldr	r1, [pc, #48]	; (8001c24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf8:	e002      	b.n	8001c00 <LoopCopyDataInit>

08001bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfe:	3304      	adds	r3, #4

08001c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c04:	d3f9      	bcc.n	8001bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c08:	4c09      	ldr	r4, [pc, #36]	; (8001c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c0c:	e001      	b.n	8001c12 <LoopFillZerobss>

08001c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c10:	3204      	adds	r2, #4

08001c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c14:	d3fb      	bcc.n	8001c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c16:	f004 fe25 	bl	8006864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c1a:	f7ff faa1 	bl	8001160 <main>
  bx lr
 8001c1e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c24:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001c28:	0800989c 	.word	0x0800989c
  ldr r2, =_sbss
 8001c2c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c30:	20000528 	.word	0x20000528

08001c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC1_2_IRQHandler>
	...

08001c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_Init+0x28>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_Init+0x28>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 fb59 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	200f      	movs	r0, #15
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fd68 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40022000 	.word	0x40022000

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 fb71 	bl	800236a <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 fb39 	bl	8002316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_IncTick+0x1c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a03      	ldr	r2, [pc, #12]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20000354 	.word	0x20000354

08001ce8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <HAL_GetTick+0x10>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20000354 	.word	0x20000354

08001cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff fff0 	bl	8001ce8 <HAL_GetTick>
 8001d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d005      	beq.n	8001d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_Delay+0x44>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d22:	bf00      	nop
 8001d24:	f7ff ffe0 	bl	8001ce8 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d8f7      	bhi.n	8001d24 <HAL_Delay+0x28>
  {
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000008 	.word	0x20000008

08001d44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0be      	b.n	8001ee4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fd02 	bl	800178c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f9ab 	bl	80020e4 <ADC_ConversionStop_Disable>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 8099 	bne.w	8001ed2 <HAL_ADC_Init+0x18e>
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 8095 	bne.w	8001ed2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001db0:	f023 0302 	bic.w	r3, r3, #2
 8001db4:	f043 0202 	orr.w	r2, r3, #2
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dc4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7b1b      	ldrb	r3, [r3, #12]
 8001dca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dcc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ddc:	d003      	beq.n	8001de6 <HAL_ADC_Init+0xa2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d102      	bne.n	8001dec <HAL_ADC_Init+0xa8>
 8001de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dea:	e000      	b.n	8001dee <HAL_ADC_Init+0xaa>
 8001dec:	2300      	movs	r3, #0
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7d1b      	ldrb	r3, [r3, #20]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d119      	bne.n	8001e30 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7b1b      	ldrb	r3, [r3, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	035a      	lsls	r2, r3, #13
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	e00b      	b.n	8001e30 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HAL_ADC_Init+0x1a8>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	430b      	orrs	r3, r1
 8001e56:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e60:	d003      	beq.n	8001e6a <HAL_ADC_Init+0x126>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d104      	bne.n	8001e74 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	051b      	lsls	r3, r3, #20
 8001e72:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <HAL_ADC_Init+0x1ac>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10b      	bne.n	8001eb0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	f023 0303 	bic.w	r3, r3, #3
 8001ea6:	f043 0201 	orr.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001eae:	e018      	b.n	8001ee2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	f023 0312 	bic.w	r3, r3, #18
 8001eb8:	f043 0210 	orr.w	r2, r3, #16
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	f043 0201 	orr.w	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ed0:	e007      	b.n	8001ee2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	f043 0210 	orr.w	r2, r3, #16
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	ffe1f7fd 	.word	0xffe1f7fd
 8001ef0:	ff1f0efe 	.word	0xff1f0efe

08001ef4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x20>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e0dc      	b.n	80020ce <HAL_ADC_ConfigChannel+0x1da>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b06      	cmp	r3, #6
 8001f22:	d81c      	bhi.n	8001f5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	3b05      	subs	r3, #5
 8001f36:	221f      	movs	r2, #31
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4019      	ands	r1, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b05      	subs	r3, #5
 8001f50:	fa00 f203 	lsl.w	r2, r0, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f5c:	e03c      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d81c      	bhi.n	8001fa0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	3b23      	subs	r3, #35	; 0x23
 8001f78:	221f      	movs	r2, #31
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4019      	ands	r1, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b23      	subs	r3, #35	; 0x23
 8001f92:	fa00 f203 	lsl.w	r2, r0, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f9e:	e01b      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b41      	subs	r3, #65	; 0x41
 8001fb2:	221f      	movs	r2, #31
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4019      	ands	r1, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	3b41      	subs	r3, #65	; 0x41
 8001fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b09      	cmp	r3, #9
 8001fde:	d91c      	bls.n	800201a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68d9      	ldr	r1, [r3, #12]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b1e      	subs	r3, #30
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4019      	ands	r1, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	6898      	ldr	r0, [r3, #8]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	3b1e      	subs	r3, #30
 800200c:	fa00 f203 	lsl.w	r2, r0, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	e019      	b.n	800204e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6919      	ldr	r1, [r3, #16]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	2207      	movs	r2, #7
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	4019      	ands	r1, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6898      	ldr	r0, [r3, #8]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	fa00 f203 	lsl.w	r2, r0, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b10      	cmp	r3, #16
 8002054:	d003      	beq.n	800205e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800205a:	2b11      	cmp	r3, #17
 800205c:	d132      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d125      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d126      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002084:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b10      	cmp	r3, #16
 800208c:	d11a      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <HAL_ADC_ConfigChannel+0x1e8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	0c9a      	lsrs	r2, r3, #18
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020a4:	e002      	b.n	80020ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f9      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x1b2>
 80020b2:	e007      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	40012400 	.word	0x40012400
 80020dc:	20000000 	.word	0x20000000
 80020e0:	431bde83 	.word	0x431bde83

080020e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d12e      	bne.n	800215c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800210e:	f7ff fdeb 	bl	8001ce8 <HAL_GetTick>
 8002112:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002114:	e01b      	b.n	800214e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002116:	f7ff fde7 	bl	8001ce8 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d914      	bls.n	800214e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d10d      	bne.n	800214e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	f043 0210 	orr.w	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	f043 0201 	orr.w	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e007      	b.n	800215e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d0dc      	beq.n	8002116 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4906      	ldr	r1, [pc, #24]	; (8002200 <__NVIC_EnableIRQ+0x34>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100

08002204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0a      	blt.n	800222e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <__NVIC_SetPriority+0x4c>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	440b      	add	r3, r1
 8002228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800222c:	e00a      	b.n	8002244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <__NVIC_SetPriority+0x50>)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3b04      	subs	r3, #4
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	761a      	strb	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f1c3 0307 	rsb	r3, r3, #7
 8002272:	2b04      	cmp	r3, #4
 8002274:	bf28      	it	cs
 8002276:	2304      	movcs	r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3304      	adds	r3, #4
 800227e:	2b06      	cmp	r3, #6
 8002280:	d902      	bls.n	8002288 <NVIC_EncodePriority+0x30>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3b03      	subs	r3, #3
 8002286:	e000      	b.n	800228a <NVIC_EncodePriority+0x32>
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	f04f 32ff 	mov.w	r2, #4294967295
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	401a      	ands	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	4313      	orrs	r3, r2
         );
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f7ff ff90 	bl	8002204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff2d 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff42 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff90 	bl	8002258 <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff5f 	bl	8002204 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff35 	bl	80021cc <__NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffa2 	bl	80022bc <SysTick_Config>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d008      	beq.n	80023ac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2204      	movs	r2, #4
 800239e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e020      	b.n	80023ee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 020e 	bic.w	r2, r2, #14
 80023ba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f202 	lsl.w	r2, r1, r2
 80023da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d005      	beq.n	800241c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2204      	movs	r2, #4
 8002414:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e051      	b.n	80024c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 020e 	bic.w	r2, r2, #14
 800242a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0201 	bic.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a22      	ldr	r2, [pc, #136]	; (80024cc <HAL_DMA_Abort_IT+0xd4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d029      	beq.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <HAL_DMA_Abort_IT+0xd8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d022      	beq.n	8002496 <HAL_DMA_Abort_IT+0x9e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <HAL_DMA_Abort_IT+0xdc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01a      	beq.n	8002490 <HAL_DMA_Abort_IT+0x98>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <HAL_DMA_Abort_IT+0xe0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d012      	beq.n	800248a <HAL_DMA_Abort_IT+0x92>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <HAL_DMA_Abort_IT+0xe4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00a      	beq.n	8002484 <HAL_DMA_Abort_IT+0x8c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <HAL_DMA_Abort_IT+0xe8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d102      	bne.n	800247e <HAL_DMA_Abort_IT+0x86>
 8002478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800247c:	e00e      	b.n	800249c <HAL_DMA_Abort_IT+0xa4>
 800247e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002482:	e00b      	b.n	800249c <HAL_DMA_Abort_IT+0xa4>
 8002484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002488:	e008      	b.n	800249c <HAL_DMA_Abort_IT+0xa4>
 800248a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248e:	e005      	b.n	800249c <HAL_DMA_Abort_IT+0xa4>
 8002490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002494:	e002      	b.n	800249c <HAL_DMA_Abort_IT+0xa4>
 8002496:	2310      	movs	r3, #16
 8002498:	e000      	b.n	800249c <HAL_DMA_Abort_IT+0xa4>
 800249a:	2301      	movs	r3, #1
 800249c:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <HAL_DMA_Abort_IT+0xec>)
 800249e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
    } 
  }
  return status;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40020008 	.word	0x40020008
 80024d0:	4002001c 	.word	0x4002001c
 80024d4:	40020030 	.word	0x40020030
 80024d8:	40020044 	.word	0x40020044
 80024dc:	40020058 	.word	0x40020058
 80024e0:	4002006c 	.word	0x4002006c
 80024e4:	40020000 	.word	0x40020000

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b08b      	sub	sp, #44	; 0x2c
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	e169      	b.n	80027d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024fc:	2201      	movs	r2, #1
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	429a      	cmp	r2, r3
 8002516:	f040 8158 	bne.w	80027ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4a9a      	ldr	r2, [pc, #616]	; (8002788 <HAL_GPIO_Init+0x2a0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d05e      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 8002524:	4a98      	ldr	r2, [pc, #608]	; (8002788 <HAL_GPIO_Init+0x2a0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d875      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 800252a:	4a98      	ldr	r2, [pc, #608]	; (800278c <HAL_GPIO_Init+0x2a4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d058      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 8002530:	4a96      	ldr	r2, [pc, #600]	; (800278c <HAL_GPIO_Init+0x2a4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d86f      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 8002536:	4a96      	ldr	r2, [pc, #600]	; (8002790 <HAL_GPIO_Init+0x2a8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d052      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 800253c:	4a94      	ldr	r2, [pc, #592]	; (8002790 <HAL_GPIO_Init+0x2a8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d869      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 8002542:	4a94      	ldr	r2, [pc, #592]	; (8002794 <HAL_GPIO_Init+0x2ac>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d04c      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 8002548:	4a92      	ldr	r2, [pc, #584]	; (8002794 <HAL_GPIO_Init+0x2ac>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d863      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 800254e:	4a92      	ldr	r2, [pc, #584]	; (8002798 <HAL_GPIO_Init+0x2b0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d046      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 8002554:	4a90      	ldr	r2, [pc, #576]	; (8002798 <HAL_GPIO_Init+0x2b0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d85d      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 800255a:	2b12      	cmp	r3, #18
 800255c:	d82a      	bhi.n	80025b4 <HAL_GPIO_Init+0xcc>
 800255e:	2b12      	cmp	r3, #18
 8002560:	d859      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <HAL_GPIO_Init+0x80>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	080025e3 	.word	0x080025e3
 800256c:	080025bd 	.word	0x080025bd
 8002570:	080025cf 	.word	0x080025cf
 8002574:	08002611 	.word	0x08002611
 8002578:	08002617 	.word	0x08002617
 800257c:	08002617 	.word	0x08002617
 8002580:	08002617 	.word	0x08002617
 8002584:	08002617 	.word	0x08002617
 8002588:	08002617 	.word	0x08002617
 800258c:	08002617 	.word	0x08002617
 8002590:	08002617 	.word	0x08002617
 8002594:	08002617 	.word	0x08002617
 8002598:	08002617 	.word	0x08002617
 800259c:	08002617 	.word	0x08002617
 80025a0:	08002617 	.word	0x08002617
 80025a4:	08002617 	.word	0x08002617
 80025a8:	08002617 	.word	0x08002617
 80025ac:	080025c5 	.word	0x080025c5
 80025b0:	080025d9 	.word	0x080025d9
 80025b4:	4a79      	ldr	r2, [pc, #484]	; (800279c <HAL_GPIO_Init+0x2b4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025ba:	e02c      	b.n	8002616 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	623b      	str	r3, [r7, #32]
          break;
 80025c2:	e029      	b.n	8002618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	3304      	adds	r3, #4
 80025ca:	623b      	str	r3, [r7, #32]
          break;
 80025cc:	e024      	b.n	8002618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	3308      	adds	r3, #8
 80025d4:	623b      	str	r3, [r7, #32]
          break;
 80025d6:	e01f      	b.n	8002618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	330c      	adds	r3, #12
 80025de:	623b      	str	r3, [r7, #32]
          break;
 80025e0:	e01a      	b.n	8002618 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ea:	2304      	movs	r3, #4
 80025ec:	623b      	str	r3, [r7, #32]
          break;
 80025ee:	e013      	b.n	8002618 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f8:	2308      	movs	r3, #8
 80025fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	611a      	str	r2, [r3, #16]
          break;
 8002602:	e009      	b.n	8002618 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002604:	2308      	movs	r3, #8
 8002606:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	615a      	str	r2, [r3, #20]
          break;
 800260e:	e003      	b.n	8002618 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002610:	2300      	movs	r3, #0
 8002612:	623b      	str	r3, [r7, #32]
          break;
 8002614:	e000      	b.n	8002618 <HAL_GPIO_Init+0x130>
          break;
 8002616:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2bff      	cmp	r3, #255	; 0xff
 800261c:	d801      	bhi.n	8002622 <HAL_GPIO_Init+0x13a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	e001      	b.n	8002626 <HAL_GPIO_Init+0x13e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d802      	bhi.n	8002634 <HAL_GPIO_Init+0x14c>
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	e002      	b.n	800263a <HAL_GPIO_Init+0x152>
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	3b08      	subs	r3, #8
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	210f      	movs	r1, #15
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	401a      	ands	r2, r3
 800264c:	6a39      	ldr	r1, [r7, #32]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	431a      	orrs	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80b1 	beq.w	80027ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002668:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <HAL_GPIO_Init+0x2b8>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_GPIO_Init+0x2b8>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6193      	str	r3, [r2, #24]
 8002674:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_GPIO_Init+0x2b8>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002680:	4a48      	ldr	r2, [pc, #288]	; (80027a4 <HAL_GPIO_Init+0x2bc>)
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	3302      	adds	r3, #2
 8002688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	220f      	movs	r2, #15
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4013      	ands	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a40      	ldr	r2, [pc, #256]	; (80027a8 <HAL_GPIO_Init+0x2c0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d013      	beq.n	80026d4 <HAL_GPIO_Init+0x1ec>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a3f      	ldr	r2, [pc, #252]	; (80027ac <HAL_GPIO_Init+0x2c4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00d      	beq.n	80026d0 <HAL_GPIO_Init+0x1e8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a3e      	ldr	r2, [pc, #248]	; (80027b0 <HAL_GPIO_Init+0x2c8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d007      	beq.n	80026cc <HAL_GPIO_Init+0x1e4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a3d      	ldr	r2, [pc, #244]	; (80027b4 <HAL_GPIO_Init+0x2cc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d101      	bne.n	80026c8 <HAL_GPIO_Init+0x1e0>
 80026c4:	2303      	movs	r3, #3
 80026c6:	e006      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026c8:	2304      	movs	r3, #4
 80026ca:	e004      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e002      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026d4:	2300      	movs	r3, #0
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	f002 0203 	and.w	r2, r2, #3
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	4093      	lsls	r3, r2
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026e6:	492f      	ldr	r1, [pc, #188]	; (80027a4 <HAL_GPIO_Init+0x2bc>)
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002700:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	492c      	ldr	r1, [pc, #176]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800270e:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	43db      	mvns	r3, r3
 8002716:	4928      	ldr	r1, [pc, #160]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002718:	4013      	ands	r3, r2
 800271a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d006      	beq.n	8002736 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002728:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	4922      	ldr	r1, [pc, #136]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
 8002734:	e006      	b.n	8002744 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	43db      	mvns	r3, r3
 800273e:	491e      	ldr	r1, [pc, #120]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002740:	4013      	ands	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d006      	beq.n	800275e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	4918      	ldr	r1, [pc, #96]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
 800275c:	e006      	b.n	800276c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	43db      	mvns	r3, r3
 8002766:	4914      	ldr	r1, [pc, #80]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002768:	4013      	ands	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d021      	beq.n	80027bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	490e      	ldr	r1, [pc, #56]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
 8002784:	e021      	b.n	80027ca <HAL_GPIO_Init+0x2e2>
 8002786:	bf00      	nop
 8002788:	10320000 	.word	0x10320000
 800278c:	10310000 	.word	0x10310000
 8002790:	10220000 	.word	0x10220000
 8002794:	10210000 	.word	0x10210000
 8002798:	10120000 	.word	0x10120000
 800279c:	10110000 	.word	0x10110000
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40010000 	.word	0x40010000
 80027a8:	40010800 	.word	0x40010800
 80027ac:	40010c00 	.word	0x40010c00
 80027b0:	40011000 	.word	0x40011000
 80027b4:	40011400 	.word	0x40011400
 80027b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_GPIO_Init+0x304>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	4909      	ldr	r1, [pc, #36]	; (80027ec <HAL_GPIO_Init+0x304>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	3301      	adds	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f47f ae8e 	bne.w	80024fc <HAL_GPIO_Init+0x14>
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	372c      	adds	r7, #44	; 0x2c
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	40010400 	.word	0x40010400

080027f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e001      	b.n	8002812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	807b      	strh	r3, [r7, #2]
 800282a:	4613      	mov	r3, r2
 800282c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800282e:	787b      	ldrb	r3, [r7, #1]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002834:	887a      	ldrh	r2, [r7, #2]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800283a:	e003      	b.n	8002844 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	041a      	lsls	r2, r3, #16
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	611a      	str	r2, [r3, #16]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
	...

08002850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e12b      	b.n	8002aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe ffc4 	bl	8001804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028b4:	f001 f842 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 80028b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a81      	ldr	r2, [pc, #516]	; (8002ac4 <HAL_I2C_Init+0x274>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d807      	bhi.n	80028d4 <HAL_I2C_Init+0x84>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a80      	ldr	r2, [pc, #512]	; (8002ac8 <HAL_I2C_Init+0x278>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	bf94      	ite	ls
 80028cc:	2301      	movls	r3, #1
 80028ce:	2300      	movhi	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e006      	b.n	80028e2 <HAL_I2C_Init+0x92>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a7d      	ldr	r2, [pc, #500]	; (8002acc <HAL_I2C_Init+0x27c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	bf94      	ite	ls
 80028dc:	2301      	movls	r3, #1
 80028de:	2300      	movhi	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0e7      	b.n	8002aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a78      	ldr	r2, [pc, #480]	; (8002ad0 <HAL_I2C_Init+0x280>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	0c9b      	lsrs	r3, r3, #18
 80028f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a6a      	ldr	r2, [pc, #424]	; (8002ac4 <HAL_I2C_Init+0x274>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d802      	bhi.n	8002924 <HAL_I2C_Init+0xd4>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3301      	adds	r3, #1
 8002922:	e009      	b.n	8002938 <HAL_I2C_Init+0xe8>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	4a69      	ldr	r2, [pc, #420]	; (8002ad4 <HAL_I2C_Init+0x284>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	3301      	adds	r3, #1
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	430b      	orrs	r3, r1
 800293e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800294a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	495c      	ldr	r1, [pc, #368]	; (8002ac4 <HAL_I2C_Init+0x274>)
 8002954:	428b      	cmp	r3, r1
 8002956:	d819      	bhi.n	800298c <HAL_I2C_Init+0x13c>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e59      	subs	r1, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fbb1 f3f3 	udiv	r3, r1, r3
 8002966:	1c59      	adds	r1, r3, #1
 8002968:	f640 73fc 	movw	r3, #4092	; 0xffc
 800296c:	400b      	ands	r3, r1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_I2C_Init+0x138>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e59      	subs	r1, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002986:	e051      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 8002988:	2304      	movs	r3, #4
 800298a:	e04f      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d111      	bne.n	80029b8 <HAL_I2C_Init+0x168>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e012      	b.n	80029de <HAL_I2C_Init+0x18e>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1e58      	subs	r0, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	0099      	lsls	r1, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Init+0x196>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e022      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10e      	bne.n	8002a0c <HAL_I2C_Init+0x1bc>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1e58      	subs	r0, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	440b      	add	r3, r1
 80029fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0a:	e00f      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	0099      	lsls	r1, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	6809      	ldr	r1, [r1, #0]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6911      	ldr	r1, [r2, #16]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68d2      	ldr	r2, [r2, #12]
 8002a66:	4311      	orrs	r1, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	000186a0 	.word	0x000186a0
 8002ac8:	001e847f 	.word	0x001e847f
 8002acc:	003d08ff 	.word	0x003d08ff
 8002ad0:	431bde83 	.word	0x431bde83
 8002ad4:	10624dd3 	.word	0x10624dd3

08002ad8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	817b      	strh	r3, [r7, #10]
 8002aea:	460b      	mov	r3, r1
 8002aec:	813b      	strh	r3, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002af2:	f7ff f8f9 	bl	8001ce8 <HAL_GetTick>
 8002af6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	f040 80d9 	bne.w	8002cb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2319      	movs	r3, #25
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	496d      	ldr	r1, [pc, #436]	; (8002cc4 <HAL_I2C_Mem_Write+0x1ec>)
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f971 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e0cc      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_I2C_Mem_Write+0x56>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e0c5      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d007      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2221      	movs	r2, #33	; 0x21
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2240      	movs	r2, #64	; 0x40
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a3a      	ldr	r2, [r7, #32]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a4d      	ldr	r2, [pc, #308]	; (8002cc8 <HAL_I2C_Mem_Write+0x1f0>)
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b96:	88f8      	ldrh	r0, [r7, #6]
 8002b98:	893a      	ldrh	r2, [r7, #8]
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f890 	bl	8002ccc <I2C_RequestMemoryWrite>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d052      	beq.n	8002c58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e081      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fa36 	bl	800302c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d107      	bne.n	8002bde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e06b      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d11b      	bne.n	8002c58 <HAL_I2C_Mem_Write+0x180>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d017      	beq.n	8002c58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	781a      	ldrb	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1aa      	bne.n	8002bb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fa29 	bl	80030bc <I2C_WaitOnBTFFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d107      	bne.n	8002c88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e016      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	00100002 	.word	0x00100002
 8002cc8:	ffff0000 	.word	0xffff0000

08002ccc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	817b      	strh	r3, [r7, #10]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	813b      	strh	r3, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f878 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00d      	beq.n	8002d2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1c:	d103      	bne.n	8002d26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e05f      	b.n	8002dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d2a:	897b      	ldrh	r3, [r7, #10]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	6a3a      	ldr	r2, [r7, #32]
 8002d3e:	492d      	ldr	r1, [pc, #180]	; (8002df4 <I2C_RequestMemoryWrite+0x128>)
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f8d3 	bl	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e04c      	b.n	8002dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	6a39      	ldr	r1, [r7, #32]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f95e 	bl	800302c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00d      	beq.n	8002d92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d107      	bne.n	8002d8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e02b      	b.n	8002dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d105      	bne.n	8002da4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d98:	893b      	ldrh	r3, [r7, #8]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	611a      	str	r2, [r3, #16]
 8002da2:	e021      	b.n	8002de8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002da4:	893b      	ldrh	r3, [r7, #8]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db4:	6a39      	ldr	r1, [r7, #32]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f938 	bl	800302c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d107      	bne.n	8002dda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e005      	b.n	8002dea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dde:	893b      	ldrh	r3, [r7, #8]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	00010002 	.word	0x00010002

08002df8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e08:	e048      	b.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d044      	beq.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7fe ff69 	bl	8001ce8 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d139      	bne.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	0c1b      	lsrs	r3, r3, #16
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d10d      	bne.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	e00c      	b.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	43da      	mvns	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d116      	bne.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e023      	b.n	8002ee4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	0c1b      	lsrs	r3, r3, #16
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d10d      	bne.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	43da      	mvns	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	e00c      	b.n	8002edc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d093      	beq.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002efa:	e071      	b.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0a:	d123      	bne.n	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f043 0204 	orr.w	r2, r3, #4
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e067      	b.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d041      	beq.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5c:	f7fe fec4 	bl	8001ce8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d302      	bcc.n	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d136      	bne.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10c      	bne.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4013      	ands	r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bf14      	ite	ne
 8002f8e:	2301      	movne	r3, #1
 8002f90:	2300      	moveq	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	e00b      	b.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d016      	beq.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e021      	b.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	0c1b      	lsrs	r3, r3, #16
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10c      	bne.n	8003004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	43da      	mvns	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e00b      	b.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4013      	ands	r3, r2
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf14      	ite	ne
 8003016:	2301      	movne	r3, #1
 8003018:	2300      	moveq	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	f47f af6d 	bne.w	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003038:	e034      	b.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f886 	bl	800314c <I2C_IsAcknowledgeFailed>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e034      	b.n	80030b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d028      	beq.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003052:	f7fe fe49 	bl	8001ce8 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	429a      	cmp	r2, r3
 8003060:	d302      	bcc.n	8003068 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d11d      	bne.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b80      	cmp	r3, #128	; 0x80
 8003074:	d016      	beq.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e007      	b.n	80030b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	2b80      	cmp	r3, #128	; 0x80
 80030b0:	d1c3      	bne.n	800303a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c8:	e034      	b.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f83e 	bl	800314c <I2C_IsAcknowledgeFailed>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e034      	b.n	8003144 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d028      	beq.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7fe fe01 	bl	8001ce8 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11d      	bne.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d016      	beq.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e007      	b.n	8003144 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d1c3      	bne.n	80030ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	d11b      	bne.n	800319c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800316c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e272      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8087 	beq.w	80032d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031c8:	4b92      	ldr	r3, [pc, #584]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d00c      	beq.n	80031ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031d4:	4b8f      	ldr	r3, [pc, #572]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d112      	bne.n	8003206 <HAL_RCC_OscConfig+0x5e>
 80031e0:	4b8c      	ldr	r3, [pc, #560]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d10b      	bne.n	8003206 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ee:	4b89      	ldr	r3, [pc, #548]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d06c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x12c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d168      	bne.n	80032d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e24c      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x76>
 8003210:	4b80      	ldr	r3, [pc, #512]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a7f      	ldr	r2, [pc, #508]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	e02e      	b.n	800327c <HAL_RCC_OscConfig+0xd4>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x98>
 8003226:	4b7b      	ldr	r3, [pc, #492]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7a      	ldr	r2, [pc, #488]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 800322c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b78      	ldr	r3, [pc, #480]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a77      	ldr	r2, [pc, #476]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e01d      	b.n	800327c <HAL_RCC_OscConfig+0xd4>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0xbc>
 800324a:	4b72      	ldr	r3, [pc, #456]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a71      	ldr	r2, [pc, #452]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6e      	ldr	r2, [pc, #440]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0xd4>
 8003264:	4b6b      	ldr	r3, [pc, #428]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a6a      	ldr	r2, [pc, #424]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 800326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b68      	ldr	r3, [pc, #416]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a67      	ldr	r2, [pc, #412]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fe fd30 	bl	8001ce8 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800328c:	f7fe fd2c 	bl	8001ce8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e200      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b5d      	ldr	r3, [pc, #372]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0xe4>
 80032aa:	e014      	b.n	80032d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe fd1c 	bl	8001ce8 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b4:	f7fe fd18 	bl	8001ce8 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1ec      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	4b53      	ldr	r3, [pc, #332]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x10c>
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d063      	beq.n	80033aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032e2:	4b4c      	ldr	r3, [pc, #304]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032ee:	4b49      	ldr	r3, [pc, #292]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d11c      	bne.n	8003334 <HAL_RCC_OscConfig+0x18c>
 80032fa:	4b46      	ldr	r3, [pc, #280]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d116      	bne.n	8003334 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	4b43      	ldr	r3, [pc, #268]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_RCC_OscConfig+0x176>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e1c0      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331e:	4b3d      	ldr	r3, [pc, #244]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4939      	ldr	r1, [pc, #228]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003332:	e03a      	b.n	80033aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800333c:	4b36      	ldr	r3, [pc, #216]	; (8003418 <HAL_RCC_OscConfig+0x270>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7fe fcd1 	bl	8001ce8 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334a:	f7fe fccd 	bl	8001ce8 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1a1      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	4b2d      	ldr	r3, [pc, #180]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b2a      	ldr	r3, [pc, #168]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4927      	ldr	r1, [pc, #156]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003378:	4313      	orrs	r3, r2
 800337a:	600b      	str	r3, [r1, #0]
 800337c:	e015      	b.n	80033aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337e:	4b26      	ldr	r3, [pc, #152]	; (8003418 <HAL_RCC_OscConfig+0x270>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7fe fcb0 	bl	8001ce8 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338c:	f7fe fcac 	bl	8001ce8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e180      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d03a      	beq.n	800342c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d019      	beq.n	80033f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033be:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_RCC_OscConfig+0x274>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c4:	f7fe fc90 	bl	8001ce8 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033cc:	f7fe fc8c 	bl	8001ce8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e160      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ea:	2001      	movs	r0, #1
 80033ec:	f000 face 	bl	800398c <RCC_Delay>
 80033f0:	e01c      	b.n	800342c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <HAL_RCC_OscConfig+0x274>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f8:	f7fe fc76 	bl	8001ce8 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fe:	e00f      	b.n	8003420 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003400:	f7fe fc72 	bl	8001ce8 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d908      	bls.n	8003420 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e146      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	42420000 	.word	0x42420000
 800341c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003420:	4b92      	ldr	r3, [pc, #584]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e9      	bne.n	8003400 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a6 	beq.w	8003586 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343e:	4b8b      	ldr	r3, [pc, #556]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10d      	bne.n	8003466 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344a:	4b88      	ldr	r3, [pc, #544]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4a87      	ldr	r2, [pc, #540]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003454:	61d3      	str	r3, [r2, #28]
 8003456:	4b85      	ldr	r3, [pc, #532]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003466:	4b82      	ldr	r3, [pc, #520]	; (8003670 <HAL_RCC_OscConfig+0x4c8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d118      	bne.n	80034a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003472:	4b7f      	ldr	r3, [pc, #508]	; (8003670 <HAL_RCC_OscConfig+0x4c8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a7e      	ldr	r2, [pc, #504]	; (8003670 <HAL_RCC_OscConfig+0x4c8>)
 8003478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347e:	f7fe fc33 	bl	8001ce8 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003486:	f7fe fc2f 	bl	8001ce8 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b64      	cmp	r3, #100	; 0x64
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e103      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	4b75      	ldr	r3, [pc, #468]	; (8003670 <HAL_RCC_OscConfig+0x4c8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d106      	bne.n	80034ba <HAL_RCC_OscConfig+0x312>
 80034ac:	4b6f      	ldr	r3, [pc, #444]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4a6e      	ldr	r2, [pc, #440]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6213      	str	r3, [r2, #32]
 80034b8:	e02d      	b.n	8003516 <HAL_RCC_OscConfig+0x36e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10c      	bne.n	80034dc <HAL_RCC_OscConfig+0x334>
 80034c2:	4b6a      	ldr	r3, [pc, #424]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4a69      	ldr	r2, [pc, #420]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6213      	str	r3, [r2, #32]
 80034ce:	4b67      	ldr	r3, [pc, #412]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	4a66      	ldr	r2, [pc, #408]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	f023 0304 	bic.w	r3, r3, #4
 80034d8:	6213      	str	r3, [r2, #32]
 80034da:	e01c      	b.n	8003516 <HAL_RCC_OscConfig+0x36e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d10c      	bne.n	80034fe <HAL_RCC_OscConfig+0x356>
 80034e4:	4b61      	ldr	r3, [pc, #388]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4a60      	ldr	r2, [pc, #384]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	f043 0304 	orr.w	r3, r3, #4
 80034ee:	6213      	str	r3, [r2, #32]
 80034f0:	4b5e      	ldr	r3, [pc, #376]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4a5d      	ldr	r2, [pc, #372]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6213      	str	r3, [r2, #32]
 80034fc:	e00b      	b.n	8003516 <HAL_RCC_OscConfig+0x36e>
 80034fe:	4b5b      	ldr	r3, [pc, #364]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	4a5a      	ldr	r2, [pc, #360]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	6213      	str	r3, [r2, #32]
 800350a:	4b58      	ldr	r3, [pc, #352]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	4a57      	ldr	r2, [pc, #348]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003510:	f023 0304 	bic.w	r3, r3, #4
 8003514:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d015      	beq.n	800354a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fe fbe3 	bl	8001ce8 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fe fbdf 	bl	8001ce8 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e0b1      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	4b4b      	ldr	r3, [pc, #300]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ee      	beq.n	8003526 <HAL_RCC_OscConfig+0x37e>
 8003548:	e014      	b.n	8003574 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354a:	f7fe fbcd 	bl	8001ce8 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fe fbc9 	bl	8001ce8 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e09b      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	4b40      	ldr	r3, [pc, #256]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ee      	bne.n	8003552 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d105      	bne.n	8003586 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357a:	4b3c      	ldr	r3, [pc, #240]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	4a3b      	ldr	r2, [pc, #236]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003584:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8087 	beq.w	800369e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003590:	4b36      	ldr	r3, [pc, #216]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b08      	cmp	r3, #8
 800359a:	d061      	beq.n	8003660 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d146      	bne.n	8003632 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a4:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035aa:	f7fe fb9d 	bl	8001ce8 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b2:	f7fe fb99 	bl	8001ce8 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e06d      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c4:	4b29      	ldr	r3, [pc, #164]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f0      	bne.n	80035b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d8:	d108      	bne.n	80035ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035da:	4b24      	ldr	r3, [pc, #144]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	4921      	ldr	r1, [pc, #132]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ec:	4b1f      	ldr	r3, [pc, #124]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a19      	ldr	r1, [r3, #32]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	430b      	orrs	r3, r1
 80035fe:	491b      	ldr	r1, [pc, #108]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003606:	2201      	movs	r2, #1
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe fb6d 	bl	8001ce8 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe fb69 	bl	8001ce8 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e03d      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x46a>
 8003630:	e035      	b.n	800369e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fe fb56 	bl	8001ce8 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe fb52 	bl	8001ce8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e026      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x498>
 800365e:	e01e      	b.n	800369e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e019      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
 800366c:	40021000 	.word	0x40021000
 8003670:	40007000 	.word	0x40007000
 8003674:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	429a      	cmp	r2, r3
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000

080036ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0d0      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c0:	4b6a      	ldr	r3, [pc, #424]	; (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d910      	bls.n	80036f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b67      	ldr	r3, [pc, #412]	; (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 0207 	bic.w	r2, r3, #7
 80036d6:	4965      	ldr	r1, [pc, #404]	; (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b63      	ldr	r3, [pc, #396]	; (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0b8      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003708:	4b59      	ldr	r3, [pc, #356]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a58      	ldr	r2, [pc, #352]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003712:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003720:	4b53      	ldr	r3, [pc, #332]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a52      	ldr	r2, [pc, #328]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800372a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372c:	4b50      	ldr	r3, [pc, #320]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	494d      	ldr	r1, [pc, #308]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d040      	beq.n	80037cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b47      	ldr	r3, [pc, #284]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d115      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e07f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	4b41      	ldr	r3, [pc, #260]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e073      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e06b      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378a:	4b39      	ldr	r3, [pc, #228]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f023 0203 	bic.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4936      	ldr	r1, [pc, #216]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800379c:	f7fe faa4 	bl	8001ce8 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fe faa0 	bl	8001ce8 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e053      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 020c 	and.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1eb      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b27      	ldr	r3, [pc, #156]	; (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d210      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b24      	ldr	r3, [pc, #144]	; (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 0207 	bic.w	r2, r3, #7
 80037e2:	4922      	ldr	r1, [pc, #136]	; (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e032      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4916      	ldr	r1, [pc, #88]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003826:	4b12      	ldr	r3, [pc, #72]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	490e      	ldr	r1, [pc, #56]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800383a:	f000 f821 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 800383e:	4602      	mov	r2, r0
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	490a      	ldr	r1, [pc, #40]	; (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 800384c:	5ccb      	ldrb	r3, [r1, r3]
 800384e:	fa22 f303 	lsr.w	r3, r2, r3
 8003852:	4a09      	ldr	r2, [pc, #36]	; (8003878 <HAL_RCC_ClockConfig+0x1cc>)
 8003854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_RCC_ClockConfig+0x1d0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fa02 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40022000 	.word	0x40022000
 8003870:	40021000 	.word	0x40021000
 8003874:	08009124 	.word	0x08009124
 8003878:	20000000 	.word	0x20000000
 800387c:	20000004 	.word	0x20000004

08003880 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800389a:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <HAL_RCC_GetSysClockFreq+0x94>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d002      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x30>
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0x36>
 80038ae:	e027      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_RCC_GetSysClockFreq+0x98>)
 80038b2:	613b      	str	r3, [r7, #16]
      break;
 80038b4:	e027      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	0c9b      	lsrs	r3, r3, #18
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	4a17      	ldr	r2, [pc, #92]	; (800391c <HAL_RCC_GetSysClockFreq+0x9c>)
 80038c0:	5cd3      	ldrb	r3, [r2, r3]
 80038c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d010      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ce:	4b11      	ldr	r3, [pc, #68]	; (8003914 <HAL_RCC_GetSysClockFreq+0x94>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	0c5b      	lsrs	r3, r3, #17
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	4a11      	ldr	r2, [pc, #68]	; (8003920 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038da:	5cd3      	ldrb	r3, [r2, r3]
 80038dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a0d      	ldr	r2, [pc, #52]	; (8003918 <HAL_RCC_GetSysClockFreq+0x98>)
 80038e2:	fb03 f202 	mul.w	r2, r3, r2
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e004      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a0c      	ldr	r2, [pc, #48]	; (8003924 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	613b      	str	r3, [r7, #16]
      break;
 80038fe:	e002      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_GetSysClockFreq+0x98>)
 8003902:	613b      	str	r3, [r7, #16]
      break;
 8003904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003906:	693b      	ldr	r3, [r7, #16]
}
 8003908:	4618      	mov	r0, r3
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	007a1200 	.word	0x007a1200
 800391c:	0800913c 	.word	0x0800913c
 8003920:	0800914c 	.word	0x0800914c
 8003924:	003d0900 	.word	0x003d0900

08003928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b02      	ldr	r3, [pc, #8]	; (8003938 <HAL_RCC_GetHCLKFreq+0x10>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	20000000 	.word	0x20000000

0800393c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003940:	f7ff fff2 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	0a1b      	lsrs	r3, r3, #8
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4903      	ldr	r1, [pc, #12]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40021000 	.word	0x40021000
 8003960:	08009134 	.word	0x08009134

08003964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003968:	f7ff ffde 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	0adb      	lsrs	r3, r3, #11
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4903      	ldr	r1, [pc, #12]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	08009134 	.word	0x08009134

0800398c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <RCC_Delay+0x34>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <RCC_Delay+0x38>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0a5b      	lsrs	r3, r3, #9
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039a8:	bf00      	nop
  }
  while (Delay --);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	60fa      	str	r2, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1f9      	bne.n	80039a8 <RCC_Delay+0x1c>
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	20000000 	.word	0x20000000
 80039c4:	10624dd3 	.word	0x10624dd3

080039c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d07d      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039e4:	2300      	movs	r3, #0
 80039e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e8:	4b4f      	ldr	r3, [pc, #316]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f4:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	4a4b      	ldr	r2, [pc, #300]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fe:	61d3      	str	r3, [r2, #28]
 8003a00:	4b49      	ldr	r3, [pc, #292]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a10:	4b46      	ldr	r3, [pc, #280]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d118      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1c:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a42      	ldr	r2, [pc, #264]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a28:	f7fe f95e 	bl	8001ce8 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	e008      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a30:	f7fe f95a 	bl	8001ce8 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e06d      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a42:	4b3a      	ldr	r3, [pc, #232]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a4e:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d02e      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d027      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a76:	4b2e      	ldr	r3, [pc, #184]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a82:	4a29      	ldr	r2, [pc, #164]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d014      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fe f929 	bl	8001ce8 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fe f925 	bl	8001ce8 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e036      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ee      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003abc:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4917      	ldr	r1, [pc, #92]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ade:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	490b      	ldr	r1, [pc, #44]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4904      	ldr	r1, [pc, #16]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40007000 	.word	0x40007000
 8003b30:	42420440 	.word	0x42420440

08003b34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e076      	b.n	8003c34 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d108      	bne.n	8003b60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b56:	d009      	beq.n	8003b6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61da      	str	r2, [r3, #28]
 8003b5e:	e005      	b.n	8003b6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd fe8c 	bl	80018a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	ea42 0103 	orr.w	r1, r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	0c1a      	lsrs	r2, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f002 0204 	and.w	r2, r2, #4
 8003c12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_SPI_Transmit+0x22>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e12d      	b.n	8003eba <HAL_SPI_Transmit+0x27e>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c66:	f7fe f83f 	bl	8001ce8 <HAL_GetTick>
 8003c6a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d002      	beq.n	8003c82 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c80:	e116      	b.n	8003eb0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <HAL_SPI_Transmit+0x52>
 8003c88:	88fb      	ldrh	r3, [r7, #6]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c92:	e10d      	b.n	8003eb0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2203      	movs	r2, #3
 8003c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	88fa      	ldrh	r2, [r7, #6]
 8003cac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	88fa      	ldrh	r2, [r7, #6]
 8003cb2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cda:	d10f      	bne.n	8003cfc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cfa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d007      	beq.n	8003d1a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d22:	d14f      	bne.n	8003dc4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_SPI_Transmit+0xf6>
 8003d2c:	8afb      	ldrh	r3, [r7, #22]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d142      	bne.n	8003db8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	881a      	ldrh	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	1c9a      	adds	r2, r3, #2
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d56:	e02f      	b.n	8003db8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d112      	bne.n	8003d8c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	1c9a      	adds	r2, r3, #2
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d8a:	e015      	b.n	8003db8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d8c:	f7fd ffac 	bl	8001ce8 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d803      	bhi.n	8003da4 <HAL_SPI_Transmit+0x168>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d102      	bne.n	8003daa <HAL_SPI_Transmit+0x16e>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003db6:	e07b      	b.n	8003eb0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1ca      	bne.n	8003d58 <HAL_SPI_Transmit+0x11c>
 8003dc2:	e050      	b.n	8003e66 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_SPI_Transmit+0x196>
 8003dcc:	8afb      	ldrh	r3, [r7, #22]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d144      	bne.n	8003e5c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	7812      	ldrb	r2, [r2, #0]
 8003dde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003df8:	e030      	b.n	8003e5c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d113      	bne.n	8003e30 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	7812      	ldrb	r2, [r2, #0]
 8003e14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e2e:	e015      	b.n	8003e5c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e30:	f7fd ff5a 	bl	8001ce8 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d803      	bhi.n	8003e48 <HAL_SPI_Transmit+0x20c>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d102      	bne.n	8003e4e <HAL_SPI_Transmit+0x212>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e5a:	e029      	b.n	8003eb0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1c9      	bne.n	8003dfa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	6839      	ldr	r1, [r7, #0]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f8b2 	bl	8003fd4 <SPI_EndRxTxTransaction>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e003      	b.n	8003eb0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003eb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ed4:	f7fd ff08 	bl	8001ce8 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ee4:	f7fd ff00 	bl	8001ce8 <HAL_GetTick>
 8003ee8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eea:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	015b      	lsls	r3, r3, #5
 8003ef0:	0d1b      	lsrs	r3, r3, #20
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	fb02 f303 	mul.w	r3, r2, r3
 8003ef8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003efa:	e054      	b.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f02:	d050      	beq.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f04:	f7fd fef0 	bl	8001ce8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d902      	bls.n	8003f1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d13d      	bne.n	8003f96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f32:	d111      	bne.n	8003f58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3c:	d004      	beq.n	8003f48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f46:	d107      	bne.n	8003f58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f60:	d10f      	bne.n	8003f82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e017      	b.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	bf0c      	ite	eq
 8003fb6:	2301      	moveq	r3, #1
 8003fb8:	2300      	movne	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d19b      	bne.n	8003efc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000000 	.word	0x20000000

08003fd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2180      	movs	r1, #128	; 0x80
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7ff ff6a 	bl	8003ec4 <SPI_WaitFlagStateUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e000      	b.n	8004008 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e042      	b.n	80040a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fd fc7e 	bl	8001938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2224      	movs	r2, #36	; 0x24
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fdfb 	bl	8004c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	; 0x28
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	4613      	mov	r3, r2
 80040be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d16d      	bne.n	80041ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_UART_Transmit+0x2c>
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e066      	b.n	80041ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2221      	movs	r2, #33	; 0x21
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ee:	f7fd fdfb 	bl	8001ce8 <HAL_GetTick>
 80040f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004108:	d108      	bne.n	800411c <HAL_UART_Transmit+0x6c>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d104      	bne.n	800411c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e003      	b.n	8004124 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004124:	e02a      	b.n	800417c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fb4a 	bl	80047ca <UART_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e036      	b.n	80041ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	3302      	adds	r3, #2
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	e007      	b.n	800416e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3301      	adds	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1cf      	bne.n	8004126 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2200      	movs	r2, #0
 800418e:	2140      	movs	r1, #64	; 0x40
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 fb1a 	bl	80047ca <UART_WaitOnFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e006      	b.n	80041ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b08c      	sub	sp, #48	; 0x30
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	4613      	mov	r3, r2
 80041c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d14a      	bne.n	8004266 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e043      	b.n	8004268 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fb57 	bl	80048a6 <UART_Start_Receive_IT>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80041fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004202:	2b00      	cmp	r3, #0
 8004204:	d12c      	bne.n	8004260 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	2b01      	cmp	r3, #1
 800420c:	d125      	bne.n	800425a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800420e:	2300      	movs	r3, #0
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	617b      	str	r3, [r7, #20]
   return(result);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f043 0310 	orr.w	r3, r3, #16
 800423a:	62bb      	str	r3, [r7, #40]	; 0x28
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004244:	627a      	str	r2, [r7, #36]	; 0x24
 8004246:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6a39      	ldr	r1, [r7, #32]
 800424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	61fb      	str	r3, [r7, #28]
   return(result);
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e5      	bne.n	8004224 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004258:	e002      	b.n	8004260 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004264:	e000      	b.n	8004268 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004266:	2302      	movs	r3, #2
  }
}
 8004268:	4618      	mov	r0, r3
 800426a:	3730      	adds	r7, #48	; 0x30
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b0ba      	sub	sp, #232	; 0xe8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004296:	2300      	movs	r3, #0
 8004298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800429c:	2300      	movs	r3, #0
 800429e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10f      	bne.n	80042d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HAL_UART_IRQHandler+0x66>
 80042c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fbff 	bl	8004ad2 <UART_Receive_IT>
      return;
 80042d4:	e25b      	b.n	800478e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80de 	beq.w	800449c <HAL_UART_IRQHandler+0x22c>
 80042e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d106      	bne.n	80042fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80d1 	beq.w	800449c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_UART_IRQHandler+0xae>
 8004306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	f043 0201 	orr.w	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_UART_IRQHandler+0xd2>
 800432a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f043 0202 	orr.w	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <HAL_UART_IRQHandler+0xf6>
 800434e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f043 0204 	orr.w	r2, r3, #4
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d011      	beq.n	8004396 <HAL_UART_IRQHandler+0x126>
 8004372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d105      	bne.n	800438a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800437e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f043 0208 	orr.w	r2, r3, #8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 81f2 	beq.w	8004784 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_UART_IRQHandler+0x14e>
 80043ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fb8a 	bl	8004ad2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <HAL_UART_IRQHandler+0x17a>
 80043e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d04f      	beq.n	800448a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa94 	bl	8004918 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d041      	beq.n	8004482 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004414:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3314      	adds	r3, #20
 8004426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800442a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800442e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004436:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1d9      	bne.n	80043fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d013      	beq.n	800447a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	4a7e      	ldr	r2, [pc, #504]	; (8004650 <HAL_UART_IRQHandler+0x3e0>)
 8004458:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	4618      	mov	r0, r3
 8004460:	f7fd ffca 	bl	80023f8 <HAL_DMA_Abort_IT>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d016      	beq.n	8004498 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004474:	4610      	mov	r0, r2
 8004476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004478:	e00e      	b.n	8004498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f99c 	bl	80047b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004480:	e00a      	b.n	8004498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f998 	bl	80047b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004488:	e006      	b.n	8004498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f994 	bl	80047b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004496:	e175      	b.n	8004784 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	bf00      	nop
    return;
 800449a:	e173      	b.n	8004784 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f040 814f 	bne.w	8004744 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 8148 	beq.w	8004744 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8141 	beq.w	8004744 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80b6 	beq.w	8004654 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8145 	beq.w	8004788 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004506:	429a      	cmp	r2, r3
 8004508:	f080 813e 	bcs.w	8004788 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004512:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b20      	cmp	r3, #32
 800451c:	f000 8088 	beq.w	8004630 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004536:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800453a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800453e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800454c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004558:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004564:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1d9      	bne.n	8004520 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3314      	adds	r3, #20
 8004572:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800457c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3314      	adds	r3, #20
 800458c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004590:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004594:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004598:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e1      	bne.n	800456c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3314      	adds	r3, #20
 80045ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3314      	adds	r3, #20
 80045c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e3      	bne.n	80045a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	330c      	adds	r3, #12
 80045f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004600:	f023 0310 	bic.w	r3, r3, #16
 8004604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004612:	65ba      	str	r2, [r7, #88]	; 0x58
 8004614:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e3      	bne.n	80045ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	4618      	mov	r0, r3
 800462c:	f7fd fea9 	bl	8002382 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800463e:	b29b      	uxth	r3, r3
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	b29b      	uxth	r3, r3
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd f854 	bl	80016f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800464c:	e09c      	b.n	8004788 <HAL_UART_IRQHandler+0x518>
 800464e:	bf00      	nop
 8004650:	080049dd 	.word	0x080049dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800465c:	b29b      	uxth	r3, r3
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 808e 	beq.w	800478c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8089 	beq.w	800478c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800468a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004690:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800469e:	647a      	str	r2, [r7, #68]	; 0x44
 80046a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e3      	bne.n	800467a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3314      	adds	r3, #20
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	623b      	str	r3, [r7, #32]
   return(result);
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	f023 0301 	bic.w	r3, r3, #1
 80046c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046d6:	633a      	str	r2, [r7, #48]	; 0x30
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e3      	bne.n	80046b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60fb      	str	r3, [r7, #12]
   return(result);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800471c:	61fa      	str	r2, [r7, #28]
 800471e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	69b9      	ldr	r1, [r7, #24]
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	617b      	str	r3, [r7, #20]
   return(result);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e3      	bne.n	80046f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004736:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7fc ffd9 	bl	80016f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004742:	e023      	b.n	800478c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d009      	beq.n	8004764 <HAL_UART_IRQHandler+0x4f4>
 8004750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f951 	bl	8004a04 <UART_Transmit_IT>
    return;
 8004762:	e014      	b.n	800478e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00e      	beq.n	800478e <HAL_UART_IRQHandler+0x51e>
 8004770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f990 	bl	8004aa2 <UART_EndTransmit_IT>
    return;
 8004782:	e004      	b.n	800478e <HAL_UART_IRQHandler+0x51e>
    return;
 8004784:	bf00      	nop
 8004786:	e002      	b.n	800478e <HAL_UART_IRQHandler+0x51e>
      return;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <HAL_UART_IRQHandler+0x51e>
      return;
 800478c:	bf00      	nop
  }
}
 800478e:	37e8      	adds	r7, #232	; 0xe8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr

080047a6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr

080047ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b090      	sub	sp, #64	; 0x40
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	4613      	mov	r3, r2
 80047d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047da:	e050      	b.n	800487e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d04c      	beq.n	800487e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <UART_WaitOnFlagUntilTimeout+0x30>
 80047ea:	f7fd fa7d 	bl	8001ce8 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d241      	bcs.n	800487e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	330c      	adds	r3, #12
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	330c      	adds	r3, #12
 8004818:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800481a:	637a      	str	r2, [r7, #52]	; 0x34
 800481c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e5      	bne.n	80047fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3314      	adds	r3, #20
 8004834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	613b      	str	r3, [r7, #16]
   return(result);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	63bb      	str	r3, [r7, #56]	; 0x38
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3314      	adds	r3, #20
 800484c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800484e:	623a      	str	r2, [r7, #32]
 8004850:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	69f9      	ldr	r1, [r7, #28]
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	61bb      	str	r3, [r7, #24]
   return(result);
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e5      	bne.n	800482e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e00f      	b.n	800489e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4013      	ands	r3, r2
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	429a      	cmp	r2, r3
 800489a:	d09f      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3740      	adds	r7, #64	; 0x40
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	4613      	mov	r3, r2
 80048b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	88fa      	ldrh	r2, [r7, #6]
 80048be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2222      	movs	r2, #34	; 0x22
 80048d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0220 	orr.w	r2, r2, #32
 800490a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr

08004918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004918:	b480      	push	{r7}
 800491a:	b095      	sub	sp, #84	; 0x54
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004940:	643a      	str	r2, [r7, #64]	; 0x40
 8004942:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3314      	adds	r3, #20
 800495a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	61fb      	str	r3, [r7, #28]
   return(result);
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	64bb      	str	r3, [r7, #72]	; 0x48
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3314      	adds	r3, #20
 8004972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004974:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800497a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e5      	bne.n	8004954 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	2b01      	cmp	r3, #1
 800498e:	d119      	bne.n	80049c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	60bb      	str	r3, [r7, #8]
   return(result);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f023 0310 	bic.w	r3, r3, #16
 80049a6:	647b      	str	r3, [r7, #68]	; 0x44
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049b0:	61ba      	str	r2, [r7, #24]
 80049b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	6979      	ldr	r1, [r7, #20]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	613b      	str	r3, [r7, #16]
   return(result);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e5      	bne.n	8004990 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049d2:	bf00      	nop
 80049d4:	3754      	adds	r7, #84	; 0x54
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7ff fede 	bl	80047b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b21      	cmp	r3, #33	; 0x21
 8004a16:	d13e      	bne.n	8004a96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a20:	d114      	bne.n	8004a4c <UART_Transmit_IT+0x48>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d110      	bne.n	8004a4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	1c9a      	adds	r2, r3, #2
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]
 8004a4a:	e008      	b.n	8004a5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	1c59      	adds	r1, r3, #1
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6211      	str	r1, [r2, #32]
 8004a56:	781a      	ldrb	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10f      	bne.n	8004a92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	e000      	b.n	8004a98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
  }
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff fe66 	bl	8004794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b08c      	sub	sp, #48	; 0x30
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b22      	cmp	r3, #34	; 0x22
 8004ae4:	f040 80ae 	bne.w	8004c44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d117      	bne.n	8004b22 <UART_Receive_IT+0x50>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d113      	bne.n	8004b22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	1c9a      	adds	r2, r3, #2
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b20:	e026      	b.n	8004b70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b34:	d007      	beq.n	8004b46 <UART_Receive_IT+0x74>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <UART_Receive_IT+0x82>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e008      	b.n	8004b66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d15d      	bne.n	8004c40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0220 	bic.w	r2, r2, #32
 8004b92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d135      	bne.n	8004c36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	613b      	str	r3, [r7, #16]
   return(result);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f023 0310 	bic.w	r3, r3, #16
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf0:	623a      	str	r2, [r7, #32]
 8004bf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	69f9      	ldr	r1, [r7, #28]
 8004bf6:	6a3a      	ldr	r2, [r7, #32]
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e5      	bne.n	8004bd0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	d10a      	bne.n	8004c28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fc fd60 	bl	80016f4 <HAL_UARTEx_RxEventCallback>
 8004c34:	e002      	b.n	8004c3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff fdb5 	bl	80047a6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e002      	b.n	8004c46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e000      	b.n	8004c46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c44:	2302      	movs	r3, #2
  }
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3730      	adds	r7, #48	; 0x30
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c8a:	f023 030c 	bic.w	r3, r3, #12
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	430b      	orrs	r3, r1
 8004c96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a2c      	ldr	r2, [pc, #176]	; (8004d64 <UART_SetConfig+0x114>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d103      	bne.n	8004cc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cb8:	f7fe fe54 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	e002      	b.n	8004cc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cc0:	f7fe fe3c 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 8004cc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	009a      	lsls	r2, r3, #2
 8004cd0:	441a      	add	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cdc:	4a22      	ldr	r2, [pc, #136]	; (8004d68 <UART_SetConfig+0x118>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	0119      	lsls	r1, r3, #4
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	009a      	lsls	r2, r3, #2
 8004cf0:	441a      	add	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <UART_SetConfig+0x118>)
 8004cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	2064      	movs	r0, #100	; 0x64
 8004d06:	fb00 f303 	mul.w	r3, r0, r3
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	3332      	adds	r3, #50	; 0x32
 8004d10:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <UART_SetConfig+0x118>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d1c:	4419      	add	r1, r3
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009a      	lsls	r2, r3, #2
 8004d28:	441a      	add	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <UART_SetConfig+0x118>)
 8004d36:	fba3 0302 	umull	r0, r3, r3, r2
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	2064      	movs	r0, #100	; 0x64
 8004d3e:	fb00 f303 	mul.w	r3, r0, r3
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	3332      	adds	r3, #50	; 0x32
 8004d48:	4a07      	ldr	r2, [pc, #28]	; (8004d68 <UART_SetConfig+0x118>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	f003 020f 	and.w	r2, r3, #15
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	440a      	add	r2, r1
 8004d5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40013800 	.word	0x40013800
 8004d68:	51eb851f 	.word	0x51eb851f
 8004d6c:	00000000 	.word	0x00000000

08004d70 <AWG_Load_Waveform>:
#include "math.h"

#define MaxDepth 2048 // max AWG samples

void AWG_Load_Waveform(AWG_setup_struct AWG1)
{
 8004d70:	b084      	sub	sp, #16
 8004d72:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004d7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOLA_enable_features(AWG_EN, 0); // disable AWG
 8004d82:	2100      	movs	r1, #0
 8004d84:	2002      	movs	r0, #2
 8004d86:	f000 fb45 	bl	8005414 <LOLA_enable_features>

	uint8_t byte[4];
	int16_t data;

	uint16_t depth = trimInt((int)round(DACmaxFreq/AWG1.Freq), 1, (MaxDepth-1));
 8004d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d8e:	a1b0      	add	r1, pc, #704	; (adr r1, 8005050 <AWG_Load_Waveform+0x2e0>)
 8004d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d94:	f7fb fcca 	bl	800072c <__aeabi_ddiv>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f003 fbc0 	bl	8008524 <round>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4610      	mov	r0, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	f7fb fe44 	bl	8000a38 <__aeabi_d2iz>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004db6:	2101      	movs	r1, #1
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fe9b 	bl	8005af4 <trimInt>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	827b      	strh	r3, [r7, #18]


	uint16_t DepthPos = trimInt((int)round(depth*AWG1.DutyCycle/100), 1, (MaxDepth-1));
 8004dc2:	8a7b      	ldrh	r3, [r7, #18]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fb ff89 	bl	8000cdc <__aeabi_i2f>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	f7fb ffd7 	bl	8000d84 <__aeabi_fmul>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	49a1      	ldr	r1, [pc, #644]	; (8005060 <AWG_Load_Waveform+0x2f0>)
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fc f886 	bl	8000eec <__aeabi_fdiv>
 8004de0:	4603      	mov	r3, r0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fb fb20 	bl	8000428 <__aeabi_f2d>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	f003 fb98 	bl	8008524 <round>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4610      	mov	r0, r2
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	f7fb fe1c 	bl	8000a38 <__aeabi_d2iz>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004e06:	2101      	movs	r1, #1
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fe73 	bl	8005af4 <trimInt>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	823b      	strh	r3, [r7, #16]
	uint16_t DepthNeg = trimInt((int)(depth-DepthPos), 1, (MaxDepth-1));
 8004e12:	8a7a      	ldrh	r2, [r7, #18]
 8004e14:	8a3b      	ldrh	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fe68 	bl	8005af4 <trimInt>
 8004e24:	4603      	mov	r3, r0
 8004e26:	81fb      	strh	r3, [r7, #14]

	// setting sample count
	byte[0] = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	703b      	strb	r3, [r7, #0]
	byte[1] = (uint8_t)((depth>>8)&0x00ff);
 8004e2c:	8a7b      	ldrh	r3, [r7, #18]
 8004e2e:	0a1b      	lsrs	r3, r3, #8
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	707b      	strb	r3, [r7, #1]
	byte[2] = (uint8_t)(depth&0x00ff);
 8004e36:	8a7b      	ldrh	r3, [r7, #18]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	70bb      	strb	r3, [r7, #2]
	byte[3] = (uint8_t)AWG_MAXADRESS;
 8004e3c:	2306      	movs	r3, #6
 8004e3e:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8004e40:	4639      	mov	r1, r7
 8004e42:	2364      	movs	r3, #100	; 0x64
 8004e44:	2204      	movs	r2, #4
 8004e46:	4887      	ldr	r0, [pc, #540]	; (8005064 <AWG_Load_Waveform+0x2f4>)
 8004e48:	f7fe fef8 	bl	8003c3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2110      	movs	r1, #16
 8004e50:	4885      	ldr	r0, [pc, #532]	; (8005068 <AWG_Load_Waveform+0x2f8>)
 8004e52:	f7fd fce4 	bl	800281e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8004e56:	2201      	movs	r2, #1
 8004e58:	2110      	movs	r1, #16
 8004e5a:	4883      	ldr	r0, [pc, #524]	; (8005068 <AWG_Load_Waveform+0x2f8>)
 8004e5c:	f7fd fcdf 	bl	800281e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8004e60:	2200      	movs	r2, #0
 8004e62:	2110      	movs	r1, #16
 8004e64:	4880      	ldr	r0, [pc, #512]	; (8005068 <AWG_Load_Waveform+0x2f8>)
 8004e66:	f7fd fcda 	bl	800281e <HAL_GPIO_WritePin>

	//Setting up clock
	uint32_t D = (uint32_t)round(MCLKfreq/(depth*AWG1.Freq));
 8004e6a:	8a7b      	ldrh	r3, [r7, #18]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fb fac9 	bl	8000404 <__aeabi_i2d>
 8004e72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e76:	f7fb fb2f 	bl	80004d8 <__aeabi_dmul>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	a176      	add	r1, pc, #472	; (adr r1, 8005058 <AWG_Load_Waveform+0x2e8>)
 8004e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e84:	f7fb fc52 	bl	800072c <__aeabi_ddiv>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	f003 fb48 	bl	8008524 <round>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f7fb fdf4 	bl	8000a88 <__aeabi_d2uiz>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	60bb      	str	r3, [r7, #8]

	data = D;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	82fb      	strh	r3, [r7, #22]

	byte[0] = (uint8_t)((data>>16)&0x00ff);
 8004ea8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004eac:	141b      	asrs	r3, r3, #16
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	703b      	strb	r3, [r7, #0]
	byte[1] = (uint8_t)((data>>8)&0x00ff);
 8004eb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004eb6:	121b      	asrs	r3, r3, #8
 8004eb8:	b21b      	sxth	r3, r3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	707b      	strb	r3, [r7, #1]
	byte[2] = (uint8_t)(data&0x00ff);
 8004ebe:	8afb      	ldrh	r3, [r7, #22]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	70bb      	strb	r3, [r7, #2]
	byte[3] = (uint8_t)AWG_D;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8004ec8:	4639      	mov	r1, r7
 8004eca:	2364      	movs	r3, #100	; 0x64
 8004ecc:	2204      	movs	r2, #4
 8004ece:	4865      	ldr	r0, [pc, #404]	; (8005064 <AWG_Load_Waveform+0x2f4>)
 8004ed0:	f7fe feb4 	bl	8003c3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	2110      	movs	r1, #16
 8004ed8:	4863      	ldr	r0, [pc, #396]	; (8005068 <AWG_Load_Waveform+0x2f8>)
 8004eda:	f7fd fca0 	bl	800281e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2110      	movs	r1, #16
 8004ee2:	4861      	ldr	r0, [pc, #388]	; (8005068 <AWG_Load_Waveform+0x2f8>)
 8004ee4:	f7fd fc9b 	bl	800281e <HAL_GPIO_WritePin>

	// loading waveform
	float relativeDACcode = 2047*AWG1.Upp/(2*MAX_AMPLITUDE); // multiply any number from -1 to 1 and you will get direct code for DAC
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eea:	4960      	ldr	r1, [pc, #384]	; (800506c <AWG_Load_Waveform+0x2fc>)
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fb ff49 	bl	8000d84 <__aeabi_fmul>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	461c      	mov	r4, r3
 8004ef6:	4b5e      	ldr	r3, [pc, #376]	; (8005070 <AWG_Load_Waveform+0x300>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4619      	mov	r1, r3
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fb fe39 	bl	8000b74 <__addsf3>
 8004f02:	4603      	mov	r3, r0
 8004f04:	4619      	mov	r1, r3
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7fb fff0 	bl	8000eec <__aeabi_fdiv>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	607b      	str	r3, [r7, #4]

	for(int16_t addr = 0; addr < depth; addr++)
 8004f10:	2300      	movs	r3, #0
 8004f12:	82bb      	strh	r3, [r7, #20]
 8004f14:	e16b      	b.n	80051ee <AWG_Load_Waveform+0x47e>
	{

		switch(AWG1.waveform)
 8004f16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	f200 8133 	bhi.w	8005186 <AWG_Load_Waveform+0x416>
 8004f20:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <AWG_Load_Waveform+0x1b8>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004fcd 	.word	0x08004fcd
 8004f30:	08005103 	.word	0x08005103
 8004f34:	08005187 	.word	0x08005187
		{
			case Square: data = (int16_t)round((addr>=(depth*AWG1.DutyCycle/100))*relativeDACcode-(relativeDACcode/2.0)); break;
 8004f38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fb fecd 	bl	8000cdc <__aeabi_i2f>
 8004f42:	4604      	mov	r4, r0
 8004f44:	8a7b      	ldrh	r3, [r7, #18]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fb fec8 	bl	8000cdc <__aeabi_i2f>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f7fb ff16 	bl	8000d84 <__aeabi_fmul>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4941      	ldr	r1, [pc, #260]	; (8005060 <AWG_Load_Waveform+0x2f0>)
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fb ffc5 	bl	8000eec <__aeabi_fdiv>
 8004f62:	4603      	mov	r3, r0
 8004f64:	4619      	mov	r1, r3
 8004f66:	4620      	mov	r0, r4
 8004f68:	f7fc f8be 	bl	80010e8 <__aeabi_fcmpge>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <AWG_Load_Waveform+0x208>
 8004f72:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004f76:	e001      	b.n	8004f7c <AWG_Load_Waveform+0x20c>
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb ff00 	bl	8000d84 <__aeabi_fmul>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fb fa4e 	bl	8000428 <__aeabi_f2d>
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	460d      	mov	r5, r1
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7fb fa49 	bl	8000428 <__aeabi_f2d>
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f9e:	f7fb fbc5 	bl	800072c <__aeabi_ddiv>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	4629      	mov	r1, r5
 8004faa:	f7fb f8dd 	bl	8000168 <__aeabi_dsub>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	f003 fab5 	bl	8008524 <round>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f7fb fd39 	bl	8000a38 <__aeabi_d2iz>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	82fb      	strh	r3, [r7, #22]
 8004fca:	e0dc      	b.n	8005186 <AWG_Load_Waveform+0x416>

			case Triangle:	if(addr <= DepthPos) data = (int16_t)round(relativeDACcode*addr/(DepthPos*1.0)-(relativeDACcode/2.0)); // rising edge
 8004fcc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004fd0:	8a3b      	ldrh	r3, [r7, #16]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	dc4e      	bgt.n	8005074 <AWG_Load_Waveform+0x304>
 8004fd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb fe7e 	bl	8000cdc <__aeabi_i2f>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fb fecd 	bl	8000d84 <__aeabi_fmul>
 8004fea:	4603      	mov	r3, r0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fb fa1b 	bl	8000428 <__aeabi_f2d>
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	460d      	mov	r5, r1
 8004ff6:	8a3b      	ldrh	r3, [r7, #16]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fb fa03 	bl	8000404 <__aeabi_i2d>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4620      	mov	r0, r4
 8005004:	4629      	mov	r1, r5
 8005006:	f7fb fb91 	bl	800072c <__aeabi_ddiv>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4614      	mov	r4, r2
 8005010:	461d      	mov	r5, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fb fa08 	bl	8000428 <__aeabi_f2d>
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005020:	f7fb fb84 	bl	800072c <__aeabi_ddiv>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4620      	mov	r0, r4
 800502a:	4629      	mov	r1, r5
 800502c:	f7fb f89c 	bl	8000168 <__aeabi_dsub>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4610      	mov	r0, r2
 8005036:	4619      	mov	r1, r3
 8005038:	f003 fa74 	bl	8008524 <round>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4610      	mov	r0, r2
 8005042:	4619      	mov	r1, r3
 8005044:	f7fb fcf8 	bl	8000a38 <__aeabi_d2iz>
 8005048:	4603      	mov	r3, r0
 800504a:	82fb      	strh	r3, [r7, #22]
							else data = (int16_t)round(relativeDACcode*(1-(addr-DepthPos)/(DepthNeg*1.0))-(relativeDACcode/2.0)); break; // falling edge
 800504c:	e09b      	b.n	8005186 <AWG_Load_Waveform+0x416>
 800504e:	bf00      	nop
 8005050:	00000000 	.word	0x00000000
 8005054:	417312d0 	.word	0x417312d0
 8005058:	00000000 	.word	0x00000000
 800505c:	41b0b076 	.word	0x41b0b076
 8005060:	42c80000 	.word	0x42c80000
 8005064:	20000278 	.word	0x20000278
 8005068:	40010800 	.word	0x40010800
 800506c:	44ffe000 	.word	0x44ffe000
 8005070:	2000035c 	.word	0x2000035c
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7fb f9d7 	bl	8000428 <__aeabi_f2d>
 800507a:	4604      	mov	r4, r0
 800507c:	460d      	mov	r5, r1
 800507e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005082:	8a3b      	ldrh	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb f9bc 	bl	8000404 <__aeabi_i2d>
 800508c:	4680      	mov	r8, r0
 800508e:	4689      	mov	r9, r1
 8005090:	89fb      	ldrh	r3, [r7, #14]
 8005092:	4618      	mov	r0, r3
 8005094:	f7fb f9b6 	bl	8000404 <__aeabi_i2d>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4640      	mov	r0, r8
 800509e:	4649      	mov	r1, r9
 80050a0:	f7fb fb44 	bl	800072c <__aeabi_ddiv>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	f04f 0000 	mov.w	r0, #0
 80050ac:	495a      	ldr	r1, [pc, #360]	; (8005218 <AWG_Load_Waveform+0x4a8>)
 80050ae:	f7fb f85b 	bl	8000168 <__aeabi_dsub>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4620      	mov	r0, r4
 80050b8:	4629      	mov	r1, r5
 80050ba:	f7fb fa0d 	bl	80004d8 <__aeabi_dmul>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4614      	mov	r4, r2
 80050c4:	461d      	mov	r5, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fb f9ae 	bl	8000428 <__aeabi_f2d>
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050d4:	f7fb fb2a 	bl	800072c <__aeabi_ddiv>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4620      	mov	r0, r4
 80050de:	4629      	mov	r1, r5
 80050e0:	f7fb f842 	bl	8000168 <__aeabi_dsub>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4610      	mov	r0, r2
 80050ea:	4619      	mov	r1, r3
 80050ec:	f003 fa1a 	bl	8008524 <round>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4610      	mov	r0, r2
 80050f6:	4619      	mov	r1, r3
 80050f8:	f7fb fc9e 	bl	8000a38 <__aeabi_d2iz>
 80050fc:	4603      	mov	r3, r0
 80050fe:	82fb      	strh	r3, [r7, #22]
 8005100:	e041      	b.n	8005186 <AWG_Load_Waveform+0x416>

			case Sine: data = (int16_t)round(relativeDACcode*sinf((addr*3.14159*2)/(1.0*depth))); break;
 8005102:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fb f97c 	bl	8000404 <__aeabi_i2d>
 800510c:	a340      	add	r3, pc, #256	; (adr r3, 8005210 <AWG_Load_Waveform+0x4a0>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f7fb f9e1 	bl	80004d8 <__aeabi_dmul>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	f7fb f823 	bl	800016c <__adddf3>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4614      	mov	r4, r2
 800512c:	461d      	mov	r5, r3
 800512e:	8a7b      	ldrh	r3, [r7, #18]
 8005130:	4618      	mov	r0, r3
 8005132:	f7fb f967 	bl	8000404 <__aeabi_i2d>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4620      	mov	r0, r4
 800513c:	4629      	mov	r1, r5
 800513e:	f7fb faf5 	bl	800072c <__aeabi_ddiv>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4610      	mov	r0, r2
 8005148:	4619      	mov	r1, r3
 800514a:	f7fb fcbd 	bl	8000ac8 <__aeabi_d2f>
 800514e:	4603      	mov	r3, r0
 8005150:	4618      	mov	r0, r3
 8005152:	f003 f9ad 	bl	80084b0 <sinf>
 8005156:	4603      	mov	r3, r0
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fb fe12 	bl	8000d84 <__aeabi_fmul>
 8005160:	4603      	mov	r3, r0
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb f960 	bl	8000428 <__aeabi_f2d>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4610      	mov	r0, r2
 800516e:	4619      	mov	r1, r3
 8005170:	f003 f9d8 	bl	8008524 <round>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4610      	mov	r0, r2
 800517a:	4619      	mov	r1, r3
 800517c:	f7fb fc5c 	bl	8000a38 <__aeabi_d2iz>
 8005180:	4603      	mov	r3, r0
 8005182:	82fb      	strh	r3, [r7, #22]
 8005184:	bf00      	nop

			case Func: break;
		}

		byte[0] = (int8_t)((addr>>4)&0x00ff);
 8005186:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800518a:	111b      	asrs	r3, r3, #4
 800518c:	b21b      	sxth	r3, r3
 800518e:	b2db      	uxtb	r3, r3
 8005190:	703b      	strb	r3, [r7, #0]
		byte[1] = (int8_t)(((data>>8)&0x000f)|((addr<<4)&0x00f0));
 8005192:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005196:	121b      	asrs	r3, r3, #8
 8005198:	b21b      	sxth	r3, r3
 800519a:	b25b      	sxtb	r3, r3
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	b25a      	sxtb	r2, r3
 80051a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	b25b      	sxtb	r3, r3
 80051aa:	f023 030f 	bic.w	r3, r3, #15
 80051ae:	b25b      	sxtb	r3, r3
 80051b0:	4313      	orrs	r3, r2
 80051b2:	b25b      	sxtb	r3, r3
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	707b      	strb	r3, [r7, #1]
		byte[2] = (int8_t)(data&0x00ff);
 80051b8:	8afb      	ldrh	r3, [r7, #22]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	70bb      	strb	r3, [r7, #2]
		byte[3] = (int8_t)AWG_DATA;
 80051be:	2305      	movs	r3, #5
 80051c0:	70fb      	strb	r3, [r7, #3]

		HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80051c2:	4639      	mov	r1, r7
 80051c4:	2364      	movs	r3, #100	; 0x64
 80051c6:	2204      	movs	r2, #4
 80051c8:	4814      	ldr	r0, [pc, #80]	; (800521c <AWG_Load_Waveform+0x4ac>)
 80051ca:	f7fe fd37 	bl	8003c3c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80051ce:	2201      	movs	r2, #1
 80051d0:	2110      	movs	r1, #16
 80051d2:	4813      	ldr	r0, [pc, #76]	; (8005220 <AWG_Load_Waveform+0x4b0>)
 80051d4:	f7fd fb23 	bl	800281e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80051d8:	2200      	movs	r2, #0
 80051da:	2110      	movs	r1, #16
 80051dc:	4810      	ldr	r0, [pc, #64]	; (8005220 <AWG_Load_Waveform+0x4b0>)
 80051de:	f7fd fb1e 	bl	800281e <HAL_GPIO_WritePin>
	for(int16_t addr = 0; addr < depth; addr++)
 80051e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3301      	adds	r3, #1
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	82bb      	strh	r3, [r7, #20]
 80051ee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80051f2:	8a7b      	ldrh	r3, [r7, #18]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	f6ff ae8e 	blt.w	8004f16 <AWG_Load_Waveform+0x1a6>
	}
		LOLA_enable_features(AWG_EN, 1); // enable AWG
 80051fa:	2101      	movs	r1, #1
 80051fc:	2002      	movs	r0, #2
 80051fe:	f000 f909 	bl	8005414 <LOLA_enable_features>
}
 8005202:	bf00      	nop
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 800520c:	b004      	add	sp, #16
 800520e:	4770      	bx	lr
 8005210:	f01b866e 	.word	0xf01b866e
 8005214:	400921f9 	.word	0x400921f9
 8005218:	3ff00000 	.word	0x3ff00000
 800521c:	20000278 	.word	0x20000278
 8005220:	40010800 	.word	0x40010800

08005224 <LOLA_Init>:
#include "main.h"
#include "board.h"
#include "ProgRef.h"

uint8_t LOLA_Init(InitType t, uint16_t maxAtempts) // waits forever if maxatempts > 10000
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	460a      	mov	r2, r1
 800522e:	71fb      	strb	r3, [r7, #7]
 8005230:	4613      	mov	r3, r2
 8005232:	80bb      	strh	r3, [r7, #4]
	DACREF(0.0);
 8005234:	f04f 0000 	mov.w	r0, #0
 8005238:	f000 f9bc 	bl	80055b4 <DACREF>
	DACOFFS(0);
 800523c:	f04f 0000 	mov.w	r0, #0
 8005240:	f000 fa18 	bl	8005674 <DACOFFS>

	// Reset
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 0);
 8005244:	2200      	movs	r2, #0
 8005246:	2108      	movs	r1, #8
 8005248:	4865      	ldr	r0, [pc, #404]	; (80053e0 <LOLA_Init+0x1bc>)
 800524a:	f7fd fae8 	bl	800281e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800524e:	2001      	movs	r0, #1
 8005250:	f7fc fd54 	bl	8001cfc <HAL_Delay>
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 1);
 8005254:	2201      	movs	r2, #1
 8005256:	2108      	movs	r1, #8
 8005258:	4861      	ldr	r0, [pc, #388]	; (80053e0 <LOLA_Init+0x1bc>)
 800525a:	f7fd fae0 	bl	800281e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800525e:	2001      	movs	r0, #1
 8005260:	f7fc fd4c 	bl	8001cfc <HAL_Delay>

	switch(t)
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	2b05      	cmp	r3, #5
 8005268:	f200 8082 	bhi.w	8005370 <LOLA_Init+0x14c>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <LOLA_Init+0x50>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	0800528d 	.word	0x0800528d
 8005278:	080052b3 	.word	0x080052b3
 800527c:	080052d9 	.word	0x080052d9
 8005280:	080052ff 	.word	0x080052ff
 8005284:	08005325 	.word	0x08005325
 8005288:	0800534b 	.word	0x0800534b
	{
		// reference: http://dangerousprototypes.com/docs/Xilinx_Spartan_3_FPGA_quick_start#Boot_configuration
		case Master_Serial:
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 800528c:	2200      	movs	r2, #0
 800528e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005292:	4854      	ldr	r0, [pc, #336]	; (80053e4 <LOLA_Init+0x1c0>)
 8005294:	f7fd fac3 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 8005298:	2200      	movs	r2, #0
 800529a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800529e:	4851      	ldr	r0, [pc, #324]	; (80053e4 <LOLA_Init+0x1c0>)
 80052a0:	f7fd fabd 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 80052a4:	2200      	movs	r2, #0
 80052a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052aa:	484e      	ldr	r0, [pc, #312]	; (80053e4 <LOLA_Init+0x1c0>)
 80052ac:	f7fd fab7 	bl	800281e <HAL_GPIO_WritePin>
		break;
 80052b0:	e074      	b.n	800539c <LOLA_Init+0x178>

		case SPI_FLASH:	// SPI FLASH
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80052b2:	2200      	movs	r2, #0
 80052b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052b8:	484a      	ldr	r0, [pc, #296]	; (80053e4 <LOLA_Init+0x1c0>)
 80052ba:	f7fd fab0 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 80052be:	2200      	movs	r2, #0
 80052c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052c4:	4847      	ldr	r0, [pc, #284]	; (80053e4 <LOLA_Init+0x1c0>)
 80052c6:	f7fd faaa 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 80052ca:	2201      	movs	r2, #1
 80052cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052d0:	4844      	ldr	r0, [pc, #272]	; (80053e4 <LOLA_Init+0x1c0>)
 80052d2:	f7fd faa4 	bl	800281e <HAL_GPIO_WritePin>
		break;
 80052d6:	e061      	b.n	800539c <LOLA_Init+0x178>

		case BPI_Up:
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80052d8:	2200      	movs	r2, #0
 80052da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052de:	4841      	ldr	r0, [pc, #260]	; (80053e4 <LOLA_Init+0x1c0>)
 80052e0:	f7fd fa9d 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 80052e4:	2201      	movs	r2, #1
 80052e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052ea:	483e      	ldr	r0, [pc, #248]	; (80053e4 <LOLA_Init+0x1c0>)
 80052ec:	f7fd fa97 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 80052f0:	2200      	movs	r2, #0
 80052f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052f6:	483b      	ldr	r0, [pc, #236]	; (80053e4 <LOLA_Init+0x1c0>)
 80052f8:	f7fd fa91 	bl	800281e <HAL_GPIO_WritePin>
		break;
 80052fc:	e04e      	b.n	800539c <LOLA_Init+0x178>

		case BPI_Down:
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80052fe:	2200      	movs	r2, #0
 8005300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005304:	4837      	ldr	r0, [pc, #220]	; (80053e4 <LOLA_Init+0x1c0>)
 8005306:	f7fd fa8a 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 800530a:	2201      	movs	r2, #1
 800530c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005310:	4834      	ldr	r0, [pc, #208]	; (80053e4 <LOLA_Init+0x1c0>)
 8005312:	f7fd fa84 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8005316:	2201      	movs	r2, #1
 8005318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800531c:	4831      	ldr	r0, [pc, #196]	; (80053e4 <LOLA_Init+0x1c0>)
 800531e:	f7fd fa7e 	bl	800281e <HAL_GPIO_WritePin>
		break;
 8005322:	e03b      	b.n	800539c <LOLA_Init+0x178>

		case Slave_parallel:
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8005324:	2201      	movs	r2, #1
 8005326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800532a:	482e      	ldr	r0, [pc, #184]	; (80053e4 <LOLA_Init+0x1c0>)
 800532c:	f7fd fa77 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8005330:	2201      	movs	r2, #1
 8005332:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005336:	482b      	ldr	r0, [pc, #172]	; (80053e4 <LOLA_Init+0x1c0>)
 8005338:	f7fd fa71 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 800533c:	2200      	movs	r2, #0
 800533e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005342:	4828      	ldr	r0, [pc, #160]	; (80053e4 <LOLA_Init+0x1c0>)
 8005344:	f7fd fa6b 	bl	800281e <HAL_GPIO_WritePin>
		break;
 8005348:	e028      	b.n	800539c <LOLA_Init+0x178>

		case Slave_Serial:
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 800534a:	2201      	movs	r2, #1
 800534c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005350:	4824      	ldr	r0, [pc, #144]	; (80053e4 <LOLA_Init+0x1c0>)
 8005352:	f7fd fa64 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8005356:	2201      	movs	r2, #1
 8005358:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800535c:	4821      	ldr	r0, [pc, #132]	; (80053e4 <LOLA_Init+0x1c0>)
 800535e:	f7fd fa5e 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8005362:	2201      	movs	r2, #1
 8005364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005368:	481e      	ldr	r0, [pc, #120]	; (80053e4 <LOLA_Init+0x1c0>)
 800536a:	f7fd fa58 	bl	800281e <HAL_GPIO_WritePin>
		break;
 800536e:	e015      	b.n	800539c <LOLA_Init+0x178>

		default: // JTAG on default
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8005370:	2201      	movs	r2, #1
 8005372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005376:	481b      	ldr	r0, [pc, #108]	; (80053e4 <LOLA_Init+0x1c0>)
 8005378:	f7fd fa51 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 800537c:	2200      	movs	r2, #0
 800537e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005382:	4818      	ldr	r0, [pc, #96]	; (80053e4 <LOLA_Init+0x1c0>)
 8005384:	f7fd fa4b 	bl	800281e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8005388:	2201      	movs	r2, #1
 800538a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800538e:	4815      	ldr	r0, [pc, #84]	; (80053e4 <LOLA_Init+0x1c0>)
 8005390:	f7fd fa45 	bl	800281e <HAL_GPIO_WritePin>
			maxAtempts = 10000; // Unlimited wait time on JTAG configuration
 8005394:	f242 7310 	movw	r3, #10000	; 0x2710
 8005398:	80bb      	strh	r3, [r7, #4]
		break;
 800539a:	bf00      	nop
	}

	while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin) && maxAtempts > 0)
 800539c:	e00a      	b.n	80053b4 <LOLA_Init+0x190>
	{
		if(maxAtempts < 10000) maxAtempts--;
 800539e:	88bb      	ldrh	r3, [r7, #4]
 80053a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d802      	bhi.n	80053ae <LOLA_Init+0x18a>
 80053a8:	88bb      	ldrh	r3, [r7, #4]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	80bb      	strh	r3, [r7, #4]
		HAL_Delay(100);
 80053ae:	2064      	movs	r0, #100	; 0x64
 80053b0:	f7fc fca4 	bl	8001cfc <HAL_Delay>
	while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin) && maxAtempts > 0)
 80053b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053b8:	4809      	ldr	r0, [pc, #36]	; (80053e0 <LOLA_Init+0x1bc>)
 80053ba:	f7fd fa19 	bl	80027f0 <HAL_GPIO_ReadPin>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <LOLA_Init+0x1a6>
 80053c4:	88bb      	ldrh	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e9      	bne.n	800539e <LOLA_Init+0x17a>
	}

	if(maxAtempts > 0) return 1;	// sucesfull configuration
 80053ca:	88bb      	ldrh	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <LOLA_Init+0x1b0>
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <LOLA_Init+0x1b2>
	else return 0; // timer ran out
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40010800 	.word	0x40010800
 80053e4:	40010c00 	.word	0x40010c00

080053e8 <LOLA_Reset>:

void LOLA_Reset()
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 0);
 80053ec:	2200      	movs	r2, #0
 80053ee:	2108      	movs	r1, #8
 80053f0:	4807      	ldr	r0, [pc, #28]	; (8005410 <LOLA_Reset+0x28>)
 80053f2:	f7fd fa14 	bl	800281e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80053f6:	2001      	movs	r0, #1
 80053f8:	f7fc fc80 	bl	8001cfc <HAL_Delay>
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 1);
 80053fc:	2201      	movs	r2, #1
 80053fe:	2108      	movs	r1, #8
 8005400:	4803      	ldr	r0, [pc, #12]	; (8005410 <LOLA_Reset+0x28>)
 8005402:	f7fd fa0c 	bl	800281e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005406:	2001      	movs	r0, #1
 8005408:	f7fc fc78 	bl	8001cfc <HAL_Delay>
}
 800540c:	bf00      	nop
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40010800 	.word	0x40010800

08005414 <LOLA_enable_features>:
}*/

uint16_t enablersReg = 0;

void LOLA_enable_features(LOLAfeatures LOLAfeatures1, uint8_t ENABLE)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	460a      	mov	r2, r1
 800541e:	71fb      	strb	r3, [r7, #7]
 8005420:	4613      	mov	r3, r2
 8005422:	71bb      	strb	r3, [r7, #6]
	uint16_t enablersMask = 0x0001 << LOLAfeatures1;
 8005424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005428:	2201      	movs	r2, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	if((uint16_t)LOLAfeatures1 == (uint16_t)ALL_EN) 	enablersMask = 0xffff;
 8005430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800543a:	4293      	cmp	r3, r2
 800543c:	d102      	bne.n	8005444 <LOLA_enable_features+0x30>
 800543e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005442:	81fb      	strh	r3, [r7, #14]

	if(ENABLE) 	enablersReg |= enablersMask;
 8005444:	79bb      	ldrb	r3, [r7, #6]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <LOLA_enable_features+0x46>
 800544a:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <LOLA_enable_features+0xb0>)
 800544c:	881a      	ldrh	r2, [r3, #0]
 800544e:	89fb      	ldrh	r3, [r7, #14]
 8005450:	4313      	orrs	r3, r2
 8005452:	b29a      	uxth	r2, r3
 8005454:	4b1b      	ldr	r3, [pc, #108]	; (80054c4 <LOLA_enable_features+0xb0>)
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	e00b      	b.n	8005472 <LOLA_enable_features+0x5e>
	else 		enablersReg &= ~enablersMask;
 800545a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800545e:	43db      	mvns	r3, r3
 8005460:	b21a      	sxth	r2, r3
 8005462:	4b18      	ldr	r3, [pc, #96]	; (80054c4 <LOLA_enable_features+0xb0>)
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b21b      	sxth	r3, r3
 8005468:	4013      	ands	r3, r2
 800546a:	b21b      	sxth	r3, r3
 800546c:	b29a      	uxth	r2, r3
 800546e:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <LOLA_enable_features+0xb0>)
 8005470:	801a      	strh	r2, [r3, #0]

	byte[0] = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((enablersReg>>8)&0x00ff);
 8005476:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <LOLA_enable_features+0xb0>)
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	0a1b      	lsrs	r3, r3, #8
 800547c:	b29b      	uxth	r3, r3
 800547e:	b2db      	uxtb	r3, r3
 8005480:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(enablersReg&0x00ff);
 8005482:	4b10      	ldr	r3, [pc, #64]	; (80054c4 <LOLA_enable_features+0xb0>)
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)ENABLERS;
 800548a:	2303      	movs	r3, #3
 800548c:	72fb      	strb	r3, [r7, #11]


	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 800548e:	f107 0108 	add.w	r1, r7, #8
 8005492:	2364      	movs	r3, #100	; 0x64
 8005494:	2204      	movs	r2, #4
 8005496:	480c      	ldr	r0, [pc, #48]	; (80054c8 <LOLA_enable_features+0xb4>)
 8005498:	f7fe fbd0 	bl	8003c3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 800549c:	2200      	movs	r2, #0
 800549e:	2110      	movs	r1, #16
 80054a0:	480a      	ldr	r0, [pc, #40]	; (80054cc <LOLA_enable_features+0xb8>)
 80054a2:	f7fd f9bc 	bl	800281e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80054a6:	2201      	movs	r2, #1
 80054a8:	2110      	movs	r1, #16
 80054aa:	4808      	ldr	r0, [pc, #32]	; (80054cc <LOLA_enable_features+0xb8>)
 80054ac:	f7fd f9b7 	bl	800281e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80054b0:	2200      	movs	r2, #0
 80054b2:	2110      	movs	r1, #16
 80054b4:	4805      	ldr	r0, [pc, #20]	; (80054cc <LOLA_enable_features+0xb8>)
 80054b6:	f7fd f9b2 	bl	800281e <HAL_GPIO_WritePin>
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000358 	.word	0x20000358
 80054c8:	20000278 	.word	0x20000278
 80054cc:	40010800 	.word	0x40010800

080054d0 <LOLA_SET_MAX_AMPLITUDE>:
}

float MAX_AMPLITUDE = 0;

void LOLA_SET_MAX_AMPLITUDE(float value)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	DACREF((value)*2/6.4);	// setting DAC Voltage reference
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4619      	mov	r1, r3
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fb fb49 	bl	8000b74 <__addsf3>
 80054e2:	4603      	mov	r3, r0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fa ff9f 	bl	8000428 <__aeabi_f2d>
 80054ea:	a30b      	add	r3, pc, #44	; (adr r3, 8005518 <LOLA_SET_MAX_AMPLITUDE+0x48>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f7fb f91c 	bl	800072c <__aeabi_ddiv>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4610      	mov	r0, r2
 80054fa:	4619      	mov	r1, r3
 80054fc:	f7fb fae4 	bl	8000ac8 <__aeabi_d2f>
 8005500:	4603      	mov	r3, r0
 8005502:	4618      	mov	r0, r3
 8005504:	f000 f856 	bl	80055b4 <DACREF>
	MAX_AMPLITUDE = value;
 8005508:	4a05      	ldr	r2, [pc, #20]	; (8005520 <LOLA_SET_MAX_AMPLITUDE+0x50>)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6013      	str	r3, [r2, #0]
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	9999999a 	.word	0x9999999a
 800551c:	40199999 	.word	0x40199999
 8005520:	2000035c 	.word	0x2000035c

08005524 <DAC_DIRECT_DATA>:

void DAC_DIRECT_DATA(float value)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	uint8_t byte[4];

	int16_t data = (int16_t)(2048*value/MAX_AMPLITUDE);
 800552c:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7fb fc27 	bl	8000d84 <__aeabi_fmul>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
 800553a:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <DAC_DIRECT_DATA+0x84>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4619      	mov	r1, r3
 8005540:	4610      	mov	r0, r2
 8005542:	f7fb fcd3 	bl	8000eec <__aeabi_fdiv>
 8005546:	4603      	mov	r3, r0
 8005548:	4618      	mov	r0, r3
 800554a:	f7fb fde1 	bl	8001110 <__aeabi_f2iz>
 800554e:	4603      	mov	r3, r0
 8005550:	81fb      	strh	r3, [r7, #14]

	byte[0] = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)((data>>8)&0x000f);
 8005556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800555a:	121b      	asrs	r3, r3, #8
 800555c:	b21b      	sxth	r3, r3
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	b2db      	uxtb	r3, r3
 8005566:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)(data&0x00ff);
 8005568:	89fb      	ldrh	r3, [r7, #14]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)DAC_DIRECTDATA;
 800556e:	2304      	movs	r3, #4
 8005570:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005572:	f107 0108 	add.w	r1, r7, #8
 8005576:	2364      	movs	r3, #100	; 0x64
 8005578:	2204      	movs	r2, #4
 800557a:	480c      	ldr	r0, [pc, #48]	; (80055ac <DAC_DIRECT_DATA+0x88>)
 800557c:	f7fe fb5e 	bl	8003c3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005580:	2200      	movs	r2, #0
 8005582:	2110      	movs	r1, #16
 8005584:	480a      	ldr	r0, [pc, #40]	; (80055b0 <DAC_DIRECT_DATA+0x8c>)
 8005586:	f7fd f94a 	bl	800281e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 800558a:	2201      	movs	r2, #1
 800558c:	2110      	movs	r1, #16
 800558e:	4808      	ldr	r0, [pc, #32]	; (80055b0 <DAC_DIRECT_DATA+0x8c>)
 8005590:	f7fd f945 	bl	800281e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005594:	2200      	movs	r2, #0
 8005596:	2110      	movs	r1, #16
 8005598:	4805      	ldr	r0, [pc, #20]	; (80055b0 <DAC_DIRECT_DATA+0x8c>)
 800559a:	f7fd f940 	bl	800281e <HAL_GPIO_WritePin>
}
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	2000035c 	.word	0x2000035c
 80055ac:	20000278 	.word	0x20000278
 80055b0:	40010800 	.word	0x40010800

080055b4 <DACREF>:
#include "trim.h"

float DACref = 0;

void DACREF(float v) // 0 <= v <= 2.5
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 80055bc:	4a27      	ldr	r2, [pc, #156]	; (800565c <DACREF+0xa8>)
 80055be:	f04f 0100 	mov.w	r1, #0
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 faaf 	bl	8005b26 <trimFloat>
 80055c8:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 80055ca:	4924      	ldr	r1, [pc, #144]	; (800565c <DACREF+0xa8>)
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fb fd6d 	bl	80010ac <__aeabi_fcmpeq>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <DACREF+0x2c>
 80055d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055dc:	81fb      	strh	r3, [r7, #14]
 80055de:	e018      	b.n	8005612 <DACREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fa ff21 	bl	8000428 <__aeabi_f2d>
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <DACREF+0xac>)
 80055ec:	f7fb f89e 	bl	800072c <__aeabi_ddiv>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	4b19      	ldr	r3, [pc, #100]	; (8005664 <DACREF+0xb0>)
 80055fe:	f7fa ff6b 	bl	80004d8 <__aeabi_dmul>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	f7fb fa3d 	bl	8000a88 <__aeabi_d2uiz>
 800560e:	4603      	mov	r3, r0
 8005610:	81fb      	strh	r3, [r7, #14]

	DACref = v;
 8005612:	4a15      	ldr	r2, [pc, #84]	; (8005668 <DACREF+0xb4>)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6013      	str	r3, [r2, #0]

	uint8_t byte[3];

	byte[0] = (3<<1)|(1<<4);	//3 shifted=channel D	1 shifted=load
 8005618:	2316      	movs	r3, #22
 800561a:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 800561c:	89fb      	ldrh	r3, [r7, #14]
 800561e:	099b      	lsrs	r3, r3, #6
 8005620:	b29b      	uxth	r3, r3
 8005622:	b2db      	uxtb	r3, r3
 8005624:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8005626:	89fb      	ldrh	r3, [r7, #14]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	b2db      	uxtb	r3, r3
 800562c:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 800562e:	2200      	movs	r2, #0
 8005630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005634:	480d      	ldr	r0, [pc, #52]	; (800566c <DACREF+0xb8>)
 8005636:	f7fd f8f2 	bl	800281e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 800563a:	f107 0108 	add.w	r1, r7, #8
 800563e:	2364      	movs	r3, #100	; 0x64
 8005640:	2203      	movs	r2, #3
 8005642:	480b      	ldr	r0, [pc, #44]	; (8005670 <DACREF+0xbc>)
 8005644:	f7fe fafa 	bl	8003c3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8005648:	2201      	movs	r2, #1
 800564a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800564e:	4807      	ldr	r0, [pc, #28]	; (800566c <DACREF+0xb8>)
 8005650:	f7fd f8e5 	bl	800281e <HAL_GPIO_WritePin>
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40200000 	.word	0x40200000
 8005660:	40040000 	.word	0x40040000
 8005664:	40d00000 	.word	0x40d00000
 8005668:	20000360 	.word	0x20000360
 800566c:	40011000 	.word	0x40011000
 8005670:	20000278 	.word	0x20000278

08005674 <DACOFFS>:

void DACOFFS(float v) // -12.5 <= v <= 12.5
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 800567c:	4a2a      	ldr	r2, [pc, #168]	; (8005728 <DACOFFS+0xb4>)
 800567e:	492b      	ldr	r1, [pc, #172]	; (800572c <DACOFFS+0xb8>)
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fa50 	bl	8005b26 <trimFloat>
 8005686:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 8005688:	4927      	ldr	r1, [pc, #156]	; (8005728 <DACOFFS+0xb4>)
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fb fd0e 	bl	80010ac <__aeabi_fcmpeq>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <DACOFFS+0x2a>
 8005696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800569a:	81fb      	strh	r3, [r7, #14]
 800569c:	e021      	b.n	80056e2 <DACOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fa fec2 	bl	8000428 <__aeabi_f2d>
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	4b21      	ldr	r3, [pc, #132]	; (8005730 <DACOFFS+0xbc>)
 80056aa:	f7fa fd5f 	bl	800016c <__adddf3>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4610      	mov	r0, r2
 80056b4:	4619      	mov	r1, r3
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	4b1e      	ldr	r3, [pc, #120]	; (8005734 <DACOFFS+0xc0>)
 80056bc:	f7fb f836 	bl	800072c <__aeabi_ddiv>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4610      	mov	r0, r2
 80056c6:	4619      	mov	r1, r3
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	4b1a      	ldr	r3, [pc, #104]	; (8005738 <DACOFFS+0xc4>)
 80056ce:	f7fa ff03 	bl	80004d8 <__aeabi_dmul>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4610      	mov	r0, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	f7fb f9d5 	bl	8000a88 <__aeabi_d2uiz>
 80056de:	4603      	mov	r3, r0
 80056e0:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (2<<1)|(1<<4);	//2 shifted=channel C	1 shifted=load
 80056e2:	2314      	movs	r3, #20
 80056e4:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 80056e6:	89fb      	ldrh	r3, [r7, #14]
 80056e8:	099b      	lsrs	r3, r3, #6
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 80056f0:	89fb      	ldrh	r3, [r7, #14]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 80056f8:	2200      	movs	r2, #0
 80056fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056fe:	480f      	ldr	r0, [pc, #60]	; (800573c <DACOFFS+0xc8>)
 8005700:	f7fd f88d 	bl	800281e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8005704:	f107 0108 	add.w	r1, r7, #8
 8005708:	2364      	movs	r3, #100	; 0x64
 800570a:	2203      	movs	r2, #3
 800570c:	480c      	ldr	r0, [pc, #48]	; (8005740 <DACOFFS+0xcc>)
 800570e:	f7fe fa95 	bl	8003c3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8005712:	2201      	movs	r2, #1
 8005714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005718:	4808      	ldr	r0, [pc, #32]	; (800573c <DACOFFS+0xc8>)
 800571a:	f7fd f880 	bl	800281e <HAL_GPIO_WritePin>
}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	41480000 	.word	0x41480000
 800572c:	c1480000 	.word	0xc1480000
 8005730:	40290000 	.word	0x40290000
 8005734:	40390000 	.word	0x40390000
 8005738:	40d00000 	.word	0x40d00000
 800573c:	40011000 	.word	0x40011000
 8005740:	20000278 	.word	0x20000278

08005744 <ADCREF>:

void ADCREF(float v) // 0 <= v <= 2.5
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 800574c:	4a26      	ldr	r2, [pc, #152]	; (80057e8 <ADCREF+0xa4>)
 800574e:	f04f 0100 	mov.w	r1, #0
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f9e7 	bl	8005b26 <trimFloat>
 8005758:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 800575a:	4923      	ldr	r1, [pc, #140]	; (80057e8 <ADCREF+0xa4>)
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7fb fca5 	bl	80010ac <__aeabi_fcmpeq>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <ADCREF+0x2c>
 8005768:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800576c:	81fb      	strh	r3, [r7, #14]
 800576e:	e018      	b.n	80057a2 <ADCREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7fa fe59 	bl	8000428 <__aeabi_f2d>
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	4b1c      	ldr	r3, [pc, #112]	; (80057ec <ADCREF+0xa8>)
 800577c:	f7fa ffd6 	bl	800072c <__aeabi_ddiv>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4610      	mov	r0, r2
 8005786:	4619      	mov	r1, r3
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	4b18      	ldr	r3, [pc, #96]	; (80057f0 <ADCREF+0xac>)
 800578e:	f7fa fea3 	bl	80004d8 <__aeabi_dmul>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4610      	mov	r0, r2
 8005798:	4619      	mov	r1, r3
 800579a:	f7fb f975 	bl	8000a88 <__aeabi_d2uiz>
 800579e:	4603      	mov	r3, r0
 80057a0:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<1)|(1<<4); //1 shifted=channel B	1 shifted=load
 80057a2:	2312      	movs	r3, #18
 80057a4:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 80057a6:	89fb      	ldrh	r3, [r7, #14]
 80057a8:	099b      	lsrs	r3, r3, #6
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 80057b0:	89fb      	ldrh	r3, [r7, #14]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 80057b8:	2200      	movs	r2, #0
 80057ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057be:	480d      	ldr	r0, [pc, #52]	; (80057f4 <ADCREF+0xb0>)
 80057c0:	f7fd f82d 	bl	800281e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 80057c4:	f107 0108 	add.w	r1, r7, #8
 80057c8:	2364      	movs	r3, #100	; 0x64
 80057ca:	2203      	movs	r2, #3
 80057cc:	480a      	ldr	r0, [pc, #40]	; (80057f8 <ADCREF+0xb4>)
 80057ce:	f7fe fa35 	bl	8003c3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 80057d2:	2201      	movs	r2, #1
 80057d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057d8:	4806      	ldr	r0, [pc, #24]	; (80057f4 <ADCREF+0xb0>)
 80057da:	f7fd f820 	bl	800281e <HAL_GPIO_WritePin>
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40200000 	.word	0x40200000
 80057ec:	40040000 	.word	0x40040000
 80057f0:	40d00000 	.word	0x40d00000
 80057f4:	40011000 	.word	0x40011000
 80057f8:	20000278 	.word	0x20000278

080057fc <ADCOFFS>:

void ADCOFFS(float v) // -12.5 <= v <= 12.5
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 8005804:	4a2a      	ldr	r2, [pc, #168]	; (80058b0 <ADCOFFS+0xb4>)
 8005806:	492b      	ldr	r1, [pc, #172]	; (80058b4 <ADCOFFS+0xb8>)
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f98c 	bl	8005b26 <trimFloat>
 800580e:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 8005810:	4927      	ldr	r1, [pc, #156]	; (80058b0 <ADCOFFS+0xb4>)
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fb fc4a 	bl	80010ac <__aeabi_fcmpeq>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <ADCOFFS+0x2a>
 800581e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005822:	81fb      	strh	r3, [r7, #14]
 8005824:	e021      	b.n	800586a <ADCOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fa fdfe 	bl	8000428 <__aeabi_f2d>
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	4b21      	ldr	r3, [pc, #132]	; (80058b8 <ADCOFFS+0xbc>)
 8005832:	f7fa fc9b 	bl	800016c <__adddf3>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4610      	mov	r0, r2
 800583c:	4619      	mov	r1, r3
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <ADCOFFS+0xc0>)
 8005844:	f7fa ff72 	bl	800072c <__aeabi_ddiv>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4610      	mov	r0, r2
 800584e:	4619      	mov	r1, r3
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	4b1a      	ldr	r3, [pc, #104]	; (80058c0 <ADCOFFS+0xc4>)
 8005856:	f7fa fe3f 	bl	80004d8 <__aeabi_dmul>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4610      	mov	r0, r2
 8005860:	4619      	mov	r1, r3
 8005862:	f7fb f911 	bl	8000a88 <__aeabi_d2uiz>
 8005866:	4603      	mov	r3, r0
 8005868:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<4); //none shifted=channel A	1 shifted=load
 800586a:	2310      	movs	r3, #16
 800586c:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 800586e:	89fb      	ldrh	r3, [r7, #14]
 8005870:	099b      	lsrs	r3, r3, #6
 8005872:	b29b      	uxth	r3, r3
 8005874:	b2db      	uxtb	r3, r3
 8005876:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8005878:	89fb      	ldrh	r3, [r7, #14]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	b2db      	uxtb	r3, r3
 800587e:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8005880:	2200      	movs	r2, #0
 8005882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005886:	480f      	ldr	r0, [pc, #60]	; (80058c4 <ADCOFFS+0xc8>)
 8005888:	f7fc ffc9 	bl	800281e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 800588c:	f107 0108 	add.w	r1, r7, #8
 8005890:	2364      	movs	r3, #100	; 0x64
 8005892:	2203      	movs	r2, #3
 8005894:	480c      	ldr	r0, [pc, #48]	; (80058c8 <ADCOFFS+0xcc>)
 8005896:	f7fe f9d1 	bl	8003c3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 800589a:	2201      	movs	r2, #1
 800589c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058a0:	4808      	ldr	r0, [pc, #32]	; (80058c4 <ADCOFFS+0xc8>)
 80058a2:	f7fc ffbc 	bl	800281e <HAL_GPIO_WritePin>
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	41480000 	.word	0x41480000
 80058b4:	c1480000 	.word	0xc1480000
 80058b8:	40290000 	.word	0x40290000
 80058bc:	40390000 	.word	0x40390000
 80058c0:	40d00000 	.word	0x40d00000
 80058c4:	40011000 	.word	0x40011000
 80058c8:	20000278 	.word	0x20000278

080058cc <RS485_Transmit>:

char TXbuff[RS485BUFFSIZE] = {0};
char RXbuff[RS485BUFFSIZE] = {0};

void RS485_Transmit(char *message)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	//strcat(message, "\r\n");

	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);	// Enable Driver
 80058d4:	2201      	movs	r2, #1
 80058d6:	2120      	movs	r1, #32
 80058d8:	480a      	ldr	r0, [pc, #40]	; (8005904 <RS485_Transmit+0x38>)
 80058da:	f7fc ffa0 	bl	800281e <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, message, strlen(message), 100);	// Transmit
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fa fc36 	bl	8000150 <strlen>
 80058e4:	4603      	mov	r3, r0
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	2364      	movs	r3, #100	; 0x64
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4806      	ldr	r0, [pc, #24]	; (8005908 <RS485_Transmit+0x3c>)
 80058ee:	f7fe fbdf 	bl	80040b0 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);	// Disable Driver
 80058f2:	2200      	movs	r2, #0
 80058f4:	2120      	movs	r1, #32
 80058f6:	4803      	ldr	r0, [pc, #12]	; (8005904 <RS485_Transmit+0x38>)
 80058f8:	f7fc ff91 	bl	800281e <HAL_GPIO_WritePin>
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40010c00 	.word	0x40010c00
 8005908:	200002d0 	.word	0x200002d0

0800590c <writeToRegister>:
uint8_t is_initialised = 0;

I2C_HandleTypeDef I2CHandle;

void writeToRegister(uint16_t device_address, uint16_t memory_address, uint8_t *data)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af04      	add	r7, sp, #16
 8005912:	4603      	mov	r3, r0
 8005914:	603a      	str	r2, [r7, #0]
 8005916:	80fb      	strh	r3, [r7, #6]
 8005918:	460b      	mov	r3, r1
 800591a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&I2CHandle, (device_address<<1), memory_address, 1, data, 1, 1000);
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	b299      	uxth	r1, r3
 8005922:	88ba      	ldrh	r2, [r7, #4]
 8005924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005928:	9302      	str	r3, [sp, #8]
 800592a:	2301      	movs	r3, #1
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	2301      	movs	r3, #1
 8005934:	4803      	ldr	r0, [pc, #12]	; (8005944 <writeToRegister+0x38>)
 8005936:	f7fd f8cf 	bl	8002ad8 <HAL_I2C_Mem_Write>
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000388 	.word	0x20000388

08005948 <TCA_Init>:

void TCA_Init(uint8_t address, I2C_HandleTypeDef handle)
{
 8005948:	b084      	sub	sp, #16
 800594a:	b590      	push	{r4, r7, lr}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	4604      	mov	r4, r0
 8005952:	f107 001c 	add.w	r0, r7, #28
 8005956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800595a:	4623      	mov	r3, r4
 800595c:	71fb      	strb	r3, [r7, #7]
	TCA_address = address;
 800595e:	4a0a      	ldr	r2, [pc, #40]	; (8005988 <TCA_Init+0x40>)
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	7013      	strb	r3, [r2, #0]
	I2CHandle = handle;
 8005964:	4b09      	ldr	r3, [pc, #36]	; (800598c <TCA_Init+0x44>)
 8005966:	4618      	mov	r0, r3
 8005968:	f107 031c 	add.w	r3, r7, #28
 800596c:	2254      	movs	r2, #84	; 0x54
 800596e:	4619      	mov	r1, r3
 8005970:	f000 ffad 	bl	80068ce <memcpy>
	is_initialised = 1;
 8005974:	4b06      	ldr	r3, [pc, #24]	; (8005990 <TCA_Init+0x48>)
 8005976:	2201      	movs	r2, #1
 8005978:	701a      	strb	r2, [r3, #0]
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005984:	b004      	add	sp, #16
 8005986:	4770      	bx	lr
 8005988:	2000000d 	.word	0x2000000d
 800598c:	20000388 	.word	0x20000388
 8005990:	20000384 	.word	0x20000384

08005994 <TCA_PinMode>:

void TCA_PinMode(uint32_t pin, uint32_t mode)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 800599e:	4b25      	ldr	r3, [pc, #148]	; (8005a34 <TCA_PinMode+0xa0>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d03d      	beq.n	8005a22 <TCA_PinMode+0x8e>
	if(pin > 15) return;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b0f      	cmp	r3, #15
 80059aa:	d83c      	bhi.n	8005a26 <TCA_PinMode+0x92>
	if(mode != 0 && mode != 1) return;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <TCA_PinMode+0x24>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d138      	bne.n	8005a2a <TCA_PinMode+0x96>

	uint8_t mask =  1 << (pin % 8);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	2201      	movs	r2, #1
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? PINMODE_REGISTER_LOW : PINMODE_REGISTER_HIGH;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b07      	cmp	r3, #7
 80059ca:	d801      	bhi.n	80059d0 <TCA_PinMode+0x3c>
 80059cc:	2306      	movs	r3, #6
 80059ce:	e000      	b.n	80059d2 <TCA_PinMode+0x3e>
 80059d0:	2307      	movs	r3, #7
 80059d2:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &pinmode_register_state_low : &pinmode_register_state_high;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b07      	cmp	r3, #7
 80059d8:	d801      	bhi.n	80059de <TCA_PinMode+0x4a>
 80059da:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <TCA_PinMode+0xa4>)
 80059dc:	e000      	b.n	80059e0 <TCA_PinMode+0x4c>
 80059de:	4b17      	ldr	r3, [pc, #92]	; (8005a3c <TCA_PinMode+0xa8>)
 80059e0:	60bb      	str	r3, [r7, #8]

	if (mode) 	*data |= mask;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <TCA_PinMode+0x64>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	781a      	ldrb	r2, [r3, #0]
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e00b      	b.n	8005a10 <TCA_PinMode+0x7c>
	else 		*data &= ~mask;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	b25a      	sxtb	r2, r3
 80059fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	b25b      	sxtb	r3, r3
 8005a06:	4013      	ands	r3, r2
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <TCA_PinMode+0xac>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	89b9      	ldrh	r1, [r7, #12]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff ff76 	bl	800590c <writeToRegister>
 8005a20:	e004      	b.n	8005a2c <TCA_PinMode+0x98>
	if(!is_initialised) return;
 8005a22:	bf00      	nop
 8005a24:	e002      	b.n	8005a2c <TCA_PinMode+0x98>
	if(pin > 15) return;
 8005a26:	bf00      	nop
 8005a28:	e000      	b.n	8005a2c <TCA_PinMode+0x98>
	if(mode != 0 && mode != 1) return;
 8005a2a:	bf00      	nop
}
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20000384 	.word	0x20000384
 8005a38:	2000000b 	.word	0x2000000b
 8005a3c:	2000000c 	.word	0x2000000c
 8005a40:	2000000d 	.word	0x2000000d

08005a44 <TCA_WritePin>:

	writeToRegister(TCA_address, memory_address, data);
}

void TCA_WritePin(uint32_t pin, uint32_t value)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 8005a4e:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <TCA_WritePin+0xa0>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d03d      	beq.n	8005ad2 <TCA_WritePin+0x8e>
	if(pin > 15) return;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b0f      	cmp	r3, #15
 8005a5a:	d83c      	bhi.n	8005ad6 <TCA_WritePin+0x92>
	if(value != 0 && value != 1) return;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <TCA_WritePin+0x24>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d138      	bne.n	8005ada <TCA_WritePin+0x96>

	uint8_t mask =  1 << (pin % 8);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	2201      	movs	r2, #1
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? OUTPUT_REGISTER_LOW : OUTPUT_REGISTER_HIGH;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b07      	cmp	r3, #7
 8005a7a:	d801      	bhi.n	8005a80 <TCA_WritePin+0x3c>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e000      	b.n	8005a82 <TCA_WritePin+0x3e>
 8005a80:	2303      	movs	r3, #3
 8005a82:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &output_register_state_low : &output_register_state_high;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b07      	cmp	r3, #7
 8005a88:	d801      	bhi.n	8005a8e <TCA_WritePin+0x4a>
 8005a8a:	4b17      	ldr	r3, [pc, #92]	; (8005ae8 <TCA_WritePin+0xa4>)
 8005a8c:	e000      	b.n	8005a90 <TCA_WritePin+0x4c>
 8005a8e:	4b17      	ldr	r3, [pc, #92]	; (8005aec <TCA_WritePin+0xa8>)
 8005a90:	60bb      	str	r3, [r7, #8]

	if (value)	*data |= mask;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d007      	beq.n	8005aa8 <TCA_WritePin+0x64>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	781a      	ldrb	r2, [r3, #0]
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	e00b      	b.n	8005ac0 <TCA_WritePin+0x7c>
	else 		*data &= ~mask;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b25a      	sxtb	r2, r3
 8005aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	b25b      	sxtb	r3, r3
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	b25b      	sxtb	r3, r3
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <TCA_WritePin+0xac>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	89b9      	ldrh	r1, [r7, #12]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff ff1e 	bl	800590c <writeToRegister>
 8005ad0:	e004      	b.n	8005adc <TCA_WritePin+0x98>
	if(!is_initialised) return;
 8005ad2:	bf00      	nop
 8005ad4:	e002      	b.n	8005adc <TCA_WritePin+0x98>
	if(pin > 15) return;
 8005ad6:	bf00      	nop
 8005ad8:	e000      	b.n	8005adc <TCA_WritePin+0x98>
	if(value != 0 && value != 1) return;
 8005ada:	bf00      	nop
}
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000384 	.word	0x20000384
 8005ae8:	20000009 	.word	0x20000009
 8005aec:	2000000a 	.word	0x2000000a
 8005af0:	2000000d 	.word	0x2000000d

08005af4 <trimInt>:
 */

#include "stdint.h"

int trimInt(int integer, int min, int max)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
	if(integer>max) integer = max;
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	dd02      	ble.n	8005b0e <trimInt+0x1a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e005      	b.n	8005b1a <trimInt+0x26>
	else if(integer<min) integer = min;
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	da01      	bge.n	8005b1a <trimInt+0x26>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	60fb      	str	r3, [r7, #12]
	return integer;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <trimFloat>:

float trimFloat(float floating, float min, float max)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
	if(floating>max) floating = max;
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7fb fae1 	bl	80010fc <__aeabi_fcmpgt>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <trimFloat+0x20>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	e008      	b.n	8005b58 <trimFloat+0x32>
	else if(floating<min) floating = min;
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f7fb fab9 	bl	80010c0 <__aeabi_fcmplt>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <trimFloat+0x32>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	60fb      	str	r3, [r7, #12]
	return floating;
 8005b58:	68fb      	ldr	r3, [r7, #12]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <malloc>:
 8005b64:	4b02      	ldr	r3, [pc, #8]	; (8005b70 <malloc+0xc>)
 8005b66:	4601      	mov	r1, r0
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	f000 b823 	b.w	8005bb4 <_malloc_r>
 8005b6e:	bf00      	nop
 8005b70:	20000068 	.word	0x20000068

08005b74 <sbrk_aligned>:
 8005b74:	b570      	push	{r4, r5, r6, lr}
 8005b76:	4e0e      	ldr	r6, [pc, #56]	; (8005bb0 <sbrk_aligned+0x3c>)
 8005b78:	460c      	mov	r4, r1
 8005b7a:	6831      	ldr	r1, [r6, #0]
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	b911      	cbnz	r1, 8005b86 <sbrk_aligned+0x12>
 8005b80:	f000 fe48 	bl	8006814 <_sbrk_r>
 8005b84:	6030      	str	r0, [r6, #0]
 8005b86:	4621      	mov	r1, r4
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f000 fe43 	bl	8006814 <_sbrk_r>
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	d00a      	beq.n	8005ba8 <sbrk_aligned+0x34>
 8005b92:	1cc4      	adds	r4, r0, #3
 8005b94:	f024 0403 	bic.w	r4, r4, #3
 8005b98:	42a0      	cmp	r0, r4
 8005b9a:	d007      	beq.n	8005bac <sbrk_aligned+0x38>
 8005b9c:	1a21      	subs	r1, r4, r0
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fe38 	bl	8006814 <_sbrk_r>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d101      	bne.n	8005bac <sbrk_aligned+0x38>
 8005ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8005bac:	4620      	mov	r0, r4
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	200003e0 	.word	0x200003e0

08005bb4 <_malloc_r>:
 8005bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb8:	1ccd      	adds	r5, r1, #3
 8005bba:	f025 0503 	bic.w	r5, r5, #3
 8005bbe:	3508      	adds	r5, #8
 8005bc0:	2d0c      	cmp	r5, #12
 8005bc2:	bf38      	it	cc
 8005bc4:	250c      	movcc	r5, #12
 8005bc6:	2d00      	cmp	r5, #0
 8005bc8:	4607      	mov	r7, r0
 8005bca:	db01      	blt.n	8005bd0 <_malloc_r+0x1c>
 8005bcc:	42a9      	cmp	r1, r5
 8005bce:	d905      	bls.n	8005bdc <_malloc_r+0x28>
 8005bd0:	230c      	movs	r3, #12
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	603b      	str	r3, [r7, #0]
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005cb0 <_malloc_r+0xfc>
 8005be0:	f000 f868 	bl	8005cb4 <__malloc_lock>
 8005be4:	f8d8 3000 	ldr.w	r3, [r8]
 8005be8:	461c      	mov	r4, r3
 8005bea:	bb5c      	cbnz	r4, 8005c44 <_malloc_r+0x90>
 8005bec:	4629      	mov	r1, r5
 8005bee:	4638      	mov	r0, r7
 8005bf0:	f7ff ffc0 	bl	8005b74 <sbrk_aligned>
 8005bf4:	1c43      	adds	r3, r0, #1
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	d155      	bne.n	8005ca6 <_malloc_r+0xf2>
 8005bfa:	f8d8 4000 	ldr.w	r4, [r8]
 8005bfe:	4626      	mov	r6, r4
 8005c00:	2e00      	cmp	r6, #0
 8005c02:	d145      	bne.n	8005c90 <_malloc_r+0xdc>
 8005c04:	2c00      	cmp	r4, #0
 8005c06:	d048      	beq.n	8005c9a <_malloc_r+0xe6>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	eb04 0903 	add.w	r9, r4, r3
 8005c12:	f000 fdff 	bl	8006814 <_sbrk_r>
 8005c16:	4581      	cmp	r9, r0
 8005c18:	d13f      	bne.n	8005c9a <_malloc_r+0xe6>
 8005c1a:	6821      	ldr	r1, [r4, #0]
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	1a6d      	subs	r5, r5, r1
 8005c20:	4629      	mov	r1, r5
 8005c22:	f7ff ffa7 	bl	8005b74 <sbrk_aligned>
 8005c26:	3001      	adds	r0, #1
 8005c28:	d037      	beq.n	8005c9a <_malloc_r+0xe6>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	442b      	add	r3, r5
 8005c2e:	6023      	str	r3, [r4, #0]
 8005c30:	f8d8 3000 	ldr.w	r3, [r8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d038      	beq.n	8005caa <_malloc_r+0xf6>
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	42a2      	cmp	r2, r4
 8005c3c:	d12b      	bne.n	8005c96 <_malloc_r+0xe2>
 8005c3e:	2200      	movs	r2, #0
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	e00f      	b.n	8005c64 <_malloc_r+0xb0>
 8005c44:	6822      	ldr	r2, [r4, #0]
 8005c46:	1b52      	subs	r2, r2, r5
 8005c48:	d41f      	bmi.n	8005c8a <_malloc_r+0xd6>
 8005c4a:	2a0b      	cmp	r2, #11
 8005c4c:	d917      	bls.n	8005c7e <_malloc_r+0xca>
 8005c4e:	1961      	adds	r1, r4, r5
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	6025      	str	r5, [r4, #0]
 8005c54:	bf18      	it	ne
 8005c56:	6059      	strne	r1, [r3, #4]
 8005c58:	6863      	ldr	r3, [r4, #4]
 8005c5a:	bf08      	it	eq
 8005c5c:	f8c8 1000 	streq.w	r1, [r8]
 8005c60:	5162      	str	r2, [r4, r5]
 8005c62:	604b      	str	r3, [r1, #4]
 8005c64:	4638      	mov	r0, r7
 8005c66:	f104 060b 	add.w	r6, r4, #11
 8005c6a:	f000 f829 	bl	8005cc0 <__malloc_unlock>
 8005c6e:	f026 0607 	bic.w	r6, r6, #7
 8005c72:	1d23      	adds	r3, r4, #4
 8005c74:	1af2      	subs	r2, r6, r3
 8005c76:	d0ae      	beq.n	8005bd6 <_malloc_r+0x22>
 8005c78:	1b9b      	subs	r3, r3, r6
 8005c7a:	50a3      	str	r3, [r4, r2]
 8005c7c:	e7ab      	b.n	8005bd6 <_malloc_r+0x22>
 8005c7e:	42a3      	cmp	r3, r4
 8005c80:	6862      	ldr	r2, [r4, #4]
 8005c82:	d1dd      	bne.n	8005c40 <_malloc_r+0x8c>
 8005c84:	f8c8 2000 	str.w	r2, [r8]
 8005c88:	e7ec      	b.n	8005c64 <_malloc_r+0xb0>
 8005c8a:	4623      	mov	r3, r4
 8005c8c:	6864      	ldr	r4, [r4, #4]
 8005c8e:	e7ac      	b.n	8005bea <_malloc_r+0x36>
 8005c90:	4634      	mov	r4, r6
 8005c92:	6876      	ldr	r6, [r6, #4]
 8005c94:	e7b4      	b.n	8005c00 <_malloc_r+0x4c>
 8005c96:	4613      	mov	r3, r2
 8005c98:	e7cc      	b.n	8005c34 <_malloc_r+0x80>
 8005c9a:	230c      	movs	r3, #12
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	f000 f80e 	bl	8005cc0 <__malloc_unlock>
 8005ca4:	e797      	b.n	8005bd6 <_malloc_r+0x22>
 8005ca6:	6025      	str	r5, [r4, #0]
 8005ca8:	e7dc      	b.n	8005c64 <_malloc_r+0xb0>
 8005caa:	605b      	str	r3, [r3, #4]
 8005cac:	deff      	udf	#255	; 0xff
 8005cae:	bf00      	nop
 8005cb0:	200003dc 	.word	0x200003dc

08005cb4 <__malloc_lock>:
 8005cb4:	4801      	ldr	r0, [pc, #4]	; (8005cbc <__malloc_lock+0x8>)
 8005cb6:	f000 bdfa 	b.w	80068ae <__retarget_lock_acquire_recursive>
 8005cba:	bf00      	nop
 8005cbc:	20000524 	.word	0x20000524

08005cc0 <__malloc_unlock>:
 8005cc0:	4801      	ldr	r0, [pc, #4]	; (8005cc8 <__malloc_unlock+0x8>)
 8005cc2:	f000 bdf5 	b.w	80068b0 <__retarget_lock_release_recursive>
 8005cc6:	bf00      	nop
 8005cc8:	20000524 	.word	0x20000524

08005ccc <__cvt>:
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd2:	461f      	mov	r7, r3
 8005cd4:	bfbb      	ittet	lt
 8005cd6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005cda:	461f      	movlt	r7, r3
 8005cdc:	2300      	movge	r3, #0
 8005cde:	232d      	movlt	r3, #45	; 0x2d
 8005ce0:	b088      	sub	sp, #32
 8005ce2:	4614      	mov	r4, r2
 8005ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ce6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005ce8:	7013      	strb	r3, [r2, #0]
 8005cea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005cf0:	f023 0820 	bic.w	r8, r3, #32
 8005cf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cf8:	d005      	beq.n	8005d06 <__cvt+0x3a>
 8005cfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cfe:	d100      	bne.n	8005d02 <__cvt+0x36>
 8005d00:	3501      	adds	r5, #1
 8005d02:	2302      	movs	r3, #2
 8005d04:	e000      	b.n	8005d08 <__cvt+0x3c>
 8005d06:	2303      	movs	r3, #3
 8005d08:	aa07      	add	r2, sp, #28
 8005d0a:	9204      	str	r2, [sp, #16]
 8005d0c:	aa06      	add	r2, sp, #24
 8005d0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005d12:	e9cd 3500 	strd	r3, r5, [sp]
 8005d16:	4622      	mov	r2, r4
 8005d18:	463b      	mov	r3, r7
 8005d1a:	f000 fe71 	bl	8006a00 <_dtoa_r>
 8005d1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d22:	4606      	mov	r6, r0
 8005d24:	d102      	bne.n	8005d2c <__cvt+0x60>
 8005d26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d28:	07db      	lsls	r3, r3, #31
 8005d2a:	d522      	bpl.n	8005d72 <__cvt+0xa6>
 8005d2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d30:	eb06 0905 	add.w	r9, r6, r5
 8005d34:	d110      	bne.n	8005d58 <__cvt+0x8c>
 8005d36:	7833      	ldrb	r3, [r6, #0]
 8005d38:	2b30      	cmp	r3, #48	; 0x30
 8005d3a:	d10a      	bne.n	8005d52 <__cvt+0x86>
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2300      	movs	r3, #0
 8005d40:	4620      	mov	r0, r4
 8005d42:	4639      	mov	r1, r7
 8005d44:	f7fa fe30 	bl	80009a8 <__aeabi_dcmpeq>
 8005d48:	b918      	cbnz	r0, 8005d52 <__cvt+0x86>
 8005d4a:	f1c5 0501 	rsb	r5, r5, #1
 8005d4e:	f8ca 5000 	str.w	r5, [sl]
 8005d52:	f8da 3000 	ldr.w	r3, [sl]
 8005d56:	4499      	add	r9, r3
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4639      	mov	r1, r7
 8005d60:	f7fa fe22 	bl	80009a8 <__aeabi_dcmpeq>
 8005d64:	b108      	cbz	r0, 8005d6a <__cvt+0x9e>
 8005d66:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d6a:	2230      	movs	r2, #48	; 0x30
 8005d6c:	9b07      	ldr	r3, [sp, #28]
 8005d6e:	454b      	cmp	r3, r9
 8005d70:	d307      	bcc.n	8005d82 <__cvt+0xb6>
 8005d72:	4630      	mov	r0, r6
 8005d74:	9b07      	ldr	r3, [sp, #28]
 8005d76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d78:	1b9b      	subs	r3, r3, r6
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	b008      	add	sp, #32
 8005d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d82:	1c59      	adds	r1, r3, #1
 8005d84:	9107      	str	r1, [sp, #28]
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e7f0      	b.n	8005d6c <__cvt+0xa0>

08005d8a <__exponent>:
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d8e:	2900      	cmp	r1, #0
 8005d90:	f803 2b02 	strb.w	r2, [r3], #2
 8005d94:	bfb6      	itet	lt
 8005d96:	222d      	movlt	r2, #45	; 0x2d
 8005d98:	222b      	movge	r2, #43	; 0x2b
 8005d9a:	4249      	neglt	r1, r1
 8005d9c:	2909      	cmp	r1, #9
 8005d9e:	7042      	strb	r2, [r0, #1]
 8005da0:	dd2a      	ble.n	8005df8 <__exponent+0x6e>
 8005da2:	f10d 0207 	add.w	r2, sp, #7
 8005da6:	4617      	mov	r7, r2
 8005da8:	260a      	movs	r6, #10
 8005daa:	fb91 f5f6 	sdiv	r5, r1, r6
 8005dae:	4694      	mov	ip, r2
 8005db0:	fb06 1415 	mls	r4, r6, r5, r1
 8005db4:	3430      	adds	r4, #48	; 0x30
 8005db6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005dba:	460c      	mov	r4, r1
 8005dbc:	2c63      	cmp	r4, #99	; 0x63
 8005dbe:	4629      	mov	r1, r5
 8005dc0:	f102 32ff 	add.w	r2, r2, #4294967295
 8005dc4:	dcf1      	bgt.n	8005daa <__exponent+0x20>
 8005dc6:	3130      	adds	r1, #48	; 0x30
 8005dc8:	f1ac 0402 	sub.w	r4, ip, #2
 8005dcc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	1c41      	adds	r1, r0, #1
 8005dd4:	42ba      	cmp	r2, r7
 8005dd6:	d30a      	bcc.n	8005dee <__exponent+0x64>
 8005dd8:	f10d 0209 	add.w	r2, sp, #9
 8005ddc:	eba2 020c 	sub.w	r2, r2, ip
 8005de0:	42bc      	cmp	r4, r7
 8005de2:	bf88      	it	hi
 8005de4:	2200      	movhi	r2, #0
 8005de6:	4413      	add	r3, r2
 8005de8:	1a18      	subs	r0, r3, r0
 8005dea:	b003      	add	sp, #12
 8005dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dee:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005df2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005df6:	e7ed      	b.n	8005dd4 <__exponent+0x4a>
 8005df8:	2330      	movs	r3, #48	; 0x30
 8005dfa:	3130      	adds	r1, #48	; 0x30
 8005dfc:	7083      	strb	r3, [r0, #2]
 8005dfe:	70c1      	strb	r1, [r0, #3]
 8005e00:	1d03      	adds	r3, r0, #4
 8005e02:	e7f1      	b.n	8005de8 <__exponent+0x5e>

08005e04 <_printf_float>:
 8005e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e08:	b091      	sub	sp, #68	; 0x44
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005e10:	4616      	mov	r6, r2
 8005e12:	461f      	mov	r7, r3
 8005e14:	4605      	mov	r5, r0
 8005e16:	f000 fcc5 	bl	80067a4 <_localeconv_r>
 8005e1a:	6803      	ldr	r3, [r0, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e20:	f7fa f996 	bl	8000150 <strlen>
 8005e24:	2300      	movs	r3, #0
 8005e26:	930e      	str	r3, [sp, #56]	; 0x38
 8005e28:	f8d8 3000 	ldr.w	r3, [r8]
 8005e2c:	900a      	str	r0, [sp, #40]	; 0x28
 8005e2e:	3307      	adds	r3, #7
 8005e30:	f023 0307 	bic.w	r3, r3, #7
 8005e34:	f103 0208 	add.w	r2, r3, #8
 8005e38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e3c:	f8d4 b000 	ldr.w	fp, [r4]
 8005e40:	f8c8 2000 	str.w	r2, [r8]
 8005e44:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005e48:	4652      	mov	r2, sl
 8005e4a:	4643      	mov	r3, r8
 8005e4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e50:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005e54:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e56:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	4b9c      	ldr	r3, [pc, #624]	; (80060d0 <_printf_float+0x2cc>)
 8005e5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e60:	f7fa fdd4 	bl	8000a0c <__aeabi_dcmpun>
 8005e64:	bb70      	cbnz	r0, 8005ec4 <_printf_float+0xc0>
 8005e66:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6a:	4650      	mov	r0, sl
 8005e6c:	4b98      	ldr	r3, [pc, #608]	; (80060d0 <_printf_float+0x2cc>)
 8005e6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e70:	f7fa fdae 	bl	80009d0 <__aeabi_dcmple>
 8005e74:	bb30      	cbnz	r0, 8005ec4 <_printf_float+0xc0>
 8005e76:	2200      	movs	r2, #0
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4650      	mov	r0, sl
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	f7fa fd9d 	bl	80009bc <__aeabi_dcmplt>
 8005e82:	b110      	cbz	r0, 8005e8a <_printf_float+0x86>
 8005e84:	232d      	movs	r3, #45	; 0x2d
 8005e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e8a:	4a92      	ldr	r2, [pc, #584]	; (80060d4 <_printf_float+0x2d0>)
 8005e8c:	4b92      	ldr	r3, [pc, #584]	; (80060d8 <_printf_float+0x2d4>)
 8005e8e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005e92:	bf94      	ite	ls
 8005e94:	4690      	movls	r8, r2
 8005e96:	4698      	movhi	r8, r3
 8005e98:	2303      	movs	r3, #3
 8005e9a:	f04f 0a00 	mov.w	sl, #0
 8005e9e:	6123      	str	r3, [r4, #16]
 8005ea0:	f02b 0304 	bic.w	r3, fp, #4
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	4633      	mov	r3, r6
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4628      	mov	r0, r5
 8005eac:	9700      	str	r7, [sp, #0]
 8005eae:	aa0f      	add	r2, sp, #60	; 0x3c
 8005eb0:	f000 f9d6 	bl	8006260 <_printf_common>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	f040 8090 	bne.w	8005fda <_printf_float+0x1d6>
 8005eba:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebe:	b011      	add	sp, #68	; 0x44
 8005ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec4:	4652      	mov	r2, sl
 8005ec6:	4643      	mov	r3, r8
 8005ec8:	4650      	mov	r0, sl
 8005eca:	4641      	mov	r1, r8
 8005ecc:	f7fa fd9e 	bl	8000a0c <__aeabi_dcmpun>
 8005ed0:	b148      	cbz	r0, 8005ee6 <_printf_float+0xe2>
 8005ed2:	f1b8 0f00 	cmp.w	r8, #0
 8005ed6:	bfb8      	it	lt
 8005ed8:	232d      	movlt	r3, #45	; 0x2d
 8005eda:	4a80      	ldr	r2, [pc, #512]	; (80060dc <_printf_float+0x2d8>)
 8005edc:	bfb8      	it	lt
 8005ede:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ee2:	4b7f      	ldr	r3, [pc, #508]	; (80060e0 <_printf_float+0x2dc>)
 8005ee4:	e7d3      	b.n	8005e8e <_printf_float+0x8a>
 8005ee6:	6863      	ldr	r3, [r4, #4]
 8005ee8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	d142      	bne.n	8005f76 <_printf_float+0x172>
 8005ef0:	2306      	movs	r3, #6
 8005ef2:	6063      	str	r3, [r4, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	9206      	str	r2, [sp, #24]
 8005ef8:	aa0e      	add	r2, sp, #56	; 0x38
 8005efa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005efe:	aa0d      	add	r2, sp, #52	; 0x34
 8005f00:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005f04:	9203      	str	r2, [sp, #12]
 8005f06:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005f0a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	6863      	ldr	r3, [r4, #4]
 8005f12:	4652      	mov	r2, sl
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	4628      	mov	r0, r5
 8005f18:	4643      	mov	r3, r8
 8005f1a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005f1c:	f7ff fed6 	bl	8005ccc <__cvt>
 8005f20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f22:	4680      	mov	r8, r0
 8005f24:	2947      	cmp	r1, #71	; 0x47
 8005f26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f28:	d108      	bne.n	8005f3c <_printf_float+0x138>
 8005f2a:	1cc8      	adds	r0, r1, #3
 8005f2c:	db02      	blt.n	8005f34 <_printf_float+0x130>
 8005f2e:	6863      	ldr	r3, [r4, #4]
 8005f30:	4299      	cmp	r1, r3
 8005f32:	dd40      	ble.n	8005fb6 <_printf_float+0x1b2>
 8005f34:	f1a9 0902 	sub.w	r9, r9, #2
 8005f38:	fa5f f989 	uxtb.w	r9, r9
 8005f3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f40:	d81f      	bhi.n	8005f82 <_printf_float+0x17e>
 8005f42:	464a      	mov	r2, r9
 8005f44:	3901      	subs	r1, #1
 8005f46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f4a:	910d      	str	r1, [sp, #52]	; 0x34
 8005f4c:	f7ff ff1d 	bl	8005d8a <__exponent>
 8005f50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f52:	4682      	mov	sl, r0
 8005f54:	1813      	adds	r3, r2, r0
 8005f56:	2a01      	cmp	r2, #1
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	dc02      	bgt.n	8005f62 <_printf_float+0x15e>
 8005f5c:	6822      	ldr	r2, [r4, #0]
 8005f5e:	07d2      	lsls	r2, r2, #31
 8005f60:	d501      	bpl.n	8005f66 <_printf_float+0x162>
 8005f62:	3301      	adds	r3, #1
 8005f64:	6123      	str	r3, [r4, #16]
 8005f66:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d09b      	beq.n	8005ea6 <_printf_float+0xa2>
 8005f6e:	232d      	movs	r3, #45	; 0x2d
 8005f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f74:	e797      	b.n	8005ea6 <_printf_float+0xa2>
 8005f76:	2947      	cmp	r1, #71	; 0x47
 8005f78:	d1bc      	bne.n	8005ef4 <_printf_float+0xf0>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1ba      	bne.n	8005ef4 <_printf_float+0xf0>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e7b7      	b.n	8005ef2 <_printf_float+0xee>
 8005f82:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005f86:	d118      	bne.n	8005fba <_printf_float+0x1b6>
 8005f88:	2900      	cmp	r1, #0
 8005f8a:	6863      	ldr	r3, [r4, #4]
 8005f8c:	dd0b      	ble.n	8005fa6 <_printf_float+0x1a2>
 8005f8e:	6121      	str	r1, [r4, #16]
 8005f90:	b913      	cbnz	r3, 8005f98 <_printf_float+0x194>
 8005f92:	6822      	ldr	r2, [r4, #0]
 8005f94:	07d0      	lsls	r0, r2, #31
 8005f96:	d502      	bpl.n	8005f9e <_printf_float+0x19a>
 8005f98:	3301      	adds	r3, #1
 8005f9a:	440b      	add	r3, r1
 8005f9c:	6123      	str	r3, [r4, #16]
 8005f9e:	f04f 0a00 	mov.w	sl, #0
 8005fa2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fa4:	e7df      	b.n	8005f66 <_printf_float+0x162>
 8005fa6:	b913      	cbnz	r3, 8005fae <_printf_float+0x1aa>
 8005fa8:	6822      	ldr	r2, [r4, #0]
 8005faa:	07d2      	lsls	r2, r2, #31
 8005fac:	d501      	bpl.n	8005fb2 <_printf_float+0x1ae>
 8005fae:	3302      	adds	r3, #2
 8005fb0:	e7f4      	b.n	8005f9c <_printf_float+0x198>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e7f2      	b.n	8005f9c <_printf_float+0x198>
 8005fb6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005fba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fbc:	4299      	cmp	r1, r3
 8005fbe:	db05      	blt.n	8005fcc <_printf_float+0x1c8>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	6121      	str	r1, [r4, #16]
 8005fc4:	07d8      	lsls	r0, r3, #31
 8005fc6:	d5ea      	bpl.n	8005f9e <_printf_float+0x19a>
 8005fc8:	1c4b      	adds	r3, r1, #1
 8005fca:	e7e7      	b.n	8005f9c <_printf_float+0x198>
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	bfcc      	ite	gt
 8005fd0:	2201      	movgt	r2, #1
 8005fd2:	f1c1 0202 	rsble	r2, r1, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	e7e0      	b.n	8005f9c <_printf_float+0x198>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	055a      	lsls	r2, r3, #21
 8005fde:	d407      	bmi.n	8005ff0 <_printf_float+0x1ec>
 8005fe0:	6923      	ldr	r3, [r4, #16]
 8005fe2:	4642      	mov	r2, r8
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	47b8      	blx	r7
 8005fea:	3001      	adds	r0, #1
 8005fec:	d12b      	bne.n	8006046 <_printf_float+0x242>
 8005fee:	e764      	b.n	8005eba <_printf_float+0xb6>
 8005ff0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ff4:	f240 80dd 	bls.w	80061b2 <_printf_float+0x3ae>
 8005ff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2300      	movs	r3, #0
 8006000:	f7fa fcd2 	bl	80009a8 <__aeabi_dcmpeq>
 8006004:	2800      	cmp	r0, #0
 8006006:	d033      	beq.n	8006070 <_printf_float+0x26c>
 8006008:	2301      	movs	r3, #1
 800600a:	4631      	mov	r1, r6
 800600c:	4628      	mov	r0, r5
 800600e:	4a35      	ldr	r2, [pc, #212]	; (80060e4 <_printf_float+0x2e0>)
 8006010:	47b8      	blx	r7
 8006012:	3001      	adds	r0, #1
 8006014:	f43f af51 	beq.w	8005eba <_printf_float+0xb6>
 8006018:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800601c:	429a      	cmp	r2, r3
 800601e:	db02      	blt.n	8006026 <_printf_float+0x222>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	07d8      	lsls	r0, r3, #31
 8006024:	d50f      	bpl.n	8006046 <_printf_float+0x242>
 8006026:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	47b8      	blx	r7
 8006030:	3001      	adds	r0, #1
 8006032:	f43f af42 	beq.w	8005eba <_printf_float+0xb6>
 8006036:	f04f 0800 	mov.w	r8, #0
 800603a:	f104 091a 	add.w	r9, r4, #26
 800603e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006040:	3b01      	subs	r3, #1
 8006042:	4543      	cmp	r3, r8
 8006044:	dc09      	bgt.n	800605a <_printf_float+0x256>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	079b      	lsls	r3, r3, #30
 800604a:	f100 8104 	bmi.w	8006256 <_printf_float+0x452>
 800604e:	68e0      	ldr	r0, [r4, #12]
 8006050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006052:	4298      	cmp	r0, r3
 8006054:	bfb8      	it	lt
 8006056:	4618      	movlt	r0, r3
 8006058:	e731      	b.n	8005ebe <_printf_float+0xba>
 800605a:	2301      	movs	r3, #1
 800605c:	464a      	mov	r2, r9
 800605e:	4631      	mov	r1, r6
 8006060:	4628      	mov	r0, r5
 8006062:	47b8      	blx	r7
 8006064:	3001      	adds	r0, #1
 8006066:	f43f af28 	beq.w	8005eba <_printf_float+0xb6>
 800606a:	f108 0801 	add.w	r8, r8, #1
 800606e:	e7e6      	b.n	800603e <_printf_float+0x23a>
 8006070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006072:	2b00      	cmp	r3, #0
 8006074:	dc38      	bgt.n	80060e8 <_printf_float+0x2e4>
 8006076:	2301      	movs	r3, #1
 8006078:	4631      	mov	r1, r6
 800607a:	4628      	mov	r0, r5
 800607c:	4a19      	ldr	r2, [pc, #100]	; (80060e4 <_printf_float+0x2e0>)
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	f43f af1a 	beq.w	8005eba <_printf_float+0xb6>
 8006086:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800608a:	4313      	orrs	r3, r2
 800608c:	d102      	bne.n	8006094 <_printf_float+0x290>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	07d9      	lsls	r1, r3, #31
 8006092:	d5d8      	bpl.n	8006046 <_printf_float+0x242>
 8006094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006098:	4631      	mov	r1, r6
 800609a:	4628      	mov	r0, r5
 800609c:	47b8      	blx	r7
 800609e:	3001      	adds	r0, #1
 80060a0:	f43f af0b 	beq.w	8005eba <_printf_float+0xb6>
 80060a4:	f04f 0900 	mov.w	r9, #0
 80060a8:	f104 0a1a 	add.w	sl, r4, #26
 80060ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ae:	425b      	negs	r3, r3
 80060b0:	454b      	cmp	r3, r9
 80060b2:	dc01      	bgt.n	80060b8 <_printf_float+0x2b4>
 80060b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060b6:	e794      	b.n	8005fe2 <_printf_float+0x1de>
 80060b8:	2301      	movs	r3, #1
 80060ba:	4652      	mov	r2, sl
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	f43f aef9 	beq.w	8005eba <_printf_float+0xb6>
 80060c8:	f109 0901 	add.w	r9, r9, #1
 80060cc:	e7ee      	b.n	80060ac <_printf_float+0x2a8>
 80060ce:	bf00      	nop
 80060d0:	7fefffff 	.word	0x7fefffff
 80060d4:	0800924f 	.word	0x0800924f
 80060d8:	08009253 	.word	0x08009253
 80060dc:	08009257 	.word	0x08009257
 80060e0:	0800925b 	.word	0x0800925b
 80060e4:	0800925f 	.word	0x0800925f
 80060e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060ec:	429a      	cmp	r2, r3
 80060ee:	bfa8      	it	ge
 80060f0:	461a      	movge	r2, r3
 80060f2:	2a00      	cmp	r2, #0
 80060f4:	4691      	mov	r9, r2
 80060f6:	dc37      	bgt.n	8006168 <_printf_float+0x364>
 80060f8:	f04f 0b00 	mov.w	fp, #0
 80060fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006100:	f104 021a 	add.w	r2, r4, #26
 8006104:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006108:	ebaa 0309 	sub.w	r3, sl, r9
 800610c:	455b      	cmp	r3, fp
 800610e:	dc33      	bgt.n	8006178 <_printf_float+0x374>
 8006110:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006114:	429a      	cmp	r2, r3
 8006116:	db3b      	blt.n	8006190 <_printf_float+0x38c>
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	07da      	lsls	r2, r3, #31
 800611c:	d438      	bmi.n	8006190 <_printf_float+0x38c>
 800611e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006122:	eba2 0903 	sub.w	r9, r2, r3
 8006126:	eba2 020a 	sub.w	r2, r2, sl
 800612a:	4591      	cmp	r9, r2
 800612c:	bfa8      	it	ge
 800612e:	4691      	movge	r9, r2
 8006130:	f1b9 0f00 	cmp.w	r9, #0
 8006134:	dc34      	bgt.n	80061a0 <_printf_float+0x39c>
 8006136:	f04f 0800 	mov.w	r8, #0
 800613a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800613e:	f104 0a1a 	add.w	sl, r4, #26
 8006142:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	eba3 0309 	sub.w	r3, r3, r9
 800614c:	4543      	cmp	r3, r8
 800614e:	f77f af7a 	ble.w	8006046 <_printf_float+0x242>
 8006152:	2301      	movs	r3, #1
 8006154:	4652      	mov	r2, sl
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	f43f aeac 	beq.w	8005eba <_printf_float+0xb6>
 8006162:	f108 0801 	add.w	r8, r8, #1
 8006166:	e7ec      	b.n	8006142 <_printf_float+0x33e>
 8006168:	4613      	mov	r3, r2
 800616a:	4631      	mov	r1, r6
 800616c:	4642      	mov	r2, r8
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	d1c0      	bne.n	80060f8 <_printf_float+0x2f4>
 8006176:	e6a0      	b.n	8005eba <_printf_float+0xb6>
 8006178:	2301      	movs	r3, #1
 800617a:	4631      	mov	r1, r6
 800617c:	4628      	mov	r0, r5
 800617e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	f43f ae99 	beq.w	8005eba <_printf_float+0xb6>
 8006188:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800618a:	f10b 0b01 	add.w	fp, fp, #1
 800618e:	e7b9      	b.n	8006104 <_printf_float+0x300>
 8006190:	4631      	mov	r1, r6
 8006192:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006196:	4628      	mov	r0, r5
 8006198:	47b8      	blx	r7
 800619a:	3001      	adds	r0, #1
 800619c:	d1bf      	bne.n	800611e <_printf_float+0x31a>
 800619e:	e68c      	b.n	8005eba <_printf_float+0xb6>
 80061a0:	464b      	mov	r3, r9
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	eb08 020a 	add.w	r2, r8, sl
 80061aa:	47b8      	blx	r7
 80061ac:	3001      	adds	r0, #1
 80061ae:	d1c2      	bne.n	8006136 <_printf_float+0x332>
 80061b0:	e683      	b.n	8005eba <_printf_float+0xb6>
 80061b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061b4:	2a01      	cmp	r2, #1
 80061b6:	dc01      	bgt.n	80061bc <_printf_float+0x3b8>
 80061b8:	07db      	lsls	r3, r3, #31
 80061ba:	d539      	bpl.n	8006230 <_printf_float+0x42c>
 80061bc:	2301      	movs	r3, #1
 80061be:	4642      	mov	r2, r8
 80061c0:	4631      	mov	r1, r6
 80061c2:	4628      	mov	r0, r5
 80061c4:	47b8      	blx	r7
 80061c6:	3001      	adds	r0, #1
 80061c8:	f43f ae77 	beq.w	8005eba <_printf_float+0xb6>
 80061cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061d0:	4631      	mov	r1, r6
 80061d2:	4628      	mov	r0, r5
 80061d4:	47b8      	blx	r7
 80061d6:	3001      	adds	r0, #1
 80061d8:	f43f ae6f 	beq.w	8005eba <_printf_float+0xb6>
 80061dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061e0:	2200      	movs	r2, #0
 80061e2:	2300      	movs	r3, #0
 80061e4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80061e8:	f7fa fbde 	bl	80009a8 <__aeabi_dcmpeq>
 80061ec:	b9d8      	cbnz	r0, 8006226 <_printf_float+0x422>
 80061ee:	f109 33ff 	add.w	r3, r9, #4294967295
 80061f2:	f108 0201 	add.w	r2, r8, #1
 80061f6:	4631      	mov	r1, r6
 80061f8:	4628      	mov	r0, r5
 80061fa:	47b8      	blx	r7
 80061fc:	3001      	adds	r0, #1
 80061fe:	d10e      	bne.n	800621e <_printf_float+0x41a>
 8006200:	e65b      	b.n	8005eba <_printf_float+0xb6>
 8006202:	2301      	movs	r3, #1
 8006204:	464a      	mov	r2, r9
 8006206:	4631      	mov	r1, r6
 8006208:	4628      	mov	r0, r5
 800620a:	47b8      	blx	r7
 800620c:	3001      	adds	r0, #1
 800620e:	f43f ae54 	beq.w	8005eba <_printf_float+0xb6>
 8006212:	f108 0801 	add.w	r8, r8, #1
 8006216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006218:	3b01      	subs	r3, #1
 800621a:	4543      	cmp	r3, r8
 800621c:	dcf1      	bgt.n	8006202 <_printf_float+0x3fe>
 800621e:	4653      	mov	r3, sl
 8006220:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006224:	e6de      	b.n	8005fe4 <_printf_float+0x1e0>
 8006226:	f04f 0800 	mov.w	r8, #0
 800622a:	f104 091a 	add.w	r9, r4, #26
 800622e:	e7f2      	b.n	8006216 <_printf_float+0x412>
 8006230:	2301      	movs	r3, #1
 8006232:	4642      	mov	r2, r8
 8006234:	e7df      	b.n	80061f6 <_printf_float+0x3f2>
 8006236:	2301      	movs	r3, #1
 8006238:	464a      	mov	r2, r9
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	47b8      	blx	r7
 8006240:	3001      	adds	r0, #1
 8006242:	f43f ae3a 	beq.w	8005eba <_printf_float+0xb6>
 8006246:	f108 0801 	add.w	r8, r8, #1
 800624a:	68e3      	ldr	r3, [r4, #12]
 800624c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800624e:	1a5b      	subs	r3, r3, r1
 8006250:	4543      	cmp	r3, r8
 8006252:	dcf0      	bgt.n	8006236 <_printf_float+0x432>
 8006254:	e6fb      	b.n	800604e <_printf_float+0x24a>
 8006256:	f04f 0800 	mov.w	r8, #0
 800625a:	f104 0919 	add.w	r9, r4, #25
 800625e:	e7f4      	b.n	800624a <_printf_float+0x446>

08006260 <_printf_common>:
 8006260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006264:	4616      	mov	r6, r2
 8006266:	4699      	mov	r9, r3
 8006268:	688a      	ldr	r2, [r1, #8]
 800626a:	690b      	ldr	r3, [r1, #16]
 800626c:	4607      	mov	r7, r0
 800626e:	4293      	cmp	r3, r2
 8006270:	bfb8      	it	lt
 8006272:	4613      	movlt	r3, r2
 8006274:	6033      	str	r3, [r6, #0]
 8006276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800627a:	460c      	mov	r4, r1
 800627c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006280:	b10a      	cbz	r2, 8006286 <_printf_common+0x26>
 8006282:	3301      	adds	r3, #1
 8006284:	6033      	str	r3, [r6, #0]
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	0699      	lsls	r1, r3, #26
 800628a:	bf42      	ittt	mi
 800628c:	6833      	ldrmi	r3, [r6, #0]
 800628e:	3302      	addmi	r3, #2
 8006290:	6033      	strmi	r3, [r6, #0]
 8006292:	6825      	ldr	r5, [r4, #0]
 8006294:	f015 0506 	ands.w	r5, r5, #6
 8006298:	d106      	bne.n	80062a8 <_printf_common+0x48>
 800629a:	f104 0a19 	add.w	sl, r4, #25
 800629e:	68e3      	ldr	r3, [r4, #12]
 80062a0:	6832      	ldr	r2, [r6, #0]
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	42ab      	cmp	r3, r5
 80062a6:	dc2b      	bgt.n	8006300 <_printf_common+0xa0>
 80062a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062ac:	1e13      	subs	r3, r2, #0
 80062ae:	6822      	ldr	r2, [r4, #0]
 80062b0:	bf18      	it	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	0692      	lsls	r2, r2, #26
 80062b6:	d430      	bmi.n	800631a <_printf_common+0xba>
 80062b8:	4649      	mov	r1, r9
 80062ba:	4638      	mov	r0, r7
 80062bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062c0:	47c0      	blx	r8
 80062c2:	3001      	adds	r0, #1
 80062c4:	d023      	beq.n	800630e <_printf_common+0xae>
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	6922      	ldr	r2, [r4, #16]
 80062ca:	f003 0306 	and.w	r3, r3, #6
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	bf14      	ite	ne
 80062d2:	2500      	movne	r5, #0
 80062d4:	6833      	ldreq	r3, [r6, #0]
 80062d6:	f04f 0600 	mov.w	r6, #0
 80062da:	bf08      	it	eq
 80062dc:	68e5      	ldreq	r5, [r4, #12]
 80062de:	f104 041a 	add.w	r4, r4, #26
 80062e2:	bf08      	it	eq
 80062e4:	1aed      	subeq	r5, r5, r3
 80062e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80062ea:	bf08      	it	eq
 80062ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062f0:	4293      	cmp	r3, r2
 80062f2:	bfc4      	itt	gt
 80062f4:	1a9b      	subgt	r3, r3, r2
 80062f6:	18ed      	addgt	r5, r5, r3
 80062f8:	42b5      	cmp	r5, r6
 80062fa:	d11a      	bne.n	8006332 <_printf_common+0xd2>
 80062fc:	2000      	movs	r0, #0
 80062fe:	e008      	b.n	8006312 <_printf_common+0xb2>
 8006300:	2301      	movs	r3, #1
 8006302:	4652      	mov	r2, sl
 8006304:	4649      	mov	r1, r9
 8006306:	4638      	mov	r0, r7
 8006308:	47c0      	blx	r8
 800630a:	3001      	adds	r0, #1
 800630c:	d103      	bne.n	8006316 <_printf_common+0xb6>
 800630e:	f04f 30ff 	mov.w	r0, #4294967295
 8006312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006316:	3501      	adds	r5, #1
 8006318:	e7c1      	b.n	800629e <_printf_common+0x3e>
 800631a:	2030      	movs	r0, #48	; 0x30
 800631c:	18e1      	adds	r1, r4, r3
 800631e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006328:	4422      	add	r2, r4
 800632a:	3302      	adds	r3, #2
 800632c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006330:	e7c2      	b.n	80062b8 <_printf_common+0x58>
 8006332:	2301      	movs	r3, #1
 8006334:	4622      	mov	r2, r4
 8006336:	4649      	mov	r1, r9
 8006338:	4638      	mov	r0, r7
 800633a:	47c0      	blx	r8
 800633c:	3001      	adds	r0, #1
 800633e:	d0e6      	beq.n	800630e <_printf_common+0xae>
 8006340:	3601      	adds	r6, #1
 8006342:	e7d9      	b.n	80062f8 <_printf_common+0x98>

08006344 <_printf_i>:
 8006344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006348:	7e0f      	ldrb	r7, [r1, #24]
 800634a:	4691      	mov	r9, r2
 800634c:	2f78      	cmp	r7, #120	; 0x78
 800634e:	4680      	mov	r8, r0
 8006350:	460c      	mov	r4, r1
 8006352:	469a      	mov	sl, r3
 8006354:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800635a:	d807      	bhi.n	800636c <_printf_i+0x28>
 800635c:	2f62      	cmp	r7, #98	; 0x62
 800635e:	d80a      	bhi.n	8006376 <_printf_i+0x32>
 8006360:	2f00      	cmp	r7, #0
 8006362:	f000 80d5 	beq.w	8006510 <_printf_i+0x1cc>
 8006366:	2f58      	cmp	r7, #88	; 0x58
 8006368:	f000 80c1 	beq.w	80064ee <_printf_i+0x1aa>
 800636c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006374:	e03a      	b.n	80063ec <_printf_i+0xa8>
 8006376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800637a:	2b15      	cmp	r3, #21
 800637c:	d8f6      	bhi.n	800636c <_printf_i+0x28>
 800637e:	a101      	add	r1, pc, #4	; (adr r1, 8006384 <_printf_i+0x40>)
 8006380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006384:	080063dd 	.word	0x080063dd
 8006388:	080063f1 	.word	0x080063f1
 800638c:	0800636d 	.word	0x0800636d
 8006390:	0800636d 	.word	0x0800636d
 8006394:	0800636d 	.word	0x0800636d
 8006398:	0800636d 	.word	0x0800636d
 800639c:	080063f1 	.word	0x080063f1
 80063a0:	0800636d 	.word	0x0800636d
 80063a4:	0800636d 	.word	0x0800636d
 80063a8:	0800636d 	.word	0x0800636d
 80063ac:	0800636d 	.word	0x0800636d
 80063b0:	080064f7 	.word	0x080064f7
 80063b4:	0800641d 	.word	0x0800641d
 80063b8:	080064b1 	.word	0x080064b1
 80063bc:	0800636d 	.word	0x0800636d
 80063c0:	0800636d 	.word	0x0800636d
 80063c4:	08006519 	.word	0x08006519
 80063c8:	0800636d 	.word	0x0800636d
 80063cc:	0800641d 	.word	0x0800641d
 80063d0:	0800636d 	.word	0x0800636d
 80063d4:	0800636d 	.word	0x0800636d
 80063d8:	080064b9 	.word	0x080064b9
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	1d1a      	adds	r2, r3, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	602a      	str	r2, [r5, #0]
 80063e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0a0      	b.n	8006532 <_printf_i+0x1ee>
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	682b      	ldr	r3, [r5, #0]
 80063f4:	0607      	lsls	r7, r0, #24
 80063f6:	f103 0104 	add.w	r1, r3, #4
 80063fa:	6029      	str	r1, [r5, #0]
 80063fc:	d501      	bpl.n	8006402 <_printf_i+0xbe>
 80063fe:	681e      	ldr	r6, [r3, #0]
 8006400:	e003      	b.n	800640a <_printf_i+0xc6>
 8006402:	0646      	lsls	r6, r0, #25
 8006404:	d5fb      	bpl.n	80063fe <_printf_i+0xba>
 8006406:	f9b3 6000 	ldrsh.w	r6, [r3]
 800640a:	2e00      	cmp	r6, #0
 800640c:	da03      	bge.n	8006416 <_printf_i+0xd2>
 800640e:	232d      	movs	r3, #45	; 0x2d
 8006410:	4276      	negs	r6, r6
 8006412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006416:	230a      	movs	r3, #10
 8006418:	4859      	ldr	r0, [pc, #356]	; (8006580 <_printf_i+0x23c>)
 800641a:	e012      	b.n	8006442 <_printf_i+0xfe>
 800641c:	682b      	ldr	r3, [r5, #0]
 800641e:	6820      	ldr	r0, [r4, #0]
 8006420:	1d19      	adds	r1, r3, #4
 8006422:	6029      	str	r1, [r5, #0]
 8006424:	0605      	lsls	r5, r0, #24
 8006426:	d501      	bpl.n	800642c <_printf_i+0xe8>
 8006428:	681e      	ldr	r6, [r3, #0]
 800642a:	e002      	b.n	8006432 <_printf_i+0xee>
 800642c:	0641      	lsls	r1, r0, #25
 800642e:	d5fb      	bpl.n	8006428 <_printf_i+0xe4>
 8006430:	881e      	ldrh	r6, [r3, #0]
 8006432:	2f6f      	cmp	r7, #111	; 0x6f
 8006434:	bf0c      	ite	eq
 8006436:	2308      	moveq	r3, #8
 8006438:	230a      	movne	r3, #10
 800643a:	4851      	ldr	r0, [pc, #324]	; (8006580 <_printf_i+0x23c>)
 800643c:	2100      	movs	r1, #0
 800643e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006442:	6865      	ldr	r5, [r4, #4]
 8006444:	2d00      	cmp	r5, #0
 8006446:	bfa8      	it	ge
 8006448:	6821      	ldrge	r1, [r4, #0]
 800644a:	60a5      	str	r5, [r4, #8]
 800644c:	bfa4      	itt	ge
 800644e:	f021 0104 	bicge.w	r1, r1, #4
 8006452:	6021      	strge	r1, [r4, #0]
 8006454:	b90e      	cbnz	r6, 800645a <_printf_i+0x116>
 8006456:	2d00      	cmp	r5, #0
 8006458:	d04b      	beq.n	80064f2 <_printf_i+0x1ae>
 800645a:	4615      	mov	r5, r2
 800645c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006460:	fb03 6711 	mls	r7, r3, r1, r6
 8006464:	5dc7      	ldrb	r7, [r0, r7]
 8006466:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800646a:	4637      	mov	r7, r6
 800646c:	42bb      	cmp	r3, r7
 800646e:	460e      	mov	r6, r1
 8006470:	d9f4      	bls.n	800645c <_printf_i+0x118>
 8006472:	2b08      	cmp	r3, #8
 8006474:	d10b      	bne.n	800648e <_printf_i+0x14a>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	07de      	lsls	r6, r3, #31
 800647a:	d508      	bpl.n	800648e <_printf_i+0x14a>
 800647c:	6923      	ldr	r3, [r4, #16]
 800647e:	6861      	ldr	r1, [r4, #4]
 8006480:	4299      	cmp	r1, r3
 8006482:	bfde      	ittt	le
 8006484:	2330      	movle	r3, #48	; 0x30
 8006486:	f805 3c01 	strble.w	r3, [r5, #-1]
 800648a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800648e:	1b52      	subs	r2, r2, r5
 8006490:	6122      	str	r2, [r4, #16]
 8006492:	464b      	mov	r3, r9
 8006494:	4621      	mov	r1, r4
 8006496:	4640      	mov	r0, r8
 8006498:	f8cd a000 	str.w	sl, [sp]
 800649c:	aa03      	add	r2, sp, #12
 800649e:	f7ff fedf 	bl	8006260 <_printf_common>
 80064a2:	3001      	adds	r0, #1
 80064a4:	d14a      	bne.n	800653c <_printf_i+0x1f8>
 80064a6:	f04f 30ff 	mov.w	r0, #4294967295
 80064aa:	b004      	add	sp, #16
 80064ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	f043 0320 	orr.w	r3, r3, #32
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	2778      	movs	r7, #120	; 0x78
 80064ba:	4832      	ldr	r0, [pc, #200]	; (8006584 <_printf_i+0x240>)
 80064bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	6829      	ldr	r1, [r5, #0]
 80064c4:	061f      	lsls	r7, r3, #24
 80064c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80064ca:	d402      	bmi.n	80064d2 <_printf_i+0x18e>
 80064cc:	065f      	lsls	r7, r3, #25
 80064ce:	bf48      	it	mi
 80064d0:	b2b6      	uxthmi	r6, r6
 80064d2:	07df      	lsls	r7, r3, #31
 80064d4:	bf48      	it	mi
 80064d6:	f043 0320 	orrmi.w	r3, r3, #32
 80064da:	6029      	str	r1, [r5, #0]
 80064dc:	bf48      	it	mi
 80064de:	6023      	strmi	r3, [r4, #0]
 80064e0:	b91e      	cbnz	r6, 80064ea <_printf_i+0x1a6>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	f023 0320 	bic.w	r3, r3, #32
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	2310      	movs	r3, #16
 80064ec:	e7a6      	b.n	800643c <_printf_i+0xf8>
 80064ee:	4824      	ldr	r0, [pc, #144]	; (8006580 <_printf_i+0x23c>)
 80064f0:	e7e4      	b.n	80064bc <_printf_i+0x178>
 80064f2:	4615      	mov	r5, r2
 80064f4:	e7bd      	b.n	8006472 <_printf_i+0x12e>
 80064f6:	682b      	ldr	r3, [r5, #0]
 80064f8:	6826      	ldr	r6, [r4, #0]
 80064fa:	1d18      	adds	r0, r3, #4
 80064fc:	6961      	ldr	r1, [r4, #20]
 80064fe:	6028      	str	r0, [r5, #0]
 8006500:	0635      	lsls	r5, r6, #24
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	d501      	bpl.n	800650a <_printf_i+0x1c6>
 8006506:	6019      	str	r1, [r3, #0]
 8006508:	e002      	b.n	8006510 <_printf_i+0x1cc>
 800650a:	0670      	lsls	r0, r6, #25
 800650c:	d5fb      	bpl.n	8006506 <_printf_i+0x1c2>
 800650e:	8019      	strh	r1, [r3, #0]
 8006510:	2300      	movs	r3, #0
 8006512:	4615      	mov	r5, r2
 8006514:	6123      	str	r3, [r4, #16]
 8006516:	e7bc      	b.n	8006492 <_printf_i+0x14e>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	2100      	movs	r1, #0
 800651c:	1d1a      	adds	r2, r3, #4
 800651e:	602a      	str	r2, [r5, #0]
 8006520:	681d      	ldr	r5, [r3, #0]
 8006522:	6862      	ldr	r2, [r4, #4]
 8006524:	4628      	mov	r0, r5
 8006526:	f000 f9c4 	bl	80068b2 <memchr>
 800652a:	b108      	cbz	r0, 8006530 <_printf_i+0x1ec>
 800652c:	1b40      	subs	r0, r0, r5
 800652e:	6060      	str	r0, [r4, #4]
 8006530:	6863      	ldr	r3, [r4, #4]
 8006532:	6123      	str	r3, [r4, #16]
 8006534:	2300      	movs	r3, #0
 8006536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653a:	e7aa      	b.n	8006492 <_printf_i+0x14e>
 800653c:	462a      	mov	r2, r5
 800653e:	4649      	mov	r1, r9
 8006540:	4640      	mov	r0, r8
 8006542:	6923      	ldr	r3, [r4, #16]
 8006544:	47d0      	blx	sl
 8006546:	3001      	adds	r0, #1
 8006548:	d0ad      	beq.n	80064a6 <_printf_i+0x162>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	079b      	lsls	r3, r3, #30
 800654e:	d413      	bmi.n	8006578 <_printf_i+0x234>
 8006550:	68e0      	ldr	r0, [r4, #12]
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	4298      	cmp	r0, r3
 8006556:	bfb8      	it	lt
 8006558:	4618      	movlt	r0, r3
 800655a:	e7a6      	b.n	80064aa <_printf_i+0x166>
 800655c:	2301      	movs	r3, #1
 800655e:	4632      	mov	r2, r6
 8006560:	4649      	mov	r1, r9
 8006562:	4640      	mov	r0, r8
 8006564:	47d0      	blx	sl
 8006566:	3001      	adds	r0, #1
 8006568:	d09d      	beq.n	80064a6 <_printf_i+0x162>
 800656a:	3501      	adds	r5, #1
 800656c:	68e3      	ldr	r3, [r4, #12]
 800656e:	9903      	ldr	r1, [sp, #12]
 8006570:	1a5b      	subs	r3, r3, r1
 8006572:	42ab      	cmp	r3, r5
 8006574:	dcf2      	bgt.n	800655c <_printf_i+0x218>
 8006576:	e7eb      	b.n	8006550 <_printf_i+0x20c>
 8006578:	2500      	movs	r5, #0
 800657a:	f104 0619 	add.w	r6, r4, #25
 800657e:	e7f5      	b.n	800656c <_printf_i+0x228>
 8006580:	08009261 	.word	0x08009261
 8006584:	08009272 	.word	0x08009272

08006588 <std>:
 8006588:	2300      	movs	r3, #0
 800658a:	b510      	push	{r4, lr}
 800658c:	4604      	mov	r4, r0
 800658e:	e9c0 3300 	strd	r3, r3, [r0]
 8006592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006596:	6083      	str	r3, [r0, #8]
 8006598:	8181      	strh	r1, [r0, #12]
 800659a:	6643      	str	r3, [r0, #100]	; 0x64
 800659c:	81c2      	strh	r2, [r0, #14]
 800659e:	6183      	str	r3, [r0, #24]
 80065a0:	4619      	mov	r1, r3
 80065a2:	2208      	movs	r2, #8
 80065a4:	305c      	adds	r0, #92	; 0x5c
 80065a6:	f000 f8f4 	bl	8006792 <memset>
 80065aa:	4b0d      	ldr	r3, [pc, #52]	; (80065e0 <std+0x58>)
 80065ac:	6224      	str	r4, [r4, #32]
 80065ae:	6263      	str	r3, [r4, #36]	; 0x24
 80065b0:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <std+0x5c>)
 80065b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80065b4:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <std+0x60>)
 80065b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065b8:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <std+0x64>)
 80065ba:	6323      	str	r3, [r4, #48]	; 0x30
 80065bc:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <std+0x68>)
 80065be:	429c      	cmp	r4, r3
 80065c0:	d006      	beq.n	80065d0 <std+0x48>
 80065c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80065c6:	4294      	cmp	r4, r2
 80065c8:	d002      	beq.n	80065d0 <std+0x48>
 80065ca:	33d0      	adds	r3, #208	; 0xd0
 80065cc:	429c      	cmp	r4, r3
 80065ce:	d105      	bne.n	80065dc <std+0x54>
 80065d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d8:	f000 b968 	b.w	80068ac <__retarget_lock_init_recursive>
 80065dc:	bd10      	pop	{r4, pc}
 80065de:	bf00      	nop
 80065e0:	0800670d 	.word	0x0800670d
 80065e4:	0800672f 	.word	0x0800672f
 80065e8:	08006767 	.word	0x08006767
 80065ec:	0800678b 	.word	0x0800678b
 80065f0:	200003e4 	.word	0x200003e4

080065f4 <stdio_exit_handler>:
 80065f4:	4a02      	ldr	r2, [pc, #8]	; (8006600 <stdio_exit_handler+0xc>)
 80065f6:	4903      	ldr	r1, [pc, #12]	; (8006604 <stdio_exit_handler+0x10>)
 80065f8:	4803      	ldr	r0, [pc, #12]	; (8006608 <stdio_exit_handler+0x14>)
 80065fa:	f000 b869 	b.w	80066d0 <_fwalk_sglue>
 80065fe:	bf00      	nop
 8006600:	20000010 	.word	0x20000010
 8006604:	08007e4d 	.word	0x08007e4d
 8006608:	2000001c 	.word	0x2000001c

0800660c <cleanup_stdio>:
 800660c:	6841      	ldr	r1, [r0, #4]
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <cleanup_stdio+0x34>)
 8006610:	b510      	push	{r4, lr}
 8006612:	4299      	cmp	r1, r3
 8006614:	4604      	mov	r4, r0
 8006616:	d001      	beq.n	800661c <cleanup_stdio+0x10>
 8006618:	f001 fc18 	bl	8007e4c <_fflush_r>
 800661c:	68a1      	ldr	r1, [r4, #8]
 800661e:	4b09      	ldr	r3, [pc, #36]	; (8006644 <cleanup_stdio+0x38>)
 8006620:	4299      	cmp	r1, r3
 8006622:	d002      	beq.n	800662a <cleanup_stdio+0x1e>
 8006624:	4620      	mov	r0, r4
 8006626:	f001 fc11 	bl	8007e4c <_fflush_r>
 800662a:	68e1      	ldr	r1, [r4, #12]
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <cleanup_stdio+0x3c>)
 800662e:	4299      	cmp	r1, r3
 8006630:	d004      	beq.n	800663c <cleanup_stdio+0x30>
 8006632:	4620      	mov	r0, r4
 8006634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006638:	f001 bc08 	b.w	8007e4c <_fflush_r>
 800663c:	bd10      	pop	{r4, pc}
 800663e:	bf00      	nop
 8006640:	200003e4 	.word	0x200003e4
 8006644:	2000044c 	.word	0x2000044c
 8006648:	200004b4 	.word	0x200004b4

0800664c <global_stdio_init.part.0>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4b0b      	ldr	r3, [pc, #44]	; (800667c <global_stdio_init.part.0+0x30>)
 8006650:	4c0b      	ldr	r4, [pc, #44]	; (8006680 <global_stdio_init.part.0+0x34>)
 8006652:	4a0c      	ldr	r2, [pc, #48]	; (8006684 <global_stdio_init.part.0+0x38>)
 8006654:	4620      	mov	r0, r4
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	2104      	movs	r1, #4
 800665a:	2200      	movs	r2, #0
 800665c:	f7ff ff94 	bl	8006588 <std>
 8006660:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006664:	2201      	movs	r2, #1
 8006666:	2109      	movs	r1, #9
 8006668:	f7ff ff8e 	bl	8006588 <std>
 800666c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006670:	2202      	movs	r2, #2
 8006672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006676:	2112      	movs	r1, #18
 8006678:	f7ff bf86 	b.w	8006588 <std>
 800667c:	2000051c 	.word	0x2000051c
 8006680:	200003e4 	.word	0x200003e4
 8006684:	080065f5 	.word	0x080065f5

08006688 <__sfp_lock_acquire>:
 8006688:	4801      	ldr	r0, [pc, #4]	; (8006690 <__sfp_lock_acquire+0x8>)
 800668a:	f000 b910 	b.w	80068ae <__retarget_lock_acquire_recursive>
 800668e:	bf00      	nop
 8006690:	20000525 	.word	0x20000525

08006694 <__sfp_lock_release>:
 8006694:	4801      	ldr	r0, [pc, #4]	; (800669c <__sfp_lock_release+0x8>)
 8006696:	f000 b90b 	b.w	80068b0 <__retarget_lock_release_recursive>
 800669a:	bf00      	nop
 800669c:	20000525 	.word	0x20000525

080066a0 <__sinit>:
 80066a0:	b510      	push	{r4, lr}
 80066a2:	4604      	mov	r4, r0
 80066a4:	f7ff fff0 	bl	8006688 <__sfp_lock_acquire>
 80066a8:	6a23      	ldr	r3, [r4, #32]
 80066aa:	b11b      	cbz	r3, 80066b4 <__sinit+0x14>
 80066ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066b0:	f7ff bff0 	b.w	8006694 <__sfp_lock_release>
 80066b4:	4b04      	ldr	r3, [pc, #16]	; (80066c8 <__sinit+0x28>)
 80066b6:	6223      	str	r3, [r4, #32]
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <__sinit+0x2c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f5      	bne.n	80066ac <__sinit+0xc>
 80066c0:	f7ff ffc4 	bl	800664c <global_stdio_init.part.0>
 80066c4:	e7f2      	b.n	80066ac <__sinit+0xc>
 80066c6:	bf00      	nop
 80066c8:	0800660d 	.word	0x0800660d
 80066cc:	2000051c 	.word	0x2000051c

080066d0 <_fwalk_sglue>:
 80066d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d4:	4607      	mov	r7, r0
 80066d6:	4688      	mov	r8, r1
 80066d8:	4614      	mov	r4, r2
 80066da:	2600      	movs	r6, #0
 80066dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066e0:	f1b9 0901 	subs.w	r9, r9, #1
 80066e4:	d505      	bpl.n	80066f2 <_fwalk_sglue+0x22>
 80066e6:	6824      	ldr	r4, [r4, #0]
 80066e8:	2c00      	cmp	r4, #0
 80066ea:	d1f7      	bne.n	80066dc <_fwalk_sglue+0xc>
 80066ec:	4630      	mov	r0, r6
 80066ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f2:	89ab      	ldrh	r3, [r5, #12]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d907      	bls.n	8006708 <_fwalk_sglue+0x38>
 80066f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066fc:	3301      	adds	r3, #1
 80066fe:	d003      	beq.n	8006708 <_fwalk_sglue+0x38>
 8006700:	4629      	mov	r1, r5
 8006702:	4638      	mov	r0, r7
 8006704:	47c0      	blx	r8
 8006706:	4306      	orrs	r6, r0
 8006708:	3568      	adds	r5, #104	; 0x68
 800670a:	e7e9      	b.n	80066e0 <_fwalk_sglue+0x10>

0800670c <__sread>:
 800670c:	b510      	push	{r4, lr}
 800670e:	460c      	mov	r4, r1
 8006710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006714:	f000 f86c 	bl	80067f0 <_read_r>
 8006718:	2800      	cmp	r0, #0
 800671a:	bfab      	itete	ge
 800671c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800671e:	89a3      	ldrhlt	r3, [r4, #12]
 8006720:	181b      	addge	r3, r3, r0
 8006722:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006726:	bfac      	ite	ge
 8006728:	6563      	strge	r3, [r4, #84]	; 0x54
 800672a:	81a3      	strhlt	r3, [r4, #12]
 800672c:	bd10      	pop	{r4, pc}

0800672e <__swrite>:
 800672e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006732:	461f      	mov	r7, r3
 8006734:	898b      	ldrh	r3, [r1, #12]
 8006736:	4605      	mov	r5, r0
 8006738:	05db      	lsls	r3, r3, #23
 800673a:	460c      	mov	r4, r1
 800673c:	4616      	mov	r6, r2
 800673e:	d505      	bpl.n	800674c <__swrite+0x1e>
 8006740:	2302      	movs	r3, #2
 8006742:	2200      	movs	r2, #0
 8006744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006748:	f000 f840 	bl	80067cc <_lseek_r>
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	4632      	mov	r2, r6
 8006750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006754:	81a3      	strh	r3, [r4, #12]
 8006756:	4628      	mov	r0, r5
 8006758:	463b      	mov	r3, r7
 800675a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800675e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006762:	f000 b867 	b.w	8006834 <_write_r>

08006766 <__sseek>:
 8006766:	b510      	push	{r4, lr}
 8006768:	460c      	mov	r4, r1
 800676a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800676e:	f000 f82d 	bl	80067cc <_lseek_r>
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	bf15      	itete	ne
 8006778:	6560      	strne	r0, [r4, #84]	; 0x54
 800677a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800677e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006782:	81a3      	strheq	r3, [r4, #12]
 8006784:	bf18      	it	ne
 8006786:	81a3      	strhne	r3, [r4, #12]
 8006788:	bd10      	pop	{r4, pc}

0800678a <__sclose>:
 800678a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800678e:	f000 b80d 	b.w	80067ac <_close_r>

08006792 <memset>:
 8006792:	4603      	mov	r3, r0
 8006794:	4402      	add	r2, r0
 8006796:	4293      	cmp	r3, r2
 8006798:	d100      	bne.n	800679c <memset+0xa>
 800679a:	4770      	bx	lr
 800679c:	f803 1b01 	strb.w	r1, [r3], #1
 80067a0:	e7f9      	b.n	8006796 <memset+0x4>
	...

080067a4 <_localeconv_r>:
 80067a4:	4800      	ldr	r0, [pc, #0]	; (80067a8 <_localeconv_r+0x4>)
 80067a6:	4770      	bx	lr
 80067a8:	2000015c 	.word	0x2000015c

080067ac <_close_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	2300      	movs	r3, #0
 80067b0:	4d05      	ldr	r5, [pc, #20]	; (80067c8 <_close_r+0x1c>)
 80067b2:	4604      	mov	r4, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	602b      	str	r3, [r5, #0]
 80067b8:	f7fb f9ac 	bl	8001b14 <_close>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_close_r+0x1a>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_close_r+0x1a>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	20000520 	.word	0x20000520

080067cc <_lseek_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4604      	mov	r4, r0
 80067d0:	4608      	mov	r0, r1
 80067d2:	4611      	mov	r1, r2
 80067d4:	2200      	movs	r2, #0
 80067d6:	4d05      	ldr	r5, [pc, #20]	; (80067ec <_lseek_r+0x20>)
 80067d8:	602a      	str	r2, [r5, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	f7fb f9be 	bl	8001b5c <_lseek>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d102      	bne.n	80067ea <_lseek_r+0x1e>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	b103      	cbz	r3, 80067ea <_lseek_r+0x1e>
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	20000520 	.word	0x20000520

080067f0 <_read_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4604      	mov	r4, r0
 80067f4:	4608      	mov	r0, r1
 80067f6:	4611      	mov	r1, r2
 80067f8:	2200      	movs	r2, #0
 80067fa:	4d05      	ldr	r5, [pc, #20]	; (8006810 <_read_r+0x20>)
 80067fc:	602a      	str	r2, [r5, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	f7fb f94f 	bl	8001aa2 <_read>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d102      	bne.n	800680e <_read_r+0x1e>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	b103      	cbz	r3, 800680e <_read_r+0x1e>
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	bd38      	pop	{r3, r4, r5, pc}
 8006810:	20000520 	.word	0x20000520

08006814 <_sbrk_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	2300      	movs	r3, #0
 8006818:	4d05      	ldr	r5, [pc, #20]	; (8006830 <_sbrk_r+0x1c>)
 800681a:	4604      	mov	r4, r0
 800681c:	4608      	mov	r0, r1
 800681e:	602b      	str	r3, [r5, #0]
 8006820:	f7fb f9a8 	bl	8001b74 <_sbrk>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_sbrk_r+0x1a>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_sbrk_r+0x1a>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	20000520 	.word	0x20000520

08006834 <_write_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4604      	mov	r4, r0
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	2200      	movs	r2, #0
 800683e:	4d05      	ldr	r5, [pc, #20]	; (8006854 <_write_r+0x20>)
 8006840:	602a      	str	r2, [r5, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	f7fb f94a 	bl	8001adc <_write>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_write_r+0x1e>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b103      	cbz	r3, 8006852 <_write_r+0x1e>
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	20000520 	.word	0x20000520

08006858 <__errno>:
 8006858:	4b01      	ldr	r3, [pc, #4]	; (8006860 <__errno+0x8>)
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	20000068 	.word	0x20000068

08006864 <__libc_init_array>:
 8006864:	b570      	push	{r4, r5, r6, lr}
 8006866:	2600      	movs	r6, #0
 8006868:	4d0c      	ldr	r5, [pc, #48]	; (800689c <__libc_init_array+0x38>)
 800686a:	4c0d      	ldr	r4, [pc, #52]	; (80068a0 <__libc_init_array+0x3c>)
 800686c:	1b64      	subs	r4, r4, r5
 800686e:	10a4      	asrs	r4, r4, #2
 8006870:	42a6      	cmp	r6, r4
 8006872:	d109      	bne.n	8006888 <__libc_init_array+0x24>
 8006874:	f002 fc34 	bl	80090e0 <_init>
 8006878:	2600      	movs	r6, #0
 800687a:	4d0a      	ldr	r5, [pc, #40]	; (80068a4 <__libc_init_array+0x40>)
 800687c:	4c0a      	ldr	r4, [pc, #40]	; (80068a8 <__libc_init_array+0x44>)
 800687e:	1b64      	subs	r4, r4, r5
 8006880:	10a4      	asrs	r4, r4, #2
 8006882:	42a6      	cmp	r6, r4
 8006884:	d105      	bne.n	8006892 <__libc_init_array+0x2e>
 8006886:	bd70      	pop	{r4, r5, r6, pc}
 8006888:	f855 3b04 	ldr.w	r3, [r5], #4
 800688c:	4798      	blx	r3
 800688e:	3601      	adds	r6, #1
 8006890:	e7ee      	b.n	8006870 <__libc_init_array+0xc>
 8006892:	f855 3b04 	ldr.w	r3, [r5], #4
 8006896:	4798      	blx	r3
 8006898:	3601      	adds	r6, #1
 800689a:	e7f2      	b.n	8006882 <__libc_init_array+0x1e>
 800689c:	08009894 	.word	0x08009894
 80068a0:	08009894 	.word	0x08009894
 80068a4:	08009894 	.word	0x08009894
 80068a8:	08009898 	.word	0x08009898

080068ac <__retarget_lock_init_recursive>:
 80068ac:	4770      	bx	lr

080068ae <__retarget_lock_acquire_recursive>:
 80068ae:	4770      	bx	lr

080068b0 <__retarget_lock_release_recursive>:
 80068b0:	4770      	bx	lr

080068b2 <memchr>:
 80068b2:	4603      	mov	r3, r0
 80068b4:	b510      	push	{r4, lr}
 80068b6:	b2c9      	uxtb	r1, r1
 80068b8:	4402      	add	r2, r0
 80068ba:	4293      	cmp	r3, r2
 80068bc:	4618      	mov	r0, r3
 80068be:	d101      	bne.n	80068c4 <memchr+0x12>
 80068c0:	2000      	movs	r0, #0
 80068c2:	e003      	b.n	80068cc <memchr+0x1a>
 80068c4:	7804      	ldrb	r4, [r0, #0]
 80068c6:	3301      	adds	r3, #1
 80068c8:	428c      	cmp	r4, r1
 80068ca:	d1f6      	bne.n	80068ba <memchr+0x8>
 80068cc:	bd10      	pop	{r4, pc}

080068ce <memcpy>:
 80068ce:	440a      	add	r2, r1
 80068d0:	4291      	cmp	r1, r2
 80068d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80068d6:	d100      	bne.n	80068da <memcpy+0xc>
 80068d8:	4770      	bx	lr
 80068da:	b510      	push	{r4, lr}
 80068dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e0:	4291      	cmp	r1, r2
 80068e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068e6:	d1f9      	bne.n	80068dc <memcpy+0xe>
 80068e8:	bd10      	pop	{r4, pc}

080068ea <quorem>:
 80068ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ee:	6903      	ldr	r3, [r0, #16]
 80068f0:	690c      	ldr	r4, [r1, #16]
 80068f2:	4607      	mov	r7, r0
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	db7f      	blt.n	80069f8 <quorem+0x10e>
 80068f8:	3c01      	subs	r4, #1
 80068fa:	f100 0514 	add.w	r5, r0, #20
 80068fe:	f101 0814 	add.w	r8, r1, #20
 8006902:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800690c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006910:	3301      	adds	r3, #1
 8006912:	429a      	cmp	r2, r3
 8006914:	fbb2 f6f3 	udiv	r6, r2, r3
 8006918:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800691c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006920:	d331      	bcc.n	8006986 <quorem+0x9c>
 8006922:	f04f 0e00 	mov.w	lr, #0
 8006926:	4640      	mov	r0, r8
 8006928:	46ac      	mov	ip, r5
 800692a:	46f2      	mov	sl, lr
 800692c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006930:	b293      	uxth	r3, r2
 8006932:	fb06 e303 	mla	r3, r6, r3, lr
 8006936:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800693a:	0c1a      	lsrs	r2, r3, #16
 800693c:	b29b      	uxth	r3, r3
 800693e:	fb06 220e 	mla	r2, r6, lr, r2
 8006942:	ebaa 0303 	sub.w	r3, sl, r3
 8006946:	f8dc a000 	ldr.w	sl, [ip]
 800694a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800694e:	fa1f fa8a 	uxth.w	sl, sl
 8006952:	4453      	add	r3, sl
 8006954:	f8dc a000 	ldr.w	sl, [ip]
 8006958:	b292      	uxth	r2, r2
 800695a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800695e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006962:	b29b      	uxth	r3, r3
 8006964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006968:	4581      	cmp	r9, r0
 800696a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800696e:	f84c 3b04 	str.w	r3, [ip], #4
 8006972:	d2db      	bcs.n	800692c <quorem+0x42>
 8006974:	f855 300b 	ldr.w	r3, [r5, fp]
 8006978:	b92b      	cbnz	r3, 8006986 <quorem+0x9c>
 800697a:	9b01      	ldr	r3, [sp, #4]
 800697c:	3b04      	subs	r3, #4
 800697e:	429d      	cmp	r5, r3
 8006980:	461a      	mov	r2, r3
 8006982:	d32d      	bcc.n	80069e0 <quorem+0xf6>
 8006984:	613c      	str	r4, [r7, #16]
 8006986:	4638      	mov	r0, r7
 8006988:	f001 f8e0 	bl	8007b4c <__mcmp>
 800698c:	2800      	cmp	r0, #0
 800698e:	db23      	blt.n	80069d8 <quorem+0xee>
 8006990:	4629      	mov	r1, r5
 8006992:	2000      	movs	r0, #0
 8006994:	3601      	adds	r6, #1
 8006996:	f858 2b04 	ldr.w	r2, [r8], #4
 800699a:	f8d1 c000 	ldr.w	ip, [r1]
 800699e:	b293      	uxth	r3, r2
 80069a0:	1ac3      	subs	r3, r0, r3
 80069a2:	0c12      	lsrs	r2, r2, #16
 80069a4:	fa1f f08c 	uxth.w	r0, ip
 80069a8:	4403      	add	r3, r0
 80069aa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069b8:	45c1      	cmp	r9, r8
 80069ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069be:	f841 3b04 	str.w	r3, [r1], #4
 80069c2:	d2e8      	bcs.n	8006996 <quorem+0xac>
 80069c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069cc:	b922      	cbnz	r2, 80069d8 <quorem+0xee>
 80069ce:	3b04      	subs	r3, #4
 80069d0:	429d      	cmp	r5, r3
 80069d2:	461a      	mov	r2, r3
 80069d4:	d30a      	bcc.n	80069ec <quorem+0x102>
 80069d6:	613c      	str	r4, [r7, #16]
 80069d8:	4630      	mov	r0, r6
 80069da:	b003      	add	sp, #12
 80069dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e0:	6812      	ldr	r2, [r2, #0]
 80069e2:	3b04      	subs	r3, #4
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	d1cd      	bne.n	8006984 <quorem+0x9a>
 80069e8:	3c01      	subs	r4, #1
 80069ea:	e7c8      	b.n	800697e <quorem+0x94>
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	3b04      	subs	r3, #4
 80069f0:	2a00      	cmp	r2, #0
 80069f2:	d1f0      	bne.n	80069d6 <quorem+0xec>
 80069f4:	3c01      	subs	r4, #1
 80069f6:	e7eb      	b.n	80069d0 <quorem+0xe6>
 80069f8:	2000      	movs	r0, #0
 80069fa:	e7ee      	b.n	80069da <quorem+0xf0>
 80069fc:	0000      	movs	r0, r0
	...

08006a00 <_dtoa_r>:
 8006a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a04:	4616      	mov	r6, r2
 8006a06:	461f      	mov	r7, r3
 8006a08:	69c4      	ldr	r4, [r0, #28]
 8006a0a:	b099      	sub	sp, #100	; 0x64
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006a12:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006a16:	b974      	cbnz	r4, 8006a36 <_dtoa_r+0x36>
 8006a18:	2010      	movs	r0, #16
 8006a1a:	f7ff f8a3 	bl	8005b64 <malloc>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	61e8      	str	r0, [r5, #28]
 8006a22:	b920      	cbnz	r0, 8006a2e <_dtoa_r+0x2e>
 8006a24:	21ef      	movs	r1, #239	; 0xef
 8006a26:	4bac      	ldr	r3, [pc, #688]	; (8006cd8 <_dtoa_r+0x2d8>)
 8006a28:	48ac      	ldr	r0, [pc, #688]	; (8006cdc <_dtoa_r+0x2dc>)
 8006a2a:	f001 fa37 	bl	8007e9c <__assert_func>
 8006a2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a32:	6004      	str	r4, [r0, #0]
 8006a34:	60c4      	str	r4, [r0, #12]
 8006a36:	69eb      	ldr	r3, [r5, #28]
 8006a38:	6819      	ldr	r1, [r3, #0]
 8006a3a:	b151      	cbz	r1, 8006a52 <_dtoa_r+0x52>
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4093      	lsls	r3, r2
 8006a42:	604a      	str	r2, [r1, #4]
 8006a44:	608b      	str	r3, [r1, #8]
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 fe46 	bl	80076d8 <_Bfree>
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	69eb      	ldr	r3, [r5, #28]
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	1e3b      	subs	r3, r7, #0
 8006a54:	bfaf      	iteee	ge
 8006a56:	2300      	movge	r3, #0
 8006a58:	2201      	movlt	r2, #1
 8006a5a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a5e:	9305      	strlt	r3, [sp, #20]
 8006a60:	bfa8      	it	ge
 8006a62:	f8c8 3000 	strge.w	r3, [r8]
 8006a66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006a6a:	4b9d      	ldr	r3, [pc, #628]	; (8006ce0 <_dtoa_r+0x2e0>)
 8006a6c:	bfb8      	it	lt
 8006a6e:	f8c8 2000 	strlt.w	r2, [r8]
 8006a72:	ea33 0309 	bics.w	r3, r3, r9
 8006a76:	d119      	bne.n	8006aac <_dtoa_r+0xac>
 8006a78:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a84:	4333      	orrs	r3, r6
 8006a86:	f000 8589 	beq.w	800759c <_dtoa_r+0xb9c>
 8006a8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a8c:	b953      	cbnz	r3, 8006aa4 <_dtoa_r+0xa4>
 8006a8e:	4b95      	ldr	r3, [pc, #596]	; (8006ce4 <_dtoa_r+0x2e4>)
 8006a90:	e023      	b.n	8006ada <_dtoa_r+0xda>
 8006a92:	4b95      	ldr	r3, [pc, #596]	; (8006ce8 <_dtoa_r+0x2e8>)
 8006a94:	9303      	str	r3, [sp, #12]
 8006a96:	3308      	adds	r3, #8
 8006a98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	9803      	ldr	r0, [sp, #12]
 8006a9e:	b019      	add	sp, #100	; 0x64
 8006aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa4:	4b8f      	ldr	r3, [pc, #572]	; (8006ce4 <_dtoa_r+0x2e4>)
 8006aa6:	9303      	str	r3, [sp, #12]
 8006aa8:	3303      	adds	r3, #3
 8006aaa:	e7f5      	b.n	8006a98 <_dtoa_r+0x98>
 8006aac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ab0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006ab4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2300      	movs	r3, #0
 8006abc:	f7f9 ff74 	bl	80009a8 <__aeabi_dcmpeq>
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	b160      	cbz	r0, 8006ade <_dtoa_r+0xde>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8562 	beq.w	8007596 <_dtoa_r+0xb96>
 8006ad2:	4b86      	ldr	r3, [pc, #536]	; (8006cec <_dtoa_r+0x2ec>)
 8006ad4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	9303      	str	r3, [sp, #12]
 8006adc:	e7de      	b.n	8006a9c <_dtoa_r+0x9c>
 8006ade:	ab16      	add	r3, sp, #88	; 0x58
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	ab17      	add	r3, sp, #92	; 0x5c
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006aec:	f001 f8d6 	bl	8007c9c <__d2b>
 8006af0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006af4:	4682      	mov	sl, r0
 8006af6:	2c00      	cmp	r4, #0
 8006af8:	d07e      	beq.n	8006bf8 <_dtoa_r+0x1f8>
 8006afa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b00:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b08:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b10:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006b14:	4619      	mov	r1, r3
 8006b16:	2200      	movs	r2, #0
 8006b18:	4b75      	ldr	r3, [pc, #468]	; (8006cf0 <_dtoa_r+0x2f0>)
 8006b1a:	f7f9 fb25 	bl	8000168 <__aeabi_dsub>
 8006b1e:	a368      	add	r3, pc, #416	; (adr r3, 8006cc0 <_dtoa_r+0x2c0>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f7f9 fcd8 	bl	80004d8 <__aeabi_dmul>
 8006b28:	a367      	add	r3, pc, #412	; (adr r3, 8006cc8 <_dtoa_r+0x2c8>)
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f7f9 fb1d 	bl	800016c <__adddf3>
 8006b32:	4606      	mov	r6, r0
 8006b34:	4620      	mov	r0, r4
 8006b36:	460f      	mov	r7, r1
 8006b38:	f7f9 fc64 	bl	8000404 <__aeabi_i2d>
 8006b3c:	a364      	add	r3, pc, #400	; (adr r3, 8006cd0 <_dtoa_r+0x2d0>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f7f9 fcc9 	bl	80004d8 <__aeabi_dmul>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	f7f9 fb0d 	bl	800016c <__adddf3>
 8006b52:	4606      	mov	r6, r0
 8006b54:	460f      	mov	r7, r1
 8006b56:	f7f9 ff6f 	bl	8000a38 <__aeabi_d2iz>
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	4683      	mov	fp, r0
 8006b5e:	2300      	movs	r3, #0
 8006b60:	4630      	mov	r0, r6
 8006b62:	4639      	mov	r1, r7
 8006b64:	f7f9 ff2a 	bl	80009bc <__aeabi_dcmplt>
 8006b68:	b148      	cbz	r0, 8006b7e <_dtoa_r+0x17e>
 8006b6a:	4658      	mov	r0, fp
 8006b6c:	f7f9 fc4a 	bl	8000404 <__aeabi_i2d>
 8006b70:	4632      	mov	r2, r6
 8006b72:	463b      	mov	r3, r7
 8006b74:	f7f9 ff18 	bl	80009a8 <__aeabi_dcmpeq>
 8006b78:	b908      	cbnz	r0, 8006b7e <_dtoa_r+0x17e>
 8006b7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b7e:	f1bb 0f16 	cmp.w	fp, #22
 8006b82:	d857      	bhi.n	8006c34 <_dtoa_r+0x234>
 8006b84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b88:	4b5a      	ldr	r3, [pc, #360]	; (8006cf4 <_dtoa_r+0x2f4>)
 8006b8a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	f7f9 ff13 	bl	80009bc <__aeabi_dcmplt>
 8006b96:	2800      	cmp	r0, #0
 8006b98:	d04e      	beq.n	8006c38 <_dtoa_r+0x238>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ba2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ba4:	1b1b      	subs	r3, r3, r4
 8006ba6:	1e5a      	subs	r2, r3, #1
 8006ba8:	bf46      	itte	mi
 8006baa:	f1c3 0901 	rsbmi	r9, r3, #1
 8006bae:	2300      	movmi	r3, #0
 8006bb0:	f04f 0900 	movpl.w	r9, #0
 8006bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8006bb6:	bf48      	it	mi
 8006bb8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006bba:	f1bb 0f00 	cmp.w	fp, #0
 8006bbe:	db3d      	blt.n	8006c3c <_dtoa_r+0x23c>
 8006bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006bc6:	445b      	add	r3, fp
 8006bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bca:	2300      	movs	r3, #0
 8006bcc:	930a      	str	r3, [sp, #40]	; 0x28
 8006bce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bd0:	2b09      	cmp	r3, #9
 8006bd2:	d867      	bhi.n	8006ca4 <_dtoa_r+0x2a4>
 8006bd4:	2b05      	cmp	r3, #5
 8006bd6:	bfc4      	itt	gt
 8006bd8:	3b04      	subgt	r3, #4
 8006bda:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bde:	bfc8      	it	gt
 8006be0:	2400      	movgt	r4, #0
 8006be2:	f1a3 0302 	sub.w	r3, r3, #2
 8006be6:	bfd8      	it	le
 8006be8:	2401      	movle	r4, #1
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	f200 8086 	bhi.w	8006cfc <_dtoa_r+0x2fc>
 8006bf0:	e8df f003 	tbb	[pc, r3]
 8006bf4:	5637392c 	.word	0x5637392c
 8006bf8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006bfc:	441c      	add	r4, r3
 8006bfe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	bfc1      	itttt	gt
 8006c06:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c0a:	fa09 f903 	lslgt.w	r9, r9, r3
 8006c0e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006c12:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c16:	bfd6      	itet	le
 8006c18:	f1c3 0320 	rsble	r3, r3, #32
 8006c1c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006c20:	fa06 f003 	lslle.w	r0, r6, r3
 8006c24:	f7f9 fbde 	bl	80003e4 <__aeabi_ui2d>
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c2e:	3c01      	subs	r4, #1
 8006c30:	9213      	str	r2, [sp, #76]	; 0x4c
 8006c32:	e76f      	b.n	8006b14 <_dtoa_r+0x114>
 8006c34:	2301      	movs	r3, #1
 8006c36:	e7b3      	b.n	8006ba0 <_dtoa_r+0x1a0>
 8006c38:	900f      	str	r0, [sp, #60]	; 0x3c
 8006c3a:	e7b2      	b.n	8006ba2 <_dtoa_r+0x1a2>
 8006c3c:	f1cb 0300 	rsb	r3, fp, #0
 8006c40:	930a      	str	r3, [sp, #40]	; 0x28
 8006c42:	2300      	movs	r3, #0
 8006c44:	eba9 090b 	sub.w	r9, r9, fp
 8006c48:	930e      	str	r3, [sp, #56]	; 0x38
 8006c4a:	e7c0      	b.n	8006bce <_dtoa_r+0x1ce>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	dc55      	bgt.n	8006d02 <_dtoa_r+0x302>
 8006c56:	2301      	movs	r3, #1
 8006c58:	461a      	mov	r2, r3
 8006c5a:	9306      	str	r3, [sp, #24]
 8006c5c:	9308      	str	r3, [sp, #32]
 8006c5e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006c60:	e00b      	b.n	8006c7a <_dtoa_r+0x27a>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e7f3      	b.n	8006c4e <_dtoa_r+0x24e>
 8006c66:	2300      	movs	r3, #0
 8006c68:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c6c:	445b      	add	r3, fp
 8006c6e:	9306      	str	r3, [sp, #24]
 8006c70:	3301      	adds	r3, #1
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	9308      	str	r3, [sp, #32]
 8006c76:	bfb8      	it	lt
 8006c78:	2301      	movlt	r3, #1
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	69e8      	ldr	r0, [r5, #28]
 8006c80:	f102 0614 	add.w	r6, r2, #20
 8006c84:	429e      	cmp	r6, r3
 8006c86:	d940      	bls.n	8006d0a <_dtoa_r+0x30a>
 8006c88:	6041      	str	r1, [r0, #4]
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 fce4 	bl	8007658 <_Balloc>
 8006c90:	9003      	str	r0, [sp, #12]
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d13c      	bne.n	8006d10 <_dtoa_r+0x310>
 8006c96:	4602      	mov	r2, r0
 8006c98:	f240 11af 	movw	r1, #431	; 0x1af
 8006c9c:	4b16      	ldr	r3, [pc, #88]	; (8006cf8 <_dtoa_r+0x2f8>)
 8006c9e:	e6c3      	b.n	8006a28 <_dtoa_r+0x28>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e7e1      	b.n	8006c68 <_dtoa_r+0x268>
 8006ca4:	2401      	movs	r4, #1
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	940b      	str	r4, [sp, #44]	; 0x2c
 8006caa:	9322      	str	r3, [sp, #136]	; 0x88
 8006cac:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	9306      	str	r3, [sp, #24]
 8006cb4:	9308      	str	r3, [sp, #32]
 8006cb6:	2312      	movs	r3, #18
 8006cb8:	e7d1      	b.n	8006c5e <_dtoa_r+0x25e>
 8006cba:	bf00      	nop
 8006cbc:	f3af 8000 	nop.w
 8006cc0:	636f4361 	.word	0x636f4361
 8006cc4:	3fd287a7 	.word	0x3fd287a7
 8006cc8:	8b60c8b3 	.word	0x8b60c8b3
 8006ccc:	3fc68a28 	.word	0x3fc68a28
 8006cd0:	509f79fb 	.word	0x509f79fb
 8006cd4:	3fd34413 	.word	0x3fd34413
 8006cd8:	08009290 	.word	0x08009290
 8006cdc:	080092a7 	.word	0x080092a7
 8006ce0:	7ff00000 	.word	0x7ff00000
 8006ce4:	0800928c 	.word	0x0800928c
 8006ce8:	08009283 	.word	0x08009283
 8006cec:	08009260 	.word	0x08009260
 8006cf0:	3ff80000 	.word	0x3ff80000
 8006cf4:	08009398 	.word	0x08009398
 8006cf8:	080092ff 	.word	0x080092ff
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d00:	e7d4      	b.n	8006cac <_dtoa_r+0x2ac>
 8006d02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d04:	9306      	str	r3, [sp, #24]
 8006d06:	9308      	str	r3, [sp, #32]
 8006d08:	e7b7      	b.n	8006c7a <_dtoa_r+0x27a>
 8006d0a:	3101      	adds	r1, #1
 8006d0c:	0052      	lsls	r2, r2, #1
 8006d0e:	e7b7      	b.n	8006c80 <_dtoa_r+0x280>
 8006d10:	69eb      	ldr	r3, [r5, #28]
 8006d12:	9a03      	ldr	r2, [sp, #12]
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	9b08      	ldr	r3, [sp, #32]
 8006d18:	2b0e      	cmp	r3, #14
 8006d1a:	f200 80a8 	bhi.w	8006e6e <_dtoa_r+0x46e>
 8006d1e:	2c00      	cmp	r4, #0
 8006d20:	f000 80a5 	beq.w	8006e6e <_dtoa_r+0x46e>
 8006d24:	f1bb 0f00 	cmp.w	fp, #0
 8006d28:	dd34      	ble.n	8006d94 <_dtoa_r+0x394>
 8006d2a:	4b9a      	ldr	r3, [pc, #616]	; (8006f94 <_dtoa_r+0x594>)
 8006d2c:	f00b 020f 	and.w	r2, fp, #15
 8006d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d3c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006d40:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006d44:	d016      	beq.n	8006d74 <_dtoa_r+0x374>
 8006d46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d4a:	4b93      	ldr	r3, [pc, #588]	; (8006f98 <_dtoa_r+0x598>)
 8006d4c:	2703      	movs	r7, #3
 8006d4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d52:	f7f9 fceb 	bl	800072c <__aeabi_ddiv>
 8006d56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d5a:	f004 040f 	and.w	r4, r4, #15
 8006d5e:	4e8e      	ldr	r6, [pc, #568]	; (8006f98 <_dtoa_r+0x598>)
 8006d60:	b954      	cbnz	r4, 8006d78 <_dtoa_r+0x378>
 8006d62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d6a:	f7f9 fcdf 	bl	800072c <__aeabi_ddiv>
 8006d6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d72:	e029      	b.n	8006dc8 <_dtoa_r+0x3c8>
 8006d74:	2702      	movs	r7, #2
 8006d76:	e7f2      	b.n	8006d5e <_dtoa_r+0x35e>
 8006d78:	07e1      	lsls	r1, r4, #31
 8006d7a:	d508      	bpl.n	8006d8e <_dtoa_r+0x38e>
 8006d7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d80:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d84:	f7f9 fba8 	bl	80004d8 <__aeabi_dmul>
 8006d88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d8c:	3701      	adds	r7, #1
 8006d8e:	1064      	asrs	r4, r4, #1
 8006d90:	3608      	adds	r6, #8
 8006d92:	e7e5      	b.n	8006d60 <_dtoa_r+0x360>
 8006d94:	f000 80a5 	beq.w	8006ee2 <_dtoa_r+0x4e2>
 8006d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d9c:	f1cb 0400 	rsb	r4, fp, #0
 8006da0:	4b7c      	ldr	r3, [pc, #496]	; (8006f94 <_dtoa_r+0x594>)
 8006da2:	f004 020f 	and.w	r2, r4, #15
 8006da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	f7f9 fb93 	bl	80004d8 <__aeabi_dmul>
 8006db2:	2702      	movs	r7, #2
 8006db4:	2300      	movs	r3, #0
 8006db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dba:	4e77      	ldr	r6, [pc, #476]	; (8006f98 <_dtoa_r+0x598>)
 8006dbc:	1124      	asrs	r4, r4, #4
 8006dbe:	2c00      	cmp	r4, #0
 8006dc0:	f040 8084 	bne.w	8006ecc <_dtoa_r+0x4cc>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1d2      	bne.n	8006d6e <_dtoa_r+0x36e>
 8006dc8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006dcc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006dd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8087 	beq.w	8006ee6 <_dtoa_r+0x4e6>
 8006dd8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4b6f      	ldr	r3, [pc, #444]	; (8006f9c <_dtoa_r+0x59c>)
 8006de0:	f7f9 fdec 	bl	80009bc <__aeabi_dcmplt>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d07e      	beq.n	8006ee6 <_dtoa_r+0x4e6>
 8006de8:	9b08      	ldr	r3, [sp, #32]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d07b      	beq.n	8006ee6 <_dtoa_r+0x4e6>
 8006dee:	9b06      	ldr	r3, [sp, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dd38      	ble.n	8006e66 <_dtoa_r+0x466>
 8006df4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006df8:	2200      	movs	r2, #0
 8006dfa:	4b69      	ldr	r3, [pc, #420]	; (8006fa0 <_dtoa_r+0x5a0>)
 8006dfc:	f7f9 fb6c 	bl	80004d8 <__aeabi_dmul>
 8006e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e04:	9c06      	ldr	r4, [sp, #24]
 8006e06:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006e0a:	3701      	adds	r7, #1
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f7f9 faf9 	bl	8000404 <__aeabi_i2d>
 8006e12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e16:	f7f9 fb5f 	bl	80004d8 <__aeabi_dmul>
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4b61      	ldr	r3, [pc, #388]	; (8006fa4 <_dtoa_r+0x5a4>)
 8006e1e:	f7f9 f9a5 	bl	800016c <__adddf3>
 8006e22:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006e26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e2a:	9611      	str	r6, [sp, #68]	; 0x44
 8006e2c:	2c00      	cmp	r4, #0
 8006e2e:	d15d      	bne.n	8006eec <_dtoa_r+0x4ec>
 8006e30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e34:	2200      	movs	r2, #0
 8006e36:	4b5c      	ldr	r3, [pc, #368]	; (8006fa8 <_dtoa_r+0x5a8>)
 8006e38:	f7f9 f996 	bl	8000168 <__aeabi_dsub>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e44:	4633      	mov	r3, r6
 8006e46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e48:	f7f9 fdd6 	bl	80009f8 <__aeabi_dcmpgt>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	f040 8295 	bne.w	800737c <_dtoa_r+0x97c>
 8006e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006e5c:	f7f9 fdae 	bl	80009bc <__aeabi_dcmplt>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	f040 8289 	bne.w	8007378 <_dtoa_r+0x978>
 8006e66:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006e6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f2c0 8151 	blt.w	8007118 <_dtoa_r+0x718>
 8006e76:	f1bb 0f0e 	cmp.w	fp, #14
 8006e7a:	f300 814d 	bgt.w	8007118 <_dtoa_r+0x718>
 8006e7e:	4b45      	ldr	r3, [pc, #276]	; (8006f94 <_dtoa_r+0x594>)
 8006e80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e88:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006e8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f280 80da 	bge.w	8007048 <_dtoa_r+0x648>
 8006e94:	9b08      	ldr	r3, [sp, #32]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f300 80d6 	bgt.w	8007048 <_dtoa_r+0x648>
 8006e9c:	f040 826b 	bne.w	8007376 <_dtoa_r+0x976>
 8006ea0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4b40      	ldr	r3, [pc, #256]	; (8006fa8 <_dtoa_r+0x5a8>)
 8006ea8:	f7f9 fb16 	bl	80004d8 <__aeabi_dmul>
 8006eac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eb0:	f7f9 fd98 	bl	80009e4 <__aeabi_dcmpge>
 8006eb4:	9c08      	ldr	r4, [sp, #32]
 8006eb6:	4626      	mov	r6, r4
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	f040 8241 	bne.w	8007340 <_dtoa_r+0x940>
 8006ebe:	2331      	movs	r3, #49	; 0x31
 8006ec0:	9f03      	ldr	r7, [sp, #12]
 8006ec2:	f10b 0b01 	add.w	fp, fp, #1
 8006ec6:	f807 3b01 	strb.w	r3, [r7], #1
 8006eca:	e23d      	b.n	8007348 <_dtoa_r+0x948>
 8006ecc:	07e2      	lsls	r2, r4, #31
 8006ece:	d505      	bpl.n	8006edc <_dtoa_r+0x4dc>
 8006ed0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ed4:	f7f9 fb00 	bl	80004d8 <__aeabi_dmul>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	3701      	adds	r7, #1
 8006edc:	1064      	asrs	r4, r4, #1
 8006ede:	3608      	adds	r6, #8
 8006ee0:	e76d      	b.n	8006dbe <_dtoa_r+0x3be>
 8006ee2:	2702      	movs	r7, #2
 8006ee4:	e770      	b.n	8006dc8 <_dtoa_r+0x3c8>
 8006ee6:	46d8      	mov	r8, fp
 8006ee8:	9c08      	ldr	r4, [sp, #32]
 8006eea:	e78f      	b.n	8006e0c <_dtoa_r+0x40c>
 8006eec:	9903      	ldr	r1, [sp, #12]
 8006eee:	4b29      	ldr	r3, [pc, #164]	; (8006f94 <_dtoa_r+0x594>)
 8006ef0:	4421      	add	r1, r4
 8006ef2:	9112      	str	r1, [sp, #72]	; 0x48
 8006ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ef6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006efa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006efe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f02:	2900      	cmp	r1, #0
 8006f04:	d054      	beq.n	8006fb0 <_dtoa_r+0x5b0>
 8006f06:	2000      	movs	r0, #0
 8006f08:	4928      	ldr	r1, [pc, #160]	; (8006fac <_dtoa_r+0x5ac>)
 8006f0a:	f7f9 fc0f 	bl	800072c <__aeabi_ddiv>
 8006f0e:	463b      	mov	r3, r7
 8006f10:	4632      	mov	r2, r6
 8006f12:	f7f9 f929 	bl	8000168 <__aeabi_dsub>
 8006f16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f1a:	9f03      	ldr	r7, [sp, #12]
 8006f1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f20:	f7f9 fd8a 	bl	8000a38 <__aeabi_d2iz>
 8006f24:	4604      	mov	r4, r0
 8006f26:	f7f9 fa6d 	bl	8000404 <__aeabi_i2d>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f32:	f7f9 f919 	bl	8000168 <__aeabi_dsub>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	3430      	adds	r4, #48	; 0x30
 8006f3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f44:	f807 4b01 	strb.w	r4, [r7], #1
 8006f48:	f7f9 fd38 	bl	80009bc <__aeabi_dcmplt>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d173      	bne.n	8007038 <_dtoa_r+0x638>
 8006f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f54:	2000      	movs	r0, #0
 8006f56:	4911      	ldr	r1, [pc, #68]	; (8006f9c <_dtoa_r+0x59c>)
 8006f58:	f7f9 f906 	bl	8000168 <__aeabi_dsub>
 8006f5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f60:	f7f9 fd2c 	bl	80009bc <__aeabi_dcmplt>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	f040 80b6 	bne.w	80070d6 <_dtoa_r+0x6d6>
 8006f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f6c:	429f      	cmp	r7, r3
 8006f6e:	f43f af7a 	beq.w	8006e66 <_dtoa_r+0x466>
 8006f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f76:	2200      	movs	r2, #0
 8006f78:	4b09      	ldr	r3, [pc, #36]	; (8006fa0 <_dtoa_r+0x5a0>)
 8006f7a:	f7f9 faad 	bl	80004d8 <__aeabi_dmul>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <_dtoa_r+0x5a0>)
 8006f8a:	f7f9 faa5 	bl	80004d8 <__aeabi_dmul>
 8006f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f92:	e7c3      	b.n	8006f1c <_dtoa_r+0x51c>
 8006f94:	08009398 	.word	0x08009398
 8006f98:	08009370 	.word	0x08009370
 8006f9c:	3ff00000 	.word	0x3ff00000
 8006fa0:	40240000 	.word	0x40240000
 8006fa4:	401c0000 	.word	0x401c0000
 8006fa8:	40140000 	.word	0x40140000
 8006fac:	3fe00000 	.word	0x3fe00000
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	f7f9 fa90 	bl	80004d8 <__aeabi_dmul>
 8006fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fbe:	9c03      	ldr	r4, [sp, #12]
 8006fc0:	9314      	str	r3, [sp, #80]	; 0x50
 8006fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fc6:	f7f9 fd37 	bl	8000a38 <__aeabi_d2iz>
 8006fca:	9015      	str	r0, [sp, #84]	; 0x54
 8006fcc:	f7f9 fa1a 	bl	8000404 <__aeabi_i2d>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fd8:	f7f9 f8c6 	bl	8000168 <__aeabi_dsub>
 8006fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fde:	4606      	mov	r6, r0
 8006fe0:	3330      	adds	r3, #48	; 0x30
 8006fe2:	f804 3b01 	strb.w	r3, [r4], #1
 8006fe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fe8:	460f      	mov	r7, r1
 8006fea:	429c      	cmp	r4, r3
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	d124      	bne.n	800703c <_dtoa_r+0x63c>
 8006ff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ff6:	4baf      	ldr	r3, [pc, #700]	; (80072b4 <_dtoa_r+0x8b4>)
 8006ff8:	f7f9 f8b8 	bl	800016c <__adddf3>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4630      	mov	r0, r6
 8007002:	4639      	mov	r1, r7
 8007004:	f7f9 fcf8 	bl	80009f8 <__aeabi_dcmpgt>
 8007008:	2800      	cmp	r0, #0
 800700a:	d163      	bne.n	80070d4 <_dtoa_r+0x6d4>
 800700c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007010:	2000      	movs	r0, #0
 8007012:	49a8      	ldr	r1, [pc, #672]	; (80072b4 <_dtoa_r+0x8b4>)
 8007014:	f7f9 f8a8 	bl	8000168 <__aeabi_dsub>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4630      	mov	r0, r6
 800701e:	4639      	mov	r1, r7
 8007020:	f7f9 fccc 	bl	80009bc <__aeabi_dcmplt>
 8007024:	2800      	cmp	r0, #0
 8007026:	f43f af1e 	beq.w	8006e66 <_dtoa_r+0x466>
 800702a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800702c:	1e7b      	subs	r3, r7, #1
 800702e:	9314      	str	r3, [sp, #80]	; 0x50
 8007030:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007034:	2b30      	cmp	r3, #48	; 0x30
 8007036:	d0f8      	beq.n	800702a <_dtoa_r+0x62a>
 8007038:	46c3      	mov	fp, r8
 800703a:	e03b      	b.n	80070b4 <_dtoa_r+0x6b4>
 800703c:	4b9e      	ldr	r3, [pc, #632]	; (80072b8 <_dtoa_r+0x8b8>)
 800703e:	f7f9 fa4b 	bl	80004d8 <__aeabi_dmul>
 8007042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007046:	e7bc      	b.n	8006fc2 <_dtoa_r+0x5c2>
 8007048:	9f03      	ldr	r7, [sp, #12]
 800704a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800704e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007052:	4640      	mov	r0, r8
 8007054:	4649      	mov	r1, r9
 8007056:	f7f9 fb69 	bl	800072c <__aeabi_ddiv>
 800705a:	f7f9 fced 	bl	8000a38 <__aeabi_d2iz>
 800705e:	4604      	mov	r4, r0
 8007060:	f7f9 f9d0 	bl	8000404 <__aeabi_i2d>
 8007064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007068:	f7f9 fa36 	bl	80004d8 <__aeabi_dmul>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4640      	mov	r0, r8
 8007072:	4649      	mov	r1, r9
 8007074:	f7f9 f878 	bl	8000168 <__aeabi_dsub>
 8007078:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800707c:	f807 6b01 	strb.w	r6, [r7], #1
 8007080:	9e03      	ldr	r6, [sp, #12]
 8007082:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007086:	1bbe      	subs	r6, r7, r6
 8007088:	45b4      	cmp	ip, r6
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	d136      	bne.n	80070fe <_dtoa_r+0x6fe>
 8007090:	f7f9 f86c 	bl	800016c <__adddf3>
 8007094:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007098:	4680      	mov	r8, r0
 800709a:	4689      	mov	r9, r1
 800709c:	f7f9 fcac 	bl	80009f8 <__aeabi_dcmpgt>
 80070a0:	bb58      	cbnz	r0, 80070fa <_dtoa_r+0x6fa>
 80070a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070a6:	4640      	mov	r0, r8
 80070a8:	4649      	mov	r1, r9
 80070aa:	f7f9 fc7d 	bl	80009a8 <__aeabi_dcmpeq>
 80070ae:	b108      	cbz	r0, 80070b4 <_dtoa_r+0x6b4>
 80070b0:	07e3      	lsls	r3, r4, #31
 80070b2:	d422      	bmi.n	80070fa <_dtoa_r+0x6fa>
 80070b4:	4651      	mov	r1, sl
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 fb0e 	bl	80076d8 <_Bfree>
 80070bc:	2300      	movs	r3, #0
 80070be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070c0:	703b      	strb	r3, [r7, #0]
 80070c2:	f10b 0301 	add.w	r3, fp, #1
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f43f ace6 	beq.w	8006a9c <_dtoa_r+0x9c>
 80070d0:	601f      	str	r7, [r3, #0]
 80070d2:	e4e3      	b.n	8006a9c <_dtoa_r+0x9c>
 80070d4:	4627      	mov	r7, r4
 80070d6:	463b      	mov	r3, r7
 80070d8:	461f      	mov	r7, r3
 80070da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070de:	2a39      	cmp	r2, #57	; 0x39
 80070e0:	d107      	bne.n	80070f2 <_dtoa_r+0x6f2>
 80070e2:	9a03      	ldr	r2, [sp, #12]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d1f7      	bne.n	80070d8 <_dtoa_r+0x6d8>
 80070e8:	2230      	movs	r2, #48	; 0x30
 80070ea:	9903      	ldr	r1, [sp, #12]
 80070ec:	f108 0801 	add.w	r8, r8, #1
 80070f0:	700a      	strb	r2, [r1, #0]
 80070f2:	781a      	ldrb	r2, [r3, #0]
 80070f4:	3201      	adds	r2, #1
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	e79e      	b.n	8007038 <_dtoa_r+0x638>
 80070fa:	46d8      	mov	r8, fp
 80070fc:	e7eb      	b.n	80070d6 <_dtoa_r+0x6d6>
 80070fe:	2200      	movs	r2, #0
 8007100:	4b6d      	ldr	r3, [pc, #436]	; (80072b8 <_dtoa_r+0x8b8>)
 8007102:	f7f9 f9e9 	bl	80004d8 <__aeabi_dmul>
 8007106:	2200      	movs	r2, #0
 8007108:	2300      	movs	r3, #0
 800710a:	4680      	mov	r8, r0
 800710c:	4689      	mov	r9, r1
 800710e:	f7f9 fc4b 	bl	80009a8 <__aeabi_dcmpeq>
 8007112:	2800      	cmp	r0, #0
 8007114:	d09b      	beq.n	800704e <_dtoa_r+0x64e>
 8007116:	e7cd      	b.n	80070b4 <_dtoa_r+0x6b4>
 8007118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800711a:	2a00      	cmp	r2, #0
 800711c:	f000 80c4 	beq.w	80072a8 <_dtoa_r+0x8a8>
 8007120:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007122:	2a01      	cmp	r2, #1
 8007124:	f300 80a8 	bgt.w	8007278 <_dtoa_r+0x878>
 8007128:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800712a:	2a00      	cmp	r2, #0
 800712c:	f000 80a0 	beq.w	8007270 <_dtoa_r+0x870>
 8007130:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007134:	464f      	mov	r7, r9
 8007136:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800713a:	2101      	movs	r1, #1
 800713c:	441a      	add	r2, r3
 800713e:	4628      	mov	r0, r5
 8007140:	4499      	add	r9, r3
 8007142:	9209      	str	r2, [sp, #36]	; 0x24
 8007144:	f000 fb7e 	bl	8007844 <__i2b>
 8007148:	4606      	mov	r6, r0
 800714a:	b15f      	cbz	r7, 8007164 <_dtoa_r+0x764>
 800714c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714e:	2b00      	cmp	r3, #0
 8007150:	dd08      	ble.n	8007164 <_dtoa_r+0x764>
 8007152:	42bb      	cmp	r3, r7
 8007154:	bfa8      	it	ge
 8007156:	463b      	movge	r3, r7
 8007158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800715a:	eba9 0903 	sub.w	r9, r9, r3
 800715e:	1aff      	subs	r7, r7, r3
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	9309      	str	r3, [sp, #36]	; 0x24
 8007164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007166:	b1f3      	cbz	r3, 80071a6 <_dtoa_r+0x7a6>
 8007168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 80a0 	beq.w	80072b0 <_dtoa_r+0x8b0>
 8007170:	2c00      	cmp	r4, #0
 8007172:	dd10      	ble.n	8007196 <_dtoa_r+0x796>
 8007174:	4631      	mov	r1, r6
 8007176:	4622      	mov	r2, r4
 8007178:	4628      	mov	r0, r5
 800717a:	f000 fc21 	bl	80079c0 <__pow5mult>
 800717e:	4652      	mov	r2, sl
 8007180:	4601      	mov	r1, r0
 8007182:	4606      	mov	r6, r0
 8007184:	4628      	mov	r0, r5
 8007186:	f000 fb73 	bl	8007870 <__multiply>
 800718a:	4680      	mov	r8, r0
 800718c:	4651      	mov	r1, sl
 800718e:	4628      	mov	r0, r5
 8007190:	f000 faa2 	bl	80076d8 <_Bfree>
 8007194:	46c2      	mov	sl, r8
 8007196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007198:	1b1a      	subs	r2, r3, r4
 800719a:	d004      	beq.n	80071a6 <_dtoa_r+0x7a6>
 800719c:	4651      	mov	r1, sl
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 fc0e 	bl	80079c0 <__pow5mult>
 80071a4:	4682      	mov	sl, r0
 80071a6:	2101      	movs	r1, #1
 80071a8:	4628      	mov	r0, r5
 80071aa:	f000 fb4b 	bl	8007844 <__i2b>
 80071ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071b0:	4604      	mov	r4, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f340 8082 	ble.w	80072bc <_dtoa_r+0x8bc>
 80071b8:	461a      	mov	r2, r3
 80071ba:	4601      	mov	r1, r0
 80071bc:	4628      	mov	r0, r5
 80071be:	f000 fbff 	bl	80079c0 <__pow5mult>
 80071c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071c4:	4604      	mov	r4, r0
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	dd7b      	ble.n	80072c2 <_dtoa_r+0x8c2>
 80071ca:	f04f 0800 	mov.w	r8, #0
 80071ce:	6923      	ldr	r3, [r4, #16]
 80071d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071d4:	6918      	ldr	r0, [r3, #16]
 80071d6:	f000 fae7 	bl	80077a8 <__hi0bits>
 80071da:	f1c0 0020 	rsb	r0, r0, #32
 80071de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e0:	4418      	add	r0, r3
 80071e2:	f010 001f 	ands.w	r0, r0, #31
 80071e6:	f000 8092 	beq.w	800730e <_dtoa_r+0x90e>
 80071ea:	f1c0 0320 	rsb	r3, r0, #32
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	f340 8085 	ble.w	80072fe <_dtoa_r+0x8fe>
 80071f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f6:	f1c0 001c 	rsb	r0, r0, #28
 80071fa:	4403      	add	r3, r0
 80071fc:	4481      	add	r9, r0
 80071fe:	4407      	add	r7, r0
 8007200:	9309      	str	r3, [sp, #36]	; 0x24
 8007202:	f1b9 0f00 	cmp.w	r9, #0
 8007206:	dd05      	ble.n	8007214 <_dtoa_r+0x814>
 8007208:	4651      	mov	r1, sl
 800720a:	464a      	mov	r2, r9
 800720c:	4628      	mov	r0, r5
 800720e:	f000 fc31 	bl	8007a74 <__lshift>
 8007212:	4682      	mov	sl, r0
 8007214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007216:	2b00      	cmp	r3, #0
 8007218:	dd05      	ble.n	8007226 <_dtoa_r+0x826>
 800721a:	4621      	mov	r1, r4
 800721c:	461a      	mov	r2, r3
 800721e:	4628      	mov	r0, r5
 8007220:	f000 fc28 	bl	8007a74 <__lshift>
 8007224:	4604      	mov	r4, r0
 8007226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d072      	beq.n	8007312 <_dtoa_r+0x912>
 800722c:	4621      	mov	r1, r4
 800722e:	4650      	mov	r0, sl
 8007230:	f000 fc8c 	bl	8007b4c <__mcmp>
 8007234:	2800      	cmp	r0, #0
 8007236:	da6c      	bge.n	8007312 <_dtoa_r+0x912>
 8007238:	2300      	movs	r3, #0
 800723a:	4651      	mov	r1, sl
 800723c:	220a      	movs	r2, #10
 800723e:	4628      	mov	r0, r5
 8007240:	f000 fa6c 	bl	800771c <__multadd>
 8007244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007246:	4682      	mov	sl, r0
 8007248:	f10b 3bff 	add.w	fp, fp, #4294967295
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 81ac 	beq.w	80075aa <_dtoa_r+0xbaa>
 8007252:	2300      	movs	r3, #0
 8007254:	4631      	mov	r1, r6
 8007256:	220a      	movs	r2, #10
 8007258:	4628      	mov	r0, r5
 800725a:	f000 fa5f 	bl	800771c <__multadd>
 800725e:	9b06      	ldr	r3, [sp, #24]
 8007260:	4606      	mov	r6, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	f300 8093 	bgt.w	800738e <_dtoa_r+0x98e>
 8007268:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800726a:	2b02      	cmp	r3, #2
 800726c:	dc59      	bgt.n	8007322 <_dtoa_r+0x922>
 800726e:	e08e      	b.n	800738e <_dtoa_r+0x98e>
 8007270:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007272:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007276:	e75d      	b.n	8007134 <_dtoa_r+0x734>
 8007278:	9b08      	ldr	r3, [sp, #32]
 800727a:	1e5c      	subs	r4, r3, #1
 800727c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800727e:	42a3      	cmp	r3, r4
 8007280:	bfbf      	itttt	lt
 8007282:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007284:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007286:	1ae3      	sublt	r3, r4, r3
 8007288:	18d2      	addlt	r2, r2, r3
 800728a:	bfa8      	it	ge
 800728c:	1b1c      	subge	r4, r3, r4
 800728e:	9b08      	ldr	r3, [sp, #32]
 8007290:	bfbe      	ittt	lt
 8007292:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007294:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007296:	2400      	movlt	r4, #0
 8007298:	2b00      	cmp	r3, #0
 800729a:	bfb5      	itete	lt
 800729c:	eba9 0703 	sublt.w	r7, r9, r3
 80072a0:	464f      	movge	r7, r9
 80072a2:	2300      	movlt	r3, #0
 80072a4:	9b08      	ldrge	r3, [sp, #32]
 80072a6:	e747      	b.n	8007138 <_dtoa_r+0x738>
 80072a8:	464f      	mov	r7, r9
 80072aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80072ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80072ae:	e74c      	b.n	800714a <_dtoa_r+0x74a>
 80072b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072b2:	e773      	b.n	800719c <_dtoa_r+0x79c>
 80072b4:	3fe00000 	.word	0x3fe00000
 80072b8:	40240000 	.word	0x40240000
 80072bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072be:	2b01      	cmp	r3, #1
 80072c0:	dc18      	bgt.n	80072f4 <_dtoa_r+0x8f4>
 80072c2:	9b04      	ldr	r3, [sp, #16]
 80072c4:	b9b3      	cbnz	r3, 80072f4 <_dtoa_r+0x8f4>
 80072c6:	9b05      	ldr	r3, [sp, #20]
 80072c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072cc:	b993      	cbnz	r3, 80072f4 <_dtoa_r+0x8f4>
 80072ce:	9b05      	ldr	r3, [sp, #20]
 80072d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072d4:	0d1b      	lsrs	r3, r3, #20
 80072d6:	051b      	lsls	r3, r3, #20
 80072d8:	b17b      	cbz	r3, 80072fa <_dtoa_r+0x8fa>
 80072da:	f04f 0801 	mov.w	r8, #1
 80072de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e0:	f109 0901 	add.w	r9, r9, #1
 80072e4:	3301      	adds	r3, #1
 80072e6:	9309      	str	r3, [sp, #36]	; 0x24
 80072e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f47f af6f 	bne.w	80071ce <_dtoa_r+0x7ce>
 80072f0:	2001      	movs	r0, #1
 80072f2:	e774      	b.n	80071de <_dtoa_r+0x7de>
 80072f4:	f04f 0800 	mov.w	r8, #0
 80072f8:	e7f6      	b.n	80072e8 <_dtoa_r+0x8e8>
 80072fa:	4698      	mov	r8, r3
 80072fc:	e7f4      	b.n	80072e8 <_dtoa_r+0x8e8>
 80072fe:	d080      	beq.n	8007202 <_dtoa_r+0x802>
 8007300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007302:	331c      	adds	r3, #28
 8007304:	441a      	add	r2, r3
 8007306:	4499      	add	r9, r3
 8007308:	441f      	add	r7, r3
 800730a:	9209      	str	r2, [sp, #36]	; 0x24
 800730c:	e779      	b.n	8007202 <_dtoa_r+0x802>
 800730e:	4603      	mov	r3, r0
 8007310:	e7f6      	b.n	8007300 <_dtoa_r+0x900>
 8007312:	9b08      	ldr	r3, [sp, #32]
 8007314:	2b00      	cmp	r3, #0
 8007316:	dc34      	bgt.n	8007382 <_dtoa_r+0x982>
 8007318:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800731a:	2b02      	cmp	r3, #2
 800731c:	dd31      	ble.n	8007382 <_dtoa_r+0x982>
 800731e:	9b08      	ldr	r3, [sp, #32]
 8007320:	9306      	str	r3, [sp, #24]
 8007322:	9b06      	ldr	r3, [sp, #24]
 8007324:	b963      	cbnz	r3, 8007340 <_dtoa_r+0x940>
 8007326:	4621      	mov	r1, r4
 8007328:	2205      	movs	r2, #5
 800732a:	4628      	mov	r0, r5
 800732c:	f000 f9f6 	bl	800771c <__multadd>
 8007330:	4601      	mov	r1, r0
 8007332:	4604      	mov	r4, r0
 8007334:	4650      	mov	r0, sl
 8007336:	f000 fc09 	bl	8007b4c <__mcmp>
 800733a:	2800      	cmp	r0, #0
 800733c:	f73f adbf 	bgt.w	8006ebe <_dtoa_r+0x4be>
 8007340:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007342:	9f03      	ldr	r7, [sp, #12]
 8007344:	ea6f 0b03 	mvn.w	fp, r3
 8007348:	f04f 0800 	mov.w	r8, #0
 800734c:	4621      	mov	r1, r4
 800734e:	4628      	mov	r0, r5
 8007350:	f000 f9c2 	bl	80076d8 <_Bfree>
 8007354:	2e00      	cmp	r6, #0
 8007356:	f43f aead 	beq.w	80070b4 <_dtoa_r+0x6b4>
 800735a:	f1b8 0f00 	cmp.w	r8, #0
 800735e:	d005      	beq.n	800736c <_dtoa_r+0x96c>
 8007360:	45b0      	cmp	r8, r6
 8007362:	d003      	beq.n	800736c <_dtoa_r+0x96c>
 8007364:	4641      	mov	r1, r8
 8007366:	4628      	mov	r0, r5
 8007368:	f000 f9b6 	bl	80076d8 <_Bfree>
 800736c:	4631      	mov	r1, r6
 800736e:	4628      	mov	r0, r5
 8007370:	f000 f9b2 	bl	80076d8 <_Bfree>
 8007374:	e69e      	b.n	80070b4 <_dtoa_r+0x6b4>
 8007376:	2400      	movs	r4, #0
 8007378:	4626      	mov	r6, r4
 800737a:	e7e1      	b.n	8007340 <_dtoa_r+0x940>
 800737c:	46c3      	mov	fp, r8
 800737e:	4626      	mov	r6, r4
 8007380:	e59d      	b.n	8006ebe <_dtoa_r+0x4be>
 8007382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 80c8 	beq.w	800751a <_dtoa_r+0xb1a>
 800738a:	9b08      	ldr	r3, [sp, #32]
 800738c:	9306      	str	r3, [sp, #24]
 800738e:	2f00      	cmp	r7, #0
 8007390:	dd05      	ble.n	800739e <_dtoa_r+0x99e>
 8007392:	4631      	mov	r1, r6
 8007394:	463a      	mov	r2, r7
 8007396:	4628      	mov	r0, r5
 8007398:	f000 fb6c 	bl	8007a74 <__lshift>
 800739c:	4606      	mov	r6, r0
 800739e:	f1b8 0f00 	cmp.w	r8, #0
 80073a2:	d05b      	beq.n	800745c <_dtoa_r+0xa5c>
 80073a4:	4628      	mov	r0, r5
 80073a6:	6871      	ldr	r1, [r6, #4]
 80073a8:	f000 f956 	bl	8007658 <_Balloc>
 80073ac:	4607      	mov	r7, r0
 80073ae:	b928      	cbnz	r0, 80073bc <_dtoa_r+0x9bc>
 80073b0:	4602      	mov	r2, r0
 80073b2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80073b6:	4b81      	ldr	r3, [pc, #516]	; (80075bc <_dtoa_r+0xbbc>)
 80073b8:	f7ff bb36 	b.w	8006a28 <_dtoa_r+0x28>
 80073bc:	6932      	ldr	r2, [r6, #16]
 80073be:	f106 010c 	add.w	r1, r6, #12
 80073c2:	3202      	adds	r2, #2
 80073c4:	0092      	lsls	r2, r2, #2
 80073c6:	300c      	adds	r0, #12
 80073c8:	f7ff fa81 	bl	80068ce <memcpy>
 80073cc:	2201      	movs	r2, #1
 80073ce:	4639      	mov	r1, r7
 80073d0:	4628      	mov	r0, r5
 80073d2:	f000 fb4f 	bl	8007a74 <__lshift>
 80073d6:	46b0      	mov	r8, r6
 80073d8:	4606      	mov	r6, r0
 80073da:	9b03      	ldr	r3, [sp, #12]
 80073dc:	9a03      	ldr	r2, [sp, #12]
 80073de:	3301      	adds	r3, #1
 80073e0:	9308      	str	r3, [sp, #32]
 80073e2:	9b06      	ldr	r3, [sp, #24]
 80073e4:	4413      	add	r3, r2
 80073e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073e8:	9b04      	ldr	r3, [sp, #16]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	930a      	str	r3, [sp, #40]	; 0x28
 80073f0:	9b08      	ldr	r3, [sp, #32]
 80073f2:	4621      	mov	r1, r4
 80073f4:	3b01      	subs	r3, #1
 80073f6:	4650      	mov	r0, sl
 80073f8:	9304      	str	r3, [sp, #16]
 80073fa:	f7ff fa76 	bl	80068ea <quorem>
 80073fe:	4641      	mov	r1, r8
 8007400:	9006      	str	r0, [sp, #24]
 8007402:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007406:	4650      	mov	r0, sl
 8007408:	f000 fba0 	bl	8007b4c <__mcmp>
 800740c:	4632      	mov	r2, r6
 800740e:	9009      	str	r0, [sp, #36]	; 0x24
 8007410:	4621      	mov	r1, r4
 8007412:	4628      	mov	r0, r5
 8007414:	f000 fbb6 	bl	8007b84 <__mdiff>
 8007418:	68c2      	ldr	r2, [r0, #12]
 800741a:	4607      	mov	r7, r0
 800741c:	bb02      	cbnz	r2, 8007460 <_dtoa_r+0xa60>
 800741e:	4601      	mov	r1, r0
 8007420:	4650      	mov	r0, sl
 8007422:	f000 fb93 	bl	8007b4c <__mcmp>
 8007426:	4602      	mov	r2, r0
 8007428:	4639      	mov	r1, r7
 800742a:	4628      	mov	r0, r5
 800742c:	920c      	str	r2, [sp, #48]	; 0x30
 800742e:	f000 f953 	bl	80076d8 <_Bfree>
 8007432:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007434:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007436:	9f08      	ldr	r7, [sp, #32]
 8007438:	ea43 0102 	orr.w	r1, r3, r2
 800743c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800743e:	4319      	orrs	r1, r3
 8007440:	d110      	bne.n	8007464 <_dtoa_r+0xa64>
 8007442:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007446:	d029      	beq.n	800749c <_dtoa_r+0xa9c>
 8007448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744a:	2b00      	cmp	r3, #0
 800744c:	dd02      	ble.n	8007454 <_dtoa_r+0xa54>
 800744e:	9b06      	ldr	r3, [sp, #24]
 8007450:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007454:	9b04      	ldr	r3, [sp, #16]
 8007456:	f883 9000 	strb.w	r9, [r3]
 800745a:	e777      	b.n	800734c <_dtoa_r+0x94c>
 800745c:	4630      	mov	r0, r6
 800745e:	e7ba      	b.n	80073d6 <_dtoa_r+0x9d6>
 8007460:	2201      	movs	r2, #1
 8007462:	e7e1      	b.n	8007428 <_dtoa_r+0xa28>
 8007464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007466:	2b00      	cmp	r3, #0
 8007468:	db04      	blt.n	8007474 <_dtoa_r+0xa74>
 800746a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800746c:	430b      	orrs	r3, r1
 800746e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007470:	430b      	orrs	r3, r1
 8007472:	d120      	bne.n	80074b6 <_dtoa_r+0xab6>
 8007474:	2a00      	cmp	r2, #0
 8007476:	dded      	ble.n	8007454 <_dtoa_r+0xa54>
 8007478:	4651      	mov	r1, sl
 800747a:	2201      	movs	r2, #1
 800747c:	4628      	mov	r0, r5
 800747e:	f000 faf9 	bl	8007a74 <__lshift>
 8007482:	4621      	mov	r1, r4
 8007484:	4682      	mov	sl, r0
 8007486:	f000 fb61 	bl	8007b4c <__mcmp>
 800748a:	2800      	cmp	r0, #0
 800748c:	dc03      	bgt.n	8007496 <_dtoa_r+0xa96>
 800748e:	d1e1      	bne.n	8007454 <_dtoa_r+0xa54>
 8007490:	f019 0f01 	tst.w	r9, #1
 8007494:	d0de      	beq.n	8007454 <_dtoa_r+0xa54>
 8007496:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800749a:	d1d8      	bne.n	800744e <_dtoa_r+0xa4e>
 800749c:	2339      	movs	r3, #57	; 0x39
 800749e:	9a04      	ldr	r2, [sp, #16]
 80074a0:	7013      	strb	r3, [r2, #0]
 80074a2:	463b      	mov	r3, r7
 80074a4:	461f      	mov	r7, r3
 80074a6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	2a39      	cmp	r2, #57	; 0x39
 80074ae:	d06b      	beq.n	8007588 <_dtoa_r+0xb88>
 80074b0:	3201      	adds	r2, #1
 80074b2:	701a      	strb	r2, [r3, #0]
 80074b4:	e74a      	b.n	800734c <_dtoa_r+0x94c>
 80074b6:	2a00      	cmp	r2, #0
 80074b8:	dd07      	ble.n	80074ca <_dtoa_r+0xaca>
 80074ba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074be:	d0ed      	beq.n	800749c <_dtoa_r+0xa9c>
 80074c0:	9a04      	ldr	r2, [sp, #16]
 80074c2:	f109 0301 	add.w	r3, r9, #1
 80074c6:	7013      	strb	r3, [r2, #0]
 80074c8:	e740      	b.n	800734c <_dtoa_r+0x94c>
 80074ca:	9b08      	ldr	r3, [sp, #32]
 80074cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074ce:	f803 9c01 	strb.w	r9, [r3, #-1]
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d042      	beq.n	800755c <_dtoa_r+0xb5c>
 80074d6:	4651      	mov	r1, sl
 80074d8:	2300      	movs	r3, #0
 80074da:	220a      	movs	r2, #10
 80074dc:	4628      	mov	r0, r5
 80074de:	f000 f91d 	bl	800771c <__multadd>
 80074e2:	45b0      	cmp	r8, r6
 80074e4:	4682      	mov	sl, r0
 80074e6:	f04f 0300 	mov.w	r3, #0
 80074ea:	f04f 020a 	mov.w	r2, #10
 80074ee:	4641      	mov	r1, r8
 80074f0:	4628      	mov	r0, r5
 80074f2:	d107      	bne.n	8007504 <_dtoa_r+0xb04>
 80074f4:	f000 f912 	bl	800771c <__multadd>
 80074f8:	4680      	mov	r8, r0
 80074fa:	4606      	mov	r6, r0
 80074fc:	9b08      	ldr	r3, [sp, #32]
 80074fe:	3301      	adds	r3, #1
 8007500:	9308      	str	r3, [sp, #32]
 8007502:	e775      	b.n	80073f0 <_dtoa_r+0x9f0>
 8007504:	f000 f90a 	bl	800771c <__multadd>
 8007508:	4631      	mov	r1, r6
 800750a:	4680      	mov	r8, r0
 800750c:	2300      	movs	r3, #0
 800750e:	220a      	movs	r2, #10
 8007510:	4628      	mov	r0, r5
 8007512:	f000 f903 	bl	800771c <__multadd>
 8007516:	4606      	mov	r6, r0
 8007518:	e7f0      	b.n	80074fc <_dtoa_r+0xafc>
 800751a:	9b08      	ldr	r3, [sp, #32]
 800751c:	9306      	str	r3, [sp, #24]
 800751e:	9f03      	ldr	r7, [sp, #12]
 8007520:	4621      	mov	r1, r4
 8007522:	4650      	mov	r0, sl
 8007524:	f7ff f9e1 	bl	80068ea <quorem>
 8007528:	9b03      	ldr	r3, [sp, #12]
 800752a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800752e:	f807 9b01 	strb.w	r9, [r7], #1
 8007532:	1afa      	subs	r2, r7, r3
 8007534:	9b06      	ldr	r3, [sp, #24]
 8007536:	4293      	cmp	r3, r2
 8007538:	dd07      	ble.n	800754a <_dtoa_r+0xb4a>
 800753a:	4651      	mov	r1, sl
 800753c:	2300      	movs	r3, #0
 800753e:	220a      	movs	r2, #10
 8007540:	4628      	mov	r0, r5
 8007542:	f000 f8eb 	bl	800771c <__multadd>
 8007546:	4682      	mov	sl, r0
 8007548:	e7ea      	b.n	8007520 <_dtoa_r+0xb20>
 800754a:	9b06      	ldr	r3, [sp, #24]
 800754c:	f04f 0800 	mov.w	r8, #0
 8007550:	2b00      	cmp	r3, #0
 8007552:	bfcc      	ite	gt
 8007554:	461f      	movgt	r7, r3
 8007556:	2701      	movle	r7, #1
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	441f      	add	r7, r3
 800755c:	4651      	mov	r1, sl
 800755e:	2201      	movs	r2, #1
 8007560:	4628      	mov	r0, r5
 8007562:	f000 fa87 	bl	8007a74 <__lshift>
 8007566:	4621      	mov	r1, r4
 8007568:	4682      	mov	sl, r0
 800756a:	f000 faef 	bl	8007b4c <__mcmp>
 800756e:	2800      	cmp	r0, #0
 8007570:	dc97      	bgt.n	80074a2 <_dtoa_r+0xaa2>
 8007572:	d102      	bne.n	800757a <_dtoa_r+0xb7a>
 8007574:	f019 0f01 	tst.w	r9, #1
 8007578:	d193      	bne.n	80074a2 <_dtoa_r+0xaa2>
 800757a:	463b      	mov	r3, r7
 800757c:	461f      	mov	r7, r3
 800757e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007582:	2a30      	cmp	r2, #48	; 0x30
 8007584:	d0fa      	beq.n	800757c <_dtoa_r+0xb7c>
 8007586:	e6e1      	b.n	800734c <_dtoa_r+0x94c>
 8007588:	9a03      	ldr	r2, [sp, #12]
 800758a:	429a      	cmp	r2, r3
 800758c:	d18a      	bne.n	80074a4 <_dtoa_r+0xaa4>
 800758e:	2331      	movs	r3, #49	; 0x31
 8007590:	f10b 0b01 	add.w	fp, fp, #1
 8007594:	e797      	b.n	80074c6 <_dtoa_r+0xac6>
 8007596:	4b0a      	ldr	r3, [pc, #40]	; (80075c0 <_dtoa_r+0xbc0>)
 8007598:	f7ff ba9f 	b.w	8006ada <_dtoa_r+0xda>
 800759c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f47f aa77 	bne.w	8006a92 <_dtoa_r+0x92>
 80075a4:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <_dtoa_r+0xbc4>)
 80075a6:	f7ff ba98 	b.w	8006ada <_dtoa_r+0xda>
 80075aa:	9b06      	ldr	r3, [sp, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	dcb6      	bgt.n	800751e <_dtoa_r+0xb1e>
 80075b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	f73f aeb5 	bgt.w	8007322 <_dtoa_r+0x922>
 80075b8:	e7b1      	b.n	800751e <_dtoa_r+0xb1e>
 80075ba:	bf00      	nop
 80075bc:	080092ff 	.word	0x080092ff
 80075c0:	0800925f 	.word	0x0800925f
 80075c4:	08009283 	.word	0x08009283

080075c8 <_free_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4605      	mov	r5, r0
 80075cc:	2900      	cmp	r1, #0
 80075ce:	d040      	beq.n	8007652 <_free_r+0x8a>
 80075d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d4:	1f0c      	subs	r4, r1, #4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bfb8      	it	lt
 80075da:	18e4      	addlt	r4, r4, r3
 80075dc:	f7fe fb6a 	bl	8005cb4 <__malloc_lock>
 80075e0:	4a1c      	ldr	r2, [pc, #112]	; (8007654 <_free_r+0x8c>)
 80075e2:	6813      	ldr	r3, [r2, #0]
 80075e4:	b933      	cbnz	r3, 80075f4 <_free_r+0x2c>
 80075e6:	6063      	str	r3, [r4, #4]
 80075e8:	6014      	str	r4, [r2, #0]
 80075ea:	4628      	mov	r0, r5
 80075ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f0:	f7fe bb66 	b.w	8005cc0 <__malloc_unlock>
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	d908      	bls.n	800760a <_free_r+0x42>
 80075f8:	6820      	ldr	r0, [r4, #0]
 80075fa:	1821      	adds	r1, r4, r0
 80075fc:	428b      	cmp	r3, r1
 80075fe:	bf01      	itttt	eq
 8007600:	6819      	ldreq	r1, [r3, #0]
 8007602:	685b      	ldreq	r3, [r3, #4]
 8007604:	1809      	addeq	r1, r1, r0
 8007606:	6021      	streq	r1, [r4, #0]
 8007608:	e7ed      	b.n	80075e6 <_free_r+0x1e>
 800760a:	461a      	mov	r2, r3
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	b10b      	cbz	r3, 8007614 <_free_r+0x4c>
 8007610:	42a3      	cmp	r3, r4
 8007612:	d9fa      	bls.n	800760a <_free_r+0x42>
 8007614:	6811      	ldr	r1, [r2, #0]
 8007616:	1850      	adds	r0, r2, r1
 8007618:	42a0      	cmp	r0, r4
 800761a:	d10b      	bne.n	8007634 <_free_r+0x6c>
 800761c:	6820      	ldr	r0, [r4, #0]
 800761e:	4401      	add	r1, r0
 8007620:	1850      	adds	r0, r2, r1
 8007622:	4283      	cmp	r3, r0
 8007624:	6011      	str	r1, [r2, #0]
 8007626:	d1e0      	bne.n	80075ea <_free_r+0x22>
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	4408      	add	r0, r1
 800762e:	6010      	str	r0, [r2, #0]
 8007630:	6053      	str	r3, [r2, #4]
 8007632:	e7da      	b.n	80075ea <_free_r+0x22>
 8007634:	d902      	bls.n	800763c <_free_r+0x74>
 8007636:	230c      	movs	r3, #12
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	e7d6      	b.n	80075ea <_free_r+0x22>
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	1821      	adds	r1, r4, r0
 8007640:	428b      	cmp	r3, r1
 8007642:	bf01      	itttt	eq
 8007644:	6819      	ldreq	r1, [r3, #0]
 8007646:	685b      	ldreq	r3, [r3, #4]
 8007648:	1809      	addeq	r1, r1, r0
 800764a:	6021      	streq	r1, [r4, #0]
 800764c:	6063      	str	r3, [r4, #4]
 800764e:	6054      	str	r4, [r2, #4]
 8007650:	e7cb      	b.n	80075ea <_free_r+0x22>
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	200003dc 	.word	0x200003dc

08007658 <_Balloc>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	69c6      	ldr	r6, [r0, #28]
 800765c:	4604      	mov	r4, r0
 800765e:	460d      	mov	r5, r1
 8007660:	b976      	cbnz	r6, 8007680 <_Balloc+0x28>
 8007662:	2010      	movs	r0, #16
 8007664:	f7fe fa7e 	bl	8005b64 <malloc>
 8007668:	4602      	mov	r2, r0
 800766a:	61e0      	str	r0, [r4, #28]
 800766c:	b920      	cbnz	r0, 8007678 <_Balloc+0x20>
 800766e:	216b      	movs	r1, #107	; 0x6b
 8007670:	4b17      	ldr	r3, [pc, #92]	; (80076d0 <_Balloc+0x78>)
 8007672:	4818      	ldr	r0, [pc, #96]	; (80076d4 <_Balloc+0x7c>)
 8007674:	f000 fc12 	bl	8007e9c <__assert_func>
 8007678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800767c:	6006      	str	r6, [r0, #0]
 800767e:	60c6      	str	r6, [r0, #12]
 8007680:	69e6      	ldr	r6, [r4, #28]
 8007682:	68f3      	ldr	r3, [r6, #12]
 8007684:	b183      	cbz	r3, 80076a8 <_Balloc+0x50>
 8007686:	69e3      	ldr	r3, [r4, #28]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800768e:	b9b8      	cbnz	r0, 80076c0 <_Balloc+0x68>
 8007690:	2101      	movs	r1, #1
 8007692:	fa01 f605 	lsl.w	r6, r1, r5
 8007696:	1d72      	adds	r2, r6, #5
 8007698:	4620      	mov	r0, r4
 800769a:	0092      	lsls	r2, r2, #2
 800769c:	f000 fc1c 	bl	8007ed8 <_calloc_r>
 80076a0:	b160      	cbz	r0, 80076bc <_Balloc+0x64>
 80076a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076a6:	e00e      	b.n	80076c6 <_Balloc+0x6e>
 80076a8:	2221      	movs	r2, #33	; 0x21
 80076aa:	2104      	movs	r1, #4
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 fc13 	bl	8007ed8 <_calloc_r>
 80076b2:	69e3      	ldr	r3, [r4, #28]
 80076b4:	60f0      	str	r0, [r6, #12]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e4      	bne.n	8007686 <_Balloc+0x2e>
 80076bc:	2000      	movs	r0, #0
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	6802      	ldr	r2, [r0, #0]
 80076c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076c6:	2300      	movs	r3, #0
 80076c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076cc:	e7f7      	b.n	80076be <_Balloc+0x66>
 80076ce:	bf00      	nop
 80076d0:	08009290 	.word	0x08009290
 80076d4:	08009310 	.word	0x08009310

080076d8 <_Bfree>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	69c6      	ldr	r6, [r0, #28]
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	b976      	cbnz	r6, 8007700 <_Bfree+0x28>
 80076e2:	2010      	movs	r0, #16
 80076e4:	f7fe fa3e 	bl	8005b64 <malloc>
 80076e8:	4602      	mov	r2, r0
 80076ea:	61e8      	str	r0, [r5, #28]
 80076ec:	b920      	cbnz	r0, 80076f8 <_Bfree+0x20>
 80076ee:	218f      	movs	r1, #143	; 0x8f
 80076f0:	4b08      	ldr	r3, [pc, #32]	; (8007714 <_Bfree+0x3c>)
 80076f2:	4809      	ldr	r0, [pc, #36]	; (8007718 <_Bfree+0x40>)
 80076f4:	f000 fbd2 	bl	8007e9c <__assert_func>
 80076f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076fc:	6006      	str	r6, [r0, #0]
 80076fe:	60c6      	str	r6, [r0, #12]
 8007700:	b13c      	cbz	r4, 8007712 <_Bfree+0x3a>
 8007702:	69eb      	ldr	r3, [r5, #28]
 8007704:	6862      	ldr	r2, [r4, #4]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800770c:	6021      	str	r1, [r4, #0]
 800770e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	08009290 	.word	0x08009290
 8007718:	08009310 	.word	0x08009310

0800771c <__multadd>:
 800771c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007720:	4607      	mov	r7, r0
 8007722:	460c      	mov	r4, r1
 8007724:	461e      	mov	r6, r3
 8007726:	2000      	movs	r0, #0
 8007728:	690d      	ldr	r5, [r1, #16]
 800772a:	f101 0c14 	add.w	ip, r1, #20
 800772e:	f8dc 3000 	ldr.w	r3, [ip]
 8007732:	3001      	adds	r0, #1
 8007734:	b299      	uxth	r1, r3
 8007736:	fb02 6101 	mla	r1, r2, r1, r6
 800773a:	0c1e      	lsrs	r6, r3, #16
 800773c:	0c0b      	lsrs	r3, r1, #16
 800773e:	fb02 3306 	mla	r3, r2, r6, r3
 8007742:	b289      	uxth	r1, r1
 8007744:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007748:	4285      	cmp	r5, r0
 800774a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800774e:	f84c 1b04 	str.w	r1, [ip], #4
 8007752:	dcec      	bgt.n	800772e <__multadd+0x12>
 8007754:	b30e      	cbz	r6, 800779a <__multadd+0x7e>
 8007756:	68a3      	ldr	r3, [r4, #8]
 8007758:	42ab      	cmp	r3, r5
 800775a:	dc19      	bgt.n	8007790 <__multadd+0x74>
 800775c:	6861      	ldr	r1, [r4, #4]
 800775e:	4638      	mov	r0, r7
 8007760:	3101      	adds	r1, #1
 8007762:	f7ff ff79 	bl	8007658 <_Balloc>
 8007766:	4680      	mov	r8, r0
 8007768:	b928      	cbnz	r0, 8007776 <__multadd+0x5a>
 800776a:	4602      	mov	r2, r0
 800776c:	21ba      	movs	r1, #186	; 0xba
 800776e:	4b0c      	ldr	r3, [pc, #48]	; (80077a0 <__multadd+0x84>)
 8007770:	480c      	ldr	r0, [pc, #48]	; (80077a4 <__multadd+0x88>)
 8007772:	f000 fb93 	bl	8007e9c <__assert_func>
 8007776:	6922      	ldr	r2, [r4, #16]
 8007778:	f104 010c 	add.w	r1, r4, #12
 800777c:	3202      	adds	r2, #2
 800777e:	0092      	lsls	r2, r2, #2
 8007780:	300c      	adds	r0, #12
 8007782:	f7ff f8a4 	bl	80068ce <memcpy>
 8007786:	4621      	mov	r1, r4
 8007788:	4638      	mov	r0, r7
 800778a:	f7ff ffa5 	bl	80076d8 <_Bfree>
 800778e:	4644      	mov	r4, r8
 8007790:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007794:	3501      	adds	r5, #1
 8007796:	615e      	str	r6, [r3, #20]
 8007798:	6125      	str	r5, [r4, #16]
 800779a:	4620      	mov	r0, r4
 800779c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a0:	080092ff 	.word	0x080092ff
 80077a4:	08009310 	.word	0x08009310

080077a8 <__hi0bits>:
 80077a8:	0c02      	lsrs	r2, r0, #16
 80077aa:	0412      	lsls	r2, r2, #16
 80077ac:	4603      	mov	r3, r0
 80077ae:	b9ca      	cbnz	r2, 80077e4 <__hi0bits+0x3c>
 80077b0:	0403      	lsls	r3, r0, #16
 80077b2:	2010      	movs	r0, #16
 80077b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80077b8:	bf04      	itt	eq
 80077ba:	021b      	lsleq	r3, r3, #8
 80077bc:	3008      	addeq	r0, #8
 80077be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80077c2:	bf04      	itt	eq
 80077c4:	011b      	lsleq	r3, r3, #4
 80077c6:	3004      	addeq	r0, #4
 80077c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80077cc:	bf04      	itt	eq
 80077ce:	009b      	lsleq	r3, r3, #2
 80077d0:	3002      	addeq	r0, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	db05      	blt.n	80077e2 <__hi0bits+0x3a>
 80077d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80077da:	f100 0001 	add.w	r0, r0, #1
 80077de:	bf08      	it	eq
 80077e0:	2020      	moveq	r0, #32
 80077e2:	4770      	bx	lr
 80077e4:	2000      	movs	r0, #0
 80077e6:	e7e5      	b.n	80077b4 <__hi0bits+0xc>

080077e8 <__lo0bits>:
 80077e8:	6803      	ldr	r3, [r0, #0]
 80077ea:	4602      	mov	r2, r0
 80077ec:	f013 0007 	ands.w	r0, r3, #7
 80077f0:	d00b      	beq.n	800780a <__lo0bits+0x22>
 80077f2:	07d9      	lsls	r1, r3, #31
 80077f4:	d421      	bmi.n	800783a <__lo0bits+0x52>
 80077f6:	0798      	lsls	r0, r3, #30
 80077f8:	bf49      	itett	mi
 80077fa:	085b      	lsrmi	r3, r3, #1
 80077fc:	089b      	lsrpl	r3, r3, #2
 80077fe:	2001      	movmi	r0, #1
 8007800:	6013      	strmi	r3, [r2, #0]
 8007802:	bf5c      	itt	pl
 8007804:	2002      	movpl	r0, #2
 8007806:	6013      	strpl	r3, [r2, #0]
 8007808:	4770      	bx	lr
 800780a:	b299      	uxth	r1, r3
 800780c:	b909      	cbnz	r1, 8007812 <__lo0bits+0x2a>
 800780e:	2010      	movs	r0, #16
 8007810:	0c1b      	lsrs	r3, r3, #16
 8007812:	b2d9      	uxtb	r1, r3
 8007814:	b909      	cbnz	r1, 800781a <__lo0bits+0x32>
 8007816:	3008      	adds	r0, #8
 8007818:	0a1b      	lsrs	r3, r3, #8
 800781a:	0719      	lsls	r1, r3, #28
 800781c:	bf04      	itt	eq
 800781e:	091b      	lsreq	r3, r3, #4
 8007820:	3004      	addeq	r0, #4
 8007822:	0799      	lsls	r1, r3, #30
 8007824:	bf04      	itt	eq
 8007826:	089b      	lsreq	r3, r3, #2
 8007828:	3002      	addeq	r0, #2
 800782a:	07d9      	lsls	r1, r3, #31
 800782c:	d403      	bmi.n	8007836 <__lo0bits+0x4e>
 800782e:	085b      	lsrs	r3, r3, #1
 8007830:	f100 0001 	add.w	r0, r0, #1
 8007834:	d003      	beq.n	800783e <__lo0bits+0x56>
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	4770      	bx	lr
 800783a:	2000      	movs	r0, #0
 800783c:	4770      	bx	lr
 800783e:	2020      	movs	r0, #32
 8007840:	4770      	bx	lr
	...

08007844 <__i2b>:
 8007844:	b510      	push	{r4, lr}
 8007846:	460c      	mov	r4, r1
 8007848:	2101      	movs	r1, #1
 800784a:	f7ff ff05 	bl	8007658 <_Balloc>
 800784e:	4602      	mov	r2, r0
 8007850:	b928      	cbnz	r0, 800785e <__i2b+0x1a>
 8007852:	f240 1145 	movw	r1, #325	; 0x145
 8007856:	4b04      	ldr	r3, [pc, #16]	; (8007868 <__i2b+0x24>)
 8007858:	4804      	ldr	r0, [pc, #16]	; (800786c <__i2b+0x28>)
 800785a:	f000 fb1f 	bl	8007e9c <__assert_func>
 800785e:	2301      	movs	r3, #1
 8007860:	6144      	str	r4, [r0, #20]
 8007862:	6103      	str	r3, [r0, #16]
 8007864:	bd10      	pop	{r4, pc}
 8007866:	bf00      	nop
 8007868:	080092ff 	.word	0x080092ff
 800786c:	08009310 	.word	0x08009310

08007870 <__multiply>:
 8007870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	4691      	mov	r9, r2
 8007876:	690a      	ldr	r2, [r1, #16]
 8007878:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800787c:	460c      	mov	r4, r1
 800787e:	429a      	cmp	r2, r3
 8007880:	bfbe      	ittt	lt
 8007882:	460b      	movlt	r3, r1
 8007884:	464c      	movlt	r4, r9
 8007886:	4699      	movlt	r9, r3
 8007888:	6927      	ldr	r7, [r4, #16]
 800788a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800788e:	68a3      	ldr	r3, [r4, #8]
 8007890:	6861      	ldr	r1, [r4, #4]
 8007892:	eb07 060a 	add.w	r6, r7, sl
 8007896:	42b3      	cmp	r3, r6
 8007898:	b085      	sub	sp, #20
 800789a:	bfb8      	it	lt
 800789c:	3101      	addlt	r1, #1
 800789e:	f7ff fedb 	bl	8007658 <_Balloc>
 80078a2:	b930      	cbnz	r0, 80078b2 <__multiply+0x42>
 80078a4:	4602      	mov	r2, r0
 80078a6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80078aa:	4b43      	ldr	r3, [pc, #268]	; (80079b8 <__multiply+0x148>)
 80078ac:	4843      	ldr	r0, [pc, #268]	; (80079bc <__multiply+0x14c>)
 80078ae:	f000 faf5 	bl	8007e9c <__assert_func>
 80078b2:	f100 0514 	add.w	r5, r0, #20
 80078b6:	462b      	mov	r3, r5
 80078b8:	2200      	movs	r2, #0
 80078ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078be:	4543      	cmp	r3, r8
 80078c0:	d321      	bcc.n	8007906 <__multiply+0x96>
 80078c2:	f104 0314 	add.w	r3, r4, #20
 80078c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80078ca:	f109 0314 	add.w	r3, r9, #20
 80078ce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80078d2:	9202      	str	r2, [sp, #8]
 80078d4:	1b3a      	subs	r2, r7, r4
 80078d6:	3a15      	subs	r2, #21
 80078d8:	f022 0203 	bic.w	r2, r2, #3
 80078dc:	3204      	adds	r2, #4
 80078de:	f104 0115 	add.w	r1, r4, #21
 80078e2:	428f      	cmp	r7, r1
 80078e4:	bf38      	it	cc
 80078e6:	2204      	movcc	r2, #4
 80078e8:	9201      	str	r2, [sp, #4]
 80078ea:	9a02      	ldr	r2, [sp, #8]
 80078ec:	9303      	str	r3, [sp, #12]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d80c      	bhi.n	800790c <__multiply+0x9c>
 80078f2:	2e00      	cmp	r6, #0
 80078f4:	dd03      	ble.n	80078fe <__multiply+0x8e>
 80078f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d05a      	beq.n	80079b4 <__multiply+0x144>
 80078fe:	6106      	str	r6, [r0, #16]
 8007900:	b005      	add	sp, #20
 8007902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007906:	f843 2b04 	str.w	r2, [r3], #4
 800790a:	e7d8      	b.n	80078be <__multiply+0x4e>
 800790c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007910:	f1ba 0f00 	cmp.w	sl, #0
 8007914:	d023      	beq.n	800795e <__multiply+0xee>
 8007916:	46a9      	mov	r9, r5
 8007918:	f04f 0c00 	mov.w	ip, #0
 800791c:	f104 0e14 	add.w	lr, r4, #20
 8007920:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007924:	f8d9 1000 	ldr.w	r1, [r9]
 8007928:	fa1f fb82 	uxth.w	fp, r2
 800792c:	b289      	uxth	r1, r1
 800792e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007932:	4461      	add	r1, ip
 8007934:	f8d9 c000 	ldr.w	ip, [r9]
 8007938:	0c12      	lsrs	r2, r2, #16
 800793a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800793e:	fb0a c202 	mla	r2, sl, r2, ip
 8007942:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007946:	b289      	uxth	r1, r1
 8007948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800794c:	4577      	cmp	r7, lr
 800794e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007952:	f849 1b04 	str.w	r1, [r9], #4
 8007956:	d8e3      	bhi.n	8007920 <__multiply+0xb0>
 8007958:	9a01      	ldr	r2, [sp, #4]
 800795a:	f845 c002 	str.w	ip, [r5, r2]
 800795e:	9a03      	ldr	r2, [sp, #12]
 8007960:	3304      	adds	r3, #4
 8007962:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007966:	f1b9 0f00 	cmp.w	r9, #0
 800796a:	d021      	beq.n	80079b0 <__multiply+0x140>
 800796c:	46ae      	mov	lr, r5
 800796e:	f04f 0a00 	mov.w	sl, #0
 8007972:	6829      	ldr	r1, [r5, #0]
 8007974:	f104 0c14 	add.w	ip, r4, #20
 8007978:	f8bc b000 	ldrh.w	fp, [ip]
 800797c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007980:	b289      	uxth	r1, r1
 8007982:	fb09 220b 	mla	r2, r9, fp, r2
 8007986:	4452      	add	r2, sl
 8007988:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800798c:	f84e 1b04 	str.w	r1, [lr], #4
 8007990:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007994:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007998:	f8be 1000 	ldrh.w	r1, [lr]
 800799c:	4567      	cmp	r7, ip
 800799e:	fb09 110a 	mla	r1, r9, sl, r1
 80079a2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80079a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80079aa:	d8e5      	bhi.n	8007978 <__multiply+0x108>
 80079ac:	9a01      	ldr	r2, [sp, #4]
 80079ae:	50a9      	str	r1, [r5, r2]
 80079b0:	3504      	adds	r5, #4
 80079b2:	e79a      	b.n	80078ea <__multiply+0x7a>
 80079b4:	3e01      	subs	r6, #1
 80079b6:	e79c      	b.n	80078f2 <__multiply+0x82>
 80079b8:	080092ff 	.word	0x080092ff
 80079bc:	08009310 	.word	0x08009310

080079c0 <__pow5mult>:
 80079c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c4:	4615      	mov	r5, r2
 80079c6:	f012 0203 	ands.w	r2, r2, #3
 80079ca:	4606      	mov	r6, r0
 80079cc:	460f      	mov	r7, r1
 80079ce:	d007      	beq.n	80079e0 <__pow5mult+0x20>
 80079d0:	4c25      	ldr	r4, [pc, #148]	; (8007a68 <__pow5mult+0xa8>)
 80079d2:	3a01      	subs	r2, #1
 80079d4:	2300      	movs	r3, #0
 80079d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079da:	f7ff fe9f 	bl	800771c <__multadd>
 80079de:	4607      	mov	r7, r0
 80079e0:	10ad      	asrs	r5, r5, #2
 80079e2:	d03d      	beq.n	8007a60 <__pow5mult+0xa0>
 80079e4:	69f4      	ldr	r4, [r6, #28]
 80079e6:	b97c      	cbnz	r4, 8007a08 <__pow5mult+0x48>
 80079e8:	2010      	movs	r0, #16
 80079ea:	f7fe f8bb 	bl	8005b64 <malloc>
 80079ee:	4602      	mov	r2, r0
 80079f0:	61f0      	str	r0, [r6, #28]
 80079f2:	b928      	cbnz	r0, 8007a00 <__pow5mult+0x40>
 80079f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80079f8:	4b1c      	ldr	r3, [pc, #112]	; (8007a6c <__pow5mult+0xac>)
 80079fa:	481d      	ldr	r0, [pc, #116]	; (8007a70 <__pow5mult+0xb0>)
 80079fc:	f000 fa4e 	bl	8007e9c <__assert_func>
 8007a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a04:	6004      	str	r4, [r0, #0]
 8007a06:	60c4      	str	r4, [r0, #12]
 8007a08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a10:	b94c      	cbnz	r4, 8007a26 <__pow5mult+0x66>
 8007a12:	f240 2171 	movw	r1, #625	; 0x271
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7ff ff14 	bl	8007844 <__i2b>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4604      	mov	r4, r0
 8007a20:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a24:	6003      	str	r3, [r0, #0]
 8007a26:	f04f 0900 	mov.w	r9, #0
 8007a2a:	07eb      	lsls	r3, r5, #31
 8007a2c:	d50a      	bpl.n	8007a44 <__pow5mult+0x84>
 8007a2e:	4639      	mov	r1, r7
 8007a30:	4622      	mov	r2, r4
 8007a32:	4630      	mov	r0, r6
 8007a34:	f7ff ff1c 	bl	8007870 <__multiply>
 8007a38:	4680      	mov	r8, r0
 8007a3a:	4639      	mov	r1, r7
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7ff fe4b 	bl	80076d8 <_Bfree>
 8007a42:	4647      	mov	r7, r8
 8007a44:	106d      	asrs	r5, r5, #1
 8007a46:	d00b      	beq.n	8007a60 <__pow5mult+0xa0>
 8007a48:	6820      	ldr	r0, [r4, #0]
 8007a4a:	b938      	cbnz	r0, 8007a5c <__pow5mult+0x9c>
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4630      	mov	r0, r6
 8007a52:	f7ff ff0d 	bl	8007870 <__multiply>
 8007a56:	6020      	str	r0, [r4, #0]
 8007a58:	f8c0 9000 	str.w	r9, [r0]
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	e7e4      	b.n	8007a2a <__pow5mult+0x6a>
 8007a60:	4638      	mov	r0, r7
 8007a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a66:	bf00      	nop
 8007a68:	08009460 	.word	0x08009460
 8007a6c:	08009290 	.word	0x08009290
 8007a70:	08009310 	.word	0x08009310

08007a74 <__lshift>:
 8007a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	460c      	mov	r4, r1
 8007a7a:	4607      	mov	r7, r0
 8007a7c:	4691      	mov	r9, r2
 8007a7e:	6923      	ldr	r3, [r4, #16]
 8007a80:	6849      	ldr	r1, [r1, #4]
 8007a82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a86:	68a3      	ldr	r3, [r4, #8]
 8007a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a8c:	f108 0601 	add.w	r6, r8, #1
 8007a90:	42b3      	cmp	r3, r6
 8007a92:	db0b      	blt.n	8007aac <__lshift+0x38>
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7ff fddf 	bl	8007658 <_Balloc>
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	b948      	cbnz	r0, 8007ab2 <__lshift+0x3e>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007aa4:	4b27      	ldr	r3, [pc, #156]	; (8007b44 <__lshift+0xd0>)
 8007aa6:	4828      	ldr	r0, [pc, #160]	; (8007b48 <__lshift+0xd4>)
 8007aa8:	f000 f9f8 	bl	8007e9c <__assert_func>
 8007aac:	3101      	adds	r1, #1
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	e7ee      	b.n	8007a90 <__lshift+0x1c>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f100 0114 	add.w	r1, r0, #20
 8007ab8:	f100 0210 	add.w	r2, r0, #16
 8007abc:	4618      	mov	r0, r3
 8007abe:	4553      	cmp	r3, sl
 8007ac0:	db33      	blt.n	8007b2a <__lshift+0xb6>
 8007ac2:	6920      	ldr	r0, [r4, #16]
 8007ac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ac8:	f104 0314 	add.w	r3, r4, #20
 8007acc:	f019 091f 	ands.w	r9, r9, #31
 8007ad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ad4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ad8:	d02b      	beq.n	8007b32 <__lshift+0xbe>
 8007ada:	468a      	mov	sl, r1
 8007adc:	2200      	movs	r2, #0
 8007ade:	f1c9 0e20 	rsb	lr, r9, #32
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	fa00 f009 	lsl.w	r0, r0, r9
 8007ae8:	4310      	orrs	r0, r2
 8007aea:	f84a 0b04 	str.w	r0, [sl], #4
 8007aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af2:	459c      	cmp	ip, r3
 8007af4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007af8:	d8f3      	bhi.n	8007ae2 <__lshift+0x6e>
 8007afa:	ebac 0304 	sub.w	r3, ip, r4
 8007afe:	3b15      	subs	r3, #21
 8007b00:	f023 0303 	bic.w	r3, r3, #3
 8007b04:	3304      	adds	r3, #4
 8007b06:	f104 0015 	add.w	r0, r4, #21
 8007b0a:	4584      	cmp	ip, r0
 8007b0c:	bf38      	it	cc
 8007b0e:	2304      	movcc	r3, #4
 8007b10:	50ca      	str	r2, [r1, r3]
 8007b12:	b10a      	cbz	r2, 8007b18 <__lshift+0xa4>
 8007b14:	f108 0602 	add.w	r6, r8, #2
 8007b18:	3e01      	subs	r6, #1
 8007b1a:	4638      	mov	r0, r7
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	612e      	str	r6, [r5, #16]
 8007b20:	f7ff fdda 	bl	80076d8 <_Bfree>
 8007b24:	4628      	mov	r0, r5
 8007b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b2e:	3301      	adds	r3, #1
 8007b30:	e7c5      	b.n	8007abe <__lshift+0x4a>
 8007b32:	3904      	subs	r1, #4
 8007b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b38:	459c      	cmp	ip, r3
 8007b3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b3e:	d8f9      	bhi.n	8007b34 <__lshift+0xc0>
 8007b40:	e7ea      	b.n	8007b18 <__lshift+0xa4>
 8007b42:	bf00      	nop
 8007b44:	080092ff 	.word	0x080092ff
 8007b48:	08009310 	.word	0x08009310

08007b4c <__mcmp>:
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	690a      	ldr	r2, [r1, #16]
 8007b50:	6900      	ldr	r0, [r0, #16]
 8007b52:	b530      	push	{r4, r5, lr}
 8007b54:	1a80      	subs	r0, r0, r2
 8007b56:	d10d      	bne.n	8007b74 <__mcmp+0x28>
 8007b58:	3314      	adds	r3, #20
 8007b5a:	3114      	adds	r1, #20
 8007b5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b6c:	4295      	cmp	r5, r2
 8007b6e:	d002      	beq.n	8007b76 <__mcmp+0x2a>
 8007b70:	d304      	bcc.n	8007b7c <__mcmp+0x30>
 8007b72:	2001      	movs	r0, #1
 8007b74:	bd30      	pop	{r4, r5, pc}
 8007b76:	42a3      	cmp	r3, r4
 8007b78:	d3f4      	bcc.n	8007b64 <__mcmp+0x18>
 8007b7a:	e7fb      	b.n	8007b74 <__mcmp+0x28>
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b80:	e7f8      	b.n	8007b74 <__mcmp+0x28>
	...

08007b84 <__mdiff>:
 8007b84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	460d      	mov	r5, r1
 8007b8a:	4607      	mov	r7, r0
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	4628      	mov	r0, r5
 8007b90:	4614      	mov	r4, r2
 8007b92:	f7ff ffdb 	bl	8007b4c <__mcmp>
 8007b96:	1e06      	subs	r6, r0, #0
 8007b98:	d111      	bne.n	8007bbe <__mdiff+0x3a>
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	f7ff fd5b 	bl	8007658 <_Balloc>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	b928      	cbnz	r0, 8007bb2 <__mdiff+0x2e>
 8007ba6:	f240 2137 	movw	r1, #567	; 0x237
 8007baa:	4b3a      	ldr	r3, [pc, #232]	; (8007c94 <__mdiff+0x110>)
 8007bac:	483a      	ldr	r0, [pc, #232]	; (8007c98 <__mdiff+0x114>)
 8007bae:	f000 f975 	bl	8007e9c <__assert_func>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007bb8:	4610      	mov	r0, r2
 8007bba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbe:	bfa4      	itt	ge
 8007bc0:	4623      	movge	r3, r4
 8007bc2:	462c      	movge	r4, r5
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	6861      	ldr	r1, [r4, #4]
 8007bc8:	bfa6      	itte	ge
 8007bca:	461d      	movge	r5, r3
 8007bcc:	2600      	movge	r6, #0
 8007bce:	2601      	movlt	r6, #1
 8007bd0:	f7ff fd42 	bl	8007658 <_Balloc>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	b918      	cbnz	r0, 8007be0 <__mdiff+0x5c>
 8007bd8:	f240 2145 	movw	r1, #581	; 0x245
 8007bdc:	4b2d      	ldr	r3, [pc, #180]	; (8007c94 <__mdiff+0x110>)
 8007bde:	e7e5      	b.n	8007bac <__mdiff+0x28>
 8007be0:	f102 0814 	add.w	r8, r2, #20
 8007be4:	46c2      	mov	sl, r8
 8007be6:	f04f 0c00 	mov.w	ip, #0
 8007bea:	6927      	ldr	r7, [r4, #16]
 8007bec:	60c6      	str	r6, [r0, #12]
 8007bee:	692e      	ldr	r6, [r5, #16]
 8007bf0:	f104 0014 	add.w	r0, r4, #20
 8007bf4:	f105 0914 	add.w	r9, r5, #20
 8007bf8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007bfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c00:	3410      	adds	r4, #16
 8007c02:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007c06:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c0a:	fa1f f18b 	uxth.w	r1, fp
 8007c0e:	4461      	add	r1, ip
 8007c10:	fa1f fc83 	uxth.w	ip, r3
 8007c14:	0c1b      	lsrs	r3, r3, #16
 8007c16:	eba1 010c 	sub.w	r1, r1, ip
 8007c1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007c1e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007c22:	b289      	uxth	r1, r1
 8007c24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007c28:	454e      	cmp	r6, r9
 8007c2a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007c2e:	f84a 1b04 	str.w	r1, [sl], #4
 8007c32:	d8e6      	bhi.n	8007c02 <__mdiff+0x7e>
 8007c34:	1b73      	subs	r3, r6, r5
 8007c36:	3b15      	subs	r3, #21
 8007c38:	f023 0303 	bic.w	r3, r3, #3
 8007c3c:	3515      	adds	r5, #21
 8007c3e:	3304      	adds	r3, #4
 8007c40:	42ae      	cmp	r6, r5
 8007c42:	bf38      	it	cc
 8007c44:	2304      	movcc	r3, #4
 8007c46:	4418      	add	r0, r3
 8007c48:	4443      	add	r3, r8
 8007c4a:	461e      	mov	r6, r3
 8007c4c:	4605      	mov	r5, r0
 8007c4e:	4575      	cmp	r5, lr
 8007c50:	d30e      	bcc.n	8007c70 <__mdiff+0xec>
 8007c52:	f10e 0103 	add.w	r1, lr, #3
 8007c56:	1a09      	subs	r1, r1, r0
 8007c58:	f021 0103 	bic.w	r1, r1, #3
 8007c5c:	3803      	subs	r0, #3
 8007c5e:	4586      	cmp	lr, r0
 8007c60:	bf38      	it	cc
 8007c62:	2100      	movcc	r1, #0
 8007c64:	440b      	add	r3, r1
 8007c66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c6a:	b189      	cbz	r1, 8007c90 <__mdiff+0x10c>
 8007c6c:	6117      	str	r7, [r2, #16]
 8007c6e:	e7a3      	b.n	8007bb8 <__mdiff+0x34>
 8007c70:	f855 8b04 	ldr.w	r8, [r5], #4
 8007c74:	fa1f f188 	uxth.w	r1, r8
 8007c78:	4461      	add	r1, ip
 8007c7a:	140c      	asrs	r4, r1, #16
 8007c7c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007c80:	b289      	uxth	r1, r1
 8007c82:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007c86:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007c8a:	f846 1b04 	str.w	r1, [r6], #4
 8007c8e:	e7de      	b.n	8007c4e <__mdiff+0xca>
 8007c90:	3f01      	subs	r7, #1
 8007c92:	e7e8      	b.n	8007c66 <__mdiff+0xe2>
 8007c94:	080092ff 	.word	0x080092ff
 8007c98:	08009310 	.word	0x08009310

08007c9c <__d2b>:
 8007c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	4617      	mov	r7, r2
 8007ca2:	461c      	mov	r4, r3
 8007ca4:	9e08      	ldr	r6, [sp, #32]
 8007ca6:	f7ff fcd7 	bl	8007658 <_Balloc>
 8007caa:	4605      	mov	r5, r0
 8007cac:	b930      	cbnz	r0, 8007cbc <__d2b+0x20>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	f240 310f 	movw	r1, #783	; 0x30f
 8007cb4:	4b22      	ldr	r3, [pc, #136]	; (8007d40 <__d2b+0xa4>)
 8007cb6:	4823      	ldr	r0, [pc, #140]	; (8007d44 <__d2b+0xa8>)
 8007cb8:	f000 f8f0 	bl	8007e9c <__assert_func>
 8007cbc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007cc0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007cc4:	bb24      	cbnz	r4, 8007d10 <__d2b+0x74>
 8007cc6:	2f00      	cmp	r7, #0
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	d026      	beq.n	8007d1a <__d2b+0x7e>
 8007ccc:	4668      	mov	r0, sp
 8007cce:	9700      	str	r7, [sp, #0]
 8007cd0:	f7ff fd8a 	bl	80077e8 <__lo0bits>
 8007cd4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007cd8:	b1e8      	cbz	r0, 8007d16 <__d2b+0x7a>
 8007cda:	f1c0 0320 	rsb	r3, r0, #32
 8007cde:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce2:	430b      	orrs	r3, r1
 8007ce4:	40c2      	lsrs	r2, r0
 8007ce6:	616b      	str	r3, [r5, #20]
 8007ce8:	9201      	str	r2, [sp, #4]
 8007cea:	9b01      	ldr	r3, [sp, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bf14      	ite	ne
 8007cf0:	2102      	movne	r1, #2
 8007cf2:	2101      	moveq	r1, #1
 8007cf4:	61ab      	str	r3, [r5, #24]
 8007cf6:	6129      	str	r1, [r5, #16]
 8007cf8:	b1bc      	cbz	r4, 8007d2a <__d2b+0x8e>
 8007cfa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007cfe:	4404      	add	r4, r0
 8007d00:	6034      	str	r4, [r6, #0]
 8007d02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	6018      	str	r0, [r3, #0]
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	b003      	add	sp, #12
 8007d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d14:	e7d7      	b.n	8007cc6 <__d2b+0x2a>
 8007d16:	6169      	str	r1, [r5, #20]
 8007d18:	e7e7      	b.n	8007cea <__d2b+0x4e>
 8007d1a:	a801      	add	r0, sp, #4
 8007d1c:	f7ff fd64 	bl	80077e8 <__lo0bits>
 8007d20:	9b01      	ldr	r3, [sp, #4]
 8007d22:	2101      	movs	r1, #1
 8007d24:	616b      	str	r3, [r5, #20]
 8007d26:	3020      	adds	r0, #32
 8007d28:	e7e5      	b.n	8007cf6 <__d2b+0x5a>
 8007d2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d2e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007d32:	6030      	str	r0, [r6, #0]
 8007d34:	6918      	ldr	r0, [r3, #16]
 8007d36:	f7ff fd37 	bl	80077a8 <__hi0bits>
 8007d3a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007d3e:	e7e2      	b.n	8007d06 <__d2b+0x6a>
 8007d40:	080092ff 	.word	0x080092ff
 8007d44:	08009310 	.word	0x08009310

08007d48 <__sflush_r>:
 8007d48:	898a      	ldrh	r2, [r1, #12]
 8007d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	0710      	lsls	r0, r2, #28
 8007d50:	460c      	mov	r4, r1
 8007d52:	d457      	bmi.n	8007e04 <__sflush_r+0xbc>
 8007d54:	684b      	ldr	r3, [r1, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dc04      	bgt.n	8007d64 <__sflush_r+0x1c>
 8007d5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dc01      	bgt.n	8007d64 <__sflush_r+0x1c>
 8007d60:	2000      	movs	r0, #0
 8007d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d66:	2e00      	cmp	r6, #0
 8007d68:	d0fa      	beq.n	8007d60 <__sflush_r+0x18>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d70:	682f      	ldr	r7, [r5, #0]
 8007d72:	6a21      	ldr	r1, [r4, #32]
 8007d74:	602b      	str	r3, [r5, #0]
 8007d76:	d032      	beq.n	8007dde <__sflush_r+0x96>
 8007d78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	075a      	lsls	r2, r3, #29
 8007d7e:	d505      	bpl.n	8007d8c <__sflush_r+0x44>
 8007d80:	6863      	ldr	r3, [r4, #4]
 8007d82:	1ac0      	subs	r0, r0, r3
 8007d84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d86:	b10b      	cbz	r3, 8007d8c <__sflush_r+0x44>
 8007d88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d8a:	1ac0      	subs	r0, r0, r3
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4602      	mov	r2, r0
 8007d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d92:	4628      	mov	r0, r5
 8007d94:	6a21      	ldr	r1, [r4, #32]
 8007d96:	47b0      	blx	r6
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	d106      	bne.n	8007dac <__sflush_r+0x64>
 8007d9e:	6829      	ldr	r1, [r5, #0]
 8007da0:	291d      	cmp	r1, #29
 8007da2:	d82b      	bhi.n	8007dfc <__sflush_r+0xb4>
 8007da4:	4a28      	ldr	r2, [pc, #160]	; (8007e48 <__sflush_r+0x100>)
 8007da6:	410a      	asrs	r2, r1
 8007da8:	07d6      	lsls	r6, r2, #31
 8007daa:	d427      	bmi.n	8007dfc <__sflush_r+0xb4>
 8007dac:	2200      	movs	r2, #0
 8007dae:	6062      	str	r2, [r4, #4]
 8007db0:	6922      	ldr	r2, [r4, #16]
 8007db2:	04d9      	lsls	r1, r3, #19
 8007db4:	6022      	str	r2, [r4, #0]
 8007db6:	d504      	bpl.n	8007dc2 <__sflush_r+0x7a>
 8007db8:	1c42      	adds	r2, r0, #1
 8007dba:	d101      	bne.n	8007dc0 <__sflush_r+0x78>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b903      	cbnz	r3, 8007dc2 <__sflush_r+0x7a>
 8007dc0:	6560      	str	r0, [r4, #84]	; 0x54
 8007dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dc4:	602f      	str	r7, [r5, #0]
 8007dc6:	2900      	cmp	r1, #0
 8007dc8:	d0ca      	beq.n	8007d60 <__sflush_r+0x18>
 8007dca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dce:	4299      	cmp	r1, r3
 8007dd0:	d002      	beq.n	8007dd8 <__sflush_r+0x90>
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f7ff fbf8 	bl	80075c8 <_free_r>
 8007dd8:	2000      	movs	r0, #0
 8007dda:	6360      	str	r0, [r4, #52]	; 0x34
 8007ddc:	e7c1      	b.n	8007d62 <__sflush_r+0x1a>
 8007dde:	2301      	movs	r3, #1
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b0      	blx	r6
 8007de4:	1c41      	adds	r1, r0, #1
 8007de6:	d1c8      	bne.n	8007d7a <__sflush_r+0x32>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0c5      	beq.n	8007d7a <__sflush_r+0x32>
 8007dee:	2b1d      	cmp	r3, #29
 8007df0:	d001      	beq.n	8007df6 <__sflush_r+0xae>
 8007df2:	2b16      	cmp	r3, #22
 8007df4:	d101      	bne.n	8007dfa <__sflush_r+0xb2>
 8007df6:	602f      	str	r7, [r5, #0]
 8007df8:	e7b2      	b.n	8007d60 <__sflush_r+0x18>
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e00:	81a3      	strh	r3, [r4, #12]
 8007e02:	e7ae      	b.n	8007d62 <__sflush_r+0x1a>
 8007e04:	690f      	ldr	r7, [r1, #16]
 8007e06:	2f00      	cmp	r7, #0
 8007e08:	d0aa      	beq.n	8007d60 <__sflush_r+0x18>
 8007e0a:	0793      	lsls	r3, r2, #30
 8007e0c:	bf18      	it	ne
 8007e0e:	2300      	movne	r3, #0
 8007e10:	680e      	ldr	r6, [r1, #0]
 8007e12:	bf08      	it	eq
 8007e14:	694b      	ldreq	r3, [r1, #20]
 8007e16:	1bf6      	subs	r6, r6, r7
 8007e18:	600f      	str	r7, [r1, #0]
 8007e1a:	608b      	str	r3, [r1, #8]
 8007e1c:	2e00      	cmp	r6, #0
 8007e1e:	dd9f      	ble.n	8007d60 <__sflush_r+0x18>
 8007e20:	4633      	mov	r3, r6
 8007e22:	463a      	mov	r2, r7
 8007e24:	4628      	mov	r0, r5
 8007e26:	6a21      	ldr	r1, [r4, #32]
 8007e28:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007e2c:	47e0      	blx	ip
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	dc06      	bgt.n	8007e40 <__sflush_r+0xf8>
 8007e32:	89a3      	ldrh	r3, [r4, #12]
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	e790      	b.n	8007d62 <__sflush_r+0x1a>
 8007e40:	4407      	add	r7, r0
 8007e42:	1a36      	subs	r6, r6, r0
 8007e44:	e7ea      	b.n	8007e1c <__sflush_r+0xd4>
 8007e46:	bf00      	nop
 8007e48:	dfbffffe 	.word	0xdfbffffe

08007e4c <_fflush_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	690b      	ldr	r3, [r1, #16]
 8007e50:	4605      	mov	r5, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	b913      	cbnz	r3, 8007e5c <_fflush_r+0x10>
 8007e56:	2500      	movs	r5, #0
 8007e58:	4628      	mov	r0, r5
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	b118      	cbz	r0, 8007e66 <_fflush_r+0x1a>
 8007e5e:	6a03      	ldr	r3, [r0, #32]
 8007e60:	b90b      	cbnz	r3, 8007e66 <_fflush_r+0x1a>
 8007e62:	f7fe fc1d 	bl	80066a0 <__sinit>
 8007e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0f3      	beq.n	8007e56 <_fflush_r+0xa>
 8007e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e70:	07d0      	lsls	r0, r2, #31
 8007e72:	d404      	bmi.n	8007e7e <_fflush_r+0x32>
 8007e74:	0599      	lsls	r1, r3, #22
 8007e76:	d402      	bmi.n	8007e7e <_fflush_r+0x32>
 8007e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e7a:	f7fe fd18 	bl	80068ae <__retarget_lock_acquire_recursive>
 8007e7e:	4628      	mov	r0, r5
 8007e80:	4621      	mov	r1, r4
 8007e82:	f7ff ff61 	bl	8007d48 <__sflush_r>
 8007e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e88:	4605      	mov	r5, r0
 8007e8a:	07da      	lsls	r2, r3, #31
 8007e8c:	d4e4      	bmi.n	8007e58 <_fflush_r+0xc>
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	059b      	lsls	r3, r3, #22
 8007e92:	d4e1      	bmi.n	8007e58 <_fflush_r+0xc>
 8007e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e96:	f7fe fd0b 	bl	80068b0 <__retarget_lock_release_recursive>
 8007e9a:	e7dd      	b.n	8007e58 <_fflush_r+0xc>

08007e9c <__assert_func>:
 8007e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e9e:	4614      	mov	r4, r2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <__assert_func+0x2c>)
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68d8      	ldr	r0, [r3, #12]
 8007eaa:	b14c      	cbz	r4, 8007ec0 <__assert_func+0x24>
 8007eac:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <__assert_func+0x30>)
 8007eae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007eb2:	9100      	str	r1, [sp, #0]
 8007eb4:	462b      	mov	r3, r5
 8007eb6:	4906      	ldr	r1, [pc, #24]	; (8007ed0 <__assert_func+0x34>)
 8007eb8:	f000 f842 	bl	8007f40 <fiprintf>
 8007ebc:	f000 f852 	bl	8007f64 <abort>
 8007ec0:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <__assert_func+0x38>)
 8007ec2:	461c      	mov	r4, r3
 8007ec4:	e7f3      	b.n	8007eae <__assert_func+0x12>
 8007ec6:	bf00      	nop
 8007ec8:	20000068 	.word	0x20000068
 8007ecc:	08009476 	.word	0x08009476
 8007ed0:	08009483 	.word	0x08009483
 8007ed4:	080094b1 	.word	0x080094b1

08007ed8 <_calloc_r>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	fba1 5402 	umull	r5, r4, r1, r2
 8007ede:	b934      	cbnz	r4, 8007eee <_calloc_r+0x16>
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f7fd fe67 	bl	8005bb4 <_malloc_r>
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	b928      	cbnz	r0, 8007ef6 <_calloc_r+0x1e>
 8007eea:	4630      	mov	r0, r6
 8007eec:	bd70      	pop	{r4, r5, r6, pc}
 8007eee:	220c      	movs	r2, #12
 8007ef0:	2600      	movs	r6, #0
 8007ef2:	6002      	str	r2, [r0, #0]
 8007ef4:	e7f9      	b.n	8007eea <_calloc_r+0x12>
 8007ef6:	462a      	mov	r2, r5
 8007ef8:	4621      	mov	r1, r4
 8007efa:	f7fe fc4a 	bl	8006792 <memset>
 8007efe:	e7f4      	b.n	8007eea <_calloc_r+0x12>

08007f00 <__ascii_mbtowc>:
 8007f00:	b082      	sub	sp, #8
 8007f02:	b901      	cbnz	r1, 8007f06 <__ascii_mbtowc+0x6>
 8007f04:	a901      	add	r1, sp, #4
 8007f06:	b142      	cbz	r2, 8007f1a <__ascii_mbtowc+0x1a>
 8007f08:	b14b      	cbz	r3, 8007f1e <__ascii_mbtowc+0x1e>
 8007f0a:	7813      	ldrb	r3, [r2, #0]
 8007f0c:	600b      	str	r3, [r1, #0]
 8007f0e:	7812      	ldrb	r2, [r2, #0]
 8007f10:	1e10      	subs	r0, r2, #0
 8007f12:	bf18      	it	ne
 8007f14:	2001      	movne	r0, #1
 8007f16:	b002      	add	sp, #8
 8007f18:	4770      	bx	lr
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	e7fb      	b.n	8007f16 <__ascii_mbtowc+0x16>
 8007f1e:	f06f 0001 	mvn.w	r0, #1
 8007f22:	e7f8      	b.n	8007f16 <__ascii_mbtowc+0x16>

08007f24 <__ascii_wctomb>:
 8007f24:	4603      	mov	r3, r0
 8007f26:	4608      	mov	r0, r1
 8007f28:	b141      	cbz	r1, 8007f3c <__ascii_wctomb+0x18>
 8007f2a:	2aff      	cmp	r2, #255	; 0xff
 8007f2c:	d904      	bls.n	8007f38 <__ascii_wctomb+0x14>
 8007f2e:	228a      	movs	r2, #138	; 0x8a
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	4770      	bx	lr
 8007f38:	2001      	movs	r0, #1
 8007f3a:	700a      	strb	r2, [r1, #0]
 8007f3c:	4770      	bx	lr
	...

08007f40 <fiprintf>:
 8007f40:	b40e      	push	{r1, r2, r3}
 8007f42:	b503      	push	{r0, r1, lr}
 8007f44:	4601      	mov	r1, r0
 8007f46:	ab03      	add	r3, sp, #12
 8007f48:	4805      	ldr	r0, [pc, #20]	; (8007f60 <fiprintf+0x20>)
 8007f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f4e:	6800      	ldr	r0, [r0, #0]
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	f000 f835 	bl	8007fc0 <_vfiprintf_r>
 8007f56:	b002      	add	sp, #8
 8007f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f5c:	b003      	add	sp, #12
 8007f5e:	4770      	bx	lr
 8007f60:	20000068 	.word	0x20000068

08007f64 <abort>:
 8007f64:	2006      	movs	r0, #6
 8007f66:	b508      	push	{r3, lr}
 8007f68:	f000 fa02 	bl	8008370 <raise>
 8007f6c:	2001      	movs	r0, #1
 8007f6e:	f7f9 fd8e 	bl	8001a8e <_exit>

08007f72 <__sfputc_r>:
 8007f72:	6893      	ldr	r3, [r2, #8]
 8007f74:	b410      	push	{r4}
 8007f76:	3b01      	subs	r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	6093      	str	r3, [r2, #8]
 8007f7c:	da07      	bge.n	8007f8e <__sfputc_r+0x1c>
 8007f7e:	6994      	ldr	r4, [r2, #24]
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	db01      	blt.n	8007f88 <__sfputc_r+0x16>
 8007f84:	290a      	cmp	r1, #10
 8007f86:	d102      	bne.n	8007f8e <__sfputc_r+0x1c>
 8007f88:	bc10      	pop	{r4}
 8007f8a:	f000 b933 	b.w	80081f4 <__swbuf_r>
 8007f8e:	6813      	ldr	r3, [r2, #0]
 8007f90:	1c58      	adds	r0, r3, #1
 8007f92:	6010      	str	r0, [r2, #0]
 8007f94:	7019      	strb	r1, [r3, #0]
 8007f96:	4608      	mov	r0, r1
 8007f98:	bc10      	pop	{r4}
 8007f9a:	4770      	bx	lr

08007f9c <__sfputs_r>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	460f      	mov	r7, r1
 8007fa2:	4614      	mov	r4, r2
 8007fa4:	18d5      	adds	r5, r2, r3
 8007fa6:	42ac      	cmp	r4, r5
 8007fa8:	d101      	bne.n	8007fae <__sfputs_r+0x12>
 8007faa:	2000      	movs	r0, #0
 8007fac:	e007      	b.n	8007fbe <__sfputs_r+0x22>
 8007fae:	463a      	mov	r2, r7
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb6:	f7ff ffdc 	bl	8007f72 <__sfputc_r>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	d1f3      	bne.n	8007fa6 <__sfputs_r+0xa>
 8007fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fc0 <_vfiprintf_r>:
 8007fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	460d      	mov	r5, r1
 8007fc6:	4614      	mov	r4, r2
 8007fc8:	4698      	mov	r8, r3
 8007fca:	4606      	mov	r6, r0
 8007fcc:	b09d      	sub	sp, #116	; 0x74
 8007fce:	b118      	cbz	r0, 8007fd8 <_vfiprintf_r+0x18>
 8007fd0:	6a03      	ldr	r3, [r0, #32]
 8007fd2:	b90b      	cbnz	r3, 8007fd8 <_vfiprintf_r+0x18>
 8007fd4:	f7fe fb64 	bl	80066a0 <__sinit>
 8007fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fda:	07d9      	lsls	r1, r3, #31
 8007fdc:	d405      	bmi.n	8007fea <_vfiprintf_r+0x2a>
 8007fde:	89ab      	ldrh	r3, [r5, #12]
 8007fe0:	059a      	lsls	r2, r3, #22
 8007fe2:	d402      	bmi.n	8007fea <_vfiprintf_r+0x2a>
 8007fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fe6:	f7fe fc62 	bl	80068ae <__retarget_lock_acquire_recursive>
 8007fea:	89ab      	ldrh	r3, [r5, #12]
 8007fec:	071b      	lsls	r3, r3, #28
 8007fee:	d501      	bpl.n	8007ff4 <_vfiprintf_r+0x34>
 8007ff0:	692b      	ldr	r3, [r5, #16]
 8007ff2:	b99b      	cbnz	r3, 800801c <_vfiprintf_r+0x5c>
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f000 f93a 	bl	8008270 <__swsetup_r>
 8007ffc:	b170      	cbz	r0, 800801c <_vfiprintf_r+0x5c>
 8007ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008000:	07dc      	lsls	r4, r3, #31
 8008002:	d504      	bpl.n	800800e <_vfiprintf_r+0x4e>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	b01d      	add	sp, #116	; 0x74
 800800a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800e:	89ab      	ldrh	r3, [r5, #12]
 8008010:	0598      	lsls	r0, r3, #22
 8008012:	d4f7      	bmi.n	8008004 <_vfiprintf_r+0x44>
 8008014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008016:	f7fe fc4b 	bl	80068b0 <__retarget_lock_release_recursive>
 800801a:	e7f3      	b.n	8008004 <_vfiprintf_r+0x44>
 800801c:	2300      	movs	r3, #0
 800801e:	9309      	str	r3, [sp, #36]	; 0x24
 8008020:	2320      	movs	r3, #32
 8008022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008026:	2330      	movs	r3, #48	; 0x30
 8008028:	f04f 0901 	mov.w	r9, #1
 800802c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008030:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80081e0 <_vfiprintf_r+0x220>
 8008034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008038:	4623      	mov	r3, r4
 800803a:	469a      	mov	sl, r3
 800803c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008040:	b10a      	cbz	r2, 8008046 <_vfiprintf_r+0x86>
 8008042:	2a25      	cmp	r2, #37	; 0x25
 8008044:	d1f9      	bne.n	800803a <_vfiprintf_r+0x7a>
 8008046:	ebba 0b04 	subs.w	fp, sl, r4
 800804a:	d00b      	beq.n	8008064 <_vfiprintf_r+0xa4>
 800804c:	465b      	mov	r3, fp
 800804e:	4622      	mov	r2, r4
 8008050:	4629      	mov	r1, r5
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff ffa2 	bl	8007f9c <__sfputs_r>
 8008058:	3001      	adds	r0, #1
 800805a:	f000 80a9 	beq.w	80081b0 <_vfiprintf_r+0x1f0>
 800805e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008060:	445a      	add	r2, fp
 8008062:	9209      	str	r2, [sp, #36]	; 0x24
 8008064:	f89a 3000 	ldrb.w	r3, [sl]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 80a1 	beq.w	80081b0 <_vfiprintf_r+0x1f0>
 800806e:	2300      	movs	r3, #0
 8008070:	f04f 32ff 	mov.w	r2, #4294967295
 8008074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008078:	f10a 0a01 	add.w	sl, sl, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	9307      	str	r3, [sp, #28]
 8008080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008084:	931a      	str	r3, [sp, #104]	; 0x68
 8008086:	4654      	mov	r4, sl
 8008088:	2205      	movs	r2, #5
 800808a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808e:	4854      	ldr	r0, [pc, #336]	; (80081e0 <_vfiprintf_r+0x220>)
 8008090:	f7fe fc0f 	bl	80068b2 <memchr>
 8008094:	9a04      	ldr	r2, [sp, #16]
 8008096:	b9d8      	cbnz	r0, 80080d0 <_vfiprintf_r+0x110>
 8008098:	06d1      	lsls	r1, r2, #27
 800809a:	bf44      	itt	mi
 800809c:	2320      	movmi	r3, #32
 800809e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a2:	0713      	lsls	r3, r2, #28
 80080a4:	bf44      	itt	mi
 80080a6:	232b      	movmi	r3, #43	; 0x2b
 80080a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ac:	f89a 3000 	ldrb.w	r3, [sl]
 80080b0:	2b2a      	cmp	r3, #42	; 0x2a
 80080b2:	d015      	beq.n	80080e0 <_vfiprintf_r+0x120>
 80080b4:	4654      	mov	r4, sl
 80080b6:	2000      	movs	r0, #0
 80080b8:	f04f 0c0a 	mov.w	ip, #10
 80080bc:	9a07      	ldr	r2, [sp, #28]
 80080be:	4621      	mov	r1, r4
 80080c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c4:	3b30      	subs	r3, #48	; 0x30
 80080c6:	2b09      	cmp	r3, #9
 80080c8:	d94d      	bls.n	8008166 <_vfiprintf_r+0x1a6>
 80080ca:	b1b0      	cbz	r0, 80080fa <_vfiprintf_r+0x13a>
 80080cc:	9207      	str	r2, [sp, #28]
 80080ce:	e014      	b.n	80080fa <_vfiprintf_r+0x13a>
 80080d0:	eba0 0308 	sub.w	r3, r0, r8
 80080d4:	fa09 f303 	lsl.w	r3, r9, r3
 80080d8:	4313      	orrs	r3, r2
 80080da:	46a2      	mov	sl, r4
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	e7d2      	b.n	8008086 <_vfiprintf_r+0xc6>
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	1d19      	adds	r1, r3, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	9103      	str	r1, [sp, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	bfbb      	ittet	lt
 80080ec:	425b      	neglt	r3, r3
 80080ee:	f042 0202 	orrlt.w	r2, r2, #2
 80080f2:	9307      	strge	r3, [sp, #28]
 80080f4:	9307      	strlt	r3, [sp, #28]
 80080f6:	bfb8      	it	lt
 80080f8:	9204      	strlt	r2, [sp, #16]
 80080fa:	7823      	ldrb	r3, [r4, #0]
 80080fc:	2b2e      	cmp	r3, #46	; 0x2e
 80080fe:	d10c      	bne.n	800811a <_vfiprintf_r+0x15a>
 8008100:	7863      	ldrb	r3, [r4, #1]
 8008102:	2b2a      	cmp	r3, #42	; 0x2a
 8008104:	d134      	bne.n	8008170 <_vfiprintf_r+0x1b0>
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	3402      	adds	r4, #2
 800810a:	1d1a      	adds	r2, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	9203      	str	r2, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bfb8      	it	lt
 8008114:	f04f 33ff 	movlt.w	r3, #4294967295
 8008118:	9305      	str	r3, [sp, #20]
 800811a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081e4 <_vfiprintf_r+0x224>
 800811e:	2203      	movs	r2, #3
 8008120:	4650      	mov	r0, sl
 8008122:	7821      	ldrb	r1, [r4, #0]
 8008124:	f7fe fbc5 	bl	80068b2 <memchr>
 8008128:	b138      	cbz	r0, 800813a <_vfiprintf_r+0x17a>
 800812a:	2240      	movs	r2, #64	; 0x40
 800812c:	9b04      	ldr	r3, [sp, #16]
 800812e:	eba0 000a 	sub.w	r0, r0, sl
 8008132:	4082      	lsls	r2, r0
 8008134:	4313      	orrs	r3, r2
 8008136:	3401      	adds	r4, #1
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800813e:	2206      	movs	r2, #6
 8008140:	4829      	ldr	r0, [pc, #164]	; (80081e8 <_vfiprintf_r+0x228>)
 8008142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008146:	f7fe fbb4 	bl	80068b2 <memchr>
 800814a:	2800      	cmp	r0, #0
 800814c:	d03f      	beq.n	80081ce <_vfiprintf_r+0x20e>
 800814e:	4b27      	ldr	r3, [pc, #156]	; (80081ec <_vfiprintf_r+0x22c>)
 8008150:	bb1b      	cbnz	r3, 800819a <_vfiprintf_r+0x1da>
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	3307      	adds	r3, #7
 8008156:	f023 0307 	bic.w	r3, r3, #7
 800815a:	3308      	adds	r3, #8
 800815c:	9303      	str	r3, [sp, #12]
 800815e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008160:	443b      	add	r3, r7
 8008162:	9309      	str	r3, [sp, #36]	; 0x24
 8008164:	e768      	b.n	8008038 <_vfiprintf_r+0x78>
 8008166:	460c      	mov	r4, r1
 8008168:	2001      	movs	r0, #1
 800816a:	fb0c 3202 	mla	r2, ip, r2, r3
 800816e:	e7a6      	b.n	80080be <_vfiprintf_r+0xfe>
 8008170:	2300      	movs	r3, #0
 8008172:	f04f 0c0a 	mov.w	ip, #10
 8008176:	4619      	mov	r1, r3
 8008178:	3401      	adds	r4, #1
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	4620      	mov	r0, r4
 800817e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008182:	3a30      	subs	r2, #48	; 0x30
 8008184:	2a09      	cmp	r2, #9
 8008186:	d903      	bls.n	8008190 <_vfiprintf_r+0x1d0>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0c6      	beq.n	800811a <_vfiprintf_r+0x15a>
 800818c:	9105      	str	r1, [sp, #20]
 800818e:	e7c4      	b.n	800811a <_vfiprintf_r+0x15a>
 8008190:	4604      	mov	r4, r0
 8008192:	2301      	movs	r3, #1
 8008194:	fb0c 2101 	mla	r1, ip, r1, r2
 8008198:	e7f0      	b.n	800817c <_vfiprintf_r+0x1bc>
 800819a:	ab03      	add	r3, sp, #12
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	462a      	mov	r2, r5
 80081a0:	4630      	mov	r0, r6
 80081a2:	4b13      	ldr	r3, [pc, #76]	; (80081f0 <_vfiprintf_r+0x230>)
 80081a4:	a904      	add	r1, sp, #16
 80081a6:	f7fd fe2d 	bl	8005e04 <_printf_float>
 80081aa:	4607      	mov	r7, r0
 80081ac:	1c78      	adds	r0, r7, #1
 80081ae:	d1d6      	bne.n	800815e <_vfiprintf_r+0x19e>
 80081b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081b2:	07d9      	lsls	r1, r3, #31
 80081b4:	d405      	bmi.n	80081c2 <_vfiprintf_r+0x202>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	059a      	lsls	r2, r3, #22
 80081ba:	d402      	bmi.n	80081c2 <_vfiprintf_r+0x202>
 80081bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081be:	f7fe fb77 	bl	80068b0 <__retarget_lock_release_recursive>
 80081c2:	89ab      	ldrh	r3, [r5, #12]
 80081c4:	065b      	lsls	r3, r3, #25
 80081c6:	f53f af1d 	bmi.w	8008004 <_vfiprintf_r+0x44>
 80081ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081cc:	e71c      	b.n	8008008 <_vfiprintf_r+0x48>
 80081ce:	ab03      	add	r3, sp, #12
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	462a      	mov	r2, r5
 80081d4:	4630      	mov	r0, r6
 80081d6:	4b06      	ldr	r3, [pc, #24]	; (80081f0 <_vfiprintf_r+0x230>)
 80081d8:	a904      	add	r1, sp, #16
 80081da:	f7fe f8b3 	bl	8006344 <_printf_i>
 80081de:	e7e4      	b.n	80081aa <_vfiprintf_r+0x1ea>
 80081e0:	080094b2 	.word	0x080094b2
 80081e4:	080094b8 	.word	0x080094b8
 80081e8:	080094bc 	.word	0x080094bc
 80081ec:	08005e05 	.word	0x08005e05
 80081f0:	08007f9d 	.word	0x08007f9d

080081f4 <__swbuf_r>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	460e      	mov	r6, r1
 80081f8:	4614      	mov	r4, r2
 80081fa:	4605      	mov	r5, r0
 80081fc:	b118      	cbz	r0, 8008206 <__swbuf_r+0x12>
 80081fe:	6a03      	ldr	r3, [r0, #32]
 8008200:	b90b      	cbnz	r3, 8008206 <__swbuf_r+0x12>
 8008202:	f7fe fa4d 	bl	80066a0 <__sinit>
 8008206:	69a3      	ldr	r3, [r4, #24]
 8008208:	60a3      	str	r3, [r4, #8]
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	071a      	lsls	r2, r3, #28
 800820e:	d525      	bpl.n	800825c <__swbuf_r+0x68>
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	b31b      	cbz	r3, 800825c <__swbuf_r+0x68>
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	6922      	ldr	r2, [r4, #16]
 8008218:	b2f6      	uxtb	r6, r6
 800821a:	1a98      	subs	r0, r3, r2
 800821c:	6963      	ldr	r3, [r4, #20]
 800821e:	4637      	mov	r7, r6
 8008220:	4283      	cmp	r3, r0
 8008222:	dc04      	bgt.n	800822e <__swbuf_r+0x3a>
 8008224:	4621      	mov	r1, r4
 8008226:	4628      	mov	r0, r5
 8008228:	f7ff fe10 	bl	8007e4c <_fflush_r>
 800822c:	b9e0      	cbnz	r0, 8008268 <__swbuf_r+0x74>
 800822e:	68a3      	ldr	r3, [r4, #8]
 8008230:	3b01      	subs	r3, #1
 8008232:	60a3      	str	r3, [r4, #8]
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	1c5a      	adds	r2, r3, #1
 8008238:	6022      	str	r2, [r4, #0]
 800823a:	701e      	strb	r6, [r3, #0]
 800823c:	6962      	ldr	r2, [r4, #20]
 800823e:	1c43      	adds	r3, r0, #1
 8008240:	429a      	cmp	r2, r3
 8008242:	d004      	beq.n	800824e <__swbuf_r+0x5a>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	07db      	lsls	r3, r3, #31
 8008248:	d506      	bpl.n	8008258 <__swbuf_r+0x64>
 800824a:	2e0a      	cmp	r6, #10
 800824c:	d104      	bne.n	8008258 <__swbuf_r+0x64>
 800824e:	4621      	mov	r1, r4
 8008250:	4628      	mov	r0, r5
 8008252:	f7ff fdfb 	bl	8007e4c <_fflush_r>
 8008256:	b938      	cbnz	r0, 8008268 <__swbuf_r+0x74>
 8008258:	4638      	mov	r0, r7
 800825a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800825c:	4621      	mov	r1, r4
 800825e:	4628      	mov	r0, r5
 8008260:	f000 f806 	bl	8008270 <__swsetup_r>
 8008264:	2800      	cmp	r0, #0
 8008266:	d0d5      	beq.n	8008214 <__swbuf_r+0x20>
 8008268:	f04f 37ff 	mov.w	r7, #4294967295
 800826c:	e7f4      	b.n	8008258 <__swbuf_r+0x64>
	...

08008270 <__swsetup_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4b2a      	ldr	r3, [pc, #168]	; (800831c <__swsetup_r+0xac>)
 8008274:	4605      	mov	r5, r0
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	460c      	mov	r4, r1
 800827a:	b118      	cbz	r0, 8008284 <__swsetup_r+0x14>
 800827c:	6a03      	ldr	r3, [r0, #32]
 800827e:	b90b      	cbnz	r3, 8008284 <__swsetup_r+0x14>
 8008280:	f7fe fa0e 	bl	80066a0 <__sinit>
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800828a:	0718      	lsls	r0, r3, #28
 800828c:	d422      	bmi.n	80082d4 <__swsetup_r+0x64>
 800828e:	06d9      	lsls	r1, r3, #27
 8008290:	d407      	bmi.n	80082a2 <__swsetup_r+0x32>
 8008292:	2309      	movs	r3, #9
 8008294:	602b      	str	r3, [r5, #0]
 8008296:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800829a:	f04f 30ff 	mov.w	r0, #4294967295
 800829e:	81a3      	strh	r3, [r4, #12]
 80082a0:	e034      	b.n	800830c <__swsetup_r+0x9c>
 80082a2:	0758      	lsls	r0, r3, #29
 80082a4:	d512      	bpl.n	80082cc <__swsetup_r+0x5c>
 80082a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082a8:	b141      	cbz	r1, 80082bc <__swsetup_r+0x4c>
 80082aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082ae:	4299      	cmp	r1, r3
 80082b0:	d002      	beq.n	80082b8 <__swsetup_r+0x48>
 80082b2:	4628      	mov	r0, r5
 80082b4:	f7ff f988 	bl	80075c8 <_free_r>
 80082b8:	2300      	movs	r3, #0
 80082ba:	6363      	str	r3, [r4, #52]	; 0x34
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	2300      	movs	r3, #0
 80082c6:	6063      	str	r3, [r4, #4]
 80082c8:	6923      	ldr	r3, [r4, #16]
 80082ca:	6023      	str	r3, [r4, #0]
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	f043 0308 	orr.w	r3, r3, #8
 80082d2:	81a3      	strh	r3, [r4, #12]
 80082d4:	6923      	ldr	r3, [r4, #16]
 80082d6:	b94b      	cbnz	r3, 80082ec <__swsetup_r+0x7c>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082e2:	d003      	beq.n	80082ec <__swsetup_r+0x7c>
 80082e4:	4621      	mov	r1, r4
 80082e6:	4628      	mov	r0, r5
 80082e8:	f000 f883 	bl	80083f2 <__smakebuf_r>
 80082ec:	89a0      	ldrh	r0, [r4, #12]
 80082ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082f2:	f010 0301 	ands.w	r3, r0, #1
 80082f6:	d00a      	beq.n	800830e <__swsetup_r+0x9e>
 80082f8:	2300      	movs	r3, #0
 80082fa:	60a3      	str	r3, [r4, #8]
 80082fc:	6963      	ldr	r3, [r4, #20]
 80082fe:	425b      	negs	r3, r3
 8008300:	61a3      	str	r3, [r4, #24]
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	b943      	cbnz	r3, 8008318 <__swsetup_r+0xa8>
 8008306:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800830a:	d1c4      	bne.n	8008296 <__swsetup_r+0x26>
 800830c:	bd38      	pop	{r3, r4, r5, pc}
 800830e:	0781      	lsls	r1, r0, #30
 8008310:	bf58      	it	pl
 8008312:	6963      	ldrpl	r3, [r4, #20]
 8008314:	60a3      	str	r3, [r4, #8]
 8008316:	e7f4      	b.n	8008302 <__swsetup_r+0x92>
 8008318:	2000      	movs	r0, #0
 800831a:	e7f7      	b.n	800830c <__swsetup_r+0x9c>
 800831c:	20000068 	.word	0x20000068

08008320 <_raise_r>:
 8008320:	291f      	cmp	r1, #31
 8008322:	b538      	push	{r3, r4, r5, lr}
 8008324:	4604      	mov	r4, r0
 8008326:	460d      	mov	r5, r1
 8008328:	d904      	bls.n	8008334 <_raise_r+0x14>
 800832a:	2316      	movs	r3, #22
 800832c:	6003      	str	r3, [r0, #0]
 800832e:	f04f 30ff 	mov.w	r0, #4294967295
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008336:	b112      	cbz	r2, 800833e <_raise_r+0x1e>
 8008338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800833c:	b94b      	cbnz	r3, 8008352 <_raise_r+0x32>
 800833e:	4620      	mov	r0, r4
 8008340:	f000 f830 	bl	80083a4 <_getpid_r>
 8008344:	462a      	mov	r2, r5
 8008346:	4601      	mov	r1, r0
 8008348:	4620      	mov	r0, r4
 800834a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800834e:	f000 b817 	b.w	8008380 <_kill_r>
 8008352:	2b01      	cmp	r3, #1
 8008354:	d00a      	beq.n	800836c <_raise_r+0x4c>
 8008356:	1c59      	adds	r1, r3, #1
 8008358:	d103      	bne.n	8008362 <_raise_r+0x42>
 800835a:	2316      	movs	r3, #22
 800835c:	6003      	str	r3, [r0, #0]
 800835e:	2001      	movs	r0, #1
 8008360:	e7e7      	b.n	8008332 <_raise_r+0x12>
 8008362:	2400      	movs	r4, #0
 8008364:	4628      	mov	r0, r5
 8008366:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800836a:	4798      	blx	r3
 800836c:	2000      	movs	r0, #0
 800836e:	e7e0      	b.n	8008332 <_raise_r+0x12>

08008370 <raise>:
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <raise+0xc>)
 8008372:	4601      	mov	r1, r0
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	f7ff bfd3 	b.w	8008320 <_raise_r>
 800837a:	bf00      	nop
 800837c:	20000068 	.word	0x20000068

08008380 <_kill_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	2300      	movs	r3, #0
 8008384:	4d06      	ldr	r5, [pc, #24]	; (80083a0 <_kill_r+0x20>)
 8008386:	4604      	mov	r4, r0
 8008388:	4608      	mov	r0, r1
 800838a:	4611      	mov	r1, r2
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	f7f9 fb6e 	bl	8001a6e <_kill>
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	d102      	bne.n	800839c <_kill_r+0x1c>
 8008396:	682b      	ldr	r3, [r5, #0]
 8008398:	b103      	cbz	r3, 800839c <_kill_r+0x1c>
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	bd38      	pop	{r3, r4, r5, pc}
 800839e:	bf00      	nop
 80083a0:	20000520 	.word	0x20000520

080083a4 <_getpid_r>:
 80083a4:	f7f9 bb5c 	b.w	8001a60 <_getpid>

080083a8 <__swhatbuf_r>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	460c      	mov	r4, r1
 80083ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b0:	4615      	mov	r5, r2
 80083b2:	2900      	cmp	r1, #0
 80083b4:	461e      	mov	r6, r3
 80083b6:	b096      	sub	sp, #88	; 0x58
 80083b8:	da0c      	bge.n	80083d4 <__swhatbuf_r+0x2c>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	2100      	movs	r1, #0
 80083be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80083c2:	bf0c      	ite	eq
 80083c4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80083c8:	2340      	movne	r3, #64	; 0x40
 80083ca:	2000      	movs	r0, #0
 80083cc:	6031      	str	r1, [r6, #0]
 80083ce:	602b      	str	r3, [r5, #0]
 80083d0:	b016      	add	sp, #88	; 0x58
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	466a      	mov	r2, sp
 80083d6:	f000 f849 	bl	800846c <_fstat_r>
 80083da:	2800      	cmp	r0, #0
 80083dc:	dbed      	blt.n	80083ba <__swhatbuf_r+0x12>
 80083de:	9901      	ldr	r1, [sp, #4]
 80083e0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80083e4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80083e8:	4259      	negs	r1, r3
 80083ea:	4159      	adcs	r1, r3
 80083ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f0:	e7eb      	b.n	80083ca <__swhatbuf_r+0x22>

080083f2 <__smakebuf_r>:
 80083f2:	898b      	ldrh	r3, [r1, #12]
 80083f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083f6:	079d      	lsls	r5, r3, #30
 80083f8:	4606      	mov	r6, r0
 80083fa:	460c      	mov	r4, r1
 80083fc:	d507      	bpl.n	800840e <__smakebuf_r+0x1c>
 80083fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008402:	6023      	str	r3, [r4, #0]
 8008404:	6123      	str	r3, [r4, #16]
 8008406:	2301      	movs	r3, #1
 8008408:	6163      	str	r3, [r4, #20]
 800840a:	b002      	add	sp, #8
 800840c:	bd70      	pop	{r4, r5, r6, pc}
 800840e:	466a      	mov	r2, sp
 8008410:	ab01      	add	r3, sp, #4
 8008412:	f7ff ffc9 	bl	80083a8 <__swhatbuf_r>
 8008416:	9900      	ldr	r1, [sp, #0]
 8008418:	4605      	mov	r5, r0
 800841a:	4630      	mov	r0, r6
 800841c:	f7fd fbca 	bl	8005bb4 <_malloc_r>
 8008420:	b948      	cbnz	r0, 8008436 <__smakebuf_r+0x44>
 8008422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008426:	059a      	lsls	r2, r3, #22
 8008428:	d4ef      	bmi.n	800840a <__smakebuf_r+0x18>
 800842a:	f023 0303 	bic.w	r3, r3, #3
 800842e:	f043 0302 	orr.w	r3, r3, #2
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	e7e3      	b.n	80083fe <__smakebuf_r+0xc>
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	6020      	str	r0, [r4, #0]
 800843a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800843e:	81a3      	strh	r3, [r4, #12]
 8008440:	9b00      	ldr	r3, [sp, #0]
 8008442:	6120      	str	r0, [r4, #16]
 8008444:	6163      	str	r3, [r4, #20]
 8008446:	9b01      	ldr	r3, [sp, #4]
 8008448:	b15b      	cbz	r3, 8008462 <__smakebuf_r+0x70>
 800844a:	4630      	mov	r0, r6
 800844c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008450:	f000 f81e 	bl	8008490 <_isatty_r>
 8008454:	b128      	cbz	r0, 8008462 <__smakebuf_r+0x70>
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	f023 0303 	bic.w	r3, r3, #3
 800845c:	f043 0301 	orr.w	r3, r3, #1
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	431d      	orrs	r5, r3
 8008466:	81a5      	strh	r5, [r4, #12]
 8008468:	e7cf      	b.n	800840a <__smakebuf_r+0x18>
	...

0800846c <_fstat_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	2300      	movs	r3, #0
 8008470:	4d06      	ldr	r5, [pc, #24]	; (800848c <_fstat_r+0x20>)
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	4611      	mov	r1, r2
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	f7f9 fb56 	bl	8001b2a <_fstat>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	d102      	bne.n	8008488 <_fstat_r+0x1c>
 8008482:	682b      	ldr	r3, [r5, #0]
 8008484:	b103      	cbz	r3, 8008488 <_fstat_r+0x1c>
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	bd38      	pop	{r3, r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	20000520 	.word	0x20000520

08008490 <_isatty_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	2300      	movs	r3, #0
 8008494:	4d05      	ldr	r5, [pc, #20]	; (80084ac <_isatty_r+0x1c>)
 8008496:	4604      	mov	r4, r0
 8008498:	4608      	mov	r0, r1
 800849a:	602b      	str	r3, [r5, #0]
 800849c:	f7f9 fb54 	bl	8001b48 <_isatty>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_isatty_r+0x1a>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_isatty_r+0x1a>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	20000520 	.word	0x20000520

080084b0 <sinf>:
 80084b0:	b507      	push	{r0, r1, r2, lr}
 80084b2:	4a1b      	ldr	r2, [pc, #108]	; (8008520 <sinf+0x70>)
 80084b4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80084b8:	4293      	cmp	r3, r2
 80084ba:	4601      	mov	r1, r0
 80084bc:	dc06      	bgt.n	80084cc <sinf+0x1c>
 80084be:	2200      	movs	r2, #0
 80084c0:	2100      	movs	r1, #0
 80084c2:	b003      	add	sp, #12
 80084c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084c8:	f000 b8f2 	b.w	80086b0 <__kernel_sinf>
 80084cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80084d0:	db04      	blt.n	80084dc <sinf+0x2c>
 80084d2:	f7f8 fb4d 	bl	8000b70 <__aeabi_fsub>
 80084d6:	b003      	add	sp, #12
 80084d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80084dc:	4669      	mov	r1, sp
 80084de:	f000 f95d 	bl	800879c <__ieee754_rem_pio2f>
 80084e2:	f000 0003 	and.w	r0, r0, #3
 80084e6:	2801      	cmp	r0, #1
 80084e8:	d008      	beq.n	80084fc <sinf+0x4c>
 80084ea:	2802      	cmp	r0, #2
 80084ec:	d00b      	beq.n	8008506 <sinf+0x56>
 80084ee:	b990      	cbnz	r0, 8008516 <sinf+0x66>
 80084f0:	2201      	movs	r2, #1
 80084f2:	9901      	ldr	r1, [sp, #4]
 80084f4:	9800      	ldr	r0, [sp, #0]
 80084f6:	f000 f8db 	bl	80086b0 <__kernel_sinf>
 80084fa:	e7ec      	b.n	80084d6 <sinf+0x26>
 80084fc:	9901      	ldr	r1, [sp, #4]
 80084fe:	9800      	ldr	r0, [sp, #0]
 8008500:	f000 f856 	bl	80085b0 <__kernel_cosf>
 8008504:	e7e7      	b.n	80084d6 <sinf+0x26>
 8008506:	2201      	movs	r2, #1
 8008508:	9901      	ldr	r1, [sp, #4]
 800850a:	9800      	ldr	r0, [sp, #0]
 800850c:	f000 f8d0 	bl	80086b0 <__kernel_sinf>
 8008510:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008514:	e7df      	b.n	80084d6 <sinf+0x26>
 8008516:	9901      	ldr	r1, [sp, #4]
 8008518:	9800      	ldr	r0, [sp, #0]
 800851a:	f000 f849 	bl	80085b0 <__kernel_cosf>
 800851e:	e7f7      	b.n	8008510 <sinf+0x60>
 8008520:	3f490fd8 	.word	0x3f490fd8

08008524 <round>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800852a:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 800852e:	2a13      	cmp	r2, #19
 8008530:	460b      	mov	r3, r1
 8008532:	4605      	mov	r5, r0
 8008534:	460c      	mov	r4, r1
 8008536:	dc18      	bgt.n	800856a <round+0x46>
 8008538:	2a00      	cmp	r2, #0
 800853a:	da09      	bge.n	8008550 <round+0x2c>
 800853c:	3201      	adds	r2, #1
 800853e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008542:	d103      	bne.n	800854c <round+0x28>
 8008544:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008548:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800854c:	2200      	movs	r2, #0
 800854e:	e029      	b.n	80085a4 <round+0x80>
 8008550:	4816      	ldr	r0, [pc, #88]	; (80085ac <round+0x88>)
 8008552:	4110      	asrs	r0, r2
 8008554:	4001      	ands	r1, r0
 8008556:	4329      	orrs	r1, r5
 8008558:	d011      	beq.n	800857e <round+0x5a>
 800855a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800855e:	fa41 f202 	asr.w	r2, r1, r2
 8008562:	4413      	add	r3, r2
 8008564:	ea23 0300 	bic.w	r3, r3, r0
 8008568:	e7f0      	b.n	800854c <round+0x28>
 800856a:	2a33      	cmp	r2, #51	; 0x33
 800856c:	dd0a      	ble.n	8008584 <round+0x60>
 800856e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008572:	d104      	bne.n	800857e <round+0x5a>
 8008574:	4602      	mov	r2, r0
 8008576:	f7f7 fdf9 	bl	800016c <__adddf3>
 800857a:	4605      	mov	r5, r0
 800857c:	460c      	mov	r4, r1
 800857e:	4628      	mov	r0, r5
 8008580:	4621      	mov	r1, r4
 8008582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800858c:	40f8      	lsrs	r0, r7
 800858e:	4228      	tst	r0, r5
 8008590:	d0f5      	beq.n	800857e <round+0x5a>
 8008592:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8008596:	2201      	movs	r2, #1
 8008598:	408a      	lsls	r2, r1
 800859a:	1952      	adds	r2, r2, r5
 800859c:	bf28      	it	cs
 800859e:	3301      	addcs	r3, #1
 80085a0:	ea22 0200 	bic.w	r2, r2, r0
 80085a4:	4619      	mov	r1, r3
 80085a6:	4610      	mov	r0, r2
 80085a8:	e7e7      	b.n	800857a <round+0x56>
 80085aa:	bf00      	nop
 80085ac:	000fffff 	.word	0x000fffff

080085b0 <__kernel_cosf>:
 80085b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80085b8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80085bc:	4606      	mov	r6, r0
 80085be:	4688      	mov	r8, r1
 80085c0:	da03      	bge.n	80085ca <__kernel_cosf+0x1a>
 80085c2:	f7f8 fda5 	bl	8001110 <__aeabi_f2iz>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d05c      	beq.n	8008684 <__kernel_cosf+0xd4>
 80085ca:	4631      	mov	r1, r6
 80085cc:	4630      	mov	r0, r6
 80085ce:	f7f8 fbd9 	bl	8000d84 <__aeabi_fmul>
 80085d2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80085d6:	4605      	mov	r5, r0
 80085d8:	f7f8 fbd4 	bl	8000d84 <__aeabi_fmul>
 80085dc:	492b      	ldr	r1, [pc, #172]	; (800868c <__kernel_cosf+0xdc>)
 80085de:	4607      	mov	r7, r0
 80085e0:	4628      	mov	r0, r5
 80085e2:	f7f8 fbcf 	bl	8000d84 <__aeabi_fmul>
 80085e6:	492a      	ldr	r1, [pc, #168]	; (8008690 <__kernel_cosf+0xe0>)
 80085e8:	f7f8 fac4 	bl	8000b74 <__addsf3>
 80085ec:	4629      	mov	r1, r5
 80085ee:	f7f8 fbc9 	bl	8000d84 <__aeabi_fmul>
 80085f2:	4928      	ldr	r1, [pc, #160]	; (8008694 <__kernel_cosf+0xe4>)
 80085f4:	f7f8 fabc 	bl	8000b70 <__aeabi_fsub>
 80085f8:	4629      	mov	r1, r5
 80085fa:	f7f8 fbc3 	bl	8000d84 <__aeabi_fmul>
 80085fe:	4926      	ldr	r1, [pc, #152]	; (8008698 <__kernel_cosf+0xe8>)
 8008600:	f7f8 fab8 	bl	8000b74 <__addsf3>
 8008604:	4629      	mov	r1, r5
 8008606:	f7f8 fbbd 	bl	8000d84 <__aeabi_fmul>
 800860a:	4924      	ldr	r1, [pc, #144]	; (800869c <__kernel_cosf+0xec>)
 800860c:	f7f8 fab0 	bl	8000b70 <__aeabi_fsub>
 8008610:	4629      	mov	r1, r5
 8008612:	f7f8 fbb7 	bl	8000d84 <__aeabi_fmul>
 8008616:	4922      	ldr	r1, [pc, #136]	; (80086a0 <__kernel_cosf+0xf0>)
 8008618:	f7f8 faac 	bl	8000b74 <__addsf3>
 800861c:	4629      	mov	r1, r5
 800861e:	f7f8 fbb1 	bl	8000d84 <__aeabi_fmul>
 8008622:	4629      	mov	r1, r5
 8008624:	f7f8 fbae 	bl	8000d84 <__aeabi_fmul>
 8008628:	4641      	mov	r1, r8
 800862a:	4605      	mov	r5, r0
 800862c:	4630      	mov	r0, r6
 800862e:	f7f8 fba9 	bl	8000d84 <__aeabi_fmul>
 8008632:	4601      	mov	r1, r0
 8008634:	4628      	mov	r0, r5
 8008636:	f7f8 fa9b 	bl	8000b70 <__aeabi_fsub>
 800863a:	4b1a      	ldr	r3, [pc, #104]	; (80086a4 <__kernel_cosf+0xf4>)
 800863c:	4605      	mov	r5, r0
 800863e:	429c      	cmp	r4, r3
 8008640:	dc0a      	bgt.n	8008658 <__kernel_cosf+0xa8>
 8008642:	4601      	mov	r1, r0
 8008644:	4638      	mov	r0, r7
 8008646:	f7f8 fa93 	bl	8000b70 <__aeabi_fsub>
 800864a:	4601      	mov	r1, r0
 800864c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008650:	f7f8 fa8e 	bl	8000b70 <__aeabi_fsub>
 8008654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008658:	4b13      	ldr	r3, [pc, #76]	; (80086a8 <__kernel_cosf+0xf8>)
 800865a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800865e:	429c      	cmp	r4, r3
 8008660:	bfcc      	ite	gt
 8008662:	4c12      	ldrgt	r4, [pc, #72]	; (80086ac <__kernel_cosf+0xfc>)
 8008664:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8008668:	4621      	mov	r1, r4
 800866a:	f7f8 fa81 	bl	8000b70 <__aeabi_fsub>
 800866e:	4621      	mov	r1, r4
 8008670:	4606      	mov	r6, r0
 8008672:	4638      	mov	r0, r7
 8008674:	f7f8 fa7c 	bl	8000b70 <__aeabi_fsub>
 8008678:	4629      	mov	r1, r5
 800867a:	f7f8 fa79 	bl	8000b70 <__aeabi_fsub>
 800867e:	4601      	mov	r1, r0
 8008680:	4630      	mov	r0, r6
 8008682:	e7e5      	b.n	8008650 <__kernel_cosf+0xa0>
 8008684:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008688:	e7e4      	b.n	8008654 <__kernel_cosf+0xa4>
 800868a:	bf00      	nop
 800868c:	ad47d74e 	.word	0xad47d74e
 8008690:	310f74f6 	.word	0x310f74f6
 8008694:	3493f27c 	.word	0x3493f27c
 8008698:	37d00d01 	.word	0x37d00d01
 800869c:	3ab60b61 	.word	0x3ab60b61
 80086a0:	3d2aaaab 	.word	0x3d2aaaab
 80086a4:	3e999999 	.word	0x3e999999
 80086a8:	3f480000 	.word	0x3f480000
 80086ac:	3e900000 	.word	0x3e900000

080086b0 <__kernel_sinf>:
 80086b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80086b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80086bc:	4604      	mov	r4, r0
 80086be:	460f      	mov	r7, r1
 80086c0:	4691      	mov	r9, r2
 80086c2:	da03      	bge.n	80086cc <__kernel_sinf+0x1c>
 80086c4:	f7f8 fd24 	bl	8001110 <__aeabi_f2iz>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d035      	beq.n	8008738 <__kernel_sinf+0x88>
 80086cc:	4621      	mov	r1, r4
 80086ce:	4620      	mov	r0, r4
 80086d0:	f7f8 fb58 	bl	8000d84 <__aeabi_fmul>
 80086d4:	4605      	mov	r5, r0
 80086d6:	4601      	mov	r1, r0
 80086d8:	4620      	mov	r0, r4
 80086da:	f7f8 fb53 	bl	8000d84 <__aeabi_fmul>
 80086de:	4929      	ldr	r1, [pc, #164]	; (8008784 <__kernel_sinf+0xd4>)
 80086e0:	4606      	mov	r6, r0
 80086e2:	4628      	mov	r0, r5
 80086e4:	f7f8 fb4e 	bl	8000d84 <__aeabi_fmul>
 80086e8:	4927      	ldr	r1, [pc, #156]	; (8008788 <__kernel_sinf+0xd8>)
 80086ea:	f7f8 fa41 	bl	8000b70 <__aeabi_fsub>
 80086ee:	4629      	mov	r1, r5
 80086f0:	f7f8 fb48 	bl	8000d84 <__aeabi_fmul>
 80086f4:	4925      	ldr	r1, [pc, #148]	; (800878c <__kernel_sinf+0xdc>)
 80086f6:	f7f8 fa3d 	bl	8000b74 <__addsf3>
 80086fa:	4629      	mov	r1, r5
 80086fc:	f7f8 fb42 	bl	8000d84 <__aeabi_fmul>
 8008700:	4923      	ldr	r1, [pc, #140]	; (8008790 <__kernel_sinf+0xe0>)
 8008702:	f7f8 fa35 	bl	8000b70 <__aeabi_fsub>
 8008706:	4629      	mov	r1, r5
 8008708:	f7f8 fb3c 	bl	8000d84 <__aeabi_fmul>
 800870c:	4921      	ldr	r1, [pc, #132]	; (8008794 <__kernel_sinf+0xe4>)
 800870e:	f7f8 fa31 	bl	8000b74 <__addsf3>
 8008712:	4680      	mov	r8, r0
 8008714:	f1b9 0f00 	cmp.w	r9, #0
 8008718:	d111      	bne.n	800873e <__kernel_sinf+0x8e>
 800871a:	4601      	mov	r1, r0
 800871c:	4628      	mov	r0, r5
 800871e:	f7f8 fb31 	bl	8000d84 <__aeabi_fmul>
 8008722:	491d      	ldr	r1, [pc, #116]	; (8008798 <__kernel_sinf+0xe8>)
 8008724:	f7f8 fa24 	bl	8000b70 <__aeabi_fsub>
 8008728:	4631      	mov	r1, r6
 800872a:	f7f8 fb2b 	bl	8000d84 <__aeabi_fmul>
 800872e:	4601      	mov	r1, r0
 8008730:	4620      	mov	r0, r4
 8008732:	f7f8 fa1f 	bl	8000b74 <__addsf3>
 8008736:	4604      	mov	r4, r0
 8008738:	4620      	mov	r0, r4
 800873a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800873e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008742:	4638      	mov	r0, r7
 8008744:	f7f8 fb1e 	bl	8000d84 <__aeabi_fmul>
 8008748:	4641      	mov	r1, r8
 800874a:	4681      	mov	r9, r0
 800874c:	4630      	mov	r0, r6
 800874e:	f7f8 fb19 	bl	8000d84 <__aeabi_fmul>
 8008752:	4601      	mov	r1, r0
 8008754:	4648      	mov	r0, r9
 8008756:	f7f8 fa0b 	bl	8000b70 <__aeabi_fsub>
 800875a:	4629      	mov	r1, r5
 800875c:	f7f8 fb12 	bl	8000d84 <__aeabi_fmul>
 8008760:	4639      	mov	r1, r7
 8008762:	f7f8 fa05 	bl	8000b70 <__aeabi_fsub>
 8008766:	490c      	ldr	r1, [pc, #48]	; (8008798 <__kernel_sinf+0xe8>)
 8008768:	4605      	mov	r5, r0
 800876a:	4630      	mov	r0, r6
 800876c:	f7f8 fb0a 	bl	8000d84 <__aeabi_fmul>
 8008770:	4601      	mov	r1, r0
 8008772:	4628      	mov	r0, r5
 8008774:	f7f8 f9fe 	bl	8000b74 <__addsf3>
 8008778:	4601      	mov	r1, r0
 800877a:	4620      	mov	r0, r4
 800877c:	f7f8 f9f8 	bl	8000b70 <__aeabi_fsub>
 8008780:	e7d9      	b.n	8008736 <__kernel_sinf+0x86>
 8008782:	bf00      	nop
 8008784:	2f2ec9d3 	.word	0x2f2ec9d3
 8008788:	32d72f34 	.word	0x32d72f34
 800878c:	3638ef1b 	.word	0x3638ef1b
 8008790:	39500d01 	.word	0x39500d01
 8008794:	3c088889 	.word	0x3c088889
 8008798:	3e2aaaab 	.word	0x3e2aaaab

0800879c <__ieee754_rem_pio2f>:
 800879c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a0:	4aa0      	ldr	r2, [pc, #640]	; (8008a24 <__ieee754_rem_pio2f+0x288>)
 80087a2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80087a6:	4296      	cmp	r6, r2
 80087a8:	460c      	mov	r4, r1
 80087aa:	4682      	mov	sl, r0
 80087ac:	b087      	sub	sp, #28
 80087ae:	dc04      	bgt.n	80087ba <__ieee754_rem_pio2f+0x1e>
 80087b0:	2300      	movs	r3, #0
 80087b2:	6008      	str	r0, [r1, #0]
 80087b4:	604b      	str	r3, [r1, #4]
 80087b6:	2500      	movs	r5, #0
 80087b8:	e01a      	b.n	80087f0 <__ieee754_rem_pio2f+0x54>
 80087ba:	4a9b      	ldr	r2, [pc, #620]	; (8008a28 <__ieee754_rem_pio2f+0x28c>)
 80087bc:	4296      	cmp	r6, r2
 80087be:	dc4b      	bgt.n	8008858 <__ieee754_rem_pio2f+0xbc>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	499a      	ldr	r1, [pc, #616]	; (8008a2c <__ieee754_rem_pio2f+0x290>)
 80087c4:	4f9a      	ldr	r7, [pc, #616]	; (8008a30 <__ieee754_rem_pio2f+0x294>)
 80087c6:	f026 060f 	bic.w	r6, r6, #15
 80087ca:	dd23      	ble.n	8008814 <__ieee754_rem_pio2f+0x78>
 80087cc:	f7f8 f9d0 	bl	8000b70 <__aeabi_fsub>
 80087d0:	42be      	cmp	r6, r7
 80087d2:	4605      	mov	r5, r0
 80087d4:	d010      	beq.n	80087f8 <__ieee754_rem_pio2f+0x5c>
 80087d6:	4997      	ldr	r1, [pc, #604]	; (8008a34 <__ieee754_rem_pio2f+0x298>)
 80087d8:	f7f8 f9ca 	bl	8000b70 <__aeabi_fsub>
 80087dc:	4601      	mov	r1, r0
 80087de:	6020      	str	r0, [r4, #0]
 80087e0:	4628      	mov	r0, r5
 80087e2:	f7f8 f9c5 	bl	8000b70 <__aeabi_fsub>
 80087e6:	4993      	ldr	r1, [pc, #588]	; (8008a34 <__ieee754_rem_pio2f+0x298>)
 80087e8:	f7f8 f9c2 	bl	8000b70 <__aeabi_fsub>
 80087ec:	2501      	movs	r5, #1
 80087ee:	6060      	str	r0, [r4, #4]
 80087f0:	4628      	mov	r0, r5
 80087f2:	b007      	add	sp, #28
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f8:	498f      	ldr	r1, [pc, #572]	; (8008a38 <__ieee754_rem_pio2f+0x29c>)
 80087fa:	f7f8 f9b9 	bl	8000b70 <__aeabi_fsub>
 80087fe:	498f      	ldr	r1, [pc, #572]	; (8008a3c <__ieee754_rem_pio2f+0x2a0>)
 8008800:	4605      	mov	r5, r0
 8008802:	f7f8 f9b5 	bl	8000b70 <__aeabi_fsub>
 8008806:	4601      	mov	r1, r0
 8008808:	6020      	str	r0, [r4, #0]
 800880a:	4628      	mov	r0, r5
 800880c:	f7f8 f9b0 	bl	8000b70 <__aeabi_fsub>
 8008810:	498a      	ldr	r1, [pc, #552]	; (8008a3c <__ieee754_rem_pio2f+0x2a0>)
 8008812:	e7e9      	b.n	80087e8 <__ieee754_rem_pio2f+0x4c>
 8008814:	f7f8 f9ae 	bl	8000b74 <__addsf3>
 8008818:	42be      	cmp	r6, r7
 800881a:	4605      	mov	r5, r0
 800881c:	d00e      	beq.n	800883c <__ieee754_rem_pio2f+0xa0>
 800881e:	4985      	ldr	r1, [pc, #532]	; (8008a34 <__ieee754_rem_pio2f+0x298>)
 8008820:	f7f8 f9a8 	bl	8000b74 <__addsf3>
 8008824:	4601      	mov	r1, r0
 8008826:	6020      	str	r0, [r4, #0]
 8008828:	4628      	mov	r0, r5
 800882a:	f7f8 f9a1 	bl	8000b70 <__aeabi_fsub>
 800882e:	4981      	ldr	r1, [pc, #516]	; (8008a34 <__ieee754_rem_pio2f+0x298>)
 8008830:	f7f8 f9a0 	bl	8000b74 <__addsf3>
 8008834:	f04f 35ff 	mov.w	r5, #4294967295
 8008838:	6060      	str	r0, [r4, #4]
 800883a:	e7d9      	b.n	80087f0 <__ieee754_rem_pio2f+0x54>
 800883c:	497e      	ldr	r1, [pc, #504]	; (8008a38 <__ieee754_rem_pio2f+0x29c>)
 800883e:	f7f8 f999 	bl	8000b74 <__addsf3>
 8008842:	497e      	ldr	r1, [pc, #504]	; (8008a3c <__ieee754_rem_pio2f+0x2a0>)
 8008844:	4605      	mov	r5, r0
 8008846:	f7f8 f995 	bl	8000b74 <__addsf3>
 800884a:	4601      	mov	r1, r0
 800884c:	6020      	str	r0, [r4, #0]
 800884e:	4628      	mov	r0, r5
 8008850:	f7f8 f98e 	bl	8000b70 <__aeabi_fsub>
 8008854:	4979      	ldr	r1, [pc, #484]	; (8008a3c <__ieee754_rem_pio2f+0x2a0>)
 8008856:	e7eb      	b.n	8008830 <__ieee754_rem_pio2f+0x94>
 8008858:	4a79      	ldr	r2, [pc, #484]	; (8008a40 <__ieee754_rem_pio2f+0x2a4>)
 800885a:	4296      	cmp	r6, r2
 800885c:	f300 8091 	bgt.w	8008982 <__ieee754_rem_pio2f+0x1e6>
 8008860:	f000 f8fa 	bl	8008a58 <fabsf>
 8008864:	4977      	ldr	r1, [pc, #476]	; (8008a44 <__ieee754_rem_pio2f+0x2a8>)
 8008866:	4607      	mov	r7, r0
 8008868:	f7f8 fa8c 	bl	8000d84 <__aeabi_fmul>
 800886c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008870:	f7f8 f980 	bl	8000b74 <__addsf3>
 8008874:	f7f8 fc4c 	bl	8001110 <__aeabi_f2iz>
 8008878:	4605      	mov	r5, r0
 800887a:	f7f8 fa2f 	bl	8000cdc <__aeabi_i2f>
 800887e:	496b      	ldr	r1, [pc, #428]	; (8008a2c <__ieee754_rem_pio2f+0x290>)
 8008880:	4681      	mov	r9, r0
 8008882:	f7f8 fa7f 	bl	8000d84 <__aeabi_fmul>
 8008886:	4601      	mov	r1, r0
 8008888:	4638      	mov	r0, r7
 800888a:	f7f8 f971 	bl	8000b70 <__aeabi_fsub>
 800888e:	4969      	ldr	r1, [pc, #420]	; (8008a34 <__ieee754_rem_pio2f+0x298>)
 8008890:	4680      	mov	r8, r0
 8008892:	4648      	mov	r0, r9
 8008894:	f7f8 fa76 	bl	8000d84 <__aeabi_fmul>
 8008898:	2d1f      	cmp	r5, #31
 800889a:	4607      	mov	r7, r0
 800889c:	dc0c      	bgt.n	80088b8 <__ieee754_rem_pio2f+0x11c>
 800889e:	4a6a      	ldr	r2, [pc, #424]	; (8008a48 <__ieee754_rem_pio2f+0x2ac>)
 80088a0:	1e69      	subs	r1, r5, #1
 80088a2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80088a6:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d004      	beq.n	80088b8 <__ieee754_rem_pio2f+0x11c>
 80088ae:	4639      	mov	r1, r7
 80088b0:	4640      	mov	r0, r8
 80088b2:	f7f8 f95d 	bl	8000b70 <__aeabi_fsub>
 80088b6:	e00b      	b.n	80088d0 <__ieee754_rem_pio2f+0x134>
 80088b8:	4639      	mov	r1, r7
 80088ba:	4640      	mov	r0, r8
 80088bc:	f7f8 f958 	bl	8000b70 <__aeabi_fsub>
 80088c0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80088c4:	ebc3 53d6 	rsb	r3, r3, r6, lsr #23
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80088ce:	dc01      	bgt.n	80088d4 <__ieee754_rem_pio2f+0x138>
 80088d0:	6020      	str	r0, [r4, #0]
 80088d2:	e026      	b.n	8008922 <__ieee754_rem_pio2f+0x186>
 80088d4:	4958      	ldr	r1, [pc, #352]	; (8008a38 <__ieee754_rem_pio2f+0x29c>)
 80088d6:	4648      	mov	r0, r9
 80088d8:	f7f8 fa54 	bl	8000d84 <__aeabi_fmul>
 80088dc:	4607      	mov	r7, r0
 80088de:	4601      	mov	r1, r0
 80088e0:	4640      	mov	r0, r8
 80088e2:	f7f8 f945 	bl	8000b70 <__aeabi_fsub>
 80088e6:	4601      	mov	r1, r0
 80088e8:	4606      	mov	r6, r0
 80088ea:	4640      	mov	r0, r8
 80088ec:	f7f8 f940 	bl	8000b70 <__aeabi_fsub>
 80088f0:	4639      	mov	r1, r7
 80088f2:	f7f8 f93d 	bl	8000b70 <__aeabi_fsub>
 80088f6:	4607      	mov	r7, r0
 80088f8:	4950      	ldr	r1, [pc, #320]	; (8008a3c <__ieee754_rem_pio2f+0x2a0>)
 80088fa:	4648      	mov	r0, r9
 80088fc:	f7f8 fa42 	bl	8000d84 <__aeabi_fmul>
 8008900:	4639      	mov	r1, r7
 8008902:	f7f8 f935 	bl	8000b70 <__aeabi_fsub>
 8008906:	4601      	mov	r1, r0
 8008908:	4607      	mov	r7, r0
 800890a:	4630      	mov	r0, r6
 800890c:	f7f8 f930 	bl	8000b70 <__aeabi_fsub>
 8008910:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008914:	ebab 0b03 	sub.w	fp, fp, r3
 8008918:	f1bb 0f19 	cmp.w	fp, #25
 800891c:	dc16      	bgt.n	800894c <__ieee754_rem_pio2f+0x1b0>
 800891e:	46b0      	mov	r8, r6
 8008920:	6020      	str	r0, [r4, #0]
 8008922:	6826      	ldr	r6, [r4, #0]
 8008924:	4640      	mov	r0, r8
 8008926:	4631      	mov	r1, r6
 8008928:	f7f8 f922 	bl	8000b70 <__aeabi_fsub>
 800892c:	4639      	mov	r1, r7
 800892e:	f7f8 f91f 	bl	8000b70 <__aeabi_fsub>
 8008932:	f1ba 0f00 	cmp.w	sl, #0
 8008936:	6060      	str	r0, [r4, #4]
 8008938:	f6bf af5a 	bge.w	80087f0 <__ieee754_rem_pio2f+0x54>
 800893c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8008940:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008944:	6026      	str	r6, [r4, #0]
 8008946:	6060      	str	r0, [r4, #4]
 8008948:	426d      	negs	r5, r5
 800894a:	e751      	b.n	80087f0 <__ieee754_rem_pio2f+0x54>
 800894c:	493f      	ldr	r1, [pc, #252]	; (8008a4c <__ieee754_rem_pio2f+0x2b0>)
 800894e:	4648      	mov	r0, r9
 8008950:	f7f8 fa18 	bl	8000d84 <__aeabi_fmul>
 8008954:	4607      	mov	r7, r0
 8008956:	4601      	mov	r1, r0
 8008958:	4630      	mov	r0, r6
 800895a:	f7f8 f909 	bl	8000b70 <__aeabi_fsub>
 800895e:	4601      	mov	r1, r0
 8008960:	4680      	mov	r8, r0
 8008962:	4630      	mov	r0, r6
 8008964:	f7f8 f904 	bl	8000b70 <__aeabi_fsub>
 8008968:	4639      	mov	r1, r7
 800896a:	f7f8 f901 	bl	8000b70 <__aeabi_fsub>
 800896e:	4606      	mov	r6, r0
 8008970:	4937      	ldr	r1, [pc, #220]	; (8008a50 <__ieee754_rem_pio2f+0x2b4>)
 8008972:	4648      	mov	r0, r9
 8008974:	f7f8 fa06 	bl	8000d84 <__aeabi_fmul>
 8008978:	4631      	mov	r1, r6
 800897a:	f7f8 f8f9 	bl	8000b70 <__aeabi_fsub>
 800897e:	4607      	mov	r7, r0
 8008980:	e795      	b.n	80088ae <__ieee754_rem_pio2f+0x112>
 8008982:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008986:	db05      	blt.n	8008994 <__ieee754_rem_pio2f+0x1f8>
 8008988:	4601      	mov	r1, r0
 800898a:	f7f8 f8f1 	bl	8000b70 <__aeabi_fsub>
 800898e:	6060      	str	r0, [r4, #4]
 8008990:	6020      	str	r0, [r4, #0]
 8008992:	e710      	b.n	80087b6 <__ieee754_rem_pio2f+0x1a>
 8008994:	15f7      	asrs	r7, r6, #23
 8008996:	3f86      	subs	r7, #134	; 0x86
 8008998:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800899c:	4630      	mov	r0, r6
 800899e:	f7f8 fbb7 	bl	8001110 <__aeabi_f2iz>
 80089a2:	f7f8 f99b 	bl	8000cdc <__aeabi_i2f>
 80089a6:	4601      	mov	r1, r0
 80089a8:	9003      	str	r0, [sp, #12]
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7f8 f8e0 	bl	8000b70 <__aeabi_fsub>
 80089b0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80089b4:	f7f8 f9e6 	bl	8000d84 <__aeabi_fmul>
 80089b8:	4606      	mov	r6, r0
 80089ba:	f7f8 fba9 	bl	8001110 <__aeabi_f2iz>
 80089be:	f7f8 f98d 	bl	8000cdc <__aeabi_i2f>
 80089c2:	4601      	mov	r1, r0
 80089c4:	9004      	str	r0, [sp, #16]
 80089c6:	4605      	mov	r5, r0
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7f8 f8d1 	bl	8000b70 <__aeabi_fsub>
 80089ce:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80089d2:	f7f8 f9d7 	bl	8000d84 <__aeabi_fmul>
 80089d6:	2100      	movs	r1, #0
 80089d8:	9005      	str	r0, [sp, #20]
 80089da:	f7f8 fb67 	bl	80010ac <__aeabi_fcmpeq>
 80089de:	b1f0      	cbz	r0, 8008a1e <__ieee754_rem_pio2f+0x282>
 80089e0:	2100      	movs	r1, #0
 80089e2:	4628      	mov	r0, r5
 80089e4:	f7f8 fb62 	bl	80010ac <__aeabi_fcmpeq>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	bf14      	ite	ne
 80089ec:	2301      	movne	r3, #1
 80089ee:	2302      	moveq	r3, #2
 80089f0:	4a18      	ldr	r2, [pc, #96]	; (8008a54 <__ieee754_rem_pio2f+0x2b8>)
 80089f2:	4621      	mov	r1, r4
 80089f4:	9201      	str	r2, [sp, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	a803      	add	r0, sp, #12
 80089fa:	9200      	str	r2, [sp, #0]
 80089fc:	463a      	mov	r2, r7
 80089fe:	f000 f82f 	bl	8008a60 <__kernel_rem_pio2f>
 8008a02:	f1ba 0f00 	cmp.w	sl, #0
 8008a06:	4605      	mov	r5, r0
 8008a08:	f6bf aef2 	bge.w	80087f0 <__ieee754_rem_pio2f+0x54>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	6863      	ldr	r3, [r4, #4]
 8008a16:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a1a:	6063      	str	r3, [r4, #4]
 8008a1c:	e794      	b.n	8008948 <__ieee754_rem_pio2f+0x1ac>
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e7e6      	b.n	80089f0 <__ieee754_rem_pio2f+0x254>
 8008a22:	bf00      	nop
 8008a24:	3f490fd8 	.word	0x3f490fd8
 8008a28:	4016cbe3 	.word	0x4016cbe3
 8008a2c:	3fc90f80 	.word	0x3fc90f80
 8008a30:	3fc90fd0 	.word	0x3fc90fd0
 8008a34:	37354443 	.word	0x37354443
 8008a38:	37354400 	.word	0x37354400
 8008a3c:	2e85a308 	.word	0x2e85a308
 8008a40:	43490f80 	.word	0x43490f80
 8008a44:	3f22f984 	.word	0x3f22f984
 8008a48:	080094c4 	.word	0x080094c4
 8008a4c:	2e85a300 	.word	0x2e85a300
 8008a50:	248d3132 	.word	0x248d3132
 8008a54:	08009544 	.word	0x08009544

08008a58 <fabsf>:
 8008a58:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008a5c:	4770      	bx	lr
	...

08008a60 <__kernel_rem_pio2f>:
 8008a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	b0db      	sub	sp, #364	; 0x16c
 8008a66:	9202      	str	r2, [sp, #8]
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008a6c:	4bbb      	ldr	r3, [pc, #748]	; (8008d5c <__kernel_rem_pio2f+0x2fc>)
 8008a6e:	9005      	str	r0, [sp, #20]
 8008a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a74:	9100      	str	r1, [sp, #0]
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	9b04      	ldr	r3, [sp, #16]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	9303      	str	r3, [sp, #12]
 8008a7e:	9b02      	ldr	r3, [sp, #8]
 8008a80:	1d1a      	adds	r2, r3, #4
 8008a82:	f2c0 809b 	blt.w	8008bbc <__kernel_rem_pio2f+0x15c>
 8008a86:	1edc      	subs	r4, r3, #3
 8008a88:	bf48      	it	mi
 8008a8a:	1d1c      	addmi	r4, r3, #4
 8008a8c:	10e4      	asrs	r4, r4, #3
 8008a8e:	2500      	movs	r5, #0
 8008a90:	f04f 0b00 	mov.w	fp, #0
 8008a94:	1c67      	adds	r7, r4, #1
 8008a96:	00fb      	lsls	r3, r7, #3
 8008a98:	9306      	str	r3, [sp, #24]
 8008a9a:	9b02      	ldr	r3, [sp, #8]
 8008a9c:	9a03      	ldr	r2, [sp, #12]
 8008a9e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8008aa2:	9b01      	ldr	r3, [sp, #4]
 8008aa4:	eba4 0802 	sub.w	r8, r4, r2
 8008aa8:	eb03 0902 	add.w	r9, r3, r2
 8008aac:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8008aae:	ae1e      	add	r6, sp, #120	; 0x78
 8008ab0:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8008ab4:	454d      	cmp	r5, r9
 8008ab6:	f340 8083 	ble.w	8008bc0 <__kernel_rem_pio2f+0x160>
 8008aba:	9a04      	ldr	r2, [sp, #16]
 8008abc:	ab1e      	add	r3, sp, #120	; 0x78
 8008abe:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8008ac2:	f04f 0900 	mov.w	r9, #0
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8008acc:	9a01      	ldr	r2, [sp, #4]
 8008ace:	4591      	cmp	r9, r2
 8008ad0:	f340 809e 	ble.w	8008c10 <__kernel_rem_pio2f+0x1b0>
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	aa0a      	add	r2, sp, #40	; 0x28
 8008ad8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008adc:	9308      	str	r3, [sp, #32]
 8008ade:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8008ae0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008ae4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008ae8:	9307      	str	r3, [sp, #28]
 8008aea:	ac0a      	add	r4, sp, #40	; 0x28
 8008aec:	4626      	mov	r6, r4
 8008aee:	46c3      	mov	fp, r8
 8008af0:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8008af4:	ab5a      	add	r3, sp, #360	; 0x168
 8008af6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8008afa:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8008afe:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8008b02:	f1bb 0f00 	cmp.w	fp, #0
 8008b06:	f300 8088 	bgt.w	8008c1a <__kernel_rem_pio2f+0x1ba>
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f000 fa5b 	bl	8008fc8 <scalbnf>
 8008b12:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8008b16:	4605      	mov	r5, r0
 8008b18:	f7f8 f934 	bl	8000d84 <__aeabi_fmul>
 8008b1c:	f000 faa0 	bl	8009060 <floorf>
 8008b20:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8008b24:	f7f8 f92e 	bl	8000d84 <__aeabi_fmul>
 8008b28:	4601      	mov	r1, r0
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f7f8 f820 	bl	8000b70 <__aeabi_fsub>
 8008b30:	4605      	mov	r5, r0
 8008b32:	f7f8 faed 	bl	8001110 <__aeabi_f2iz>
 8008b36:	4606      	mov	r6, r0
 8008b38:	f7f8 f8d0 	bl	8000cdc <__aeabi_i2f>
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f7f8 f816 	bl	8000b70 <__aeabi_fsub>
 8008b44:	2f00      	cmp	r7, #0
 8008b46:	4681      	mov	r9, r0
 8008b48:	f340 8086 	ble.w	8008c58 <__kernel_rem_pio2f+0x1f8>
 8008b4c:	f108 32ff 	add.w	r2, r8, #4294967295
 8008b50:	ab0a      	add	r3, sp, #40	; 0x28
 8008b52:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8008b56:	f1c7 0108 	rsb	r1, r7, #8
 8008b5a:	fa45 f301 	asr.w	r3, r5, r1
 8008b5e:	441e      	add	r6, r3
 8008b60:	408b      	lsls	r3, r1
 8008b62:	1aed      	subs	r5, r5, r3
 8008b64:	ab0a      	add	r3, sp, #40	; 0x28
 8008b66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008b6a:	f1c7 0307 	rsb	r3, r7, #7
 8008b6e:	411d      	asrs	r5, r3
 8008b70:	2d00      	cmp	r5, #0
 8008b72:	dd7f      	ble.n	8008c74 <__kernel_rem_pio2f+0x214>
 8008b74:	2200      	movs	r2, #0
 8008b76:	4692      	mov	sl, r2
 8008b78:	3601      	adds	r6, #1
 8008b7a:	4590      	cmp	r8, r2
 8008b7c:	f300 80b0 	bgt.w	8008ce0 <__kernel_rem_pio2f+0x280>
 8008b80:	2f00      	cmp	r7, #0
 8008b82:	dd05      	ble.n	8008b90 <__kernel_rem_pio2f+0x130>
 8008b84:	2f01      	cmp	r7, #1
 8008b86:	f000 80bd 	beq.w	8008d04 <__kernel_rem_pio2f+0x2a4>
 8008b8a:	2f02      	cmp	r7, #2
 8008b8c:	f000 80c5 	beq.w	8008d1a <__kernel_rem_pio2f+0x2ba>
 8008b90:	2d02      	cmp	r5, #2
 8008b92:	d16f      	bne.n	8008c74 <__kernel_rem_pio2f+0x214>
 8008b94:	4649      	mov	r1, r9
 8008b96:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008b9a:	f7f7 ffe9 	bl	8000b70 <__aeabi_fsub>
 8008b9e:	4681      	mov	r9, r0
 8008ba0:	f1ba 0f00 	cmp.w	sl, #0
 8008ba4:	d066      	beq.n	8008c74 <__kernel_rem_pio2f+0x214>
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008bac:	f000 fa0c 	bl	8008fc8 <scalbnf>
 8008bb0:	4601      	mov	r1, r0
 8008bb2:	4648      	mov	r0, r9
 8008bb4:	f7f7 ffdc 	bl	8000b70 <__aeabi_fsub>
 8008bb8:	4681      	mov	r9, r0
 8008bba:	e05b      	b.n	8008c74 <__kernel_rem_pio2f+0x214>
 8008bbc:	2400      	movs	r4, #0
 8008bbe:	e766      	b.n	8008a8e <__kernel_rem_pio2f+0x2e>
 8008bc0:	eb18 0f05 	cmn.w	r8, r5
 8008bc4:	d407      	bmi.n	8008bd6 <__kernel_rem_pio2f+0x176>
 8008bc6:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8008bca:	f7f8 f887 	bl	8000cdc <__aeabi_i2f>
 8008bce:	f846 0b04 	str.w	r0, [r6], #4
 8008bd2:	3501      	adds	r5, #1
 8008bd4:	e76e      	b.n	8008ab4 <__kernel_rem_pio2f+0x54>
 8008bd6:	4658      	mov	r0, fp
 8008bd8:	e7f9      	b.n	8008bce <__kernel_rem_pio2f+0x16e>
 8008bda:	9307      	str	r3, [sp, #28]
 8008bdc:	9b05      	ldr	r3, [sp, #20]
 8008bde:	f8da 1000 	ldr.w	r1, [sl]
 8008be2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008be6:	f7f8 f8cd 	bl	8000d84 <__aeabi_fmul>
 8008bea:	4601      	mov	r1, r0
 8008bec:	4630      	mov	r0, r6
 8008bee:	f7f7 ffc1 	bl	8000b74 <__addsf3>
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	9b07      	ldr	r3, [sp, #28]
 8008bf6:	f108 0801 	add.w	r8, r8, #1
 8008bfa:	9a03      	ldr	r2, [sp, #12]
 8008bfc:	f1aa 0a04 	sub.w	sl, sl, #4
 8008c00:	4590      	cmp	r8, r2
 8008c02:	ddea      	ble.n	8008bda <__kernel_rem_pio2f+0x17a>
 8008c04:	f84b 6b04 	str.w	r6, [fp], #4
 8008c08:	f109 0901 	add.w	r9, r9, #1
 8008c0c:	3504      	adds	r5, #4
 8008c0e:	e75d      	b.n	8008acc <__kernel_rem_pio2f+0x6c>
 8008c10:	46aa      	mov	sl, r5
 8008c12:	461e      	mov	r6, r3
 8008c14:	f04f 0800 	mov.w	r8, #0
 8008c18:	e7ef      	b.n	8008bfa <__kernel_rem_pio2f+0x19a>
 8008c1a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f7f8 f8b0 	bl	8000d84 <__aeabi_fmul>
 8008c24:	f7f8 fa74 	bl	8001110 <__aeabi_f2iz>
 8008c28:	f7f8 f858 	bl	8000cdc <__aeabi_i2f>
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	9009      	str	r0, [sp, #36]	; 0x24
 8008c30:	f7f8 f8a8 	bl	8000d84 <__aeabi_fmul>
 8008c34:	4601      	mov	r1, r0
 8008c36:	4628      	mov	r0, r5
 8008c38:	f7f7 ff9a 	bl	8000b70 <__aeabi_fsub>
 8008c3c:	f7f8 fa68 	bl	8001110 <__aeabi_f2iz>
 8008c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c46:	f846 0b04 	str.w	r0, [r6], #4
 8008c4a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7f7 ff90 	bl	8000b74 <__addsf3>
 8008c54:	4605      	mov	r5, r0
 8008c56:	e754      	b.n	8008b02 <__kernel_rem_pio2f+0xa2>
 8008c58:	d106      	bne.n	8008c68 <__kernel_rem_pio2f+0x208>
 8008c5a:	f108 33ff 	add.w	r3, r8, #4294967295
 8008c5e:	aa0a      	add	r2, sp, #40	; 0x28
 8008c60:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8008c64:	11ed      	asrs	r5, r5, #7
 8008c66:	e783      	b.n	8008b70 <__kernel_rem_pio2f+0x110>
 8008c68:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008c6c:	f7f8 fa3c 	bl	80010e8 <__aeabi_fcmpge>
 8008c70:	4605      	mov	r5, r0
 8008c72:	bb98      	cbnz	r0, 8008cdc <__kernel_rem_pio2f+0x27c>
 8008c74:	2100      	movs	r1, #0
 8008c76:	4648      	mov	r0, r9
 8008c78:	f7f8 fa18 	bl	80010ac <__aeabi_fcmpeq>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	f000 8098 	beq.w	8008db2 <__kernel_rem_pio2f+0x352>
 8008c82:	f108 34ff 	add.w	r4, r8, #4294967295
 8008c86:	4623      	mov	r3, r4
 8008c88:	2200      	movs	r2, #0
 8008c8a:	9901      	ldr	r1, [sp, #4]
 8008c8c:	428b      	cmp	r3, r1
 8008c8e:	da4c      	bge.n	8008d2a <__kernel_rem_pio2f+0x2ca>
 8008c90:	2a00      	cmp	r2, #0
 8008c92:	d067      	beq.n	8008d64 <__kernel_rem_pio2f+0x304>
 8008c94:	ab0a      	add	r3, sp, #40	; 0x28
 8008c96:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008c9a:	3f08      	subs	r7, #8
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 8086 	beq.w	8008dae <__kernel_rem_pio2f+0x34e>
 8008ca2:	4639      	mov	r1, r7
 8008ca4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008ca8:	f000 f98e 	bl	8008fc8 <scalbnf>
 8008cac:	46a2      	mov	sl, r4
 8008cae:	4681      	mov	r9, r0
 8008cb0:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8008cb4:	af46      	add	r7, sp, #280	; 0x118
 8008cb6:	f1ba 0f00 	cmp.w	sl, #0
 8008cba:	f280 80af 	bge.w	8008e1c <__kernel_rem_pio2f+0x3bc>
 8008cbe:	4627      	mov	r7, r4
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2f00      	cmp	r7, #0
 8008cc4:	f2c0 80d9 	blt.w	8008e7a <__kernel_rem_pio2f+0x41a>
 8008cc8:	a946      	add	r1, sp, #280	; 0x118
 8008cca:	4690      	mov	r8, r2
 8008ccc:	f04f 0a00 	mov.w	sl, #0
 8008cd0:	4b23      	ldr	r3, [pc, #140]	; (8008d60 <__kernel_rem_pio2f+0x300>)
 8008cd2:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8008cd6:	eba4 0907 	sub.w	r9, r4, r7
 8008cda:	e0c2      	b.n	8008e62 <__kernel_rem_pio2f+0x402>
 8008cdc:	2502      	movs	r5, #2
 8008cde:	e749      	b.n	8008b74 <__kernel_rem_pio2f+0x114>
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	f1ba 0f00 	cmp.w	sl, #0
 8008ce6:	d108      	bne.n	8008cfa <__kernel_rem_pio2f+0x29a>
 8008ce8:	b11b      	cbz	r3, 8008cf2 <__kernel_rem_pio2f+0x292>
 8008cea:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008cee:	6023      	str	r3, [r4, #0]
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	469a      	mov	sl, r3
 8008cf4:	3201      	adds	r2, #1
 8008cf6:	3404      	adds	r4, #4
 8008cf8:	e73f      	b.n	8008b7a <__kernel_rem_pio2f+0x11a>
 8008cfa:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008cfe:	6023      	str	r3, [r4, #0]
 8008d00:	4653      	mov	r3, sl
 8008d02:	e7f6      	b.n	8008cf2 <__kernel_rem_pio2f+0x292>
 8008d04:	f108 32ff 	add.w	r2, r8, #4294967295
 8008d08:	ab0a      	add	r3, sp, #40	; 0x28
 8008d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d12:	a90a      	add	r1, sp, #40	; 0x28
 8008d14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008d18:	e73a      	b.n	8008b90 <__kernel_rem_pio2f+0x130>
 8008d1a:	f108 32ff 	add.w	r2, r8, #4294967295
 8008d1e:	ab0a      	add	r3, sp, #40	; 0x28
 8008d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d28:	e7f3      	b.n	8008d12 <__kernel_rem_pio2f+0x2b2>
 8008d2a:	a90a      	add	r1, sp, #40	; 0x28
 8008d2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	430a      	orrs	r2, r1
 8008d34:	e7a9      	b.n	8008c8a <__kernel_rem_pio2f+0x22a>
 8008d36:	3401      	adds	r4, #1
 8008d38:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008d3c:	2a00      	cmp	r2, #0
 8008d3e:	d0fa      	beq.n	8008d36 <__kernel_rem_pio2f+0x2d6>
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	aa1e      	add	r2, sp, #120	; 0x78
 8008d44:	4443      	add	r3, r8
 8008d46:	f108 0601 	add.w	r6, r8, #1
 8008d4a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008d4e:	4444      	add	r4, r8
 8008d50:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8008d54:	42b4      	cmp	r4, r6
 8008d56:	da08      	bge.n	8008d6a <__kernel_rem_pio2f+0x30a>
 8008d58:	46a0      	mov	r8, r4
 8008d5a:	e6c6      	b.n	8008aea <__kernel_rem_pio2f+0x8a>
 8008d5c:	08009888 	.word	0x08009888
 8008d60:	0800985c 	.word	0x0800985c
 8008d64:	2401      	movs	r4, #1
 8008d66:	9b08      	ldr	r3, [sp, #32]
 8008d68:	e7e6      	b.n	8008d38 <__kernel_rem_pio2f+0x2d8>
 8008d6a:	9b07      	ldr	r3, [sp, #28]
 8008d6c:	46ab      	mov	fp, r5
 8008d6e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008d72:	f7f7 ffb3 	bl	8000cdc <__aeabi_i2f>
 8008d76:	f04f 0a00 	mov.w	sl, #0
 8008d7a:	f04f 0800 	mov.w	r8, #0
 8008d7e:	6028      	str	r0, [r5, #0]
 8008d80:	9b03      	ldr	r3, [sp, #12]
 8008d82:	459a      	cmp	sl, r3
 8008d84:	dd04      	ble.n	8008d90 <__kernel_rem_pio2f+0x330>
 8008d86:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8008d8a:	3504      	adds	r5, #4
 8008d8c:	3601      	adds	r6, #1
 8008d8e:	e7e1      	b.n	8008d54 <__kernel_rem_pio2f+0x2f4>
 8008d90:	9b05      	ldr	r3, [sp, #20]
 8008d92:	f85b 0904 	ldr.w	r0, [fp], #-4
 8008d96:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8008d9a:	f7f7 fff3 	bl	8000d84 <__aeabi_fmul>
 8008d9e:	4601      	mov	r1, r0
 8008da0:	4640      	mov	r0, r8
 8008da2:	f7f7 fee7 	bl	8000b74 <__addsf3>
 8008da6:	f10a 0a01 	add.w	sl, sl, #1
 8008daa:	4680      	mov	r8, r0
 8008dac:	e7e8      	b.n	8008d80 <__kernel_rem_pio2f+0x320>
 8008dae:	3c01      	subs	r4, #1
 8008db0:	e770      	b.n	8008c94 <__kernel_rem_pio2f+0x234>
 8008db2:	9b06      	ldr	r3, [sp, #24]
 8008db4:	9a02      	ldr	r2, [sp, #8]
 8008db6:	4648      	mov	r0, r9
 8008db8:	1a99      	subs	r1, r3, r2
 8008dba:	f000 f905 	bl	8008fc8 <scalbnf>
 8008dbe:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	f7f8 f990 	bl	80010e8 <__aeabi_fcmpge>
 8008dc8:	b300      	cbz	r0, 8008e0c <__kernel_rem_pio2f+0x3ac>
 8008dca:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f7f7 ffd8 	bl	8000d84 <__aeabi_fmul>
 8008dd4:	f7f8 f99c 	bl	8001110 <__aeabi_f2iz>
 8008dd8:	f7f7 ff80 	bl	8000cdc <__aeabi_i2f>
 8008ddc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008de0:	4681      	mov	r9, r0
 8008de2:	f7f7 ffcf 	bl	8000d84 <__aeabi_fmul>
 8008de6:	4601      	mov	r1, r0
 8008de8:	4620      	mov	r0, r4
 8008dea:	f7f7 fec1 	bl	8000b70 <__aeabi_fsub>
 8008dee:	f7f8 f98f 	bl	8001110 <__aeabi_f2iz>
 8008df2:	ab0a      	add	r3, sp, #40	; 0x28
 8008df4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008df8:	4648      	mov	r0, r9
 8008dfa:	f7f8 f989 	bl	8001110 <__aeabi_f2iz>
 8008dfe:	f108 0401 	add.w	r4, r8, #1
 8008e02:	ab0a      	add	r3, sp, #40	; 0x28
 8008e04:	3708      	adds	r7, #8
 8008e06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008e0a:	e74a      	b.n	8008ca2 <__kernel_rem_pio2f+0x242>
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f7f8 f97f 	bl	8001110 <__aeabi_f2iz>
 8008e12:	ab0a      	add	r3, sp, #40	; 0x28
 8008e14:	4644      	mov	r4, r8
 8008e16:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008e1a:	e742      	b.n	8008ca2 <__kernel_rem_pio2f+0x242>
 8008e1c:	ab0a      	add	r3, sp, #40	; 0x28
 8008e1e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008e22:	f7f7 ff5b 	bl	8000cdc <__aeabi_i2f>
 8008e26:	4649      	mov	r1, r9
 8008e28:	f7f7 ffac 	bl	8000d84 <__aeabi_fmul>
 8008e2c:	4641      	mov	r1, r8
 8008e2e:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8008e32:	4648      	mov	r0, r9
 8008e34:	f7f7 ffa6 	bl	8000d84 <__aeabi_fmul>
 8008e38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e3c:	4681      	mov	r9, r0
 8008e3e:	e73a      	b.n	8008cb6 <__kernel_rem_pio2f+0x256>
 8008e40:	f853 0b04 	ldr.w	r0, [r3], #4
 8008e44:	f85b 1b04 	ldr.w	r1, [fp], #4
 8008e48:	9203      	str	r2, [sp, #12]
 8008e4a:	9302      	str	r3, [sp, #8]
 8008e4c:	f7f7 ff9a 	bl	8000d84 <__aeabi_fmul>
 8008e50:	4601      	mov	r1, r0
 8008e52:	4640      	mov	r0, r8
 8008e54:	f7f7 fe8e 	bl	8000b74 <__addsf3>
 8008e58:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008e5c:	4680      	mov	r8, r0
 8008e5e:	f10a 0a01 	add.w	sl, sl, #1
 8008e62:	9901      	ldr	r1, [sp, #4]
 8008e64:	458a      	cmp	sl, r1
 8008e66:	dc01      	bgt.n	8008e6c <__kernel_rem_pio2f+0x40c>
 8008e68:	45ca      	cmp	sl, r9
 8008e6a:	dde9      	ble.n	8008e40 <__kernel_rem_pio2f+0x3e0>
 8008e6c:	ab5a      	add	r3, sp, #360	; 0x168
 8008e6e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8008e72:	f849 8ca0 	str.w	r8, [r9, #-160]
 8008e76:	3f01      	subs	r7, #1
 8008e78:	e723      	b.n	8008cc2 <__kernel_rem_pio2f+0x262>
 8008e7a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	dc07      	bgt.n	8008e90 <__kernel_rem_pio2f+0x430>
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	dc4e      	bgt.n	8008f22 <__kernel_rem_pio2f+0x4c2>
 8008e84:	d02e      	beq.n	8008ee4 <__kernel_rem_pio2f+0x484>
 8008e86:	f006 0007 	and.w	r0, r6, #7
 8008e8a:	b05b      	add	sp, #364	; 0x16c
 8008e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e90:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008e92:	2b03      	cmp	r3, #3
 8008e94:	d1f7      	bne.n	8008e86 <__kernel_rem_pio2f+0x426>
 8008e96:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8008e9a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8008e9e:	46b8      	mov	r8, r7
 8008ea0:	46a2      	mov	sl, r4
 8008ea2:	f1ba 0f00 	cmp.w	sl, #0
 8008ea6:	dc49      	bgt.n	8008f3c <__kernel_rem_pio2f+0x4dc>
 8008ea8:	46a1      	mov	r9, r4
 8008eaa:	f1b9 0f01 	cmp.w	r9, #1
 8008eae:	dc60      	bgt.n	8008f72 <__kernel_rem_pio2f+0x512>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	2c01      	cmp	r4, #1
 8008eb4:	dc76      	bgt.n	8008fa4 <__kernel_rem_pio2f+0x544>
 8008eb6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8008eb8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8008eba:	2d00      	cmp	r5, #0
 8008ebc:	d178      	bne.n	8008fb0 <__kernel_rem_pio2f+0x550>
 8008ebe:	9900      	ldr	r1, [sp, #0]
 8008ec0:	600a      	str	r2, [r1, #0]
 8008ec2:	460a      	mov	r2, r1
 8008ec4:	604b      	str	r3, [r1, #4]
 8008ec6:	6090      	str	r0, [r2, #8]
 8008ec8:	e7dd      	b.n	8008e86 <__kernel_rem_pio2f+0x426>
 8008eca:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8008ece:	f7f7 fe51 	bl	8000b74 <__addsf3>
 8008ed2:	3c01      	subs	r4, #1
 8008ed4:	2c00      	cmp	r4, #0
 8008ed6:	daf8      	bge.n	8008eca <__kernel_rem_pio2f+0x46a>
 8008ed8:	b10d      	cbz	r5, 8008ede <__kernel_rem_pio2f+0x47e>
 8008eda:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008ede:	9b00      	ldr	r3, [sp, #0]
 8008ee0:	6018      	str	r0, [r3, #0]
 8008ee2:	e7d0      	b.n	8008e86 <__kernel_rem_pio2f+0x426>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	af32      	add	r7, sp, #200	; 0xc8
 8008ee8:	e7f4      	b.n	8008ed4 <__kernel_rem_pio2f+0x474>
 8008eea:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8008eee:	f7f7 fe41 	bl	8000b74 <__addsf3>
 8008ef2:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ef6:	f1b8 0f00 	cmp.w	r8, #0
 8008efa:	daf6      	bge.n	8008eea <__kernel_rem_pio2f+0x48a>
 8008efc:	b1ad      	cbz	r5, 8008f2a <__kernel_rem_pio2f+0x4ca>
 8008efe:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8008f02:	9a00      	ldr	r2, [sp, #0]
 8008f04:	4601      	mov	r1, r0
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8008f0a:	f7f7 fe31 	bl	8000b70 <__aeabi_fsub>
 8008f0e:	f04f 0801 	mov.w	r8, #1
 8008f12:	4544      	cmp	r4, r8
 8008f14:	da0b      	bge.n	8008f2e <__kernel_rem_pio2f+0x4ce>
 8008f16:	b10d      	cbz	r5, 8008f1c <__kernel_rem_pio2f+0x4bc>
 8008f18:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008f1c:	9b00      	ldr	r3, [sp, #0]
 8008f1e:	6058      	str	r0, [r3, #4]
 8008f20:	e7b1      	b.n	8008e86 <__kernel_rem_pio2f+0x426>
 8008f22:	46a0      	mov	r8, r4
 8008f24:	2000      	movs	r0, #0
 8008f26:	af32      	add	r7, sp, #200	; 0xc8
 8008f28:	e7e5      	b.n	8008ef6 <__kernel_rem_pio2f+0x496>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	e7e9      	b.n	8008f02 <__kernel_rem_pio2f+0x4a2>
 8008f2e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8008f32:	f7f7 fe1f 	bl	8000b74 <__addsf3>
 8008f36:	f108 0801 	add.w	r8, r8, #1
 8008f3a:	e7ea      	b.n	8008f12 <__kernel_rem_pio2f+0x4b2>
 8008f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f40:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8008f44:	4619      	mov	r1, r3
 8008f46:	4610      	mov	r0, r2
 8008f48:	9302      	str	r3, [sp, #8]
 8008f4a:	9201      	str	r2, [sp, #4]
 8008f4c:	f7f7 fe12 	bl	8000b74 <__addsf3>
 8008f50:	9a01      	ldr	r2, [sp, #4]
 8008f52:	4601      	mov	r1, r0
 8008f54:	4681      	mov	r9, r0
 8008f56:	4610      	mov	r0, r2
 8008f58:	f7f7 fe0a 	bl	8000b70 <__aeabi_fsub>
 8008f5c:	9b02      	ldr	r3, [sp, #8]
 8008f5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f62:	4619      	mov	r1, r3
 8008f64:	f7f7 fe06 	bl	8000b74 <__addsf3>
 8008f68:	f848 0904 	str.w	r0, [r8], #-4
 8008f6c:	f8c8 9000 	str.w	r9, [r8]
 8008f70:	e797      	b.n	8008ea2 <__kernel_rem_pio2f+0x442>
 8008f72:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8008f76:	f8d7 a000 	ldr.w	sl, [r7]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	4651      	mov	r1, sl
 8008f7e:	9301      	str	r3, [sp, #4]
 8008f80:	f7f7 fdf8 	bl	8000b74 <__addsf3>
 8008f84:	9b01      	ldr	r3, [sp, #4]
 8008f86:	4601      	mov	r1, r0
 8008f88:	4680      	mov	r8, r0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7f7 fdf0 	bl	8000b70 <__aeabi_fsub>
 8008f90:	4651      	mov	r1, sl
 8008f92:	f7f7 fdef 	bl	8000b74 <__addsf3>
 8008f96:	f847 0904 	str.w	r0, [r7], #-4
 8008f9a:	f109 39ff 	add.w	r9, r9, #4294967295
 8008f9e:	f8c7 8000 	str.w	r8, [r7]
 8008fa2:	e782      	b.n	8008eaa <__kernel_rem_pio2f+0x44a>
 8008fa4:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8008fa8:	f7f7 fde4 	bl	8000b74 <__addsf3>
 8008fac:	3c01      	subs	r4, #1
 8008fae:	e780      	b.n	8008eb2 <__kernel_rem_pio2f+0x452>
 8008fb0:	9900      	ldr	r1, [sp, #0]
 8008fb2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8008fb6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008fba:	600a      	str	r2, [r1, #0]
 8008fbc:	604b      	str	r3, [r1, #4]
 8008fbe:	460a      	mov	r2, r1
 8008fc0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008fc4:	e77f      	b.n	8008ec6 <__kernel_rem_pio2f+0x466>
 8008fc6:	bf00      	nop

08008fc8 <scalbnf>:
 8008fc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	4603      	mov	r3, r0
 8008fd0:	460d      	mov	r5, r1
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	d02e      	beq.n	8009034 <scalbnf+0x6c>
 8008fd6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008fda:	d304      	bcc.n	8008fe6 <scalbnf+0x1e>
 8008fdc:	4601      	mov	r1, r0
 8008fde:	f7f7 fdc9 	bl	8000b74 <__addsf3>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	e026      	b.n	8009034 <scalbnf+0x6c>
 8008fe6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8008fea:	d118      	bne.n	800901e <scalbnf+0x56>
 8008fec:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8008ff0:	f7f7 fec8 	bl	8000d84 <__aeabi_fmul>
 8008ff4:	4a17      	ldr	r2, [pc, #92]	; (8009054 <scalbnf+0x8c>)
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	4295      	cmp	r5, r2
 8008ffa:	db0c      	blt.n	8009016 <scalbnf+0x4e>
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009002:	3a19      	subs	r2, #25
 8009004:	f24c 3150 	movw	r1, #50000	; 0xc350
 8009008:	428d      	cmp	r5, r1
 800900a:	dd0a      	ble.n	8009022 <scalbnf+0x5a>
 800900c:	4912      	ldr	r1, [pc, #72]	; (8009058 <scalbnf+0x90>)
 800900e:	4618      	mov	r0, r3
 8009010:	f361 001e 	bfi	r0, r1, #0, #31
 8009014:	e000      	b.n	8009018 <scalbnf+0x50>
 8009016:	4911      	ldr	r1, [pc, #68]	; (800905c <scalbnf+0x94>)
 8009018:	f7f7 feb4 	bl	8000d84 <__aeabi_fmul>
 800901c:	e7e1      	b.n	8008fe2 <scalbnf+0x1a>
 800901e:	0dd2      	lsrs	r2, r2, #23
 8009020:	e7f0      	b.n	8009004 <scalbnf+0x3c>
 8009022:	1951      	adds	r1, r2, r5
 8009024:	29fe      	cmp	r1, #254	; 0xfe
 8009026:	dcf1      	bgt.n	800900c <scalbnf+0x44>
 8009028:	2900      	cmp	r1, #0
 800902a:	dd05      	ble.n	8009038 <scalbnf+0x70>
 800902c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8009030:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8009034:	4618      	mov	r0, r3
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	f111 0f16 	cmn.w	r1, #22
 800903c:	da01      	bge.n	8009042 <scalbnf+0x7a>
 800903e:	4907      	ldr	r1, [pc, #28]	; (800905c <scalbnf+0x94>)
 8009040:	e7e5      	b.n	800900e <scalbnf+0x46>
 8009042:	f101 0019 	add.w	r0, r1, #25
 8009046:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800904a:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800904e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8009052:	e7e1      	b.n	8009018 <scalbnf+0x50>
 8009054:	ffff3cb0 	.word	0xffff3cb0
 8009058:	7149f2ca 	.word	0x7149f2ca
 800905c:	0da24260 	.word	0x0da24260

08009060 <floorf>:
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009066:	3d7f      	subs	r5, #127	; 0x7f
 8009068:	2d16      	cmp	r5, #22
 800906a:	4601      	mov	r1, r0
 800906c:	4604      	mov	r4, r0
 800906e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009072:	dc25      	bgt.n	80090c0 <floorf+0x60>
 8009074:	2d00      	cmp	r5, #0
 8009076:	da0e      	bge.n	8009096 <floorf+0x36>
 8009078:	4916      	ldr	r1, [pc, #88]	; (80090d4 <floorf+0x74>)
 800907a:	f7f7 fd7b 	bl	8000b74 <__addsf3>
 800907e:	2100      	movs	r1, #0
 8009080:	f7f8 f83c 	bl	80010fc <__aeabi_fcmpgt>
 8009084:	b128      	cbz	r0, 8009092 <floorf+0x32>
 8009086:	2c00      	cmp	r4, #0
 8009088:	da22      	bge.n	80090d0 <floorf+0x70>
 800908a:	4b13      	ldr	r3, [pc, #76]	; (80090d8 <floorf+0x78>)
 800908c:	2e00      	cmp	r6, #0
 800908e:	bf18      	it	ne
 8009090:	461c      	movne	r4, r3
 8009092:	4621      	mov	r1, r4
 8009094:	e01a      	b.n	80090cc <floorf+0x6c>
 8009096:	4e11      	ldr	r6, [pc, #68]	; (80090dc <floorf+0x7c>)
 8009098:	412e      	asrs	r6, r5
 800909a:	4230      	tst	r0, r6
 800909c:	d016      	beq.n	80090cc <floorf+0x6c>
 800909e:	490d      	ldr	r1, [pc, #52]	; (80090d4 <floorf+0x74>)
 80090a0:	f7f7 fd68 	bl	8000b74 <__addsf3>
 80090a4:	2100      	movs	r1, #0
 80090a6:	f7f8 f829 	bl	80010fc <__aeabi_fcmpgt>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d0f1      	beq.n	8009092 <floorf+0x32>
 80090ae:	2c00      	cmp	r4, #0
 80090b0:	bfbe      	ittt	lt
 80090b2:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80090b6:	412b      	asrlt	r3, r5
 80090b8:	18e4      	addlt	r4, r4, r3
 80090ba:	ea24 0406 	bic.w	r4, r4, r6
 80090be:	e7e8      	b.n	8009092 <floorf+0x32>
 80090c0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80090c4:	d302      	bcc.n	80090cc <floorf+0x6c>
 80090c6:	f7f7 fd55 	bl	8000b74 <__addsf3>
 80090ca:	4601      	mov	r1, r0
 80090cc:	4608      	mov	r0, r1
 80090ce:	bd70      	pop	{r4, r5, r6, pc}
 80090d0:	2400      	movs	r4, #0
 80090d2:	e7de      	b.n	8009092 <floorf+0x32>
 80090d4:	7149f2ca 	.word	0x7149f2ca
 80090d8:	bf800000 	.word	0xbf800000
 80090dc:	007fffff 	.word	0x007fffff

080090e0 <_init>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr

080090ec <_fini>:
 80090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ee:	bf00      	nop
 80090f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f2:	bc08      	pop	{r3}
 80090f4:	469e      	mov	lr, r3
 80090f6:	4770      	bx	lr
