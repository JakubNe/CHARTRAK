
CHARTRAK2v3_controllerRETARGETED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007cc  0800a1f8  0800a1f8  0001a1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9c4  0800a9c4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9c4  0800a9c4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9c4  0800a9c4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9c4  0800a9c4  0001a9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9c8  0800a9c8  0001a9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200001f0  0800abb8  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  0800abb8  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e22  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ef1  00000000  00000000  0003107a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  00033f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b79  00000000  00000000  00034e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a076  00000000  00000000  000359c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014943  00000000  00000000  0004fa3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e412  00000000  00000000  00064382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051a8  00000000  00000000  000f2794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f793c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a1dc 	.word	0x0800a1dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800a1dc 	.word	0x0800a1dc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b093      	sub	sp, #76	; 0x4c
 8001174:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001176:	f000 fdc1 	bl	8001cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117a:	f000 f8eb 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117e:	f000 fa11 	bl	80015a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001182:	f000 f943 	bl	800140c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001186:	f000 f97f 	bl	8001488 <MX_I2C1_Init>
  MX_SPI1_Init();
 800118a:	f000 f9ab 	bl	80014e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800118e:	f000 f9df 	bl	8001550 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  	//GPIO SETUP
    HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001198:	485b      	ldr	r0, [pc, #364]	; (8001308 <main+0x198>)
 800119a:	f001 fba2 	bl	80028e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 800119e:	2201      	movs	r2, #1
 80011a0:	2110      	movs	r1, #16
 80011a2:	485a      	ldr	r0, [pc, #360]	; (800130c <main+0x19c>)
 80011a4:	f001 fb9d 	bl	80028e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ae:	4856      	ldr	r0, [pc, #344]	; (8001308 <main+0x198>)
 80011b0:	f001 fb97 	bl	80028e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, Voltage_output);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ba:	4855      	ldr	r0, [pc, #340]	; (8001310 <main+0x1a0>)
 80011bc:	f001 fb91 	bl	80028e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2120      	movs	r1, #32
 80011c4:	4852      	ldr	r0, [pc, #328]	; (8001310 <main+0x1a0>)
 80011c6:	f001 fb8c 	bl	80028e2 <HAL_GPIO_WritePin>

    // ADC board expander setup
    TCA_Init(0b0100001, hi2c1);
 80011ca:	4c52      	ldr	r4, [pc, #328]	; (8001314 <main+0x1a4>)
 80011cc:	4668      	mov	r0, sp
 80011ce:	f104 030c 	add.w	r3, r4, #12
 80011d2:	2248      	movs	r2, #72	; 0x48
 80011d4:	4619      	mov	r1, r3
 80011d6:	f006 fa7e 	bl	80076d6 <memcpy>
 80011da:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80011de:	2021      	movs	r0, #33	; 0x21
 80011e0:	f005 f9a6 	bl	8006530 <TCA_Init>

    TCA_PinMode(P07, 0);
 80011e4:	2100      	movs	r1, #0
 80011e6:	2007      	movs	r0, #7
 80011e8:	f005 f9c8 	bl	800657c <TCA_PinMode>
    TCA_PinMode(P11, 0);
 80011ec:	2100      	movs	r1, #0
 80011ee:	2009      	movs	r0, #9
 80011f0:	f005 f9c4 	bl	800657c <TCA_PinMode>
    TCA_PinMode(P12, 0);
 80011f4:	2100      	movs	r1, #0
 80011f6:	200a      	movs	r0, #10
 80011f8:	f005 f9c0 	bl	800657c <TCA_PinMode>

    TCA_WritePin(P07, 1);
 80011fc:	2101      	movs	r1, #1
 80011fe:	2007      	movs	r0, #7
 8001200:	f005 fa14 	bl	800662c <TCA_WritePin>
    TCA_WritePin(P11, 0);
 8001204:	2100      	movs	r1, #0
 8001206:	2009      	movs	r0, #9
 8001208:	f005 fa10 	bl	800662c <TCA_WritePin>
    TCA_WritePin(P12, 0);
 800120c:	2100      	movs	r1, #0
 800120e:	200a      	movs	r0, #10
 8001210:	f005 fa0c 	bl	800662c <TCA_WritePin>

    // High-speed DAC setup
    DACREF(0.0);
 8001214:	f04f 0000 	mov.w	r0, #0
 8001218:	f004 fda4 	bl	8005d64 <DACREF>
    DACOFFS(0.0);
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	f004 fe00 	bl	8005e24 <DACOFFS>

    // High-speed ADC setup
    ADCREF(2.0);
 8001224:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001228:	f004 fe64 	bl	8005ef4 <ADCREF>
    ADCOFFS(0.0);
 800122c:	f04f 0000 	mov.w	r0, #0
 8001230:	f004 febc 	bl	8005fac <ADCOFFS>

    // RS485 receive interrupt setup
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 8001234:	2220      	movs	r2, #32
 8001236:	4938      	ldr	r1, [pc, #224]	; (8001318 <main+0x1a8>)
 8001238:	4838      	ldr	r0, [pc, #224]	; (800131c <main+0x1ac>)
 800123a:	f003 fb38 	bl	80048ae <HAL_UARTEx_ReceiveToIdle_IT>

    //SCPI setup
    addFunction("LOLA", SCPIC_LOLA);
 800123e:	4938      	ldr	r1, [pc, #224]	; (8001320 <main+0x1b0>)
 8001240:	4838      	ldr	r0, [pc, #224]	; (8001324 <main+0x1b4>)
 8001242:	f005 f925 	bl	8006490 <addFunction>

    //SPARTAN3 SETUP

    LOLA1.Config = JTAG;
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <main+0x1b8>)
 8001248:	2206      	movs	r2, #6
 800124a:	705a      	strb	r2, [r3, #1]
    LOLA1.Trials = 10;
 800124c:	4b36      	ldr	r3, [pc, #216]	; (8001328 <main+0x1b8>)
 800124e:	220a      	movs	r2, #10
 8001250:	805a      	strh	r2, [r3, #2]
    LOLA1.compatibleFirmwareID = 0xF103;
 8001252:	4b35      	ldr	r3, [pc, #212]	; (8001328 <main+0x1b8>)
 8001254:	f24f 1203 	movw	r2, #61699	; 0xf103
 8001258:	809a      	strh	r2, [r3, #4]

    RS485_Transmit("awaiting FPGA config\r\n");
 800125a:	4834      	ldr	r0, [pc, #208]	; (800132c <main+0x1bc>)
 800125c:	f004 ff0e 	bl	800607c <RS485_Transmit>
    LOLA_Init(LOLA1);
 8001260:	4b31      	ldr	r3, [pc, #196]	; (8001328 <main+0x1b8>)
 8001262:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001266:	f004 fbfd 	bl	8005a64 <LOLA_Init>
    RS485_Transmit("FPGA config done\r\n");
 800126a:	4831      	ldr	r0, [pc, #196]	; (8001330 <main+0x1c0>)
 800126c:	f004 ff06 	bl	800607c <RS485_Transmit>

    //CharTrak setup
    CHT1.Enable = 0;
 8001270:	4b30      	ldr	r3, [pc, #192]	; (8001334 <main+0x1c4>)
 8001272:	2200      	movs	r2, #0
 8001274:	705a      	strb	r2, [r3, #1]
    CHT1.characteristic = Open;
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <main+0x1c4>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
    CHT1.Upp = 0;
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <main+0x1c4>)
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	605a      	str	r2, [r3, #4]

    // Arbitrary waveform generator setup
    AWG1.Enable = 0;
 8001284:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <main+0x1c8>)
 8001286:	2200      	movs	r2, #0
 8001288:	705a      	strb	r2, [r3, #1]
    AWG1.waveform = Sine;
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <main+0x1c8>)
 800128c:	2202      	movs	r2, #2
 800128e:	701a      	strb	r2, [r3, #0]
    AWG1.Uavg = 0.0;
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <main+0x1c8>)
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
    AWG1.Upp = 5.0;
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <main+0x1c8>)
 800129a:	4a28      	ldr	r2, [pc, #160]	; (800133c <main+0x1cc>)
 800129c:	609a      	str	r2, [r3, #8]
    AWG1.DutyCycle = 20.0;
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <main+0x1c8>)
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <main+0x1d0>)
 80012a2:	60da      	str	r2, [r3, #12]
    AWG1.Freq = 100.0;
 80012a4:	4924      	ldr	r1, [pc, #144]	; (8001338 <main+0x1c8>)
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <main+0x1d4>)
 80012ac:	e9c1 2304 	strd	r2, r3, [r1, #16]

    // Noise generator setup
    NOISE1.Enable = 0;
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <main+0x1d8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
    NOISE1.Freq = 10000.0;
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <main+0x1d8>)
 80012b8:	4a24      	ldr	r2, [pc, #144]	; (800134c <main+0x1dc>)
 80012ba:	609a      	str	r2, [r3, #8]
    NOISE1.Upp = 1.0;
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <main+0x1d8>)
 80012be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012c2:	605a      	str	r2, [r3, #4]
    NOISE1.Seed = 0x800f000f000f0001;
 80012c4:	4920      	ldr	r1, [pc, #128]	; (8001348 <main+0x1d8>)
 80012c6:	a30e      	add	r3, pc, #56	; (adr r3, 8001300 <main+0x190>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	e9c1 2304 	strd	r2, r3, [r1, #16]

    LOLA_enable_features(ALL_EN, 0); // disable all features
 80012d0:	2100      	movs	r1, #0
 80012d2:	f04f 30ff 	mov.w	r0, #4294967295
 80012d6:	f004 fc37 	bl	8005b48 <LOLA_enable_features>
    LOLA_SET_MAX_AMPLITUDE(6.0);
 80012da:	481d      	ldr	r0, [pc, #116]	; (8001350 <main+0x1e0>)
 80012dc:	f004 fcd0 	bl	8005c80 <LOLA_SET_MAX_AMPLITUDE>
    DAC_DIRECT_DATA(0.0);
 80012e0:	f04f 0000 	mov.w	r0, #0
 80012e4:	f004 fcf6 	bl	8005cd4 <DAC_DIRECT_DATA>
    AWG_Load_Waveform(AWG1);
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <main+0x1c8>)
 80012ea:	466c      	mov	r4, sp
 80012ec:	f103 0210 	add.w	r2, r3, #16
 80012f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80012f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fa:	f004 f8b5 	bl	8005468 <AWG_Load_Waveform>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <main+0x18e>
 8001300:	000f0001 	.word	0x000f0001
 8001304:	800f000f 	.word	0x800f000f
 8001308:	40011000 	.word	0x40011000
 800130c:	40010800 	.word	0x40010800
 8001310:	40010c00 	.word	0x40010c00
 8001314:	2000023c 	.word	0x2000023c
 8001318:	200003a4 	.word	0x200003a4
 800131c:	200002e8 	.word	0x200002e8
 8001320:	080060bd 	.word	0x080060bd
 8001324:	0800a1f8 	.word	0x0800a1f8
 8001328:	20000368 	.word	0x20000368
 800132c:	0800a200 	.word	0x0800a200
 8001330:	0800a218 	.word	0x0800a218
 8001334:	20000360 	.word	0x20000360
 8001338:	20000330 	.word	0x20000330
 800133c:	40a00000 	.word	0x40a00000
 8001340:	41a00000 	.word	0x41a00000
 8001344:	40590000 	.word	0x40590000
 8001348:	20000348 	.word	0x20000348
 800134c:	461c4000 	.word	0x461c4000
 8001350:	40c00000 	.word	0x40c00000

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	; 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	2228      	movs	r2, #40	; 0x28
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f006 f8f5 	bl	8007552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001384:	2301      	movs	r3, #1
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001392:	2301      	movs	r3, #1
 8001394:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001396:	2302      	movs	r3, #2
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 ff5e 	bl	800326c <HAL_RCC_OscConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013b6:	f000 fa13 	bl	80017e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ba:	230f      	movs	r3, #15
 80013bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2101      	movs	r1, #1
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 f9ca 	bl	8003770 <HAL_RCC_ClockConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013e2:	f000 f9fd 	bl	80017e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013e6:	2302      	movs	r3, #2
 80013e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80013ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fb4a 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013fe:	f000 f9ef 	bl	80017e0 <Error_Handler>
  }
}
 8001402:	bf00      	nop
 8001404:	3750      	adds	r7, #80	; 0x50
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_ADC1_Init+0x74>)
 800141e:	4a19      	ldr	r2, [pc, #100]	; (8001484 <MX_ADC1_Init+0x78>)
 8001420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_ADC1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_ADC1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_ADC1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_ADC1_Init+0x74>)
 8001436:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800143a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_ADC1_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_ADC1_Init+0x74>)
 8001444:	2201      	movs	r2, #1
 8001446:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_ADC1_Init+0x74>)
 800144a:	f000 fcdd 	bl	8001e08 <HAL_ADC_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001454:	f000 f9c4 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800145c:	2301      	movs	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_ADC1_Init+0x74>)
 800146a:	f000 fda5 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001474:	f000 f9b4 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000020c 	.word	0x2000020c
 8001484:	40012400 	.word	0x40012400

08001488 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_I2C1_Init+0x50>)
 800148e:	4a13      	ldr	r2, [pc, #76]	; (80014dc <MX_I2C1_Init+0x54>)
 8001490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_I2C1_Init+0x50>)
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <MX_I2C1_Init+0x58>)
 8001496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014c6:	f001 fa25 	bl	8002914 <HAL_I2C_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d0:	f000 f986 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000023c 	.word	0x2000023c
 80014dc:	40005400 	.word	0x40005400
 80014e0:	000186a0 	.word	0x000186a0

080014e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MX_SPI1_Init+0x64>)
 80014ea:	4a18      	ldr	r2, [pc, #96]	; (800154c <MX_SPI1_Init+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <MX_SPI1_Init+0x64>)
 80014f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_SPI1_Init+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_SPI1_Init+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_SPI1_Init+0x64>)
 8001504:	2202      	movs	r2, #2
 8001506:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_SPI1_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_SPI1_Init+0x64>)
 8001510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001514:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_SPI1_Init+0x64>)
 8001518:	2228      	movs	r2, #40	; 0x28
 800151a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <MX_SPI1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_SPI1_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <MX_SPI1_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_SPI1_Init+0x64>)
 8001530:	220a      	movs	r2, #10
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_SPI1_Init+0x64>)
 8001536:	f002 fb5f 	bl	8003bf8 <HAL_SPI_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001540:	f000 f94e 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000290 	.word	0x20000290
 800154c:	40013000 	.word	0x40013000

08001550 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_USART1_UART_Init+0x4c>)
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <MX_USART1_UART_Init+0x50>)
 8001558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <MX_USART1_UART_Init+0x4c>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_USART1_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_USART1_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <MX_USART1_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_USART1_UART_Init+0x4c>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <MX_USART1_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_USART1_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_USART1_UART_Init+0x4c>)
 8001588:	f003 f8be 	bl	8004708 <HAL_UART_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001592:	f000 f925 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200002e8 	.word	0x200002e8
 80015a0:	40013800 	.word	0x40013800

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b8:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <MX_GPIO_Init+0x144>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a4a      	ldr	r2, [pc, #296]	; (80016e8 <MX_GPIO_Init+0x144>)
 80015be:	f043 0310 	orr.w	r3, r3, #16
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <MX_GPIO_Init+0x144>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d0:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <MX_GPIO_Init+0x144>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a44      	ldr	r2, [pc, #272]	; (80016e8 <MX_GPIO_Init+0x144>)
 80015d6:	f043 0320 	orr.w	r3, r3, #32
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <MX_GPIO_Init+0x144>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <MX_GPIO_Init+0x144>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a3e      	ldr	r2, [pc, #248]	; (80016e8 <MX_GPIO_Init+0x144>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <MX_GPIO_Init+0x144>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <MX_GPIO_Init+0x144>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a38      	ldr	r2, [pc, #224]	; (80016e8 <MX_GPIO_Init+0x144>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <MX_GPIO_Init+0x144>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_DACS_Pin|LDAC_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800161e:	4833      	ldr	r0, [pc, #204]	; (80016ec <MX_GPIO_Init+0x148>)
 8001620:	f001 f95f 	bl	80028e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	211e      	movs	r1, #30
 8001628:	4831      	ldr	r0, [pc, #196]	; (80016f0 <MX_GPIO_Init+0x14c>)
 800162a:	f001 f95a 	bl	80028e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 800162e:	2200      	movs	r2, #0
 8001630:	f24f 4127 	movw	r1, #62503	; 0xf427
 8001634:	482f      	ldr	r0, [pc, #188]	; (80016f4 <MX_GPIO_Init+0x150>)
 8001636:	f001 f954 	bl	80028e2 <HAL_GPIO_WritePin>
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SPI1_DACS_Pin LDAC_Pin */
  GPIO_InitStruct.Pin = SPI1_DACS_Pin|LDAC_Pin;
 800163a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800163e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2302      	movs	r3, #2
 800164a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	4619      	mov	r1, r3
 8001652:	4826      	ldr	r0, [pc, #152]	; (80016ec <MX_GPIO_Init+0x148>)
 8001654:	f000 ffaa 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VselC0_Pin VselC1_Pin PROGB_Pin SPI1_FPGAS_Pin */
  GPIO_InitStruct.Pin = VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin;
 8001658:	231e      	movs	r3, #30
 800165a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2302      	movs	r3, #2
 8001666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	4820      	ldr	r0, [pc, #128]	; (80016f0 <MX_GPIO_Init+0x14c>)
 8001670:	f000 ff9c 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VselB1_Pin VselB0_Pin VselA1_Pin VselA0_Pin
                           MODE_Pin M2_Pin M1_Pin M0_Pin
                           DIR_Pin */
  GPIO_InitStruct.Pin = VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 8001674:	f24f 4327 	movw	r3, #62503	; 0xf427
 8001678:	613b      	str	r3, [r7, #16]
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2302      	movs	r3, #2
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4619      	mov	r1, r3
 800168c:	4819      	ldr	r0, [pc, #100]	; (80016f4 <MX_GPIO_Init+0x150>)
 800168e:	f000 ff8d 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : FPGA_IRQ_Pin USB_detect_Pin */
  GPIO_InitStruct.Pin = FPGA_IRQ_Pin|USB_detect_Pin;
 8001692:	f640 0308 	movw	r3, #2056	; 0x808
 8001696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_GPIO_Init+0x154>)
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	4619      	mov	r1, r3
 80016a6:	4813      	ldr	r0, [pc, #76]	; (80016f4 <MX_GPIO_Init+0x150>)
 80016a8:	f000 ff80 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DONE_Pin INITB_Pin */
  GPIO_InitStruct.Pin = DONE_Pin|INITB_Pin;
 80016ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	4619      	mov	r1, r3
 80016c0:	480b      	ldr	r0, [pc, #44]	; (80016f0 <MX_GPIO_Init+0x14c>)
 80016c2:	f000 ff73 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_IRQ_Pin */
  GPIO_InitStruct.Pin = UI_IRQ_Pin;
 80016c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_GPIO_Init+0x154>)
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UI_IRQ_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	4619      	mov	r1, r3
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_GPIO_Init+0x14c>)
 80016dc:	f000 ff66 	bl	80025ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e0:	bf00      	nop
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40011000 	.word	0x40011000
 80016f0:	40010800 	.word	0x40010800
 80016f4:	40010c00 	.word	0x40010c00
 80016f8:	10110000 	.word	0x10110000

080016fc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
	ReformatString(RXbuff, RS485BUFFSIZE);
 8001708:	2120      	movs	r1, #32
 800170a:	4830      	ldr	r0, [pc, #192]	; (80017cc <HAL_UARTEx_RxEventCallback+0xd0>)
 800170c:	f004 fd20 	bl	8006150 <ReformatString>

	strcpy(TXbuff, "ERR\r\n");
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001712:	4a30      	ldr	r2, [pc, #192]	; (80017d4 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001714:	6810      	ldr	r0, [r2, #0]
 8001716:	6018      	str	r0, [r3, #0]
 8001718:	8892      	ldrh	r2, [r2, #4]
 800171a:	809a      	strh	r2, [r3, #4]

	struct word word = generateWordDirect(RXbuff);
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	492a      	ldr	r1, [pc, #168]	; (80017cc <HAL_UARTEx_RxEventCallback+0xd0>)
 8001722:	4618      	mov	r0, r3
 8001724:	f004 fdd4 	bl	80062d0 <generateWordDirect>

	if(word.address == RackID || word.address == 1) executeWord(word);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4a2b      	ldr	r2, [pc, #172]	; (80017d8 <HAL_UARTEx_RxEventCallback+0xdc>)
 800172c:	7812      	ldrb	r2, [r2, #0]
 800172e:	4293      	cmp	r3, r2
 8001730:	d002      	beq.n	8001738 <HAL_UARTEx_RxEventCallback+0x3c>
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_UARTEx_RxEventCallback+0x48>
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001740:	f004 fe7a 	bl	8006438 <executeWord>

	for(int i = word.subwordsCount; i > 0 ; i--)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e02a      	b.n	80017a0 <HAL_UARTEx_RxEventCallback+0xa4>
	{
		if (word.subwords[i].paramType == OTHER_P && word.subwords[i].otherParam != NULL)
 800174a:	68f9      	ldr	r1, [r7, #12]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	7a1b      	ldrb	r3, [r3, #8]
 800175a:	2b04      	cmp	r3, #4
 800175c:	d11d      	bne.n	800179a <HAL_UARTEx_RxEventCallback+0x9e>
 800175e:	68f9      	ldr	r1, [r7, #12]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d013      	beq.n	800179a <HAL_UARTEx_RxEventCallback+0x9e>
		{
			free(word.subwords[i].otherParam);
 8001772:	68f9      	ldr	r1, [r7, #12]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	4618      	mov	r0, r3
 8001784:	f004 ffee 	bl	8006764 <free>
			word.subwords[i].otherParam = NULL;
 8001788:	68f9      	ldr	r1, [r7, #12]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
	for(int i = word.subwordsCount; i > 0 ; i--)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3b01      	subs	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	dcd1      	bgt.n	800174a <HAL_UARTEx_RxEventCallback+0x4e>
		}
	}
	free(word.subwords);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 ffdb 	bl	8006764 <free>
	word.subwords = NULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]

	RS485_Transmit(TXbuff);
 80017b2:	4807      	ldr	r0, [pc, #28]	; (80017d0 <HAL_UARTEx_RxEventCallback+0xd4>)
 80017b4:	f004 fc62 	bl	800607c <RS485_Transmit>

	//SCPIencode(TXbuff, RXbuff, AWG1, NOISE1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 80017b8:	2220      	movs	r2, #32
 80017ba:	4904      	ldr	r1, [pc, #16]	; (80017cc <HAL_UARTEx_RxEventCallback+0xd0>)
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <HAL_UARTEx_RxEventCallback+0xe0>)
 80017be:	f003 f876 	bl	80048ae <HAL_UARTEx_ReceiveToIdle_IT>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200003a4 	.word	0x200003a4
 80017d0:	20000384 	.word	0x20000384
 80017d4:	0800a22c 	.word	0x0800a22c
 80017d8:	2000036e 	.word	0x2000036e
 80017dc:	200002e8 	.word	0x200002e8

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <Error_Handler+0x8>
	...

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_MspInit+0x5c>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	4a14      	ldr	r2, [pc, #80]	; (8001848 <HAL_MspInit+0x5c>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6193      	str	r3, [r2, #24]
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_MspInit+0x5c>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_MspInit+0x5c>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_MspInit+0x5c>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_MspInit+0x5c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_MspInit+0x60>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_MspInit+0x60>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40021000 	.word	0x40021000
 800184c:	40010000 	.word	0x40010000

08001850 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a14      	ldr	r2, [pc, #80]	; (80018bc <HAL_ADC_MspInit+0x6c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d121      	bne.n	80018b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_ADC_MspInit+0x70>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <HAL_ADC_MspInit+0x70>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_ADC_MspInit+0x70>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_ADC_MspInit+0x70>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a0c      	ldr	r2, [pc, #48]	; (80018c0 <HAL_ADC_MspInit+0x70>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_ADC_MspInit+0x70>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Ain_Pin;
 80018a0:	2301      	movs	r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a4:	2303      	movs	r3, #3
 80018a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Ain_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	4619      	mov	r1, r3
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <HAL_ADC_MspInit+0x74>)
 80018b0:	f000 fe7c 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018b4:	bf00      	nop
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40012400 	.word	0x40012400
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010800 	.word	0x40010800

080018c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_I2C_MspInit+0x90>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d132      	bne.n	800194e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_I2C_MspInit+0x94>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a1b      	ldr	r2, [pc, #108]	; (800195c <HAL_I2C_MspInit+0x94>)
 80018ee:	f043 0308 	orr.w	r3, r3, #8
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_I2C_MspInit+0x94>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001900:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001906:	2312      	movs	r3, #18
 8001908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4812      	ldr	r0, [pc, #72]	; (8001960 <HAL_I2C_MspInit+0x98>)
 8001916:	f000 fe49 	bl	80025ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_I2C_MspInit+0x9c>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <HAL_I2C_MspInit+0x9c>)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_I2C_MspInit+0x94>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_I2C_MspInit+0x94>)
 800193c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_I2C_MspInit+0x94>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40005400 	.word	0x40005400
 800195c:	40021000 	.word	0x40021000
 8001960:	40010c00 	.word	0x40010c00
 8001964:	40010000 	.word	0x40010000

08001968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <HAL_SPI_MspInit+0x88>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d12f      	bne.n	80019e8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <HAL_SPI_MspInit+0x8c>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <HAL_SPI_MspInit+0x8c>)
 800198e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_SPI_MspInit+0x8c>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_SPI_MspInit+0x8c>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <HAL_SPI_MspInit+0x8c>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_SPI_MspInit+0x8c>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019b8:	23a0      	movs	r3, #160	; 0xa0
 80019ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	4619      	mov	r1, r3
 80019ca:	480b      	ldr	r0, [pc, #44]	; (80019f8 <HAL_SPI_MspInit+0x90>)
 80019cc:	f000 fdee 	bl	80025ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019d0:	2340      	movs	r3, #64	; 0x40
 80019d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4619      	mov	r1, r3
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <HAL_SPI_MspInit+0x90>)
 80019e4:	f000 fde2 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40013000 	.word	0x40013000
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010800 	.word	0x40010800

080019fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <HAL_UART_MspInit+0xb4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d145      	bne.n	8001aa8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a24      	ldr	r2, [pc, #144]	; (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a4c:	2340      	movs	r3, #64	; 0x40
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4816      	ldr	r0, [pc, #88]	; (8001ab8 <HAL_UART_MspInit+0xbc>)
 8001a60:	f000 fda4 	bl	80025ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <HAL_UART_MspInit+0xbc>)
 8001a78:	f000 fd98 	bl	80025ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_UART_MspInit+0xc0>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <HAL_UART_MspInit+0xc0>)
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2025      	movs	r0, #37	; 0x25
 8001a9e:	f000 fc9c 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aa2:	2025      	movs	r0, #37	; 0x25
 8001aa4:	f000 fcb5 	bl	8002412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3728      	adds	r7, #40	; 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010c00 	.word	0x40010c00
 8001abc:	40010000 	.word	0x40010000

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <NMI_Handler+0x4>

08001ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <HardFault_Handler+0x4>

08001acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <MemManage_Handler+0x4>

08001ad2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <BusFault_Handler+0x4>

08001ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <UsageFault_Handler+0x4>

08001ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b06:	f000 f93f 	bl	8001d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <USART1_IRQHandler+0x10>)
 8001b16:	f002 ff27 	bl	8004968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002e8 	.word	0x200002e8

08001b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return 1;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <_kill>:

int _kill(int pid, int sig)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b3c:	f005 fd90 	bl	8007660 <__errno>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2216      	movs	r2, #22
 8001b44:	601a      	str	r2, [r3, #0]
  return -1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_exit>:

void _exit (int status)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffe7 	bl	8001b32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b64:	e7fe      	b.n	8001b64 <_exit+0x12>

08001b66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e00a      	b.n	8001b8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b78:	f3af 8000 	nop.w
 8001b7c:	4601      	mov	r1, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	60ba      	str	r2, [r7, #8]
 8001b84:	b2ca      	uxtb	r2, r1
 8001b86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	dbf0      	blt.n	8001b78 <_read+0x12>
  }

  return len;
 8001b96:	687b      	ldr	r3, [r7, #4]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e009      	b.n	8001bc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	60ba      	str	r2, [r7, #8]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dbf1      	blt.n	8001bb2 <_write+0x12>
  }
  return len;
 8001bce:	687b      	ldr	r3, [r7, #4]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_close>:

int _close(int file)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfe:	605a      	str	r2, [r3, #4]
  return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <_isatty>:

int _isatty(int file)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c14:	2301      	movs	r3, #1
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f005 fcfa 	bl	8007660 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20005000 	.word	0x20005000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	20000370 	.word	0x20000370
 8001ca0:	20000570 	.word	0x20000570

08001ca4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb0:	f7ff fff8 	bl	8001ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb4:	480b      	ldr	r0, [pc, #44]	; (8001ce4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cb6:	490c      	ldr	r1, [pc, #48]	; (8001ce8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cb8:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ccc:	4c09      	ldr	r4, [pc, #36]	; (8001cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cda:	f005 fcc7 	bl	800766c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cde:	f7ff fa47 	bl	8001170 <main>
  bx lr
 8001ce2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001cec:	0800a9cc 	.word	0x0800a9cc
  ldr r2, =_sbss
 8001cf0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001cf4:	20000570 	.word	0x20000570

08001cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC1_2_IRQHandler>
	...

08001cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_Init+0x28>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_Init+0x28>)
 8001d06:	f043 0310 	orr.w	r3, r3, #16
 8001d0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	f000 fb59 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d12:	200f      	movs	r0, #15
 8001d14:	f000 f808 	bl	8001d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d18:	f7ff fd68 	bl	80017ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40022000 	.word	0x40022000

08001d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_InitTick+0x54>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_InitTick+0x58>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 fb71 	bl	800242e <HAL_SYSTICK_Config>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00e      	b.n	8001d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b0f      	cmp	r3, #15
 8001d5a:	d80a      	bhi.n	8001d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f000 fb39 	bl	80023da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d68:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <HAL_InitTick+0x5c>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000008 	.word	0x20000008
 8001d84:	20000004 	.word	0x20000004

08001d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_IncTick+0x1c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_IncTick+0x20>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a03      	ldr	r2, [pc, #12]	; (8001da8 <HAL_IncTick+0x20>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	20000008 	.word	0x20000008
 8001da8:	20000374 	.word	0x20000374

08001dac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return uwTick;
 8001db0:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <HAL_GetTick+0x10>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	20000374 	.word	0x20000374

08001dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff fff0 	bl	8001dac <HAL_GetTick>
 8001dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d005      	beq.n	8001de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_Delay+0x44>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001de6:	bf00      	nop
 8001de8:	f7ff ffe0 	bl	8001dac <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d8f7      	bhi.n	8001de8 <HAL_Delay+0x28>
  {
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000008 	.word	0x20000008

08001e08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0be      	b.n	8001fa8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d109      	bne.n	8001e4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fd02 	bl	8001850 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f9ab 	bl	80021a8 <ADC_ConversionStop_Disable>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 8099 	bne.w	8001f96 <HAL_ADC_Init+0x18e>
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 8095 	bne.w	8001f96 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e74:	f023 0302 	bic.w	r3, r3, #2
 8001e78:	f043 0202 	orr.w	r2, r3, #2
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7b1b      	ldrb	r3, [r3, #12]
 8001e8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea0:	d003      	beq.n	8001eaa <HAL_ADC_Init+0xa2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_ADC_Init+0xa8>
 8001eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eae:	e000      	b.n	8001eb2 <HAL_ADC_Init+0xaa>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7d1b      	ldrb	r3, [r3, #20]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d119      	bne.n	8001ef4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7b1b      	ldrb	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	035a      	lsls	r2, r3, #13
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	e00b      	b.n	8001ef4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	f043 0220 	orr.w	r2, r3, #32
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	f043 0201 	orr.w	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <HAL_ADC_Init+0x1a8>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	68b9      	ldr	r1, [r7, #8]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f24:	d003      	beq.n	8001f2e <HAL_ADC_Init+0x126>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d104      	bne.n	8001f38 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	051b      	lsls	r3, r3, #20
 8001f36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_ADC_Init+0x1ac>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d10b      	bne.n	8001f74 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	f023 0303 	bic.w	r3, r3, #3
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f72:	e018      	b.n	8001fa6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	f023 0312 	bic.w	r3, r3, #18
 8001f7c:	f043 0210 	orr.w	r2, r3, #16
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f94:	e007      	b.n	8001fa6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	f043 0210 	orr.w	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	ffe1f7fd 	.word	0xffe1f7fd
 8001fb4:	ff1f0efe 	.word	0xff1f0efe

08001fb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x20>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e0dc      	b.n	8002192 <HAL_ADC_ConfigChannel+0x1da>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b06      	cmp	r3, #6
 8001fe6:	d81c      	bhi.n	8002022 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b05      	subs	r3, #5
 8001ffa:	221f      	movs	r2, #31
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	4019      	ands	r1, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b05      	subs	r3, #5
 8002014:	fa00 f203 	lsl.w	r2, r0, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	635a      	str	r2, [r3, #52]	; 0x34
 8002020:	e03c      	b.n	800209c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d81c      	bhi.n	8002064 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b23      	subs	r3, #35	; 0x23
 800203c:	221f      	movs	r2, #31
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	4019      	ands	r1, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	3b23      	subs	r3, #35	; 0x23
 8002056:	fa00 f203 	lsl.w	r2, r0, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
 8002062:	e01b      	b.n	800209c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3b41      	subs	r3, #65	; 0x41
 8002076:	221f      	movs	r2, #31
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	4019      	ands	r1, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	3b41      	subs	r3, #65	; 0x41
 8002090:	fa00 f203 	lsl.w	r2, r0, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b09      	cmp	r3, #9
 80020a2:	d91c      	bls.n	80020de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68d9      	ldr	r1, [r3, #12]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	3b1e      	subs	r3, #30
 80020b6:	2207      	movs	r2, #7
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	4019      	ands	r1, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6898      	ldr	r0, [r3, #8]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	3b1e      	subs	r3, #30
 80020d0:	fa00 f203 	lsl.w	r2, r0, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	e019      	b.n	8002112 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6919      	ldr	r1, [r3, #16]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	2207      	movs	r2, #7
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	4019      	ands	r1, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6898      	ldr	r0, [r3, #8]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	fa00 f203 	lsl.w	r2, r0, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b10      	cmp	r3, #16
 8002118:	d003      	beq.n	8002122 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800211e:	2b11      	cmp	r3, #17
 8002120:	d132      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1d      	ldr	r2, [pc, #116]	; (800219c <HAL_ADC_ConfigChannel+0x1e4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d125      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d126      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002148:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b10      	cmp	r3, #16
 8002150:	d11a      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	0c9a      	lsrs	r2, r3, #18
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002168:	e002      	b.n	8002170 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3b01      	subs	r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f9      	bne.n	800216a <HAL_ADC_ConfigChannel+0x1b2>
 8002176:	e007      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	f043 0220 	orr.w	r2, r3, #32
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002190:	7bfb      	ldrb	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40012400 	.word	0x40012400
 80021a0:	20000000 	.word	0x20000000
 80021a4:	431bde83 	.word	0x431bde83

080021a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d12e      	bne.n	8002220 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0201 	bic.w	r2, r2, #1
 80021d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021d2:	f7ff fdeb 	bl	8001dac <HAL_GetTick>
 80021d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021d8:	e01b      	b.n	8002212 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021da:	f7ff fde7 	bl	8001dac <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d914      	bls.n	8002212 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d10d      	bne.n	8002212 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	f043 0210 	orr.w	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e007      	b.n	8002222 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d0dc      	beq.n	80021da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4906      	ldr	r1, [pc, #24]	; (80022c4 <__NVIC_EnableIRQ+0x34>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	db0a      	blt.n	80022f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	490c      	ldr	r1, [pc, #48]	; (8002314 <__NVIC_SetPriority+0x4c>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	0112      	lsls	r2, r2, #4
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	440b      	add	r3, r1
 80022ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f0:	e00a      	b.n	8002308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4908      	ldr	r1, [pc, #32]	; (8002318 <__NVIC_SetPriority+0x50>)
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	3b04      	subs	r3, #4
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	440b      	add	r3, r1
 8002306:	761a      	strb	r2, [r3, #24]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f1c3 0307 	rsb	r3, r3, #7
 8002336:	2b04      	cmp	r3, #4
 8002338:	bf28      	it	cs
 800233a:	2304      	movcs	r3, #4
 800233c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3304      	adds	r3, #4
 8002342:	2b06      	cmp	r3, #6
 8002344:	d902      	bls.n	800234c <NVIC_EncodePriority+0x30>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3b03      	subs	r3, #3
 800234a:	e000      	b.n	800234e <NVIC_EncodePriority+0x32>
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	f04f 32ff 	mov.w	r2, #4294967295
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	401a      	ands	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002364:	f04f 31ff 	mov.w	r1, #4294967295
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43d9      	mvns	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	4313      	orrs	r3, r2
         );
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002390:	d301      	bcc.n	8002396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002392:	2301      	movs	r3, #1
 8002394:	e00f      	b.n	80023b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002396:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <SysTick_Config+0x40>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239e:	210f      	movs	r1, #15
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f7ff ff90 	bl	80022c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <SysTick_Config+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <SysTick_Config+0x40>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	e000e010 	.word	0xe000e010

080023c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff2d 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff42 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ff90 	bl	800231c <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff5f 	bl	80022c8 <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff35 	bl	8002290 <__NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffa2 	bl	8002380 <SysTick_Config>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d008      	beq.n	8002470 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2204      	movs	r2, #4
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e020      	b.n	80024b2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 020e 	bic.w	r2, r2, #14
 800247e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f202 	lsl.w	r2, r1, r2
 800249e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d005      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2204      	movs	r2, #4
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e051      	b.n	8002584 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 020e 	bic.w	r2, r2, #14
 80024ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a22      	ldr	r2, [pc, #136]	; (8002590 <HAL_DMA_Abort_IT+0xd4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d029      	beq.n	800255e <HAL_DMA_Abort_IT+0xa2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <HAL_DMA_Abort_IT+0xd8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d022      	beq.n	800255a <HAL_DMA_Abort_IT+0x9e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <HAL_DMA_Abort_IT+0xdc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d01a      	beq.n	8002554 <HAL_DMA_Abort_IT+0x98>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1e      	ldr	r2, [pc, #120]	; (800259c <HAL_DMA_Abort_IT+0xe0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d012      	beq.n	800254e <HAL_DMA_Abort_IT+0x92>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <HAL_DMA_Abort_IT+0xe4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00a      	beq.n	8002548 <HAL_DMA_Abort_IT+0x8c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <HAL_DMA_Abort_IT+0xe8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d102      	bne.n	8002542 <HAL_DMA_Abort_IT+0x86>
 800253c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002540:	e00e      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 8002542:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002546:	e00b      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 8002548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800254c:	e008      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 800254e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002552:	e005      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 8002554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002558:	e002      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 800255a:	2310      	movs	r3, #16
 800255c:	e000      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 800255e:	2301      	movs	r3, #1
 8002560:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <HAL_DMA_Abort_IT+0xec>)
 8002562:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
    } 
  }
  return status;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40020008 	.word	0x40020008
 8002594:	4002001c 	.word	0x4002001c
 8002598:	40020030 	.word	0x40020030
 800259c:	40020044 	.word	0x40020044
 80025a0:	40020058 	.word	0x40020058
 80025a4:	4002006c 	.word	0x4002006c
 80025a8:	40020000 	.word	0x40020000

080025ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b08b      	sub	sp, #44	; 0x2c
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025be:	e169      	b.n	8002894 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025c0:	2201      	movs	r2, #1
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	429a      	cmp	r2, r3
 80025da:	f040 8158 	bne.w	800288e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a9a      	ldr	r2, [pc, #616]	; (800284c <HAL_GPIO_Init+0x2a0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d05e      	beq.n	80026a6 <HAL_GPIO_Init+0xfa>
 80025e8:	4a98      	ldr	r2, [pc, #608]	; (800284c <HAL_GPIO_Init+0x2a0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d875      	bhi.n	80026da <HAL_GPIO_Init+0x12e>
 80025ee:	4a98      	ldr	r2, [pc, #608]	; (8002850 <HAL_GPIO_Init+0x2a4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d058      	beq.n	80026a6 <HAL_GPIO_Init+0xfa>
 80025f4:	4a96      	ldr	r2, [pc, #600]	; (8002850 <HAL_GPIO_Init+0x2a4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d86f      	bhi.n	80026da <HAL_GPIO_Init+0x12e>
 80025fa:	4a96      	ldr	r2, [pc, #600]	; (8002854 <HAL_GPIO_Init+0x2a8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d052      	beq.n	80026a6 <HAL_GPIO_Init+0xfa>
 8002600:	4a94      	ldr	r2, [pc, #592]	; (8002854 <HAL_GPIO_Init+0x2a8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d869      	bhi.n	80026da <HAL_GPIO_Init+0x12e>
 8002606:	4a94      	ldr	r2, [pc, #592]	; (8002858 <HAL_GPIO_Init+0x2ac>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d04c      	beq.n	80026a6 <HAL_GPIO_Init+0xfa>
 800260c:	4a92      	ldr	r2, [pc, #584]	; (8002858 <HAL_GPIO_Init+0x2ac>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d863      	bhi.n	80026da <HAL_GPIO_Init+0x12e>
 8002612:	4a92      	ldr	r2, [pc, #584]	; (800285c <HAL_GPIO_Init+0x2b0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d046      	beq.n	80026a6 <HAL_GPIO_Init+0xfa>
 8002618:	4a90      	ldr	r2, [pc, #576]	; (800285c <HAL_GPIO_Init+0x2b0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d85d      	bhi.n	80026da <HAL_GPIO_Init+0x12e>
 800261e:	2b12      	cmp	r3, #18
 8002620:	d82a      	bhi.n	8002678 <HAL_GPIO_Init+0xcc>
 8002622:	2b12      	cmp	r3, #18
 8002624:	d859      	bhi.n	80026da <HAL_GPIO_Init+0x12e>
 8002626:	a201      	add	r2, pc, #4	; (adr r2, 800262c <HAL_GPIO_Init+0x80>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	080026a7 	.word	0x080026a7
 8002630:	08002681 	.word	0x08002681
 8002634:	08002693 	.word	0x08002693
 8002638:	080026d5 	.word	0x080026d5
 800263c:	080026db 	.word	0x080026db
 8002640:	080026db 	.word	0x080026db
 8002644:	080026db 	.word	0x080026db
 8002648:	080026db 	.word	0x080026db
 800264c:	080026db 	.word	0x080026db
 8002650:	080026db 	.word	0x080026db
 8002654:	080026db 	.word	0x080026db
 8002658:	080026db 	.word	0x080026db
 800265c:	080026db 	.word	0x080026db
 8002660:	080026db 	.word	0x080026db
 8002664:	080026db 	.word	0x080026db
 8002668:	080026db 	.word	0x080026db
 800266c:	080026db 	.word	0x080026db
 8002670:	08002689 	.word	0x08002689
 8002674:	0800269d 	.word	0x0800269d
 8002678:	4a79      	ldr	r2, [pc, #484]	; (8002860 <HAL_GPIO_Init+0x2b4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800267e:	e02c      	b.n	80026da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	623b      	str	r3, [r7, #32]
          break;
 8002686:	e029      	b.n	80026dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	3304      	adds	r3, #4
 800268e:	623b      	str	r3, [r7, #32]
          break;
 8002690:	e024      	b.n	80026dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	3308      	adds	r3, #8
 8002698:	623b      	str	r3, [r7, #32]
          break;
 800269a:	e01f      	b.n	80026dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	330c      	adds	r3, #12
 80026a2:	623b      	str	r3, [r7, #32]
          break;
 80026a4:	e01a      	b.n	80026dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026ae:	2304      	movs	r3, #4
 80026b0:	623b      	str	r3, [r7, #32]
          break;
 80026b2:	e013      	b.n	80026dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026bc:	2308      	movs	r3, #8
 80026be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	611a      	str	r2, [r3, #16]
          break;
 80026c6:	e009      	b.n	80026dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026c8:	2308      	movs	r3, #8
 80026ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	615a      	str	r2, [r3, #20]
          break;
 80026d2:	e003      	b.n	80026dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026d4:	2300      	movs	r3, #0
 80026d6:	623b      	str	r3, [r7, #32]
          break;
 80026d8:	e000      	b.n	80026dc <HAL_GPIO_Init+0x130>
          break;
 80026da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2bff      	cmp	r3, #255	; 0xff
 80026e0:	d801      	bhi.n	80026e6 <HAL_GPIO_Init+0x13a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	e001      	b.n	80026ea <HAL_GPIO_Init+0x13e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2bff      	cmp	r3, #255	; 0xff
 80026f0:	d802      	bhi.n	80026f8 <HAL_GPIO_Init+0x14c>
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	e002      	b.n	80026fe <HAL_GPIO_Init+0x152>
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	3b08      	subs	r3, #8
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	210f      	movs	r1, #15
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	401a      	ands	r2, r3
 8002710:	6a39      	ldr	r1, [r7, #32]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	431a      	orrs	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80b1 	beq.w	800288e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800272c:	4b4d      	ldr	r3, [pc, #308]	; (8002864 <HAL_GPIO_Init+0x2b8>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	4a4c      	ldr	r2, [pc, #304]	; (8002864 <HAL_GPIO_Init+0x2b8>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6193      	str	r3, [r2, #24]
 8002738:	4b4a      	ldr	r3, [pc, #296]	; (8002864 <HAL_GPIO_Init+0x2b8>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002744:	4a48      	ldr	r2, [pc, #288]	; (8002868 <HAL_GPIO_Init+0x2bc>)
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3302      	adds	r3, #2
 800274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002750:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	220f      	movs	r2, #15
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4013      	ands	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a40      	ldr	r2, [pc, #256]	; (800286c <HAL_GPIO_Init+0x2c0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <HAL_GPIO_Init+0x1ec>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a3f      	ldr	r2, [pc, #252]	; (8002870 <HAL_GPIO_Init+0x2c4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00d      	beq.n	8002794 <HAL_GPIO_Init+0x1e8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a3e      	ldr	r2, [pc, #248]	; (8002874 <HAL_GPIO_Init+0x2c8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d007      	beq.n	8002790 <HAL_GPIO_Init+0x1e4>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3d      	ldr	r2, [pc, #244]	; (8002878 <HAL_GPIO_Init+0x2cc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_GPIO_Init+0x1e0>
 8002788:	2303      	movs	r3, #3
 800278a:	e006      	b.n	800279a <HAL_GPIO_Init+0x1ee>
 800278c:	2304      	movs	r3, #4
 800278e:	e004      	b.n	800279a <HAL_GPIO_Init+0x1ee>
 8002790:	2302      	movs	r3, #2
 8002792:	e002      	b.n	800279a <HAL_GPIO_Init+0x1ee>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_GPIO_Init+0x1ee>
 8002798:	2300      	movs	r3, #0
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	f002 0203 	and.w	r2, r2, #3
 80027a0:	0092      	lsls	r2, r2, #2
 80027a2:	4093      	lsls	r3, r2
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027aa:	492f      	ldr	r1, [pc, #188]	; (8002868 <HAL_GPIO_Init+0x2bc>)
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	3302      	adds	r3, #2
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d006      	beq.n	80027d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027c4:	4b2d      	ldr	r3, [pc, #180]	; (800287c <HAL_GPIO_Init+0x2d0>)
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	492c      	ldr	r1, [pc, #176]	; (800287c <HAL_GPIO_Init+0x2d0>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027d2:	4b2a      	ldr	r3, [pc, #168]	; (800287c <HAL_GPIO_Init+0x2d0>)
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	43db      	mvns	r3, r3
 80027da:	4928      	ldr	r1, [pc, #160]	; (800287c <HAL_GPIO_Init+0x2d0>)
 80027dc:	4013      	ands	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027ec:	4b23      	ldr	r3, [pc, #140]	; (800287c <HAL_GPIO_Init+0x2d0>)
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	4922      	ldr	r1, [pc, #136]	; (800287c <HAL_GPIO_Init+0x2d0>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60cb      	str	r3, [r1, #12]
 80027f8:	e006      	b.n	8002808 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_GPIO_Init+0x2d0>)
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	43db      	mvns	r3, r3
 8002802:	491e      	ldr	r1, [pc, #120]	; (800287c <HAL_GPIO_Init+0x2d0>)
 8002804:	4013      	ands	r3, r2
 8002806:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d006      	beq.n	8002822 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_GPIO_Init+0x2d0>)
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4918      	ldr	r1, [pc, #96]	; (800287c <HAL_GPIO_Init+0x2d0>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
 8002820:	e006      	b.n	8002830 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_GPIO_Init+0x2d0>)
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	43db      	mvns	r3, r3
 800282a:	4914      	ldr	r1, [pc, #80]	; (800287c <HAL_GPIO_Init+0x2d0>)
 800282c:	4013      	ands	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d021      	beq.n	8002880 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_GPIO_Init+0x2d0>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	490e      	ldr	r1, [pc, #56]	; (800287c <HAL_GPIO_Init+0x2d0>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	600b      	str	r3, [r1, #0]
 8002848:	e021      	b.n	800288e <HAL_GPIO_Init+0x2e2>
 800284a:	bf00      	nop
 800284c:	10320000 	.word	0x10320000
 8002850:	10310000 	.word	0x10310000
 8002854:	10220000 	.word	0x10220000
 8002858:	10210000 	.word	0x10210000
 800285c:	10120000 	.word	0x10120000
 8002860:	10110000 	.word	0x10110000
 8002864:	40021000 	.word	0x40021000
 8002868:	40010000 	.word	0x40010000
 800286c:	40010800 	.word	0x40010800
 8002870:	40010c00 	.word	0x40010c00
 8002874:	40011000 	.word	0x40011000
 8002878:	40011400 	.word	0x40011400
 800287c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_GPIO_Init+0x304>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	43db      	mvns	r3, r3
 8002888:	4909      	ldr	r1, [pc, #36]	; (80028b0 <HAL_GPIO_Init+0x304>)
 800288a:	4013      	ands	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	3301      	adds	r3, #1
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	fa22 f303 	lsr.w	r3, r2, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f47f ae8e 	bne.w	80025c0 <HAL_GPIO_Init+0x14>
  }
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	372c      	adds	r7, #44	; 0x2c
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40010400 	.word	0x40010400

080028b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	e001      	b.n	80028d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	807b      	strh	r3, [r7, #2]
 80028ee:	4613      	mov	r3, r2
 80028f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f2:	787b      	ldrb	r3, [r7, #1]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028f8:	887a      	ldrh	r2, [r7, #2]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028fe:	e003      	b.n	8002908 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	041a      	lsls	r2, r3, #16
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	611a      	str	r2, [r3, #16]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
	...

08002914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e12b      	b.n	8002b7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe ffc4 	bl	80018c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	; 0x24
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002978:	f001 f842 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 800297c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a81      	ldr	r2, [pc, #516]	; (8002b88 <HAL_I2C_Init+0x274>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d807      	bhi.n	8002998 <HAL_I2C_Init+0x84>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a80      	ldr	r2, [pc, #512]	; (8002b8c <HAL_I2C_Init+0x278>)
 800298c:	4293      	cmp	r3, r2
 800298e:	bf94      	ite	ls
 8002990:	2301      	movls	r3, #1
 8002992:	2300      	movhi	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e006      	b.n	80029a6 <HAL_I2C_Init+0x92>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a7d      	ldr	r2, [pc, #500]	; (8002b90 <HAL_I2C_Init+0x27c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	bf94      	ite	ls
 80029a0:	2301      	movls	r3, #1
 80029a2:	2300      	movhi	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0e7      	b.n	8002b7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a78      	ldr	r2, [pc, #480]	; (8002b94 <HAL_I2C_Init+0x280>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0c9b      	lsrs	r3, r3, #18
 80029b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a6a      	ldr	r2, [pc, #424]	; (8002b88 <HAL_I2C_Init+0x274>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d802      	bhi.n	80029e8 <HAL_I2C_Init+0xd4>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3301      	adds	r3, #1
 80029e6:	e009      	b.n	80029fc <HAL_I2C_Init+0xe8>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	4a69      	ldr	r2, [pc, #420]	; (8002b98 <HAL_I2C_Init+0x284>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	3301      	adds	r3, #1
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	495c      	ldr	r1, [pc, #368]	; (8002b88 <HAL_I2C_Init+0x274>)
 8002a18:	428b      	cmp	r3, r1
 8002a1a:	d819      	bhi.n	8002a50 <HAL_I2C_Init+0x13c>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e59      	subs	r1, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a2a:	1c59      	adds	r1, r3, #1
 8002a2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a30:	400b      	ands	r3, r1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_I2C_Init+0x138>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1e59      	subs	r1, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4a:	e051      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	e04f      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d111      	bne.n	8002a7c <HAL_I2C_Init+0x168>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1e58      	subs	r0, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	440b      	add	r3, r1
 8002a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e012      	b.n	8002aa2 <HAL_I2C_Init+0x18e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e58      	subs	r0, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	0099      	lsls	r1, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Init+0x196>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e022      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_I2C_Init+0x1bc>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1e58      	subs	r0, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	440b      	add	r3, r1
 8002ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ace:	e00f      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	0099      	lsls	r1, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	6809      	ldr	r1, [r1, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6911      	ldr	r1, [r2, #16]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68d2      	ldr	r2, [r2, #12]
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	000186a0 	.word	0x000186a0
 8002b8c:	001e847f 	.word	0x001e847f
 8002b90:	003d08ff 	.word	0x003d08ff
 8002b94:	431bde83 	.word	0x431bde83
 8002b98:	10624dd3 	.word	0x10624dd3

08002b9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	817b      	strh	r3, [r7, #10]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	813b      	strh	r3, [r7, #8]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bb6:	f7ff f8f9 	bl	8001dac <HAL_GetTick>
 8002bba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	f040 80d9 	bne.w	8002d7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2319      	movs	r3, #25
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	496d      	ldr	r1, [pc, #436]	; (8002d88 <HAL_I2C_Mem_Write+0x1ec>)
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f971 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
 8002be2:	e0cc      	b.n	8002d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_I2C_Mem_Write+0x56>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e0c5      	b.n	8002d7e <HAL_I2C_Mem_Write+0x1e2>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d007      	beq.n	8002c18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2221      	movs	r2, #33	; 0x21
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2240      	movs	r2, #64	; 0x40
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a3a      	ldr	r2, [r7, #32]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a4d      	ldr	r2, [pc, #308]	; (8002d8c <HAL_I2C_Mem_Write+0x1f0>)
 8002c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c5a:	88f8      	ldrh	r0, [r7, #6]
 8002c5c:	893a      	ldrh	r2, [r7, #8]
 8002c5e:	8979      	ldrh	r1, [r7, #10]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	4603      	mov	r3, r0
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f890 	bl	8002d90 <I2C_RequestMemoryWrite>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d052      	beq.n	8002d1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e081      	b.n	8002d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fa36 	bl	80030f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00d      	beq.n	8002ca6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d107      	bne.n	8002ca2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e06b      	b.n	8002d7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d11b      	bne.n	8002d1c <HAL_I2C_Mem_Write+0x180>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d017      	beq.n	8002d1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1aa      	bne.n	8002c7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fa29 	bl	8003180 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00d      	beq.n	8002d50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d107      	bne.n	8002d4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e016      	b.n	8002d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	00100002 	.word	0x00100002
 8002d8c:	ffff0000 	.word	0xffff0000

08002d90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	4608      	mov	r0, r1
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4603      	mov	r3, r0
 8002da0:	817b      	strh	r3, [r7, #10]
 8002da2:	460b      	mov	r3, r1
 8002da4:	813b      	strh	r3, [r7, #8]
 8002da6:	4613      	mov	r3, r2
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f878 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00d      	beq.n	8002dee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de0:	d103      	bne.n	8002dea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e05f      	b.n	8002eae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dee:	897b      	ldrh	r3, [r7, #10]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	492d      	ldr	r1, [pc, #180]	; (8002eb8 <I2C_RequestMemoryWrite+0x128>)
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f8d3 	bl	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e04c      	b.n	8002eae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2c:	6a39      	ldr	r1, [r7, #32]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f95e 	bl	80030f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d107      	bne.n	8002e52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e02b      	b.n	8002eae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e5c:	893b      	ldrh	r3, [r7, #8]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	611a      	str	r2, [r3, #16]
 8002e66:	e021      	b.n	8002eac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e68:	893b      	ldrh	r3, [r7, #8]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	6a39      	ldr	r1, [r7, #32]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f938 	bl	80030f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d107      	bne.n	8002e9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e005      	b.n	8002eae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea2:	893b      	ldrh	r3, [r7, #8]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	00010002 	.word	0x00010002

08002ebc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ecc:	e048      	b.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d044      	beq.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed6:	f7fe ff69 	bl	8001dac <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d139      	bne.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	0c1b      	lsrs	r3, r3, #16
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d10d      	bne.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	43da      	mvns	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4013      	ands	r3, r2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	e00c      	b.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d116      	bne.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f043 0220 	orr.w	r2, r3, #32
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e023      	b.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	0c1b      	lsrs	r3, r3, #16
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10d      	bne.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	43da      	mvns	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	e00c      	b.n	8002fa0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d093      	beq.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fbe:	e071      	b.n	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fce:	d123      	bne.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fe8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f043 0204 	orr.w	r2, r3, #4
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e067      	b.n	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d041      	beq.n	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003020:	f7fe fec4 	bl	8001dac <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	429a      	cmp	r2, r3
 800302e:	d302      	bcc.n	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d136      	bne.n	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10c      	bne.n	800305a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	43da      	mvns	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf14      	ite	ne
 8003052:	2301      	movne	r3, #1
 8003054:	2300      	moveq	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	e00b      	b.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	43da      	mvns	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4013      	ands	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e021      	b.n	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d10c      	bne.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	43da      	mvns	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4013      	ands	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e00b      	b.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4013      	ands	r3, r2
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf14      	ite	ne
 80030da:	2301      	movne	r3, #1
 80030dc:	2300      	moveq	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f47f af6d 	bne.w	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fc:	e034      	b.n	8003168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f886 	bl	8003210 <I2C_IsAcknowledgeFailed>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e034      	b.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d028      	beq.n	8003168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003116:	f7fe fe49 	bl	8001dac <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	429a      	cmp	r2, r3
 8003124:	d302      	bcc.n	800312c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11d      	bne.n	8003168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	d016      	beq.n	8003168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e007      	b.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d1c3      	bne.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800318c:	e034      	b.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f83e 	bl	8003210 <I2C_IsAcknowledgeFailed>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e034      	b.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d028      	beq.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7fe fe01 	bl	8001dac <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11d      	bne.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d016      	beq.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e007      	b.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d1c3      	bne.n	800318e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003226:	d11b      	bne.n	8003260 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003230:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f043 0204 	orr.w	r2, r3, #4
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e272      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8087 	beq.w	800339a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800328c:	4b92      	ldr	r3, [pc, #584]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b04      	cmp	r3, #4
 8003296:	d00c      	beq.n	80032b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003298:	4b8f      	ldr	r3, [pc, #572]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d112      	bne.n	80032ca <HAL_RCC_OscConfig+0x5e>
 80032a4:	4b8c      	ldr	r3, [pc, #560]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b0:	d10b      	bne.n	80032ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b2:	4b89      	ldr	r3, [pc, #548]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d06c      	beq.n	8003398 <HAL_RCC_OscConfig+0x12c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d168      	bne.n	8003398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e24c      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x76>
 80032d4:	4b80      	ldr	r3, [pc, #512]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a7f      	ldr	r2, [pc, #508]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	e02e      	b.n	8003340 <HAL_RCC_OscConfig+0xd4>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x98>
 80032ea:	4b7b      	ldr	r3, [pc, #492]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7a      	ldr	r2, [pc, #488]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b78      	ldr	r3, [pc, #480]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a77      	ldr	r2, [pc, #476]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e01d      	b.n	8003340 <HAL_RCC_OscConfig+0xd4>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0xbc>
 800330e:	4b72      	ldr	r3, [pc, #456]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a71      	ldr	r2, [pc, #452]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6e      	ldr	r2, [pc, #440]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0xd4>
 8003328:	4b6b      	ldr	r3, [pc, #428]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6a      	ldr	r2, [pc, #424]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800332e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b68      	ldr	r3, [pc, #416]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a67      	ldr	r2, [pc, #412]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800333a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe fd30 	bl	8001dac <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7fe fd2c 	bl	8001dac <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e200      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	4b5d      	ldr	r3, [pc, #372]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0xe4>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fe fd1c 	bl	8001dac <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe fd18 	bl	8001dac <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1ec      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338a:	4b53      	ldr	r3, [pc, #332]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x10c>
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d063      	beq.n	800346e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033a6:	4b4c      	ldr	r3, [pc, #304]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033b2:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d11c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x18c>
 80033be:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d116      	bne.n	80033f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_RCC_OscConfig+0x176>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d001      	beq.n	80033e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e1c0      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e2:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4939      	ldr	r1, [pc, #228]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f6:	e03a      	b.n	800346e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003400:	4b36      	ldr	r3, [pc, #216]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fe fcd1 	bl	8001dac <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340e:	f7fe fccd 	bl	8001dac <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e1a1      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003420:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4927      	ldr	r1, [pc, #156]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
 8003440:	e015      	b.n	800346e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe fcb0 	bl	8001dac <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003450:	f7fe fcac 	bl	8001dac <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e180      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d03a      	beq.n	80034f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d019      	beq.n	80034b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003482:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003488:	f7fe fc90 	bl	8001dac <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003490:	f7fe fc8c 	bl	8001dac <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e160      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a2:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034ae:	2001      	movs	r0, #1
 80034b0:	f000 face 	bl	8003a50 <RCC_Delay>
 80034b4:	e01c      	b.n	80034f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034bc:	f7fe fc76 	bl	8001dac <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c2:	e00f      	b.n	80034e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fe fc72 	bl	8001dac <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d908      	bls.n	80034e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e146      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	42420000 	.word	0x42420000
 80034e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e4:	4b92      	ldr	r3, [pc, #584]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e9      	bne.n	80034c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80a6 	beq.w	800364a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003502:	4b8b      	ldr	r3, [pc, #556]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10d      	bne.n	800352a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	4a87      	ldr	r2, [pc, #540]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	61d3      	str	r3, [r2, #28]
 800351a:	4b85      	ldr	r3, [pc, #532]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	4b82      	ldr	r3, [pc, #520]	; (8003734 <HAL_RCC_OscConfig+0x4c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d118      	bne.n	8003568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003536:	4b7f      	ldr	r3, [pc, #508]	; (8003734 <HAL_RCC_OscConfig+0x4c8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a7e      	ldr	r2, [pc, #504]	; (8003734 <HAL_RCC_OscConfig+0x4c8>)
 800353c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003542:	f7fe fc33 	bl	8001dac <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354a:	f7fe fc2f 	bl	8001dac <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b64      	cmp	r3, #100	; 0x64
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e103      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	4b75      	ldr	r3, [pc, #468]	; (8003734 <HAL_RCC_OscConfig+0x4c8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d106      	bne.n	800357e <HAL_RCC_OscConfig+0x312>
 8003570:	4b6f      	ldr	r3, [pc, #444]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a6e      	ldr	r2, [pc, #440]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6213      	str	r3, [r2, #32]
 800357c:	e02d      	b.n	80035da <HAL_RCC_OscConfig+0x36e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x334>
 8003586:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a69      	ldr	r2, [pc, #420]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	6213      	str	r3, [r2, #32]
 8003592:	4b67      	ldr	r3, [pc, #412]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	4a66      	ldr	r2, [pc, #408]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	f023 0304 	bic.w	r3, r3, #4
 800359c:	6213      	str	r3, [r2, #32]
 800359e:	e01c      	b.n	80035da <HAL_RCC_OscConfig+0x36e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d10c      	bne.n	80035c2 <HAL_RCC_OscConfig+0x356>
 80035a8:	4b61      	ldr	r3, [pc, #388]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	4a60      	ldr	r2, [pc, #384]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	f043 0304 	orr.w	r3, r3, #4
 80035b2:	6213      	str	r3, [r2, #32]
 80035b4:	4b5e      	ldr	r3, [pc, #376]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4a5d      	ldr	r2, [pc, #372]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6213      	str	r3, [r2, #32]
 80035c0:	e00b      	b.n	80035da <HAL_RCC_OscConfig+0x36e>
 80035c2:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4a5a      	ldr	r2, [pc, #360]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	6213      	str	r3, [r2, #32]
 80035ce:	4b58      	ldr	r3, [pc, #352]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4a57      	ldr	r2, [pc, #348]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	f023 0304 	bic.w	r3, r3, #4
 80035d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d015      	beq.n	800360e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e2:	f7fe fbe3 	bl	8001dac <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e8:	e00a      	b.n	8003600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7fe fbdf 	bl	8001dac <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0b1      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	4b4b      	ldr	r3, [pc, #300]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0ee      	beq.n	80035ea <HAL_RCC_OscConfig+0x37e>
 800360c:	e014      	b.n	8003638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360e:	f7fe fbcd 	bl	8001dac <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003614:	e00a      	b.n	800362c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003616:	f7fe fbc9 	bl	8001dac <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	f241 3288 	movw	r2, #5000	; 0x1388
 8003624:	4293      	cmp	r3, r2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e09b      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362c:	4b40      	ldr	r3, [pc, #256]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ee      	bne.n	8003616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d105      	bne.n	800364a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363e:	4b3c      	ldr	r3, [pc, #240]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	4a3b      	ldr	r2, [pc, #236]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8087 	beq.w	8003762 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003654:	4b36      	ldr	r3, [pc, #216]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b08      	cmp	r3, #8
 800365e:	d061      	beq.n	8003724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d146      	bne.n	80036f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003668:	4b33      	ldr	r3, [pc, #204]	; (8003738 <HAL_RCC_OscConfig+0x4cc>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366e:	f7fe fb9d 	bl	8001dac <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003676:	f7fe fb99 	bl	8001dac <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e06d      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003688:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f0      	bne.n	8003676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369c:	d108      	bne.n	80036b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800369e:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4921      	ldr	r1, [pc, #132]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b0:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a19      	ldr	r1, [r3, #32]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	430b      	orrs	r3, r1
 80036c2:	491b      	ldr	r1, [pc, #108]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x4cc>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fe fb6d 	bl	8001dac <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fe fb69 	bl	8001dac <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e03d      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x46a>
 80036f4:	e035      	b.n	8003762 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_RCC_OscConfig+0x4cc>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fe fb56 	bl	8001dac <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003704:	f7fe fb52 	bl	8001dac <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e026      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x498>
 8003722:	e01e      	b.n	8003762 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d107      	bne.n	800373c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e019      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
 8003730:	40021000 	.word	0x40021000
 8003734:	40007000 	.word	0x40007000
 8003738:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_OscConfig+0x500>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	429a      	cmp	r2, r3
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d001      	beq.n	8003762 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40021000 	.word	0x40021000

08003770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0d0      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003784:	4b6a      	ldr	r3, [pc, #424]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d910      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b67      	ldr	r3, [pc, #412]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 0207 	bic.w	r2, r3, #7
 800379a:	4965      	ldr	r1, [pc, #404]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b63      	ldr	r3, [pc, #396]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0b8      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d020      	beq.n	8003802 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037cc:	4b59      	ldr	r3, [pc, #356]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4a58      	ldr	r2, [pc, #352]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e4:	4b53      	ldr	r3, [pc, #332]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a52      	ldr	r2, [pc, #328]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f0:	4b50      	ldr	r3, [pc, #320]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	494d      	ldr	r1, [pc, #308]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d040      	beq.n	8003890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d107      	bne.n	8003826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	4b47      	ldr	r3, [pc, #284]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d115      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e07f      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	4b41      	ldr	r3, [pc, #260]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e073      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383e:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e06b      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384e:	4b39      	ldr	r3, [pc, #228]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f023 0203 	bic.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4936      	ldr	r1, [pc, #216]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003860:	f7fe faa4 	bl	8001dac <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003866:	e00a      	b.n	800387e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003868:	f7fe faa0 	bl	8001dac <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e053      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 020c 	and.w	r2, r3, #12
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	429a      	cmp	r2, r3
 800388e:	d1eb      	bne.n	8003868 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d210      	bcs.n	80038c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 0207 	bic.w	r2, r3, #7
 80038a6:	4922      	ldr	r1, [pc, #136]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e032      	b.n	8003926 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4916      	ldr	r1, [pc, #88]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	490e      	ldr	r1, [pc, #56]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038fe:	f000 f821 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 8003902:	4602      	mov	r2, r0
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	490a      	ldr	r1, [pc, #40]	; (8003938 <HAL_RCC_ClockConfig+0x1c8>)
 8003910:	5ccb      	ldrb	r3, [r1, r3]
 8003912:	fa22 f303 	lsr.w	r3, r2, r3
 8003916:	4a09      	ldr	r2, [pc, #36]	; (800393c <HAL_RCC_ClockConfig+0x1cc>)
 8003918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1d0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fa02 	bl	8001d28 <HAL_InitTick>

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40022000 	.word	0x40022000
 8003934:	40021000 	.word	0x40021000
 8003938:	0800a258 	.word	0x0800a258
 800393c:	20000000 	.word	0x20000000
 8003940:	20000004 	.word	0x20000004

08003944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	2300      	movs	r3, #0
 8003958:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b04      	cmp	r3, #4
 800396c:	d002      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x30>
 800396e:	2b08      	cmp	r3, #8
 8003970:	d003      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x36>
 8003972:	e027      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003974:	4b19      	ldr	r3, [pc, #100]	; (80039dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003976:	613b      	str	r3, [r7, #16]
      break;
 8003978:	e027      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	0c9b      	lsrs	r3, r3, #18
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	4a17      	ldr	r2, [pc, #92]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003984:	5cd3      	ldrb	r3, [r2, r3]
 8003986:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d010      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	0c5b      	lsrs	r3, r3, #17
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	4a11      	ldr	r2, [pc, #68]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800399e:	5cd3      	ldrb	r3, [r2, r3]
 80039a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <HAL_RCC_GetSysClockFreq+0x98>)
 80039a6:	fb03 f202 	mul.w	r2, r3, r2
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e004      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a0c      	ldr	r2, [pc, #48]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039b8:	fb02 f303 	mul.w	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	613b      	str	r3, [r7, #16]
      break;
 80039c2:	e002      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_RCC_GetSysClockFreq+0x98>)
 80039c6:	613b      	str	r3, [r7, #16]
      break;
 80039c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ca:	693b      	ldr	r3, [r7, #16]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	007a1200 	.word	0x007a1200
 80039e0:	0800a270 	.word	0x0800a270
 80039e4:	0800a280 	.word	0x0800a280
 80039e8:	003d0900 	.word	0x003d0900

080039ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f0:	4b02      	ldr	r3, [pc, #8]	; (80039fc <HAL_RCC_GetHCLKFreq+0x10>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	20000000 	.word	0x20000000

08003a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a04:	f7ff fff2 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4903      	ldr	r1, [pc, #12]	; (8003a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000
 8003a24:	0800a268 	.word	0x0800a268

08003a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a2c:	f7ff ffde 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	0adb      	lsrs	r3, r3, #11
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4903      	ldr	r1, [pc, #12]	; (8003a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	0800a268 	.word	0x0800a268

08003a50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <RCC_Delay+0x34>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <RCC_Delay+0x38>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	0a5b      	lsrs	r3, r3, #9
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a6c:	bf00      	nop
  }
  while (Delay --);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1e5a      	subs	r2, r3, #1
 8003a72:	60fa      	str	r2, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f9      	bne.n	8003a6c <RCC_Delay+0x1c>
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	20000000 	.word	0x20000000
 8003a88:	10624dd3 	.word	0x10624dd3

08003a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d07d      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aac:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10d      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab8:	4b4c      	ldr	r3, [pc, #304]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4a4b      	ldr	r2, [pc, #300]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	61d3      	str	r3, [r2, #28]
 8003ac4:	4b49      	ldr	r3, [pc, #292]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	4b46      	ldr	r3, [pc, #280]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d118      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae0:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a42      	ldr	r2, [pc, #264]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aec:	f7fe f95e 	bl	8001dac <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af2:	e008      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af4:	f7fe f95a 	bl	8001dac <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e06d      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b06:	4b3a      	ldr	r3, [pc, #232]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b12:	4b36      	ldr	r3, [pc, #216]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d02e      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d027      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b30:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b3a:	4b2e      	ldr	r3, [pc, #184]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b40:	4b2c      	ldr	r3, [pc, #176]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b46:	4a29      	ldr	r2, [pc, #164]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d014      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7fe f929 	bl	8001dac <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5e:	f7fe f925 	bl	8001dac <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e036      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0ee      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4917      	ldr	r1, [pc, #92]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4a13      	ldr	r2, [pc, #76]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bb0:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	490b      	ldr	r1, [pc, #44]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bce:	4b07      	ldr	r3, [pc, #28]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	4904      	ldr	r1, [pc, #16]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	42420440 	.word	0x42420440

08003bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e076      	b.n	8003cf8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d108      	bne.n	8003c24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1a:	d009      	beq.n	8003c30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61da      	str	r2, [r3, #28]
 8003c22:	e005      	b.n	8003c30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fe8c 	bl	8001968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb4:	ea42 0103 	orr.w	r1, r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	0c1a      	lsrs	r2, r3, #16
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f002 0204 	and.w	r2, r2, #4
 8003cd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ce6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_SPI_Transmit+0x22>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e12d      	b.n	8003f7e <HAL_SPI_Transmit+0x27e>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d2a:	f7fe f83f 	bl	8001dac <HAL_GetTick>
 8003d2e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d002      	beq.n	8003d46 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
 8003d42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d44:	e116      	b.n	8003f74 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_SPI_Transmit+0x52>
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d56:	e10d      	b.n	8003f74 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	88fa      	ldrh	r2, [r7, #6]
 8003d76:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9e:	d10f      	bne.n	8003dc0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dbe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b40      	cmp	r3, #64	; 0x40
 8003dcc:	d007      	beq.n	8003dde <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ddc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de6:	d14f      	bne.n	8003e88 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <HAL_SPI_Transmit+0xf6>
 8003df0:	8afb      	ldrh	r3, [r7, #22]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d142      	bne.n	8003e7c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	881a      	ldrh	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	1c9a      	adds	r2, r3, #2
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e1a:	e02f      	b.n	8003e7c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d112      	bne.n	8003e50 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	881a      	ldrh	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	1c9a      	adds	r2, r3, #2
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e4e:	e015      	b.n	8003e7c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e50:	f7fd ffac 	bl	8001dac <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d803      	bhi.n	8003e68 <HAL_SPI_Transmit+0x168>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d102      	bne.n	8003e6e <HAL_SPI_Transmit+0x16e>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e7a:	e07b      	b.n	8003f74 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1ca      	bne.n	8003e1c <HAL_SPI_Transmit+0x11c>
 8003e86:	e050      	b.n	8003f2a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_SPI_Transmit+0x196>
 8003e90:	8afb      	ldrh	r3, [r7, #22]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d144      	bne.n	8003f20 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	7812      	ldrb	r2, [r2, #0]
 8003ea2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ebc:	e030      	b.n	8003f20 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d113      	bne.n	8003ef4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	7812      	ldrb	r2, [r2, #0]
 8003ed8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ef2:	e015      	b.n	8003f20 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ef4:	f7fd ff5a 	bl	8001dac <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d803      	bhi.n	8003f0c <HAL_SPI_Transmit+0x20c>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d102      	bne.n	8003f12 <HAL_SPI_Transmit+0x212>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f1e:	e029      	b.n	8003f74 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1c9      	bne.n	8003ebe <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	6839      	ldr	r1, [r7, #0]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fbcc 	bl	80046cc <SPI_EndRxTxTransaction>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e003      	b.n	8003f74 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b088      	sub	sp, #32
 8003f8a:	af02      	add	r7, sp, #8
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003faa:	e0fb      	b.n	80041a4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb4:	d112      	bne.n	8003fdc <HAL_SPI_Receive+0x56>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10e      	bne.n	8003fdc <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f8ef 	bl	80041b6 <HAL_SPI_TransmitReceive>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	e0e8      	b.n	80041ae <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_SPI_Receive+0x64>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e0e1      	b.n	80041ae <HAL_SPI_Receive+0x228>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff2:	f7fd fedb 	bl	8001dac <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_SPI_Receive+0x7e>
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004008:	e0cc      	b.n	80041a4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2204      	movs	r2, #4
 800400e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	88fa      	ldrh	r2, [r7, #6]
 8004022:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	88fa      	ldrh	r2, [r7, #6]
 8004028:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004050:	d10f      	bne.n	8004072 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004060:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d007      	beq.n	8004090 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800408e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d16a      	bne.n	800416e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004098:	e032      	b.n	8004100 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d115      	bne.n	80040d4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f103 020c 	add.w	r2, r3, #12
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	7812      	ldrb	r2, [r2, #0]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040d2:	e015      	b.n	8004100 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040d4:	f7fd fe6a 	bl	8001dac <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d803      	bhi.n	80040ec <HAL_SPI_Receive+0x166>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d102      	bne.n	80040f2 <HAL_SPI_Receive+0x16c>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80040fe:	e051      	b.n	80041a4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1c7      	bne.n	800409a <HAL_SPI_Receive+0x114>
 800410a:	e035      	b.n	8004178 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b01      	cmp	r3, #1
 8004118:	d113      	bne.n	8004142 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	b292      	uxth	r2, r2
 8004126:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	1c9a      	adds	r2, r3, #2
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004140:	e015      	b.n	800416e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004142:	f7fd fe33 	bl	8001dac <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d803      	bhi.n	800415a <HAL_SPI_Receive+0x1d4>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d102      	bne.n	8004160 <HAL_SPI_Receive+0x1da>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800416c:	e01a      	b.n	80041a4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1c9      	bne.n	800410c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	6839      	ldr	r1, [r7, #0]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fa53 	bl	8004628 <SPI_EndRxTransaction>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
 800419a:	e003      	b.n	80041a4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b08c      	sub	sp, #48	; 0x30
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041c4:	2301      	movs	r3, #1
 80041c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x26>
 80041d8:	2302      	movs	r3, #2
 80041da:	e198      	b.n	800450e <HAL_SPI_TransmitReceive+0x358>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041e4:	f7fd fde2 	bl	8001dac <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041fa:	887b      	ldrh	r3, [r7, #2]
 80041fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004202:	2b01      	cmp	r3, #1
 8004204:	d00f      	beq.n	8004226 <HAL_SPI_TransmitReceive+0x70>
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420c:	d107      	bne.n	800421e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <HAL_SPI_TransmitReceive+0x68>
 8004216:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800421a:	2b04      	cmp	r3, #4
 800421c:	d003      	beq.n	8004226 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800421e:	2302      	movs	r3, #2
 8004220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004224:	e16d      	b.n	8004502 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_SPI_TransmitReceive+0x82>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_SPI_TransmitReceive+0x82>
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800423e:	e160      	b.n	8004502 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b04      	cmp	r3, #4
 800424a:	d003      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2205      	movs	r2, #5
 8004250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	887a      	ldrh	r2, [r7, #2]
 8004264:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	887a      	ldrh	r2, [r7, #2]
 800426a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	887a      	ldrh	r2, [r7, #2]
 8004276:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d007      	beq.n	80042a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b0:	d17c      	bne.n	80043ac <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_SPI_TransmitReceive+0x10a>
 80042ba:	8b7b      	ldrh	r3, [r7, #26]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d16a      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	881a      	ldrh	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	1c9a      	adds	r2, r3, #2
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042e4:	e057      	b.n	8004396 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d11b      	bne.n	800432c <HAL_SPI_TransmitReceive+0x176>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d016      	beq.n	800432c <HAL_SPI_TransmitReceive+0x176>
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d113      	bne.n	800432c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	881a      	ldrh	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	1c9a      	adds	r2, r3, #2
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d119      	bne.n	800436e <HAL_SPI_TransmitReceive+0x1b8>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d014      	beq.n	800436e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	b292      	uxth	r2, r2
 8004350:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	1c9a      	adds	r2, r3, #2
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800436a:	2301      	movs	r3, #1
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800436e:	f7fd fd1d 	bl	8001dac <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800437a:	429a      	cmp	r2, r3
 800437c:	d80b      	bhi.n	8004396 <HAL_SPI_TransmitReceive+0x1e0>
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d007      	beq.n	8004396 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004394:	e0b5      	b.n	8004502 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1a2      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x130>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d19d      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x130>
 80043aa:	e080      	b.n	80044ae <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <HAL_SPI_TransmitReceive+0x204>
 80043b4:	8b7b      	ldrh	r3, [r7, #26]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d16f      	bne.n	800449a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	330c      	adds	r3, #12
 80043c4:	7812      	ldrb	r2, [r2, #0]
 80043c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043e0:	e05b      	b.n	800449a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d11c      	bne.n	800442a <HAL_SPI_TransmitReceive+0x274>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d017      	beq.n	800442a <HAL_SPI_TransmitReceive+0x274>
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d114      	bne.n	800442a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	7812      	ldrb	r2, [r2, #0]
 800440c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b01      	cmp	r3, #1
 8004436:	d119      	bne.n	800446c <HAL_SPI_TransmitReceive+0x2b6>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d014      	beq.n	800446c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004468:	2301      	movs	r3, #1
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800446c:	f7fd fc9e 	bl	8001dac <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004478:	429a      	cmp	r2, r3
 800447a:	d803      	bhi.n	8004484 <HAL_SPI_TransmitReceive+0x2ce>
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d102      	bne.n	800448a <HAL_SPI_TransmitReceive+0x2d4>
 8004484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004498:	e033      	b.n	8004502 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d19e      	bne.n	80043e2 <HAL_SPI_TransmitReceive+0x22c>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d199      	bne.n	80043e2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f90a 	bl	80046cc <SPI_EndRxTxTransaction>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80044ca:	e01a      	b.n	8004502 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044f8:	e003      	b.n	8004502 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800450a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800450e:	4618      	mov	r0, r3
 8004510:	3730      	adds	r7, #48	; 0x30
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004528:	f7fd fc40 	bl	8001dac <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	4413      	add	r3, r2
 8004536:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004538:	f7fd fc38 	bl	8001dac <HAL_GetTick>
 800453c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800453e:	4b39      	ldr	r3, [pc, #228]	; (8004624 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	015b      	lsls	r3, r3, #5
 8004544:	0d1b      	lsrs	r3, r3, #20
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	fb02 f303 	mul.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800454e:	e054      	b.n	80045fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d050      	beq.n	80045fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004558:	f7fd fc28 	bl	8001dac <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	429a      	cmp	r2, r3
 8004566:	d902      	bls.n	800456e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d13d      	bne.n	80045ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800457c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004586:	d111      	bne.n	80045ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004590:	d004      	beq.n	800459c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459a:	d107      	bne.n	80045ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b4:	d10f      	bne.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e017      	b.n	800461a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4013      	ands	r3, r2
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	429a      	cmp	r2, r3
 8004616:	d19b      	bne.n	8004550 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000000 	.word	0x20000000

08004628 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463c:	d111      	bne.n	8004662 <SPI_EndRxTransaction+0x3a>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004646:	d004      	beq.n	8004652 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004650:	d107      	bne.n	8004662 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004660:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800466a:	d117      	bne.n	800469c <SPI_EndRxTransaction+0x74>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004674:	d112      	bne.n	800469c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2200      	movs	r2, #0
 800467e:	2101      	movs	r1, #1
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7ff ff49 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01a      	beq.n	80046c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e013      	b.n	80046c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2200      	movs	r2, #0
 80046a4:	2180      	movs	r1, #128	; 0x80
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff ff36 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	f043 0220 	orr.w	r2, r3, #32
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e000      	b.n	80046c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2200      	movs	r2, #0
 80046e0:	2180      	movs	r1, #128	; 0x80
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff ff18 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d007      	beq.n	80046fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e000      	b.n	8004700 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e042      	b.n	80047a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fd f964 	bl	80019fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2224      	movs	r2, #36	; 0x24
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fdfb 	bl	8005348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695a      	ldr	r2, [r3, #20]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d16d      	bne.n	80048a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_UART_Transmit+0x2c>
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e066      	b.n	80048a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2221      	movs	r2, #33	; 0x21
 80047e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047e6:	f7fd fae1 	bl	8001dac <HAL_GetTick>
 80047ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	88fa      	ldrh	r2, [r7, #6]
 80047f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004800:	d108      	bne.n	8004814 <HAL_UART_Transmit+0x6c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d104      	bne.n	8004814 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	e003      	b.n	800481c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004818:	2300      	movs	r3, #0
 800481a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800481c:	e02a      	b.n	8004874 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2200      	movs	r2, #0
 8004826:	2180      	movs	r1, #128	; 0x80
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 fb4a 	bl	8004ec2 <UART_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e036      	b.n	80048a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800484c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	3302      	adds	r3, #2
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	e007      	b.n	8004866 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	3301      	adds	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1cf      	bne.n	800481e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	2140      	movs	r1, #64	; 0x40
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fb1a 	bl	8004ec2 <UART_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e006      	b.n	80048a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b08c      	sub	sp, #48	; 0x30
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	4613      	mov	r3, r2
 80048ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d14a      	bne.n	800495e <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e043      	b.n	8004960 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	461a      	mov	r2, r3
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 fb57 	bl	8004f9e <UART_Start_Receive_IT>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80048f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d12c      	bne.n	8004958 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	2b01      	cmp	r3, #1
 8004904:	d125      	bne.n	8004952 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	617b      	str	r3, [r7, #20]
   return(result);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f043 0310 	orr.w	r3, r3, #16
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800493c:	627a      	str	r2, [r7, #36]	; 0x24
 800493e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6a39      	ldr	r1, [r7, #32]
 8004942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	61fb      	str	r3, [r7, #28]
   return(result);
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e5      	bne.n	800491c <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004950:	e002      	b.n	8004958 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800495c:	e000      	b.n	8004960 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800495e:	2302      	movs	r3, #2
  }
}
 8004960:	4618      	mov	r0, r3
 8004962:	3730      	adds	r7, #48	; 0x30
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b0ba      	sub	sp, #232	; 0xe8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800498e:	2300      	movs	r3, #0
 8004990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004994:	2300      	movs	r3, #0
 8004996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800499a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10f      	bne.n	80049ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <HAL_UART_IRQHandler+0x66>
 80049ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fbff 	bl	80051ca <UART_Receive_IT>
      return;
 80049cc:	e25b      	b.n	8004e86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 80de 	beq.w	8004b94 <HAL_UART_IRQHandler+0x22c>
 80049d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80d1 	beq.w	8004b94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <HAL_UART_IRQHandler+0xae>
 80049fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	f043 0201 	orr.w	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00b      	beq.n	8004a3a <HAL_UART_IRQHandler+0xd2>
 8004a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a32:	f043 0202 	orr.w	r2, r3, #2
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <HAL_UART_IRQHandler+0xf6>
 8004a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	f043 0204 	orr.w	r2, r3, #4
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d011      	beq.n	8004a8e <HAL_UART_IRQHandler+0x126>
 8004a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	f043 0208 	orr.w	r2, r3, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 81f2 	beq.w	8004e7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x14e>
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fb8a 	bl	80051ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x17a>
 8004ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d04f      	beq.n	8004b82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fa94 	bl	8005010 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d041      	beq.n	8004b7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3314      	adds	r3, #20
 8004afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3314      	adds	r3, #20
 8004b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1d9      	bne.n	8004af6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d013      	beq.n	8004b72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4e:	4a7e      	ldr	r2, [pc, #504]	; (8004d48 <HAL_UART_IRQHandler+0x3e0>)
 8004b50:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fd fcb0 	bl	80024bc <HAL_DMA_Abort_IT>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d016      	beq.n	8004b90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e00e      	b.n	8004b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f99c 	bl	8004eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e00a      	b.n	8004b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f998 	bl	8004eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	e006      	b.n	8004b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f994 	bl	8004eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004b8e:	e175      	b.n	8004e7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	bf00      	nop
    return;
 8004b92:	e173      	b.n	8004e7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	f040 814f 	bne.w	8004e3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8148 	beq.w	8004e3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8141 	beq.w	8004e3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 80b6 	beq.w	8004d4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8145 	beq.w	8004e80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	f080 813e 	bcs.w	8004e80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	f000 8088 	beq.w	8004d28 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c44:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1d9      	bne.n	8004c18 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3314      	adds	r3, #20
 8004c6a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c6e:	e853 3f00 	ldrex	r3, [r3]
 8004c72:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3314      	adds	r3, #20
 8004c84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c88:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e1      	bne.n	8004c64 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3314      	adds	r3, #20
 8004ca6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3314      	adds	r3, #20
 8004cc0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cc4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e3      	bne.n	8004ca0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	330c      	adds	r3, #12
 8004cec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf8:	f023 0310 	bic.w	r3, r3, #16
 8004cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d0c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1e3      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fd fb8f 	bl	8002446 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fc fcdc 	bl	80016fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d44:	e09c      	b.n	8004e80 <HAL_UART_IRQHandler+0x518>
 8004d46:	bf00      	nop
 8004d48:	080050d5 	.word	0x080050d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 808e 	beq.w	8004e84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8089 	beq.w	8004e84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	330c      	adds	r3, #12
 8004d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d96:	647a      	str	r2, [r7, #68]	; 0x44
 8004d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1e3      	bne.n	8004d72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3314      	adds	r3, #20
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	623b      	str	r3, [r7, #32]
   return(result);
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3314      	adds	r3, #20
 8004dca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dce:	633a      	str	r2, [r7, #48]	; 0x30
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e3      	bne.n	8004daa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0310 	bic.w	r3, r3, #16
 8004e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e14:	61fa      	str	r2, [r7, #28]
 8004e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	69b9      	ldr	r1, [r7, #24]
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	617b      	str	r3, [r7, #20]
   return(result);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e3      	bne.n	8004df0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fc fc61 	bl	80016fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e3a:	e023      	b.n	8004e84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d009      	beq.n	8004e5c <HAL_UART_IRQHandler+0x4f4>
 8004e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f951 	bl	80050fc <UART_Transmit_IT>
    return;
 8004e5a:	e014      	b.n	8004e86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00e      	beq.n	8004e86 <HAL_UART_IRQHandler+0x51e>
 8004e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f990 	bl	800519a <UART_EndTransmit_IT>
    return;
 8004e7a:	e004      	b.n	8004e86 <HAL_UART_IRQHandler+0x51e>
    return;
 8004e7c:	bf00      	nop
 8004e7e:	e002      	b.n	8004e86 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e80:	bf00      	nop
 8004e82:	e000      	b.n	8004e86 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e84:	bf00      	nop
  }
}
 8004e86:	37e8      	adds	r7, #232	; 0xe8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr

08004e9e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b090      	sub	sp, #64	; 0x40
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed2:	e050      	b.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d04c      	beq.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ee2:	f7fc ff63 	bl	8001dac <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d241      	bcs.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	330c      	adds	r3, #12
 8004f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f12:	637a      	str	r2, [r7, #52]	; 0x34
 8004f14:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e5      	bne.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3314      	adds	r3, #20
 8004f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	613b      	str	r3, [r7, #16]
   return(result);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3314      	adds	r3, #20
 8004f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f46:	623a      	str	r2, [r7, #32]
 8004f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	69f9      	ldr	r1, [r7, #28]
 8004f4c:	6a3a      	ldr	r2, [r7, #32]
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e5      	bne.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e00f      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	bf0c      	ite	eq
 8004f86:	2301      	moveq	r3, #1
 8004f88:	2300      	movne	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d09f      	beq.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3740      	adds	r7, #64	; 0x40
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	88fa      	ldrh	r2, [r7, #6]
 8004fb6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	88fa      	ldrh	r2, [r7, #6]
 8004fbc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2222      	movs	r2, #34	; 0x22
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fe2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0220 	orr.w	r2, r2, #32
 8005002:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005010:	b480      	push	{r7}
 8005012:	b095      	sub	sp, #84	; 0x54
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800502e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	330c      	adds	r3, #12
 8005036:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005038:	643a      	str	r2, [r7, #64]	; 0x40
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800503e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e5      	bne.n	8005018 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3314      	adds	r3, #20
 8005052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	61fb      	str	r3, [r7, #28]
   return(result);
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3314      	adds	r3, #20
 800506a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e5      	bne.n	800504c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	2b01      	cmp	r3, #1
 8005086:	d119      	bne.n	80050bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	60bb      	str	r3, [r7, #8]
   return(result);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f023 0310 	bic.w	r3, r3, #16
 800509e:	647b      	str	r3, [r7, #68]	; 0x44
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a8:	61ba      	str	r2, [r7, #24]
 80050aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6979      	ldr	r1, [r7, #20]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	613b      	str	r3, [r7, #16]
   return(result);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050ca:	bf00      	nop
 80050cc:	3754      	adds	r7, #84	; 0x54
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr

080050d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff fede 	bl	8004eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b21      	cmp	r3, #33	; 0x21
 800510e:	d13e      	bne.n	800518e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005118:	d114      	bne.n	8005144 <UART_Transmit_IT+0x48>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d110      	bne.n	8005144 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005136:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	1c9a      	adds	r2, r3, #2
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	621a      	str	r2, [r3, #32]
 8005142:	e008      	b.n	8005156 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	1c59      	adds	r1, r3, #1
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6211      	str	r1, [r2, #32]
 800514e:	781a      	ldrb	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29b      	uxth	r3, r3
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	4619      	mov	r1, r3
 8005164:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10f      	bne.n	800518a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005178:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005188:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	e000      	b.n	8005190 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800518e:	2302      	movs	r3, #2
  }
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr

0800519a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fe66 	bl	8004e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b08c      	sub	sp, #48	; 0x30
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b22      	cmp	r3, #34	; 0x22
 80051dc:	f040 80ae 	bne.w	800533c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e8:	d117      	bne.n	800521a <UART_Receive_IT+0x50>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d113      	bne.n	800521a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005208:	b29a      	uxth	r2, r3
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	1c9a      	adds	r2, r3, #2
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	629a      	str	r2, [r3, #40]	; 0x28
 8005218:	e026      	b.n	8005268 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522c:	d007      	beq.n	800523e <UART_Receive_IT+0x74>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <UART_Receive_IT+0x82>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	b2da      	uxtb	r2, r3
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	e008      	b.n	800525e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005258:	b2da      	uxtb	r2, r3
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29b      	uxth	r3, r3
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	4619      	mov	r1, r3
 8005276:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005278:	2b00      	cmp	r3, #0
 800527a:	d15d      	bne.n	8005338 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0220 	bic.w	r2, r2, #32
 800528a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800529a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0201 	bic.w	r2, r2, #1
 80052aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d135      	bne.n	800532e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	330c      	adds	r3, #12
 80052ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	613b      	str	r3, [r7, #16]
   return(result);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f023 0310 	bic.w	r3, r3, #16
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e8:	623a      	str	r2, [r7, #32]
 80052ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	69f9      	ldr	r1, [r7, #28]
 80052ee:	6a3a      	ldr	r2, [r7, #32]
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b10      	cmp	r3, #16
 8005308:	d10a      	bne.n	8005320 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fc f9e8 	bl	80016fc <HAL_UARTEx_RxEventCallback>
 800532c:	e002      	b.n	8005334 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fdb5 	bl	8004e9e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	e002      	b.n	800533e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	e000      	b.n	800533e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800533c:	2302      	movs	r3, #2
  }
}
 800533e:	4618      	mov	r0, r3
 8005340:	3730      	adds	r7, #48	; 0x30
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005382:	f023 030c 	bic.w	r3, r3, #12
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	430b      	orrs	r3, r1
 800538e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2c      	ldr	r2, [pc, #176]	; (800545c <UART_SetConfig+0x114>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d103      	bne.n	80053b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053b0:	f7fe fb3a 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	e002      	b.n	80053be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053b8:	f7fe fb22 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 80053bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009a      	lsls	r2, r3, #2
 80053c8:	441a      	add	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d4:	4a22      	ldr	r2, [pc, #136]	; (8005460 <UART_SetConfig+0x118>)
 80053d6:	fba2 2303 	umull	r2, r3, r2, r3
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	0119      	lsls	r1, r3, #4
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009a      	lsls	r2, r3, #2
 80053e8:	441a      	add	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053f4:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <UART_SetConfig+0x118>)
 80053f6:	fba3 0302 	umull	r0, r3, r3, r2
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2064      	movs	r0, #100	; 0x64
 80053fe:	fb00 f303 	mul.w	r3, r0, r3
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	3332      	adds	r3, #50	; 0x32
 8005408:	4a15      	ldr	r2, [pc, #84]	; (8005460 <UART_SetConfig+0x118>)
 800540a:	fba2 2303 	umull	r2, r3, r2, r3
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005414:	4419      	add	r1, r3
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009a      	lsls	r2, r3, #2
 8005420:	441a      	add	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	fbb2 f2f3 	udiv	r2, r2, r3
 800542c:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <UART_SetConfig+0x118>)
 800542e:	fba3 0302 	umull	r0, r3, r3, r2
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	2064      	movs	r0, #100	; 0x64
 8005436:	fb00 f303 	mul.w	r3, r0, r3
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	3332      	adds	r3, #50	; 0x32
 8005440:	4a07      	ldr	r2, [pc, #28]	; (8005460 <UART_SetConfig+0x118>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	f003 020f 	and.w	r2, r3, #15
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	440a      	add	r2, r1
 8005452:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40013800 	.word	0x40013800
 8005460:	51eb851f 	.word	0x51eb851f
 8005464:	00000000 	.word	0x00000000

08005468 <AWG_Load_Waveform>:
#include "math.h"

#define MaxDepth 2048 // max AWG samples

void AWG_Load_Waveform(AWG_setup_struct AWG1)
{
 8005468:	b084      	sub	sp, #16
 800546a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8005476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOLA_enable_features(AWG_EN, 0); // disable AWG
 800547a:	2100      	movs	r1, #0
 800547c:	2002      	movs	r0, #2
 800547e:	f000 fb63 	bl	8005b48 <LOLA_enable_features>

	uint8_t byte[4];
	int16_t data;

	uint16_t depth = trimInt((int)round(DACmaxFreq/AWG1.Freq), 1, (MaxDepth-1));
 8005482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005486:	a1b0      	add	r1, pc, #704	; (adr r1, 8005748 <AWG_Load_Waveform+0x2e0>)
 8005488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800548c:	f7fb f958 	bl	8000740 <__aeabi_ddiv>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4610      	mov	r0, r2
 8005496:	4619      	mov	r1, r3
 8005498:	f004 f8c2 	bl	8009620 <round>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4610      	mov	r0, r2
 80054a2:	4619      	mov	r1, r3
 80054a4:	f7fb fad2 	bl	8000a4c <__aeabi_d2iz>
 80054a8:	4603      	mov	r3, r0
 80054aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80054ae:	2101      	movs	r1, #1
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 f913 	bl	80066dc <trimInt>
 80054b6:	4603      	mov	r3, r0
 80054b8:	827b      	strh	r3, [r7, #18]


	uint16_t DepthPos = trimInt((int)round(depth*AWG1.DutyCycle/100), 1, (MaxDepth-1));
 80054ba:	8a7b      	ldrh	r3, [r7, #18]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fb fc17 	bl	8000cf0 <__aeabi_i2f>
 80054c2:	4602      	mov	r2, r0
 80054c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c6:	4619      	mov	r1, r3
 80054c8:	4610      	mov	r0, r2
 80054ca:	f7fb fc65 	bl	8000d98 <__aeabi_fmul>
 80054ce:	4603      	mov	r3, r0
 80054d0:	49a1      	ldr	r1, [pc, #644]	; (8005758 <AWG_Load_Waveform+0x2f0>)
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fb fd14 	bl	8000f00 <__aeabi_fdiv>
 80054d8:	4603      	mov	r3, r0
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fa ffae 	bl	800043c <__aeabi_f2d>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4610      	mov	r0, r2
 80054e6:	4619      	mov	r1, r3
 80054e8:	f004 f89a 	bl	8009620 <round>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4610      	mov	r0, r2
 80054f2:	4619      	mov	r1, r3
 80054f4:	f7fb faaa 	bl	8000a4c <__aeabi_d2iz>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80054fe:	2101      	movs	r1, #1
 8005500:	4618      	mov	r0, r3
 8005502:	f001 f8eb 	bl	80066dc <trimInt>
 8005506:	4603      	mov	r3, r0
 8005508:	823b      	strh	r3, [r7, #16]
	uint16_t DepthNeg = trimInt((int)(depth-DepthPos), 1, (MaxDepth-1));
 800550a:	8a7a      	ldrh	r2, [r7, #18]
 800550c:	8a3b      	ldrh	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005514:	2101      	movs	r1, #1
 8005516:	4618      	mov	r0, r3
 8005518:	f001 f8e0 	bl	80066dc <trimInt>
 800551c:	4603      	mov	r3, r0
 800551e:	81fb      	strh	r3, [r7, #14]

	// setting sample count
	byte[0] = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	703b      	strb	r3, [r7, #0]
	byte[1] = (uint8_t)((depth>>8)&0x00ff);
 8005524:	8a7b      	ldrh	r3, [r7, #18]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	b29b      	uxth	r3, r3
 800552a:	b2db      	uxtb	r3, r3
 800552c:	707b      	strb	r3, [r7, #1]
	byte[2] = (uint8_t)(depth&0x00ff);
 800552e:	8a7b      	ldrh	r3, [r7, #18]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	70bb      	strb	r3, [r7, #2]
	byte[3] = (uint8_t)AWG_MAXADRESS;
 8005534:	2306      	movs	r3, #6
 8005536:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005538:	4639      	mov	r1, r7
 800553a:	2364      	movs	r3, #100	; 0x64
 800553c:	2204      	movs	r2, #4
 800553e:	4887      	ldr	r0, [pc, #540]	; (800575c <AWG_Load_Waveform+0x2f4>)
 8005540:	f7fe fbde 	bl	8003d00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005544:	2200      	movs	r2, #0
 8005546:	2110      	movs	r1, #16
 8005548:	4885      	ldr	r0, [pc, #532]	; (8005760 <AWG_Load_Waveform+0x2f8>)
 800554a:	f7fd f9ca 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 800554e:	2201      	movs	r2, #1
 8005550:	2110      	movs	r1, #16
 8005552:	4883      	ldr	r0, [pc, #524]	; (8005760 <AWG_Load_Waveform+0x2f8>)
 8005554:	f7fd f9c5 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005558:	2200      	movs	r2, #0
 800555a:	2110      	movs	r1, #16
 800555c:	4880      	ldr	r0, [pc, #512]	; (8005760 <AWG_Load_Waveform+0x2f8>)
 800555e:	f7fd f9c0 	bl	80028e2 <HAL_GPIO_WritePin>

	//Setting up clock
	uint32_t D = (uint32_t)round(MCLKfreq/(depth*AWG1.Freq));
 8005562:	8a7b      	ldrh	r3, [r7, #18]
 8005564:	4618      	mov	r0, r3
 8005566:	f7fa ff57 	bl	8000418 <__aeabi_i2d>
 800556a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800556e:	f7fa ffbd 	bl	80004ec <__aeabi_dmul>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	a176      	add	r1, pc, #472	; (adr r1, 8005750 <AWG_Load_Waveform+0x2e8>)
 8005578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800557c:	f7fb f8e0 	bl	8000740 <__aeabi_ddiv>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4610      	mov	r0, r2
 8005586:	4619      	mov	r1, r3
 8005588:	f004 f84a 	bl	8009620 <round>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	f7fb fa82 	bl	8000a9c <__aeabi_d2uiz>
 8005598:	4603      	mov	r3, r0
 800559a:	60bb      	str	r3, [r7, #8]

	data = D;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	82fb      	strh	r3, [r7, #22]

	byte[0] = (uint8_t)((data>>16)&0x00ff);
 80055a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055a4:	141b      	asrs	r3, r3, #16
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	703b      	strb	r3, [r7, #0]
	byte[1] = (uint8_t)((data>>8)&0x00ff);
 80055aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055ae:	121b      	asrs	r3, r3, #8
 80055b0:	b21b      	sxth	r3, r3
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	707b      	strb	r3, [r7, #1]
	byte[2] = (uint8_t)(data&0x00ff);
 80055b6:	8afb      	ldrh	r3, [r7, #22]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	70bb      	strb	r3, [r7, #2]
	byte[3] = (uint8_t)AWG_D;
 80055bc:	2302      	movs	r3, #2
 80055be:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80055c0:	4639      	mov	r1, r7
 80055c2:	2364      	movs	r3, #100	; 0x64
 80055c4:	2204      	movs	r2, #4
 80055c6:	4865      	ldr	r0, [pc, #404]	; (800575c <AWG_Load_Waveform+0x2f4>)
 80055c8:	f7fe fb9a 	bl	8003d00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80055cc:	2201      	movs	r2, #1
 80055ce:	2110      	movs	r1, #16
 80055d0:	4863      	ldr	r0, [pc, #396]	; (8005760 <AWG_Load_Waveform+0x2f8>)
 80055d2:	f7fd f986 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80055d6:	2200      	movs	r2, #0
 80055d8:	2110      	movs	r1, #16
 80055da:	4861      	ldr	r0, [pc, #388]	; (8005760 <AWG_Load_Waveform+0x2f8>)
 80055dc:	f7fd f981 	bl	80028e2 <HAL_GPIO_WritePin>

	// loading waveform
	float relativeDACcode = 2047*AWG1.Upp/(2*MAX_AMPLITUDE); // multiply any number from -1 to 1 and you will get direct code for DAC
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	4960      	ldr	r1, [pc, #384]	; (8005764 <AWG_Load_Waveform+0x2fc>)
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fb fbd7 	bl	8000d98 <__aeabi_fmul>
 80055ea:	4603      	mov	r3, r0
 80055ec:	461c      	mov	r4, r3
 80055ee:	4b5e      	ldr	r3, [pc, #376]	; (8005768 <AWG_Load_Waveform+0x300>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4619      	mov	r1, r3
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fb fac7 	bl	8000b88 <__addsf3>
 80055fa:	4603      	mov	r3, r0
 80055fc:	4619      	mov	r1, r3
 80055fe:	4620      	mov	r0, r4
 8005600:	f7fb fc7e 	bl	8000f00 <__aeabi_fdiv>
 8005604:	4603      	mov	r3, r0
 8005606:	607b      	str	r3, [r7, #4]

	for(int16_t addr = 0; addr < depth; addr++)
 8005608:	2300      	movs	r3, #0
 800560a:	82bb      	strh	r3, [r7, #20]
 800560c:	e16b      	b.n	80058e6 <AWG_Load_Waveform+0x47e>
	{

		switch(AWG1.waveform)
 800560e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005612:	2b03      	cmp	r3, #3
 8005614:	f200 8133 	bhi.w	800587e <AWG_Load_Waveform+0x416>
 8005618:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <AWG_Load_Waveform+0x1b8>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005631 	.word	0x08005631
 8005624:	080056c5 	.word	0x080056c5
 8005628:	080057fb 	.word	0x080057fb
 800562c:	0800587f 	.word	0x0800587f
		{
			case Square: data = (int16_t)round((addr>=(depth*AWG1.DutyCycle/100))*relativeDACcode-(relativeDACcode/2.0)); break;
 8005630:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005634:	4618      	mov	r0, r3
 8005636:	f7fb fb5b 	bl	8000cf0 <__aeabi_i2f>
 800563a:	4604      	mov	r4, r0
 800563c:	8a7b      	ldrh	r3, [r7, #18]
 800563e:	4618      	mov	r0, r3
 8005640:	f7fb fb56 	bl	8000cf0 <__aeabi_i2f>
 8005644:	4602      	mov	r2, r0
 8005646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7fb fba4 	bl	8000d98 <__aeabi_fmul>
 8005650:	4603      	mov	r3, r0
 8005652:	4941      	ldr	r1, [pc, #260]	; (8005758 <AWG_Load_Waveform+0x2f0>)
 8005654:	4618      	mov	r0, r3
 8005656:	f7fb fc53 	bl	8000f00 <__aeabi_fdiv>
 800565a:	4603      	mov	r3, r0
 800565c:	4619      	mov	r1, r3
 800565e:	4620      	mov	r0, r4
 8005660:	f7fb fd4c 	bl	80010fc <__aeabi_fcmpge>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <AWG_Load_Waveform+0x208>
 800566a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800566e:	e001      	b.n	8005674 <AWG_Load_Waveform+0x20c>
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4618      	mov	r0, r3
 8005678:	f7fb fb8e 	bl	8000d98 <__aeabi_fmul>
 800567c:	4603      	mov	r3, r0
 800567e:	4618      	mov	r0, r3
 8005680:	f7fa fedc 	bl	800043c <__aeabi_f2d>
 8005684:	4604      	mov	r4, r0
 8005686:	460d      	mov	r5, r1
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7fa fed7 	bl	800043c <__aeabi_f2d>
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005696:	f7fb f853 	bl	8000740 <__aeabi_ddiv>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4620      	mov	r0, r4
 80056a0:	4629      	mov	r1, r5
 80056a2:	f7fa fd6b 	bl	800017c <__aeabi_dsub>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4610      	mov	r0, r2
 80056ac:	4619      	mov	r1, r3
 80056ae:	f003 ffb7 	bl	8009620 <round>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4610      	mov	r0, r2
 80056b8:	4619      	mov	r1, r3
 80056ba:	f7fb f9c7 	bl	8000a4c <__aeabi_d2iz>
 80056be:	4603      	mov	r3, r0
 80056c0:	82fb      	strh	r3, [r7, #22]
 80056c2:	e0dc      	b.n	800587e <AWG_Load_Waveform+0x416>

			case Triangle:	if(addr <= DepthPos) data = (int16_t)round(relativeDACcode*addr/(DepthPos*1.0)-(relativeDACcode/2.0)); // rising edge
 80056c4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80056c8:	8a3b      	ldrh	r3, [r7, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	dc4e      	bgt.n	800576c <AWG_Load_Waveform+0x304>
 80056ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fb fb0c 	bl	8000cf0 <__aeabi_i2f>
 80056d8:	4603      	mov	r3, r0
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fb fb5b 	bl	8000d98 <__aeabi_fmul>
 80056e2:	4603      	mov	r3, r0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fa fea9 	bl	800043c <__aeabi_f2d>
 80056ea:	4604      	mov	r4, r0
 80056ec:	460d      	mov	r5, r1
 80056ee:	8a3b      	ldrh	r3, [r7, #16]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fa fe91 	bl	8000418 <__aeabi_i2d>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4620      	mov	r0, r4
 80056fc:	4629      	mov	r1, r5
 80056fe:	f7fb f81f 	bl	8000740 <__aeabi_ddiv>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4614      	mov	r4, r2
 8005708:	461d      	mov	r5, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fa fe96 	bl	800043c <__aeabi_f2d>
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005718:	f7fb f812 	bl	8000740 <__aeabi_ddiv>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4620      	mov	r0, r4
 8005722:	4629      	mov	r1, r5
 8005724:	f7fa fd2a 	bl	800017c <__aeabi_dsub>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4610      	mov	r0, r2
 800572e:	4619      	mov	r1, r3
 8005730:	f003 ff76 	bl	8009620 <round>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4610      	mov	r0, r2
 800573a:	4619      	mov	r1, r3
 800573c:	f7fb f986 	bl	8000a4c <__aeabi_d2iz>
 8005740:	4603      	mov	r3, r0
 8005742:	82fb      	strh	r3, [r7, #22]
							else data = (int16_t)round(relativeDACcode*(1-(addr-DepthPos)/(DepthNeg*1.0))-(relativeDACcode/2.0)); break; // falling edge
 8005744:	e09b      	b.n	800587e <AWG_Load_Waveform+0x416>
 8005746:	bf00      	nop
 8005748:	00000000 	.word	0x00000000
 800574c:	417312d0 	.word	0x417312d0
 8005750:	00000000 	.word	0x00000000
 8005754:	41b0b076 	.word	0x41b0b076
 8005758:	42c80000 	.word	0x42c80000
 800575c:	20000290 	.word	0x20000290
 8005760:	40010800 	.word	0x40010800
 8005764:	44ffe000 	.word	0x44ffe000
 8005768:	2000037c 	.word	0x2000037c
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fa fe65 	bl	800043c <__aeabi_f2d>
 8005772:	4604      	mov	r4, r0
 8005774:	460d      	mov	r5, r1
 8005776:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800577a:	8a3b      	ldrh	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	4618      	mov	r0, r3
 8005780:	f7fa fe4a 	bl	8000418 <__aeabi_i2d>
 8005784:	4680      	mov	r8, r0
 8005786:	4689      	mov	r9, r1
 8005788:	89fb      	ldrh	r3, [r7, #14]
 800578a:	4618      	mov	r0, r3
 800578c:	f7fa fe44 	bl	8000418 <__aeabi_i2d>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4640      	mov	r0, r8
 8005796:	4649      	mov	r1, r9
 8005798:	f7fa ffd2 	bl	8000740 <__aeabi_ddiv>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	f04f 0000 	mov.w	r0, #0
 80057a4:	495a      	ldr	r1, [pc, #360]	; (8005910 <AWG_Load_Waveform+0x4a8>)
 80057a6:	f7fa fce9 	bl	800017c <__aeabi_dsub>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4620      	mov	r0, r4
 80057b0:	4629      	mov	r1, r5
 80057b2:	f7fa fe9b 	bl	80004ec <__aeabi_dmul>
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	4614      	mov	r4, r2
 80057bc:	461d      	mov	r5, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fa fe3c 	bl	800043c <__aeabi_f2d>
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057cc:	f7fa ffb8 	bl	8000740 <__aeabi_ddiv>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4620      	mov	r0, r4
 80057d6:	4629      	mov	r1, r5
 80057d8:	f7fa fcd0 	bl	800017c <__aeabi_dsub>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4610      	mov	r0, r2
 80057e2:	4619      	mov	r1, r3
 80057e4:	f003 ff1c 	bl	8009620 <round>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4610      	mov	r0, r2
 80057ee:	4619      	mov	r1, r3
 80057f0:	f7fb f92c 	bl	8000a4c <__aeabi_d2iz>
 80057f4:	4603      	mov	r3, r0
 80057f6:	82fb      	strh	r3, [r7, #22]
 80057f8:	e041      	b.n	800587e <AWG_Load_Waveform+0x416>

			case Sine: data = (int16_t)round(relativeDACcode*sinf((addr*3.14159*2)/(1.0*depth))); break;
 80057fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fa fe0a 	bl	8000418 <__aeabi_i2d>
 8005804:	a340      	add	r3, pc, #256	; (adr r3, 8005908 <AWG_Load_Waveform+0x4a0>)
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	f7fa fe6f 	bl	80004ec <__aeabi_dmul>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4610      	mov	r0, r2
 8005814:	4619      	mov	r1, r3
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	f7fa fcb1 	bl	8000180 <__adddf3>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4614      	mov	r4, r2
 8005824:	461d      	mov	r5, r3
 8005826:	8a7b      	ldrh	r3, [r7, #18]
 8005828:	4618      	mov	r0, r3
 800582a:	f7fa fdf5 	bl	8000418 <__aeabi_i2d>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4620      	mov	r0, r4
 8005834:	4629      	mov	r1, r5
 8005836:	f7fa ff83 	bl	8000740 <__aeabi_ddiv>
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	4610      	mov	r0, r2
 8005840:	4619      	mov	r1, r3
 8005842:	f7fb f94b 	bl	8000adc <__aeabi_d2f>
 8005846:	4603      	mov	r3, r0
 8005848:	4618      	mov	r0, r3
 800584a:	f003 feaf 	bl	80095ac <sinf>
 800584e:	4603      	mov	r3, r0
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	f7fb faa0 	bl	8000d98 <__aeabi_fmul>
 8005858:	4603      	mov	r3, r0
 800585a:	4618      	mov	r0, r3
 800585c:	f7fa fdee 	bl	800043c <__aeabi_f2d>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4610      	mov	r0, r2
 8005866:	4619      	mov	r1, r3
 8005868:	f003 feda 	bl	8009620 <round>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4610      	mov	r0, r2
 8005872:	4619      	mov	r1, r3
 8005874:	f7fb f8ea 	bl	8000a4c <__aeabi_d2iz>
 8005878:	4603      	mov	r3, r0
 800587a:	82fb      	strh	r3, [r7, #22]
 800587c:	bf00      	nop

			case Func: break;
		}

		byte[0] = (int8_t)((addr>>4)&0x00ff);
 800587e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005882:	111b      	asrs	r3, r3, #4
 8005884:	b21b      	sxth	r3, r3
 8005886:	b2db      	uxtb	r3, r3
 8005888:	703b      	strb	r3, [r7, #0]
		byte[1] = (int8_t)(((data>>8)&0x000f)|((addr<<4)&0x00f0));
 800588a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800588e:	121b      	asrs	r3, r3, #8
 8005890:	b21b      	sxth	r3, r3
 8005892:	b25b      	sxtb	r3, r3
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	b25a      	sxtb	r2, r3
 800589a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	b25b      	sxtb	r3, r3
 80058a2:	f023 030f 	bic.w	r3, r3, #15
 80058a6:	b25b      	sxtb	r3, r3
 80058a8:	4313      	orrs	r3, r2
 80058aa:	b25b      	sxtb	r3, r3
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	707b      	strb	r3, [r7, #1]
		byte[2] = (int8_t)(data&0x00ff);
 80058b0:	8afb      	ldrh	r3, [r7, #22]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	70bb      	strb	r3, [r7, #2]
		byte[3] = (int8_t)AWG_DATA;
 80058b6:	2305      	movs	r3, #5
 80058b8:	70fb      	strb	r3, [r7, #3]

		HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80058ba:	4639      	mov	r1, r7
 80058bc:	2364      	movs	r3, #100	; 0x64
 80058be:	2204      	movs	r2, #4
 80058c0:	4814      	ldr	r0, [pc, #80]	; (8005914 <AWG_Load_Waveform+0x4ac>)
 80058c2:	f7fe fa1d 	bl	8003d00 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80058c6:	2201      	movs	r2, #1
 80058c8:	2110      	movs	r1, #16
 80058ca:	4813      	ldr	r0, [pc, #76]	; (8005918 <AWG_Load_Waveform+0x4b0>)
 80058cc:	f7fd f809 	bl	80028e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80058d0:	2200      	movs	r2, #0
 80058d2:	2110      	movs	r1, #16
 80058d4:	4810      	ldr	r0, [pc, #64]	; (8005918 <AWG_Load_Waveform+0x4b0>)
 80058d6:	f7fd f804 	bl	80028e2 <HAL_GPIO_WritePin>
	for(int16_t addr = 0; addr < depth; addr++)
 80058da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3301      	adds	r3, #1
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	82bb      	strh	r3, [r7, #20]
 80058e6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80058ea:	8a7b      	ldrh	r3, [r7, #18]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	f6ff ae8e 	blt.w	800560e <AWG_Load_Waveform+0x1a6>
	}
		LOLA_enable_features(AWG_EN, 1); // enable AWG
 80058f2:	2101      	movs	r1, #1
 80058f4:	2002      	movs	r0, #2
 80058f6:	f000 f927 	bl	8005b48 <LOLA_enable_features>
}
 80058fa:	bf00      	nop
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8005904:	b004      	add	sp, #16
 8005906:	4770      	bx	lr
 8005908:	f01b866e 	.word	0xf01b866e
 800590c:	400921f9 	.word	0x400921f9
 8005910:	3ff00000 	.word	0x3ff00000
 8005914:	20000290 	.word	0x20000290
 8005918:	40010800 	.word	0x40010800

0800591c <LOLA_CFG_SEL>:
#include "main.h"
#include "board.h"
#include "ProgRef.h"

void LOLA_CFG_SEL(InitType t)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	71fb      	strb	r3, [r7, #7]
	switch(t)
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	2b05      	cmp	r3, #5
 800592a:	f200 8081 	bhi.w	8005a30 <LOLA_CFG_SEL+0x114>
 800592e:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <LOLA_CFG_SEL+0x18>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	0800594d 	.word	0x0800594d
 8005938:	08005973 	.word	0x08005973
 800593c:	08005999 	.word	0x08005999
 8005940:	080059bf 	.word	0x080059bf
 8005944:	080059e5 	.word	0x080059e5
 8005948:	08005a0b 	.word	0x08005a0b
		{
			// reference: http://dangerousprototypes.com/docs/Xilinx_Spartan_3_FPGA_quick_start#Boot_configuration
			case Master_Serial:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 800594c:	2200      	movs	r2, #0
 800594e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005952:	4843      	ldr	r0, [pc, #268]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 8005954:	f7fc ffc5 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 8005958:	2200      	movs	r2, #0
 800595a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800595e:	4840      	ldr	r0, [pc, #256]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 8005960:	f7fc ffbf 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 8005964:	2200      	movs	r2, #0
 8005966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800596a:	483d      	ldr	r0, [pc, #244]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 800596c:	f7fc ffb9 	bl	80028e2 <HAL_GPIO_WritePin>
			break;
 8005970:	e071      	b.n	8005a56 <LOLA_CFG_SEL+0x13a>

			case SPI_FLASH:	// SPI FLASH
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 8005972:	2200      	movs	r2, #0
 8005974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005978:	4839      	ldr	r0, [pc, #228]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 800597a:	f7fc ffb2 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 800597e:	2200      	movs	r2, #0
 8005980:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005984:	4836      	ldr	r0, [pc, #216]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 8005986:	f7fc ffac 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 800598a:	2201      	movs	r2, #1
 800598c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005990:	4833      	ldr	r0, [pc, #204]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 8005992:	f7fc ffa6 	bl	80028e2 <HAL_GPIO_WritePin>
			break;
 8005996:	e05e      	b.n	8005a56 <LOLA_CFG_SEL+0x13a>

			case BPI_Up:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 8005998:	2200      	movs	r2, #0
 800599a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800599e:	4830      	ldr	r0, [pc, #192]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 80059a0:	f7fc ff9f 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 80059a4:	2201      	movs	r2, #1
 80059a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059aa:	482d      	ldr	r0, [pc, #180]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 80059ac:	f7fc ff99 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 80059b0:	2200      	movs	r2, #0
 80059b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059b6:	482a      	ldr	r0, [pc, #168]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 80059b8:	f7fc ff93 	bl	80028e2 <HAL_GPIO_WritePin>
			break;
 80059bc:	e04b      	b.n	8005a56 <LOLA_CFG_SEL+0x13a>

			case BPI_Down:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80059be:	2200      	movs	r2, #0
 80059c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059c4:	4826      	ldr	r0, [pc, #152]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 80059c6:	f7fc ff8c 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 80059ca:	2201      	movs	r2, #1
 80059cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059d0:	4823      	ldr	r0, [pc, #140]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 80059d2:	f7fc ff86 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 80059d6:	2201      	movs	r2, #1
 80059d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059dc:	4820      	ldr	r0, [pc, #128]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 80059de:	f7fc ff80 	bl	80028e2 <HAL_GPIO_WritePin>
			break;
 80059e2:	e038      	b.n	8005a56 <LOLA_CFG_SEL+0x13a>

			case Slave_parallel:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 80059e4:	2201      	movs	r2, #1
 80059e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059ea:	481d      	ldr	r0, [pc, #116]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 80059ec:	f7fc ff79 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 80059f0:	2201      	movs	r2, #1
 80059f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059f6:	481a      	ldr	r0, [pc, #104]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 80059f8:	f7fc ff73 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 80059fc:	2200      	movs	r2, #0
 80059fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a02:	4817      	ldr	r0, [pc, #92]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 8005a04:	f7fc ff6d 	bl	80028e2 <HAL_GPIO_WritePin>
			break;
 8005a08:	e025      	b.n	8005a56 <LOLA_CFG_SEL+0x13a>

			case Slave_Serial:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a10:	4813      	ldr	r0, [pc, #76]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 8005a12:	f7fc ff66 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8005a16:	2201      	movs	r2, #1
 8005a18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a1c:	4810      	ldr	r0, [pc, #64]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 8005a1e:	f7fc ff60 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8005a22:	2201      	movs	r2, #1
 8005a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a28:	480d      	ldr	r0, [pc, #52]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 8005a2a:	f7fc ff5a 	bl	80028e2 <HAL_GPIO_WritePin>
			break;
 8005a2e:	e012      	b.n	8005a56 <LOLA_CFG_SEL+0x13a>

			default: // JTAG on default
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8005a30:	2201      	movs	r2, #1
 8005a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a36:	480a      	ldr	r0, [pc, #40]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 8005a38:	f7fc ff53 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a42:	4807      	ldr	r0, [pc, #28]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 8005a44:	f7fc ff4d 	bl	80028e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a4e:	4804      	ldr	r0, [pc, #16]	; (8005a60 <LOLA_CFG_SEL+0x144>)
 8005a50:	f7fc ff47 	bl	80028e2 <HAL_GPIO_WritePin>
			break;
 8005a54:	bf00      	nop
		}
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40010c00 	.word	0x40010c00

08005a64 <LOLA_Init>:

uint8_t LOLA_Init(LOLAconfig_struct LOLAconfig) // waits forever if maxatempts > 10000
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t AttemptsLeft;
	uint16_t FID = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	817b      	strh	r3, [r7, #10]
	uint16_t TrialsLeft = LOLAconfig.Trials;
 8005a74:	887b      	ldrh	r3, [r7, #2]
 8005a76:	81bb      	strh	r3, [r7, #12]

	LOLAconfig.Status = NO_FIRMWARE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	703b      	strb	r3, [r7, #0]

	do{

		LOLA_Reset();
 8005a7c:	f000 f854 	bl	8005b28 <LOLA_Reset>

		HAL_Delay(100);
 8005a80:	2064      	movs	r0, #100	; 0x64
 8005a82:	f7fc f99d 	bl	8001dc0 <HAL_Delay>

		LOLA_CFG_SEL(LOLAconfig.Config);
 8005a86:	787b      	ldrb	r3, [r7, #1]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff ff47 	bl	800591c <LOLA_CFG_SEL>

		AttemptsLeft = 20;
 8005a8e:	2314      	movs	r3, #20
 8005a90:	81fb      	strh	r3, [r7, #14]

		if(LOLAconfig.Config == JTAG)	// unlimited timer for manual JTAG configuration
 8005a92:	787b      	ldrb	r3, [r7, #1]
 8005a94:	2b06      	cmp	r3, #6
 8005a96:	d10f      	bne.n	8005ab8 <LOLA_Init+0x54>
			while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin)){}
 8005a98:	bf00      	nop
 8005a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a9e:	4821      	ldr	r0, [pc, #132]	; (8005b24 <LOLA_Init+0xc0>)
 8005aa0:	f7fc ff08 	bl	80028b4 <HAL_GPIO_ReadPin>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f7      	bne.n	8005a9a <LOLA_Init+0x36>
 8005aaa:	e010      	b.n	8005ace <LOLA_Init+0x6a>
		else
			while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin) && AttemptsLeft > 0)
			{
				AttemptsLeft--;
 8005aac:	89fb      	ldrh	r3, [r7, #14]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	81fb      	strh	r3, [r7, #14]
				HAL_Delay(100);
 8005ab2:	2064      	movs	r0, #100	; 0x64
 8005ab4:	f7fc f984 	bl	8001dc0 <HAL_Delay>
			while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin) && AttemptsLeft > 0)
 8005ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005abc:	4819      	ldr	r0, [pc, #100]	; (8005b24 <LOLA_Init+0xc0>)
 8005abe:	f7fc fef9 	bl	80028b4 <HAL_GPIO_ReadPin>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <LOLA_Init+0x6a>
 8005ac8:	89fb      	ldrh	r3, [r7, #14]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1ee      	bne.n	8005aac <LOLA_Init+0x48>
			}

		if(AttemptsLeft > 0)
 8005ace:	89fb      	ldrh	r3, [r7, #14]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d012      	beq.n	8005afa <LOLA_Init+0x96>
		{
			HAL_Delay(1000);
 8005ad4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ad8:	f7fc f972 	bl	8001dc0 <HAL_Delay>
			FID = LOLA_GET_FIRMWAREID();
 8005adc:	f000 f892 	bl	8005c04 <LOLA_GET_FIRMWAREID>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	817b      	strh	r3, [r7, #10]

			if(LOLAconfig.compatibleFirmwareID = FID) LOLAconfig.Status = FIRMWARE_OK;
 8005ae4:	897b      	ldrh	r3, [r7, #10]
 8005ae6:	80bb      	strh	r3, [r7, #4]
 8005ae8:	88bb      	ldrh	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <LOLA_Init+0x90>
 8005aee:	2302      	movs	r3, #2
 8005af0:	703b      	strb	r3, [r7, #0]
 8005af2:	e004      	b.n	8005afe <LOLA_Init+0x9a>
			else LOLAconfig.Status = INVALID_FIRMWARE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	703b      	strb	r3, [r7, #0]
 8005af8:	e001      	b.n	8005afe <LOLA_Init+0x9a>
		}
		else LOLAconfig.Status = NO_FIRMWARE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	703b      	strb	r3, [r7, #0]

		TrialsLeft--;
 8005afe:	89bb      	ldrh	r3, [r7, #12]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	81bb      	strh	r3, [r7, #12]

	}while(TrialsLeft > 0 && LOLAconfig.Status != FIRMWARE_OK);
 8005b04:	89bb      	ldrh	r3, [r7, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <LOLA_Init+0xac>
 8005b0a:	783b      	ldrb	r3, [r7, #0]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d1b5      	bne.n	8005a7c <LOLA_Init+0x18>

	if(LOLAconfig.Status == FIRMWARE_OK) return 1;	// sucesfull configuration
 8005b10:	783b      	ldrb	r3, [r7, #0]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d101      	bne.n	8005b1a <LOLA_Init+0xb6>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <LOLA_Init+0xb8>
	else return 0; // timer ran out
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40010800 	.word	0x40010800

08005b28 <LOLA_Reset>:

void LOLA_Reset()
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 0);
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2108      	movs	r1, #8
 8005b30:	4804      	ldr	r0, [pc, #16]	; (8005b44 <LOLA_Reset+0x1c>)
 8005b32:	f7fc fed6 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 1);
 8005b36:	2201      	movs	r2, #1
 8005b38:	2108      	movs	r1, #8
 8005b3a:	4802      	ldr	r0, [pc, #8]	; (8005b44 <LOLA_Reset+0x1c>)
 8005b3c:	f7fc fed1 	bl	80028e2 <HAL_GPIO_WritePin>
}
 8005b40:	bf00      	nop
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40010800 	.word	0x40010800

08005b48 <LOLA_enable_features>:
}*/

uint16_t enablersReg = 0;

void LOLA_enable_features(LOLAfeatures LOLAfeatures1, uint8_t ENABLE)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	460a      	mov	r2, r1
 8005b52:	71fb      	strb	r3, [r7, #7]
 8005b54:	4613      	mov	r3, r2
 8005b56:	71bb      	strb	r3, [r7, #6]
	uint16_t enablersMask = 0x0001 << LOLAfeatures1;
 8005b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	if((uint16_t)LOLAfeatures1 == (uint16_t)ALL_EN) 	enablersMask = 0xffff;
 8005b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d102      	bne.n	8005b78 <LOLA_enable_features+0x30>
 8005b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b76:	81fb      	strh	r3, [r7, #14]

	if(ENABLE) 	enablersReg |= enablersMask;
 8005b78:	79bb      	ldrb	r3, [r7, #6]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <LOLA_enable_features+0x46>
 8005b7e:	4b1e      	ldr	r3, [pc, #120]	; (8005bf8 <LOLA_enable_features+0xb0>)
 8005b80:	881a      	ldrh	r2, [r3, #0]
 8005b82:	89fb      	ldrh	r3, [r7, #14]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <LOLA_enable_features+0xb0>)
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	e00b      	b.n	8005ba6 <LOLA_enable_features+0x5e>
	else 		enablersReg &= ~enablersMask;
 8005b8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b92:	43db      	mvns	r3, r3
 8005b94:	b21a      	sxth	r2, r3
 8005b96:	4b18      	ldr	r3, [pc, #96]	; (8005bf8 <LOLA_enable_features+0xb0>)
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b21b      	sxth	r3, r3
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	b21b      	sxth	r3, r3
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <LOLA_enable_features+0xb0>)
 8005ba4:	801a      	strh	r2, [r3, #0]

	byte[0] = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((enablersReg>>8)&0x00ff);
 8005baa:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <LOLA_enable_features+0xb0>)
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	0a1b      	lsrs	r3, r3, #8
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(enablersReg&0x00ff);
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <LOLA_enable_features+0xb0>)
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)ENABLERS;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	72fb      	strb	r3, [r7, #11]


	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005bc2:	f107 0108 	add.w	r1, r7, #8
 8005bc6:	2364      	movs	r3, #100	; 0x64
 8005bc8:	2204      	movs	r2, #4
 8005bca:	480c      	ldr	r0, [pc, #48]	; (8005bfc <LOLA_enable_features+0xb4>)
 8005bcc:	f7fe f898 	bl	8003d00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2110      	movs	r1, #16
 8005bd4:	480a      	ldr	r0, [pc, #40]	; (8005c00 <LOLA_enable_features+0xb8>)
 8005bd6:	f7fc fe84 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8005bda:	2201      	movs	r2, #1
 8005bdc:	2110      	movs	r1, #16
 8005bde:	4808      	ldr	r0, [pc, #32]	; (8005c00 <LOLA_enable_features+0xb8>)
 8005be0:	f7fc fe7f 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005be4:	2200      	movs	r2, #0
 8005be6:	2110      	movs	r1, #16
 8005be8:	4805      	ldr	r0, [pc, #20]	; (8005c00 <LOLA_enable_features+0xb8>)
 8005bea:	f7fc fe7a 	bl	80028e2 <HAL_GPIO_WritePin>
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000378 	.word	0x20000378
 8005bfc:	20000290 	.word	0x20000290
 8005c00:	40010800 	.word	0x40010800

08005c04 <LOLA_GET_FIRMWAREID>:

uint16_t LOLA_GET_FIRMWAREID()
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
	uint16_t FirmwareID = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	byte[0] = (int8_t)0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)FIRMWARE_ID;
 8005c1a:	2313      	movs	r3, #19
 8005c1c:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005c1e:	f107 0108 	add.w	r1, r7, #8
 8005c22:	2364      	movs	r3, #100	; 0x64
 8005c24:	2204      	movs	r2, #4
 8005c26:	4814      	ldr	r0, [pc, #80]	; (8005c78 <LOLA_GET_FIRMWAREID+0x74>)
 8005c28:	f7fe f86a 	bl	8003d00 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2110      	movs	r1, #16
 8005c30:	4812      	ldr	r0, [pc, #72]	; (8005c7c <LOLA_GET_FIRMWAREID+0x78>)
 8005c32:	f7fc fe56 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8005c36:	2201      	movs	r2, #1
 8005c38:	2110      	movs	r1, #16
 8005c3a:	4810      	ldr	r0, [pc, #64]	; (8005c7c <LOLA_GET_FIRMWAREID+0x78>)
 8005c3c:	f7fc fe51 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005c40:	2200      	movs	r2, #0
 8005c42:	2110      	movs	r1, #16
 8005c44:	480d      	ldr	r0, [pc, #52]	; (8005c7c <LOLA_GET_FIRMWAREID+0x78>)
 8005c46:	f7fc fe4c 	bl	80028e2 <HAL_GPIO_WritePin>

	uint8_t rxBuffer[4];

	 // Receive 4 bytes
	if (HAL_SPI_Receive(&hspi1, rxBuffer, 4, HAL_MAX_DELAY) == HAL_OK) FirmwareID = (rxBuffer[2] << 8) | rxBuffer[3];
 8005c4a:	1d39      	adds	r1, r7, #4
 8005c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c50:	2204      	movs	r2, #4
 8005c52:	4809      	ldr	r0, [pc, #36]	; (8005c78 <LOLA_GET_FIRMWAREID+0x74>)
 8005c54:	f7fe f997 	bl	8003f86 <HAL_SPI_Receive>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d107      	bne.n	8005c6e <LOLA_GET_FIRMWAREID+0x6a>
 8005c5e:	79bb      	ldrb	r3, [r7, #6]
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	b21a      	sxth	r2, r3
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	b21b      	sxth	r3, r3
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	b21b      	sxth	r3, r3
 8005c6c:	81fb      	strh	r3, [r7, #14]

	return FirmwareID;
 8005c6e:	89fb      	ldrh	r3, [r7, #14]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000290 	.word	0x20000290
 8005c7c:	40010800 	.word	0x40010800

08005c80 <LOLA_SET_MAX_AMPLITUDE>:

float MAX_AMPLITUDE = 0;

void LOLA_SET_MAX_AMPLITUDE(float value)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	DACREF((value)*2/6.4);	// setting DAC Voltage reference
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fa ff7b 	bl	8000b88 <__addsf3>
 8005c92:	4603      	mov	r3, r0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fa fbd1 	bl	800043c <__aeabi_f2d>
 8005c9a:	a30b      	add	r3, pc, #44	; (adr r3, 8005cc8 <LOLA_SET_MAX_AMPLITUDE+0x48>)
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f7fa fd4e 	bl	8000740 <__aeabi_ddiv>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	f7fa ff16 	bl	8000adc <__aeabi_d2f>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 f856 	bl	8005d64 <DACREF>
	MAX_AMPLITUDE = value;
 8005cb8:	4a05      	ldr	r2, [pc, #20]	; (8005cd0 <LOLA_SET_MAX_AMPLITUDE+0x50>)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6013      	str	r3, [r2, #0]
}
 8005cbe:	bf00      	nop
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	9999999a 	.word	0x9999999a
 8005ccc:	40199999 	.word	0x40199999
 8005cd0:	2000037c 	.word	0x2000037c

08005cd4 <DAC_DIRECT_DATA>:

void DAC_DIRECT_DATA(float value)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	uint8_t byte[4];

	int16_t data = (int16_t)(2048*value/MAX_AMPLITUDE);
 8005cdc:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fb f859 	bl	8000d98 <__aeabi_fmul>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	461a      	mov	r2, r3
 8005cea:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <DAC_DIRECT_DATA+0x84>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f7fb f905 	bl	8000f00 <__aeabi_fdiv>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fb fa13 	bl	8001124 <__aeabi_f2iz>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	81fb      	strh	r3, [r7, #14]

	byte[0] = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)((data>>8)&0x000f);
 8005d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d0a:	121b      	asrs	r3, r3, #8
 8005d0c:	b21b      	sxth	r3, r3
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)(data&0x00ff);
 8005d18:	89fb      	ldrh	r3, [r7, #14]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)DAC_DIRECTDATA;
 8005d1e:	2304      	movs	r3, #4
 8005d20:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005d22:	f107 0108 	add.w	r1, r7, #8
 8005d26:	2364      	movs	r3, #100	; 0x64
 8005d28:	2204      	movs	r2, #4
 8005d2a:	480c      	ldr	r0, [pc, #48]	; (8005d5c <DAC_DIRECT_DATA+0x88>)
 8005d2c:	f7fd ffe8 	bl	8003d00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005d30:	2200      	movs	r2, #0
 8005d32:	2110      	movs	r1, #16
 8005d34:	480a      	ldr	r0, [pc, #40]	; (8005d60 <DAC_DIRECT_DATA+0x8c>)
 8005d36:	f7fc fdd4 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	2110      	movs	r1, #16
 8005d3e:	4808      	ldr	r0, [pc, #32]	; (8005d60 <DAC_DIRECT_DATA+0x8c>)
 8005d40:	f7fc fdcf 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005d44:	2200      	movs	r2, #0
 8005d46:	2110      	movs	r1, #16
 8005d48:	4805      	ldr	r0, [pc, #20]	; (8005d60 <DAC_DIRECT_DATA+0x8c>)
 8005d4a:	f7fc fdca 	bl	80028e2 <HAL_GPIO_WritePin>
}
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	2000037c 	.word	0x2000037c
 8005d5c:	20000290 	.word	0x20000290
 8005d60:	40010800 	.word	0x40010800

08005d64 <DACREF>:
#include "trim.h"

float DACref = 0;

void DACREF(float v) // 0 <= v <= 2.5
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 8005d6c:	4a27      	ldr	r2, [pc, #156]	; (8005e0c <DACREF+0xa8>)
 8005d6e:	f04f 0100 	mov.w	r1, #0
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fccb 	bl	800670e <trimFloat>
 8005d78:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 8005d7a:	4924      	ldr	r1, [pc, #144]	; (8005e0c <DACREF+0xa8>)
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7fb f99f 	bl	80010c0 <__aeabi_fcmpeq>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <DACREF+0x2c>
 8005d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d8c:	81fb      	strh	r3, [r7, #14]
 8005d8e:	e018      	b.n	8005dc2 <DACREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7fa fb53 	bl	800043c <__aeabi_f2d>
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <DACREF+0xac>)
 8005d9c:	f7fa fcd0 	bl	8000740 <__aeabi_ddiv>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4610      	mov	r0, r2
 8005da6:	4619      	mov	r1, r3
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <DACREF+0xb0>)
 8005dae:	f7fa fb9d 	bl	80004ec <__aeabi_dmul>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4610      	mov	r0, r2
 8005db8:	4619      	mov	r1, r3
 8005dba:	f7fa fe6f 	bl	8000a9c <__aeabi_d2uiz>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	81fb      	strh	r3, [r7, #14]

	DACref = v;
 8005dc2:	4a15      	ldr	r2, [pc, #84]	; (8005e18 <DACREF+0xb4>)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6013      	str	r3, [r2, #0]

	uint8_t byte[3];

	byte[0] = (3<<1)|(1<<4);	//3 shifted=channel D	1 shifted=load
 8005dc8:	2316      	movs	r3, #22
 8005dca:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8005dcc:	89fb      	ldrh	r3, [r7, #14]
 8005dce:	099b      	lsrs	r3, r3, #6
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8005dd6:	89fb      	ldrh	r3, [r7, #14]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8005dde:	2200      	movs	r2, #0
 8005de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005de4:	480d      	ldr	r0, [pc, #52]	; (8005e1c <DACREF+0xb8>)
 8005de6:	f7fc fd7c 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8005dea:	f107 0108 	add.w	r1, r7, #8
 8005dee:	2364      	movs	r3, #100	; 0x64
 8005df0:	2203      	movs	r2, #3
 8005df2:	480b      	ldr	r0, [pc, #44]	; (8005e20 <DACREF+0xbc>)
 8005df4:	f7fd ff84 	bl	8003d00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dfe:	4807      	ldr	r0, [pc, #28]	; (8005e1c <DACREF+0xb8>)
 8005e00:	f7fc fd6f 	bl	80028e2 <HAL_GPIO_WritePin>
}
 8005e04:	bf00      	nop
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40200000 	.word	0x40200000
 8005e10:	40040000 	.word	0x40040000
 8005e14:	40d00000 	.word	0x40d00000
 8005e18:	20000380 	.word	0x20000380
 8005e1c:	40011000 	.word	0x40011000
 8005e20:	20000290 	.word	0x20000290

08005e24 <DACOFFS>:

void DACOFFS(float v) // -12.5 <= v <= 12.5
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 8005e2c:	4a2a      	ldr	r2, [pc, #168]	; (8005ed8 <DACOFFS+0xb4>)
 8005e2e:	492b      	ldr	r1, [pc, #172]	; (8005edc <DACOFFS+0xb8>)
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fc6c 	bl	800670e <trimFloat>
 8005e36:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 8005e38:	4927      	ldr	r1, [pc, #156]	; (8005ed8 <DACOFFS+0xb4>)
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7fb f940 	bl	80010c0 <__aeabi_fcmpeq>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <DACOFFS+0x2a>
 8005e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e4a:	81fb      	strh	r3, [r7, #14]
 8005e4c:	e021      	b.n	8005e92 <DACOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fa faf4 	bl	800043c <__aeabi_f2d>
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	4b21      	ldr	r3, [pc, #132]	; (8005ee0 <DACOFFS+0xbc>)
 8005e5a:	f7fa f991 	bl	8000180 <__adddf3>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4610      	mov	r0, r2
 8005e64:	4619      	mov	r1, r3
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <DACOFFS+0xc0>)
 8005e6c:	f7fa fc68 	bl	8000740 <__aeabi_ddiv>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4610      	mov	r0, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ee8 <DACOFFS+0xc4>)
 8005e7e:	f7fa fb35 	bl	80004ec <__aeabi_dmul>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4610      	mov	r0, r2
 8005e88:	4619      	mov	r1, r3
 8005e8a:	f7fa fe07 	bl	8000a9c <__aeabi_d2uiz>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (2<<1)|(1<<4);	//2 shifted=channel C	1 shifted=load
 8005e92:	2314      	movs	r3, #20
 8005e94:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8005e96:	89fb      	ldrh	r3, [r7, #14]
 8005e98:	099b      	lsrs	r3, r3, #6
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8005ea0:	89fb      	ldrh	r3, [r7, #14]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005eae:	480f      	ldr	r0, [pc, #60]	; (8005eec <DACOFFS+0xc8>)
 8005eb0:	f7fc fd17 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8005eb4:	f107 0108 	add.w	r1, r7, #8
 8005eb8:	2364      	movs	r3, #100	; 0x64
 8005eba:	2203      	movs	r2, #3
 8005ebc:	480c      	ldr	r0, [pc, #48]	; (8005ef0 <DACOFFS+0xcc>)
 8005ebe:	f7fd ff1f 	bl	8003d00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ec8:	4808      	ldr	r0, [pc, #32]	; (8005eec <DACOFFS+0xc8>)
 8005eca:	f7fc fd0a 	bl	80028e2 <HAL_GPIO_WritePin>
}
 8005ece:	bf00      	nop
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	41480000 	.word	0x41480000
 8005edc:	c1480000 	.word	0xc1480000
 8005ee0:	40290000 	.word	0x40290000
 8005ee4:	40390000 	.word	0x40390000
 8005ee8:	40d00000 	.word	0x40d00000
 8005eec:	40011000 	.word	0x40011000
 8005ef0:	20000290 	.word	0x20000290

08005ef4 <ADCREF>:

void ADCREF(float v) // 0 <= v <= 2.5
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 8005efc:	4a26      	ldr	r2, [pc, #152]	; (8005f98 <ADCREF+0xa4>)
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fc03 	bl	800670e <trimFloat>
 8005f08:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 8005f0a:	4923      	ldr	r1, [pc, #140]	; (8005f98 <ADCREF+0xa4>)
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7fb f8d7 	bl	80010c0 <__aeabi_fcmpeq>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <ADCREF+0x2c>
 8005f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f1c:	81fb      	strh	r3, [r7, #14]
 8005f1e:	e018      	b.n	8005f52 <ADCREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7fa fa8b 	bl	800043c <__aeabi_f2d>
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	4b1c      	ldr	r3, [pc, #112]	; (8005f9c <ADCREF+0xa8>)
 8005f2c:	f7fa fc08 	bl	8000740 <__aeabi_ddiv>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4610      	mov	r0, r2
 8005f36:	4619      	mov	r1, r3
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	4b18      	ldr	r3, [pc, #96]	; (8005fa0 <ADCREF+0xac>)
 8005f3e:	f7fa fad5 	bl	80004ec <__aeabi_dmul>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4610      	mov	r0, r2
 8005f48:	4619      	mov	r1, r3
 8005f4a:	f7fa fda7 	bl	8000a9c <__aeabi_d2uiz>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<1)|(1<<4); //1 shifted=channel B	1 shifted=load
 8005f52:	2312      	movs	r3, #18
 8005f54:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8005f56:	89fb      	ldrh	r3, [r7, #14]
 8005f58:	099b      	lsrs	r3, r3, #6
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8005f60:	89fb      	ldrh	r3, [r7, #14]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f6e:	480d      	ldr	r0, [pc, #52]	; (8005fa4 <ADCREF+0xb0>)
 8005f70:	f7fc fcb7 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8005f74:	f107 0108 	add.w	r1, r7, #8
 8005f78:	2364      	movs	r3, #100	; 0x64
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	480a      	ldr	r0, [pc, #40]	; (8005fa8 <ADCREF+0xb4>)
 8005f7e:	f7fd febf 	bl	8003d00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8005f82:	2201      	movs	r2, #1
 8005f84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f88:	4806      	ldr	r0, [pc, #24]	; (8005fa4 <ADCREF+0xb0>)
 8005f8a:	f7fc fcaa 	bl	80028e2 <HAL_GPIO_WritePin>
}
 8005f8e:	bf00      	nop
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40200000 	.word	0x40200000
 8005f9c:	40040000 	.word	0x40040000
 8005fa0:	40d00000 	.word	0x40d00000
 8005fa4:	40011000 	.word	0x40011000
 8005fa8:	20000290 	.word	0x20000290

08005fac <ADCOFFS>:

void ADCOFFS(float v) // -12.5 <= v <= 12.5
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 8005fb4:	4a2a      	ldr	r2, [pc, #168]	; (8006060 <ADCOFFS+0xb4>)
 8005fb6:	492b      	ldr	r1, [pc, #172]	; (8006064 <ADCOFFS+0xb8>)
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fba8 	bl	800670e <trimFloat>
 8005fbe:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 8005fc0:	4927      	ldr	r1, [pc, #156]	; (8006060 <ADCOFFS+0xb4>)
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fb f87c 	bl	80010c0 <__aeabi_fcmpeq>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <ADCOFFS+0x2a>
 8005fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fd2:	81fb      	strh	r3, [r7, #14]
 8005fd4:	e021      	b.n	800601a <ADCOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fa fa30 	bl	800043c <__aeabi_f2d>
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	4b21      	ldr	r3, [pc, #132]	; (8006068 <ADCOFFS+0xbc>)
 8005fe2:	f7fa f8cd 	bl	8000180 <__adddf3>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4610      	mov	r0, r2
 8005fec:	4619      	mov	r1, r3
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	4b1e      	ldr	r3, [pc, #120]	; (800606c <ADCOFFS+0xc0>)
 8005ff4:	f7fa fba4 	bl	8000740 <__aeabi_ddiv>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4619      	mov	r1, r3
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <ADCOFFS+0xc4>)
 8006006:	f7fa fa71 	bl	80004ec <__aeabi_dmul>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4610      	mov	r0, r2
 8006010:	4619      	mov	r1, r3
 8006012:	f7fa fd43 	bl	8000a9c <__aeabi_d2uiz>
 8006016:	4603      	mov	r3, r0
 8006018:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<4); //none shifted=channel A	1 shifted=load
 800601a:	2310      	movs	r3, #16
 800601c:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 800601e:	89fb      	ldrh	r3, [r7, #14]
 8006020:	099b      	lsrs	r3, r3, #6
 8006022:	b29b      	uxth	r3, r3
 8006024:	b2db      	uxtb	r3, r3
 8006026:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8006028:	89fb      	ldrh	r3, [r7, #14]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	b2db      	uxtb	r3, r3
 800602e:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8006030:	2200      	movs	r2, #0
 8006032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006036:	480f      	ldr	r0, [pc, #60]	; (8006074 <ADCOFFS+0xc8>)
 8006038:	f7fc fc53 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 800603c:	f107 0108 	add.w	r1, r7, #8
 8006040:	2364      	movs	r3, #100	; 0x64
 8006042:	2203      	movs	r2, #3
 8006044:	480c      	ldr	r0, [pc, #48]	; (8006078 <ADCOFFS+0xcc>)
 8006046:	f7fd fe5b 	bl	8003d00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 800604a:	2201      	movs	r2, #1
 800604c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006050:	4808      	ldr	r0, [pc, #32]	; (8006074 <ADCOFFS+0xc8>)
 8006052:	f7fc fc46 	bl	80028e2 <HAL_GPIO_WritePin>
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	41480000 	.word	0x41480000
 8006064:	c1480000 	.word	0xc1480000
 8006068:	40290000 	.word	0x40290000
 800606c:	40390000 	.word	0x40390000
 8006070:	40d00000 	.word	0x40d00000
 8006074:	40011000 	.word	0x40011000
 8006078:	20000290 	.word	0x20000290

0800607c <RS485_Transmit>:

char TXbuff[RS485BUFFSIZE] = {0};
char RXbuff[RS485BUFFSIZE] = {0};

void RS485_Transmit(char *message)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	//strcat(message, "\r\n");

	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);	// Enable Driver
 8006084:	2201      	movs	r2, #1
 8006086:	2120      	movs	r1, #32
 8006088:	480a      	ldr	r0, [pc, #40]	; (80060b4 <RS485_Transmit+0x38>)
 800608a:	f7fc fc2a 	bl	80028e2 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, message, strlen(message), 100);	// Transmit
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fa f868 	bl	8000164 <strlen>
 8006094:	4603      	mov	r3, r0
 8006096:	b29a      	uxth	r2, r3
 8006098:	2364      	movs	r3, #100	; 0x64
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4806      	ldr	r0, [pc, #24]	; (80060b8 <RS485_Transmit+0x3c>)
 800609e:	f7fe fb83 	bl	80047a8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);	// Disable Driver
 80060a2:	2200      	movs	r2, #0
 80060a4:	2120      	movs	r1, #32
 80060a6:	4803      	ldr	r0, [pc, #12]	; (80060b4 <RS485_Transmit+0x38>)
 80060a8:	f7fc fc1b 	bl	80028e2 <HAL_GPIO_WritePin>
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40010c00 	.word	0x40010c00
 80060b8:	200002e8 	.word	0x200002e8

080060bc <SCPIC_LOLA>:

#include "SCPI_Commands.h"


void SCPIC_LOLA(struct subword* subwords, int length)
{
 80060bc:	b5b0      	push	{r4, r5, r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
	if(length != 2) return;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d133      	bne.n	8006134 <SCPIC_LOLA+0x78>
	if(subwords[0].type != params) return;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d131      	bne.n	8006138 <SCPIC_LOLA+0x7c>
	struct subword subword = subwords[0];
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f107 0408 	add.w	r4, r7, #8
 80060da:	461d      	mov	r5, r3
 80060dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	6023      	str	r3, [r4, #0]
	strcpy(TXbuff,"OK\r\n");
 80060e4:	4b16      	ldr	r3, [pc, #88]	; (8006140 <SCPIC_LOLA+0x84>)
 80060e6:	4a17      	ldr	r2, [pc, #92]	; (8006144 <SCPIC_LOLA+0x88>)
 80060e8:	6810      	ldr	r0, [r2, #0]
 80060ea:	6018      	str	r0, [r3, #0]
 80060ec:	7912      	ldrb	r2, [r2, #4]
 80060ee:	711a      	strb	r2, [r3, #4]

	if(!strcmp(subword.otherParam, "FID"))
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	4915      	ldr	r1, [pc, #84]	; (8006148 <SCPIC_LOLA+0x8c>)
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fa f82b 	bl	8000150 <strcmp>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d11c      	bne.n	800613a <SCPIC_LOLA+0x7e>
	{
		subword = subwords[1];
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f107 0408 	add.w	r4, r7, #8
 8006106:	f103 0514 	add.w	r5, r3, #20
 800610a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800610c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800610e:	682b      	ldr	r3, [r5, #0]
 8006110:	6023      	str	r3, [r4, #0]
		if(subword.type == params && subword.paramType == EVAL_P)
 8006112:	7a3b      	ldrb	r3, [r7, #8]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d110      	bne.n	800613a <SCPIC_LOLA+0x7e>
 8006118:	7c3b      	ldrb	r3, [r7, #16]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d10d      	bne.n	800613a <SCPIC_LOLA+0x7e>
		{
			uint16_t id = LOLA_GET_FIRMWAREID();
 800611e:	f7ff fd71 	bl	8005c04 <LOLA_GET_FIRMWAREID>
 8006122:	4603      	mov	r3, r0
 8006124:	83fb      	strh	r3, [r7, #30]
			sprintf(TXbuff, "%x\r\n", id);
 8006126:	8bfb      	ldrh	r3, [r7, #30]
 8006128:	461a      	mov	r2, r3
 800612a:	4908      	ldr	r1, [pc, #32]	; (800614c <SCPIC_LOLA+0x90>)
 800612c:	4804      	ldr	r0, [pc, #16]	; (8006140 <SCPIC_LOLA+0x84>)
 800612e:	f001 f9ad 	bl	800748c <siprintf>
 8006132:	e002      	b.n	800613a <SCPIC_LOLA+0x7e>
	if(length != 2) return;
 8006134:	bf00      	nop
 8006136:	e000      	b.n	800613a <SCPIC_LOLA+0x7e>
	if(subwords[0].type != params) return;
 8006138:	bf00      	nop

		default:

			break;
	}*/
}
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bdb0      	pop	{r4, r5, r7, pc}
 8006140:	20000384 	.word	0x20000384
 8006144:	0800a234 	.word	0x0800a234
 8006148:	0800a23c 	.word	0x0800a23c
 800614c:	0800a240 	.word	0x0800a240

08006150 <ReformatString>:

struct function *functionList;
int functionLength = 0;

void ReformatString(char* chararr, int arrMaxSize)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	e014      	b.n	800618a <ReformatString+0x3a>
	{
		if (chararr[i] == '\r' || chararr[i] == '\n')
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	4413      	add	r3, r2
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b0d      	cmp	r3, #13
 800616a:	d005      	beq.n	8006178 <ReformatString+0x28>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	4413      	add	r3, r2
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b0a      	cmp	r3, #10
 8006176:	d105      	bne.n	8006184 <ReformatString+0x34>
		{
			chararr[i] = '\0';
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]
			return;
 8006182:	e00c      	b.n	800619e <ReformatString+0x4e>
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	da05      	bge.n	800619e <ReformatString+0x4e>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	4413      	add	r3, r2
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e0      	bne.n	8006160 <ReformatString+0x10>
		}
	}
}
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr
	...

080061a8 <generateSubwordn>:

struct subword generateSubwordn(char* subcommand, int length)
{
 80061a8:	b5b0      	push	{r4, r5, r7, lr}
 80061aa:	b08c      	sub	sp, #48	; 0x30
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
	struct subword finalSubword = { .type = params, .functionIndex = 0, .integerParam = 0, .otherParam = NULL, .paramType = 0};
 80061b4:	2301      	movs	r3, #1
 80061b6:	743b      	strb	r3, [r7, #16]
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	2300      	movs	r3, #0
 80061be:	763b      	strb	r3, [r7, #24]
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	2300      	movs	r3, #0
 80061c6:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < functionLength; i++)
 80061c8:	2300      	movs	r3, #0
 80061ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061cc:	e01d      	b.n	800620a <generateSubwordn+0x62>
	{
		if (!strncmp(subcommand, functionList[i].name, length))
 80061ce:	4b3c      	ldr	r3, [pc, #240]	; (80062c0 <generateSubwordn+0x118>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	4413      	add	r3, r2
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	4619      	mov	r1, r3
 80061de:	68b8      	ldr	r0, [r7, #8]
 80061e0:	f001 f9bf 	bl	8007562 <strncmp>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10c      	bne.n	8006204 <generateSubwordn+0x5c>
		{
			finalSubword.type = function;
 80061ea:	2300      	movs	r3, #0
 80061ec:	743b      	strb	r3, [r7, #16]
			finalSubword.functionIndex = i;
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	617b      	str	r3, [r7, #20]
			return finalSubword;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	461d      	mov	r5, r3
 80061f6:	f107 0410 	add.w	r4, r7, #16
 80061fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	602b      	str	r3, [r5, #0]
 8006202:	e058      	b.n	80062b6 <generateSubwordn+0x10e>
	for (int i = 0; i < functionLength; i++)
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	3301      	adds	r3, #1
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800620a:	4b2e      	ldr	r3, [pc, #184]	; (80062c4 <generateSubwordn+0x11c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006210:	429a      	cmp	r2, r3
 8006212:	dbdc      	blt.n	80061ce <generateSubwordn+0x26>
		}
	}

	for (int i = 0; i < paramsLength; i++)
 8006214:	2300      	movs	r3, #0
 8006216:	62bb      	str	r3, [r7, #40]	; 0x28
 8006218:	e01a      	b.n	8006250 <generateSubwordn+0xa8>
	{
		if (!strncmp(subcommand, paramsList[i], length))
 800621a:	4a2b      	ldr	r2, [pc, #172]	; (80062c8 <generateSubwordn+0x120>)
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	4619      	mov	r1, r3
 8006226:	68b8      	ldr	r0, [r7, #8]
 8006228:	f001 f99b 	bl	8007562 <strncmp>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <generateSubwordn+0xa2>
		{
			finalSubword.paramType = (enum paramTypes)i;
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	b2db      	uxtb	r3, r3
 8006236:	763b      	strb	r3, [r7, #24]
			return finalSubword;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	461d      	mov	r5, r3
 800623c:	f107 0410 	add.w	r4, r7, #16
 8006240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	602b      	str	r3, [r5, #0]
 8006248:	e035      	b.n	80062b6 <generateSubwordn+0x10e>
	for (int i = 0; i < paramsLength; i++)
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	3301      	adds	r3, #1
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006250:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <generateSubwordn+0x124>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006256:	429a      	cmp	r2, r3
 8006258:	dbdf      	blt.n	800621a <generateSubwordn+0x72>
		}
	}

	int n;
	if ((n = atoi(subcommand)))
 800625a:	68b8      	ldr	r0, [r7, #8]
 800625c:	f000 fa75 	bl	800674a <atoi>
 8006260:	6278      	str	r0, [r7, #36]	; 0x24
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00c      	beq.n	8006282 <generateSubwordn+0xda>
	{
		finalSubword.paramType = INT_P;
 8006268:	2303      	movs	r3, #3
 800626a:	763b      	strb	r3, [r7, #24]
		finalSubword.integerParam = n;
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	61fb      	str	r3, [r7, #28]
		return finalSubword;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	461d      	mov	r5, r3
 8006274:	f107 0410 	add.w	r4, r7, #16
 8006278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800627a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	e019      	b.n	80062b6 <generateSubwordn+0x10e>
	}

	finalSubword.paramType = OTHER_P;
 8006282:	2304      	movs	r3, #4
 8006284:	763b      	strb	r3, [r7, #24]
	finalSubword.otherParam = (char*) malloc(sizeof(char) * (length + 1));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3301      	adds	r3, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fa62 	bl	8006754 <malloc>
 8006290:	4603      	mov	r3, r0
 8006292:	623b      	str	r3, [r7, #32]
	if(finalSubword.otherParam != NULL) strncpy(finalSubword.otherParam, subcommand, length);
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <generateSubwordn+0xfe>
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 f970 	bl	8007586 <strncpy>
	return finalSubword;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	461d      	mov	r5, r3
 80062aa:	f107 0410 	add.w	r4, r7, #16
 80062ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	602b      	str	r3, [r5, #0]
}
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	3730      	adds	r7, #48	; 0x30
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bdb0      	pop	{r4, r5, r7, pc}
 80062be:	bf00      	nop
 80062c0:	200003c4 	.word	0x200003c4
 80062c4:	200003c8 	.word	0x200003c8
 80062c8:	2000000c 	.word	0x2000000c
 80062cc:	20000018 	.word	0x20000018

080062d0 <generateWordDirect>:

struct word generateWordDirect(char* command)
{
 80062d0:	b5b0      	push	{r4, r5, r7, lr}
 80062d2:	b090      	sub	sp, #64	; 0x40
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	61f8      	str	r0, [r7, #28]
 80062d8:	61b9      	str	r1, [r7, #24]
	struct word finalWord = { .address = -1, .subwords = NULL, .subwordsCount = 0 };
 80062da:	f04f 33ff 	mov.w	r3, #4294967295
 80062de:	623b      	str	r3, [r7, #32]
 80062e0:	2300      	movs	r3, #0
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
 80062e4:	2300      	movs	r3, #0
 80062e6:	62bb      	str	r3, [r7, #40]	; 0x28

	char* currSymbol = command;
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	int intermediateLength = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	63bb      	str	r3, [r7, #56]	; 0x38

	int isLast = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	637b      	str	r3, [r7, #52]	; 0x34

	while (!isLast)
 80062f4:	e08d      	b.n	8006412 <generateWordDirect+0x142>
	{
		isLast = *currSymbol == '\0';
 80062f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	bf0c      	ite	eq
 80062fe:	2301      	moveq	r3, #1
 8006300:	2300      	movne	r3, #0
 8006302:	b2db      	uxtb	r3, r3
 8006304:	637b      	str	r3, [r7, #52]	; 0x34
		switch (*currSymbol)
 8006306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b3f      	cmp	r3, #63	; 0x3f
 800630c:	d005      	beq.n	800631a <generateWordDirect+0x4a>
 800630e:	2b3f      	cmp	r3, #63	; 0x3f
 8006310:	dc43      	bgt.n	800639a <generateWordDirect+0xca>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <generateWordDirect+0x4a>
 8006316:	2b3a      	cmp	r3, #58	; 0x3a
 8006318:	d13f      	bne.n	800639a <generateWordDirect+0xca>
		{
			case ':'	:
			case '\0'	:
			case '?'	:

				if(intermediateLength == 0) break;
 800631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631c:	2b00      	cmp	r3, #0
 800631e:	d040      	beq.n	80063a2 <generateWordDirect+0xd2>
				if (finalWord.address == -1)
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006326:	d109      	bne.n	800633c <generateWordDirect+0x6c>
				{
					finalWord.address = atoi(currSymbol - intermediateLength);
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	425b      	negs	r3, r3
 800632c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800632e:	4413      	add	r3, r2
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fa0a 	bl	800674a <atoi>
 8006336:	4603      	mov	r3, r0
 8006338:	623b      	str	r3, [r7, #32]
 800633a:	e02b      	b.n	8006394 <generateWordDirect+0xc4>
				}

				else
				{
					finalWord.subwordsCount++;
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	3301      	adds	r3, #1
 8006340:	62bb      	str	r3, [r7, #40]	; 0x28
					struct subword *intermediate = (struct subword*)realloc(finalWord.subwords, finalWord.subwordsCount * sizeof(struct subword));
 8006342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	4619      	mov	r1, r3
 8006348:	460b      	mov	r3, r1
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f000 faba 	bl	80068cc <realloc>
 8006358:	6338      	str	r0, [r7, #48]	; 0x30
					if (intermediate != NULL)
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2b00      	cmp	r3, #0
 800635e:	d019      	beq.n	8006394 <generateWordDirect+0xc4>
					{
						finalWord.subwords = intermediate;																				///??????
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
						finalWord.subwords[finalWord.subwordsCount - 1] = generateSubwordn(currSymbol - intermediateLength, intermediateLength);
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	425b      	negs	r3, r3
 8006368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800636a:	18d1      	adds	r1, r2, r3
 800636c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	4618      	mov	r0, r3
 8006372:	4603      	mov	r3, r0
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4403      	add	r3, r0
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	3b14      	subs	r3, #20
 800637c:	18d4      	adds	r4, r2, r3
 800637e:	463b      	mov	r3, r7
 8006380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff ff10 	bl	80061a8 <generateSubwordn>
 8006388:	4625      	mov	r5, r4
 800638a:	463c      	mov	r4, r7
 800638c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800638e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	602b      	str	r3, [r5, #0]
					}
				}

				intermediateLength = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	63bb      	str	r3, [r7, #56]	; 0x38

				break;
 8006398:	e004      	b.n	80063a4 <generateWordDirect+0xd4>

			default:
				intermediateLength++;
 800639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639c:	3301      	adds	r3, #1
 800639e:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
 80063a0:	e000      	b.n	80063a4 <generateWordDirect+0xd4>
				if(intermediateLength == 0) break;
 80063a2:	bf00      	nop

		}

		if(*currSymbol == '?')
 80063a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b3f      	cmp	r3, #63	; 0x3f
 80063aa:	d128      	bne.n	80063fe <generateWordDirect+0x12e>
		{
			finalWord.subwordsCount++;
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	3301      	adds	r3, #1
 80063b0:	62bb      	str	r3, [r7, #40]	; 0x28
			struct subword* intermediate = (struct subword*)realloc(finalWord.subwords, finalWord.subwordsCount * sizeof(struct subword));
 80063b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	4619      	mov	r1, r3
 80063b8:	460b      	mov	r3, r1
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4619      	mov	r1, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	f000 fa82 	bl	80068cc <realloc>
 80063c8:	62f8      	str	r0, [r7, #44]	; 0x2c
			if (intermediate != NULL)
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d016      	beq.n	80063fe <generateWordDirect+0x12e>
			{
				finalWord.subwords = intermediate;																						///??????
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
				finalWord.subwords[finalWord.subwordsCount - 1] = generateSubwordn("?", 1);
 80063d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	4619      	mov	r1, r3
 80063da:	460b      	mov	r3, r1
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	3b14      	subs	r3, #20
 80063e4:	18d4      	adds	r4, r2, r3
 80063e6:	463b      	mov	r3, r7
 80063e8:	2201      	movs	r2, #1
 80063ea:	4912      	ldr	r1, [pc, #72]	; (8006434 <generateWordDirect+0x164>)
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff fedb 	bl	80061a8 <generateSubwordn>
 80063f2:	4625      	mov	r5, r4
 80063f4:	463c      	mov	r4, r7
 80063f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	602b      	str	r3, [r5, #0]
			}
		}

		currSymbol += !isLast;
 80063fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006400:	2b00      	cmp	r3, #0
 8006402:	bf0c      	ite	eq
 8006404:	2301      	moveq	r3, #1
 8006406:	2300      	movne	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	461a      	mov	r2, r3
 800640c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640e:	4413      	add	r3, r2
 8006410:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (!isLast)
 8006412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006414:	2b00      	cmp	r3, #0
 8006416:	f43f af6e 	beq.w	80062f6 <generateWordDirect+0x26>
	}

	return finalWord;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	461c      	mov	r4, r3
 800641e:	f107 0320 	add.w	r3, r7, #32
 8006422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006426:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800642a:	69f8      	ldr	r0, [r7, #28]
 800642c:	3740      	adds	r7, #64	; 0x40
 800642e:	46bd      	mov	sp, r7
 8006430:	bdb0      	pop	{r4, r5, r7, pc}
 8006432:	bf00      	nop
 8006434:	0800a254 	.word	0x0800a254

08006438 <executeWord>:

void executeWord(struct word word)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	1d3b      	adds	r3, r7, #4
 8006440:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (word.subwordsCount < 1) return;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	dd17      	ble.n	800647a <executeWord+0x42>
	if (word.subwords == NULL) return;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d016      	beq.n	800647e <executeWord+0x46>
	if (word.subwords[0].type != function) return;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d114      	bne.n	8006482 <executeWord+0x4a>
	int listIndex = word.subwords[0].functionIndex;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	617b      	str	r3, [r7, #20]
	functionList[listIndex].run(word.subwords + 1, word.subwordsCount - 1);
 800645e:	4b0b      	ldr	r3, [pc, #44]	; (800648c <executeWord+0x54>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	4413      	add	r3, r2
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	f102 0014 	add.w	r0, r2, #20
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	3a01      	subs	r2, #1
 8006474:	4611      	mov	r1, r2
 8006476:	4798      	blx	r3
 8006478:	e004      	b.n	8006484 <executeWord+0x4c>
	if (word.subwordsCount < 1) return;
 800647a:	bf00      	nop
 800647c:	e002      	b.n	8006484 <executeWord+0x4c>
	if (word.subwords == NULL) return;
 800647e:	bf00      	nop
 8006480:	e000      	b.n	8006484 <executeWord+0x4c>
	if (word.subwords[0].type != function) return;
 8006482:	bf00      	nop
}
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	200003c4 	.word	0x200003c4

08006490 <addFunction>:

void addFunction(char *name, void (*func)(struct subword*, int))
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
	functionLength++;
 800649a:	4b14      	ldr	r3, [pc, #80]	; (80064ec <addFunction+0x5c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3301      	adds	r3, #1
 80064a0:	4a12      	ldr	r2, [pc, #72]	; (80064ec <addFunction+0x5c>)
 80064a2:	6013      	str	r3, [r2, #0]
	struct function newFunc = {.name = name, .run = func};
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	60bb      	str	r3, [r7, #8]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	60fb      	str	r3, [r7, #12]
	functionList = (struct function*) realloc(functionList, functionLength * sizeof(struct function));
 80064ac:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <addFunction+0x60>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a0e      	ldr	r2, [pc, #56]	; (80064ec <addFunction+0x5c>)
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	00d2      	lsls	r2, r2, #3
 80064b6:	4611      	mov	r1, r2
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fa07 	bl	80068cc <realloc>
 80064be:	4603      	mov	r3, r0
 80064c0:	4a0b      	ldr	r2, [pc, #44]	; (80064f0 <addFunction+0x60>)
 80064c2:	6013      	str	r3, [r2, #0]
	functionList[functionLength - 1] = newFunc;
 80064c4:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <addFunction+0x60>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4b08      	ldr	r3, [pc, #32]	; (80064ec <addFunction+0x5c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80064d0:	3b01      	subs	r3, #1
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	4413      	add	r3, r2
 80064d6:	461a      	mov	r2, r3
 80064d8:	f107 0308 	add.w	r3, r7, #8
 80064dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80064e0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80064e4:	bf00      	nop
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	200003c8 	.word	0x200003c8
 80064f0:	200003c4 	.word	0x200003c4

080064f4 <writeToRegister>:
uint8_t is_initialised = 0;

I2C_HandleTypeDef I2CHandle;

void writeToRegister(uint16_t device_address, uint16_t memory_address, uint8_t *data)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af04      	add	r7, sp, #16
 80064fa:	4603      	mov	r3, r0
 80064fc:	603a      	str	r2, [r7, #0]
 80064fe:	80fb      	strh	r3, [r7, #6]
 8006500:	460b      	mov	r3, r1
 8006502:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&I2CHandle, (device_address<<1), memory_address, 1, data, 1, 1000);
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	b299      	uxth	r1, r3
 800650a:	88ba      	ldrh	r2, [r7, #4]
 800650c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006510:	9302      	str	r3, [sp, #8]
 8006512:	2301      	movs	r3, #1
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	2301      	movs	r3, #1
 800651c:	4803      	ldr	r0, [pc, #12]	; (800652c <writeToRegister+0x38>)
 800651e:	f7fc fb3d 	bl	8002b9c <HAL_I2C_Mem_Write>
}
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	200003d0 	.word	0x200003d0

08006530 <TCA_Init>:

void TCA_Init(uint8_t address, I2C_HandleTypeDef handle)
{
 8006530:	b084      	sub	sp, #16
 8006532:	b590      	push	{r4, r7, lr}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	4604      	mov	r4, r0
 800653a:	f107 001c 	add.w	r0, r7, #28
 800653e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006542:	4623      	mov	r3, r4
 8006544:	71fb      	strb	r3, [r7, #7]
	TCA_address = address;
 8006546:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <TCA_Init+0x40>)
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	7013      	strb	r3, [r2, #0]
	I2CHandle = handle;
 800654c:	4b09      	ldr	r3, [pc, #36]	; (8006574 <TCA_Init+0x44>)
 800654e:	4618      	mov	r0, r3
 8006550:	f107 031c 	add.w	r3, r7, #28
 8006554:	2254      	movs	r2, #84	; 0x54
 8006556:	4619      	mov	r1, r3
 8006558:	f001 f8bd 	bl	80076d6 <memcpy>
	is_initialised = 1;
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <TCA_Init+0x48>)
 800655e:	2201      	movs	r2, #1
 8006560:	701a      	strb	r2, [r3, #0]
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800656c:	b004      	add	sp, #16
 800656e:	4770      	bx	lr
 8006570:	20000020 	.word	0x20000020
 8006574:	200003d0 	.word	0x200003d0
 8006578:	200003cc 	.word	0x200003cc

0800657c <TCA_PinMode>:

void TCA_PinMode(uint32_t pin, uint32_t mode)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 8006586:	4b25      	ldr	r3, [pc, #148]	; (800661c <TCA_PinMode+0xa0>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d03d      	beq.n	800660a <TCA_PinMode+0x8e>
	if(pin > 15) return;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b0f      	cmp	r3, #15
 8006592:	d83c      	bhi.n	800660e <TCA_PinMode+0x92>
	if(mode != 0 && mode != 1) return;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <TCA_PinMode+0x24>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d138      	bne.n	8006612 <TCA_PinMode+0x96>

	uint8_t mask =  1 << (pin % 8);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	2201      	movs	r2, #1
 80065a8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ac:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? PINMODE_REGISTER_LOW : PINMODE_REGISTER_HIGH;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b07      	cmp	r3, #7
 80065b2:	d801      	bhi.n	80065b8 <TCA_PinMode+0x3c>
 80065b4:	2306      	movs	r3, #6
 80065b6:	e000      	b.n	80065ba <TCA_PinMode+0x3e>
 80065b8:	2307      	movs	r3, #7
 80065ba:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &pinmode_register_state_low : &pinmode_register_state_high;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b07      	cmp	r3, #7
 80065c0:	d801      	bhi.n	80065c6 <TCA_PinMode+0x4a>
 80065c2:	4b17      	ldr	r3, [pc, #92]	; (8006620 <TCA_PinMode+0xa4>)
 80065c4:	e000      	b.n	80065c8 <TCA_PinMode+0x4c>
 80065c6:	4b17      	ldr	r3, [pc, #92]	; (8006624 <TCA_PinMode+0xa8>)
 80065c8:	60bb      	str	r3, [r7, #8]

	if (mode) 	*data |= mask;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d007      	beq.n	80065e0 <TCA_PinMode+0x64>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	781a      	ldrb	r2, [r3, #0]
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	e00b      	b.n	80065f8 <TCA_PinMode+0x7c>
	else 		*data &= ~mask;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	b25a      	sxtb	r2, r3
 80065e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ea:	43db      	mvns	r3, r3
 80065ec:	b25b      	sxtb	r3, r3
 80065ee:	4013      	ands	r3, r2
 80065f0:	b25b      	sxtb	r3, r3
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 80065f8:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <TCA_PinMode+0xac>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	89b9      	ldrh	r1, [r7, #12]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff ff76 	bl	80064f4 <writeToRegister>
 8006608:	e004      	b.n	8006614 <TCA_PinMode+0x98>
	if(!is_initialised) return;
 800660a:	bf00      	nop
 800660c:	e002      	b.n	8006614 <TCA_PinMode+0x98>
	if(pin > 15) return;
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <TCA_PinMode+0x98>
	if(mode != 0 && mode != 1) return;
 8006612:	bf00      	nop
}
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	200003cc 	.word	0x200003cc
 8006620:	2000001e 	.word	0x2000001e
 8006624:	2000001f 	.word	0x2000001f
 8006628:	20000020 	.word	0x20000020

0800662c <TCA_WritePin>:

	writeToRegister(TCA_address, memory_address, data);
}

void TCA_WritePin(uint32_t pin, uint32_t value)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 8006636:	4b25      	ldr	r3, [pc, #148]	; (80066cc <TCA_WritePin+0xa0>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d03d      	beq.n	80066ba <TCA_WritePin+0x8e>
	if(pin > 15) return;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b0f      	cmp	r3, #15
 8006642:	d83c      	bhi.n	80066be <TCA_WritePin+0x92>
	if(value != 0 && value != 1) return;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <TCA_WritePin+0x24>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d138      	bne.n	80066c2 <TCA_WritePin+0x96>

	uint8_t mask =  1 << (pin % 8);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	2201      	movs	r2, #1
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? OUTPUT_REGISTER_LOW : OUTPUT_REGISTER_HIGH;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b07      	cmp	r3, #7
 8006662:	d801      	bhi.n	8006668 <TCA_WritePin+0x3c>
 8006664:	2302      	movs	r3, #2
 8006666:	e000      	b.n	800666a <TCA_WritePin+0x3e>
 8006668:	2303      	movs	r3, #3
 800666a:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &output_register_state_low : &output_register_state_high;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b07      	cmp	r3, #7
 8006670:	d801      	bhi.n	8006676 <TCA_WritePin+0x4a>
 8006672:	4b17      	ldr	r3, [pc, #92]	; (80066d0 <TCA_WritePin+0xa4>)
 8006674:	e000      	b.n	8006678 <TCA_WritePin+0x4c>
 8006676:	4b17      	ldr	r3, [pc, #92]	; (80066d4 <TCA_WritePin+0xa8>)
 8006678:	60bb      	str	r3, [r7, #8]

	if (value)	*data |= mask;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <TCA_WritePin+0x64>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	781a      	ldrb	r2, [r3, #0]
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	4313      	orrs	r3, r2
 8006688:	b2da      	uxtb	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	e00b      	b.n	80066a8 <TCA_WritePin+0x7c>
	else 		*data &= ~mask;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	b25a      	sxtb	r2, r3
 8006696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800669a:	43db      	mvns	r3, r3
 800669c:	b25b      	sxtb	r3, r3
 800669e:	4013      	ands	r3, r2
 80066a0:	b25b      	sxtb	r3, r3
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <TCA_WritePin+0xac>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	89b9      	ldrh	r1, [r7, #12]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff ff1e 	bl	80064f4 <writeToRegister>
 80066b8:	e004      	b.n	80066c4 <TCA_WritePin+0x98>
	if(!is_initialised) return;
 80066ba:	bf00      	nop
 80066bc:	e002      	b.n	80066c4 <TCA_WritePin+0x98>
	if(pin > 15) return;
 80066be:	bf00      	nop
 80066c0:	e000      	b.n	80066c4 <TCA_WritePin+0x98>
	if(value != 0 && value != 1) return;
 80066c2:	bf00      	nop
}
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	200003cc 	.word	0x200003cc
 80066d0:	2000001c 	.word	0x2000001c
 80066d4:	2000001d 	.word	0x2000001d
 80066d8:	20000020 	.word	0x20000020

080066dc <trimInt>:
 */

#include "stdint.h"

int trimInt(int integer, int min, int max)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
	if(integer>max) integer = max;
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	dd02      	ble.n	80066f6 <trimInt+0x1a>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e005      	b.n	8006702 <trimInt+0x26>
	else if(integer<min) integer = min;
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	da01      	bge.n	8006702 <trimInt+0x26>
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	60fb      	str	r3, [r7, #12]
	return integer;
 8006702:	68fb      	ldr	r3, [r7, #12]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr

0800670e <trimFloat>:

float trimFloat(float floating, float min, float max)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
	if(floating>max) floating = max;
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f7fa fcf7 	bl	8001110 <__aeabi_fcmpgt>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <trimFloat+0x20>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	e008      	b.n	8006740 <trimFloat+0x32>
	else if(floating<min) floating = min;
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7fa fccf 	bl	80010d4 <__aeabi_fcmplt>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <trimFloat+0x32>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	60fb      	str	r3, [r7, #12]
	return floating;
 8006740:	68fb      	ldr	r3, [r7, #12]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <atoi>:
 800674a:	220a      	movs	r2, #10
 800674c:	2100      	movs	r1, #0
 800674e:	f000 b973 	b.w	8006a38 <strtol>
	...

08006754 <malloc>:
 8006754:	4b02      	ldr	r3, [pc, #8]	; (8006760 <malloc+0xc>)
 8006756:	4601      	mov	r1, r0
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	f000 b82b 	b.w	80067b4 <_malloc_r>
 800675e:	bf00      	nop
 8006760:	2000007c 	.word	0x2000007c

08006764 <free>:
 8006764:	4b02      	ldr	r3, [pc, #8]	; (8006770 <free+0xc>)
 8006766:	4601      	mov	r1, r0
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	f001 be31 	b.w	80083d0 <_free_r>
 800676e:	bf00      	nop
 8006770:	2000007c 	.word	0x2000007c

08006774 <sbrk_aligned>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	4e0e      	ldr	r6, [pc, #56]	; (80067b0 <sbrk_aligned+0x3c>)
 8006778:	460c      	mov	r4, r1
 800677a:	6831      	ldr	r1, [r6, #0]
 800677c:	4605      	mov	r5, r0
 800677e:	b911      	cbnz	r1, 8006786 <sbrk_aligned+0x12>
 8006780:	f000 ff4c 	bl	800761c <_sbrk_r>
 8006784:	6030      	str	r0, [r6, #0]
 8006786:	4621      	mov	r1, r4
 8006788:	4628      	mov	r0, r5
 800678a:	f000 ff47 	bl	800761c <_sbrk_r>
 800678e:	1c43      	adds	r3, r0, #1
 8006790:	d00a      	beq.n	80067a8 <sbrk_aligned+0x34>
 8006792:	1cc4      	adds	r4, r0, #3
 8006794:	f024 0403 	bic.w	r4, r4, #3
 8006798:	42a0      	cmp	r0, r4
 800679a:	d007      	beq.n	80067ac <sbrk_aligned+0x38>
 800679c:	1a21      	subs	r1, r4, r0
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 ff3c 	bl	800761c <_sbrk_r>
 80067a4:	3001      	adds	r0, #1
 80067a6:	d101      	bne.n	80067ac <sbrk_aligned+0x38>
 80067a8:	f04f 34ff 	mov.w	r4, #4294967295
 80067ac:	4620      	mov	r0, r4
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	20000428 	.word	0x20000428

080067b4 <_malloc_r>:
 80067b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067b8:	1ccd      	adds	r5, r1, #3
 80067ba:	f025 0503 	bic.w	r5, r5, #3
 80067be:	3508      	adds	r5, #8
 80067c0:	2d0c      	cmp	r5, #12
 80067c2:	bf38      	it	cc
 80067c4:	250c      	movcc	r5, #12
 80067c6:	2d00      	cmp	r5, #0
 80067c8:	4607      	mov	r7, r0
 80067ca:	db01      	blt.n	80067d0 <_malloc_r+0x1c>
 80067cc:	42a9      	cmp	r1, r5
 80067ce:	d905      	bls.n	80067dc <_malloc_r+0x28>
 80067d0:	230c      	movs	r3, #12
 80067d2:	2600      	movs	r6, #0
 80067d4:	603b      	str	r3, [r7, #0]
 80067d6:	4630      	mov	r0, r6
 80067d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80068b0 <_malloc_r+0xfc>
 80067e0:	f000 f868 	bl	80068b4 <__malloc_lock>
 80067e4:	f8d8 3000 	ldr.w	r3, [r8]
 80067e8:	461c      	mov	r4, r3
 80067ea:	bb5c      	cbnz	r4, 8006844 <_malloc_r+0x90>
 80067ec:	4629      	mov	r1, r5
 80067ee:	4638      	mov	r0, r7
 80067f0:	f7ff ffc0 	bl	8006774 <sbrk_aligned>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	4604      	mov	r4, r0
 80067f8:	d155      	bne.n	80068a6 <_malloc_r+0xf2>
 80067fa:	f8d8 4000 	ldr.w	r4, [r8]
 80067fe:	4626      	mov	r6, r4
 8006800:	2e00      	cmp	r6, #0
 8006802:	d145      	bne.n	8006890 <_malloc_r+0xdc>
 8006804:	2c00      	cmp	r4, #0
 8006806:	d048      	beq.n	800689a <_malloc_r+0xe6>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	4631      	mov	r1, r6
 800680c:	4638      	mov	r0, r7
 800680e:	eb04 0903 	add.w	r9, r4, r3
 8006812:	f000 ff03 	bl	800761c <_sbrk_r>
 8006816:	4581      	cmp	r9, r0
 8006818:	d13f      	bne.n	800689a <_malloc_r+0xe6>
 800681a:	6821      	ldr	r1, [r4, #0]
 800681c:	4638      	mov	r0, r7
 800681e:	1a6d      	subs	r5, r5, r1
 8006820:	4629      	mov	r1, r5
 8006822:	f7ff ffa7 	bl	8006774 <sbrk_aligned>
 8006826:	3001      	adds	r0, #1
 8006828:	d037      	beq.n	800689a <_malloc_r+0xe6>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	442b      	add	r3, r5
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	f8d8 3000 	ldr.w	r3, [r8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d038      	beq.n	80068aa <_malloc_r+0xf6>
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	42a2      	cmp	r2, r4
 800683c:	d12b      	bne.n	8006896 <_malloc_r+0xe2>
 800683e:	2200      	movs	r2, #0
 8006840:	605a      	str	r2, [r3, #4]
 8006842:	e00f      	b.n	8006864 <_malloc_r+0xb0>
 8006844:	6822      	ldr	r2, [r4, #0]
 8006846:	1b52      	subs	r2, r2, r5
 8006848:	d41f      	bmi.n	800688a <_malloc_r+0xd6>
 800684a:	2a0b      	cmp	r2, #11
 800684c:	d917      	bls.n	800687e <_malloc_r+0xca>
 800684e:	1961      	adds	r1, r4, r5
 8006850:	42a3      	cmp	r3, r4
 8006852:	6025      	str	r5, [r4, #0]
 8006854:	bf18      	it	ne
 8006856:	6059      	strne	r1, [r3, #4]
 8006858:	6863      	ldr	r3, [r4, #4]
 800685a:	bf08      	it	eq
 800685c:	f8c8 1000 	streq.w	r1, [r8]
 8006860:	5162      	str	r2, [r4, r5]
 8006862:	604b      	str	r3, [r1, #4]
 8006864:	4638      	mov	r0, r7
 8006866:	f104 060b 	add.w	r6, r4, #11
 800686a:	f000 f829 	bl	80068c0 <__malloc_unlock>
 800686e:	f026 0607 	bic.w	r6, r6, #7
 8006872:	1d23      	adds	r3, r4, #4
 8006874:	1af2      	subs	r2, r6, r3
 8006876:	d0ae      	beq.n	80067d6 <_malloc_r+0x22>
 8006878:	1b9b      	subs	r3, r3, r6
 800687a:	50a3      	str	r3, [r4, r2]
 800687c:	e7ab      	b.n	80067d6 <_malloc_r+0x22>
 800687e:	42a3      	cmp	r3, r4
 8006880:	6862      	ldr	r2, [r4, #4]
 8006882:	d1dd      	bne.n	8006840 <_malloc_r+0x8c>
 8006884:	f8c8 2000 	str.w	r2, [r8]
 8006888:	e7ec      	b.n	8006864 <_malloc_r+0xb0>
 800688a:	4623      	mov	r3, r4
 800688c:	6864      	ldr	r4, [r4, #4]
 800688e:	e7ac      	b.n	80067ea <_malloc_r+0x36>
 8006890:	4634      	mov	r4, r6
 8006892:	6876      	ldr	r6, [r6, #4]
 8006894:	e7b4      	b.n	8006800 <_malloc_r+0x4c>
 8006896:	4613      	mov	r3, r2
 8006898:	e7cc      	b.n	8006834 <_malloc_r+0x80>
 800689a:	230c      	movs	r3, #12
 800689c:	4638      	mov	r0, r7
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	f000 f80e 	bl	80068c0 <__malloc_unlock>
 80068a4:	e797      	b.n	80067d6 <_malloc_r+0x22>
 80068a6:	6025      	str	r5, [r4, #0]
 80068a8:	e7dc      	b.n	8006864 <_malloc_r+0xb0>
 80068aa:	605b      	str	r3, [r3, #4]
 80068ac:	deff      	udf	#255	; 0xff
 80068ae:	bf00      	nop
 80068b0:	20000424 	.word	0x20000424

080068b4 <__malloc_lock>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__malloc_lock+0x8>)
 80068b6:	f000 befe 	b.w	80076b6 <__retarget_lock_acquire_recursive>
 80068ba:	bf00      	nop
 80068bc:	2000056c 	.word	0x2000056c

080068c0 <__malloc_unlock>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__malloc_unlock+0x8>)
 80068c2:	f000 bef9 	b.w	80076b8 <__retarget_lock_release_recursive>
 80068c6:	bf00      	nop
 80068c8:	2000056c 	.word	0x2000056c

080068cc <realloc>:
 80068cc:	4b02      	ldr	r3, [pc, #8]	; (80068d8 <realloc+0xc>)
 80068ce:	460a      	mov	r2, r1
 80068d0:	4601      	mov	r1, r0
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	f000 b802 	b.w	80068dc <_realloc_r>
 80068d8:	2000007c 	.word	0x2000007c

080068dc <_realloc_r>:
 80068dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e0:	4680      	mov	r8, r0
 80068e2:	4614      	mov	r4, r2
 80068e4:	460e      	mov	r6, r1
 80068e6:	b921      	cbnz	r1, 80068f2 <_realloc_r+0x16>
 80068e8:	4611      	mov	r1, r2
 80068ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ee:	f7ff bf61 	b.w	80067b4 <_malloc_r>
 80068f2:	b92a      	cbnz	r2, 8006900 <_realloc_r+0x24>
 80068f4:	f001 fd6c 	bl	80083d0 <_free_r>
 80068f8:	4625      	mov	r5, r4
 80068fa:	4628      	mov	r0, r5
 80068fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006900:	f002 f926 	bl	8008b50 <_malloc_usable_size_r>
 8006904:	4284      	cmp	r4, r0
 8006906:	4607      	mov	r7, r0
 8006908:	d802      	bhi.n	8006910 <_realloc_r+0x34>
 800690a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800690e:	d812      	bhi.n	8006936 <_realloc_r+0x5a>
 8006910:	4621      	mov	r1, r4
 8006912:	4640      	mov	r0, r8
 8006914:	f7ff ff4e 	bl	80067b4 <_malloc_r>
 8006918:	4605      	mov	r5, r0
 800691a:	2800      	cmp	r0, #0
 800691c:	d0ed      	beq.n	80068fa <_realloc_r+0x1e>
 800691e:	42bc      	cmp	r4, r7
 8006920:	4622      	mov	r2, r4
 8006922:	4631      	mov	r1, r6
 8006924:	bf28      	it	cs
 8006926:	463a      	movcs	r2, r7
 8006928:	f000 fed5 	bl	80076d6 <memcpy>
 800692c:	4631      	mov	r1, r6
 800692e:	4640      	mov	r0, r8
 8006930:	f001 fd4e 	bl	80083d0 <_free_r>
 8006934:	e7e1      	b.n	80068fa <_realloc_r+0x1e>
 8006936:	4635      	mov	r5, r6
 8006938:	e7df      	b.n	80068fa <_realloc_r+0x1e>
	...

0800693c <_strtol_l.constprop.0>:
 800693c:	2b01      	cmp	r3, #1
 800693e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006942:	4686      	mov	lr, r0
 8006944:	4690      	mov	r8, r2
 8006946:	d001      	beq.n	800694c <_strtol_l.constprop.0+0x10>
 8006948:	2b24      	cmp	r3, #36	; 0x24
 800694a:	d906      	bls.n	800695a <_strtol_l.constprop.0+0x1e>
 800694c:	f000 fe88 	bl	8007660 <__errno>
 8006950:	2316      	movs	r3, #22
 8006952:	6003      	str	r3, [r0, #0]
 8006954:	2000      	movs	r0, #0
 8006956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695a:	460d      	mov	r5, r1
 800695c:	4835      	ldr	r0, [pc, #212]	; (8006a34 <_strtol_l.constprop.0+0xf8>)
 800695e:	462a      	mov	r2, r5
 8006960:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006964:	5d06      	ldrb	r6, [r0, r4]
 8006966:	f016 0608 	ands.w	r6, r6, #8
 800696a:	d1f8      	bne.n	800695e <_strtol_l.constprop.0+0x22>
 800696c:	2c2d      	cmp	r4, #45	; 0x2d
 800696e:	d12e      	bne.n	80069ce <_strtol_l.constprop.0+0x92>
 8006970:	2601      	movs	r6, #1
 8006972:	782c      	ldrb	r4, [r5, #0]
 8006974:	1c95      	adds	r5, r2, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d057      	beq.n	8006a2a <_strtol_l.constprop.0+0xee>
 800697a:	2b10      	cmp	r3, #16
 800697c:	d109      	bne.n	8006992 <_strtol_l.constprop.0+0x56>
 800697e:	2c30      	cmp	r4, #48	; 0x30
 8006980:	d107      	bne.n	8006992 <_strtol_l.constprop.0+0x56>
 8006982:	782a      	ldrb	r2, [r5, #0]
 8006984:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006988:	2a58      	cmp	r2, #88	; 0x58
 800698a:	d149      	bne.n	8006a20 <_strtol_l.constprop.0+0xe4>
 800698c:	2310      	movs	r3, #16
 800698e:	786c      	ldrb	r4, [r5, #1]
 8006990:	3502      	adds	r5, #2
 8006992:	2200      	movs	r2, #0
 8006994:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006998:	f10c 3cff 	add.w	ip, ip, #4294967295
 800699c:	fbbc f9f3 	udiv	r9, ip, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	fb03 ca19 	mls	sl, r3, r9, ip
 80069a6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80069aa:	2f09      	cmp	r7, #9
 80069ac:	d814      	bhi.n	80069d8 <_strtol_l.constprop.0+0x9c>
 80069ae:	463c      	mov	r4, r7
 80069b0:	42a3      	cmp	r3, r4
 80069b2:	dd20      	ble.n	80069f6 <_strtol_l.constprop.0+0xba>
 80069b4:	1c57      	adds	r7, r2, #1
 80069b6:	d007      	beq.n	80069c8 <_strtol_l.constprop.0+0x8c>
 80069b8:	4581      	cmp	r9, r0
 80069ba:	d319      	bcc.n	80069f0 <_strtol_l.constprop.0+0xb4>
 80069bc:	d101      	bne.n	80069c2 <_strtol_l.constprop.0+0x86>
 80069be:	45a2      	cmp	sl, r4
 80069c0:	db16      	blt.n	80069f0 <_strtol_l.constprop.0+0xb4>
 80069c2:	2201      	movs	r2, #1
 80069c4:	fb00 4003 	mla	r0, r0, r3, r4
 80069c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069cc:	e7eb      	b.n	80069a6 <_strtol_l.constprop.0+0x6a>
 80069ce:	2c2b      	cmp	r4, #43	; 0x2b
 80069d0:	bf04      	itt	eq
 80069d2:	782c      	ldrbeq	r4, [r5, #0]
 80069d4:	1c95      	addeq	r5, r2, #2
 80069d6:	e7ce      	b.n	8006976 <_strtol_l.constprop.0+0x3a>
 80069d8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80069dc:	2f19      	cmp	r7, #25
 80069de:	d801      	bhi.n	80069e4 <_strtol_l.constprop.0+0xa8>
 80069e0:	3c37      	subs	r4, #55	; 0x37
 80069e2:	e7e5      	b.n	80069b0 <_strtol_l.constprop.0+0x74>
 80069e4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80069e8:	2f19      	cmp	r7, #25
 80069ea:	d804      	bhi.n	80069f6 <_strtol_l.constprop.0+0xba>
 80069ec:	3c57      	subs	r4, #87	; 0x57
 80069ee:	e7df      	b.n	80069b0 <_strtol_l.constprop.0+0x74>
 80069f0:	f04f 32ff 	mov.w	r2, #4294967295
 80069f4:	e7e8      	b.n	80069c8 <_strtol_l.constprop.0+0x8c>
 80069f6:	1c53      	adds	r3, r2, #1
 80069f8:	d108      	bne.n	8006a0c <_strtol_l.constprop.0+0xd0>
 80069fa:	2322      	movs	r3, #34	; 0x22
 80069fc:	4660      	mov	r0, ip
 80069fe:	f8ce 3000 	str.w	r3, [lr]
 8006a02:	f1b8 0f00 	cmp.w	r8, #0
 8006a06:	d0a6      	beq.n	8006956 <_strtol_l.constprop.0+0x1a>
 8006a08:	1e69      	subs	r1, r5, #1
 8006a0a:	e006      	b.n	8006a1a <_strtol_l.constprop.0+0xde>
 8006a0c:	b106      	cbz	r6, 8006a10 <_strtol_l.constprop.0+0xd4>
 8006a0e:	4240      	negs	r0, r0
 8006a10:	f1b8 0f00 	cmp.w	r8, #0
 8006a14:	d09f      	beq.n	8006956 <_strtol_l.constprop.0+0x1a>
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	d1f6      	bne.n	8006a08 <_strtol_l.constprop.0+0xcc>
 8006a1a:	f8c8 1000 	str.w	r1, [r8]
 8006a1e:	e79a      	b.n	8006956 <_strtol_l.constprop.0+0x1a>
 8006a20:	2430      	movs	r4, #48	; 0x30
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1b5      	bne.n	8006992 <_strtol_l.constprop.0+0x56>
 8006a26:	2308      	movs	r3, #8
 8006a28:	e7b3      	b.n	8006992 <_strtol_l.constprop.0+0x56>
 8006a2a:	2c30      	cmp	r4, #48	; 0x30
 8006a2c:	d0a9      	beq.n	8006982 <_strtol_l.constprop.0+0x46>
 8006a2e:	230a      	movs	r3, #10
 8006a30:	e7af      	b.n	8006992 <_strtol_l.constprop.0+0x56>
 8006a32:	bf00      	nop
 8006a34:	0800a283 	.word	0x0800a283

08006a38 <strtol>:
 8006a38:	4613      	mov	r3, r2
 8006a3a:	460a      	mov	r2, r1
 8006a3c:	4601      	mov	r1, r0
 8006a3e:	4802      	ldr	r0, [pc, #8]	; (8006a48 <strtol+0x10>)
 8006a40:	6800      	ldr	r0, [r0, #0]
 8006a42:	f7ff bf7b 	b.w	800693c <_strtol_l.constprop.0>
 8006a46:	bf00      	nop
 8006a48:	2000007c 	.word	0x2000007c

08006a4c <__cvt>:
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a52:	461f      	mov	r7, r3
 8006a54:	bfbb      	ittet	lt
 8006a56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006a5a:	461f      	movlt	r7, r3
 8006a5c:	2300      	movge	r3, #0
 8006a5e:	232d      	movlt	r3, #45	; 0x2d
 8006a60:	b088      	sub	sp, #32
 8006a62:	4614      	mov	r4, r2
 8006a64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006a68:	7013      	strb	r3, [r2, #0]
 8006a6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006a70:	f023 0820 	bic.w	r8, r3, #32
 8006a74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a78:	d005      	beq.n	8006a86 <__cvt+0x3a>
 8006a7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a7e:	d100      	bne.n	8006a82 <__cvt+0x36>
 8006a80:	3501      	adds	r5, #1
 8006a82:	2302      	movs	r3, #2
 8006a84:	e000      	b.n	8006a88 <__cvt+0x3c>
 8006a86:	2303      	movs	r3, #3
 8006a88:	aa07      	add	r2, sp, #28
 8006a8a:	9204      	str	r2, [sp, #16]
 8006a8c:	aa06      	add	r2, sp, #24
 8006a8e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006a92:	e9cd 3500 	strd	r3, r5, [sp]
 8006a96:	4622      	mov	r2, r4
 8006a98:	463b      	mov	r3, r7
 8006a9a:	f000 feb5 	bl	8007808 <_dtoa_r>
 8006a9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	d102      	bne.n	8006aac <__cvt+0x60>
 8006aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006aa8:	07db      	lsls	r3, r3, #31
 8006aaa:	d522      	bpl.n	8006af2 <__cvt+0xa6>
 8006aac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ab0:	eb06 0905 	add.w	r9, r6, r5
 8006ab4:	d110      	bne.n	8006ad8 <__cvt+0x8c>
 8006ab6:	7833      	ldrb	r3, [r6, #0]
 8006ab8:	2b30      	cmp	r3, #48	; 0x30
 8006aba:	d10a      	bne.n	8006ad2 <__cvt+0x86>
 8006abc:	2200      	movs	r2, #0
 8006abe:	2300      	movs	r3, #0
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7f9 ff7a 	bl	80009bc <__aeabi_dcmpeq>
 8006ac8:	b918      	cbnz	r0, 8006ad2 <__cvt+0x86>
 8006aca:	f1c5 0501 	rsb	r5, r5, #1
 8006ace:	f8ca 5000 	str.w	r5, [sl]
 8006ad2:	f8da 3000 	ldr.w	r3, [sl]
 8006ad6:	4499      	add	r9, r3
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2300      	movs	r3, #0
 8006adc:	4620      	mov	r0, r4
 8006ade:	4639      	mov	r1, r7
 8006ae0:	f7f9 ff6c 	bl	80009bc <__aeabi_dcmpeq>
 8006ae4:	b108      	cbz	r0, 8006aea <__cvt+0x9e>
 8006ae6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006aea:	2230      	movs	r2, #48	; 0x30
 8006aec:	9b07      	ldr	r3, [sp, #28]
 8006aee:	454b      	cmp	r3, r9
 8006af0:	d307      	bcc.n	8006b02 <__cvt+0xb6>
 8006af2:	4630      	mov	r0, r6
 8006af4:	9b07      	ldr	r3, [sp, #28]
 8006af6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006af8:	1b9b      	subs	r3, r3, r6
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	b008      	add	sp, #32
 8006afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b02:	1c59      	adds	r1, r3, #1
 8006b04:	9107      	str	r1, [sp, #28]
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	e7f0      	b.n	8006aec <__cvt+0xa0>

08006b0a <__exponent>:
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b0e:	2900      	cmp	r1, #0
 8006b10:	f803 2b02 	strb.w	r2, [r3], #2
 8006b14:	bfb6      	itet	lt
 8006b16:	222d      	movlt	r2, #45	; 0x2d
 8006b18:	222b      	movge	r2, #43	; 0x2b
 8006b1a:	4249      	neglt	r1, r1
 8006b1c:	2909      	cmp	r1, #9
 8006b1e:	7042      	strb	r2, [r0, #1]
 8006b20:	dd2a      	ble.n	8006b78 <__exponent+0x6e>
 8006b22:	f10d 0207 	add.w	r2, sp, #7
 8006b26:	4617      	mov	r7, r2
 8006b28:	260a      	movs	r6, #10
 8006b2a:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b2e:	4694      	mov	ip, r2
 8006b30:	fb06 1415 	mls	r4, r6, r5, r1
 8006b34:	3430      	adds	r4, #48	; 0x30
 8006b36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	2c63      	cmp	r4, #99	; 0x63
 8006b3e:	4629      	mov	r1, r5
 8006b40:	f102 32ff 	add.w	r2, r2, #4294967295
 8006b44:	dcf1      	bgt.n	8006b2a <__exponent+0x20>
 8006b46:	3130      	adds	r1, #48	; 0x30
 8006b48:	f1ac 0402 	sub.w	r4, ip, #2
 8006b4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b50:	4622      	mov	r2, r4
 8006b52:	1c41      	adds	r1, r0, #1
 8006b54:	42ba      	cmp	r2, r7
 8006b56:	d30a      	bcc.n	8006b6e <__exponent+0x64>
 8006b58:	f10d 0209 	add.w	r2, sp, #9
 8006b5c:	eba2 020c 	sub.w	r2, r2, ip
 8006b60:	42bc      	cmp	r4, r7
 8006b62:	bf88      	it	hi
 8006b64:	2200      	movhi	r2, #0
 8006b66:	4413      	add	r3, r2
 8006b68:	1a18      	subs	r0, r3, r0
 8006b6a:	b003      	add	sp, #12
 8006b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b76:	e7ed      	b.n	8006b54 <__exponent+0x4a>
 8006b78:	2330      	movs	r3, #48	; 0x30
 8006b7a:	3130      	adds	r1, #48	; 0x30
 8006b7c:	7083      	strb	r3, [r0, #2]
 8006b7e:	70c1      	strb	r1, [r0, #3]
 8006b80:	1d03      	adds	r3, r0, #4
 8006b82:	e7f1      	b.n	8006b68 <__exponent+0x5e>

08006b84 <_printf_float>:
 8006b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b88:	b091      	sub	sp, #68	; 0x44
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006b90:	4616      	mov	r6, r2
 8006b92:	461f      	mov	r7, r3
 8006b94:	4605      	mov	r5, r0
 8006b96:	f000 fd09 	bl	80075ac <_localeconv_r>
 8006b9a:	6803      	ldr	r3, [r0, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba0:	f7f9 fae0 	bl	8000164 <strlen>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	930e      	str	r3, [sp, #56]	; 0x38
 8006ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bac:	900a      	str	r0, [sp, #40]	; 0x28
 8006bae:	3307      	adds	r3, #7
 8006bb0:	f023 0307 	bic.w	r3, r3, #7
 8006bb4:	f103 0208 	add.w	r2, r3, #8
 8006bb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006bbc:	f8d4 b000 	ldr.w	fp, [r4]
 8006bc0:	f8c8 2000 	str.w	r2, [r8]
 8006bc4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006bc8:	4652      	mov	r2, sl
 8006bca:	4643      	mov	r3, r8
 8006bcc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bd0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006bd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	4650      	mov	r0, sl
 8006bdc:	4b9c      	ldr	r3, [pc, #624]	; (8006e50 <_printf_float+0x2cc>)
 8006bde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006be0:	f7f9 ff1e 	bl	8000a20 <__aeabi_dcmpun>
 8006be4:	bb70      	cbnz	r0, 8006c44 <_printf_float+0xc0>
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bea:	4650      	mov	r0, sl
 8006bec:	4b98      	ldr	r3, [pc, #608]	; (8006e50 <_printf_float+0x2cc>)
 8006bee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bf0:	f7f9 fef8 	bl	80009e4 <__aeabi_dcmple>
 8006bf4:	bb30      	cbnz	r0, 8006c44 <_printf_float+0xc0>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4650      	mov	r0, sl
 8006bfc:	4641      	mov	r1, r8
 8006bfe:	f7f9 fee7 	bl	80009d0 <__aeabi_dcmplt>
 8006c02:	b110      	cbz	r0, 8006c0a <_printf_float+0x86>
 8006c04:	232d      	movs	r3, #45	; 0x2d
 8006c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c0a:	4a92      	ldr	r2, [pc, #584]	; (8006e54 <_printf_float+0x2d0>)
 8006c0c:	4b92      	ldr	r3, [pc, #584]	; (8006e58 <_printf_float+0x2d4>)
 8006c0e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006c12:	bf94      	ite	ls
 8006c14:	4690      	movls	r8, r2
 8006c16:	4698      	movhi	r8, r3
 8006c18:	2303      	movs	r3, #3
 8006c1a:	f04f 0a00 	mov.w	sl, #0
 8006c1e:	6123      	str	r3, [r4, #16]
 8006c20:	f02b 0304 	bic.w	r3, fp, #4
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	4633      	mov	r3, r6
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	9700      	str	r7, [sp, #0]
 8006c2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006c30:	f000 f9d6 	bl	8006fe0 <_printf_common>
 8006c34:	3001      	adds	r0, #1
 8006c36:	f040 8090 	bne.w	8006d5a <_printf_float+0x1d6>
 8006c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3e:	b011      	add	sp, #68	; 0x44
 8006c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c44:	4652      	mov	r2, sl
 8006c46:	4643      	mov	r3, r8
 8006c48:	4650      	mov	r0, sl
 8006c4a:	4641      	mov	r1, r8
 8006c4c:	f7f9 fee8 	bl	8000a20 <__aeabi_dcmpun>
 8006c50:	b148      	cbz	r0, 8006c66 <_printf_float+0xe2>
 8006c52:	f1b8 0f00 	cmp.w	r8, #0
 8006c56:	bfb8      	it	lt
 8006c58:	232d      	movlt	r3, #45	; 0x2d
 8006c5a:	4a80      	ldr	r2, [pc, #512]	; (8006e5c <_printf_float+0x2d8>)
 8006c5c:	bfb8      	it	lt
 8006c5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c62:	4b7f      	ldr	r3, [pc, #508]	; (8006e60 <_printf_float+0x2dc>)
 8006c64:	e7d3      	b.n	8006c0e <_printf_float+0x8a>
 8006c66:	6863      	ldr	r3, [r4, #4]
 8006c68:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	d142      	bne.n	8006cf6 <_printf_float+0x172>
 8006c70:	2306      	movs	r3, #6
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	9206      	str	r2, [sp, #24]
 8006c78:	aa0e      	add	r2, sp, #56	; 0x38
 8006c7a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006c7e:	aa0d      	add	r2, sp, #52	; 0x34
 8006c80:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006c84:	9203      	str	r2, [sp, #12]
 8006c86:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006c8a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c8e:	6023      	str	r3, [r4, #0]
 8006c90:	6863      	ldr	r3, [r4, #4]
 8006c92:	4652      	mov	r2, sl
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	4628      	mov	r0, r5
 8006c98:	4643      	mov	r3, r8
 8006c9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8006c9c:	f7ff fed6 	bl	8006a4c <__cvt>
 8006ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ca2:	4680      	mov	r8, r0
 8006ca4:	2947      	cmp	r1, #71	; 0x47
 8006ca6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006ca8:	d108      	bne.n	8006cbc <_printf_float+0x138>
 8006caa:	1cc8      	adds	r0, r1, #3
 8006cac:	db02      	blt.n	8006cb4 <_printf_float+0x130>
 8006cae:	6863      	ldr	r3, [r4, #4]
 8006cb0:	4299      	cmp	r1, r3
 8006cb2:	dd40      	ble.n	8006d36 <_printf_float+0x1b2>
 8006cb4:	f1a9 0902 	sub.w	r9, r9, #2
 8006cb8:	fa5f f989 	uxtb.w	r9, r9
 8006cbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006cc0:	d81f      	bhi.n	8006d02 <_printf_float+0x17e>
 8006cc2:	464a      	mov	r2, r9
 8006cc4:	3901      	subs	r1, #1
 8006cc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cca:	910d      	str	r1, [sp, #52]	; 0x34
 8006ccc:	f7ff ff1d 	bl	8006b0a <__exponent>
 8006cd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cd2:	4682      	mov	sl, r0
 8006cd4:	1813      	adds	r3, r2, r0
 8006cd6:	2a01      	cmp	r2, #1
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	dc02      	bgt.n	8006ce2 <_printf_float+0x15e>
 8006cdc:	6822      	ldr	r2, [r4, #0]
 8006cde:	07d2      	lsls	r2, r2, #31
 8006ce0:	d501      	bpl.n	8006ce6 <_printf_float+0x162>
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	6123      	str	r3, [r4, #16]
 8006ce6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d09b      	beq.n	8006c26 <_printf_float+0xa2>
 8006cee:	232d      	movs	r3, #45	; 0x2d
 8006cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cf4:	e797      	b.n	8006c26 <_printf_float+0xa2>
 8006cf6:	2947      	cmp	r1, #71	; 0x47
 8006cf8:	d1bc      	bne.n	8006c74 <_printf_float+0xf0>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1ba      	bne.n	8006c74 <_printf_float+0xf0>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e7b7      	b.n	8006c72 <_printf_float+0xee>
 8006d02:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006d06:	d118      	bne.n	8006d3a <_printf_float+0x1b6>
 8006d08:	2900      	cmp	r1, #0
 8006d0a:	6863      	ldr	r3, [r4, #4]
 8006d0c:	dd0b      	ble.n	8006d26 <_printf_float+0x1a2>
 8006d0e:	6121      	str	r1, [r4, #16]
 8006d10:	b913      	cbnz	r3, 8006d18 <_printf_float+0x194>
 8006d12:	6822      	ldr	r2, [r4, #0]
 8006d14:	07d0      	lsls	r0, r2, #31
 8006d16:	d502      	bpl.n	8006d1e <_printf_float+0x19a>
 8006d18:	3301      	adds	r3, #1
 8006d1a:	440b      	add	r3, r1
 8006d1c:	6123      	str	r3, [r4, #16]
 8006d1e:	f04f 0a00 	mov.w	sl, #0
 8006d22:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d24:	e7df      	b.n	8006ce6 <_printf_float+0x162>
 8006d26:	b913      	cbnz	r3, 8006d2e <_printf_float+0x1aa>
 8006d28:	6822      	ldr	r2, [r4, #0]
 8006d2a:	07d2      	lsls	r2, r2, #31
 8006d2c:	d501      	bpl.n	8006d32 <_printf_float+0x1ae>
 8006d2e:	3302      	adds	r3, #2
 8006d30:	e7f4      	b.n	8006d1c <_printf_float+0x198>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e7f2      	b.n	8006d1c <_printf_float+0x198>
 8006d36:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d3c:	4299      	cmp	r1, r3
 8006d3e:	db05      	blt.n	8006d4c <_printf_float+0x1c8>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	6121      	str	r1, [r4, #16]
 8006d44:	07d8      	lsls	r0, r3, #31
 8006d46:	d5ea      	bpl.n	8006d1e <_printf_float+0x19a>
 8006d48:	1c4b      	adds	r3, r1, #1
 8006d4a:	e7e7      	b.n	8006d1c <_printf_float+0x198>
 8006d4c:	2900      	cmp	r1, #0
 8006d4e:	bfcc      	ite	gt
 8006d50:	2201      	movgt	r2, #1
 8006d52:	f1c1 0202 	rsble	r2, r1, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	e7e0      	b.n	8006d1c <_printf_float+0x198>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	055a      	lsls	r2, r3, #21
 8006d5e:	d407      	bmi.n	8006d70 <_printf_float+0x1ec>
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	4642      	mov	r2, r8
 8006d64:	4631      	mov	r1, r6
 8006d66:	4628      	mov	r0, r5
 8006d68:	47b8      	blx	r7
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	d12b      	bne.n	8006dc6 <_printf_float+0x242>
 8006d6e:	e764      	b.n	8006c3a <_printf_float+0xb6>
 8006d70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d74:	f240 80dd 	bls.w	8006f32 <_printf_float+0x3ae>
 8006d78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f7f9 fe1c 	bl	80009bc <__aeabi_dcmpeq>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d033      	beq.n	8006df0 <_printf_float+0x26c>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	4a35      	ldr	r2, [pc, #212]	; (8006e64 <_printf_float+0x2e0>)
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	f43f af51 	beq.w	8006c3a <_printf_float+0xb6>
 8006d98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	db02      	blt.n	8006da6 <_printf_float+0x222>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	07d8      	lsls	r0, r3, #31
 8006da4:	d50f      	bpl.n	8006dc6 <_printf_float+0x242>
 8006da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	f43f af42 	beq.w	8006c3a <_printf_float+0xb6>
 8006db6:	f04f 0800 	mov.w	r8, #0
 8006dba:	f104 091a 	add.w	r9, r4, #26
 8006dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	4543      	cmp	r3, r8
 8006dc4:	dc09      	bgt.n	8006dda <_printf_float+0x256>
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	079b      	lsls	r3, r3, #30
 8006dca:	f100 8104 	bmi.w	8006fd6 <_printf_float+0x452>
 8006dce:	68e0      	ldr	r0, [r4, #12]
 8006dd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dd2:	4298      	cmp	r0, r3
 8006dd4:	bfb8      	it	lt
 8006dd6:	4618      	movlt	r0, r3
 8006dd8:	e731      	b.n	8006c3e <_printf_float+0xba>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	464a      	mov	r2, r9
 8006dde:	4631      	mov	r1, r6
 8006de0:	4628      	mov	r0, r5
 8006de2:	47b8      	blx	r7
 8006de4:	3001      	adds	r0, #1
 8006de6:	f43f af28 	beq.w	8006c3a <_printf_float+0xb6>
 8006dea:	f108 0801 	add.w	r8, r8, #1
 8006dee:	e7e6      	b.n	8006dbe <_printf_float+0x23a>
 8006df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	dc38      	bgt.n	8006e68 <_printf_float+0x2e4>
 8006df6:	2301      	movs	r3, #1
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	4a19      	ldr	r2, [pc, #100]	; (8006e64 <_printf_float+0x2e0>)
 8006dfe:	47b8      	blx	r7
 8006e00:	3001      	adds	r0, #1
 8006e02:	f43f af1a 	beq.w	8006c3a <_printf_float+0xb6>
 8006e06:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	d102      	bne.n	8006e14 <_printf_float+0x290>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	07d9      	lsls	r1, r3, #31
 8006e12:	d5d8      	bpl.n	8006dc6 <_printf_float+0x242>
 8006e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af0b 	beq.w	8006c3a <_printf_float+0xb6>
 8006e24:	f04f 0900 	mov.w	r9, #0
 8006e28:	f104 0a1a 	add.w	sl, r4, #26
 8006e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e2e:	425b      	negs	r3, r3
 8006e30:	454b      	cmp	r3, r9
 8006e32:	dc01      	bgt.n	8006e38 <_printf_float+0x2b4>
 8006e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e36:	e794      	b.n	8006d62 <_printf_float+0x1de>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f aef9 	beq.w	8006c3a <_printf_float+0xb6>
 8006e48:	f109 0901 	add.w	r9, r9, #1
 8006e4c:	e7ee      	b.n	8006e2c <_printf_float+0x2a8>
 8006e4e:	bf00      	nop
 8006e50:	7fefffff 	.word	0x7fefffff
 8006e54:	0800a383 	.word	0x0800a383
 8006e58:	0800a387 	.word	0x0800a387
 8006e5c:	0800a38b 	.word	0x0800a38b
 8006e60:	0800a38f 	.word	0x0800a38f
 8006e64:	0800a393 	.word	0x0800a393
 8006e68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bfa8      	it	ge
 8006e70:	461a      	movge	r2, r3
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	4691      	mov	r9, r2
 8006e76:	dc37      	bgt.n	8006ee8 <_printf_float+0x364>
 8006e78:	f04f 0b00 	mov.w	fp, #0
 8006e7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e80:	f104 021a 	add.w	r2, r4, #26
 8006e84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e88:	ebaa 0309 	sub.w	r3, sl, r9
 8006e8c:	455b      	cmp	r3, fp
 8006e8e:	dc33      	bgt.n	8006ef8 <_printf_float+0x374>
 8006e90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e94:	429a      	cmp	r2, r3
 8006e96:	db3b      	blt.n	8006f10 <_printf_float+0x38c>
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	07da      	lsls	r2, r3, #31
 8006e9c:	d438      	bmi.n	8006f10 <_printf_float+0x38c>
 8006e9e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006ea2:	eba2 0903 	sub.w	r9, r2, r3
 8006ea6:	eba2 020a 	sub.w	r2, r2, sl
 8006eaa:	4591      	cmp	r9, r2
 8006eac:	bfa8      	it	ge
 8006eae:	4691      	movge	r9, r2
 8006eb0:	f1b9 0f00 	cmp.w	r9, #0
 8006eb4:	dc34      	bgt.n	8006f20 <_printf_float+0x39c>
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ebe:	f104 0a1a 	add.w	sl, r4, #26
 8006ec2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	eba3 0309 	sub.w	r3, r3, r9
 8006ecc:	4543      	cmp	r3, r8
 8006ece:	f77f af7a 	ble.w	8006dc6 <_printf_float+0x242>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f aeac 	beq.w	8006c3a <_printf_float+0xb6>
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	e7ec      	b.n	8006ec2 <_printf_float+0x33e>
 8006ee8:	4613      	mov	r3, r2
 8006eea:	4631      	mov	r1, r6
 8006eec:	4642      	mov	r2, r8
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	d1c0      	bne.n	8006e78 <_printf_float+0x2f4>
 8006ef6:	e6a0      	b.n	8006c3a <_printf_float+0xb6>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f ae99 	beq.w	8006c3a <_printf_float+0xb6>
 8006f08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f0a:	f10b 0b01 	add.w	fp, fp, #1
 8006f0e:	e7b9      	b.n	8006e84 <_printf_float+0x300>
 8006f10:	4631      	mov	r1, r6
 8006f12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f16:	4628      	mov	r0, r5
 8006f18:	47b8      	blx	r7
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d1bf      	bne.n	8006e9e <_printf_float+0x31a>
 8006f1e:	e68c      	b.n	8006c3a <_printf_float+0xb6>
 8006f20:	464b      	mov	r3, r9
 8006f22:	4631      	mov	r1, r6
 8006f24:	4628      	mov	r0, r5
 8006f26:	eb08 020a 	add.w	r2, r8, sl
 8006f2a:	47b8      	blx	r7
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d1c2      	bne.n	8006eb6 <_printf_float+0x332>
 8006f30:	e683      	b.n	8006c3a <_printf_float+0xb6>
 8006f32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f34:	2a01      	cmp	r2, #1
 8006f36:	dc01      	bgt.n	8006f3c <_printf_float+0x3b8>
 8006f38:	07db      	lsls	r3, r3, #31
 8006f3a:	d539      	bpl.n	8006fb0 <_printf_float+0x42c>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	4642      	mov	r2, r8
 8006f40:	4631      	mov	r1, r6
 8006f42:	4628      	mov	r0, r5
 8006f44:	47b8      	blx	r7
 8006f46:	3001      	adds	r0, #1
 8006f48:	f43f ae77 	beq.w	8006c3a <_printf_float+0xb6>
 8006f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	f43f ae6f 	beq.w	8006c3a <_printf_float+0xb6>
 8006f5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f60:	2200      	movs	r2, #0
 8006f62:	2300      	movs	r3, #0
 8006f64:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006f68:	f7f9 fd28 	bl	80009bc <__aeabi_dcmpeq>
 8006f6c:	b9d8      	cbnz	r0, 8006fa6 <_printf_float+0x422>
 8006f6e:	f109 33ff 	add.w	r3, r9, #4294967295
 8006f72:	f108 0201 	add.w	r2, r8, #1
 8006f76:	4631      	mov	r1, r6
 8006f78:	4628      	mov	r0, r5
 8006f7a:	47b8      	blx	r7
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d10e      	bne.n	8006f9e <_printf_float+0x41a>
 8006f80:	e65b      	b.n	8006c3a <_printf_float+0xb6>
 8006f82:	2301      	movs	r3, #1
 8006f84:	464a      	mov	r2, r9
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f ae54 	beq.w	8006c3a <_printf_float+0xb6>
 8006f92:	f108 0801 	add.w	r8, r8, #1
 8006f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	4543      	cmp	r3, r8
 8006f9c:	dcf1      	bgt.n	8006f82 <_printf_float+0x3fe>
 8006f9e:	4653      	mov	r3, sl
 8006fa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fa4:	e6de      	b.n	8006d64 <_printf_float+0x1e0>
 8006fa6:	f04f 0800 	mov.w	r8, #0
 8006faa:	f104 091a 	add.w	r9, r4, #26
 8006fae:	e7f2      	b.n	8006f96 <_printf_float+0x412>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	e7df      	b.n	8006f76 <_printf_float+0x3f2>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	464a      	mov	r2, r9
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f43f ae3a 	beq.w	8006c3a <_printf_float+0xb6>
 8006fc6:	f108 0801 	add.w	r8, r8, #1
 8006fca:	68e3      	ldr	r3, [r4, #12]
 8006fcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006fce:	1a5b      	subs	r3, r3, r1
 8006fd0:	4543      	cmp	r3, r8
 8006fd2:	dcf0      	bgt.n	8006fb6 <_printf_float+0x432>
 8006fd4:	e6fb      	b.n	8006dce <_printf_float+0x24a>
 8006fd6:	f04f 0800 	mov.w	r8, #0
 8006fda:	f104 0919 	add.w	r9, r4, #25
 8006fde:	e7f4      	b.n	8006fca <_printf_float+0x446>

08006fe0 <_printf_common>:
 8006fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	4699      	mov	r9, r3
 8006fe8:	688a      	ldr	r2, [r1, #8]
 8006fea:	690b      	ldr	r3, [r1, #16]
 8006fec:	4607      	mov	r7, r0
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	bfb8      	it	lt
 8006ff2:	4613      	movlt	r3, r2
 8006ff4:	6033      	str	r3, [r6, #0]
 8006ff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007000:	b10a      	cbz	r2, 8007006 <_printf_common+0x26>
 8007002:	3301      	adds	r3, #1
 8007004:	6033      	str	r3, [r6, #0]
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	0699      	lsls	r1, r3, #26
 800700a:	bf42      	ittt	mi
 800700c:	6833      	ldrmi	r3, [r6, #0]
 800700e:	3302      	addmi	r3, #2
 8007010:	6033      	strmi	r3, [r6, #0]
 8007012:	6825      	ldr	r5, [r4, #0]
 8007014:	f015 0506 	ands.w	r5, r5, #6
 8007018:	d106      	bne.n	8007028 <_printf_common+0x48>
 800701a:	f104 0a19 	add.w	sl, r4, #25
 800701e:	68e3      	ldr	r3, [r4, #12]
 8007020:	6832      	ldr	r2, [r6, #0]
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	42ab      	cmp	r3, r5
 8007026:	dc2b      	bgt.n	8007080 <_printf_common+0xa0>
 8007028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800702c:	1e13      	subs	r3, r2, #0
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	bf18      	it	ne
 8007032:	2301      	movne	r3, #1
 8007034:	0692      	lsls	r2, r2, #26
 8007036:	d430      	bmi.n	800709a <_printf_common+0xba>
 8007038:	4649      	mov	r1, r9
 800703a:	4638      	mov	r0, r7
 800703c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007040:	47c0      	blx	r8
 8007042:	3001      	adds	r0, #1
 8007044:	d023      	beq.n	800708e <_printf_common+0xae>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	6922      	ldr	r2, [r4, #16]
 800704a:	f003 0306 	and.w	r3, r3, #6
 800704e:	2b04      	cmp	r3, #4
 8007050:	bf14      	ite	ne
 8007052:	2500      	movne	r5, #0
 8007054:	6833      	ldreq	r3, [r6, #0]
 8007056:	f04f 0600 	mov.w	r6, #0
 800705a:	bf08      	it	eq
 800705c:	68e5      	ldreq	r5, [r4, #12]
 800705e:	f104 041a 	add.w	r4, r4, #26
 8007062:	bf08      	it	eq
 8007064:	1aed      	subeq	r5, r5, r3
 8007066:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800706a:	bf08      	it	eq
 800706c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007070:	4293      	cmp	r3, r2
 8007072:	bfc4      	itt	gt
 8007074:	1a9b      	subgt	r3, r3, r2
 8007076:	18ed      	addgt	r5, r5, r3
 8007078:	42b5      	cmp	r5, r6
 800707a:	d11a      	bne.n	80070b2 <_printf_common+0xd2>
 800707c:	2000      	movs	r0, #0
 800707e:	e008      	b.n	8007092 <_printf_common+0xb2>
 8007080:	2301      	movs	r3, #1
 8007082:	4652      	mov	r2, sl
 8007084:	4649      	mov	r1, r9
 8007086:	4638      	mov	r0, r7
 8007088:	47c0      	blx	r8
 800708a:	3001      	adds	r0, #1
 800708c:	d103      	bne.n	8007096 <_printf_common+0xb6>
 800708e:	f04f 30ff 	mov.w	r0, #4294967295
 8007092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007096:	3501      	adds	r5, #1
 8007098:	e7c1      	b.n	800701e <_printf_common+0x3e>
 800709a:	2030      	movs	r0, #48	; 0x30
 800709c:	18e1      	adds	r1, r4, r3
 800709e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070a8:	4422      	add	r2, r4
 80070aa:	3302      	adds	r3, #2
 80070ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070b0:	e7c2      	b.n	8007038 <_printf_common+0x58>
 80070b2:	2301      	movs	r3, #1
 80070b4:	4622      	mov	r2, r4
 80070b6:	4649      	mov	r1, r9
 80070b8:	4638      	mov	r0, r7
 80070ba:	47c0      	blx	r8
 80070bc:	3001      	adds	r0, #1
 80070be:	d0e6      	beq.n	800708e <_printf_common+0xae>
 80070c0:	3601      	adds	r6, #1
 80070c2:	e7d9      	b.n	8007078 <_printf_common+0x98>

080070c4 <_printf_i>:
 80070c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070c8:	7e0f      	ldrb	r7, [r1, #24]
 80070ca:	4691      	mov	r9, r2
 80070cc:	2f78      	cmp	r7, #120	; 0x78
 80070ce:	4680      	mov	r8, r0
 80070d0:	460c      	mov	r4, r1
 80070d2:	469a      	mov	sl, r3
 80070d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070da:	d807      	bhi.n	80070ec <_printf_i+0x28>
 80070dc:	2f62      	cmp	r7, #98	; 0x62
 80070de:	d80a      	bhi.n	80070f6 <_printf_i+0x32>
 80070e0:	2f00      	cmp	r7, #0
 80070e2:	f000 80d5 	beq.w	8007290 <_printf_i+0x1cc>
 80070e6:	2f58      	cmp	r7, #88	; 0x58
 80070e8:	f000 80c1 	beq.w	800726e <_printf_i+0x1aa>
 80070ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070f4:	e03a      	b.n	800716c <_printf_i+0xa8>
 80070f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070fa:	2b15      	cmp	r3, #21
 80070fc:	d8f6      	bhi.n	80070ec <_printf_i+0x28>
 80070fe:	a101      	add	r1, pc, #4	; (adr r1, 8007104 <_printf_i+0x40>)
 8007100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007104:	0800715d 	.word	0x0800715d
 8007108:	08007171 	.word	0x08007171
 800710c:	080070ed 	.word	0x080070ed
 8007110:	080070ed 	.word	0x080070ed
 8007114:	080070ed 	.word	0x080070ed
 8007118:	080070ed 	.word	0x080070ed
 800711c:	08007171 	.word	0x08007171
 8007120:	080070ed 	.word	0x080070ed
 8007124:	080070ed 	.word	0x080070ed
 8007128:	080070ed 	.word	0x080070ed
 800712c:	080070ed 	.word	0x080070ed
 8007130:	08007277 	.word	0x08007277
 8007134:	0800719d 	.word	0x0800719d
 8007138:	08007231 	.word	0x08007231
 800713c:	080070ed 	.word	0x080070ed
 8007140:	080070ed 	.word	0x080070ed
 8007144:	08007299 	.word	0x08007299
 8007148:	080070ed 	.word	0x080070ed
 800714c:	0800719d 	.word	0x0800719d
 8007150:	080070ed 	.word	0x080070ed
 8007154:	080070ed 	.word	0x080070ed
 8007158:	08007239 	.word	0x08007239
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	1d1a      	adds	r2, r3, #4
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	602a      	str	r2, [r5, #0]
 8007164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800716c:	2301      	movs	r3, #1
 800716e:	e0a0      	b.n	80072b2 <_printf_i+0x1ee>
 8007170:	6820      	ldr	r0, [r4, #0]
 8007172:	682b      	ldr	r3, [r5, #0]
 8007174:	0607      	lsls	r7, r0, #24
 8007176:	f103 0104 	add.w	r1, r3, #4
 800717a:	6029      	str	r1, [r5, #0]
 800717c:	d501      	bpl.n	8007182 <_printf_i+0xbe>
 800717e:	681e      	ldr	r6, [r3, #0]
 8007180:	e003      	b.n	800718a <_printf_i+0xc6>
 8007182:	0646      	lsls	r6, r0, #25
 8007184:	d5fb      	bpl.n	800717e <_printf_i+0xba>
 8007186:	f9b3 6000 	ldrsh.w	r6, [r3]
 800718a:	2e00      	cmp	r6, #0
 800718c:	da03      	bge.n	8007196 <_printf_i+0xd2>
 800718e:	232d      	movs	r3, #45	; 0x2d
 8007190:	4276      	negs	r6, r6
 8007192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007196:	230a      	movs	r3, #10
 8007198:	4859      	ldr	r0, [pc, #356]	; (8007300 <_printf_i+0x23c>)
 800719a:	e012      	b.n	80071c2 <_printf_i+0xfe>
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	6820      	ldr	r0, [r4, #0]
 80071a0:	1d19      	adds	r1, r3, #4
 80071a2:	6029      	str	r1, [r5, #0]
 80071a4:	0605      	lsls	r5, r0, #24
 80071a6:	d501      	bpl.n	80071ac <_printf_i+0xe8>
 80071a8:	681e      	ldr	r6, [r3, #0]
 80071aa:	e002      	b.n	80071b2 <_printf_i+0xee>
 80071ac:	0641      	lsls	r1, r0, #25
 80071ae:	d5fb      	bpl.n	80071a8 <_printf_i+0xe4>
 80071b0:	881e      	ldrh	r6, [r3, #0]
 80071b2:	2f6f      	cmp	r7, #111	; 0x6f
 80071b4:	bf0c      	ite	eq
 80071b6:	2308      	moveq	r3, #8
 80071b8:	230a      	movne	r3, #10
 80071ba:	4851      	ldr	r0, [pc, #324]	; (8007300 <_printf_i+0x23c>)
 80071bc:	2100      	movs	r1, #0
 80071be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071c2:	6865      	ldr	r5, [r4, #4]
 80071c4:	2d00      	cmp	r5, #0
 80071c6:	bfa8      	it	ge
 80071c8:	6821      	ldrge	r1, [r4, #0]
 80071ca:	60a5      	str	r5, [r4, #8]
 80071cc:	bfa4      	itt	ge
 80071ce:	f021 0104 	bicge.w	r1, r1, #4
 80071d2:	6021      	strge	r1, [r4, #0]
 80071d4:	b90e      	cbnz	r6, 80071da <_printf_i+0x116>
 80071d6:	2d00      	cmp	r5, #0
 80071d8:	d04b      	beq.n	8007272 <_printf_i+0x1ae>
 80071da:	4615      	mov	r5, r2
 80071dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80071e0:	fb03 6711 	mls	r7, r3, r1, r6
 80071e4:	5dc7      	ldrb	r7, [r0, r7]
 80071e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071ea:	4637      	mov	r7, r6
 80071ec:	42bb      	cmp	r3, r7
 80071ee:	460e      	mov	r6, r1
 80071f0:	d9f4      	bls.n	80071dc <_printf_i+0x118>
 80071f2:	2b08      	cmp	r3, #8
 80071f4:	d10b      	bne.n	800720e <_printf_i+0x14a>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	07de      	lsls	r6, r3, #31
 80071fa:	d508      	bpl.n	800720e <_printf_i+0x14a>
 80071fc:	6923      	ldr	r3, [r4, #16]
 80071fe:	6861      	ldr	r1, [r4, #4]
 8007200:	4299      	cmp	r1, r3
 8007202:	bfde      	ittt	le
 8007204:	2330      	movle	r3, #48	; 0x30
 8007206:	f805 3c01 	strble.w	r3, [r5, #-1]
 800720a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800720e:	1b52      	subs	r2, r2, r5
 8007210:	6122      	str	r2, [r4, #16]
 8007212:	464b      	mov	r3, r9
 8007214:	4621      	mov	r1, r4
 8007216:	4640      	mov	r0, r8
 8007218:	f8cd a000 	str.w	sl, [sp]
 800721c:	aa03      	add	r2, sp, #12
 800721e:	f7ff fedf 	bl	8006fe0 <_printf_common>
 8007222:	3001      	adds	r0, #1
 8007224:	d14a      	bne.n	80072bc <_printf_i+0x1f8>
 8007226:	f04f 30ff 	mov.w	r0, #4294967295
 800722a:	b004      	add	sp, #16
 800722c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	f043 0320 	orr.w	r3, r3, #32
 8007236:	6023      	str	r3, [r4, #0]
 8007238:	2778      	movs	r7, #120	; 0x78
 800723a:	4832      	ldr	r0, [pc, #200]	; (8007304 <_printf_i+0x240>)
 800723c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	6829      	ldr	r1, [r5, #0]
 8007244:	061f      	lsls	r7, r3, #24
 8007246:	f851 6b04 	ldr.w	r6, [r1], #4
 800724a:	d402      	bmi.n	8007252 <_printf_i+0x18e>
 800724c:	065f      	lsls	r7, r3, #25
 800724e:	bf48      	it	mi
 8007250:	b2b6      	uxthmi	r6, r6
 8007252:	07df      	lsls	r7, r3, #31
 8007254:	bf48      	it	mi
 8007256:	f043 0320 	orrmi.w	r3, r3, #32
 800725a:	6029      	str	r1, [r5, #0]
 800725c:	bf48      	it	mi
 800725e:	6023      	strmi	r3, [r4, #0]
 8007260:	b91e      	cbnz	r6, 800726a <_printf_i+0x1a6>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	f023 0320 	bic.w	r3, r3, #32
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	2310      	movs	r3, #16
 800726c:	e7a6      	b.n	80071bc <_printf_i+0xf8>
 800726e:	4824      	ldr	r0, [pc, #144]	; (8007300 <_printf_i+0x23c>)
 8007270:	e7e4      	b.n	800723c <_printf_i+0x178>
 8007272:	4615      	mov	r5, r2
 8007274:	e7bd      	b.n	80071f2 <_printf_i+0x12e>
 8007276:	682b      	ldr	r3, [r5, #0]
 8007278:	6826      	ldr	r6, [r4, #0]
 800727a:	1d18      	adds	r0, r3, #4
 800727c:	6961      	ldr	r1, [r4, #20]
 800727e:	6028      	str	r0, [r5, #0]
 8007280:	0635      	lsls	r5, r6, #24
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	d501      	bpl.n	800728a <_printf_i+0x1c6>
 8007286:	6019      	str	r1, [r3, #0]
 8007288:	e002      	b.n	8007290 <_printf_i+0x1cc>
 800728a:	0670      	lsls	r0, r6, #25
 800728c:	d5fb      	bpl.n	8007286 <_printf_i+0x1c2>
 800728e:	8019      	strh	r1, [r3, #0]
 8007290:	2300      	movs	r3, #0
 8007292:	4615      	mov	r5, r2
 8007294:	6123      	str	r3, [r4, #16]
 8007296:	e7bc      	b.n	8007212 <_printf_i+0x14e>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	2100      	movs	r1, #0
 800729c:	1d1a      	adds	r2, r3, #4
 800729e:	602a      	str	r2, [r5, #0]
 80072a0:	681d      	ldr	r5, [r3, #0]
 80072a2:	6862      	ldr	r2, [r4, #4]
 80072a4:	4628      	mov	r0, r5
 80072a6:	f000 fa08 	bl	80076ba <memchr>
 80072aa:	b108      	cbz	r0, 80072b0 <_printf_i+0x1ec>
 80072ac:	1b40      	subs	r0, r0, r5
 80072ae:	6060      	str	r0, [r4, #4]
 80072b0:	6863      	ldr	r3, [r4, #4]
 80072b2:	6123      	str	r3, [r4, #16]
 80072b4:	2300      	movs	r3, #0
 80072b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ba:	e7aa      	b.n	8007212 <_printf_i+0x14e>
 80072bc:	462a      	mov	r2, r5
 80072be:	4649      	mov	r1, r9
 80072c0:	4640      	mov	r0, r8
 80072c2:	6923      	ldr	r3, [r4, #16]
 80072c4:	47d0      	blx	sl
 80072c6:	3001      	adds	r0, #1
 80072c8:	d0ad      	beq.n	8007226 <_printf_i+0x162>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	079b      	lsls	r3, r3, #30
 80072ce:	d413      	bmi.n	80072f8 <_printf_i+0x234>
 80072d0:	68e0      	ldr	r0, [r4, #12]
 80072d2:	9b03      	ldr	r3, [sp, #12]
 80072d4:	4298      	cmp	r0, r3
 80072d6:	bfb8      	it	lt
 80072d8:	4618      	movlt	r0, r3
 80072da:	e7a6      	b.n	800722a <_printf_i+0x166>
 80072dc:	2301      	movs	r3, #1
 80072de:	4632      	mov	r2, r6
 80072e0:	4649      	mov	r1, r9
 80072e2:	4640      	mov	r0, r8
 80072e4:	47d0      	blx	sl
 80072e6:	3001      	adds	r0, #1
 80072e8:	d09d      	beq.n	8007226 <_printf_i+0x162>
 80072ea:	3501      	adds	r5, #1
 80072ec:	68e3      	ldr	r3, [r4, #12]
 80072ee:	9903      	ldr	r1, [sp, #12]
 80072f0:	1a5b      	subs	r3, r3, r1
 80072f2:	42ab      	cmp	r3, r5
 80072f4:	dcf2      	bgt.n	80072dc <_printf_i+0x218>
 80072f6:	e7eb      	b.n	80072d0 <_printf_i+0x20c>
 80072f8:	2500      	movs	r5, #0
 80072fa:	f104 0619 	add.w	r6, r4, #25
 80072fe:	e7f5      	b.n	80072ec <_printf_i+0x228>
 8007300:	0800a395 	.word	0x0800a395
 8007304:	0800a3a6 	.word	0x0800a3a6

08007308 <std>:
 8007308:	2300      	movs	r3, #0
 800730a:	b510      	push	{r4, lr}
 800730c:	4604      	mov	r4, r0
 800730e:	e9c0 3300 	strd	r3, r3, [r0]
 8007312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007316:	6083      	str	r3, [r0, #8]
 8007318:	8181      	strh	r1, [r0, #12]
 800731a:	6643      	str	r3, [r0, #100]	; 0x64
 800731c:	81c2      	strh	r2, [r0, #14]
 800731e:	6183      	str	r3, [r0, #24]
 8007320:	4619      	mov	r1, r3
 8007322:	2208      	movs	r2, #8
 8007324:	305c      	adds	r0, #92	; 0x5c
 8007326:	f000 f914 	bl	8007552 <memset>
 800732a:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <std+0x58>)
 800732c:	6224      	str	r4, [r4, #32]
 800732e:	6263      	str	r3, [r4, #36]	; 0x24
 8007330:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <std+0x5c>)
 8007332:	62a3      	str	r3, [r4, #40]	; 0x28
 8007334:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <std+0x60>)
 8007336:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007338:	4b0c      	ldr	r3, [pc, #48]	; (800736c <std+0x64>)
 800733a:	6323      	str	r3, [r4, #48]	; 0x30
 800733c:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <std+0x68>)
 800733e:	429c      	cmp	r4, r3
 8007340:	d006      	beq.n	8007350 <std+0x48>
 8007342:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007346:	4294      	cmp	r4, r2
 8007348:	d002      	beq.n	8007350 <std+0x48>
 800734a:	33d0      	adds	r3, #208	; 0xd0
 800734c:	429c      	cmp	r4, r3
 800734e:	d105      	bne.n	800735c <std+0x54>
 8007350:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007358:	f000 b9ac 	b.w	80076b4 <__retarget_lock_init_recursive>
 800735c:	bd10      	pop	{r4, pc}
 800735e:	bf00      	nop
 8007360:	080074cd 	.word	0x080074cd
 8007364:	080074ef 	.word	0x080074ef
 8007368:	08007527 	.word	0x08007527
 800736c:	0800754b 	.word	0x0800754b
 8007370:	2000042c 	.word	0x2000042c

08007374 <stdio_exit_handler>:
 8007374:	4a02      	ldr	r2, [pc, #8]	; (8007380 <stdio_exit_handler+0xc>)
 8007376:	4903      	ldr	r1, [pc, #12]	; (8007384 <stdio_exit_handler+0x10>)
 8007378:	4803      	ldr	r0, [pc, #12]	; (8007388 <stdio_exit_handler+0x14>)
 800737a:	f000 b869 	b.w	8007450 <_fwalk_sglue>
 800737e:	bf00      	nop
 8007380:	20000024 	.word	0x20000024
 8007384:	08008f15 	.word	0x08008f15
 8007388:	20000030 	.word	0x20000030

0800738c <cleanup_stdio>:
 800738c:	6841      	ldr	r1, [r0, #4]
 800738e:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <cleanup_stdio+0x34>)
 8007390:	b510      	push	{r4, lr}
 8007392:	4299      	cmp	r1, r3
 8007394:	4604      	mov	r4, r0
 8007396:	d001      	beq.n	800739c <cleanup_stdio+0x10>
 8007398:	f001 fdbc 	bl	8008f14 <_fflush_r>
 800739c:	68a1      	ldr	r1, [r4, #8]
 800739e:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <cleanup_stdio+0x38>)
 80073a0:	4299      	cmp	r1, r3
 80073a2:	d002      	beq.n	80073aa <cleanup_stdio+0x1e>
 80073a4:	4620      	mov	r0, r4
 80073a6:	f001 fdb5 	bl	8008f14 <_fflush_r>
 80073aa:	68e1      	ldr	r1, [r4, #12]
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <cleanup_stdio+0x3c>)
 80073ae:	4299      	cmp	r1, r3
 80073b0:	d004      	beq.n	80073bc <cleanup_stdio+0x30>
 80073b2:	4620      	mov	r0, r4
 80073b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b8:	f001 bdac 	b.w	8008f14 <_fflush_r>
 80073bc:	bd10      	pop	{r4, pc}
 80073be:	bf00      	nop
 80073c0:	2000042c 	.word	0x2000042c
 80073c4:	20000494 	.word	0x20000494
 80073c8:	200004fc 	.word	0x200004fc

080073cc <global_stdio_init.part.0>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <global_stdio_init.part.0+0x30>)
 80073d0:	4c0b      	ldr	r4, [pc, #44]	; (8007400 <global_stdio_init.part.0+0x34>)
 80073d2:	4a0c      	ldr	r2, [pc, #48]	; (8007404 <global_stdio_init.part.0+0x38>)
 80073d4:	4620      	mov	r0, r4
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	2104      	movs	r1, #4
 80073da:	2200      	movs	r2, #0
 80073dc:	f7ff ff94 	bl	8007308 <std>
 80073e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80073e4:	2201      	movs	r2, #1
 80073e6:	2109      	movs	r1, #9
 80073e8:	f7ff ff8e 	bl	8007308 <std>
 80073ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80073f0:	2202      	movs	r2, #2
 80073f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f6:	2112      	movs	r1, #18
 80073f8:	f7ff bf86 	b.w	8007308 <std>
 80073fc:	20000564 	.word	0x20000564
 8007400:	2000042c 	.word	0x2000042c
 8007404:	08007375 	.word	0x08007375

08007408 <__sfp_lock_acquire>:
 8007408:	4801      	ldr	r0, [pc, #4]	; (8007410 <__sfp_lock_acquire+0x8>)
 800740a:	f000 b954 	b.w	80076b6 <__retarget_lock_acquire_recursive>
 800740e:	bf00      	nop
 8007410:	2000056d 	.word	0x2000056d

08007414 <__sfp_lock_release>:
 8007414:	4801      	ldr	r0, [pc, #4]	; (800741c <__sfp_lock_release+0x8>)
 8007416:	f000 b94f 	b.w	80076b8 <__retarget_lock_release_recursive>
 800741a:	bf00      	nop
 800741c:	2000056d 	.word	0x2000056d

08007420 <__sinit>:
 8007420:	b510      	push	{r4, lr}
 8007422:	4604      	mov	r4, r0
 8007424:	f7ff fff0 	bl	8007408 <__sfp_lock_acquire>
 8007428:	6a23      	ldr	r3, [r4, #32]
 800742a:	b11b      	cbz	r3, 8007434 <__sinit+0x14>
 800742c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007430:	f7ff bff0 	b.w	8007414 <__sfp_lock_release>
 8007434:	4b04      	ldr	r3, [pc, #16]	; (8007448 <__sinit+0x28>)
 8007436:	6223      	str	r3, [r4, #32]
 8007438:	4b04      	ldr	r3, [pc, #16]	; (800744c <__sinit+0x2c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1f5      	bne.n	800742c <__sinit+0xc>
 8007440:	f7ff ffc4 	bl	80073cc <global_stdio_init.part.0>
 8007444:	e7f2      	b.n	800742c <__sinit+0xc>
 8007446:	bf00      	nop
 8007448:	0800738d 	.word	0x0800738d
 800744c:	20000564 	.word	0x20000564

08007450 <_fwalk_sglue>:
 8007450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007454:	4607      	mov	r7, r0
 8007456:	4688      	mov	r8, r1
 8007458:	4614      	mov	r4, r2
 800745a:	2600      	movs	r6, #0
 800745c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007460:	f1b9 0901 	subs.w	r9, r9, #1
 8007464:	d505      	bpl.n	8007472 <_fwalk_sglue+0x22>
 8007466:	6824      	ldr	r4, [r4, #0]
 8007468:	2c00      	cmp	r4, #0
 800746a:	d1f7      	bne.n	800745c <_fwalk_sglue+0xc>
 800746c:	4630      	mov	r0, r6
 800746e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007472:	89ab      	ldrh	r3, [r5, #12]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d907      	bls.n	8007488 <_fwalk_sglue+0x38>
 8007478:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800747c:	3301      	adds	r3, #1
 800747e:	d003      	beq.n	8007488 <_fwalk_sglue+0x38>
 8007480:	4629      	mov	r1, r5
 8007482:	4638      	mov	r0, r7
 8007484:	47c0      	blx	r8
 8007486:	4306      	orrs	r6, r0
 8007488:	3568      	adds	r5, #104	; 0x68
 800748a:	e7e9      	b.n	8007460 <_fwalk_sglue+0x10>

0800748c <siprintf>:
 800748c:	b40e      	push	{r1, r2, r3}
 800748e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007492:	b500      	push	{lr}
 8007494:	b09c      	sub	sp, #112	; 0x70
 8007496:	ab1d      	add	r3, sp, #116	; 0x74
 8007498:	9002      	str	r0, [sp, #8]
 800749a:	9006      	str	r0, [sp, #24]
 800749c:	9107      	str	r1, [sp, #28]
 800749e:	9104      	str	r1, [sp, #16]
 80074a0:	4808      	ldr	r0, [pc, #32]	; (80074c4 <siprintf+0x38>)
 80074a2:	4909      	ldr	r1, [pc, #36]	; (80074c8 <siprintf+0x3c>)
 80074a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a8:	9105      	str	r1, [sp, #20]
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	a902      	add	r1, sp, #8
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	f001 fbb0 	bl	8008c14 <_svfiprintf_r>
 80074b4:	2200      	movs	r2, #0
 80074b6:	9b02      	ldr	r3, [sp, #8]
 80074b8:	701a      	strb	r2, [r3, #0]
 80074ba:	b01c      	add	sp, #112	; 0x70
 80074bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074c0:	b003      	add	sp, #12
 80074c2:	4770      	bx	lr
 80074c4:	2000007c 	.word	0x2000007c
 80074c8:	ffff0208 	.word	0xffff0208

080074cc <__sread>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	460c      	mov	r4, r1
 80074d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d4:	f000 f890 	bl	80075f8 <_read_r>
 80074d8:	2800      	cmp	r0, #0
 80074da:	bfab      	itete	ge
 80074dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074de:	89a3      	ldrhlt	r3, [r4, #12]
 80074e0:	181b      	addge	r3, r3, r0
 80074e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074e6:	bfac      	ite	ge
 80074e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80074ea:	81a3      	strhlt	r3, [r4, #12]
 80074ec:	bd10      	pop	{r4, pc}

080074ee <__swrite>:
 80074ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f2:	461f      	mov	r7, r3
 80074f4:	898b      	ldrh	r3, [r1, #12]
 80074f6:	4605      	mov	r5, r0
 80074f8:	05db      	lsls	r3, r3, #23
 80074fa:	460c      	mov	r4, r1
 80074fc:	4616      	mov	r6, r2
 80074fe:	d505      	bpl.n	800750c <__swrite+0x1e>
 8007500:	2302      	movs	r3, #2
 8007502:	2200      	movs	r2, #0
 8007504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007508:	f000 f864 	bl	80075d4 <_lseek_r>
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	4632      	mov	r2, r6
 8007510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	4628      	mov	r0, r5
 8007518:	463b      	mov	r3, r7
 800751a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800751e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007522:	f000 b88b 	b.w	800763c <_write_r>

08007526 <__sseek>:
 8007526:	b510      	push	{r4, lr}
 8007528:	460c      	mov	r4, r1
 800752a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752e:	f000 f851 	bl	80075d4 <_lseek_r>
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	bf15      	itete	ne
 8007538:	6560      	strne	r0, [r4, #84]	; 0x54
 800753a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800753e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007542:	81a3      	strheq	r3, [r4, #12]
 8007544:	bf18      	it	ne
 8007546:	81a3      	strhne	r3, [r4, #12]
 8007548:	bd10      	pop	{r4, pc}

0800754a <__sclose>:
 800754a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754e:	f000 b831 	b.w	80075b4 <_close_r>

08007552 <memset>:
 8007552:	4603      	mov	r3, r0
 8007554:	4402      	add	r2, r0
 8007556:	4293      	cmp	r3, r2
 8007558:	d100      	bne.n	800755c <memset+0xa>
 800755a:	4770      	bx	lr
 800755c:	f803 1b01 	strb.w	r1, [r3], #1
 8007560:	e7f9      	b.n	8007556 <memset+0x4>

08007562 <strncmp>:
 8007562:	b510      	push	{r4, lr}
 8007564:	b16a      	cbz	r2, 8007582 <strncmp+0x20>
 8007566:	3901      	subs	r1, #1
 8007568:	1884      	adds	r4, r0, r2
 800756a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800756e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007572:	429a      	cmp	r2, r3
 8007574:	d103      	bne.n	800757e <strncmp+0x1c>
 8007576:	42a0      	cmp	r0, r4
 8007578:	d001      	beq.n	800757e <strncmp+0x1c>
 800757a:	2a00      	cmp	r2, #0
 800757c:	d1f5      	bne.n	800756a <strncmp+0x8>
 800757e:	1ad0      	subs	r0, r2, r3
 8007580:	bd10      	pop	{r4, pc}
 8007582:	4610      	mov	r0, r2
 8007584:	e7fc      	b.n	8007580 <strncmp+0x1e>

08007586 <strncpy>:
 8007586:	4603      	mov	r3, r0
 8007588:	b510      	push	{r4, lr}
 800758a:	3901      	subs	r1, #1
 800758c:	b132      	cbz	r2, 800759c <strncpy+0x16>
 800758e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007592:	3a01      	subs	r2, #1
 8007594:	f803 4b01 	strb.w	r4, [r3], #1
 8007598:	2c00      	cmp	r4, #0
 800759a:	d1f7      	bne.n	800758c <strncpy+0x6>
 800759c:	2100      	movs	r1, #0
 800759e:	441a      	add	r2, r3
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d100      	bne.n	80075a6 <strncpy+0x20>
 80075a4:	bd10      	pop	{r4, pc}
 80075a6:	f803 1b01 	strb.w	r1, [r3], #1
 80075aa:	e7f9      	b.n	80075a0 <strncpy+0x1a>

080075ac <_localeconv_r>:
 80075ac:	4800      	ldr	r0, [pc, #0]	; (80075b0 <_localeconv_r+0x4>)
 80075ae:	4770      	bx	lr
 80075b0:	20000170 	.word	0x20000170

080075b4 <_close_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	2300      	movs	r3, #0
 80075b8:	4d05      	ldr	r5, [pc, #20]	; (80075d0 <_close_r+0x1c>)
 80075ba:	4604      	mov	r4, r0
 80075bc:	4608      	mov	r0, r1
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	f7fa fb0a 	bl	8001bd8 <_close>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_close_r+0x1a>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_close_r+0x1a>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20000568 	.word	0x20000568

080075d4 <_lseek_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4604      	mov	r4, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	4611      	mov	r1, r2
 80075dc:	2200      	movs	r2, #0
 80075de:	4d05      	ldr	r5, [pc, #20]	; (80075f4 <_lseek_r+0x20>)
 80075e0:	602a      	str	r2, [r5, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	f7fa fb1c 	bl	8001c20 <_lseek>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d102      	bne.n	80075f2 <_lseek_r+0x1e>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	b103      	cbz	r3, 80075f2 <_lseek_r+0x1e>
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	20000568 	.word	0x20000568

080075f8 <_read_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4604      	mov	r4, r0
 80075fc:	4608      	mov	r0, r1
 80075fe:	4611      	mov	r1, r2
 8007600:	2200      	movs	r2, #0
 8007602:	4d05      	ldr	r5, [pc, #20]	; (8007618 <_read_r+0x20>)
 8007604:	602a      	str	r2, [r5, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	f7fa faad 	bl	8001b66 <_read>
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d102      	bne.n	8007616 <_read_r+0x1e>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	b103      	cbz	r3, 8007616 <_read_r+0x1e>
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	20000568 	.word	0x20000568

0800761c <_sbrk_r>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	2300      	movs	r3, #0
 8007620:	4d05      	ldr	r5, [pc, #20]	; (8007638 <_sbrk_r+0x1c>)
 8007622:	4604      	mov	r4, r0
 8007624:	4608      	mov	r0, r1
 8007626:	602b      	str	r3, [r5, #0]
 8007628:	f7fa fb06 	bl	8001c38 <_sbrk>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_sbrk_r+0x1a>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_sbrk_r+0x1a>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	20000568 	.word	0x20000568

0800763c <_write_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	4611      	mov	r1, r2
 8007644:	2200      	movs	r2, #0
 8007646:	4d05      	ldr	r5, [pc, #20]	; (800765c <_write_r+0x20>)
 8007648:	602a      	str	r2, [r5, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	f7fa faa8 	bl	8001ba0 <_write>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d102      	bne.n	800765a <_write_r+0x1e>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	b103      	cbz	r3, 800765a <_write_r+0x1e>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	20000568 	.word	0x20000568

08007660 <__errno>:
 8007660:	4b01      	ldr	r3, [pc, #4]	; (8007668 <__errno+0x8>)
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	2000007c 	.word	0x2000007c

0800766c <__libc_init_array>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	2600      	movs	r6, #0
 8007670:	4d0c      	ldr	r5, [pc, #48]	; (80076a4 <__libc_init_array+0x38>)
 8007672:	4c0d      	ldr	r4, [pc, #52]	; (80076a8 <__libc_init_array+0x3c>)
 8007674:	1b64      	subs	r4, r4, r5
 8007676:	10a4      	asrs	r4, r4, #2
 8007678:	42a6      	cmp	r6, r4
 800767a:	d109      	bne.n	8007690 <__libc_init_array+0x24>
 800767c:	f002 fdae 	bl	800a1dc <_init>
 8007680:	2600      	movs	r6, #0
 8007682:	4d0a      	ldr	r5, [pc, #40]	; (80076ac <__libc_init_array+0x40>)
 8007684:	4c0a      	ldr	r4, [pc, #40]	; (80076b0 <__libc_init_array+0x44>)
 8007686:	1b64      	subs	r4, r4, r5
 8007688:	10a4      	asrs	r4, r4, #2
 800768a:	42a6      	cmp	r6, r4
 800768c:	d105      	bne.n	800769a <__libc_init_array+0x2e>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	f855 3b04 	ldr.w	r3, [r5], #4
 8007694:	4798      	blx	r3
 8007696:	3601      	adds	r6, #1
 8007698:	e7ee      	b.n	8007678 <__libc_init_array+0xc>
 800769a:	f855 3b04 	ldr.w	r3, [r5], #4
 800769e:	4798      	blx	r3
 80076a0:	3601      	adds	r6, #1
 80076a2:	e7f2      	b.n	800768a <__libc_init_array+0x1e>
 80076a4:	0800a9c4 	.word	0x0800a9c4
 80076a8:	0800a9c4 	.word	0x0800a9c4
 80076ac:	0800a9c4 	.word	0x0800a9c4
 80076b0:	0800a9c8 	.word	0x0800a9c8

080076b4 <__retarget_lock_init_recursive>:
 80076b4:	4770      	bx	lr

080076b6 <__retarget_lock_acquire_recursive>:
 80076b6:	4770      	bx	lr

080076b8 <__retarget_lock_release_recursive>:
 80076b8:	4770      	bx	lr

080076ba <memchr>:
 80076ba:	4603      	mov	r3, r0
 80076bc:	b510      	push	{r4, lr}
 80076be:	b2c9      	uxtb	r1, r1
 80076c0:	4402      	add	r2, r0
 80076c2:	4293      	cmp	r3, r2
 80076c4:	4618      	mov	r0, r3
 80076c6:	d101      	bne.n	80076cc <memchr+0x12>
 80076c8:	2000      	movs	r0, #0
 80076ca:	e003      	b.n	80076d4 <memchr+0x1a>
 80076cc:	7804      	ldrb	r4, [r0, #0]
 80076ce:	3301      	adds	r3, #1
 80076d0:	428c      	cmp	r4, r1
 80076d2:	d1f6      	bne.n	80076c2 <memchr+0x8>
 80076d4:	bd10      	pop	{r4, pc}

080076d6 <memcpy>:
 80076d6:	440a      	add	r2, r1
 80076d8:	4291      	cmp	r1, r2
 80076da:	f100 33ff 	add.w	r3, r0, #4294967295
 80076de:	d100      	bne.n	80076e2 <memcpy+0xc>
 80076e0:	4770      	bx	lr
 80076e2:	b510      	push	{r4, lr}
 80076e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076e8:	4291      	cmp	r1, r2
 80076ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ee:	d1f9      	bne.n	80076e4 <memcpy+0xe>
 80076f0:	bd10      	pop	{r4, pc}

080076f2 <quorem>:
 80076f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f6:	6903      	ldr	r3, [r0, #16]
 80076f8:	690c      	ldr	r4, [r1, #16]
 80076fa:	4607      	mov	r7, r0
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	db7f      	blt.n	8007800 <quorem+0x10e>
 8007700:	3c01      	subs	r4, #1
 8007702:	f100 0514 	add.w	r5, r0, #20
 8007706:	f101 0814 	add.w	r8, r1, #20
 800770a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007714:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007718:	3301      	adds	r3, #1
 800771a:	429a      	cmp	r2, r3
 800771c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007720:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007724:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007728:	d331      	bcc.n	800778e <quorem+0x9c>
 800772a:	f04f 0e00 	mov.w	lr, #0
 800772e:	4640      	mov	r0, r8
 8007730:	46ac      	mov	ip, r5
 8007732:	46f2      	mov	sl, lr
 8007734:	f850 2b04 	ldr.w	r2, [r0], #4
 8007738:	b293      	uxth	r3, r2
 800773a:	fb06 e303 	mla	r3, r6, r3, lr
 800773e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007742:	0c1a      	lsrs	r2, r3, #16
 8007744:	b29b      	uxth	r3, r3
 8007746:	fb06 220e 	mla	r2, r6, lr, r2
 800774a:	ebaa 0303 	sub.w	r3, sl, r3
 800774e:	f8dc a000 	ldr.w	sl, [ip]
 8007752:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007756:	fa1f fa8a 	uxth.w	sl, sl
 800775a:	4453      	add	r3, sl
 800775c:	f8dc a000 	ldr.w	sl, [ip]
 8007760:	b292      	uxth	r2, r2
 8007762:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007766:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800776a:	b29b      	uxth	r3, r3
 800776c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007770:	4581      	cmp	r9, r0
 8007772:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007776:	f84c 3b04 	str.w	r3, [ip], #4
 800777a:	d2db      	bcs.n	8007734 <quorem+0x42>
 800777c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007780:	b92b      	cbnz	r3, 800778e <quorem+0x9c>
 8007782:	9b01      	ldr	r3, [sp, #4]
 8007784:	3b04      	subs	r3, #4
 8007786:	429d      	cmp	r5, r3
 8007788:	461a      	mov	r2, r3
 800778a:	d32d      	bcc.n	80077e8 <quorem+0xf6>
 800778c:	613c      	str	r4, [r7, #16]
 800778e:	4638      	mov	r0, r7
 8007790:	f001 f8e0 	bl	8008954 <__mcmp>
 8007794:	2800      	cmp	r0, #0
 8007796:	db23      	blt.n	80077e0 <quorem+0xee>
 8007798:	4629      	mov	r1, r5
 800779a:	2000      	movs	r0, #0
 800779c:	3601      	adds	r6, #1
 800779e:	f858 2b04 	ldr.w	r2, [r8], #4
 80077a2:	f8d1 c000 	ldr.w	ip, [r1]
 80077a6:	b293      	uxth	r3, r2
 80077a8:	1ac3      	subs	r3, r0, r3
 80077aa:	0c12      	lsrs	r2, r2, #16
 80077ac:	fa1f f08c 	uxth.w	r0, ip
 80077b0:	4403      	add	r3, r0
 80077b2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80077b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077c0:	45c1      	cmp	r9, r8
 80077c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80077c6:	f841 3b04 	str.w	r3, [r1], #4
 80077ca:	d2e8      	bcs.n	800779e <quorem+0xac>
 80077cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077d4:	b922      	cbnz	r2, 80077e0 <quorem+0xee>
 80077d6:	3b04      	subs	r3, #4
 80077d8:	429d      	cmp	r5, r3
 80077da:	461a      	mov	r2, r3
 80077dc:	d30a      	bcc.n	80077f4 <quorem+0x102>
 80077de:	613c      	str	r4, [r7, #16]
 80077e0:	4630      	mov	r0, r6
 80077e2:	b003      	add	sp, #12
 80077e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e8:	6812      	ldr	r2, [r2, #0]
 80077ea:	3b04      	subs	r3, #4
 80077ec:	2a00      	cmp	r2, #0
 80077ee:	d1cd      	bne.n	800778c <quorem+0x9a>
 80077f0:	3c01      	subs	r4, #1
 80077f2:	e7c8      	b.n	8007786 <quorem+0x94>
 80077f4:	6812      	ldr	r2, [r2, #0]
 80077f6:	3b04      	subs	r3, #4
 80077f8:	2a00      	cmp	r2, #0
 80077fa:	d1f0      	bne.n	80077de <quorem+0xec>
 80077fc:	3c01      	subs	r4, #1
 80077fe:	e7eb      	b.n	80077d8 <quorem+0xe6>
 8007800:	2000      	movs	r0, #0
 8007802:	e7ee      	b.n	80077e2 <quorem+0xf0>
 8007804:	0000      	movs	r0, r0
	...

08007808 <_dtoa_r>:
 8007808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780c:	4616      	mov	r6, r2
 800780e:	461f      	mov	r7, r3
 8007810:	69c4      	ldr	r4, [r0, #28]
 8007812:	b099      	sub	sp, #100	; 0x64
 8007814:	4605      	mov	r5, r0
 8007816:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800781a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800781e:	b974      	cbnz	r4, 800783e <_dtoa_r+0x36>
 8007820:	2010      	movs	r0, #16
 8007822:	f7fe ff97 	bl	8006754 <malloc>
 8007826:	4602      	mov	r2, r0
 8007828:	61e8      	str	r0, [r5, #28]
 800782a:	b920      	cbnz	r0, 8007836 <_dtoa_r+0x2e>
 800782c:	21ef      	movs	r1, #239	; 0xef
 800782e:	4bac      	ldr	r3, [pc, #688]	; (8007ae0 <_dtoa_r+0x2d8>)
 8007830:	48ac      	ldr	r0, [pc, #688]	; (8007ae4 <_dtoa_r+0x2dc>)
 8007832:	f001 fbb1 	bl	8008f98 <__assert_func>
 8007836:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800783a:	6004      	str	r4, [r0, #0]
 800783c:	60c4      	str	r4, [r0, #12]
 800783e:	69eb      	ldr	r3, [r5, #28]
 8007840:	6819      	ldr	r1, [r3, #0]
 8007842:	b151      	cbz	r1, 800785a <_dtoa_r+0x52>
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	2301      	movs	r3, #1
 8007848:	4093      	lsls	r3, r2
 800784a:	604a      	str	r2, [r1, #4]
 800784c:	608b      	str	r3, [r1, #8]
 800784e:	4628      	mov	r0, r5
 8007850:	f000 fe46 	bl	80084e0 <_Bfree>
 8007854:	2200      	movs	r2, #0
 8007856:	69eb      	ldr	r3, [r5, #28]
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	1e3b      	subs	r3, r7, #0
 800785c:	bfaf      	iteee	ge
 800785e:	2300      	movge	r3, #0
 8007860:	2201      	movlt	r2, #1
 8007862:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007866:	9305      	strlt	r3, [sp, #20]
 8007868:	bfa8      	it	ge
 800786a:	f8c8 3000 	strge.w	r3, [r8]
 800786e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007872:	4b9d      	ldr	r3, [pc, #628]	; (8007ae8 <_dtoa_r+0x2e0>)
 8007874:	bfb8      	it	lt
 8007876:	f8c8 2000 	strlt.w	r2, [r8]
 800787a:	ea33 0309 	bics.w	r3, r3, r9
 800787e:	d119      	bne.n	80078b4 <_dtoa_r+0xac>
 8007880:	f242 730f 	movw	r3, #9999	; 0x270f
 8007884:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800788c:	4333      	orrs	r3, r6
 800788e:	f000 8589 	beq.w	80083a4 <_dtoa_r+0xb9c>
 8007892:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007894:	b953      	cbnz	r3, 80078ac <_dtoa_r+0xa4>
 8007896:	4b95      	ldr	r3, [pc, #596]	; (8007aec <_dtoa_r+0x2e4>)
 8007898:	e023      	b.n	80078e2 <_dtoa_r+0xda>
 800789a:	4b95      	ldr	r3, [pc, #596]	; (8007af0 <_dtoa_r+0x2e8>)
 800789c:	9303      	str	r3, [sp, #12]
 800789e:	3308      	adds	r3, #8
 80078a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	9803      	ldr	r0, [sp, #12]
 80078a6:	b019      	add	sp, #100	; 0x64
 80078a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ac:	4b8f      	ldr	r3, [pc, #572]	; (8007aec <_dtoa_r+0x2e4>)
 80078ae:	9303      	str	r3, [sp, #12]
 80078b0:	3303      	adds	r3, #3
 80078b2:	e7f5      	b.n	80078a0 <_dtoa_r+0x98>
 80078b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80078b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80078bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078c0:	2200      	movs	r2, #0
 80078c2:	2300      	movs	r3, #0
 80078c4:	f7f9 f87a 	bl	80009bc <__aeabi_dcmpeq>
 80078c8:	4680      	mov	r8, r0
 80078ca:	b160      	cbz	r0, 80078e6 <_dtoa_r+0xde>
 80078cc:	2301      	movs	r3, #1
 80078ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 8562 	beq.w	800839e <_dtoa_r+0xb96>
 80078da:	4b86      	ldr	r3, [pc, #536]	; (8007af4 <_dtoa_r+0x2ec>)
 80078dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	9303      	str	r3, [sp, #12]
 80078e4:	e7de      	b.n	80078a4 <_dtoa_r+0x9c>
 80078e6:	ab16      	add	r3, sp, #88	; 0x58
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	ab17      	add	r3, sp, #92	; 0x5c
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	4628      	mov	r0, r5
 80078f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078f4:	f001 f8d6 	bl	8008aa4 <__d2b>
 80078f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80078fc:	4682      	mov	sl, r0
 80078fe:	2c00      	cmp	r4, #0
 8007900:	d07e      	beq.n	8007a00 <_dtoa_r+0x1f8>
 8007902:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007908:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800790c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007910:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007914:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007918:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800791c:	4619      	mov	r1, r3
 800791e:	2200      	movs	r2, #0
 8007920:	4b75      	ldr	r3, [pc, #468]	; (8007af8 <_dtoa_r+0x2f0>)
 8007922:	f7f8 fc2b 	bl	800017c <__aeabi_dsub>
 8007926:	a368      	add	r3, pc, #416	; (adr r3, 8007ac8 <_dtoa_r+0x2c0>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	f7f8 fdde 	bl	80004ec <__aeabi_dmul>
 8007930:	a367      	add	r3, pc, #412	; (adr r3, 8007ad0 <_dtoa_r+0x2c8>)
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f7f8 fc23 	bl	8000180 <__adddf3>
 800793a:	4606      	mov	r6, r0
 800793c:	4620      	mov	r0, r4
 800793e:	460f      	mov	r7, r1
 8007940:	f7f8 fd6a 	bl	8000418 <__aeabi_i2d>
 8007944:	a364      	add	r3, pc, #400	; (adr r3, 8007ad8 <_dtoa_r+0x2d0>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	f7f8 fdcf 	bl	80004ec <__aeabi_dmul>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4630      	mov	r0, r6
 8007954:	4639      	mov	r1, r7
 8007956:	f7f8 fc13 	bl	8000180 <__adddf3>
 800795a:	4606      	mov	r6, r0
 800795c:	460f      	mov	r7, r1
 800795e:	f7f9 f875 	bl	8000a4c <__aeabi_d2iz>
 8007962:	2200      	movs	r2, #0
 8007964:	4683      	mov	fp, r0
 8007966:	2300      	movs	r3, #0
 8007968:	4630      	mov	r0, r6
 800796a:	4639      	mov	r1, r7
 800796c:	f7f9 f830 	bl	80009d0 <__aeabi_dcmplt>
 8007970:	b148      	cbz	r0, 8007986 <_dtoa_r+0x17e>
 8007972:	4658      	mov	r0, fp
 8007974:	f7f8 fd50 	bl	8000418 <__aeabi_i2d>
 8007978:	4632      	mov	r2, r6
 800797a:	463b      	mov	r3, r7
 800797c:	f7f9 f81e 	bl	80009bc <__aeabi_dcmpeq>
 8007980:	b908      	cbnz	r0, 8007986 <_dtoa_r+0x17e>
 8007982:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007986:	f1bb 0f16 	cmp.w	fp, #22
 800798a:	d857      	bhi.n	8007a3c <_dtoa_r+0x234>
 800798c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007990:	4b5a      	ldr	r3, [pc, #360]	; (8007afc <_dtoa_r+0x2f4>)
 8007992:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f7f9 f819 	bl	80009d0 <__aeabi_dcmplt>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d04e      	beq.n	8007a40 <_dtoa_r+0x238>
 80079a2:	2300      	movs	r3, #0
 80079a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80079aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80079ac:	1b1b      	subs	r3, r3, r4
 80079ae:	1e5a      	subs	r2, r3, #1
 80079b0:	bf46      	itte	mi
 80079b2:	f1c3 0901 	rsbmi	r9, r3, #1
 80079b6:	2300      	movmi	r3, #0
 80079b8:	f04f 0900 	movpl.w	r9, #0
 80079bc:	9209      	str	r2, [sp, #36]	; 0x24
 80079be:	bf48      	it	mi
 80079c0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80079c2:	f1bb 0f00 	cmp.w	fp, #0
 80079c6:	db3d      	blt.n	8007a44 <_dtoa_r+0x23c>
 80079c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80079ce:	445b      	add	r3, fp
 80079d0:	9309      	str	r3, [sp, #36]	; 0x24
 80079d2:	2300      	movs	r3, #0
 80079d4:	930a      	str	r3, [sp, #40]	; 0x28
 80079d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079d8:	2b09      	cmp	r3, #9
 80079da:	d867      	bhi.n	8007aac <_dtoa_r+0x2a4>
 80079dc:	2b05      	cmp	r3, #5
 80079de:	bfc4      	itt	gt
 80079e0:	3b04      	subgt	r3, #4
 80079e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80079e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079e6:	bfc8      	it	gt
 80079e8:	2400      	movgt	r4, #0
 80079ea:	f1a3 0302 	sub.w	r3, r3, #2
 80079ee:	bfd8      	it	le
 80079f0:	2401      	movle	r4, #1
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	f200 8086 	bhi.w	8007b04 <_dtoa_r+0x2fc>
 80079f8:	e8df f003 	tbb	[pc, r3]
 80079fc:	5637392c 	.word	0x5637392c
 8007a00:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007a04:	441c      	add	r4, r3
 8007a06:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	bfc1      	itttt	gt
 8007a0e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a12:	fa09 f903 	lslgt.w	r9, r9, r3
 8007a16:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007a1a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007a1e:	bfd6      	itet	le
 8007a20:	f1c3 0320 	rsble	r3, r3, #32
 8007a24:	ea49 0003 	orrgt.w	r0, r9, r3
 8007a28:	fa06 f003 	lslle.w	r0, r6, r3
 8007a2c:	f7f8 fce4 	bl	80003f8 <__aeabi_ui2d>
 8007a30:	2201      	movs	r2, #1
 8007a32:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007a36:	3c01      	subs	r4, #1
 8007a38:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a3a:	e76f      	b.n	800791c <_dtoa_r+0x114>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e7b3      	b.n	80079a8 <_dtoa_r+0x1a0>
 8007a40:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a42:	e7b2      	b.n	80079aa <_dtoa_r+0x1a2>
 8007a44:	f1cb 0300 	rsb	r3, fp, #0
 8007a48:	930a      	str	r3, [sp, #40]	; 0x28
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	eba9 090b 	sub.w	r9, r9, fp
 8007a50:	930e      	str	r3, [sp, #56]	; 0x38
 8007a52:	e7c0      	b.n	80079d6 <_dtoa_r+0x1ce>
 8007a54:	2300      	movs	r3, #0
 8007a56:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	dc55      	bgt.n	8007b0a <_dtoa_r+0x302>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	461a      	mov	r2, r3
 8007a62:	9306      	str	r3, [sp, #24]
 8007a64:	9308      	str	r3, [sp, #32]
 8007a66:	9223      	str	r2, [sp, #140]	; 0x8c
 8007a68:	e00b      	b.n	8007a82 <_dtoa_r+0x27a>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e7f3      	b.n	8007a56 <_dtoa_r+0x24e>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a74:	445b      	add	r3, fp
 8007a76:	9306      	str	r3, [sp, #24]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	9308      	str	r3, [sp, #32]
 8007a7e:	bfb8      	it	lt
 8007a80:	2301      	movlt	r3, #1
 8007a82:	2100      	movs	r1, #0
 8007a84:	2204      	movs	r2, #4
 8007a86:	69e8      	ldr	r0, [r5, #28]
 8007a88:	f102 0614 	add.w	r6, r2, #20
 8007a8c:	429e      	cmp	r6, r3
 8007a8e:	d940      	bls.n	8007b12 <_dtoa_r+0x30a>
 8007a90:	6041      	str	r1, [r0, #4]
 8007a92:	4628      	mov	r0, r5
 8007a94:	f000 fce4 	bl	8008460 <_Balloc>
 8007a98:	9003      	str	r0, [sp, #12]
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d13c      	bne.n	8007b18 <_dtoa_r+0x310>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	f240 11af 	movw	r1, #431	; 0x1af
 8007aa4:	4b16      	ldr	r3, [pc, #88]	; (8007b00 <_dtoa_r+0x2f8>)
 8007aa6:	e6c3      	b.n	8007830 <_dtoa_r+0x28>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e7e1      	b.n	8007a70 <_dtoa_r+0x268>
 8007aac:	2401      	movs	r4, #1
 8007aae:	2300      	movs	r3, #0
 8007ab0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007ab2:	9322      	str	r3, [sp, #136]	; 0x88
 8007ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab8:	2200      	movs	r2, #0
 8007aba:	9306      	str	r3, [sp, #24]
 8007abc:	9308      	str	r3, [sp, #32]
 8007abe:	2312      	movs	r3, #18
 8007ac0:	e7d1      	b.n	8007a66 <_dtoa_r+0x25e>
 8007ac2:	bf00      	nop
 8007ac4:	f3af 8000 	nop.w
 8007ac8:	636f4361 	.word	0x636f4361
 8007acc:	3fd287a7 	.word	0x3fd287a7
 8007ad0:	8b60c8b3 	.word	0x8b60c8b3
 8007ad4:	3fc68a28 	.word	0x3fc68a28
 8007ad8:	509f79fb 	.word	0x509f79fb
 8007adc:	3fd34413 	.word	0x3fd34413
 8007ae0:	0800a3c4 	.word	0x0800a3c4
 8007ae4:	0800a3db 	.word	0x0800a3db
 8007ae8:	7ff00000 	.word	0x7ff00000
 8007aec:	0800a3c0 	.word	0x0800a3c0
 8007af0:	0800a3b7 	.word	0x0800a3b7
 8007af4:	0800a394 	.word	0x0800a394
 8007af8:	3ff80000 	.word	0x3ff80000
 8007afc:	0800a4c8 	.word	0x0800a4c8
 8007b00:	0800a433 	.word	0x0800a433
 8007b04:	2301      	movs	r3, #1
 8007b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b08:	e7d4      	b.n	8007ab4 <_dtoa_r+0x2ac>
 8007b0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b0c:	9306      	str	r3, [sp, #24]
 8007b0e:	9308      	str	r3, [sp, #32]
 8007b10:	e7b7      	b.n	8007a82 <_dtoa_r+0x27a>
 8007b12:	3101      	adds	r1, #1
 8007b14:	0052      	lsls	r2, r2, #1
 8007b16:	e7b7      	b.n	8007a88 <_dtoa_r+0x280>
 8007b18:	69eb      	ldr	r3, [r5, #28]
 8007b1a:	9a03      	ldr	r2, [sp, #12]
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	9b08      	ldr	r3, [sp, #32]
 8007b20:	2b0e      	cmp	r3, #14
 8007b22:	f200 80a8 	bhi.w	8007c76 <_dtoa_r+0x46e>
 8007b26:	2c00      	cmp	r4, #0
 8007b28:	f000 80a5 	beq.w	8007c76 <_dtoa_r+0x46e>
 8007b2c:	f1bb 0f00 	cmp.w	fp, #0
 8007b30:	dd34      	ble.n	8007b9c <_dtoa_r+0x394>
 8007b32:	4b9a      	ldr	r3, [pc, #616]	; (8007d9c <_dtoa_r+0x594>)
 8007b34:	f00b 020f 	and.w	r2, fp, #15
 8007b38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b44:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007b48:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007b4c:	d016      	beq.n	8007b7c <_dtoa_r+0x374>
 8007b4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b52:	4b93      	ldr	r3, [pc, #588]	; (8007da0 <_dtoa_r+0x598>)
 8007b54:	2703      	movs	r7, #3
 8007b56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b5a:	f7f8 fdf1 	bl	8000740 <__aeabi_ddiv>
 8007b5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b62:	f004 040f 	and.w	r4, r4, #15
 8007b66:	4e8e      	ldr	r6, [pc, #568]	; (8007da0 <_dtoa_r+0x598>)
 8007b68:	b954      	cbnz	r4, 8007b80 <_dtoa_r+0x378>
 8007b6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b72:	f7f8 fde5 	bl	8000740 <__aeabi_ddiv>
 8007b76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b7a:	e029      	b.n	8007bd0 <_dtoa_r+0x3c8>
 8007b7c:	2702      	movs	r7, #2
 8007b7e:	e7f2      	b.n	8007b66 <_dtoa_r+0x35e>
 8007b80:	07e1      	lsls	r1, r4, #31
 8007b82:	d508      	bpl.n	8007b96 <_dtoa_r+0x38e>
 8007b84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b8c:	f7f8 fcae 	bl	80004ec <__aeabi_dmul>
 8007b90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b94:	3701      	adds	r7, #1
 8007b96:	1064      	asrs	r4, r4, #1
 8007b98:	3608      	adds	r6, #8
 8007b9a:	e7e5      	b.n	8007b68 <_dtoa_r+0x360>
 8007b9c:	f000 80a5 	beq.w	8007cea <_dtoa_r+0x4e2>
 8007ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ba4:	f1cb 0400 	rsb	r4, fp, #0
 8007ba8:	4b7c      	ldr	r3, [pc, #496]	; (8007d9c <_dtoa_r+0x594>)
 8007baa:	f004 020f 	and.w	r2, r4, #15
 8007bae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	f7f8 fc99 	bl	80004ec <__aeabi_dmul>
 8007bba:	2702      	movs	r7, #2
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bc2:	4e77      	ldr	r6, [pc, #476]	; (8007da0 <_dtoa_r+0x598>)
 8007bc4:	1124      	asrs	r4, r4, #4
 8007bc6:	2c00      	cmp	r4, #0
 8007bc8:	f040 8084 	bne.w	8007cd4 <_dtoa_r+0x4cc>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1d2      	bne.n	8007b76 <_dtoa_r+0x36e>
 8007bd0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007bd4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 8087 	beq.w	8007cee <_dtoa_r+0x4e6>
 8007be0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007be4:	2200      	movs	r2, #0
 8007be6:	4b6f      	ldr	r3, [pc, #444]	; (8007da4 <_dtoa_r+0x59c>)
 8007be8:	f7f8 fef2 	bl	80009d0 <__aeabi_dcmplt>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d07e      	beq.n	8007cee <_dtoa_r+0x4e6>
 8007bf0:	9b08      	ldr	r3, [sp, #32]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d07b      	beq.n	8007cee <_dtoa_r+0x4e6>
 8007bf6:	9b06      	ldr	r3, [sp, #24]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	dd38      	ble.n	8007c6e <_dtoa_r+0x466>
 8007bfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c00:	2200      	movs	r2, #0
 8007c02:	4b69      	ldr	r3, [pc, #420]	; (8007da8 <_dtoa_r+0x5a0>)
 8007c04:	f7f8 fc72 	bl	80004ec <__aeabi_dmul>
 8007c08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c0c:	9c06      	ldr	r4, [sp, #24]
 8007c0e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007c12:	3701      	adds	r7, #1
 8007c14:	4638      	mov	r0, r7
 8007c16:	f7f8 fbff 	bl	8000418 <__aeabi_i2d>
 8007c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c1e:	f7f8 fc65 	bl	80004ec <__aeabi_dmul>
 8007c22:	2200      	movs	r2, #0
 8007c24:	4b61      	ldr	r3, [pc, #388]	; (8007dac <_dtoa_r+0x5a4>)
 8007c26:	f7f8 faab 	bl	8000180 <__adddf3>
 8007c2a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007c2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c32:	9611      	str	r6, [sp, #68]	; 0x44
 8007c34:	2c00      	cmp	r4, #0
 8007c36:	d15d      	bne.n	8007cf4 <_dtoa_r+0x4ec>
 8007c38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4b5c      	ldr	r3, [pc, #368]	; (8007db0 <_dtoa_r+0x5a8>)
 8007c40:	f7f8 fa9c 	bl	800017c <__aeabi_dsub>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c4c:	4633      	mov	r3, r6
 8007c4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c50:	f7f8 fedc 	bl	8000a0c <__aeabi_dcmpgt>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	f040 8295 	bne.w	8008184 <_dtoa_r+0x97c>
 8007c5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007c64:	f7f8 feb4 	bl	80009d0 <__aeabi_dcmplt>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	f040 8289 	bne.w	8008180 <_dtoa_r+0x978>
 8007c6e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007c72:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f2c0 8151 	blt.w	8007f20 <_dtoa_r+0x718>
 8007c7e:	f1bb 0f0e 	cmp.w	fp, #14
 8007c82:	f300 814d 	bgt.w	8007f20 <_dtoa_r+0x718>
 8007c86:	4b45      	ldr	r3, [pc, #276]	; (8007d9c <_dtoa_r+0x594>)
 8007c88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c90:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007c94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f280 80da 	bge.w	8007e50 <_dtoa_r+0x648>
 8007c9c:	9b08      	ldr	r3, [sp, #32]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f300 80d6 	bgt.w	8007e50 <_dtoa_r+0x648>
 8007ca4:	f040 826b 	bne.w	800817e <_dtoa_r+0x976>
 8007ca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cac:	2200      	movs	r2, #0
 8007cae:	4b40      	ldr	r3, [pc, #256]	; (8007db0 <_dtoa_r+0x5a8>)
 8007cb0:	f7f8 fc1c 	bl	80004ec <__aeabi_dmul>
 8007cb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cb8:	f7f8 fe9e 	bl	80009f8 <__aeabi_dcmpge>
 8007cbc:	9c08      	ldr	r4, [sp, #32]
 8007cbe:	4626      	mov	r6, r4
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	f040 8241 	bne.w	8008148 <_dtoa_r+0x940>
 8007cc6:	2331      	movs	r3, #49	; 0x31
 8007cc8:	9f03      	ldr	r7, [sp, #12]
 8007cca:	f10b 0b01 	add.w	fp, fp, #1
 8007cce:	f807 3b01 	strb.w	r3, [r7], #1
 8007cd2:	e23d      	b.n	8008150 <_dtoa_r+0x948>
 8007cd4:	07e2      	lsls	r2, r4, #31
 8007cd6:	d505      	bpl.n	8007ce4 <_dtoa_r+0x4dc>
 8007cd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007cdc:	f7f8 fc06 	bl	80004ec <__aeabi_dmul>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	3701      	adds	r7, #1
 8007ce4:	1064      	asrs	r4, r4, #1
 8007ce6:	3608      	adds	r6, #8
 8007ce8:	e76d      	b.n	8007bc6 <_dtoa_r+0x3be>
 8007cea:	2702      	movs	r7, #2
 8007cec:	e770      	b.n	8007bd0 <_dtoa_r+0x3c8>
 8007cee:	46d8      	mov	r8, fp
 8007cf0:	9c08      	ldr	r4, [sp, #32]
 8007cf2:	e78f      	b.n	8007c14 <_dtoa_r+0x40c>
 8007cf4:	9903      	ldr	r1, [sp, #12]
 8007cf6:	4b29      	ldr	r3, [pc, #164]	; (8007d9c <_dtoa_r+0x594>)
 8007cf8:	4421      	add	r1, r4
 8007cfa:	9112      	str	r1, [sp, #72]	; 0x48
 8007cfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cfe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d02:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007d06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d0a:	2900      	cmp	r1, #0
 8007d0c:	d054      	beq.n	8007db8 <_dtoa_r+0x5b0>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	4928      	ldr	r1, [pc, #160]	; (8007db4 <_dtoa_r+0x5ac>)
 8007d12:	f7f8 fd15 	bl	8000740 <__aeabi_ddiv>
 8007d16:	463b      	mov	r3, r7
 8007d18:	4632      	mov	r2, r6
 8007d1a:	f7f8 fa2f 	bl	800017c <__aeabi_dsub>
 8007d1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d22:	9f03      	ldr	r7, [sp, #12]
 8007d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d28:	f7f8 fe90 	bl	8000a4c <__aeabi_d2iz>
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	f7f8 fb73 	bl	8000418 <__aeabi_i2d>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d3a:	f7f8 fa1f 	bl	800017c <__aeabi_dsub>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	3430      	adds	r4, #48	; 0x30
 8007d44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d4c:	f807 4b01 	strb.w	r4, [r7], #1
 8007d50:	f7f8 fe3e 	bl	80009d0 <__aeabi_dcmplt>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d173      	bne.n	8007e40 <_dtoa_r+0x638>
 8007d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	4911      	ldr	r1, [pc, #68]	; (8007da4 <_dtoa_r+0x59c>)
 8007d60:	f7f8 fa0c 	bl	800017c <__aeabi_dsub>
 8007d64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d68:	f7f8 fe32 	bl	80009d0 <__aeabi_dcmplt>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f040 80b6 	bne.w	8007ede <_dtoa_r+0x6d6>
 8007d72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d74:	429f      	cmp	r7, r3
 8007d76:	f43f af7a 	beq.w	8007c6e <_dtoa_r+0x466>
 8007d7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d7e:	2200      	movs	r2, #0
 8007d80:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <_dtoa_r+0x5a0>)
 8007d82:	f7f8 fbb3 	bl	80004ec <__aeabi_dmul>
 8007d86:	2200      	movs	r2, #0
 8007d88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <_dtoa_r+0x5a0>)
 8007d92:	f7f8 fbab 	bl	80004ec <__aeabi_dmul>
 8007d96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d9a:	e7c3      	b.n	8007d24 <_dtoa_r+0x51c>
 8007d9c:	0800a4c8 	.word	0x0800a4c8
 8007da0:	0800a4a0 	.word	0x0800a4a0
 8007da4:	3ff00000 	.word	0x3ff00000
 8007da8:	40240000 	.word	0x40240000
 8007dac:	401c0000 	.word	0x401c0000
 8007db0:	40140000 	.word	0x40140000
 8007db4:	3fe00000 	.word	0x3fe00000
 8007db8:	4630      	mov	r0, r6
 8007dba:	4639      	mov	r1, r7
 8007dbc:	f7f8 fb96 	bl	80004ec <__aeabi_dmul>
 8007dc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dc2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007dc6:	9c03      	ldr	r4, [sp, #12]
 8007dc8:	9314      	str	r3, [sp, #80]	; 0x50
 8007dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dce:	f7f8 fe3d 	bl	8000a4c <__aeabi_d2iz>
 8007dd2:	9015      	str	r0, [sp, #84]	; 0x54
 8007dd4:	f7f8 fb20 	bl	8000418 <__aeabi_i2d>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007de0:	f7f8 f9cc 	bl	800017c <__aeabi_dsub>
 8007de4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007de6:	4606      	mov	r6, r0
 8007de8:	3330      	adds	r3, #48	; 0x30
 8007dea:	f804 3b01 	strb.w	r3, [r4], #1
 8007dee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007df0:	460f      	mov	r7, r1
 8007df2:	429c      	cmp	r4, r3
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	d124      	bne.n	8007e44 <_dtoa_r+0x63c>
 8007dfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dfe:	4baf      	ldr	r3, [pc, #700]	; (80080bc <_dtoa_r+0x8b4>)
 8007e00:	f7f8 f9be 	bl	8000180 <__adddf3>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4630      	mov	r0, r6
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	f7f8 fdfe 	bl	8000a0c <__aeabi_dcmpgt>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d163      	bne.n	8007edc <_dtoa_r+0x6d4>
 8007e14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e18:	2000      	movs	r0, #0
 8007e1a:	49a8      	ldr	r1, [pc, #672]	; (80080bc <_dtoa_r+0x8b4>)
 8007e1c:	f7f8 f9ae 	bl	800017c <__aeabi_dsub>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4630      	mov	r0, r6
 8007e26:	4639      	mov	r1, r7
 8007e28:	f7f8 fdd2 	bl	80009d0 <__aeabi_dcmplt>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f43f af1e 	beq.w	8007c6e <_dtoa_r+0x466>
 8007e32:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e34:	1e7b      	subs	r3, r7, #1
 8007e36:	9314      	str	r3, [sp, #80]	; 0x50
 8007e38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007e3c:	2b30      	cmp	r3, #48	; 0x30
 8007e3e:	d0f8      	beq.n	8007e32 <_dtoa_r+0x62a>
 8007e40:	46c3      	mov	fp, r8
 8007e42:	e03b      	b.n	8007ebc <_dtoa_r+0x6b4>
 8007e44:	4b9e      	ldr	r3, [pc, #632]	; (80080c0 <_dtoa_r+0x8b8>)
 8007e46:	f7f8 fb51 	bl	80004ec <__aeabi_dmul>
 8007e4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e4e:	e7bc      	b.n	8007dca <_dtoa_r+0x5c2>
 8007e50:	9f03      	ldr	r7, [sp, #12]
 8007e52:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007e56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	f7f8 fc6f 	bl	8000740 <__aeabi_ddiv>
 8007e62:	f7f8 fdf3 	bl	8000a4c <__aeabi_d2iz>
 8007e66:	4604      	mov	r4, r0
 8007e68:	f7f8 fad6 	bl	8000418 <__aeabi_i2d>
 8007e6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e70:	f7f8 fb3c 	bl	80004ec <__aeabi_dmul>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4640      	mov	r0, r8
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	f7f8 f97e 	bl	800017c <__aeabi_dsub>
 8007e80:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007e84:	f807 6b01 	strb.w	r6, [r7], #1
 8007e88:	9e03      	ldr	r6, [sp, #12]
 8007e8a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007e8e:	1bbe      	subs	r6, r7, r6
 8007e90:	45b4      	cmp	ip, r6
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	d136      	bne.n	8007f06 <_dtoa_r+0x6fe>
 8007e98:	f7f8 f972 	bl	8000180 <__adddf3>
 8007e9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ea0:	4680      	mov	r8, r0
 8007ea2:	4689      	mov	r9, r1
 8007ea4:	f7f8 fdb2 	bl	8000a0c <__aeabi_dcmpgt>
 8007ea8:	bb58      	cbnz	r0, 8007f02 <_dtoa_r+0x6fa>
 8007eaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eae:	4640      	mov	r0, r8
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	f7f8 fd83 	bl	80009bc <__aeabi_dcmpeq>
 8007eb6:	b108      	cbz	r0, 8007ebc <_dtoa_r+0x6b4>
 8007eb8:	07e3      	lsls	r3, r4, #31
 8007eba:	d422      	bmi.n	8007f02 <_dtoa_r+0x6fa>
 8007ebc:	4651      	mov	r1, sl
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f000 fb0e 	bl	80084e0 <_Bfree>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ec8:	703b      	strb	r3, [r7, #0]
 8007eca:	f10b 0301 	add.w	r3, fp, #1
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f43f ace6 	beq.w	80078a4 <_dtoa_r+0x9c>
 8007ed8:	601f      	str	r7, [r3, #0]
 8007eda:	e4e3      	b.n	80078a4 <_dtoa_r+0x9c>
 8007edc:	4627      	mov	r7, r4
 8007ede:	463b      	mov	r3, r7
 8007ee0:	461f      	mov	r7, r3
 8007ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ee6:	2a39      	cmp	r2, #57	; 0x39
 8007ee8:	d107      	bne.n	8007efa <_dtoa_r+0x6f2>
 8007eea:	9a03      	ldr	r2, [sp, #12]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d1f7      	bne.n	8007ee0 <_dtoa_r+0x6d8>
 8007ef0:	2230      	movs	r2, #48	; 0x30
 8007ef2:	9903      	ldr	r1, [sp, #12]
 8007ef4:	f108 0801 	add.w	r8, r8, #1
 8007ef8:	700a      	strb	r2, [r1, #0]
 8007efa:	781a      	ldrb	r2, [r3, #0]
 8007efc:	3201      	adds	r2, #1
 8007efe:	701a      	strb	r2, [r3, #0]
 8007f00:	e79e      	b.n	8007e40 <_dtoa_r+0x638>
 8007f02:	46d8      	mov	r8, fp
 8007f04:	e7eb      	b.n	8007ede <_dtoa_r+0x6d6>
 8007f06:	2200      	movs	r2, #0
 8007f08:	4b6d      	ldr	r3, [pc, #436]	; (80080c0 <_dtoa_r+0x8b8>)
 8007f0a:	f7f8 faef 	bl	80004ec <__aeabi_dmul>
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2300      	movs	r3, #0
 8007f12:	4680      	mov	r8, r0
 8007f14:	4689      	mov	r9, r1
 8007f16:	f7f8 fd51 	bl	80009bc <__aeabi_dcmpeq>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d09b      	beq.n	8007e56 <_dtoa_r+0x64e>
 8007f1e:	e7cd      	b.n	8007ebc <_dtoa_r+0x6b4>
 8007f20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	f000 80c4 	beq.w	80080b0 <_dtoa_r+0x8a8>
 8007f28:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f2a:	2a01      	cmp	r2, #1
 8007f2c:	f300 80a8 	bgt.w	8008080 <_dtoa_r+0x878>
 8007f30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f32:	2a00      	cmp	r2, #0
 8007f34:	f000 80a0 	beq.w	8008078 <_dtoa_r+0x870>
 8007f38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f3c:	464f      	mov	r7, r9
 8007f3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f42:	2101      	movs	r1, #1
 8007f44:	441a      	add	r2, r3
 8007f46:	4628      	mov	r0, r5
 8007f48:	4499      	add	r9, r3
 8007f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8007f4c:	f000 fb7e 	bl	800864c <__i2b>
 8007f50:	4606      	mov	r6, r0
 8007f52:	b15f      	cbz	r7, 8007f6c <_dtoa_r+0x764>
 8007f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	dd08      	ble.n	8007f6c <_dtoa_r+0x764>
 8007f5a:	42bb      	cmp	r3, r7
 8007f5c:	bfa8      	it	ge
 8007f5e:	463b      	movge	r3, r7
 8007f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f62:	eba9 0903 	sub.w	r9, r9, r3
 8007f66:	1aff      	subs	r7, r7, r3
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f6e:	b1f3      	cbz	r3, 8007fae <_dtoa_r+0x7a6>
 8007f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 80a0 	beq.w	80080b8 <_dtoa_r+0x8b0>
 8007f78:	2c00      	cmp	r4, #0
 8007f7a:	dd10      	ble.n	8007f9e <_dtoa_r+0x796>
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4622      	mov	r2, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 fc21 	bl	80087c8 <__pow5mult>
 8007f86:	4652      	mov	r2, sl
 8007f88:	4601      	mov	r1, r0
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f000 fb73 	bl	8008678 <__multiply>
 8007f92:	4680      	mov	r8, r0
 8007f94:	4651      	mov	r1, sl
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 faa2 	bl	80084e0 <_Bfree>
 8007f9c:	46c2      	mov	sl, r8
 8007f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa0:	1b1a      	subs	r2, r3, r4
 8007fa2:	d004      	beq.n	8007fae <_dtoa_r+0x7a6>
 8007fa4:	4651      	mov	r1, sl
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 fc0e 	bl	80087c8 <__pow5mult>
 8007fac:	4682      	mov	sl, r0
 8007fae:	2101      	movs	r1, #1
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f000 fb4b 	bl	800864c <__i2b>
 8007fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fb8:	4604      	mov	r4, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f340 8082 	ble.w	80080c4 <_dtoa_r+0x8bc>
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4601      	mov	r1, r0
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f000 fbff 	bl	80087c8 <__pow5mult>
 8007fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fcc:	4604      	mov	r4, r0
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	dd7b      	ble.n	80080ca <_dtoa_r+0x8c2>
 8007fd2:	f04f 0800 	mov.w	r8, #0
 8007fd6:	6923      	ldr	r3, [r4, #16]
 8007fd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fdc:	6918      	ldr	r0, [r3, #16]
 8007fde:	f000 fae7 	bl	80085b0 <__hi0bits>
 8007fe2:	f1c0 0020 	rsb	r0, r0, #32
 8007fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe8:	4418      	add	r0, r3
 8007fea:	f010 001f 	ands.w	r0, r0, #31
 8007fee:	f000 8092 	beq.w	8008116 <_dtoa_r+0x90e>
 8007ff2:	f1c0 0320 	rsb	r3, r0, #32
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	f340 8085 	ble.w	8008106 <_dtoa_r+0x8fe>
 8007ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffe:	f1c0 001c 	rsb	r0, r0, #28
 8008002:	4403      	add	r3, r0
 8008004:	4481      	add	r9, r0
 8008006:	4407      	add	r7, r0
 8008008:	9309      	str	r3, [sp, #36]	; 0x24
 800800a:	f1b9 0f00 	cmp.w	r9, #0
 800800e:	dd05      	ble.n	800801c <_dtoa_r+0x814>
 8008010:	4651      	mov	r1, sl
 8008012:	464a      	mov	r2, r9
 8008014:	4628      	mov	r0, r5
 8008016:	f000 fc31 	bl	800887c <__lshift>
 800801a:	4682      	mov	sl, r0
 800801c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801e:	2b00      	cmp	r3, #0
 8008020:	dd05      	ble.n	800802e <_dtoa_r+0x826>
 8008022:	4621      	mov	r1, r4
 8008024:	461a      	mov	r2, r3
 8008026:	4628      	mov	r0, r5
 8008028:	f000 fc28 	bl	800887c <__lshift>
 800802c:	4604      	mov	r4, r0
 800802e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008030:	2b00      	cmp	r3, #0
 8008032:	d072      	beq.n	800811a <_dtoa_r+0x912>
 8008034:	4621      	mov	r1, r4
 8008036:	4650      	mov	r0, sl
 8008038:	f000 fc8c 	bl	8008954 <__mcmp>
 800803c:	2800      	cmp	r0, #0
 800803e:	da6c      	bge.n	800811a <_dtoa_r+0x912>
 8008040:	2300      	movs	r3, #0
 8008042:	4651      	mov	r1, sl
 8008044:	220a      	movs	r2, #10
 8008046:	4628      	mov	r0, r5
 8008048:	f000 fa6c 	bl	8008524 <__multadd>
 800804c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800804e:	4682      	mov	sl, r0
 8008050:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 81ac 	beq.w	80083b2 <_dtoa_r+0xbaa>
 800805a:	2300      	movs	r3, #0
 800805c:	4631      	mov	r1, r6
 800805e:	220a      	movs	r2, #10
 8008060:	4628      	mov	r0, r5
 8008062:	f000 fa5f 	bl	8008524 <__multadd>
 8008066:	9b06      	ldr	r3, [sp, #24]
 8008068:	4606      	mov	r6, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	f300 8093 	bgt.w	8008196 <_dtoa_r+0x98e>
 8008070:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008072:	2b02      	cmp	r3, #2
 8008074:	dc59      	bgt.n	800812a <_dtoa_r+0x922>
 8008076:	e08e      	b.n	8008196 <_dtoa_r+0x98e>
 8008078:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800807a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800807e:	e75d      	b.n	8007f3c <_dtoa_r+0x734>
 8008080:	9b08      	ldr	r3, [sp, #32]
 8008082:	1e5c      	subs	r4, r3, #1
 8008084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008086:	42a3      	cmp	r3, r4
 8008088:	bfbf      	itttt	lt
 800808a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800808c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800808e:	1ae3      	sublt	r3, r4, r3
 8008090:	18d2      	addlt	r2, r2, r3
 8008092:	bfa8      	it	ge
 8008094:	1b1c      	subge	r4, r3, r4
 8008096:	9b08      	ldr	r3, [sp, #32]
 8008098:	bfbe      	ittt	lt
 800809a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800809c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800809e:	2400      	movlt	r4, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	bfb5      	itete	lt
 80080a4:	eba9 0703 	sublt.w	r7, r9, r3
 80080a8:	464f      	movge	r7, r9
 80080aa:	2300      	movlt	r3, #0
 80080ac:	9b08      	ldrge	r3, [sp, #32]
 80080ae:	e747      	b.n	8007f40 <_dtoa_r+0x738>
 80080b0:	464f      	mov	r7, r9
 80080b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80080b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80080b6:	e74c      	b.n	8007f52 <_dtoa_r+0x74a>
 80080b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080ba:	e773      	b.n	8007fa4 <_dtoa_r+0x79c>
 80080bc:	3fe00000 	.word	0x3fe00000
 80080c0:	40240000 	.word	0x40240000
 80080c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	dc18      	bgt.n	80080fc <_dtoa_r+0x8f4>
 80080ca:	9b04      	ldr	r3, [sp, #16]
 80080cc:	b9b3      	cbnz	r3, 80080fc <_dtoa_r+0x8f4>
 80080ce:	9b05      	ldr	r3, [sp, #20]
 80080d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080d4:	b993      	cbnz	r3, 80080fc <_dtoa_r+0x8f4>
 80080d6:	9b05      	ldr	r3, [sp, #20]
 80080d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080dc:	0d1b      	lsrs	r3, r3, #20
 80080de:	051b      	lsls	r3, r3, #20
 80080e0:	b17b      	cbz	r3, 8008102 <_dtoa_r+0x8fa>
 80080e2:	f04f 0801 	mov.w	r8, #1
 80080e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e8:	f109 0901 	add.w	r9, r9, #1
 80080ec:	3301      	adds	r3, #1
 80080ee:	9309      	str	r3, [sp, #36]	; 0x24
 80080f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f47f af6f 	bne.w	8007fd6 <_dtoa_r+0x7ce>
 80080f8:	2001      	movs	r0, #1
 80080fa:	e774      	b.n	8007fe6 <_dtoa_r+0x7de>
 80080fc:	f04f 0800 	mov.w	r8, #0
 8008100:	e7f6      	b.n	80080f0 <_dtoa_r+0x8e8>
 8008102:	4698      	mov	r8, r3
 8008104:	e7f4      	b.n	80080f0 <_dtoa_r+0x8e8>
 8008106:	d080      	beq.n	800800a <_dtoa_r+0x802>
 8008108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800810a:	331c      	adds	r3, #28
 800810c:	441a      	add	r2, r3
 800810e:	4499      	add	r9, r3
 8008110:	441f      	add	r7, r3
 8008112:	9209      	str	r2, [sp, #36]	; 0x24
 8008114:	e779      	b.n	800800a <_dtoa_r+0x802>
 8008116:	4603      	mov	r3, r0
 8008118:	e7f6      	b.n	8008108 <_dtoa_r+0x900>
 800811a:	9b08      	ldr	r3, [sp, #32]
 800811c:	2b00      	cmp	r3, #0
 800811e:	dc34      	bgt.n	800818a <_dtoa_r+0x982>
 8008120:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008122:	2b02      	cmp	r3, #2
 8008124:	dd31      	ble.n	800818a <_dtoa_r+0x982>
 8008126:	9b08      	ldr	r3, [sp, #32]
 8008128:	9306      	str	r3, [sp, #24]
 800812a:	9b06      	ldr	r3, [sp, #24]
 800812c:	b963      	cbnz	r3, 8008148 <_dtoa_r+0x940>
 800812e:	4621      	mov	r1, r4
 8008130:	2205      	movs	r2, #5
 8008132:	4628      	mov	r0, r5
 8008134:	f000 f9f6 	bl	8008524 <__multadd>
 8008138:	4601      	mov	r1, r0
 800813a:	4604      	mov	r4, r0
 800813c:	4650      	mov	r0, sl
 800813e:	f000 fc09 	bl	8008954 <__mcmp>
 8008142:	2800      	cmp	r0, #0
 8008144:	f73f adbf 	bgt.w	8007cc6 <_dtoa_r+0x4be>
 8008148:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800814a:	9f03      	ldr	r7, [sp, #12]
 800814c:	ea6f 0b03 	mvn.w	fp, r3
 8008150:	f04f 0800 	mov.w	r8, #0
 8008154:	4621      	mov	r1, r4
 8008156:	4628      	mov	r0, r5
 8008158:	f000 f9c2 	bl	80084e0 <_Bfree>
 800815c:	2e00      	cmp	r6, #0
 800815e:	f43f aead 	beq.w	8007ebc <_dtoa_r+0x6b4>
 8008162:	f1b8 0f00 	cmp.w	r8, #0
 8008166:	d005      	beq.n	8008174 <_dtoa_r+0x96c>
 8008168:	45b0      	cmp	r8, r6
 800816a:	d003      	beq.n	8008174 <_dtoa_r+0x96c>
 800816c:	4641      	mov	r1, r8
 800816e:	4628      	mov	r0, r5
 8008170:	f000 f9b6 	bl	80084e0 <_Bfree>
 8008174:	4631      	mov	r1, r6
 8008176:	4628      	mov	r0, r5
 8008178:	f000 f9b2 	bl	80084e0 <_Bfree>
 800817c:	e69e      	b.n	8007ebc <_dtoa_r+0x6b4>
 800817e:	2400      	movs	r4, #0
 8008180:	4626      	mov	r6, r4
 8008182:	e7e1      	b.n	8008148 <_dtoa_r+0x940>
 8008184:	46c3      	mov	fp, r8
 8008186:	4626      	mov	r6, r4
 8008188:	e59d      	b.n	8007cc6 <_dtoa_r+0x4be>
 800818a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 80c8 	beq.w	8008322 <_dtoa_r+0xb1a>
 8008192:	9b08      	ldr	r3, [sp, #32]
 8008194:	9306      	str	r3, [sp, #24]
 8008196:	2f00      	cmp	r7, #0
 8008198:	dd05      	ble.n	80081a6 <_dtoa_r+0x99e>
 800819a:	4631      	mov	r1, r6
 800819c:	463a      	mov	r2, r7
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 fb6c 	bl	800887c <__lshift>
 80081a4:	4606      	mov	r6, r0
 80081a6:	f1b8 0f00 	cmp.w	r8, #0
 80081aa:	d05b      	beq.n	8008264 <_dtoa_r+0xa5c>
 80081ac:	4628      	mov	r0, r5
 80081ae:	6871      	ldr	r1, [r6, #4]
 80081b0:	f000 f956 	bl	8008460 <_Balloc>
 80081b4:	4607      	mov	r7, r0
 80081b6:	b928      	cbnz	r0, 80081c4 <_dtoa_r+0x9bc>
 80081b8:	4602      	mov	r2, r0
 80081ba:	f240 21ef 	movw	r1, #751	; 0x2ef
 80081be:	4b81      	ldr	r3, [pc, #516]	; (80083c4 <_dtoa_r+0xbbc>)
 80081c0:	f7ff bb36 	b.w	8007830 <_dtoa_r+0x28>
 80081c4:	6932      	ldr	r2, [r6, #16]
 80081c6:	f106 010c 	add.w	r1, r6, #12
 80081ca:	3202      	adds	r2, #2
 80081cc:	0092      	lsls	r2, r2, #2
 80081ce:	300c      	adds	r0, #12
 80081d0:	f7ff fa81 	bl	80076d6 <memcpy>
 80081d4:	2201      	movs	r2, #1
 80081d6:	4639      	mov	r1, r7
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 fb4f 	bl	800887c <__lshift>
 80081de:	46b0      	mov	r8, r6
 80081e0:	4606      	mov	r6, r0
 80081e2:	9b03      	ldr	r3, [sp, #12]
 80081e4:	9a03      	ldr	r2, [sp, #12]
 80081e6:	3301      	adds	r3, #1
 80081e8:	9308      	str	r3, [sp, #32]
 80081ea:	9b06      	ldr	r3, [sp, #24]
 80081ec:	4413      	add	r3, r2
 80081ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80081f0:	9b04      	ldr	r3, [sp, #16]
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	930a      	str	r3, [sp, #40]	; 0x28
 80081f8:	9b08      	ldr	r3, [sp, #32]
 80081fa:	4621      	mov	r1, r4
 80081fc:	3b01      	subs	r3, #1
 80081fe:	4650      	mov	r0, sl
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	f7ff fa76 	bl	80076f2 <quorem>
 8008206:	4641      	mov	r1, r8
 8008208:	9006      	str	r0, [sp, #24]
 800820a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800820e:	4650      	mov	r0, sl
 8008210:	f000 fba0 	bl	8008954 <__mcmp>
 8008214:	4632      	mov	r2, r6
 8008216:	9009      	str	r0, [sp, #36]	; 0x24
 8008218:	4621      	mov	r1, r4
 800821a:	4628      	mov	r0, r5
 800821c:	f000 fbb6 	bl	800898c <__mdiff>
 8008220:	68c2      	ldr	r2, [r0, #12]
 8008222:	4607      	mov	r7, r0
 8008224:	bb02      	cbnz	r2, 8008268 <_dtoa_r+0xa60>
 8008226:	4601      	mov	r1, r0
 8008228:	4650      	mov	r0, sl
 800822a:	f000 fb93 	bl	8008954 <__mcmp>
 800822e:	4602      	mov	r2, r0
 8008230:	4639      	mov	r1, r7
 8008232:	4628      	mov	r0, r5
 8008234:	920c      	str	r2, [sp, #48]	; 0x30
 8008236:	f000 f953 	bl	80084e0 <_Bfree>
 800823a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800823c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800823e:	9f08      	ldr	r7, [sp, #32]
 8008240:	ea43 0102 	orr.w	r1, r3, r2
 8008244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008246:	4319      	orrs	r1, r3
 8008248:	d110      	bne.n	800826c <_dtoa_r+0xa64>
 800824a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800824e:	d029      	beq.n	80082a4 <_dtoa_r+0xa9c>
 8008250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008252:	2b00      	cmp	r3, #0
 8008254:	dd02      	ble.n	800825c <_dtoa_r+0xa54>
 8008256:	9b06      	ldr	r3, [sp, #24]
 8008258:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800825c:	9b04      	ldr	r3, [sp, #16]
 800825e:	f883 9000 	strb.w	r9, [r3]
 8008262:	e777      	b.n	8008154 <_dtoa_r+0x94c>
 8008264:	4630      	mov	r0, r6
 8008266:	e7ba      	b.n	80081de <_dtoa_r+0x9d6>
 8008268:	2201      	movs	r2, #1
 800826a:	e7e1      	b.n	8008230 <_dtoa_r+0xa28>
 800826c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826e:	2b00      	cmp	r3, #0
 8008270:	db04      	blt.n	800827c <_dtoa_r+0xa74>
 8008272:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008274:	430b      	orrs	r3, r1
 8008276:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008278:	430b      	orrs	r3, r1
 800827a:	d120      	bne.n	80082be <_dtoa_r+0xab6>
 800827c:	2a00      	cmp	r2, #0
 800827e:	dded      	ble.n	800825c <_dtoa_r+0xa54>
 8008280:	4651      	mov	r1, sl
 8008282:	2201      	movs	r2, #1
 8008284:	4628      	mov	r0, r5
 8008286:	f000 faf9 	bl	800887c <__lshift>
 800828a:	4621      	mov	r1, r4
 800828c:	4682      	mov	sl, r0
 800828e:	f000 fb61 	bl	8008954 <__mcmp>
 8008292:	2800      	cmp	r0, #0
 8008294:	dc03      	bgt.n	800829e <_dtoa_r+0xa96>
 8008296:	d1e1      	bne.n	800825c <_dtoa_r+0xa54>
 8008298:	f019 0f01 	tst.w	r9, #1
 800829c:	d0de      	beq.n	800825c <_dtoa_r+0xa54>
 800829e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082a2:	d1d8      	bne.n	8008256 <_dtoa_r+0xa4e>
 80082a4:	2339      	movs	r3, #57	; 0x39
 80082a6:	9a04      	ldr	r2, [sp, #16]
 80082a8:	7013      	strb	r3, [r2, #0]
 80082aa:	463b      	mov	r3, r7
 80082ac:	461f      	mov	r7, r3
 80082ae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	2a39      	cmp	r2, #57	; 0x39
 80082b6:	d06b      	beq.n	8008390 <_dtoa_r+0xb88>
 80082b8:	3201      	adds	r2, #1
 80082ba:	701a      	strb	r2, [r3, #0]
 80082bc:	e74a      	b.n	8008154 <_dtoa_r+0x94c>
 80082be:	2a00      	cmp	r2, #0
 80082c0:	dd07      	ble.n	80082d2 <_dtoa_r+0xaca>
 80082c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082c6:	d0ed      	beq.n	80082a4 <_dtoa_r+0xa9c>
 80082c8:	9a04      	ldr	r2, [sp, #16]
 80082ca:	f109 0301 	add.w	r3, r9, #1
 80082ce:	7013      	strb	r3, [r2, #0]
 80082d0:	e740      	b.n	8008154 <_dtoa_r+0x94c>
 80082d2:	9b08      	ldr	r3, [sp, #32]
 80082d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082d6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80082da:	4293      	cmp	r3, r2
 80082dc:	d042      	beq.n	8008364 <_dtoa_r+0xb5c>
 80082de:	4651      	mov	r1, sl
 80082e0:	2300      	movs	r3, #0
 80082e2:	220a      	movs	r2, #10
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 f91d 	bl	8008524 <__multadd>
 80082ea:	45b0      	cmp	r8, r6
 80082ec:	4682      	mov	sl, r0
 80082ee:	f04f 0300 	mov.w	r3, #0
 80082f2:	f04f 020a 	mov.w	r2, #10
 80082f6:	4641      	mov	r1, r8
 80082f8:	4628      	mov	r0, r5
 80082fa:	d107      	bne.n	800830c <_dtoa_r+0xb04>
 80082fc:	f000 f912 	bl	8008524 <__multadd>
 8008300:	4680      	mov	r8, r0
 8008302:	4606      	mov	r6, r0
 8008304:	9b08      	ldr	r3, [sp, #32]
 8008306:	3301      	adds	r3, #1
 8008308:	9308      	str	r3, [sp, #32]
 800830a:	e775      	b.n	80081f8 <_dtoa_r+0x9f0>
 800830c:	f000 f90a 	bl	8008524 <__multadd>
 8008310:	4631      	mov	r1, r6
 8008312:	4680      	mov	r8, r0
 8008314:	2300      	movs	r3, #0
 8008316:	220a      	movs	r2, #10
 8008318:	4628      	mov	r0, r5
 800831a:	f000 f903 	bl	8008524 <__multadd>
 800831e:	4606      	mov	r6, r0
 8008320:	e7f0      	b.n	8008304 <_dtoa_r+0xafc>
 8008322:	9b08      	ldr	r3, [sp, #32]
 8008324:	9306      	str	r3, [sp, #24]
 8008326:	9f03      	ldr	r7, [sp, #12]
 8008328:	4621      	mov	r1, r4
 800832a:	4650      	mov	r0, sl
 800832c:	f7ff f9e1 	bl	80076f2 <quorem>
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008336:	f807 9b01 	strb.w	r9, [r7], #1
 800833a:	1afa      	subs	r2, r7, r3
 800833c:	9b06      	ldr	r3, [sp, #24]
 800833e:	4293      	cmp	r3, r2
 8008340:	dd07      	ble.n	8008352 <_dtoa_r+0xb4a>
 8008342:	4651      	mov	r1, sl
 8008344:	2300      	movs	r3, #0
 8008346:	220a      	movs	r2, #10
 8008348:	4628      	mov	r0, r5
 800834a:	f000 f8eb 	bl	8008524 <__multadd>
 800834e:	4682      	mov	sl, r0
 8008350:	e7ea      	b.n	8008328 <_dtoa_r+0xb20>
 8008352:	9b06      	ldr	r3, [sp, #24]
 8008354:	f04f 0800 	mov.w	r8, #0
 8008358:	2b00      	cmp	r3, #0
 800835a:	bfcc      	ite	gt
 800835c:	461f      	movgt	r7, r3
 800835e:	2701      	movle	r7, #1
 8008360:	9b03      	ldr	r3, [sp, #12]
 8008362:	441f      	add	r7, r3
 8008364:	4651      	mov	r1, sl
 8008366:	2201      	movs	r2, #1
 8008368:	4628      	mov	r0, r5
 800836a:	f000 fa87 	bl	800887c <__lshift>
 800836e:	4621      	mov	r1, r4
 8008370:	4682      	mov	sl, r0
 8008372:	f000 faef 	bl	8008954 <__mcmp>
 8008376:	2800      	cmp	r0, #0
 8008378:	dc97      	bgt.n	80082aa <_dtoa_r+0xaa2>
 800837a:	d102      	bne.n	8008382 <_dtoa_r+0xb7a>
 800837c:	f019 0f01 	tst.w	r9, #1
 8008380:	d193      	bne.n	80082aa <_dtoa_r+0xaa2>
 8008382:	463b      	mov	r3, r7
 8008384:	461f      	mov	r7, r3
 8008386:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800838a:	2a30      	cmp	r2, #48	; 0x30
 800838c:	d0fa      	beq.n	8008384 <_dtoa_r+0xb7c>
 800838e:	e6e1      	b.n	8008154 <_dtoa_r+0x94c>
 8008390:	9a03      	ldr	r2, [sp, #12]
 8008392:	429a      	cmp	r2, r3
 8008394:	d18a      	bne.n	80082ac <_dtoa_r+0xaa4>
 8008396:	2331      	movs	r3, #49	; 0x31
 8008398:	f10b 0b01 	add.w	fp, fp, #1
 800839c:	e797      	b.n	80082ce <_dtoa_r+0xac6>
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <_dtoa_r+0xbc0>)
 80083a0:	f7ff ba9f 	b.w	80078e2 <_dtoa_r+0xda>
 80083a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f47f aa77 	bne.w	800789a <_dtoa_r+0x92>
 80083ac:	4b07      	ldr	r3, [pc, #28]	; (80083cc <_dtoa_r+0xbc4>)
 80083ae:	f7ff ba98 	b.w	80078e2 <_dtoa_r+0xda>
 80083b2:	9b06      	ldr	r3, [sp, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dcb6      	bgt.n	8008326 <_dtoa_r+0xb1e>
 80083b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	f73f aeb5 	bgt.w	800812a <_dtoa_r+0x922>
 80083c0:	e7b1      	b.n	8008326 <_dtoa_r+0xb1e>
 80083c2:	bf00      	nop
 80083c4:	0800a433 	.word	0x0800a433
 80083c8:	0800a393 	.word	0x0800a393
 80083cc:	0800a3b7 	.word	0x0800a3b7

080083d0 <_free_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4605      	mov	r5, r0
 80083d4:	2900      	cmp	r1, #0
 80083d6:	d040      	beq.n	800845a <_free_r+0x8a>
 80083d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083dc:	1f0c      	subs	r4, r1, #4
 80083de:	2b00      	cmp	r3, #0
 80083e0:	bfb8      	it	lt
 80083e2:	18e4      	addlt	r4, r4, r3
 80083e4:	f7fe fa66 	bl	80068b4 <__malloc_lock>
 80083e8:	4a1c      	ldr	r2, [pc, #112]	; (800845c <_free_r+0x8c>)
 80083ea:	6813      	ldr	r3, [r2, #0]
 80083ec:	b933      	cbnz	r3, 80083fc <_free_r+0x2c>
 80083ee:	6063      	str	r3, [r4, #4]
 80083f0:	6014      	str	r4, [r2, #0]
 80083f2:	4628      	mov	r0, r5
 80083f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083f8:	f7fe ba62 	b.w	80068c0 <__malloc_unlock>
 80083fc:	42a3      	cmp	r3, r4
 80083fe:	d908      	bls.n	8008412 <_free_r+0x42>
 8008400:	6820      	ldr	r0, [r4, #0]
 8008402:	1821      	adds	r1, r4, r0
 8008404:	428b      	cmp	r3, r1
 8008406:	bf01      	itttt	eq
 8008408:	6819      	ldreq	r1, [r3, #0]
 800840a:	685b      	ldreq	r3, [r3, #4]
 800840c:	1809      	addeq	r1, r1, r0
 800840e:	6021      	streq	r1, [r4, #0]
 8008410:	e7ed      	b.n	80083ee <_free_r+0x1e>
 8008412:	461a      	mov	r2, r3
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	b10b      	cbz	r3, 800841c <_free_r+0x4c>
 8008418:	42a3      	cmp	r3, r4
 800841a:	d9fa      	bls.n	8008412 <_free_r+0x42>
 800841c:	6811      	ldr	r1, [r2, #0]
 800841e:	1850      	adds	r0, r2, r1
 8008420:	42a0      	cmp	r0, r4
 8008422:	d10b      	bne.n	800843c <_free_r+0x6c>
 8008424:	6820      	ldr	r0, [r4, #0]
 8008426:	4401      	add	r1, r0
 8008428:	1850      	adds	r0, r2, r1
 800842a:	4283      	cmp	r3, r0
 800842c:	6011      	str	r1, [r2, #0]
 800842e:	d1e0      	bne.n	80083f2 <_free_r+0x22>
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	4408      	add	r0, r1
 8008436:	6010      	str	r0, [r2, #0]
 8008438:	6053      	str	r3, [r2, #4]
 800843a:	e7da      	b.n	80083f2 <_free_r+0x22>
 800843c:	d902      	bls.n	8008444 <_free_r+0x74>
 800843e:	230c      	movs	r3, #12
 8008440:	602b      	str	r3, [r5, #0]
 8008442:	e7d6      	b.n	80083f2 <_free_r+0x22>
 8008444:	6820      	ldr	r0, [r4, #0]
 8008446:	1821      	adds	r1, r4, r0
 8008448:	428b      	cmp	r3, r1
 800844a:	bf01      	itttt	eq
 800844c:	6819      	ldreq	r1, [r3, #0]
 800844e:	685b      	ldreq	r3, [r3, #4]
 8008450:	1809      	addeq	r1, r1, r0
 8008452:	6021      	streq	r1, [r4, #0]
 8008454:	6063      	str	r3, [r4, #4]
 8008456:	6054      	str	r4, [r2, #4]
 8008458:	e7cb      	b.n	80083f2 <_free_r+0x22>
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	20000424 	.word	0x20000424

08008460 <_Balloc>:
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	69c6      	ldr	r6, [r0, #28]
 8008464:	4604      	mov	r4, r0
 8008466:	460d      	mov	r5, r1
 8008468:	b976      	cbnz	r6, 8008488 <_Balloc+0x28>
 800846a:	2010      	movs	r0, #16
 800846c:	f7fe f972 	bl	8006754 <malloc>
 8008470:	4602      	mov	r2, r0
 8008472:	61e0      	str	r0, [r4, #28]
 8008474:	b920      	cbnz	r0, 8008480 <_Balloc+0x20>
 8008476:	216b      	movs	r1, #107	; 0x6b
 8008478:	4b17      	ldr	r3, [pc, #92]	; (80084d8 <_Balloc+0x78>)
 800847a:	4818      	ldr	r0, [pc, #96]	; (80084dc <_Balloc+0x7c>)
 800847c:	f000 fd8c 	bl	8008f98 <__assert_func>
 8008480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008484:	6006      	str	r6, [r0, #0]
 8008486:	60c6      	str	r6, [r0, #12]
 8008488:	69e6      	ldr	r6, [r4, #28]
 800848a:	68f3      	ldr	r3, [r6, #12]
 800848c:	b183      	cbz	r3, 80084b0 <_Balloc+0x50>
 800848e:	69e3      	ldr	r3, [r4, #28]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008496:	b9b8      	cbnz	r0, 80084c8 <_Balloc+0x68>
 8008498:	2101      	movs	r1, #1
 800849a:	fa01 f605 	lsl.w	r6, r1, r5
 800849e:	1d72      	adds	r2, r6, #5
 80084a0:	4620      	mov	r0, r4
 80084a2:	0092      	lsls	r2, r2, #2
 80084a4:	f000 fd96 	bl	8008fd4 <_calloc_r>
 80084a8:	b160      	cbz	r0, 80084c4 <_Balloc+0x64>
 80084aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084ae:	e00e      	b.n	80084ce <_Balloc+0x6e>
 80084b0:	2221      	movs	r2, #33	; 0x21
 80084b2:	2104      	movs	r1, #4
 80084b4:	4620      	mov	r0, r4
 80084b6:	f000 fd8d 	bl	8008fd4 <_calloc_r>
 80084ba:	69e3      	ldr	r3, [r4, #28]
 80084bc:	60f0      	str	r0, [r6, #12]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e4      	bne.n	800848e <_Balloc+0x2e>
 80084c4:	2000      	movs	r0, #0
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	6802      	ldr	r2, [r0, #0]
 80084ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084ce:	2300      	movs	r3, #0
 80084d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084d4:	e7f7      	b.n	80084c6 <_Balloc+0x66>
 80084d6:	bf00      	nop
 80084d8:	0800a3c4 	.word	0x0800a3c4
 80084dc:	0800a444 	.word	0x0800a444

080084e0 <_Bfree>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	69c6      	ldr	r6, [r0, #28]
 80084e4:	4605      	mov	r5, r0
 80084e6:	460c      	mov	r4, r1
 80084e8:	b976      	cbnz	r6, 8008508 <_Bfree+0x28>
 80084ea:	2010      	movs	r0, #16
 80084ec:	f7fe f932 	bl	8006754 <malloc>
 80084f0:	4602      	mov	r2, r0
 80084f2:	61e8      	str	r0, [r5, #28]
 80084f4:	b920      	cbnz	r0, 8008500 <_Bfree+0x20>
 80084f6:	218f      	movs	r1, #143	; 0x8f
 80084f8:	4b08      	ldr	r3, [pc, #32]	; (800851c <_Bfree+0x3c>)
 80084fa:	4809      	ldr	r0, [pc, #36]	; (8008520 <_Bfree+0x40>)
 80084fc:	f000 fd4c 	bl	8008f98 <__assert_func>
 8008500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008504:	6006      	str	r6, [r0, #0]
 8008506:	60c6      	str	r6, [r0, #12]
 8008508:	b13c      	cbz	r4, 800851a <_Bfree+0x3a>
 800850a:	69eb      	ldr	r3, [r5, #28]
 800850c:	6862      	ldr	r2, [r4, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008514:	6021      	str	r1, [r4, #0]
 8008516:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	0800a3c4 	.word	0x0800a3c4
 8008520:	0800a444 	.word	0x0800a444

08008524 <__multadd>:
 8008524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008528:	4607      	mov	r7, r0
 800852a:	460c      	mov	r4, r1
 800852c:	461e      	mov	r6, r3
 800852e:	2000      	movs	r0, #0
 8008530:	690d      	ldr	r5, [r1, #16]
 8008532:	f101 0c14 	add.w	ip, r1, #20
 8008536:	f8dc 3000 	ldr.w	r3, [ip]
 800853a:	3001      	adds	r0, #1
 800853c:	b299      	uxth	r1, r3
 800853e:	fb02 6101 	mla	r1, r2, r1, r6
 8008542:	0c1e      	lsrs	r6, r3, #16
 8008544:	0c0b      	lsrs	r3, r1, #16
 8008546:	fb02 3306 	mla	r3, r2, r6, r3
 800854a:	b289      	uxth	r1, r1
 800854c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008550:	4285      	cmp	r5, r0
 8008552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008556:	f84c 1b04 	str.w	r1, [ip], #4
 800855a:	dcec      	bgt.n	8008536 <__multadd+0x12>
 800855c:	b30e      	cbz	r6, 80085a2 <__multadd+0x7e>
 800855e:	68a3      	ldr	r3, [r4, #8]
 8008560:	42ab      	cmp	r3, r5
 8008562:	dc19      	bgt.n	8008598 <__multadd+0x74>
 8008564:	6861      	ldr	r1, [r4, #4]
 8008566:	4638      	mov	r0, r7
 8008568:	3101      	adds	r1, #1
 800856a:	f7ff ff79 	bl	8008460 <_Balloc>
 800856e:	4680      	mov	r8, r0
 8008570:	b928      	cbnz	r0, 800857e <__multadd+0x5a>
 8008572:	4602      	mov	r2, r0
 8008574:	21ba      	movs	r1, #186	; 0xba
 8008576:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <__multadd+0x84>)
 8008578:	480c      	ldr	r0, [pc, #48]	; (80085ac <__multadd+0x88>)
 800857a:	f000 fd0d 	bl	8008f98 <__assert_func>
 800857e:	6922      	ldr	r2, [r4, #16]
 8008580:	f104 010c 	add.w	r1, r4, #12
 8008584:	3202      	adds	r2, #2
 8008586:	0092      	lsls	r2, r2, #2
 8008588:	300c      	adds	r0, #12
 800858a:	f7ff f8a4 	bl	80076d6 <memcpy>
 800858e:	4621      	mov	r1, r4
 8008590:	4638      	mov	r0, r7
 8008592:	f7ff ffa5 	bl	80084e0 <_Bfree>
 8008596:	4644      	mov	r4, r8
 8008598:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800859c:	3501      	adds	r5, #1
 800859e:	615e      	str	r6, [r3, #20]
 80085a0:	6125      	str	r5, [r4, #16]
 80085a2:	4620      	mov	r0, r4
 80085a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a8:	0800a433 	.word	0x0800a433
 80085ac:	0800a444 	.word	0x0800a444

080085b0 <__hi0bits>:
 80085b0:	0c02      	lsrs	r2, r0, #16
 80085b2:	0412      	lsls	r2, r2, #16
 80085b4:	4603      	mov	r3, r0
 80085b6:	b9ca      	cbnz	r2, 80085ec <__hi0bits+0x3c>
 80085b8:	0403      	lsls	r3, r0, #16
 80085ba:	2010      	movs	r0, #16
 80085bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80085c0:	bf04      	itt	eq
 80085c2:	021b      	lsleq	r3, r3, #8
 80085c4:	3008      	addeq	r0, #8
 80085c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80085ca:	bf04      	itt	eq
 80085cc:	011b      	lsleq	r3, r3, #4
 80085ce:	3004      	addeq	r0, #4
 80085d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80085d4:	bf04      	itt	eq
 80085d6:	009b      	lsleq	r3, r3, #2
 80085d8:	3002      	addeq	r0, #2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	db05      	blt.n	80085ea <__hi0bits+0x3a>
 80085de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80085e2:	f100 0001 	add.w	r0, r0, #1
 80085e6:	bf08      	it	eq
 80085e8:	2020      	moveq	r0, #32
 80085ea:	4770      	bx	lr
 80085ec:	2000      	movs	r0, #0
 80085ee:	e7e5      	b.n	80085bc <__hi0bits+0xc>

080085f0 <__lo0bits>:
 80085f0:	6803      	ldr	r3, [r0, #0]
 80085f2:	4602      	mov	r2, r0
 80085f4:	f013 0007 	ands.w	r0, r3, #7
 80085f8:	d00b      	beq.n	8008612 <__lo0bits+0x22>
 80085fa:	07d9      	lsls	r1, r3, #31
 80085fc:	d421      	bmi.n	8008642 <__lo0bits+0x52>
 80085fe:	0798      	lsls	r0, r3, #30
 8008600:	bf49      	itett	mi
 8008602:	085b      	lsrmi	r3, r3, #1
 8008604:	089b      	lsrpl	r3, r3, #2
 8008606:	2001      	movmi	r0, #1
 8008608:	6013      	strmi	r3, [r2, #0]
 800860a:	bf5c      	itt	pl
 800860c:	2002      	movpl	r0, #2
 800860e:	6013      	strpl	r3, [r2, #0]
 8008610:	4770      	bx	lr
 8008612:	b299      	uxth	r1, r3
 8008614:	b909      	cbnz	r1, 800861a <__lo0bits+0x2a>
 8008616:	2010      	movs	r0, #16
 8008618:	0c1b      	lsrs	r3, r3, #16
 800861a:	b2d9      	uxtb	r1, r3
 800861c:	b909      	cbnz	r1, 8008622 <__lo0bits+0x32>
 800861e:	3008      	adds	r0, #8
 8008620:	0a1b      	lsrs	r3, r3, #8
 8008622:	0719      	lsls	r1, r3, #28
 8008624:	bf04      	itt	eq
 8008626:	091b      	lsreq	r3, r3, #4
 8008628:	3004      	addeq	r0, #4
 800862a:	0799      	lsls	r1, r3, #30
 800862c:	bf04      	itt	eq
 800862e:	089b      	lsreq	r3, r3, #2
 8008630:	3002      	addeq	r0, #2
 8008632:	07d9      	lsls	r1, r3, #31
 8008634:	d403      	bmi.n	800863e <__lo0bits+0x4e>
 8008636:	085b      	lsrs	r3, r3, #1
 8008638:	f100 0001 	add.w	r0, r0, #1
 800863c:	d003      	beq.n	8008646 <__lo0bits+0x56>
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	4770      	bx	lr
 8008642:	2000      	movs	r0, #0
 8008644:	4770      	bx	lr
 8008646:	2020      	movs	r0, #32
 8008648:	4770      	bx	lr
	...

0800864c <__i2b>:
 800864c:	b510      	push	{r4, lr}
 800864e:	460c      	mov	r4, r1
 8008650:	2101      	movs	r1, #1
 8008652:	f7ff ff05 	bl	8008460 <_Balloc>
 8008656:	4602      	mov	r2, r0
 8008658:	b928      	cbnz	r0, 8008666 <__i2b+0x1a>
 800865a:	f240 1145 	movw	r1, #325	; 0x145
 800865e:	4b04      	ldr	r3, [pc, #16]	; (8008670 <__i2b+0x24>)
 8008660:	4804      	ldr	r0, [pc, #16]	; (8008674 <__i2b+0x28>)
 8008662:	f000 fc99 	bl	8008f98 <__assert_func>
 8008666:	2301      	movs	r3, #1
 8008668:	6144      	str	r4, [r0, #20]
 800866a:	6103      	str	r3, [r0, #16]
 800866c:	bd10      	pop	{r4, pc}
 800866e:	bf00      	nop
 8008670:	0800a433 	.word	0x0800a433
 8008674:	0800a444 	.word	0x0800a444

08008678 <__multiply>:
 8008678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	4691      	mov	r9, r2
 800867e:	690a      	ldr	r2, [r1, #16]
 8008680:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008684:	460c      	mov	r4, r1
 8008686:	429a      	cmp	r2, r3
 8008688:	bfbe      	ittt	lt
 800868a:	460b      	movlt	r3, r1
 800868c:	464c      	movlt	r4, r9
 800868e:	4699      	movlt	r9, r3
 8008690:	6927      	ldr	r7, [r4, #16]
 8008692:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008696:	68a3      	ldr	r3, [r4, #8]
 8008698:	6861      	ldr	r1, [r4, #4]
 800869a:	eb07 060a 	add.w	r6, r7, sl
 800869e:	42b3      	cmp	r3, r6
 80086a0:	b085      	sub	sp, #20
 80086a2:	bfb8      	it	lt
 80086a4:	3101      	addlt	r1, #1
 80086a6:	f7ff fedb 	bl	8008460 <_Balloc>
 80086aa:	b930      	cbnz	r0, 80086ba <__multiply+0x42>
 80086ac:	4602      	mov	r2, r0
 80086ae:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80086b2:	4b43      	ldr	r3, [pc, #268]	; (80087c0 <__multiply+0x148>)
 80086b4:	4843      	ldr	r0, [pc, #268]	; (80087c4 <__multiply+0x14c>)
 80086b6:	f000 fc6f 	bl	8008f98 <__assert_func>
 80086ba:	f100 0514 	add.w	r5, r0, #20
 80086be:	462b      	mov	r3, r5
 80086c0:	2200      	movs	r2, #0
 80086c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086c6:	4543      	cmp	r3, r8
 80086c8:	d321      	bcc.n	800870e <__multiply+0x96>
 80086ca:	f104 0314 	add.w	r3, r4, #20
 80086ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086d2:	f109 0314 	add.w	r3, r9, #20
 80086d6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086da:	9202      	str	r2, [sp, #8]
 80086dc:	1b3a      	subs	r2, r7, r4
 80086de:	3a15      	subs	r2, #21
 80086e0:	f022 0203 	bic.w	r2, r2, #3
 80086e4:	3204      	adds	r2, #4
 80086e6:	f104 0115 	add.w	r1, r4, #21
 80086ea:	428f      	cmp	r7, r1
 80086ec:	bf38      	it	cc
 80086ee:	2204      	movcc	r2, #4
 80086f0:	9201      	str	r2, [sp, #4]
 80086f2:	9a02      	ldr	r2, [sp, #8]
 80086f4:	9303      	str	r3, [sp, #12]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d80c      	bhi.n	8008714 <__multiply+0x9c>
 80086fa:	2e00      	cmp	r6, #0
 80086fc:	dd03      	ble.n	8008706 <__multiply+0x8e>
 80086fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008702:	2b00      	cmp	r3, #0
 8008704:	d05a      	beq.n	80087bc <__multiply+0x144>
 8008706:	6106      	str	r6, [r0, #16]
 8008708:	b005      	add	sp, #20
 800870a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870e:	f843 2b04 	str.w	r2, [r3], #4
 8008712:	e7d8      	b.n	80086c6 <__multiply+0x4e>
 8008714:	f8b3 a000 	ldrh.w	sl, [r3]
 8008718:	f1ba 0f00 	cmp.w	sl, #0
 800871c:	d023      	beq.n	8008766 <__multiply+0xee>
 800871e:	46a9      	mov	r9, r5
 8008720:	f04f 0c00 	mov.w	ip, #0
 8008724:	f104 0e14 	add.w	lr, r4, #20
 8008728:	f85e 2b04 	ldr.w	r2, [lr], #4
 800872c:	f8d9 1000 	ldr.w	r1, [r9]
 8008730:	fa1f fb82 	uxth.w	fp, r2
 8008734:	b289      	uxth	r1, r1
 8008736:	fb0a 110b 	mla	r1, sl, fp, r1
 800873a:	4461      	add	r1, ip
 800873c:	f8d9 c000 	ldr.w	ip, [r9]
 8008740:	0c12      	lsrs	r2, r2, #16
 8008742:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008746:	fb0a c202 	mla	r2, sl, r2, ip
 800874a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800874e:	b289      	uxth	r1, r1
 8008750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008754:	4577      	cmp	r7, lr
 8008756:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800875a:	f849 1b04 	str.w	r1, [r9], #4
 800875e:	d8e3      	bhi.n	8008728 <__multiply+0xb0>
 8008760:	9a01      	ldr	r2, [sp, #4]
 8008762:	f845 c002 	str.w	ip, [r5, r2]
 8008766:	9a03      	ldr	r2, [sp, #12]
 8008768:	3304      	adds	r3, #4
 800876a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800876e:	f1b9 0f00 	cmp.w	r9, #0
 8008772:	d021      	beq.n	80087b8 <__multiply+0x140>
 8008774:	46ae      	mov	lr, r5
 8008776:	f04f 0a00 	mov.w	sl, #0
 800877a:	6829      	ldr	r1, [r5, #0]
 800877c:	f104 0c14 	add.w	ip, r4, #20
 8008780:	f8bc b000 	ldrh.w	fp, [ip]
 8008784:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008788:	b289      	uxth	r1, r1
 800878a:	fb09 220b 	mla	r2, r9, fp, r2
 800878e:	4452      	add	r2, sl
 8008790:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008794:	f84e 1b04 	str.w	r1, [lr], #4
 8008798:	f85c 1b04 	ldr.w	r1, [ip], #4
 800879c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087a0:	f8be 1000 	ldrh.w	r1, [lr]
 80087a4:	4567      	cmp	r7, ip
 80087a6:	fb09 110a 	mla	r1, r9, sl, r1
 80087aa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80087ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087b2:	d8e5      	bhi.n	8008780 <__multiply+0x108>
 80087b4:	9a01      	ldr	r2, [sp, #4]
 80087b6:	50a9      	str	r1, [r5, r2]
 80087b8:	3504      	adds	r5, #4
 80087ba:	e79a      	b.n	80086f2 <__multiply+0x7a>
 80087bc:	3e01      	subs	r6, #1
 80087be:	e79c      	b.n	80086fa <__multiply+0x82>
 80087c0:	0800a433 	.word	0x0800a433
 80087c4:	0800a444 	.word	0x0800a444

080087c8 <__pow5mult>:
 80087c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087cc:	4615      	mov	r5, r2
 80087ce:	f012 0203 	ands.w	r2, r2, #3
 80087d2:	4606      	mov	r6, r0
 80087d4:	460f      	mov	r7, r1
 80087d6:	d007      	beq.n	80087e8 <__pow5mult+0x20>
 80087d8:	4c25      	ldr	r4, [pc, #148]	; (8008870 <__pow5mult+0xa8>)
 80087da:	3a01      	subs	r2, #1
 80087dc:	2300      	movs	r3, #0
 80087de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087e2:	f7ff fe9f 	bl	8008524 <__multadd>
 80087e6:	4607      	mov	r7, r0
 80087e8:	10ad      	asrs	r5, r5, #2
 80087ea:	d03d      	beq.n	8008868 <__pow5mult+0xa0>
 80087ec:	69f4      	ldr	r4, [r6, #28]
 80087ee:	b97c      	cbnz	r4, 8008810 <__pow5mult+0x48>
 80087f0:	2010      	movs	r0, #16
 80087f2:	f7fd ffaf 	bl	8006754 <malloc>
 80087f6:	4602      	mov	r2, r0
 80087f8:	61f0      	str	r0, [r6, #28]
 80087fa:	b928      	cbnz	r0, 8008808 <__pow5mult+0x40>
 80087fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008800:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <__pow5mult+0xac>)
 8008802:	481d      	ldr	r0, [pc, #116]	; (8008878 <__pow5mult+0xb0>)
 8008804:	f000 fbc8 	bl	8008f98 <__assert_func>
 8008808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800880c:	6004      	str	r4, [r0, #0]
 800880e:	60c4      	str	r4, [r0, #12]
 8008810:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008818:	b94c      	cbnz	r4, 800882e <__pow5mult+0x66>
 800881a:	f240 2171 	movw	r1, #625	; 0x271
 800881e:	4630      	mov	r0, r6
 8008820:	f7ff ff14 	bl	800864c <__i2b>
 8008824:	2300      	movs	r3, #0
 8008826:	4604      	mov	r4, r0
 8008828:	f8c8 0008 	str.w	r0, [r8, #8]
 800882c:	6003      	str	r3, [r0, #0]
 800882e:	f04f 0900 	mov.w	r9, #0
 8008832:	07eb      	lsls	r3, r5, #31
 8008834:	d50a      	bpl.n	800884c <__pow5mult+0x84>
 8008836:	4639      	mov	r1, r7
 8008838:	4622      	mov	r2, r4
 800883a:	4630      	mov	r0, r6
 800883c:	f7ff ff1c 	bl	8008678 <__multiply>
 8008840:	4680      	mov	r8, r0
 8008842:	4639      	mov	r1, r7
 8008844:	4630      	mov	r0, r6
 8008846:	f7ff fe4b 	bl	80084e0 <_Bfree>
 800884a:	4647      	mov	r7, r8
 800884c:	106d      	asrs	r5, r5, #1
 800884e:	d00b      	beq.n	8008868 <__pow5mult+0xa0>
 8008850:	6820      	ldr	r0, [r4, #0]
 8008852:	b938      	cbnz	r0, 8008864 <__pow5mult+0x9c>
 8008854:	4622      	mov	r2, r4
 8008856:	4621      	mov	r1, r4
 8008858:	4630      	mov	r0, r6
 800885a:	f7ff ff0d 	bl	8008678 <__multiply>
 800885e:	6020      	str	r0, [r4, #0]
 8008860:	f8c0 9000 	str.w	r9, [r0]
 8008864:	4604      	mov	r4, r0
 8008866:	e7e4      	b.n	8008832 <__pow5mult+0x6a>
 8008868:	4638      	mov	r0, r7
 800886a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800886e:	bf00      	nop
 8008870:	0800a590 	.word	0x0800a590
 8008874:	0800a3c4 	.word	0x0800a3c4
 8008878:	0800a444 	.word	0x0800a444

0800887c <__lshift>:
 800887c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	460c      	mov	r4, r1
 8008882:	4607      	mov	r7, r0
 8008884:	4691      	mov	r9, r2
 8008886:	6923      	ldr	r3, [r4, #16]
 8008888:	6849      	ldr	r1, [r1, #4]
 800888a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008894:	f108 0601 	add.w	r6, r8, #1
 8008898:	42b3      	cmp	r3, r6
 800889a:	db0b      	blt.n	80088b4 <__lshift+0x38>
 800889c:	4638      	mov	r0, r7
 800889e:	f7ff fddf 	bl	8008460 <_Balloc>
 80088a2:	4605      	mov	r5, r0
 80088a4:	b948      	cbnz	r0, 80088ba <__lshift+0x3e>
 80088a6:	4602      	mov	r2, r0
 80088a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80088ac:	4b27      	ldr	r3, [pc, #156]	; (800894c <__lshift+0xd0>)
 80088ae:	4828      	ldr	r0, [pc, #160]	; (8008950 <__lshift+0xd4>)
 80088b0:	f000 fb72 	bl	8008f98 <__assert_func>
 80088b4:	3101      	adds	r1, #1
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	e7ee      	b.n	8008898 <__lshift+0x1c>
 80088ba:	2300      	movs	r3, #0
 80088bc:	f100 0114 	add.w	r1, r0, #20
 80088c0:	f100 0210 	add.w	r2, r0, #16
 80088c4:	4618      	mov	r0, r3
 80088c6:	4553      	cmp	r3, sl
 80088c8:	db33      	blt.n	8008932 <__lshift+0xb6>
 80088ca:	6920      	ldr	r0, [r4, #16]
 80088cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088d0:	f104 0314 	add.w	r3, r4, #20
 80088d4:	f019 091f 	ands.w	r9, r9, #31
 80088d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088e0:	d02b      	beq.n	800893a <__lshift+0xbe>
 80088e2:	468a      	mov	sl, r1
 80088e4:	2200      	movs	r2, #0
 80088e6:	f1c9 0e20 	rsb	lr, r9, #32
 80088ea:	6818      	ldr	r0, [r3, #0]
 80088ec:	fa00 f009 	lsl.w	r0, r0, r9
 80088f0:	4310      	orrs	r0, r2
 80088f2:	f84a 0b04 	str.w	r0, [sl], #4
 80088f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088fa:	459c      	cmp	ip, r3
 80088fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008900:	d8f3      	bhi.n	80088ea <__lshift+0x6e>
 8008902:	ebac 0304 	sub.w	r3, ip, r4
 8008906:	3b15      	subs	r3, #21
 8008908:	f023 0303 	bic.w	r3, r3, #3
 800890c:	3304      	adds	r3, #4
 800890e:	f104 0015 	add.w	r0, r4, #21
 8008912:	4584      	cmp	ip, r0
 8008914:	bf38      	it	cc
 8008916:	2304      	movcc	r3, #4
 8008918:	50ca      	str	r2, [r1, r3]
 800891a:	b10a      	cbz	r2, 8008920 <__lshift+0xa4>
 800891c:	f108 0602 	add.w	r6, r8, #2
 8008920:	3e01      	subs	r6, #1
 8008922:	4638      	mov	r0, r7
 8008924:	4621      	mov	r1, r4
 8008926:	612e      	str	r6, [r5, #16]
 8008928:	f7ff fdda 	bl	80084e0 <_Bfree>
 800892c:	4628      	mov	r0, r5
 800892e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008932:	f842 0f04 	str.w	r0, [r2, #4]!
 8008936:	3301      	adds	r3, #1
 8008938:	e7c5      	b.n	80088c6 <__lshift+0x4a>
 800893a:	3904      	subs	r1, #4
 800893c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008940:	459c      	cmp	ip, r3
 8008942:	f841 2f04 	str.w	r2, [r1, #4]!
 8008946:	d8f9      	bhi.n	800893c <__lshift+0xc0>
 8008948:	e7ea      	b.n	8008920 <__lshift+0xa4>
 800894a:	bf00      	nop
 800894c:	0800a433 	.word	0x0800a433
 8008950:	0800a444 	.word	0x0800a444

08008954 <__mcmp>:
 8008954:	4603      	mov	r3, r0
 8008956:	690a      	ldr	r2, [r1, #16]
 8008958:	6900      	ldr	r0, [r0, #16]
 800895a:	b530      	push	{r4, r5, lr}
 800895c:	1a80      	subs	r0, r0, r2
 800895e:	d10d      	bne.n	800897c <__mcmp+0x28>
 8008960:	3314      	adds	r3, #20
 8008962:	3114      	adds	r1, #20
 8008964:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008968:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800896c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008970:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008974:	4295      	cmp	r5, r2
 8008976:	d002      	beq.n	800897e <__mcmp+0x2a>
 8008978:	d304      	bcc.n	8008984 <__mcmp+0x30>
 800897a:	2001      	movs	r0, #1
 800897c:	bd30      	pop	{r4, r5, pc}
 800897e:	42a3      	cmp	r3, r4
 8008980:	d3f4      	bcc.n	800896c <__mcmp+0x18>
 8008982:	e7fb      	b.n	800897c <__mcmp+0x28>
 8008984:	f04f 30ff 	mov.w	r0, #4294967295
 8008988:	e7f8      	b.n	800897c <__mcmp+0x28>
	...

0800898c <__mdiff>:
 800898c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008990:	460d      	mov	r5, r1
 8008992:	4607      	mov	r7, r0
 8008994:	4611      	mov	r1, r2
 8008996:	4628      	mov	r0, r5
 8008998:	4614      	mov	r4, r2
 800899a:	f7ff ffdb 	bl	8008954 <__mcmp>
 800899e:	1e06      	subs	r6, r0, #0
 80089a0:	d111      	bne.n	80089c6 <__mdiff+0x3a>
 80089a2:	4631      	mov	r1, r6
 80089a4:	4638      	mov	r0, r7
 80089a6:	f7ff fd5b 	bl	8008460 <_Balloc>
 80089aa:	4602      	mov	r2, r0
 80089ac:	b928      	cbnz	r0, 80089ba <__mdiff+0x2e>
 80089ae:	f240 2137 	movw	r1, #567	; 0x237
 80089b2:	4b3a      	ldr	r3, [pc, #232]	; (8008a9c <__mdiff+0x110>)
 80089b4:	483a      	ldr	r0, [pc, #232]	; (8008aa0 <__mdiff+0x114>)
 80089b6:	f000 faef 	bl	8008f98 <__assert_func>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089c0:	4610      	mov	r0, r2
 80089c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c6:	bfa4      	itt	ge
 80089c8:	4623      	movge	r3, r4
 80089ca:	462c      	movge	r4, r5
 80089cc:	4638      	mov	r0, r7
 80089ce:	6861      	ldr	r1, [r4, #4]
 80089d0:	bfa6      	itte	ge
 80089d2:	461d      	movge	r5, r3
 80089d4:	2600      	movge	r6, #0
 80089d6:	2601      	movlt	r6, #1
 80089d8:	f7ff fd42 	bl	8008460 <_Balloc>
 80089dc:	4602      	mov	r2, r0
 80089de:	b918      	cbnz	r0, 80089e8 <__mdiff+0x5c>
 80089e0:	f240 2145 	movw	r1, #581	; 0x245
 80089e4:	4b2d      	ldr	r3, [pc, #180]	; (8008a9c <__mdiff+0x110>)
 80089e6:	e7e5      	b.n	80089b4 <__mdiff+0x28>
 80089e8:	f102 0814 	add.w	r8, r2, #20
 80089ec:	46c2      	mov	sl, r8
 80089ee:	f04f 0c00 	mov.w	ip, #0
 80089f2:	6927      	ldr	r7, [r4, #16]
 80089f4:	60c6      	str	r6, [r0, #12]
 80089f6:	692e      	ldr	r6, [r5, #16]
 80089f8:	f104 0014 	add.w	r0, r4, #20
 80089fc:	f105 0914 	add.w	r9, r5, #20
 8008a00:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008a04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a08:	3410      	adds	r4, #16
 8008a0a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008a0e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a12:	fa1f f18b 	uxth.w	r1, fp
 8008a16:	4461      	add	r1, ip
 8008a18:	fa1f fc83 	uxth.w	ip, r3
 8008a1c:	0c1b      	lsrs	r3, r3, #16
 8008a1e:	eba1 010c 	sub.w	r1, r1, ip
 8008a22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a26:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008a2a:	b289      	uxth	r1, r1
 8008a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008a30:	454e      	cmp	r6, r9
 8008a32:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008a36:	f84a 1b04 	str.w	r1, [sl], #4
 8008a3a:	d8e6      	bhi.n	8008a0a <__mdiff+0x7e>
 8008a3c:	1b73      	subs	r3, r6, r5
 8008a3e:	3b15      	subs	r3, #21
 8008a40:	f023 0303 	bic.w	r3, r3, #3
 8008a44:	3515      	adds	r5, #21
 8008a46:	3304      	adds	r3, #4
 8008a48:	42ae      	cmp	r6, r5
 8008a4a:	bf38      	it	cc
 8008a4c:	2304      	movcc	r3, #4
 8008a4e:	4418      	add	r0, r3
 8008a50:	4443      	add	r3, r8
 8008a52:	461e      	mov	r6, r3
 8008a54:	4605      	mov	r5, r0
 8008a56:	4575      	cmp	r5, lr
 8008a58:	d30e      	bcc.n	8008a78 <__mdiff+0xec>
 8008a5a:	f10e 0103 	add.w	r1, lr, #3
 8008a5e:	1a09      	subs	r1, r1, r0
 8008a60:	f021 0103 	bic.w	r1, r1, #3
 8008a64:	3803      	subs	r0, #3
 8008a66:	4586      	cmp	lr, r0
 8008a68:	bf38      	it	cc
 8008a6a:	2100      	movcc	r1, #0
 8008a6c:	440b      	add	r3, r1
 8008a6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a72:	b189      	cbz	r1, 8008a98 <__mdiff+0x10c>
 8008a74:	6117      	str	r7, [r2, #16]
 8008a76:	e7a3      	b.n	80089c0 <__mdiff+0x34>
 8008a78:	f855 8b04 	ldr.w	r8, [r5], #4
 8008a7c:	fa1f f188 	uxth.w	r1, r8
 8008a80:	4461      	add	r1, ip
 8008a82:	140c      	asrs	r4, r1, #16
 8008a84:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a88:	b289      	uxth	r1, r1
 8008a8a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008a8e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008a92:	f846 1b04 	str.w	r1, [r6], #4
 8008a96:	e7de      	b.n	8008a56 <__mdiff+0xca>
 8008a98:	3f01      	subs	r7, #1
 8008a9a:	e7e8      	b.n	8008a6e <__mdiff+0xe2>
 8008a9c:	0800a433 	.word	0x0800a433
 8008aa0:	0800a444 	.word	0x0800a444

08008aa4 <__d2b>:
 8008aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	4617      	mov	r7, r2
 8008aaa:	461c      	mov	r4, r3
 8008aac:	9e08      	ldr	r6, [sp, #32]
 8008aae:	f7ff fcd7 	bl	8008460 <_Balloc>
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	b930      	cbnz	r0, 8008ac4 <__d2b+0x20>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	f240 310f 	movw	r1, #783	; 0x30f
 8008abc:	4b22      	ldr	r3, [pc, #136]	; (8008b48 <__d2b+0xa4>)
 8008abe:	4823      	ldr	r0, [pc, #140]	; (8008b4c <__d2b+0xa8>)
 8008ac0:	f000 fa6a 	bl	8008f98 <__assert_func>
 8008ac4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008ac8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008acc:	bb24      	cbnz	r4, 8008b18 <__d2b+0x74>
 8008ace:	2f00      	cmp	r7, #0
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	d026      	beq.n	8008b22 <__d2b+0x7e>
 8008ad4:	4668      	mov	r0, sp
 8008ad6:	9700      	str	r7, [sp, #0]
 8008ad8:	f7ff fd8a 	bl	80085f0 <__lo0bits>
 8008adc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ae0:	b1e8      	cbz	r0, 8008b1e <__d2b+0x7a>
 8008ae2:	f1c0 0320 	rsb	r3, r0, #32
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	430b      	orrs	r3, r1
 8008aec:	40c2      	lsrs	r2, r0
 8008aee:	616b      	str	r3, [r5, #20]
 8008af0:	9201      	str	r2, [sp, #4]
 8008af2:	9b01      	ldr	r3, [sp, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	bf14      	ite	ne
 8008af8:	2102      	movne	r1, #2
 8008afa:	2101      	moveq	r1, #1
 8008afc:	61ab      	str	r3, [r5, #24]
 8008afe:	6129      	str	r1, [r5, #16]
 8008b00:	b1bc      	cbz	r4, 8008b32 <__d2b+0x8e>
 8008b02:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008b06:	4404      	add	r4, r0
 8008b08:	6034      	str	r4, [r6, #0]
 8008b0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b10:	6018      	str	r0, [r3, #0]
 8008b12:	4628      	mov	r0, r5
 8008b14:	b003      	add	sp, #12
 8008b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b1c:	e7d7      	b.n	8008ace <__d2b+0x2a>
 8008b1e:	6169      	str	r1, [r5, #20]
 8008b20:	e7e7      	b.n	8008af2 <__d2b+0x4e>
 8008b22:	a801      	add	r0, sp, #4
 8008b24:	f7ff fd64 	bl	80085f0 <__lo0bits>
 8008b28:	9b01      	ldr	r3, [sp, #4]
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	616b      	str	r3, [r5, #20]
 8008b2e:	3020      	adds	r0, #32
 8008b30:	e7e5      	b.n	8008afe <__d2b+0x5a>
 8008b32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b36:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008b3a:	6030      	str	r0, [r6, #0]
 8008b3c:	6918      	ldr	r0, [r3, #16]
 8008b3e:	f7ff fd37 	bl	80085b0 <__hi0bits>
 8008b42:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008b46:	e7e2      	b.n	8008b0e <__d2b+0x6a>
 8008b48:	0800a433 	.word	0x0800a433
 8008b4c:	0800a444 	.word	0x0800a444

08008b50 <_malloc_usable_size_r>:
 8008b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b54:	1f18      	subs	r0, r3, #4
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	bfbc      	itt	lt
 8008b5a:	580b      	ldrlt	r3, [r1, r0]
 8008b5c:	18c0      	addlt	r0, r0, r3
 8008b5e:	4770      	bx	lr

08008b60 <__ssputs_r>:
 8008b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b64:	461f      	mov	r7, r3
 8008b66:	688e      	ldr	r6, [r1, #8]
 8008b68:	4682      	mov	sl, r0
 8008b6a:	42be      	cmp	r6, r7
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	4690      	mov	r8, r2
 8008b70:	680b      	ldr	r3, [r1, #0]
 8008b72:	d82c      	bhi.n	8008bce <__ssputs_r+0x6e>
 8008b74:	898a      	ldrh	r2, [r1, #12]
 8008b76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b7a:	d026      	beq.n	8008bca <__ssputs_r+0x6a>
 8008b7c:	6965      	ldr	r5, [r4, #20]
 8008b7e:	6909      	ldr	r1, [r1, #16]
 8008b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b84:	eba3 0901 	sub.w	r9, r3, r1
 8008b88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b8c:	1c7b      	adds	r3, r7, #1
 8008b8e:	444b      	add	r3, r9
 8008b90:	106d      	asrs	r5, r5, #1
 8008b92:	429d      	cmp	r5, r3
 8008b94:	bf38      	it	cc
 8008b96:	461d      	movcc	r5, r3
 8008b98:	0553      	lsls	r3, r2, #21
 8008b9a:	d527      	bpl.n	8008bec <__ssputs_r+0x8c>
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	f7fd fe09 	bl	80067b4 <_malloc_r>
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	b360      	cbz	r0, 8008c00 <__ssputs_r+0xa0>
 8008ba6:	464a      	mov	r2, r9
 8008ba8:	6921      	ldr	r1, [r4, #16]
 8008baa:	f7fe fd94 	bl	80076d6 <memcpy>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	6126      	str	r6, [r4, #16]
 8008bbc:	444e      	add	r6, r9
 8008bbe:	6026      	str	r6, [r4, #0]
 8008bc0:	463e      	mov	r6, r7
 8008bc2:	6165      	str	r5, [r4, #20]
 8008bc4:	eba5 0509 	sub.w	r5, r5, r9
 8008bc8:	60a5      	str	r5, [r4, #8]
 8008bca:	42be      	cmp	r6, r7
 8008bcc:	d900      	bls.n	8008bd0 <__ssputs_r+0x70>
 8008bce:	463e      	mov	r6, r7
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	4641      	mov	r1, r8
 8008bd4:	6820      	ldr	r0, [r4, #0]
 8008bd6:	f000 f9c5 	bl	8008f64 <memmove>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	68a3      	ldr	r3, [r4, #8]
 8008bde:	1b9b      	subs	r3, r3, r6
 8008be0:	60a3      	str	r3, [r4, #8]
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	4433      	add	r3, r6
 8008be6:	6023      	str	r3, [r4, #0]
 8008be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bec:	462a      	mov	r2, r5
 8008bee:	f7fd fe75 	bl	80068dc <_realloc_r>
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d1e0      	bne.n	8008bba <__ssputs_r+0x5a>
 8008bf8:	4650      	mov	r0, sl
 8008bfa:	6921      	ldr	r1, [r4, #16]
 8008bfc:	f7ff fbe8 	bl	80083d0 <_free_r>
 8008c00:	230c      	movs	r3, #12
 8008c02:	f8ca 3000 	str.w	r3, [sl]
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c10:	81a3      	strh	r3, [r4, #12]
 8008c12:	e7e9      	b.n	8008be8 <__ssputs_r+0x88>

08008c14 <_svfiprintf_r>:
 8008c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c18:	4698      	mov	r8, r3
 8008c1a:	898b      	ldrh	r3, [r1, #12]
 8008c1c:	4607      	mov	r7, r0
 8008c1e:	061b      	lsls	r3, r3, #24
 8008c20:	460d      	mov	r5, r1
 8008c22:	4614      	mov	r4, r2
 8008c24:	b09d      	sub	sp, #116	; 0x74
 8008c26:	d50e      	bpl.n	8008c46 <_svfiprintf_r+0x32>
 8008c28:	690b      	ldr	r3, [r1, #16]
 8008c2a:	b963      	cbnz	r3, 8008c46 <_svfiprintf_r+0x32>
 8008c2c:	2140      	movs	r1, #64	; 0x40
 8008c2e:	f7fd fdc1 	bl	80067b4 <_malloc_r>
 8008c32:	6028      	str	r0, [r5, #0]
 8008c34:	6128      	str	r0, [r5, #16]
 8008c36:	b920      	cbnz	r0, 8008c42 <_svfiprintf_r+0x2e>
 8008c38:	230c      	movs	r3, #12
 8008c3a:	603b      	str	r3, [r7, #0]
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	e0d0      	b.n	8008de4 <_svfiprintf_r+0x1d0>
 8008c42:	2340      	movs	r3, #64	; 0x40
 8008c44:	616b      	str	r3, [r5, #20]
 8008c46:	2300      	movs	r3, #0
 8008c48:	9309      	str	r3, [sp, #36]	; 0x24
 8008c4a:	2320      	movs	r3, #32
 8008c4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c50:	2330      	movs	r3, #48	; 0x30
 8008c52:	f04f 0901 	mov.w	r9, #1
 8008c56:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c5a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008dfc <_svfiprintf_r+0x1e8>
 8008c5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c62:	4623      	mov	r3, r4
 8008c64:	469a      	mov	sl, r3
 8008c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c6a:	b10a      	cbz	r2, 8008c70 <_svfiprintf_r+0x5c>
 8008c6c:	2a25      	cmp	r2, #37	; 0x25
 8008c6e:	d1f9      	bne.n	8008c64 <_svfiprintf_r+0x50>
 8008c70:	ebba 0b04 	subs.w	fp, sl, r4
 8008c74:	d00b      	beq.n	8008c8e <_svfiprintf_r+0x7a>
 8008c76:	465b      	mov	r3, fp
 8008c78:	4622      	mov	r2, r4
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f7ff ff6f 	bl	8008b60 <__ssputs_r>
 8008c82:	3001      	adds	r0, #1
 8008c84:	f000 80a9 	beq.w	8008dda <_svfiprintf_r+0x1c6>
 8008c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c8a:	445a      	add	r2, fp
 8008c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 80a1 	beq.w	8008dda <_svfiprintf_r+0x1c6>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ca2:	f10a 0a01 	add.w	sl, sl, #1
 8008ca6:	9304      	str	r3, [sp, #16]
 8008ca8:	9307      	str	r3, [sp, #28]
 8008caa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cae:	931a      	str	r3, [sp, #104]	; 0x68
 8008cb0:	4654      	mov	r4, sl
 8008cb2:	2205      	movs	r2, #5
 8008cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb8:	4850      	ldr	r0, [pc, #320]	; (8008dfc <_svfiprintf_r+0x1e8>)
 8008cba:	f7fe fcfe 	bl	80076ba <memchr>
 8008cbe:	9a04      	ldr	r2, [sp, #16]
 8008cc0:	b9d8      	cbnz	r0, 8008cfa <_svfiprintf_r+0xe6>
 8008cc2:	06d0      	lsls	r0, r2, #27
 8008cc4:	bf44      	itt	mi
 8008cc6:	2320      	movmi	r3, #32
 8008cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ccc:	0711      	lsls	r1, r2, #28
 8008cce:	bf44      	itt	mi
 8008cd0:	232b      	movmi	r3, #43	; 0x2b
 8008cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8008cda:	2b2a      	cmp	r3, #42	; 0x2a
 8008cdc:	d015      	beq.n	8008d0a <_svfiprintf_r+0xf6>
 8008cde:	4654      	mov	r4, sl
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f04f 0c0a 	mov.w	ip, #10
 8008ce6:	9a07      	ldr	r2, [sp, #28]
 8008ce8:	4621      	mov	r1, r4
 8008cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cee:	3b30      	subs	r3, #48	; 0x30
 8008cf0:	2b09      	cmp	r3, #9
 8008cf2:	d94d      	bls.n	8008d90 <_svfiprintf_r+0x17c>
 8008cf4:	b1b0      	cbz	r0, 8008d24 <_svfiprintf_r+0x110>
 8008cf6:	9207      	str	r2, [sp, #28]
 8008cf8:	e014      	b.n	8008d24 <_svfiprintf_r+0x110>
 8008cfa:	eba0 0308 	sub.w	r3, r0, r8
 8008cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8008d02:	4313      	orrs	r3, r2
 8008d04:	46a2      	mov	sl, r4
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	e7d2      	b.n	8008cb0 <_svfiprintf_r+0x9c>
 8008d0a:	9b03      	ldr	r3, [sp, #12]
 8008d0c:	1d19      	adds	r1, r3, #4
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	9103      	str	r1, [sp, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bfbb      	ittet	lt
 8008d16:	425b      	neglt	r3, r3
 8008d18:	f042 0202 	orrlt.w	r2, r2, #2
 8008d1c:	9307      	strge	r3, [sp, #28]
 8008d1e:	9307      	strlt	r3, [sp, #28]
 8008d20:	bfb8      	it	lt
 8008d22:	9204      	strlt	r2, [sp, #16]
 8008d24:	7823      	ldrb	r3, [r4, #0]
 8008d26:	2b2e      	cmp	r3, #46	; 0x2e
 8008d28:	d10c      	bne.n	8008d44 <_svfiprintf_r+0x130>
 8008d2a:	7863      	ldrb	r3, [r4, #1]
 8008d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d2e:	d134      	bne.n	8008d9a <_svfiprintf_r+0x186>
 8008d30:	9b03      	ldr	r3, [sp, #12]
 8008d32:	3402      	adds	r4, #2
 8008d34:	1d1a      	adds	r2, r3, #4
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	9203      	str	r2, [sp, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	bfb8      	it	lt
 8008d3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d42:	9305      	str	r3, [sp, #20]
 8008d44:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008e00 <_svfiprintf_r+0x1ec>
 8008d48:	2203      	movs	r2, #3
 8008d4a:	4650      	mov	r0, sl
 8008d4c:	7821      	ldrb	r1, [r4, #0]
 8008d4e:	f7fe fcb4 	bl	80076ba <memchr>
 8008d52:	b138      	cbz	r0, 8008d64 <_svfiprintf_r+0x150>
 8008d54:	2240      	movs	r2, #64	; 0x40
 8008d56:	9b04      	ldr	r3, [sp, #16]
 8008d58:	eba0 000a 	sub.w	r0, r0, sl
 8008d5c:	4082      	lsls	r2, r0
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	3401      	adds	r4, #1
 8008d62:	9304      	str	r3, [sp, #16]
 8008d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d68:	2206      	movs	r2, #6
 8008d6a:	4826      	ldr	r0, [pc, #152]	; (8008e04 <_svfiprintf_r+0x1f0>)
 8008d6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d70:	f7fe fca3 	bl	80076ba <memchr>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d038      	beq.n	8008dea <_svfiprintf_r+0x1d6>
 8008d78:	4b23      	ldr	r3, [pc, #140]	; (8008e08 <_svfiprintf_r+0x1f4>)
 8008d7a:	bb1b      	cbnz	r3, 8008dc4 <_svfiprintf_r+0x1b0>
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	3307      	adds	r3, #7
 8008d80:	f023 0307 	bic.w	r3, r3, #7
 8008d84:	3308      	adds	r3, #8
 8008d86:	9303      	str	r3, [sp, #12]
 8008d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d8a:	4433      	add	r3, r6
 8008d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d8e:	e768      	b.n	8008c62 <_svfiprintf_r+0x4e>
 8008d90:	460c      	mov	r4, r1
 8008d92:	2001      	movs	r0, #1
 8008d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d98:	e7a6      	b.n	8008ce8 <_svfiprintf_r+0xd4>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f04f 0c0a 	mov.w	ip, #10
 8008da0:	4619      	mov	r1, r3
 8008da2:	3401      	adds	r4, #1
 8008da4:	9305      	str	r3, [sp, #20]
 8008da6:	4620      	mov	r0, r4
 8008da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dac:	3a30      	subs	r2, #48	; 0x30
 8008dae:	2a09      	cmp	r2, #9
 8008db0:	d903      	bls.n	8008dba <_svfiprintf_r+0x1a6>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0c6      	beq.n	8008d44 <_svfiprintf_r+0x130>
 8008db6:	9105      	str	r1, [sp, #20]
 8008db8:	e7c4      	b.n	8008d44 <_svfiprintf_r+0x130>
 8008dba:	4604      	mov	r4, r0
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dc2:	e7f0      	b.n	8008da6 <_svfiprintf_r+0x192>
 8008dc4:	ab03      	add	r3, sp, #12
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	462a      	mov	r2, r5
 8008dca:	4638      	mov	r0, r7
 8008dcc:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <_svfiprintf_r+0x1f8>)
 8008dce:	a904      	add	r1, sp, #16
 8008dd0:	f7fd fed8 	bl	8006b84 <_printf_float>
 8008dd4:	1c42      	adds	r2, r0, #1
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	d1d6      	bne.n	8008d88 <_svfiprintf_r+0x174>
 8008dda:	89ab      	ldrh	r3, [r5, #12]
 8008ddc:	065b      	lsls	r3, r3, #25
 8008dde:	f53f af2d 	bmi.w	8008c3c <_svfiprintf_r+0x28>
 8008de2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008de4:	b01d      	add	sp, #116	; 0x74
 8008de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dea:	ab03      	add	r3, sp, #12
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	462a      	mov	r2, r5
 8008df0:	4638      	mov	r0, r7
 8008df2:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <_svfiprintf_r+0x1f8>)
 8008df4:	a904      	add	r1, sp, #16
 8008df6:	f7fe f965 	bl	80070c4 <_printf_i>
 8008dfa:	e7eb      	b.n	8008dd4 <_svfiprintf_r+0x1c0>
 8008dfc:	0800a59c 	.word	0x0800a59c
 8008e00:	0800a5a2 	.word	0x0800a5a2
 8008e04:	0800a5a6 	.word	0x0800a5a6
 8008e08:	08006b85 	.word	0x08006b85
 8008e0c:	08008b61 	.word	0x08008b61

08008e10 <__sflush_r>:
 8008e10:	898a      	ldrh	r2, [r1, #12]
 8008e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e14:	4605      	mov	r5, r0
 8008e16:	0710      	lsls	r0, r2, #28
 8008e18:	460c      	mov	r4, r1
 8008e1a:	d457      	bmi.n	8008ecc <__sflush_r+0xbc>
 8008e1c:	684b      	ldr	r3, [r1, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	dc04      	bgt.n	8008e2c <__sflush_r+0x1c>
 8008e22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	dc01      	bgt.n	8008e2c <__sflush_r+0x1c>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e2e:	2e00      	cmp	r6, #0
 8008e30:	d0fa      	beq.n	8008e28 <__sflush_r+0x18>
 8008e32:	2300      	movs	r3, #0
 8008e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e38:	682f      	ldr	r7, [r5, #0]
 8008e3a:	6a21      	ldr	r1, [r4, #32]
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	d032      	beq.n	8008ea6 <__sflush_r+0x96>
 8008e40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	075a      	lsls	r2, r3, #29
 8008e46:	d505      	bpl.n	8008e54 <__sflush_r+0x44>
 8008e48:	6863      	ldr	r3, [r4, #4]
 8008e4a:	1ac0      	subs	r0, r0, r3
 8008e4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e4e:	b10b      	cbz	r3, 8008e54 <__sflush_r+0x44>
 8008e50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e52:	1ac0      	subs	r0, r0, r3
 8008e54:	2300      	movs	r3, #0
 8008e56:	4602      	mov	r2, r0
 8008e58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	6a21      	ldr	r1, [r4, #32]
 8008e5e:	47b0      	blx	r6
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	d106      	bne.n	8008e74 <__sflush_r+0x64>
 8008e66:	6829      	ldr	r1, [r5, #0]
 8008e68:	291d      	cmp	r1, #29
 8008e6a:	d82b      	bhi.n	8008ec4 <__sflush_r+0xb4>
 8008e6c:	4a28      	ldr	r2, [pc, #160]	; (8008f10 <__sflush_r+0x100>)
 8008e6e:	410a      	asrs	r2, r1
 8008e70:	07d6      	lsls	r6, r2, #31
 8008e72:	d427      	bmi.n	8008ec4 <__sflush_r+0xb4>
 8008e74:	2200      	movs	r2, #0
 8008e76:	6062      	str	r2, [r4, #4]
 8008e78:	6922      	ldr	r2, [r4, #16]
 8008e7a:	04d9      	lsls	r1, r3, #19
 8008e7c:	6022      	str	r2, [r4, #0]
 8008e7e:	d504      	bpl.n	8008e8a <__sflush_r+0x7a>
 8008e80:	1c42      	adds	r2, r0, #1
 8008e82:	d101      	bne.n	8008e88 <__sflush_r+0x78>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b903      	cbnz	r3, 8008e8a <__sflush_r+0x7a>
 8008e88:	6560      	str	r0, [r4, #84]	; 0x54
 8008e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e8c:	602f      	str	r7, [r5, #0]
 8008e8e:	2900      	cmp	r1, #0
 8008e90:	d0ca      	beq.n	8008e28 <__sflush_r+0x18>
 8008e92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e96:	4299      	cmp	r1, r3
 8008e98:	d002      	beq.n	8008ea0 <__sflush_r+0x90>
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f7ff fa98 	bl	80083d0 <_free_r>
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	6360      	str	r0, [r4, #52]	; 0x34
 8008ea4:	e7c1      	b.n	8008e2a <__sflush_r+0x1a>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	47b0      	blx	r6
 8008eac:	1c41      	adds	r1, r0, #1
 8008eae:	d1c8      	bne.n	8008e42 <__sflush_r+0x32>
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0c5      	beq.n	8008e42 <__sflush_r+0x32>
 8008eb6:	2b1d      	cmp	r3, #29
 8008eb8:	d001      	beq.n	8008ebe <__sflush_r+0xae>
 8008eba:	2b16      	cmp	r3, #22
 8008ebc:	d101      	bne.n	8008ec2 <__sflush_r+0xb2>
 8008ebe:	602f      	str	r7, [r5, #0]
 8008ec0:	e7b2      	b.n	8008e28 <__sflush_r+0x18>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec8:	81a3      	strh	r3, [r4, #12]
 8008eca:	e7ae      	b.n	8008e2a <__sflush_r+0x1a>
 8008ecc:	690f      	ldr	r7, [r1, #16]
 8008ece:	2f00      	cmp	r7, #0
 8008ed0:	d0aa      	beq.n	8008e28 <__sflush_r+0x18>
 8008ed2:	0793      	lsls	r3, r2, #30
 8008ed4:	bf18      	it	ne
 8008ed6:	2300      	movne	r3, #0
 8008ed8:	680e      	ldr	r6, [r1, #0]
 8008eda:	bf08      	it	eq
 8008edc:	694b      	ldreq	r3, [r1, #20]
 8008ede:	1bf6      	subs	r6, r6, r7
 8008ee0:	600f      	str	r7, [r1, #0]
 8008ee2:	608b      	str	r3, [r1, #8]
 8008ee4:	2e00      	cmp	r6, #0
 8008ee6:	dd9f      	ble.n	8008e28 <__sflush_r+0x18>
 8008ee8:	4633      	mov	r3, r6
 8008eea:	463a      	mov	r2, r7
 8008eec:	4628      	mov	r0, r5
 8008eee:	6a21      	ldr	r1, [r4, #32]
 8008ef0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008ef4:	47e0      	blx	ip
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	dc06      	bgt.n	8008f08 <__sflush_r+0xf8>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295
 8008f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f04:	81a3      	strh	r3, [r4, #12]
 8008f06:	e790      	b.n	8008e2a <__sflush_r+0x1a>
 8008f08:	4407      	add	r7, r0
 8008f0a:	1a36      	subs	r6, r6, r0
 8008f0c:	e7ea      	b.n	8008ee4 <__sflush_r+0xd4>
 8008f0e:	bf00      	nop
 8008f10:	dfbffffe 	.word	0xdfbffffe

08008f14 <_fflush_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	690b      	ldr	r3, [r1, #16]
 8008f18:	4605      	mov	r5, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	b913      	cbnz	r3, 8008f24 <_fflush_r+0x10>
 8008f1e:	2500      	movs	r5, #0
 8008f20:	4628      	mov	r0, r5
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	b118      	cbz	r0, 8008f2e <_fflush_r+0x1a>
 8008f26:	6a03      	ldr	r3, [r0, #32]
 8008f28:	b90b      	cbnz	r3, 8008f2e <_fflush_r+0x1a>
 8008f2a:	f7fe fa79 	bl	8007420 <__sinit>
 8008f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0f3      	beq.n	8008f1e <_fflush_r+0xa>
 8008f36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f38:	07d0      	lsls	r0, r2, #31
 8008f3a:	d404      	bmi.n	8008f46 <_fflush_r+0x32>
 8008f3c:	0599      	lsls	r1, r3, #22
 8008f3e:	d402      	bmi.n	8008f46 <_fflush_r+0x32>
 8008f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f42:	f7fe fbb8 	bl	80076b6 <__retarget_lock_acquire_recursive>
 8008f46:	4628      	mov	r0, r5
 8008f48:	4621      	mov	r1, r4
 8008f4a:	f7ff ff61 	bl	8008e10 <__sflush_r>
 8008f4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f50:	4605      	mov	r5, r0
 8008f52:	07da      	lsls	r2, r3, #31
 8008f54:	d4e4      	bmi.n	8008f20 <_fflush_r+0xc>
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	059b      	lsls	r3, r3, #22
 8008f5a:	d4e1      	bmi.n	8008f20 <_fflush_r+0xc>
 8008f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f5e:	f7fe fbab 	bl	80076b8 <__retarget_lock_release_recursive>
 8008f62:	e7dd      	b.n	8008f20 <_fflush_r+0xc>

08008f64 <memmove>:
 8008f64:	4288      	cmp	r0, r1
 8008f66:	b510      	push	{r4, lr}
 8008f68:	eb01 0402 	add.w	r4, r1, r2
 8008f6c:	d902      	bls.n	8008f74 <memmove+0x10>
 8008f6e:	4284      	cmp	r4, r0
 8008f70:	4623      	mov	r3, r4
 8008f72:	d807      	bhi.n	8008f84 <memmove+0x20>
 8008f74:	1e43      	subs	r3, r0, #1
 8008f76:	42a1      	cmp	r1, r4
 8008f78:	d008      	beq.n	8008f8c <memmove+0x28>
 8008f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f82:	e7f8      	b.n	8008f76 <memmove+0x12>
 8008f84:	4601      	mov	r1, r0
 8008f86:	4402      	add	r2, r0
 8008f88:	428a      	cmp	r2, r1
 8008f8a:	d100      	bne.n	8008f8e <memmove+0x2a>
 8008f8c:	bd10      	pop	{r4, pc}
 8008f8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f96:	e7f7      	b.n	8008f88 <memmove+0x24>

08008f98 <__assert_func>:
 8008f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f9a:	4614      	mov	r4, r2
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <__assert_func+0x2c>)
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68d8      	ldr	r0, [r3, #12]
 8008fa6:	b14c      	cbz	r4, 8008fbc <__assert_func+0x24>
 8008fa8:	4b07      	ldr	r3, [pc, #28]	; (8008fc8 <__assert_func+0x30>)
 8008faa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fae:	9100      	str	r1, [sp, #0]
 8008fb0:	462b      	mov	r3, r5
 8008fb2:	4906      	ldr	r1, [pc, #24]	; (8008fcc <__assert_func+0x34>)
 8008fb4:	f000 f842 	bl	800903c <fiprintf>
 8008fb8:	f000 f852 	bl	8009060 <abort>
 8008fbc:	4b04      	ldr	r3, [pc, #16]	; (8008fd0 <__assert_func+0x38>)
 8008fbe:	461c      	mov	r4, r3
 8008fc0:	e7f3      	b.n	8008faa <__assert_func+0x12>
 8008fc2:	bf00      	nop
 8008fc4:	2000007c 	.word	0x2000007c
 8008fc8:	0800a5b7 	.word	0x0800a5b7
 8008fcc:	0800a5c4 	.word	0x0800a5c4
 8008fd0:	0800a5f2 	.word	0x0800a5f2

08008fd4 <_calloc_r>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	fba1 5402 	umull	r5, r4, r1, r2
 8008fda:	b934      	cbnz	r4, 8008fea <_calloc_r+0x16>
 8008fdc:	4629      	mov	r1, r5
 8008fde:	f7fd fbe9 	bl	80067b4 <_malloc_r>
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	b928      	cbnz	r0, 8008ff2 <_calloc_r+0x1e>
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	bd70      	pop	{r4, r5, r6, pc}
 8008fea:	220c      	movs	r2, #12
 8008fec:	2600      	movs	r6, #0
 8008fee:	6002      	str	r2, [r0, #0]
 8008ff0:	e7f9      	b.n	8008fe6 <_calloc_r+0x12>
 8008ff2:	462a      	mov	r2, r5
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	f7fe faac 	bl	8007552 <memset>
 8008ffa:	e7f4      	b.n	8008fe6 <_calloc_r+0x12>

08008ffc <__ascii_mbtowc>:
 8008ffc:	b082      	sub	sp, #8
 8008ffe:	b901      	cbnz	r1, 8009002 <__ascii_mbtowc+0x6>
 8009000:	a901      	add	r1, sp, #4
 8009002:	b142      	cbz	r2, 8009016 <__ascii_mbtowc+0x1a>
 8009004:	b14b      	cbz	r3, 800901a <__ascii_mbtowc+0x1e>
 8009006:	7813      	ldrb	r3, [r2, #0]
 8009008:	600b      	str	r3, [r1, #0]
 800900a:	7812      	ldrb	r2, [r2, #0]
 800900c:	1e10      	subs	r0, r2, #0
 800900e:	bf18      	it	ne
 8009010:	2001      	movne	r0, #1
 8009012:	b002      	add	sp, #8
 8009014:	4770      	bx	lr
 8009016:	4610      	mov	r0, r2
 8009018:	e7fb      	b.n	8009012 <__ascii_mbtowc+0x16>
 800901a:	f06f 0001 	mvn.w	r0, #1
 800901e:	e7f8      	b.n	8009012 <__ascii_mbtowc+0x16>

08009020 <__ascii_wctomb>:
 8009020:	4603      	mov	r3, r0
 8009022:	4608      	mov	r0, r1
 8009024:	b141      	cbz	r1, 8009038 <__ascii_wctomb+0x18>
 8009026:	2aff      	cmp	r2, #255	; 0xff
 8009028:	d904      	bls.n	8009034 <__ascii_wctomb+0x14>
 800902a:	228a      	movs	r2, #138	; 0x8a
 800902c:	f04f 30ff 	mov.w	r0, #4294967295
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	4770      	bx	lr
 8009034:	2001      	movs	r0, #1
 8009036:	700a      	strb	r2, [r1, #0]
 8009038:	4770      	bx	lr
	...

0800903c <fiprintf>:
 800903c:	b40e      	push	{r1, r2, r3}
 800903e:	b503      	push	{r0, r1, lr}
 8009040:	4601      	mov	r1, r0
 8009042:	ab03      	add	r3, sp, #12
 8009044:	4805      	ldr	r0, [pc, #20]	; (800905c <fiprintf+0x20>)
 8009046:	f853 2b04 	ldr.w	r2, [r3], #4
 800904a:	6800      	ldr	r0, [r0, #0]
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	f000 f835 	bl	80090bc <_vfiprintf_r>
 8009052:	b002      	add	sp, #8
 8009054:	f85d eb04 	ldr.w	lr, [sp], #4
 8009058:	b003      	add	sp, #12
 800905a:	4770      	bx	lr
 800905c:	2000007c 	.word	0x2000007c

08009060 <abort>:
 8009060:	2006      	movs	r0, #6
 8009062:	b508      	push	{r3, lr}
 8009064:	f000 fa02 	bl	800946c <raise>
 8009068:	2001      	movs	r0, #1
 800906a:	f7f8 fd72 	bl	8001b52 <_exit>

0800906e <__sfputc_r>:
 800906e:	6893      	ldr	r3, [r2, #8]
 8009070:	b410      	push	{r4}
 8009072:	3b01      	subs	r3, #1
 8009074:	2b00      	cmp	r3, #0
 8009076:	6093      	str	r3, [r2, #8]
 8009078:	da07      	bge.n	800908a <__sfputc_r+0x1c>
 800907a:	6994      	ldr	r4, [r2, #24]
 800907c:	42a3      	cmp	r3, r4
 800907e:	db01      	blt.n	8009084 <__sfputc_r+0x16>
 8009080:	290a      	cmp	r1, #10
 8009082:	d102      	bne.n	800908a <__sfputc_r+0x1c>
 8009084:	bc10      	pop	{r4}
 8009086:	f000 b933 	b.w	80092f0 <__swbuf_r>
 800908a:	6813      	ldr	r3, [r2, #0]
 800908c:	1c58      	adds	r0, r3, #1
 800908e:	6010      	str	r0, [r2, #0]
 8009090:	7019      	strb	r1, [r3, #0]
 8009092:	4608      	mov	r0, r1
 8009094:	bc10      	pop	{r4}
 8009096:	4770      	bx	lr

08009098 <__sfputs_r>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	4606      	mov	r6, r0
 800909c:	460f      	mov	r7, r1
 800909e:	4614      	mov	r4, r2
 80090a0:	18d5      	adds	r5, r2, r3
 80090a2:	42ac      	cmp	r4, r5
 80090a4:	d101      	bne.n	80090aa <__sfputs_r+0x12>
 80090a6:	2000      	movs	r0, #0
 80090a8:	e007      	b.n	80090ba <__sfputs_r+0x22>
 80090aa:	463a      	mov	r2, r7
 80090ac:	4630      	mov	r0, r6
 80090ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b2:	f7ff ffdc 	bl	800906e <__sfputc_r>
 80090b6:	1c43      	adds	r3, r0, #1
 80090b8:	d1f3      	bne.n	80090a2 <__sfputs_r+0xa>
 80090ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090bc <_vfiprintf_r>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	460d      	mov	r5, r1
 80090c2:	4614      	mov	r4, r2
 80090c4:	4698      	mov	r8, r3
 80090c6:	4606      	mov	r6, r0
 80090c8:	b09d      	sub	sp, #116	; 0x74
 80090ca:	b118      	cbz	r0, 80090d4 <_vfiprintf_r+0x18>
 80090cc:	6a03      	ldr	r3, [r0, #32]
 80090ce:	b90b      	cbnz	r3, 80090d4 <_vfiprintf_r+0x18>
 80090d0:	f7fe f9a6 	bl	8007420 <__sinit>
 80090d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090d6:	07d9      	lsls	r1, r3, #31
 80090d8:	d405      	bmi.n	80090e6 <_vfiprintf_r+0x2a>
 80090da:	89ab      	ldrh	r3, [r5, #12]
 80090dc:	059a      	lsls	r2, r3, #22
 80090de:	d402      	bmi.n	80090e6 <_vfiprintf_r+0x2a>
 80090e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090e2:	f7fe fae8 	bl	80076b6 <__retarget_lock_acquire_recursive>
 80090e6:	89ab      	ldrh	r3, [r5, #12]
 80090e8:	071b      	lsls	r3, r3, #28
 80090ea:	d501      	bpl.n	80090f0 <_vfiprintf_r+0x34>
 80090ec:	692b      	ldr	r3, [r5, #16]
 80090ee:	b99b      	cbnz	r3, 8009118 <_vfiprintf_r+0x5c>
 80090f0:	4629      	mov	r1, r5
 80090f2:	4630      	mov	r0, r6
 80090f4:	f000 f93a 	bl	800936c <__swsetup_r>
 80090f8:	b170      	cbz	r0, 8009118 <_vfiprintf_r+0x5c>
 80090fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090fc:	07dc      	lsls	r4, r3, #31
 80090fe:	d504      	bpl.n	800910a <_vfiprintf_r+0x4e>
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	b01d      	add	sp, #116	; 0x74
 8009106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910a:	89ab      	ldrh	r3, [r5, #12]
 800910c:	0598      	lsls	r0, r3, #22
 800910e:	d4f7      	bmi.n	8009100 <_vfiprintf_r+0x44>
 8009110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009112:	f7fe fad1 	bl	80076b8 <__retarget_lock_release_recursive>
 8009116:	e7f3      	b.n	8009100 <_vfiprintf_r+0x44>
 8009118:	2300      	movs	r3, #0
 800911a:	9309      	str	r3, [sp, #36]	; 0x24
 800911c:	2320      	movs	r3, #32
 800911e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009122:	2330      	movs	r3, #48	; 0x30
 8009124:	f04f 0901 	mov.w	r9, #1
 8009128:	f8cd 800c 	str.w	r8, [sp, #12]
 800912c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80092dc <_vfiprintf_r+0x220>
 8009130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009134:	4623      	mov	r3, r4
 8009136:	469a      	mov	sl, r3
 8009138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800913c:	b10a      	cbz	r2, 8009142 <_vfiprintf_r+0x86>
 800913e:	2a25      	cmp	r2, #37	; 0x25
 8009140:	d1f9      	bne.n	8009136 <_vfiprintf_r+0x7a>
 8009142:	ebba 0b04 	subs.w	fp, sl, r4
 8009146:	d00b      	beq.n	8009160 <_vfiprintf_r+0xa4>
 8009148:	465b      	mov	r3, fp
 800914a:	4622      	mov	r2, r4
 800914c:	4629      	mov	r1, r5
 800914e:	4630      	mov	r0, r6
 8009150:	f7ff ffa2 	bl	8009098 <__sfputs_r>
 8009154:	3001      	adds	r0, #1
 8009156:	f000 80a9 	beq.w	80092ac <_vfiprintf_r+0x1f0>
 800915a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800915c:	445a      	add	r2, fp
 800915e:	9209      	str	r2, [sp, #36]	; 0x24
 8009160:	f89a 3000 	ldrb.w	r3, [sl]
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 80a1 	beq.w	80092ac <_vfiprintf_r+0x1f0>
 800916a:	2300      	movs	r3, #0
 800916c:	f04f 32ff 	mov.w	r2, #4294967295
 8009170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009174:	f10a 0a01 	add.w	sl, sl, #1
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	9307      	str	r3, [sp, #28]
 800917c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009180:	931a      	str	r3, [sp, #104]	; 0x68
 8009182:	4654      	mov	r4, sl
 8009184:	2205      	movs	r2, #5
 8009186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800918a:	4854      	ldr	r0, [pc, #336]	; (80092dc <_vfiprintf_r+0x220>)
 800918c:	f7fe fa95 	bl	80076ba <memchr>
 8009190:	9a04      	ldr	r2, [sp, #16]
 8009192:	b9d8      	cbnz	r0, 80091cc <_vfiprintf_r+0x110>
 8009194:	06d1      	lsls	r1, r2, #27
 8009196:	bf44      	itt	mi
 8009198:	2320      	movmi	r3, #32
 800919a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800919e:	0713      	lsls	r3, r2, #28
 80091a0:	bf44      	itt	mi
 80091a2:	232b      	movmi	r3, #43	; 0x2b
 80091a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a8:	f89a 3000 	ldrb.w	r3, [sl]
 80091ac:	2b2a      	cmp	r3, #42	; 0x2a
 80091ae:	d015      	beq.n	80091dc <_vfiprintf_r+0x120>
 80091b0:	4654      	mov	r4, sl
 80091b2:	2000      	movs	r0, #0
 80091b4:	f04f 0c0a 	mov.w	ip, #10
 80091b8:	9a07      	ldr	r2, [sp, #28]
 80091ba:	4621      	mov	r1, r4
 80091bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091c0:	3b30      	subs	r3, #48	; 0x30
 80091c2:	2b09      	cmp	r3, #9
 80091c4:	d94d      	bls.n	8009262 <_vfiprintf_r+0x1a6>
 80091c6:	b1b0      	cbz	r0, 80091f6 <_vfiprintf_r+0x13a>
 80091c8:	9207      	str	r2, [sp, #28]
 80091ca:	e014      	b.n	80091f6 <_vfiprintf_r+0x13a>
 80091cc:	eba0 0308 	sub.w	r3, r0, r8
 80091d0:	fa09 f303 	lsl.w	r3, r9, r3
 80091d4:	4313      	orrs	r3, r2
 80091d6:	46a2      	mov	sl, r4
 80091d8:	9304      	str	r3, [sp, #16]
 80091da:	e7d2      	b.n	8009182 <_vfiprintf_r+0xc6>
 80091dc:	9b03      	ldr	r3, [sp, #12]
 80091de:	1d19      	adds	r1, r3, #4
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	9103      	str	r1, [sp, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	bfbb      	ittet	lt
 80091e8:	425b      	neglt	r3, r3
 80091ea:	f042 0202 	orrlt.w	r2, r2, #2
 80091ee:	9307      	strge	r3, [sp, #28]
 80091f0:	9307      	strlt	r3, [sp, #28]
 80091f2:	bfb8      	it	lt
 80091f4:	9204      	strlt	r2, [sp, #16]
 80091f6:	7823      	ldrb	r3, [r4, #0]
 80091f8:	2b2e      	cmp	r3, #46	; 0x2e
 80091fa:	d10c      	bne.n	8009216 <_vfiprintf_r+0x15a>
 80091fc:	7863      	ldrb	r3, [r4, #1]
 80091fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009200:	d134      	bne.n	800926c <_vfiprintf_r+0x1b0>
 8009202:	9b03      	ldr	r3, [sp, #12]
 8009204:	3402      	adds	r4, #2
 8009206:	1d1a      	adds	r2, r3, #4
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	9203      	str	r2, [sp, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	bfb8      	it	lt
 8009210:	f04f 33ff 	movlt.w	r3, #4294967295
 8009214:	9305      	str	r3, [sp, #20]
 8009216:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092e0 <_vfiprintf_r+0x224>
 800921a:	2203      	movs	r2, #3
 800921c:	4650      	mov	r0, sl
 800921e:	7821      	ldrb	r1, [r4, #0]
 8009220:	f7fe fa4b 	bl	80076ba <memchr>
 8009224:	b138      	cbz	r0, 8009236 <_vfiprintf_r+0x17a>
 8009226:	2240      	movs	r2, #64	; 0x40
 8009228:	9b04      	ldr	r3, [sp, #16]
 800922a:	eba0 000a 	sub.w	r0, r0, sl
 800922e:	4082      	lsls	r2, r0
 8009230:	4313      	orrs	r3, r2
 8009232:	3401      	adds	r4, #1
 8009234:	9304      	str	r3, [sp, #16]
 8009236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800923a:	2206      	movs	r2, #6
 800923c:	4829      	ldr	r0, [pc, #164]	; (80092e4 <_vfiprintf_r+0x228>)
 800923e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009242:	f7fe fa3a 	bl	80076ba <memchr>
 8009246:	2800      	cmp	r0, #0
 8009248:	d03f      	beq.n	80092ca <_vfiprintf_r+0x20e>
 800924a:	4b27      	ldr	r3, [pc, #156]	; (80092e8 <_vfiprintf_r+0x22c>)
 800924c:	bb1b      	cbnz	r3, 8009296 <_vfiprintf_r+0x1da>
 800924e:	9b03      	ldr	r3, [sp, #12]
 8009250:	3307      	adds	r3, #7
 8009252:	f023 0307 	bic.w	r3, r3, #7
 8009256:	3308      	adds	r3, #8
 8009258:	9303      	str	r3, [sp, #12]
 800925a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925c:	443b      	add	r3, r7
 800925e:	9309      	str	r3, [sp, #36]	; 0x24
 8009260:	e768      	b.n	8009134 <_vfiprintf_r+0x78>
 8009262:	460c      	mov	r4, r1
 8009264:	2001      	movs	r0, #1
 8009266:	fb0c 3202 	mla	r2, ip, r2, r3
 800926a:	e7a6      	b.n	80091ba <_vfiprintf_r+0xfe>
 800926c:	2300      	movs	r3, #0
 800926e:	f04f 0c0a 	mov.w	ip, #10
 8009272:	4619      	mov	r1, r3
 8009274:	3401      	adds	r4, #1
 8009276:	9305      	str	r3, [sp, #20]
 8009278:	4620      	mov	r0, r4
 800927a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800927e:	3a30      	subs	r2, #48	; 0x30
 8009280:	2a09      	cmp	r2, #9
 8009282:	d903      	bls.n	800928c <_vfiprintf_r+0x1d0>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0c6      	beq.n	8009216 <_vfiprintf_r+0x15a>
 8009288:	9105      	str	r1, [sp, #20]
 800928a:	e7c4      	b.n	8009216 <_vfiprintf_r+0x15a>
 800928c:	4604      	mov	r4, r0
 800928e:	2301      	movs	r3, #1
 8009290:	fb0c 2101 	mla	r1, ip, r1, r2
 8009294:	e7f0      	b.n	8009278 <_vfiprintf_r+0x1bc>
 8009296:	ab03      	add	r3, sp, #12
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	462a      	mov	r2, r5
 800929c:	4630      	mov	r0, r6
 800929e:	4b13      	ldr	r3, [pc, #76]	; (80092ec <_vfiprintf_r+0x230>)
 80092a0:	a904      	add	r1, sp, #16
 80092a2:	f7fd fc6f 	bl	8006b84 <_printf_float>
 80092a6:	4607      	mov	r7, r0
 80092a8:	1c78      	adds	r0, r7, #1
 80092aa:	d1d6      	bne.n	800925a <_vfiprintf_r+0x19e>
 80092ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092ae:	07d9      	lsls	r1, r3, #31
 80092b0:	d405      	bmi.n	80092be <_vfiprintf_r+0x202>
 80092b2:	89ab      	ldrh	r3, [r5, #12]
 80092b4:	059a      	lsls	r2, r3, #22
 80092b6:	d402      	bmi.n	80092be <_vfiprintf_r+0x202>
 80092b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ba:	f7fe f9fd 	bl	80076b8 <__retarget_lock_release_recursive>
 80092be:	89ab      	ldrh	r3, [r5, #12]
 80092c0:	065b      	lsls	r3, r3, #25
 80092c2:	f53f af1d 	bmi.w	8009100 <_vfiprintf_r+0x44>
 80092c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092c8:	e71c      	b.n	8009104 <_vfiprintf_r+0x48>
 80092ca:	ab03      	add	r3, sp, #12
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	462a      	mov	r2, r5
 80092d0:	4630      	mov	r0, r6
 80092d2:	4b06      	ldr	r3, [pc, #24]	; (80092ec <_vfiprintf_r+0x230>)
 80092d4:	a904      	add	r1, sp, #16
 80092d6:	f7fd fef5 	bl	80070c4 <_printf_i>
 80092da:	e7e4      	b.n	80092a6 <_vfiprintf_r+0x1ea>
 80092dc:	0800a59c 	.word	0x0800a59c
 80092e0:	0800a5a2 	.word	0x0800a5a2
 80092e4:	0800a5a6 	.word	0x0800a5a6
 80092e8:	08006b85 	.word	0x08006b85
 80092ec:	08009099 	.word	0x08009099

080092f0 <__swbuf_r>:
 80092f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f2:	460e      	mov	r6, r1
 80092f4:	4614      	mov	r4, r2
 80092f6:	4605      	mov	r5, r0
 80092f8:	b118      	cbz	r0, 8009302 <__swbuf_r+0x12>
 80092fa:	6a03      	ldr	r3, [r0, #32]
 80092fc:	b90b      	cbnz	r3, 8009302 <__swbuf_r+0x12>
 80092fe:	f7fe f88f 	bl	8007420 <__sinit>
 8009302:	69a3      	ldr	r3, [r4, #24]
 8009304:	60a3      	str	r3, [r4, #8]
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	071a      	lsls	r2, r3, #28
 800930a:	d525      	bpl.n	8009358 <__swbuf_r+0x68>
 800930c:	6923      	ldr	r3, [r4, #16]
 800930e:	b31b      	cbz	r3, 8009358 <__swbuf_r+0x68>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	6922      	ldr	r2, [r4, #16]
 8009314:	b2f6      	uxtb	r6, r6
 8009316:	1a98      	subs	r0, r3, r2
 8009318:	6963      	ldr	r3, [r4, #20]
 800931a:	4637      	mov	r7, r6
 800931c:	4283      	cmp	r3, r0
 800931e:	dc04      	bgt.n	800932a <__swbuf_r+0x3a>
 8009320:	4621      	mov	r1, r4
 8009322:	4628      	mov	r0, r5
 8009324:	f7ff fdf6 	bl	8008f14 <_fflush_r>
 8009328:	b9e0      	cbnz	r0, 8009364 <__swbuf_r+0x74>
 800932a:	68a3      	ldr	r3, [r4, #8]
 800932c:	3b01      	subs	r3, #1
 800932e:	60a3      	str	r3, [r4, #8]
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	6022      	str	r2, [r4, #0]
 8009336:	701e      	strb	r6, [r3, #0]
 8009338:	6962      	ldr	r2, [r4, #20]
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	429a      	cmp	r2, r3
 800933e:	d004      	beq.n	800934a <__swbuf_r+0x5a>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	07db      	lsls	r3, r3, #31
 8009344:	d506      	bpl.n	8009354 <__swbuf_r+0x64>
 8009346:	2e0a      	cmp	r6, #10
 8009348:	d104      	bne.n	8009354 <__swbuf_r+0x64>
 800934a:	4621      	mov	r1, r4
 800934c:	4628      	mov	r0, r5
 800934e:	f7ff fde1 	bl	8008f14 <_fflush_r>
 8009352:	b938      	cbnz	r0, 8009364 <__swbuf_r+0x74>
 8009354:	4638      	mov	r0, r7
 8009356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009358:	4621      	mov	r1, r4
 800935a:	4628      	mov	r0, r5
 800935c:	f000 f806 	bl	800936c <__swsetup_r>
 8009360:	2800      	cmp	r0, #0
 8009362:	d0d5      	beq.n	8009310 <__swbuf_r+0x20>
 8009364:	f04f 37ff 	mov.w	r7, #4294967295
 8009368:	e7f4      	b.n	8009354 <__swbuf_r+0x64>
	...

0800936c <__swsetup_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4b2a      	ldr	r3, [pc, #168]	; (8009418 <__swsetup_r+0xac>)
 8009370:	4605      	mov	r5, r0
 8009372:	6818      	ldr	r0, [r3, #0]
 8009374:	460c      	mov	r4, r1
 8009376:	b118      	cbz	r0, 8009380 <__swsetup_r+0x14>
 8009378:	6a03      	ldr	r3, [r0, #32]
 800937a:	b90b      	cbnz	r3, 8009380 <__swsetup_r+0x14>
 800937c:	f7fe f850 	bl	8007420 <__sinit>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009386:	0718      	lsls	r0, r3, #28
 8009388:	d422      	bmi.n	80093d0 <__swsetup_r+0x64>
 800938a:	06d9      	lsls	r1, r3, #27
 800938c:	d407      	bmi.n	800939e <__swsetup_r+0x32>
 800938e:	2309      	movs	r3, #9
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009396:	f04f 30ff 	mov.w	r0, #4294967295
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	e034      	b.n	8009408 <__swsetup_r+0x9c>
 800939e:	0758      	lsls	r0, r3, #29
 80093a0:	d512      	bpl.n	80093c8 <__swsetup_r+0x5c>
 80093a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093a4:	b141      	cbz	r1, 80093b8 <__swsetup_r+0x4c>
 80093a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093aa:	4299      	cmp	r1, r3
 80093ac:	d002      	beq.n	80093b4 <__swsetup_r+0x48>
 80093ae:	4628      	mov	r0, r5
 80093b0:	f7ff f80e 	bl	80083d0 <_free_r>
 80093b4:	2300      	movs	r3, #0
 80093b6:	6363      	str	r3, [r4, #52]	; 0x34
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093be:	81a3      	strh	r3, [r4, #12]
 80093c0:	2300      	movs	r3, #0
 80093c2:	6063      	str	r3, [r4, #4]
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	f043 0308 	orr.w	r3, r3, #8
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	6923      	ldr	r3, [r4, #16]
 80093d2:	b94b      	cbnz	r3, 80093e8 <__swsetup_r+0x7c>
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093de:	d003      	beq.n	80093e8 <__swsetup_r+0x7c>
 80093e0:	4621      	mov	r1, r4
 80093e2:	4628      	mov	r0, r5
 80093e4:	f000 f883 	bl	80094ee <__smakebuf_r>
 80093e8:	89a0      	ldrh	r0, [r4, #12]
 80093ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093ee:	f010 0301 	ands.w	r3, r0, #1
 80093f2:	d00a      	beq.n	800940a <__swsetup_r+0x9e>
 80093f4:	2300      	movs	r3, #0
 80093f6:	60a3      	str	r3, [r4, #8]
 80093f8:	6963      	ldr	r3, [r4, #20]
 80093fa:	425b      	negs	r3, r3
 80093fc:	61a3      	str	r3, [r4, #24]
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	b943      	cbnz	r3, 8009414 <__swsetup_r+0xa8>
 8009402:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009406:	d1c4      	bne.n	8009392 <__swsetup_r+0x26>
 8009408:	bd38      	pop	{r3, r4, r5, pc}
 800940a:	0781      	lsls	r1, r0, #30
 800940c:	bf58      	it	pl
 800940e:	6963      	ldrpl	r3, [r4, #20]
 8009410:	60a3      	str	r3, [r4, #8]
 8009412:	e7f4      	b.n	80093fe <__swsetup_r+0x92>
 8009414:	2000      	movs	r0, #0
 8009416:	e7f7      	b.n	8009408 <__swsetup_r+0x9c>
 8009418:	2000007c 	.word	0x2000007c

0800941c <_raise_r>:
 800941c:	291f      	cmp	r1, #31
 800941e:	b538      	push	{r3, r4, r5, lr}
 8009420:	4604      	mov	r4, r0
 8009422:	460d      	mov	r5, r1
 8009424:	d904      	bls.n	8009430 <_raise_r+0x14>
 8009426:	2316      	movs	r3, #22
 8009428:	6003      	str	r3, [r0, #0]
 800942a:	f04f 30ff 	mov.w	r0, #4294967295
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009432:	b112      	cbz	r2, 800943a <_raise_r+0x1e>
 8009434:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009438:	b94b      	cbnz	r3, 800944e <_raise_r+0x32>
 800943a:	4620      	mov	r0, r4
 800943c:	f000 f830 	bl	80094a0 <_getpid_r>
 8009440:	462a      	mov	r2, r5
 8009442:	4601      	mov	r1, r0
 8009444:	4620      	mov	r0, r4
 8009446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800944a:	f000 b817 	b.w	800947c <_kill_r>
 800944e:	2b01      	cmp	r3, #1
 8009450:	d00a      	beq.n	8009468 <_raise_r+0x4c>
 8009452:	1c59      	adds	r1, r3, #1
 8009454:	d103      	bne.n	800945e <_raise_r+0x42>
 8009456:	2316      	movs	r3, #22
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	2001      	movs	r0, #1
 800945c:	e7e7      	b.n	800942e <_raise_r+0x12>
 800945e:	2400      	movs	r4, #0
 8009460:	4628      	mov	r0, r5
 8009462:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009466:	4798      	blx	r3
 8009468:	2000      	movs	r0, #0
 800946a:	e7e0      	b.n	800942e <_raise_r+0x12>

0800946c <raise>:
 800946c:	4b02      	ldr	r3, [pc, #8]	; (8009478 <raise+0xc>)
 800946e:	4601      	mov	r1, r0
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	f7ff bfd3 	b.w	800941c <_raise_r>
 8009476:	bf00      	nop
 8009478:	2000007c 	.word	0x2000007c

0800947c <_kill_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	2300      	movs	r3, #0
 8009480:	4d06      	ldr	r5, [pc, #24]	; (800949c <_kill_r+0x20>)
 8009482:	4604      	mov	r4, r0
 8009484:	4608      	mov	r0, r1
 8009486:	4611      	mov	r1, r2
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	f7f8 fb52 	bl	8001b32 <_kill>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d102      	bne.n	8009498 <_kill_r+0x1c>
 8009492:	682b      	ldr	r3, [r5, #0]
 8009494:	b103      	cbz	r3, 8009498 <_kill_r+0x1c>
 8009496:	6023      	str	r3, [r4, #0]
 8009498:	bd38      	pop	{r3, r4, r5, pc}
 800949a:	bf00      	nop
 800949c:	20000568 	.word	0x20000568

080094a0 <_getpid_r>:
 80094a0:	f7f8 bb40 	b.w	8001b24 <_getpid>

080094a4 <__swhatbuf_r>:
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	460c      	mov	r4, r1
 80094a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ac:	4615      	mov	r5, r2
 80094ae:	2900      	cmp	r1, #0
 80094b0:	461e      	mov	r6, r3
 80094b2:	b096      	sub	sp, #88	; 0x58
 80094b4:	da0c      	bge.n	80094d0 <__swhatbuf_r+0x2c>
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	2100      	movs	r1, #0
 80094ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80094be:	bf0c      	ite	eq
 80094c0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80094c4:	2340      	movne	r3, #64	; 0x40
 80094c6:	2000      	movs	r0, #0
 80094c8:	6031      	str	r1, [r6, #0]
 80094ca:	602b      	str	r3, [r5, #0]
 80094cc:	b016      	add	sp, #88	; 0x58
 80094ce:	bd70      	pop	{r4, r5, r6, pc}
 80094d0:	466a      	mov	r2, sp
 80094d2:	f000 f849 	bl	8009568 <_fstat_r>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	dbed      	blt.n	80094b6 <__swhatbuf_r+0x12>
 80094da:	9901      	ldr	r1, [sp, #4]
 80094dc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80094e0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80094e4:	4259      	negs	r1, r3
 80094e6:	4159      	adcs	r1, r3
 80094e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ec:	e7eb      	b.n	80094c6 <__swhatbuf_r+0x22>

080094ee <__smakebuf_r>:
 80094ee:	898b      	ldrh	r3, [r1, #12]
 80094f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094f2:	079d      	lsls	r5, r3, #30
 80094f4:	4606      	mov	r6, r0
 80094f6:	460c      	mov	r4, r1
 80094f8:	d507      	bpl.n	800950a <__smakebuf_r+0x1c>
 80094fa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	6123      	str	r3, [r4, #16]
 8009502:	2301      	movs	r3, #1
 8009504:	6163      	str	r3, [r4, #20]
 8009506:	b002      	add	sp, #8
 8009508:	bd70      	pop	{r4, r5, r6, pc}
 800950a:	466a      	mov	r2, sp
 800950c:	ab01      	add	r3, sp, #4
 800950e:	f7ff ffc9 	bl	80094a4 <__swhatbuf_r>
 8009512:	9900      	ldr	r1, [sp, #0]
 8009514:	4605      	mov	r5, r0
 8009516:	4630      	mov	r0, r6
 8009518:	f7fd f94c 	bl	80067b4 <_malloc_r>
 800951c:	b948      	cbnz	r0, 8009532 <__smakebuf_r+0x44>
 800951e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009522:	059a      	lsls	r2, r3, #22
 8009524:	d4ef      	bmi.n	8009506 <__smakebuf_r+0x18>
 8009526:	f023 0303 	bic.w	r3, r3, #3
 800952a:	f043 0302 	orr.w	r3, r3, #2
 800952e:	81a3      	strh	r3, [r4, #12]
 8009530:	e7e3      	b.n	80094fa <__smakebuf_r+0xc>
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	6020      	str	r0, [r4, #0]
 8009536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800953a:	81a3      	strh	r3, [r4, #12]
 800953c:	9b00      	ldr	r3, [sp, #0]
 800953e:	6120      	str	r0, [r4, #16]
 8009540:	6163      	str	r3, [r4, #20]
 8009542:	9b01      	ldr	r3, [sp, #4]
 8009544:	b15b      	cbz	r3, 800955e <__smakebuf_r+0x70>
 8009546:	4630      	mov	r0, r6
 8009548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800954c:	f000 f81e 	bl	800958c <_isatty_r>
 8009550:	b128      	cbz	r0, 800955e <__smakebuf_r+0x70>
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	f023 0303 	bic.w	r3, r3, #3
 8009558:	f043 0301 	orr.w	r3, r3, #1
 800955c:	81a3      	strh	r3, [r4, #12]
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	431d      	orrs	r5, r3
 8009562:	81a5      	strh	r5, [r4, #12]
 8009564:	e7cf      	b.n	8009506 <__smakebuf_r+0x18>
	...

08009568 <_fstat_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	2300      	movs	r3, #0
 800956c:	4d06      	ldr	r5, [pc, #24]	; (8009588 <_fstat_r+0x20>)
 800956e:	4604      	mov	r4, r0
 8009570:	4608      	mov	r0, r1
 8009572:	4611      	mov	r1, r2
 8009574:	602b      	str	r3, [r5, #0]
 8009576:	f7f8 fb3a 	bl	8001bee <_fstat>
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	d102      	bne.n	8009584 <_fstat_r+0x1c>
 800957e:	682b      	ldr	r3, [r5, #0]
 8009580:	b103      	cbz	r3, 8009584 <_fstat_r+0x1c>
 8009582:	6023      	str	r3, [r4, #0]
 8009584:	bd38      	pop	{r3, r4, r5, pc}
 8009586:	bf00      	nop
 8009588:	20000568 	.word	0x20000568

0800958c <_isatty_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	2300      	movs	r3, #0
 8009590:	4d05      	ldr	r5, [pc, #20]	; (80095a8 <_isatty_r+0x1c>)
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	602b      	str	r3, [r5, #0]
 8009598:	f7f8 fb38 	bl	8001c0c <_isatty>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_isatty_r+0x1a>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_isatty_r+0x1a>
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	20000568 	.word	0x20000568

080095ac <sinf>:
 80095ac:	b507      	push	{r0, r1, r2, lr}
 80095ae:	4a1b      	ldr	r2, [pc, #108]	; (800961c <sinf+0x70>)
 80095b0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80095b4:	4293      	cmp	r3, r2
 80095b6:	4601      	mov	r1, r0
 80095b8:	dc06      	bgt.n	80095c8 <sinf+0x1c>
 80095ba:	2200      	movs	r2, #0
 80095bc:	2100      	movs	r1, #0
 80095be:	b003      	add	sp, #12
 80095c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095c4:	f000 b8f2 	b.w	80097ac <__kernel_sinf>
 80095c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80095cc:	db04      	blt.n	80095d8 <sinf+0x2c>
 80095ce:	f7f7 fad9 	bl	8000b84 <__aeabi_fsub>
 80095d2:	b003      	add	sp, #12
 80095d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80095d8:	4669      	mov	r1, sp
 80095da:	f000 f95d 	bl	8009898 <__ieee754_rem_pio2f>
 80095de:	f000 0003 	and.w	r0, r0, #3
 80095e2:	2801      	cmp	r0, #1
 80095e4:	d008      	beq.n	80095f8 <sinf+0x4c>
 80095e6:	2802      	cmp	r0, #2
 80095e8:	d00b      	beq.n	8009602 <sinf+0x56>
 80095ea:	b990      	cbnz	r0, 8009612 <sinf+0x66>
 80095ec:	2201      	movs	r2, #1
 80095ee:	9901      	ldr	r1, [sp, #4]
 80095f0:	9800      	ldr	r0, [sp, #0]
 80095f2:	f000 f8db 	bl	80097ac <__kernel_sinf>
 80095f6:	e7ec      	b.n	80095d2 <sinf+0x26>
 80095f8:	9901      	ldr	r1, [sp, #4]
 80095fa:	9800      	ldr	r0, [sp, #0]
 80095fc:	f000 f856 	bl	80096ac <__kernel_cosf>
 8009600:	e7e7      	b.n	80095d2 <sinf+0x26>
 8009602:	2201      	movs	r2, #1
 8009604:	9901      	ldr	r1, [sp, #4]
 8009606:	9800      	ldr	r0, [sp, #0]
 8009608:	f000 f8d0 	bl	80097ac <__kernel_sinf>
 800960c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009610:	e7df      	b.n	80095d2 <sinf+0x26>
 8009612:	9901      	ldr	r1, [sp, #4]
 8009614:	9800      	ldr	r0, [sp, #0]
 8009616:	f000 f849 	bl	80096ac <__kernel_cosf>
 800961a:	e7f7      	b.n	800960c <sinf+0x60>
 800961c:	3f490fd8 	.word	0x3f490fd8

08009620 <round>:
 8009620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009622:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009626:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 800962a:	2a13      	cmp	r2, #19
 800962c:	460b      	mov	r3, r1
 800962e:	4605      	mov	r5, r0
 8009630:	460c      	mov	r4, r1
 8009632:	dc18      	bgt.n	8009666 <round+0x46>
 8009634:	2a00      	cmp	r2, #0
 8009636:	da09      	bge.n	800964c <round+0x2c>
 8009638:	3201      	adds	r2, #1
 800963a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800963e:	d103      	bne.n	8009648 <round+0x28>
 8009640:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009644:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009648:	2200      	movs	r2, #0
 800964a:	e029      	b.n	80096a0 <round+0x80>
 800964c:	4816      	ldr	r0, [pc, #88]	; (80096a8 <round+0x88>)
 800964e:	4110      	asrs	r0, r2
 8009650:	4001      	ands	r1, r0
 8009652:	4329      	orrs	r1, r5
 8009654:	d011      	beq.n	800967a <round+0x5a>
 8009656:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800965a:	fa41 f202 	asr.w	r2, r1, r2
 800965e:	4413      	add	r3, r2
 8009660:	ea23 0300 	bic.w	r3, r3, r0
 8009664:	e7f0      	b.n	8009648 <round+0x28>
 8009666:	2a33      	cmp	r2, #51	; 0x33
 8009668:	dd0a      	ble.n	8009680 <round+0x60>
 800966a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800966e:	d104      	bne.n	800967a <round+0x5a>
 8009670:	4602      	mov	r2, r0
 8009672:	f7f6 fd85 	bl	8000180 <__adddf3>
 8009676:	4605      	mov	r5, r0
 8009678:	460c      	mov	r4, r1
 800967a:	4628      	mov	r0, r5
 800967c:	4621      	mov	r1, r4
 800967e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009688:	40f8      	lsrs	r0, r7
 800968a:	4228      	tst	r0, r5
 800968c:	d0f5      	beq.n	800967a <round+0x5a>
 800968e:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8009692:	2201      	movs	r2, #1
 8009694:	408a      	lsls	r2, r1
 8009696:	1952      	adds	r2, r2, r5
 8009698:	bf28      	it	cs
 800969a:	3301      	addcs	r3, #1
 800969c:	ea22 0200 	bic.w	r2, r2, r0
 80096a0:	4619      	mov	r1, r3
 80096a2:	4610      	mov	r0, r2
 80096a4:	e7e7      	b.n	8009676 <round+0x56>
 80096a6:	bf00      	nop
 80096a8:	000fffff 	.word	0x000fffff

080096ac <__kernel_cosf>:
 80096ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80096b4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80096b8:	4606      	mov	r6, r0
 80096ba:	4688      	mov	r8, r1
 80096bc:	da03      	bge.n	80096c6 <__kernel_cosf+0x1a>
 80096be:	f7f7 fd31 	bl	8001124 <__aeabi_f2iz>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d05c      	beq.n	8009780 <__kernel_cosf+0xd4>
 80096c6:	4631      	mov	r1, r6
 80096c8:	4630      	mov	r0, r6
 80096ca:	f7f7 fb65 	bl	8000d98 <__aeabi_fmul>
 80096ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80096d2:	4605      	mov	r5, r0
 80096d4:	f7f7 fb60 	bl	8000d98 <__aeabi_fmul>
 80096d8:	492b      	ldr	r1, [pc, #172]	; (8009788 <__kernel_cosf+0xdc>)
 80096da:	4607      	mov	r7, r0
 80096dc:	4628      	mov	r0, r5
 80096de:	f7f7 fb5b 	bl	8000d98 <__aeabi_fmul>
 80096e2:	492a      	ldr	r1, [pc, #168]	; (800978c <__kernel_cosf+0xe0>)
 80096e4:	f7f7 fa50 	bl	8000b88 <__addsf3>
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7f7 fb55 	bl	8000d98 <__aeabi_fmul>
 80096ee:	4928      	ldr	r1, [pc, #160]	; (8009790 <__kernel_cosf+0xe4>)
 80096f0:	f7f7 fa48 	bl	8000b84 <__aeabi_fsub>
 80096f4:	4629      	mov	r1, r5
 80096f6:	f7f7 fb4f 	bl	8000d98 <__aeabi_fmul>
 80096fa:	4926      	ldr	r1, [pc, #152]	; (8009794 <__kernel_cosf+0xe8>)
 80096fc:	f7f7 fa44 	bl	8000b88 <__addsf3>
 8009700:	4629      	mov	r1, r5
 8009702:	f7f7 fb49 	bl	8000d98 <__aeabi_fmul>
 8009706:	4924      	ldr	r1, [pc, #144]	; (8009798 <__kernel_cosf+0xec>)
 8009708:	f7f7 fa3c 	bl	8000b84 <__aeabi_fsub>
 800970c:	4629      	mov	r1, r5
 800970e:	f7f7 fb43 	bl	8000d98 <__aeabi_fmul>
 8009712:	4922      	ldr	r1, [pc, #136]	; (800979c <__kernel_cosf+0xf0>)
 8009714:	f7f7 fa38 	bl	8000b88 <__addsf3>
 8009718:	4629      	mov	r1, r5
 800971a:	f7f7 fb3d 	bl	8000d98 <__aeabi_fmul>
 800971e:	4629      	mov	r1, r5
 8009720:	f7f7 fb3a 	bl	8000d98 <__aeabi_fmul>
 8009724:	4641      	mov	r1, r8
 8009726:	4605      	mov	r5, r0
 8009728:	4630      	mov	r0, r6
 800972a:	f7f7 fb35 	bl	8000d98 <__aeabi_fmul>
 800972e:	4601      	mov	r1, r0
 8009730:	4628      	mov	r0, r5
 8009732:	f7f7 fa27 	bl	8000b84 <__aeabi_fsub>
 8009736:	4b1a      	ldr	r3, [pc, #104]	; (80097a0 <__kernel_cosf+0xf4>)
 8009738:	4605      	mov	r5, r0
 800973a:	429c      	cmp	r4, r3
 800973c:	dc0a      	bgt.n	8009754 <__kernel_cosf+0xa8>
 800973e:	4601      	mov	r1, r0
 8009740:	4638      	mov	r0, r7
 8009742:	f7f7 fa1f 	bl	8000b84 <__aeabi_fsub>
 8009746:	4601      	mov	r1, r0
 8009748:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800974c:	f7f7 fa1a 	bl	8000b84 <__aeabi_fsub>
 8009750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009754:	4b13      	ldr	r3, [pc, #76]	; (80097a4 <__kernel_cosf+0xf8>)
 8009756:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800975a:	429c      	cmp	r4, r3
 800975c:	bfcc      	ite	gt
 800975e:	4c12      	ldrgt	r4, [pc, #72]	; (80097a8 <__kernel_cosf+0xfc>)
 8009760:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8009764:	4621      	mov	r1, r4
 8009766:	f7f7 fa0d 	bl	8000b84 <__aeabi_fsub>
 800976a:	4621      	mov	r1, r4
 800976c:	4606      	mov	r6, r0
 800976e:	4638      	mov	r0, r7
 8009770:	f7f7 fa08 	bl	8000b84 <__aeabi_fsub>
 8009774:	4629      	mov	r1, r5
 8009776:	f7f7 fa05 	bl	8000b84 <__aeabi_fsub>
 800977a:	4601      	mov	r1, r0
 800977c:	4630      	mov	r0, r6
 800977e:	e7e5      	b.n	800974c <__kernel_cosf+0xa0>
 8009780:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009784:	e7e4      	b.n	8009750 <__kernel_cosf+0xa4>
 8009786:	bf00      	nop
 8009788:	ad47d74e 	.word	0xad47d74e
 800978c:	310f74f6 	.word	0x310f74f6
 8009790:	3493f27c 	.word	0x3493f27c
 8009794:	37d00d01 	.word	0x37d00d01
 8009798:	3ab60b61 	.word	0x3ab60b61
 800979c:	3d2aaaab 	.word	0x3d2aaaab
 80097a0:	3e999999 	.word	0x3e999999
 80097a4:	3f480000 	.word	0x3f480000
 80097a8:	3e900000 	.word	0x3e900000

080097ac <__kernel_sinf>:
 80097ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80097b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80097b8:	4604      	mov	r4, r0
 80097ba:	460f      	mov	r7, r1
 80097bc:	4691      	mov	r9, r2
 80097be:	da03      	bge.n	80097c8 <__kernel_sinf+0x1c>
 80097c0:	f7f7 fcb0 	bl	8001124 <__aeabi_f2iz>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d035      	beq.n	8009834 <__kernel_sinf+0x88>
 80097c8:	4621      	mov	r1, r4
 80097ca:	4620      	mov	r0, r4
 80097cc:	f7f7 fae4 	bl	8000d98 <__aeabi_fmul>
 80097d0:	4605      	mov	r5, r0
 80097d2:	4601      	mov	r1, r0
 80097d4:	4620      	mov	r0, r4
 80097d6:	f7f7 fadf 	bl	8000d98 <__aeabi_fmul>
 80097da:	4929      	ldr	r1, [pc, #164]	; (8009880 <__kernel_sinf+0xd4>)
 80097dc:	4606      	mov	r6, r0
 80097de:	4628      	mov	r0, r5
 80097e0:	f7f7 fada 	bl	8000d98 <__aeabi_fmul>
 80097e4:	4927      	ldr	r1, [pc, #156]	; (8009884 <__kernel_sinf+0xd8>)
 80097e6:	f7f7 f9cd 	bl	8000b84 <__aeabi_fsub>
 80097ea:	4629      	mov	r1, r5
 80097ec:	f7f7 fad4 	bl	8000d98 <__aeabi_fmul>
 80097f0:	4925      	ldr	r1, [pc, #148]	; (8009888 <__kernel_sinf+0xdc>)
 80097f2:	f7f7 f9c9 	bl	8000b88 <__addsf3>
 80097f6:	4629      	mov	r1, r5
 80097f8:	f7f7 face 	bl	8000d98 <__aeabi_fmul>
 80097fc:	4923      	ldr	r1, [pc, #140]	; (800988c <__kernel_sinf+0xe0>)
 80097fe:	f7f7 f9c1 	bl	8000b84 <__aeabi_fsub>
 8009802:	4629      	mov	r1, r5
 8009804:	f7f7 fac8 	bl	8000d98 <__aeabi_fmul>
 8009808:	4921      	ldr	r1, [pc, #132]	; (8009890 <__kernel_sinf+0xe4>)
 800980a:	f7f7 f9bd 	bl	8000b88 <__addsf3>
 800980e:	4680      	mov	r8, r0
 8009810:	f1b9 0f00 	cmp.w	r9, #0
 8009814:	d111      	bne.n	800983a <__kernel_sinf+0x8e>
 8009816:	4601      	mov	r1, r0
 8009818:	4628      	mov	r0, r5
 800981a:	f7f7 fabd 	bl	8000d98 <__aeabi_fmul>
 800981e:	491d      	ldr	r1, [pc, #116]	; (8009894 <__kernel_sinf+0xe8>)
 8009820:	f7f7 f9b0 	bl	8000b84 <__aeabi_fsub>
 8009824:	4631      	mov	r1, r6
 8009826:	f7f7 fab7 	bl	8000d98 <__aeabi_fmul>
 800982a:	4601      	mov	r1, r0
 800982c:	4620      	mov	r0, r4
 800982e:	f7f7 f9ab 	bl	8000b88 <__addsf3>
 8009832:	4604      	mov	r4, r0
 8009834:	4620      	mov	r0, r4
 8009836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800983a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800983e:	4638      	mov	r0, r7
 8009840:	f7f7 faaa 	bl	8000d98 <__aeabi_fmul>
 8009844:	4641      	mov	r1, r8
 8009846:	4681      	mov	r9, r0
 8009848:	4630      	mov	r0, r6
 800984a:	f7f7 faa5 	bl	8000d98 <__aeabi_fmul>
 800984e:	4601      	mov	r1, r0
 8009850:	4648      	mov	r0, r9
 8009852:	f7f7 f997 	bl	8000b84 <__aeabi_fsub>
 8009856:	4629      	mov	r1, r5
 8009858:	f7f7 fa9e 	bl	8000d98 <__aeabi_fmul>
 800985c:	4639      	mov	r1, r7
 800985e:	f7f7 f991 	bl	8000b84 <__aeabi_fsub>
 8009862:	490c      	ldr	r1, [pc, #48]	; (8009894 <__kernel_sinf+0xe8>)
 8009864:	4605      	mov	r5, r0
 8009866:	4630      	mov	r0, r6
 8009868:	f7f7 fa96 	bl	8000d98 <__aeabi_fmul>
 800986c:	4601      	mov	r1, r0
 800986e:	4628      	mov	r0, r5
 8009870:	f7f7 f98a 	bl	8000b88 <__addsf3>
 8009874:	4601      	mov	r1, r0
 8009876:	4620      	mov	r0, r4
 8009878:	f7f7 f984 	bl	8000b84 <__aeabi_fsub>
 800987c:	e7d9      	b.n	8009832 <__kernel_sinf+0x86>
 800987e:	bf00      	nop
 8009880:	2f2ec9d3 	.word	0x2f2ec9d3
 8009884:	32d72f34 	.word	0x32d72f34
 8009888:	3638ef1b 	.word	0x3638ef1b
 800988c:	39500d01 	.word	0x39500d01
 8009890:	3c088889 	.word	0x3c088889
 8009894:	3e2aaaab 	.word	0x3e2aaaab

08009898 <__ieee754_rem_pio2f>:
 8009898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	4aa0      	ldr	r2, [pc, #640]	; (8009b20 <__ieee754_rem_pio2f+0x288>)
 800989e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80098a2:	4296      	cmp	r6, r2
 80098a4:	460c      	mov	r4, r1
 80098a6:	4682      	mov	sl, r0
 80098a8:	b087      	sub	sp, #28
 80098aa:	dc04      	bgt.n	80098b6 <__ieee754_rem_pio2f+0x1e>
 80098ac:	2300      	movs	r3, #0
 80098ae:	6008      	str	r0, [r1, #0]
 80098b0:	604b      	str	r3, [r1, #4]
 80098b2:	2500      	movs	r5, #0
 80098b4:	e01a      	b.n	80098ec <__ieee754_rem_pio2f+0x54>
 80098b6:	4a9b      	ldr	r2, [pc, #620]	; (8009b24 <__ieee754_rem_pio2f+0x28c>)
 80098b8:	4296      	cmp	r6, r2
 80098ba:	dc4b      	bgt.n	8009954 <__ieee754_rem_pio2f+0xbc>
 80098bc:	2800      	cmp	r0, #0
 80098be:	499a      	ldr	r1, [pc, #616]	; (8009b28 <__ieee754_rem_pio2f+0x290>)
 80098c0:	4f9a      	ldr	r7, [pc, #616]	; (8009b2c <__ieee754_rem_pio2f+0x294>)
 80098c2:	f026 060f 	bic.w	r6, r6, #15
 80098c6:	dd23      	ble.n	8009910 <__ieee754_rem_pio2f+0x78>
 80098c8:	f7f7 f95c 	bl	8000b84 <__aeabi_fsub>
 80098cc:	42be      	cmp	r6, r7
 80098ce:	4605      	mov	r5, r0
 80098d0:	d010      	beq.n	80098f4 <__ieee754_rem_pio2f+0x5c>
 80098d2:	4997      	ldr	r1, [pc, #604]	; (8009b30 <__ieee754_rem_pio2f+0x298>)
 80098d4:	f7f7 f956 	bl	8000b84 <__aeabi_fsub>
 80098d8:	4601      	mov	r1, r0
 80098da:	6020      	str	r0, [r4, #0]
 80098dc:	4628      	mov	r0, r5
 80098de:	f7f7 f951 	bl	8000b84 <__aeabi_fsub>
 80098e2:	4993      	ldr	r1, [pc, #588]	; (8009b30 <__ieee754_rem_pio2f+0x298>)
 80098e4:	f7f7 f94e 	bl	8000b84 <__aeabi_fsub>
 80098e8:	2501      	movs	r5, #1
 80098ea:	6060      	str	r0, [r4, #4]
 80098ec:	4628      	mov	r0, r5
 80098ee:	b007      	add	sp, #28
 80098f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f4:	498f      	ldr	r1, [pc, #572]	; (8009b34 <__ieee754_rem_pio2f+0x29c>)
 80098f6:	f7f7 f945 	bl	8000b84 <__aeabi_fsub>
 80098fa:	498f      	ldr	r1, [pc, #572]	; (8009b38 <__ieee754_rem_pio2f+0x2a0>)
 80098fc:	4605      	mov	r5, r0
 80098fe:	f7f7 f941 	bl	8000b84 <__aeabi_fsub>
 8009902:	4601      	mov	r1, r0
 8009904:	6020      	str	r0, [r4, #0]
 8009906:	4628      	mov	r0, r5
 8009908:	f7f7 f93c 	bl	8000b84 <__aeabi_fsub>
 800990c:	498a      	ldr	r1, [pc, #552]	; (8009b38 <__ieee754_rem_pio2f+0x2a0>)
 800990e:	e7e9      	b.n	80098e4 <__ieee754_rem_pio2f+0x4c>
 8009910:	f7f7 f93a 	bl	8000b88 <__addsf3>
 8009914:	42be      	cmp	r6, r7
 8009916:	4605      	mov	r5, r0
 8009918:	d00e      	beq.n	8009938 <__ieee754_rem_pio2f+0xa0>
 800991a:	4985      	ldr	r1, [pc, #532]	; (8009b30 <__ieee754_rem_pio2f+0x298>)
 800991c:	f7f7 f934 	bl	8000b88 <__addsf3>
 8009920:	4601      	mov	r1, r0
 8009922:	6020      	str	r0, [r4, #0]
 8009924:	4628      	mov	r0, r5
 8009926:	f7f7 f92d 	bl	8000b84 <__aeabi_fsub>
 800992a:	4981      	ldr	r1, [pc, #516]	; (8009b30 <__ieee754_rem_pio2f+0x298>)
 800992c:	f7f7 f92c 	bl	8000b88 <__addsf3>
 8009930:	f04f 35ff 	mov.w	r5, #4294967295
 8009934:	6060      	str	r0, [r4, #4]
 8009936:	e7d9      	b.n	80098ec <__ieee754_rem_pio2f+0x54>
 8009938:	497e      	ldr	r1, [pc, #504]	; (8009b34 <__ieee754_rem_pio2f+0x29c>)
 800993a:	f7f7 f925 	bl	8000b88 <__addsf3>
 800993e:	497e      	ldr	r1, [pc, #504]	; (8009b38 <__ieee754_rem_pio2f+0x2a0>)
 8009940:	4605      	mov	r5, r0
 8009942:	f7f7 f921 	bl	8000b88 <__addsf3>
 8009946:	4601      	mov	r1, r0
 8009948:	6020      	str	r0, [r4, #0]
 800994a:	4628      	mov	r0, r5
 800994c:	f7f7 f91a 	bl	8000b84 <__aeabi_fsub>
 8009950:	4979      	ldr	r1, [pc, #484]	; (8009b38 <__ieee754_rem_pio2f+0x2a0>)
 8009952:	e7eb      	b.n	800992c <__ieee754_rem_pio2f+0x94>
 8009954:	4a79      	ldr	r2, [pc, #484]	; (8009b3c <__ieee754_rem_pio2f+0x2a4>)
 8009956:	4296      	cmp	r6, r2
 8009958:	f300 8091 	bgt.w	8009a7e <__ieee754_rem_pio2f+0x1e6>
 800995c:	f000 f8fa 	bl	8009b54 <fabsf>
 8009960:	4977      	ldr	r1, [pc, #476]	; (8009b40 <__ieee754_rem_pio2f+0x2a8>)
 8009962:	4607      	mov	r7, r0
 8009964:	f7f7 fa18 	bl	8000d98 <__aeabi_fmul>
 8009968:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800996c:	f7f7 f90c 	bl	8000b88 <__addsf3>
 8009970:	f7f7 fbd8 	bl	8001124 <__aeabi_f2iz>
 8009974:	4605      	mov	r5, r0
 8009976:	f7f7 f9bb 	bl	8000cf0 <__aeabi_i2f>
 800997a:	496b      	ldr	r1, [pc, #428]	; (8009b28 <__ieee754_rem_pio2f+0x290>)
 800997c:	4681      	mov	r9, r0
 800997e:	f7f7 fa0b 	bl	8000d98 <__aeabi_fmul>
 8009982:	4601      	mov	r1, r0
 8009984:	4638      	mov	r0, r7
 8009986:	f7f7 f8fd 	bl	8000b84 <__aeabi_fsub>
 800998a:	4969      	ldr	r1, [pc, #420]	; (8009b30 <__ieee754_rem_pio2f+0x298>)
 800998c:	4680      	mov	r8, r0
 800998e:	4648      	mov	r0, r9
 8009990:	f7f7 fa02 	bl	8000d98 <__aeabi_fmul>
 8009994:	2d1f      	cmp	r5, #31
 8009996:	4607      	mov	r7, r0
 8009998:	dc0c      	bgt.n	80099b4 <__ieee754_rem_pio2f+0x11c>
 800999a:	4a6a      	ldr	r2, [pc, #424]	; (8009b44 <__ieee754_rem_pio2f+0x2ac>)
 800999c:	1e69      	subs	r1, r5, #1
 800999e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80099a2:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d004      	beq.n	80099b4 <__ieee754_rem_pio2f+0x11c>
 80099aa:	4639      	mov	r1, r7
 80099ac:	4640      	mov	r0, r8
 80099ae:	f7f7 f8e9 	bl	8000b84 <__aeabi_fsub>
 80099b2:	e00b      	b.n	80099cc <__ieee754_rem_pio2f+0x134>
 80099b4:	4639      	mov	r1, r7
 80099b6:	4640      	mov	r0, r8
 80099b8:	f7f7 f8e4 	bl	8000b84 <__aeabi_fsub>
 80099bc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80099c0:	ebc3 53d6 	rsb	r3, r3, r6, lsr #23
 80099c4:	2b08      	cmp	r3, #8
 80099c6:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80099ca:	dc01      	bgt.n	80099d0 <__ieee754_rem_pio2f+0x138>
 80099cc:	6020      	str	r0, [r4, #0]
 80099ce:	e026      	b.n	8009a1e <__ieee754_rem_pio2f+0x186>
 80099d0:	4958      	ldr	r1, [pc, #352]	; (8009b34 <__ieee754_rem_pio2f+0x29c>)
 80099d2:	4648      	mov	r0, r9
 80099d4:	f7f7 f9e0 	bl	8000d98 <__aeabi_fmul>
 80099d8:	4607      	mov	r7, r0
 80099da:	4601      	mov	r1, r0
 80099dc:	4640      	mov	r0, r8
 80099de:	f7f7 f8d1 	bl	8000b84 <__aeabi_fsub>
 80099e2:	4601      	mov	r1, r0
 80099e4:	4606      	mov	r6, r0
 80099e6:	4640      	mov	r0, r8
 80099e8:	f7f7 f8cc 	bl	8000b84 <__aeabi_fsub>
 80099ec:	4639      	mov	r1, r7
 80099ee:	f7f7 f8c9 	bl	8000b84 <__aeabi_fsub>
 80099f2:	4607      	mov	r7, r0
 80099f4:	4950      	ldr	r1, [pc, #320]	; (8009b38 <__ieee754_rem_pio2f+0x2a0>)
 80099f6:	4648      	mov	r0, r9
 80099f8:	f7f7 f9ce 	bl	8000d98 <__aeabi_fmul>
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7f7 f8c1 	bl	8000b84 <__aeabi_fsub>
 8009a02:	4601      	mov	r1, r0
 8009a04:	4607      	mov	r7, r0
 8009a06:	4630      	mov	r0, r6
 8009a08:	f7f7 f8bc 	bl	8000b84 <__aeabi_fsub>
 8009a0c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009a10:	ebab 0b03 	sub.w	fp, fp, r3
 8009a14:	f1bb 0f19 	cmp.w	fp, #25
 8009a18:	dc16      	bgt.n	8009a48 <__ieee754_rem_pio2f+0x1b0>
 8009a1a:	46b0      	mov	r8, r6
 8009a1c:	6020      	str	r0, [r4, #0]
 8009a1e:	6826      	ldr	r6, [r4, #0]
 8009a20:	4640      	mov	r0, r8
 8009a22:	4631      	mov	r1, r6
 8009a24:	f7f7 f8ae 	bl	8000b84 <__aeabi_fsub>
 8009a28:	4639      	mov	r1, r7
 8009a2a:	f7f7 f8ab 	bl	8000b84 <__aeabi_fsub>
 8009a2e:	f1ba 0f00 	cmp.w	sl, #0
 8009a32:	6060      	str	r0, [r4, #4]
 8009a34:	f6bf af5a 	bge.w	80098ec <__ieee754_rem_pio2f+0x54>
 8009a38:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009a3c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009a40:	6026      	str	r6, [r4, #0]
 8009a42:	6060      	str	r0, [r4, #4]
 8009a44:	426d      	negs	r5, r5
 8009a46:	e751      	b.n	80098ec <__ieee754_rem_pio2f+0x54>
 8009a48:	493f      	ldr	r1, [pc, #252]	; (8009b48 <__ieee754_rem_pio2f+0x2b0>)
 8009a4a:	4648      	mov	r0, r9
 8009a4c:	f7f7 f9a4 	bl	8000d98 <__aeabi_fmul>
 8009a50:	4607      	mov	r7, r0
 8009a52:	4601      	mov	r1, r0
 8009a54:	4630      	mov	r0, r6
 8009a56:	f7f7 f895 	bl	8000b84 <__aeabi_fsub>
 8009a5a:	4601      	mov	r1, r0
 8009a5c:	4680      	mov	r8, r0
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f7f7 f890 	bl	8000b84 <__aeabi_fsub>
 8009a64:	4639      	mov	r1, r7
 8009a66:	f7f7 f88d 	bl	8000b84 <__aeabi_fsub>
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	4937      	ldr	r1, [pc, #220]	; (8009b4c <__ieee754_rem_pio2f+0x2b4>)
 8009a6e:	4648      	mov	r0, r9
 8009a70:	f7f7 f992 	bl	8000d98 <__aeabi_fmul>
 8009a74:	4631      	mov	r1, r6
 8009a76:	f7f7 f885 	bl	8000b84 <__aeabi_fsub>
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	e795      	b.n	80099aa <__ieee754_rem_pio2f+0x112>
 8009a7e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009a82:	db05      	blt.n	8009a90 <__ieee754_rem_pio2f+0x1f8>
 8009a84:	4601      	mov	r1, r0
 8009a86:	f7f7 f87d 	bl	8000b84 <__aeabi_fsub>
 8009a8a:	6060      	str	r0, [r4, #4]
 8009a8c:	6020      	str	r0, [r4, #0]
 8009a8e:	e710      	b.n	80098b2 <__ieee754_rem_pio2f+0x1a>
 8009a90:	15f7      	asrs	r7, r6, #23
 8009a92:	3f86      	subs	r7, #134	; 0x86
 8009a94:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f7f7 fb43 	bl	8001124 <__aeabi_f2iz>
 8009a9e:	f7f7 f927 	bl	8000cf0 <__aeabi_i2f>
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	9003      	str	r0, [sp, #12]
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f7f7 f86c 	bl	8000b84 <__aeabi_fsub>
 8009aac:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009ab0:	f7f7 f972 	bl	8000d98 <__aeabi_fmul>
 8009ab4:	4606      	mov	r6, r0
 8009ab6:	f7f7 fb35 	bl	8001124 <__aeabi_f2iz>
 8009aba:	f7f7 f919 	bl	8000cf0 <__aeabi_i2f>
 8009abe:	4601      	mov	r1, r0
 8009ac0:	9004      	str	r0, [sp, #16]
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f7f7 f85d 	bl	8000b84 <__aeabi_fsub>
 8009aca:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009ace:	f7f7 f963 	bl	8000d98 <__aeabi_fmul>
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	9005      	str	r0, [sp, #20]
 8009ad6:	f7f7 faf3 	bl	80010c0 <__aeabi_fcmpeq>
 8009ada:	b1f0      	cbz	r0, 8009b1a <__ieee754_rem_pio2f+0x282>
 8009adc:	2100      	movs	r1, #0
 8009ade:	4628      	mov	r0, r5
 8009ae0:	f7f7 faee 	bl	80010c0 <__aeabi_fcmpeq>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	bf14      	ite	ne
 8009ae8:	2301      	movne	r3, #1
 8009aea:	2302      	moveq	r3, #2
 8009aec:	4a18      	ldr	r2, [pc, #96]	; (8009b50 <__ieee754_rem_pio2f+0x2b8>)
 8009aee:	4621      	mov	r1, r4
 8009af0:	9201      	str	r2, [sp, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	a803      	add	r0, sp, #12
 8009af6:	9200      	str	r2, [sp, #0]
 8009af8:	463a      	mov	r2, r7
 8009afa:	f000 f82f 	bl	8009b5c <__kernel_rem_pio2f>
 8009afe:	f1ba 0f00 	cmp.w	sl, #0
 8009b02:	4605      	mov	r5, r0
 8009b04:	f6bf aef2 	bge.w	80098ec <__ieee754_rem_pio2f+0x54>
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	6863      	ldr	r3, [r4, #4]
 8009b12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009b16:	6063      	str	r3, [r4, #4]
 8009b18:	e794      	b.n	8009a44 <__ieee754_rem_pio2f+0x1ac>
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e7e6      	b.n	8009aec <__ieee754_rem_pio2f+0x254>
 8009b1e:	bf00      	nop
 8009b20:	3f490fd8 	.word	0x3f490fd8
 8009b24:	4016cbe3 	.word	0x4016cbe3
 8009b28:	3fc90f80 	.word	0x3fc90f80
 8009b2c:	3fc90fd0 	.word	0x3fc90fd0
 8009b30:	37354443 	.word	0x37354443
 8009b34:	37354400 	.word	0x37354400
 8009b38:	2e85a308 	.word	0x2e85a308
 8009b3c:	43490f80 	.word	0x43490f80
 8009b40:	3f22f984 	.word	0x3f22f984
 8009b44:	0800a5f4 	.word	0x0800a5f4
 8009b48:	2e85a300 	.word	0x2e85a300
 8009b4c:	248d3132 	.word	0x248d3132
 8009b50:	0800a674 	.word	0x0800a674

08009b54 <fabsf>:
 8009b54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009b58:	4770      	bx	lr
	...

08009b5c <__kernel_rem_pio2f>:
 8009b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b60:	b0db      	sub	sp, #364	; 0x16c
 8009b62:	9202      	str	r2, [sp, #8]
 8009b64:	9304      	str	r3, [sp, #16]
 8009b66:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009b68:	4bbb      	ldr	r3, [pc, #748]	; (8009e58 <__kernel_rem_pio2f+0x2fc>)
 8009b6a:	9005      	str	r0, [sp, #20]
 8009b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b70:	9100      	str	r1, [sp, #0]
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	9b04      	ldr	r3, [sp, #16]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	9303      	str	r3, [sp, #12]
 8009b7a:	9b02      	ldr	r3, [sp, #8]
 8009b7c:	1d1a      	adds	r2, r3, #4
 8009b7e:	f2c0 809b 	blt.w	8009cb8 <__kernel_rem_pio2f+0x15c>
 8009b82:	1edc      	subs	r4, r3, #3
 8009b84:	bf48      	it	mi
 8009b86:	1d1c      	addmi	r4, r3, #4
 8009b88:	10e4      	asrs	r4, r4, #3
 8009b8a:	2500      	movs	r5, #0
 8009b8c:	f04f 0b00 	mov.w	fp, #0
 8009b90:	1c67      	adds	r7, r4, #1
 8009b92:	00fb      	lsls	r3, r7, #3
 8009b94:	9306      	str	r3, [sp, #24]
 8009b96:	9b02      	ldr	r3, [sp, #8]
 8009b98:	9a03      	ldr	r2, [sp, #12]
 8009b9a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8009b9e:	9b01      	ldr	r3, [sp, #4]
 8009ba0:	eba4 0802 	sub.w	r8, r4, r2
 8009ba4:	eb03 0902 	add.w	r9, r3, r2
 8009ba8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009baa:	ae1e      	add	r6, sp, #120	; 0x78
 8009bac:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8009bb0:	454d      	cmp	r5, r9
 8009bb2:	f340 8083 	ble.w	8009cbc <__kernel_rem_pio2f+0x160>
 8009bb6:	9a04      	ldr	r2, [sp, #16]
 8009bb8:	ab1e      	add	r3, sp, #120	; 0x78
 8009bba:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8009bbe:	f04f 0900 	mov.w	r9, #0
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8009bc8:	9a01      	ldr	r2, [sp, #4]
 8009bca:	4591      	cmp	r9, r2
 8009bcc:	f340 809e 	ble.w	8009d0c <__kernel_rem_pio2f+0x1b0>
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	aa0a      	add	r2, sp, #40	; 0x28
 8009bd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bd8:	9308      	str	r3, [sp, #32]
 8009bda:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009bdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009be0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009be4:	9307      	str	r3, [sp, #28]
 8009be6:	ac0a      	add	r4, sp, #40	; 0x28
 8009be8:	4626      	mov	r6, r4
 8009bea:	46c3      	mov	fp, r8
 8009bec:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8009bf0:	ab5a      	add	r3, sp, #360	; 0x168
 8009bf2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8009bf6:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8009bfa:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8009bfe:	f1bb 0f00 	cmp.w	fp, #0
 8009c02:	f300 8088 	bgt.w	8009d16 <__kernel_rem_pio2f+0x1ba>
 8009c06:	4639      	mov	r1, r7
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f000 fa5b 	bl	800a0c4 <scalbnf>
 8009c0e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8009c12:	4605      	mov	r5, r0
 8009c14:	f7f7 f8c0 	bl	8000d98 <__aeabi_fmul>
 8009c18:	f000 faa0 	bl	800a15c <floorf>
 8009c1c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8009c20:	f7f7 f8ba 	bl	8000d98 <__aeabi_fmul>
 8009c24:	4601      	mov	r1, r0
 8009c26:	4628      	mov	r0, r5
 8009c28:	f7f6 ffac 	bl	8000b84 <__aeabi_fsub>
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	f7f7 fa79 	bl	8001124 <__aeabi_f2iz>
 8009c32:	4606      	mov	r6, r0
 8009c34:	f7f7 f85c 	bl	8000cf0 <__aeabi_i2f>
 8009c38:	4601      	mov	r1, r0
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f7f6 ffa2 	bl	8000b84 <__aeabi_fsub>
 8009c40:	2f00      	cmp	r7, #0
 8009c42:	4681      	mov	r9, r0
 8009c44:	f340 8086 	ble.w	8009d54 <__kernel_rem_pio2f+0x1f8>
 8009c48:	f108 32ff 	add.w	r2, r8, #4294967295
 8009c4c:	ab0a      	add	r3, sp, #40	; 0x28
 8009c4e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8009c52:	f1c7 0108 	rsb	r1, r7, #8
 8009c56:	fa45 f301 	asr.w	r3, r5, r1
 8009c5a:	441e      	add	r6, r3
 8009c5c:	408b      	lsls	r3, r1
 8009c5e:	1aed      	subs	r5, r5, r3
 8009c60:	ab0a      	add	r3, sp, #40	; 0x28
 8009c62:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009c66:	f1c7 0307 	rsb	r3, r7, #7
 8009c6a:	411d      	asrs	r5, r3
 8009c6c:	2d00      	cmp	r5, #0
 8009c6e:	dd7f      	ble.n	8009d70 <__kernel_rem_pio2f+0x214>
 8009c70:	2200      	movs	r2, #0
 8009c72:	4692      	mov	sl, r2
 8009c74:	3601      	adds	r6, #1
 8009c76:	4590      	cmp	r8, r2
 8009c78:	f300 80b0 	bgt.w	8009ddc <__kernel_rem_pio2f+0x280>
 8009c7c:	2f00      	cmp	r7, #0
 8009c7e:	dd05      	ble.n	8009c8c <__kernel_rem_pio2f+0x130>
 8009c80:	2f01      	cmp	r7, #1
 8009c82:	f000 80bd 	beq.w	8009e00 <__kernel_rem_pio2f+0x2a4>
 8009c86:	2f02      	cmp	r7, #2
 8009c88:	f000 80c5 	beq.w	8009e16 <__kernel_rem_pio2f+0x2ba>
 8009c8c:	2d02      	cmp	r5, #2
 8009c8e:	d16f      	bne.n	8009d70 <__kernel_rem_pio2f+0x214>
 8009c90:	4649      	mov	r1, r9
 8009c92:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009c96:	f7f6 ff75 	bl	8000b84 <__aeabi_fsub>
 8009c9a:	4681      	mov	r9, r0
 8009c9c:	f1ba 0f00 	cmp.w	sl, #0
 8009ca0:	d066      	beq.n	8009d70 <__kernel_rem_pio2f+0x214>
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009ca8:	f000 fa0c 	bl	800a0c4 <scalbnf>
 8009cac:	4601      	mov	r1, r0
 8009cae:	4648      	mov	r0, r9
 8009cb0:	f7f6 ff68 	bl	8000b84 <__aeabi_fsub>
 8009cb4:	4681      	mov	r9, r0
 8009cb6:	e05b      	b.n	8009d70 <__kernel_rem_pio2f+0x214>
 8009cb8:	2400      	movs	r4, #0
 8009cba:	e766      	b.n	8009b8a <__kernel_rem_pio2f+0x2e>
 8009cbc:	eb18 0f05 	cmn.w	r8, r5
 8009cc0:	d407      	bmi.n	8009cd2 <__kernel_rem_pio2f+0x176>
 8009cc2:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8009cc6:	f7f7 f813 	bl	8000cf0 <__aeabi_i2f>
 8009cca:	f846 0b04 	str.w	r0, [r6], #4
 8009cce:	3501      	adds	r5, #1
 8009cd0:	e76e      	b.n	8009bb0 <__kernel_rem_pio2f+0x54>
 8009cd2:	4658      	mov	r0, fp
 8009cd4:	e7f9      	b.n	8009cca <__kernel_rem_pio2f+0x16e>
 8009cd6:	9307      	str	r3, [sp, #28]
 8009cd8:	9b05      	ldr	r3, [sp, #20]
 8009cda:	f8da 1000 	ldr.w	r1, [sl]
 8009cde:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009ce2:	f7f7 f859 	bl	8000d98 <__aeabi_fmul>
 8009ce6:	4601      	mov	r1, r0
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f7f6 ff4d 	bl	8000b88 <__addsf3>
 8009cee:	4606      	mov	r6, r0
 8009cf0:	9b07      	ldr	r3, [sp, #28]
 8009cf2:	f108 0801 	add.w	r8, r8, #1
 8009cf6:	9a03      	ldr	r2, [sp, #12]
 8009cf8:	f1aa 0a04 	sub.w	sl, sl, #4
 8009cfc:	4590      	cmp	r8, r2
 8009cfe:	ddea      	ble.n	8009cd6 <__kernel_rem_pio2f+0x17a>
 8009d00:	f84b 6b04 	str.w	r6, [fp], #4
 8009d04:	f109 0901 	add.w	r9, r9, #1
 8009d08:	3504      	adds	r5, #4
 8009d0a:	e75d      	b.n	8009bc8 <__kernel_rem_pio2f+0x6c>
 8009d0c:	46aa      	mov	sl, r5
 8009d0e:	461e      	mov	r6, r3
 8009d10:	f04f 0800 	mov.w	r8, #0
 8009d14:	e7ef      	b.n	8009cf6 <__kernel_rem_pio2f+0x19a>
 8009d16:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f7f7 f83c 	bl	8000d98 <__aeabi_fmul>
 8009d20:	f7f7 fa00 	bl	8001124 <__aeabi_f2iz>
 8009d24:	f7f6 ffe4 	bl	8000cf0 <__aeabi_i2f>
 8009d28:	4649      	mov	r1, r9
 8009d2a:	9009      	str	r0, [sp, #36]	; 0x24
 8009d2c:	f7f7 f834 	bl	8000d98 <__aeabi_fmul>
 8009d30:	4601      	mov	r1, r0
 8009d32:	4628      	mov	r0, r5
 8009d34:	f7f6 ff26 	bl	8000b84 <__aeabi_fsub>
 8009d38:	f7f7 f9f4 	bl	8001124 <__aeabi_f2iz>
 8009d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d42:	f846 0b04 	str.w	r0, [r6], #4
 8009d46:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7f6 ff1c 	bl	8000b88 <__addsf3>
 8009d50:	4605      	mov	r5, r0
 8009d52:	e754      	b.n	8009bfe <__kernel_rem_pio2f+0xa2>
 8009d54:	d106      	bne.n	8009d64 <__kernel_rem_pio2f+0x208>
 8009d56:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d5a:	aa0a      	add	r2, sp, #40	; 0x28
 8009d5c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8009d60:	11ed      	asrs	r5, r5, #7
 8009d62:	e783      	b.n	8009c6c <__kernel_rem_pio2f+0x110>
 8009d64:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009d68:	f7f7 f9c8 	bl	80010fc <__aeabi_fcmpge>
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	bb98      	cbnz	r0, 8009dd8 <__kernel_rem_pio2f+0x27c>
 8009d70:	2100      	movs	r1, #0
 8009d72:	4648      	mov	r0, r9
 8009d74:	f7f7 f9a4 	bl	80010c0 <__aeabi_fcmpeq>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	f000 8098 	beq.w	8009eae <__kernel_rem_pio2f+0x352>
 8009d7e:	f108 34ff 	add.w	r4, r8, #4294967295
 8009d82:	4623      	mov	r3, r4
 8009d84:	2200      	movs	r2, #0
 8009d86:	9901      	ldr	r1, [sp, #4]
 8009d88:	428b      	cmp	r3, r1
 8009d8a:	da4c      	bge.n	8009e26 <__kernel_rem_pio2f+0x2ca>
 8009d8c:	2a00      	cmp	r2, #0
 8009d8e:	d067      	beq.n	8009e60 <__kernel_rem_pio2f+0x304>
 8009d90:	ab0a      	add	r3, sp, #40	; 0x28
 8009d92:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009d96:	3f08      	subs	r7, #8
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 8086 	beq.w	8009eaa <__kernel_rem_pio2f+0x34e>
 8009d9e:	4639      	mov	r1, r7
 8009da0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009da4:	f000 f98e 	bl	800a0c4 <scalbnf>
 8009da8:	46a2      	mov	sl, r4
 8009daa:	4681      	mov	r9, r0
 8009dac:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8009db0:	af46      	add	r7, sp, #280	; 0x118
 8009db2:	f1ba 0f00 	cmp.w	sl, #0
 8009db6:	f280 80af 	bge.w	8009f18 <__kernel_rem_pio2f+0x3bc>
 8009dba:	4627      	mov	r7, r4
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	2f00      	cmp	r7, #0
 8009dc0:	f2c0 80d9 	blt.w	8009f76 <__kernel_rem_pio2f+0x41a>
 8009dc4:	a946      	add	r1, sp, #280	; 0x118
 8009dc6:	4690      	mov	r8, r2
 8009dc8:	f04f 0a00 	mov.w	sl, #0
 8009dcc:	4b23      	ldr	r3, [pc, #140]	; (8009e5c <__kernel_rem_pio2f+0x300>)
 8009dce:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8009dd2:	eba4 0907 	sub.w	r9, r4, r7
 8009dd6:	e0c2      	b.n	8009f5e <__kernel_rem_pio2f+0x402>
 8009dd8:	2502      	movs	r5, #2
 8009dda:	e749      	b.n	8009c70 <__kernel_rem_pio2f+0x114>
 8009ddc:	6823      	ldr	r3, [r4, #0]
 8009dde:	f1ba 0f00 	cmp.w	sl, #0
 8009de2:	d108      	bne.n	8009df6 <__kernel_rem_pio2f+0x29a>
 8009de4:	b11b      	cbz	r3, 8009dee <__kernel_rem_pio2f+0x292>
 8009de6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009dea:	6023      	str	r3, [r4, #0]
 8009dec:	2301      	movs	r3, #1
 8009dee:	469a      	mov	sl, r3
 8009df0:	3201      	adds	r2, #1
 8009df2:	3404      	adds	r4, #4
 8009df4:	e73f      	b.n	8009c76 <__kernel_rem_pio2f+0x11a>
 8009df6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009dfa:	6023      	str	r3, [r4, #0]
 8009dfc:	4653      	mov	r3, sl
 8009dfe:	e7f6      	b.n	8009dee <__kernel_rem_pio2f+0x292>
 8009e00:	f108 32ff 	add.w	r2, r8, #4294967295
 8009e04:	ab0a      	add	r3, sp, #40	; 0x28
 8009e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e0e:	a90a      	add	r1, sp, #40	; 0x28
 8009e10:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009e14:	e73a      	b.n	8009c8c <__kernel_rem_pio2f+0x130>
 8009e16:	f108 32ff 	add.w	r2, r8, #4294967295
 8009e1a:	ab0a      	add	r3, sp, #40	; 0x28
 8009e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e24:	e7f3      	b.n	8009e0e <__kernel_rem_pio2f+0x2b2>
 8009e26:	a90a      	add	r1, sp, #40	; 0x28
 8009e28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	e7a9      	b.n	8009d86 <__kernel_rem_pio2f+0x22a>
 8009e32:	3401      	adds	r4, #1
 8009e34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009e38:	2a00      	cmp	r2, #0
 8009e3a:	d0fa      	beq.n	8009e32 <__kernel_rem_pio2f+0x2d6>
 8009e3c:	9b04      	ldr	r3, [sp, #16]
 8009e3e:	aa1e      	add	r2, sp, #120	; 0x78
 8009e40:	4443      	add	r3, r8
 8009e42:	f108 0601 	add.w	r6, r8, #1
 8009e46:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8009e4a:	4444      	add	r4, r8
 8009e4c:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8009e50:	42b4      	cmp	r4, r6
 8009e52:	da08      	bge.n	8009e66 <__kernel_rem_pio2f+0x30a>
 8009e54:	46a0      	mov	r8, r4
 8009e56:	e6c6      	b.n	8009be6 <__kernel_rem_pio2f+0x8a>
 8009e58:	0800a9b8 	.word	0x0800a9b8
 8009e5c:	0800a98c 	.word	0x0800a98c
 8009e60:	2401      	movs	r4, #1
 8009e62:	9b08      	ldr	r3, [sp, #32]
 8009e64:	e7e6      	b.n	8009e34 <__kernel_rem_pio2f+0x2d8>
 8009e66:	9b07      	ldr	r3, [sp, #28]
 8009e68:	46ab      	mov	fp, r5
 8009e6a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009e6e:	f7f6 ff3f 	bl	8000cf0 <__aeabi_i2f>
 8009e72:	f04f 0a00 	mov.w	sl, #0
 8009e76:	f04f 0800 	mov.w	r8, #0
 8009e7a:	6028      	str	r0, [r5, #0]
 8009e7c:	9b03      	ldr	r3, [sp, #12]
 8009e7e:	459a      	cmp	sl, r3
 8009e80:	dd04      	ble.n	8009e8c <__kernel_rem_pio2f+0x330>
 8009e82:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8009e86:	3504      	adds	r5, #4
 8009e88:	3601      	adds	r6, #1
 8009e8a:	e7e1      	b.n	8009e50 <__kernel_rem_pio2f+0x2f4>
 8009e8c:	9b05      	ldr	r3, [sp, #20]
 8009e8e:	f85b 0904 	ldr.w	r0, [fp], #-4
 8009e92:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8009e96:	f7f6 ff7f 	bl	8000d98 <__aeabi_fmul>
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	4640      	mov	r0, r8
 8009e9e:	f7f6 fe73 	bl	8000b88 <__addsf3>
 8009ea2:	f10a 0a01 	add.w	sl, sl, #1
 8009ea6:	4680      	mov	r8, r0
 8009ea8:	e7e8      	b.n	8009e7c <__kernel_rem_pio2f+0x320>
 8009eaa:	3c01      	subs	r4, #1
 8009eac:	e770      	b.n	8009d90 <__kernel_rem_pio2f+0x234>
 8009eae:	9b06      	ldr	r3, [sp, #24]
 8009eb0:	9a02      	ldr	r2, [sp, #8]
 8009eb2:	4648      	mov	r0, r9
 8009eb4:	1a99      	subs	r1, r3, r2
 8009eb6:	f000 f905 	bl	800a0c4 <scalbnf>
 8009eba:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	f7f7 f91c 	bl	80010fc <__aeabi_fcmpge>
 8009ec4:	b300      	cbz	r0, 8009f08 <__kernel_rem_pio2f+0x3ac>
 8009ec6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f7f6 ff64 	bl	8000d98 <__aeabi_fmul>
 8009ed0:	f7f7 f928 	bl	8001124 <__aeabi_f2iz>
 8009ed4:	f7f6 ff0c 	bl	8000cf0 <__aeabi_i2f>
 8009ed8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009edc:	4681      	mov	r9, r0
 8009ede:	f7f6 ff5b 	bl	8000d98 <__aeabi_fmul>
 8009ee2:	4601      	mov	r1, r0
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f7f6 fe4d 	bl	8000b84 <__aeabi_fsub>
 8009eea:	f7f7 f91b 	bl	8001124 <__aeabi_f2iz>
 8009eee:	ab0a      	add	r3, sp, #40	; 0x28
 8009ef0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009ef4:	4648      	mov	r0, r9
 8009ef6:	f7f7 f915 	bl	8001124 <__aeabi_f2iz>
 8009efa:	f108 0401 	add.w	r4, r8, #1
 8009efe:	ab0a      	add	r3, sp, #40	; 0x28
 8009f00:	3708      	adds	r7, #8
 8009f02:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009f06:	e74a      	b.n	8009d9e <__kernel_rem_pio2f+0x242>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f7f7 f90b 	bl	8001124 <__aeabi_f2iz>
 8009f0e:	ab0a      	add	r3, sp, #40	; 0x28
 8009f10:	4644      	mov	r4, r8
 8009f12:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009f16:	e742      	b.n	8009d9e <__kernel_rem_pio2f+0x242>
 8009f18:	ab0a      	add	r3, sp, #40	; 0x28
 8009f1a:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009f1e:	f7f6 fee7 	bl	8000cf0 <__aeabi_i2f>
 8009f22:	4649      	mov	r1, r9
 8009f24:	f7f6 ff38 	bl	8000d98 <__aeabi_fmul>
 8009f28:	4641      	mov	r1, r8
 8009f2a:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8009f2e:	4648      	mov	r0, r9
 8009f30:	f7f6 ff32 	bl	8000d98 <__aeabi_fmul>
 8009f34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f38:	4681      	mov	r9, r0
 8009f3a:	e73a      	b.n	8009db2 <__kernel_rem_pio2f+0x256>
 8009f3c:	f853 0b04 	ldr.w	r0, [r3], #4
 8009f40:	f85b 1b04 	ldr.w	r1, [fp], #4
 8009f44:	9203      	str	r2, [sp, #12]
 8009f46:	9302      	str	r3, [sp, #8]
 8009f48:	f7f6 ff26 	bl	8000d98 <__aeabi_fmul>
 8009f4c:	4601      	mov	r1, r0
 8009f4e:	4640      	mov	r0, r8
 8009f50:	f7f6 fe1a 	bl	8000b88 <__addsf3>
 8009f54:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009f58:	4680      	mov	r8, r0
 8009f5a:	f10a 0a01 	add.w	sl, sl, #1
 8009f5e:	9901      	ldr	r1, [sp, #4]
 8009f60:	458a      	cmp	sl, r1
 8009f62:	dc01      	bgt.n	8009f68 <__kernel_rem_pio2f+0x40c>
 8009f64:	45ca      	cmp	sl, r9
 8009f66:	dde9      	ble.n	8009f3c <__kernel_rem_pio2f+0x3e0>
 8009f68:	ab5a      	add	r3, sp, #360	; 0x168
 8009f6a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8009f6e:	f849 8ca0 	str.w	r8, [r9, #-160]
 8009f72:	3f01      	subs	r7, #1
 8009f74:	e723      	b.n	8009dbe <__kernel_rem_pio2f+0x262>
 8009f76:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	dc07      	bgt.n	8009f8c <__kernel_rem_pio2f+0x430>
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	dc4e      	bgt.n	800a01e <__kernel_rem_pio2f+0x4c2>
 8009f80:	d02e      	beq.n	8009fe0 <__kernel_rem_pio2f+0x484>
 8009f82:	f006 0007 	and.w	r0, r6, #7
 8009f86:	b05b      	add	sp, #364	; 0x16c
 8009f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d1f7      	bne.n	8009f82 <__kernel_rem_pio2f+0x426>
 8009f92:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8009f96:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8009f9a:	46b8      	mov	r8, r7
 8009f9c:	46a2      	mov	sl, r4
 8009f9e:	f1ba 0f00 	cmp.w	sl, #0
 8009fa2:	dc49      	bgt.n	800a038 <__kernel_rem_pio2f+0x4dc>
 8009fa4:	46a1      	mov	r9, r4
 8009fa6:	f1b9 0f01 	cmp.w	r9, #1
 8009faa:	dc60      	bgt.n	800a06e <__kernel_rem_pio2f+0x512>
 8009fac:	2000      	movs	r0, #0
 8009fae:	2c01      	cmp	r4, #1
 8009fb0:	dc76      	bgt.n	800a0a0 <__kernel_rem_pio2f+0x544>
 8009fb2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8009fb4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8009fb6:	2d00      	cmp	r5, #0
 8009fb8:	d178      	bne.n	800a0ac <__kernel_rem_pio2f+0x550>
 8009fba:	9900      	ldr	r1, [sp, #0]
 8009fbc:	600a      	str	r2, [r1, #0]
 8009fbe:	460a      	mov	r2, r1
 8009fc0:	604b      	str	r3, [r1, #4]
 8009fc2:	6090      	str	r0, [r2, #8]
 8009fc4:	e7dd      	b.n	8009f82 <__kernel_rem_pio2f+0x426>
 8009fc6:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8009fca:	f7f6 fddd 	bl	8000b88 <__addsf3>
 8009fce:	3c01      	subs	r4, #1
 8009fd0:	2c00      	cmp	r4, #0
 8009fd2:	daf8      	bge.n	8009fc6 <__kernel_rem_pio2f+0x46a>
 8009fd4:	b10d      	cbz	r5, 8009fda <__kernel_rem_pio2f+0x47e>
 8009fd6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009fda:	9b00      	ldr	r3, [sp, #0]
 8009fdc:	6018      	str	r0, [r3, #0]
 8009fde:	e7d0      	b.n	8009f82 <__kernel_rem_pio2f+0x426>
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	af32      	add	r7, sp, #200	; 0xc8
 8009fe4:	e7f4      	b.n	8009fd0 <__kernel_rem_pio2f+0x474>
 8009fe6:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8009fea:	f7f6 fdcd 	bl	8000b88 <__addsf3>
 8009fee:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ff2:	f1b8 0f00 	cmp.w	r8, #0
 8009ff6:	daf6      	bge.n	8009fe6 <__kernel_rem_pio2f+0x48a>
 8009ff8:	b1ad      	cbz	r5, 800a026 <__kernel_rem_pio2f+0x4ca>
 8009ffa:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8009ffe:	9a00      	ldr	r2, [sp, #0]
 800a000:	4601      	mov	r1, r0
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800a006:	f7f6 fdbd 	bl	8000b84 <__aeabi_fsub>
 800a00a:	f04f 0801 	mov.w	r8, #1
 800a00e:	4544      	cmp	r4, r8
 800a010:	da0b      	bge.n	800a02a <__kernel_rem_pio2f+0x4ce>
 800a012:	b10d      	cbz	r5, 800a018 <__kernel_rem_pio2f+0x4bc>
 800a014:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a018:	9b00      	ldr	r3, [sp, #0]
 800a01a:	6058      	str	r0, [r3, #4]
 800a01c:	e7b1      	b.n	8009f82 <__kernel_rem_pio2f+0x426>
 800a01e:	46a0      	mov	r8, r4
 800a020:	2000      	movs	r0, #0
 800a022:	af32      	add	r7, sp, #200	; 0xc8
 800a024:	e7e5      	b.n	8009ff2 <__kernel_rem_pio2f+0x496>
 800a026:	4603      	mov	r3, r0
 800a028:	e7e9      	b.n	8009ffe <__kernel_rem_pio2f+0x4a2>
 800a02a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800a02e:	f7f6 fdab 	bl	8000b88 <__addsf3>
 800a032:	f108 0801 	add.w	r8, r8, #1
 800a036:	e7ea      	b.n	800a00e <__kernel_rem_pio2f+0x4b2>
 800a038:	f8d8 3000 	ldr.w	r3, [r8]
 800a03c:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a040:	4619      	mov	r1, r3
 800a042:	4610      	mov	r0, r2
 800a044:	9302      	str	r3, [sp, #8]
 800a046:	9201      	str	r2, [sp, #4]
 800a048:	f7f6 fd9e 	bl	8000b88 <__addsf3>
 800a04c:	9a01      	ldr	r2, [sp, #4]
 800a04e:	4601      	mov	r1, r0
 800a050:	4681      	mov	r9, r0
 800a052:	4610      	mov	r0, r2
 800a054:	f7f6 fd96 	bl	8000b84 <__aeabi_fsub>
 800a058:	9b02      	ldr	r3, [sp, #8]
 800a05a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a05e:	4619      	mov	r1, r3
 800a060:	f7f6 fd92 	bl	8000b88 <__addsf3>
 800a064:	f848 0904 	str.w	r0, [r8], #-4
 800a068:	f8c8 9000 	str.w	r9, [r8]
 800a06c:	e797      	b.n	8009f9e <__kernel_rem_pio2f+0x442>
 800a06e:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800a072:	f8d7 a000 	ldr.w	sl, [r7]
 800a076:	4618      	mov	r0, r3
 800a078:	4651      	mov	r1, sl
 800a07a:	9301      	str	r3, [sp, #4]
 800a07c:	f7f6 fd84 	bl	8000b88 <__addsf3>
 800a080:	9b01      	ldr	r3, [sp, #4]
 800a082:	4601      	mov	r1, r0
 800a084:	4680      	mov	r8, r0
 800a086:	4618      	mov	r0, r3
 800a088:	f7f6 fd7c 	bl	8000b84 <__aeabi_fsub>
 800a08c:	4651      	mov	r1, sl
 800a08e:	f7f6 fd7b 	bl	8000b88 <__addsf3>
 800a092:	f847 0904 	str.w	r0, [r7], #-4
 800a096:	f109 39ff 	add.w	r9, r9, #4294967295
 800a09a:	f8c7 8000 	str.w	r8, [r7]
 800a09e:	e782      	b.n	8009fa6 <__kernel_rem_pio2f+0x44a>
 800a0a0:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800a0a4:	f7f6 fd70 	bl	8000b88 <__addsf3>
 800a0a8:	3c01      	subs	r4, #1
 800a0aa:	e780      	b.n	8009fae <__kernel_rem_pio2f+0x452>
 800a0ac:	9900      	ldr	r1, [sp, #0]
 800a0ae:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800a0b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a0b6:	600a      	str	r2, [r1, #0]
 800a0b8:	604b      	str	r3, [r1, #4]
 800a0ba:	460a      	mov	r2, r1
 800a0bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a0c0:	e77f      	b.n	8009fc2 <__kernel_rem_pio2f+0x466>
 800a0c2:	bf00      	nop

0800a0c4 <scalbnf>:
 800a0c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	460d      	mov	r5, r1
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	d02e      	beq.n	800a130 <scalbnf+0x6c>
 800a0d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a0d6:	d304      	bcc.n	800a0e2 <scalbnf+0x1e>
 800a0d8:	4601      	mov	r1, r0
 800a0da:	f7f6 fd55 	bl	8000b88 <__addsf3>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	e026      	b.n	800a130 <scalbnf+0x6c>
 800a0e2:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800a0e6:	d118      	bne.n	800a11a <scalbnf+0x56>
 800a0e8:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800a0ec:	f7f6 fe54 	bl	8000d98 <__aeabi_fmul>
 800a0f0:	4a17      	ldr	r2, [pc, #92]	; (800a150 <scalbnf+0x8c>)
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	4295      	cmp	r5, r2
 800a0f6:	db0c      	blt.n	800a112 <scalbnf+0x4e>
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a0fe:	3a19      	subs	r2, #25
 800a100:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a104:	428d      	cmp	r5, r1
 800a106:	dd0a      	ble.n	800a11e <scalbnf+0x5a>
 800a108:	4912      	ldr	r1, [pc, #72]	; (800a154 <scalbnf+0x90>)
 800a10a:	4618      	mov	r0, r3
 800a10c:	f361 001e 	bfi	r0, r1, #0, #31
 800a110:	e000      	b.n	800a114 <scalbnf+0x50>
 800a112:	4911      	ldr	r1, [pc, #68]	; (800a158 <scalbnf+0x94>)
 800a114:	f7f6 fe40 	bl	8000d98 <__aeabi_fmul>
 800a118:	e7e1      	b.n	800a0de <scalbnf+0x1a>
 800a11a:	0dd2      	lsrs	r2, r2, #23
 800a11c:	e7f0      	b.n	800a100 <scalbnf+0x3c>
 800a11e:	1951      	adds	r1, r2, r5
 800a120:	29fe      	cmp	r1, #254	; 0xfe
 800a122:	dcf1      	bgt.n	800a108 <scalbnf+0x44>
 800a124:	2900      	cmp	r1, #0
 800a126:	dd05      	ble.n	800a134 <scalbnf+0x70>
 800a128:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800a12c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800a130:	4618      	mov	r0, r3
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	f111 0f16 	cmn.w	r1, #22
 800a138:	da01      	bge.n	800a13e <scalbnf+0x7a>
 800a13a:	4907      	ldr	r1, [pc, #28]	; (800a158 <scalbnf+0x94>)
 800a13c:	e7e5      	b.n	800a10a <scalbnf+0x46>
 800a13e:	f101 0019 	add.w	r0, r1, #25
 800a142:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800a146:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800a14a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800a14e:	e7e1      	b.n	800a114 <scalbnf+0x50>
 800a150:	ffff3cb0 	.word	0xffff3cb0
 800a154:	7149f2ca 	.word	0x7149f2ca
 800a158:	0da24260 	.word	0x0da24260

0800a15c <floorf>:
 800a15c:	b570      	push	{r4, r5, r6, lr}
 800a15e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800a162:	3d7f      	subs	r5, #127	; 0x7f
 800a164:	2d16      	cmp	r5, #22
 800a166:	4601      	mov	r1, r0
 800a168:	4604      	mov	r4, r0
 800a16a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800a16e:	dc25      	bgt.n	800a1bc <floorf+0x60>
 800a170:	2d00      	cmp	r5, #0
 800a172:	da0e      	bge.n	800a192 <floorf+0x36>
 800a174:	4916      	ldr	r1, [pc, #88]	; (800a1d0 <floorf+0x74>)
 800a176:	f7f6 fd07 	bl	8000b88 <__addsf3>
 800a17a:	2100      	movs	r1, #0
 800a17c:	f7f6 ffc8 	bl	8001110 <__aeabi_fcmpgt>
 800a180:	b128      	cbz	r0, 800a18e <floorf+0x32>
 800a182:	2c00      	cmp	r4, #0
 800a184:	da22      	bge.n	800a1cc <floorf+0x70>
 800a186:	4b13      	ldr	r3, [pc, #76]	; (800a1d4 <floorf+0x78>)
 800a188:	2e00      	cmp	r6, #0
 800a18a:	bf18      	it	ne
 800a18c:	461c      	movne	r4, r3
 800a18e:	4621      	mov	r1, r4
 800a190:	e01a      	b.n	800a1c8 <floorf+0x6c>
 800a192:	4e11      	ldr	r6, [pc, #68]	; (800a1d8 <floorf+0x7c>)
 800a194:	412e      	asrs	r6, r5
 800a196:	4230      	tst	r0, r6
 800a198:	d016      	beq.n	800a1c8 <floorf+0x6c>
 800a19a:	490d      	ldr	r1, [pc, #52]	; (800a1d0 <floorf+0x74>)
 800a19c:	f7f6 fcf4 	bl	8000b88 <__addsf3>
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	f7f6 ffb5 	bl	8001110 <__aeabi_fcmpgt>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d0f1      	beq.n	800a18e <floorf+0x32>
 800a1aa:	2c00      	cmp	r4, #0
 800a1ac:	bfbe      	ittt	lt
 800a1ae:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800a1b2:	412b      	asrlt	r3, r5
 800a1b4:	18e4      	addlt	r4, r4, r3
 800a1b6:	ea24 0406 	bic.w	r4, r4, r6
 800a1ba:	e7e8      	b.n	800a18e <floorf+0x32>
 800a1bc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a1c0:	d302      	bcc.n	800a1c8 <floorf+0x6c>
 800a1c2:	f7f6 fce1 	bl	8000b88 <__addsf3>
 800a1c6:	4601      	mov	r1, r0
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	bd70      	pop	{r4, r5, r6, pc}
 800a1cc:	2400      	movs	r4, #0
 800a1ce:	e7de      	b.n	800a18e <floorf+0x32>
 800a1d0:	7149f2ca 	.word	0x7149f2ca
 800a1d4:	bf800000 	.word	0xbf800000
 800a1d8:	007fffff 	.word	0x007fffff

0800a1dc <_init>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	bf00      	nop
 800a1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e2:	bc08      	pop	{r3}
 800a1e4:	469e      	mov	lr, r3
 800a1e6:	4770      	bx	lr

0800a1e8 <_fini>:
 800a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ea:	bf00      	nop
 800a1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ee:	bc08      	pop	{r3}
 800a1f0:	469e      	mov	lr, r3
 800a1f2:	4770      	bx	lr
