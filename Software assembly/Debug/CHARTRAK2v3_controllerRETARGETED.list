
CHARTRAK2v3_controllerRETARGETED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed38  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001118  0800ee48  0800ee48  0000fe48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  0800ff60  0800ff60  00010f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c0  0800ff78  0800ff78  00010f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010038  08010038  000121f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010038  08010038  00011038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801003c  0801003c  0001103c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08010040  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200001f0  08010230  000121f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  08010230  00012748  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000121f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193ad  00000000  00000000  00012219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004130  00000000  00000000  0002b5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  0002f6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001186  00000000  00000000  00030d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d36b  00000000  00000000  00031f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd4a  00000000  00000000  0004f279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097348  00000000  00000000  0006efc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010630b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b2c  00000000  00000000  00106350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0010de7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ee30 	.word	0x0800ee30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800ee30 	.word	0x0800ee30

08000150 <setjmp>:
 8000150:	46ec      	mov	ip, sp
 8000152:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000156:	f04f 0000 	mov.w	r0, #0
 800015a:	4770      	bx	lr

0800015c <longjmp>:
 800015c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000160:	46e5      	mov	sp, ip
 8000162:	0008      	movs	r0, r1
 8000164:	bf08      	it	eq
 8000166:	2001      	moveq	r0, #1
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop

0800016c <strcmp>:
 800016c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000170:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000174:	2a01      	cmp	r2, #1
 8000176:	bf28      	it	cs
 8000178:	429a      	cmpcs	r2, r3
 800017a:	d0f7      	beq.n	800016c <strcmp>
 800017c:	1ad0      	subs	r0, r2, r3
 800017e:	4770      	bx	lr

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	@ 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e06:	2afd      	cmp	r2, #253	@ 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	@ 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_ldivmod>:
 800118c:	b97b      	cbnz	r3, 80011ae <__aeabi_ldivmod+0x22>
 800118e:	b972      	cbnz	r2, 80011ae <__aeabi_ldivmod+0x22>
 8001190:	2900      	cmp	r1, #0
 8001192:	bfbe      	ittt	lt
 8001194:	2000      	movlt	r0, #0
 8001196:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800119a:	e006      	blt.n	80011aa <__aeabi_ldivmod+0x1e>
 800119c:	bf08      	it	eq
 800119e:	2800      	cmpeq	r0, #0
 80011a0:	bf1c      	itt	ne
 80011a2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80011a6:	f04f 30ff 	movne.w	r0, #4294967295
 80011aa:	f001 b965 	b.w	8002478 <__aeabi_idiv0>
 80011ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b6:	2900      	cmp	r1, #0
 80011b8:	db09      	blt.n	80011ce <__aeabi_ldivmod+0x42>
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db1a      	blt.n	80011f4 <__aeabi_ldivmod+0x68>
 80011be:	f000 f86b 	bl	8001298 <__udivmoddi4>
 80011c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011ca:	b004      	add	sp, #16
 80011cc:	4770      	bx	lr
 80011ce:	4240      	negs	r0, r0
 80011d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db1b      	blt.n	8001210 <__aeabi_ldivmod+0x84>
 80011d8:	f000 f85e 	bl	8001298 <__udivmoddi4>
 80011dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011e4:	b004      	add	sp, #16
 80011e6:	4240      	negs	r0, r0
 80011e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011ec:	4252      	negs	r2, r2
 80011ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011f2:	4770      	bx	lr
 80011f4:	4252      	negs	r2, r2
 80011f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011fa:	f000 f84d 	bl	8001298 <__udivmoddi4>
 80011fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001206:	b004      	add	sp, #16
 8001208:	4240      	negs	r0, r0
 800120a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800120e:	4770      	bx	lr
 8001210:	4252      	negs	r2, r2
 8001212:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001216:	f000 f83f 	bl	8001298 <__udivmoddi4>
 800121a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800121e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001222:	b004      	add	sp, #16
 8001224:	4252      	negs	r2, r2
 8001226:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800122a:	4770      	bx	lr

0800122c <__aeabi_d2lz>:
 800122c:	b538      	push	{r3, r4, r5, lr}
 800122e:	2200      	movs	r2, #0
 8001230:	2300      	movs	r3, #0
 8001232:	4604      	mov	r4, r0
 8001234:	460d      	mov	r5, r1
 8001236:	f7ff fbd9 	bl	80009ec <__aeabi_dcmplt>
 800123a:	b928      	cbnz	r0, 8001248 <__aeabi_d2lz+0x1c>
 800123c:	4620      	mov	r0, r4
 800123e:	4629      	mov	r1, r5
 8001240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001244:	f000 b80a 	b.w	800125c <__aeabi_d2ulz>
 8001248:	4620      	mov	r0, r4
 800124a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800124e:	f000 f805 	bl	800125c <__aeabi_d2ulz>
 8001252:	4240      	negs	r0, r0
 8001254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001258:	bd38      	pop	{r3, r4, r5, pc}
 800125a:	bf00      	nop

0800125c <__aeabi_d2ulz>:
 800125c:	b5d0      	push	{r4, r6, r7, lr}
 800125e:	2200      	movs	r2, #0
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <__aeabi_d2ulz+0x34>)
 8001262:	4606      	mov	r6, r0
 8001264:	460f      	mov	r7, r1
 8001266:	f7ff f94f 	bl	8000508 <__aeabi_dmul>
 800126a:	f7ff fc25 	bl	8000ab8 <__aeabi_d2uiz>
 800126e:	4604      	mov	r4, r0
 8001270:	f7ff f8d0 	bl	8000414 <__aeabi_ui2d>
 8001274:	2200      	movs	r2, #0
 8001276:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <__aeabi_d2ulz+0x38>)
 8001278:	f7ff f946 	bl	8000508 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4630      	mov	r0, r6
 8001282:	4639      	mov	r1, r7
 8001284:	f7fe ff88 	bl	8000198 <__aeabi_dsub>
 8001288:	f7ff fc16 	bl	8000ab8 <__aeabi_d2uiz>
 800128c:	4621      	mov	r1, r4
 800128e:	bdd0      	pop	{r4, r6, r7, pc}
 8001290:	3df00000 	.word	0x3df00000
 8001294:	41f00000 	.word	0x41f00000

08001298 <__udivmoddi4>:
 8001298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800129c:	9d08      	ldr	r5, [sp, #32]
 800129e:	460c      	mov	r4, r1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d14e      	bne.n	8001342 <__udivmoddi4+0xaa>
 80012a4:	4694      	mov	ip, r2
 80012a6:	458c      	cmp	ip, r1
 80012a8:	4686      	mov	lr, r0
 80012aa:	fab2 f282 	clz	r2, r2
 80012ae:	d962      	bls.n	8001376 <__udivmoddi4+0xde>
 80012b0:	b14a      	cbz	r2, 80012c6 <__udivmoddi4+0x2e>
 80012b2:	f1c2 0320 	rsb	r3, r2, #32
 80012b6:	4091      	lsls	r1, r2
 80012b8:	fa20 f303 	lsr.w	r3, r0, r3
 80012bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80012c0:	4319      	orrs	r1, r3
 80012c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80012c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80012ce:	fb07 1114 	mls	r1, r7, r4, r1
 80012d2:	fa1f f68c 	uxth.w	r6, ip
 80012d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012de:	fb04 f106 	mul.w	r1, r4, r6
 80012e2:	4299      	cmp	r1, r3
 80012e4:	d90a      	bls.n	80012fc <__udivmoddi4+0x64>
 80012e6:	eb1c 0303 	adds.w	r3, ip, r3
 80012ea:	f104 30ff 	add.w	r0, r4, #4294967295
 80012ee:	f080 8110 	bcs.w	8001512 <__udivmoddi4+0x27a>
 80012f2:	4299      	cmp	r1, r3
 80012f4:	f240 810d 	bls.w	8001512 <__udivmoddi4+0x27a>
 80012f8:	3c02      	subs	r4, #2
 80012fa:	4463      	add	r3, ip
 80012fc:	1a59      	subs	r1, r3, r1
 80012fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8001302:	fb07 1110 	mls	r1, r7, r0, r1
 8001306:	fb00 f606 	mul.w	r6, r0, r6
 800130a:	fa1f f38e 	uxth.w	r3, lr
 800130e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001312:	429e      	cmp	r6, r3
 8001314:	d90a      	bls.n	800132c <__udivmoddi4+0x94>
 8001316:	eb1c 0303 	adds.w	r3, ip, r3
 800131a:	f100 31ff 	add.w	r1, r0, #4294967295
 800131e:	f080 80fa 	bcs.w	8001516 <__udivmoddi4+0x27e>
 8001322:	429e      	cmp	r6, r3
 8001324:	f240 80f7 	bls.w	8001516 <__udivmoddi4+0x27e>
 8001328:	4463      	add	r3, ip
 800132a:	3802      	subs	r0, #2
 800132c:	2100      	movs	r1, #0
 800132e:	1b9b      	subs	r3, r3, r6
 8001330:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001334:	b11d      	cbz	r5, 800133e <__udivmoddi4+0xa6>
 8001336:	40d3      	lsrs	r3, r2
 8001338:	2200      	movs	r2, #0
 800133a:	e9c5 3200 	strd	r3, r2, [r5]
 800133e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001342:	428b      	cmp	r3, r1
 8001344:	d905      	bls.n	8001352 <__udivmoddi4+0xba>
 8001346:	b10d      	cbz	r5, 800134c <__udivmoddi4+0xb4>
 8001348:	e9c5 0100 	strd	r0, r1, [r5]
 800134c:	2100      	movs	r1, #0
 800134e:	4608      	mov	r0, r1
 8001350:	e7f5      	b.n	800133e <__udivmoddi4+0xa6>
 8001352:	fab3 f183 	clz	r1, r3
 8001356:	2900      	cmp	r1, #0
 8001358:	d146      	bne.n	80013e8 <__udivmoddi4+0x150>
 800135a:	42a3      	cmp	r3, r4
 800135c:	d302      	bcc.n	8001364 <__udivmoddi4+0xcc>
 800135e:	4290      	cmp	r0, r2
 8001360:	f0c0 80ee 	bcc.w	8001540 <__udivmoddi4+0x2a8>
 8001364:	1a86      	subs	r6, r0, r2
 8001366:	eb64 0303 	sbc.w	r3, r4, r3
 800136a:	2001      	movs	r0, #1
 800136c:	2d00      	cmp	r5, #0
 800136e:	d0e6      	beq.n	800133e <__udivmoddi4+0xa6>
 8001370:	e9c5 6300 	strd	r6, r3, [r5]
 8001374:	e7e3      	b.n	800133e <__udivmoddi4+0xa6>
 8001376:	2a00      	cmp	r2, #0
 8001378:	f040 808f 	bne.w	800149a <__udivmoddi4+0x202>
 800137c:	eba1 040c 	sub.w	r4, r1, ip
 8001380:	2101      	movs	r1, #1
 8001382:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001386:	fa1f f78c 	uxth.w	r7, ip
 800138a:	fbb4 f6f8 	udiv	r6, r4, r8
 800138e:	fb08 4416 	mls	r4, r8, r6, r4
 8001392:	fb07 f006 	mul.w	r0, r7, r6
 8001396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800139a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800139e:	4298      	cmp	r0, r3
 80013a0:	d908      	bls.n	80013b4 <__udivmoddi4+0x11c>
 80013a2:	eb1c 0303 	adds.w	r3, ip, r3
 80013a6:	f106 34ff 	add.w	r4, r6, #4294967295
 80013aa:	d202      	bcs.n	80013b2 <__udivmoddi4+0x11a>
 80013ac:	4298      	cmp	r0, r3
 80013ae:	f200 80cb 	bhi.w	8001548 <__udivmoddi4+0x2b0>
 80013b2:	4626      	mov	r6, r4
 80013b4:	1a1c      	subs	r4, r3, r0
 80013b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80013ba:	fb08 4410 	mls	r4, r8, r0, r4
 80013be:	fb00 f707 	mul.w	r7, r0, r7
 80013c2:	fa1f f38e 	uxth.w	r3, lr
 80013c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80013ca:	429f      	cmp	r7, r3
 80013cc:	d908      	bls.n	80013e0 <__udivmoddi4+0x148>
 80013ce:	eb1c 0303 	adds.w	r3, ip, r3
 80013d2:	f100 34ff 	add.w	r4, r0, #4294967295
 80013d6:	d202      	bcs.n	80013de <__udivmoddi4+0x146>
 80013d8:	429f      	cmp	r7, r3
 80013da:	f200 80ae 	bhi.w	800153a <__udivmoddi4+0x2a2>
 80013de:	4620      	mov	r0, r4
 80013e0:	1bdb      	subs	r3, r3, r7
 80013e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80013e6:	e7a5      	b.n	8001334 <__udivmoddi4+0x9c>
 80013e8:	f1c1 0720 	rsb	r7, r1, #32
 80013ec:	408b      	lsls	r3, r1
 80013ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80013f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80013f6:	fa24 f607 	lsr.w	r6, r4, r7
 80013fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013fe:	fbb6 f8f9 	udiv	r8, r6, r9
 8001402:	fa1f fe8c 	uxth.w	lr, ip
 8001406:	fb09 6618 	mls	r6, r9, r8, r6
 800140a:	fa20 f307 	lsr.w	r3, r0, r7
 800140e:	408c      	lsls	r4, r1
 8001410:	fa00 fa01 	lsl.w	sl, r0, r1
 8001414:	fb08 f00e 	mul.w	r0, r8, lr
 8001418:	431c      	orrs	r4, r3
 800141a:	0c23      	lsrs	r3, r4, #16
 800141c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001420:	4298      	cmp	r0, r3
 8001422:	fa02 f201 	lsl.w	r2, r2, r1
 8001426:	d90a      	bls.n	800143e <__udivmoddi4+0x1a6>
 8001428:	eb1c 0303 	adds.w	r3, ip, r3
 800142c:	f108 36ff 	add.w	r6, r8, #4294967295
 8001430:	f080 8081 	bcs.w	8001536 <__udivmoddi4+0x29e>
 8001434:	4298      	cmp	r0, r3
 8001436:	d97e      	bls.n	8001536 <__udivmoddi4+0x29e>
 8001438:	f1a8 0802 	sub.w	r8, r8, #2
 800143c:	4463      	add	r3, ip
 800143e:	1a1e      	subs	r6, r3, r0
 8001440:	fbb6 f3f9 	udiv	r3, r6, r9
 8001444:	fb09 6613 	mls	r6, r9, r3, r6
 8001448:	fb03 fe0e 	mul.w	lr, r3, lr
 800144c:	b2a4      	uxth	r4, r4
 800144e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001452:	45a6      	cmp	lr, r4
 8001454:	d908      	bls.n	8001468 <__udivmoddi4+0x1d0>
 8001456:	eb1c 0404 	adds.w	r4, ip, r4
 800145a:	f103 30ff 	add.w	r0, r3, #4294967295
 800145e:	d266      	bcs.n	800152e <__udivmoddi4+0x296>
 8001460:	45a6      	cmp	lr, r4
 8001462:	d964      	bls.n	800152e <__udivmoddi4+0x296>
 8001464:	3b02      	subs	r3, #2
 8001466:	4464      	add	r4, ip
 8001468:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800146c:	fba0 8302 	umull	r8, r3, r0, r2
 8001470:	eba4 040e 	sub.w	r4, r4, lr
 8001474:	429c      	cmp	r4, r3
 8001476:	46c6      	mov	lr, r8
 8001478:	461e      	mov	r6, r3
 800147a:	d350      	bcc.n	800151e <__udivmoddi4+0x286>
 800147c:	d04d      	beq.n	800151a <__udivmoddi4+0x282>
 800147e:	b155      	cbz	r5, 8001496 <__udivmoddi4+0x1fe>
 8001480:	ebba 030e 	subs.w	r3, sl, lr
 8001484:	eb64 0406 	sbc.w	r4, r4, r6
 8001488:	fa04 f707 	lsl.w	r7, r4, r7
 800148c:	40cb      	lsrs	r3, r1
 800148e:	431f      	orrs	r7, r3
 8001490:	40cc      	lsrs	r4, r1
 8001492:	e9c5 7400 	strd	r7, r4, [r5]
 8001496:	2100      	movs	r1, #0
 8001498:	e751      	b.n	800133e <__udivmoddi4+0xa6>
 800149a:	fa0c fc02 	lsl.w	ip, ip, r2
 800149e:	f1c2 0320 	rsb	r3, r2, #32
 80014a2:	40d9      	lsrs	r1, r3
 80014a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80014a8:	fa20 f303 	lsr.w	r3, r0, r3
 80014ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80014b0:	fbb1 f0f8 	udiv	r0, r1, r8
 80014b4:	fb08 1110 	mls	r1, r8, r0, r1
 80014b8:	4094      	lsls	r4, r2
 80014ba:	431c      	orrs	r4, r3
 80014bc:	fa1f f78c 	uxth.w	r7, ip
 80014c0:	0c23      	lsrs	r3, r4, #16
 80014c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80014c6:	fb00 f107 	mul.w	r1, r0, r7
 80014ca:	4299      	cmp	r1, r3
 80014cc:	d908      	bls.n	80014e0 <__udivmoddi4+0x248>
 80014ce:	eb1c 0303 	adds.w	r3, ip, r3
 80014d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80014d6:	d22c      	bcs.n	8001532 <__udivmoddi4+0x29a>
 80014d8:	4299      	cmp	r1, r3
 80014da:	d92a      	bls.n	8001532 <__udivmoddi4+0x29a>
 80014dc:	3802      	subs	r0, #2
 80014de:	4463      	add	r3, ip
 80014e0:	1a5b      	subs	r3, r3, r1
 80014e2:	fbb3 f1f8 	udiv	r1, r3, r8
 80014e6:	fb08 3311 	mls	r3, r8, r1, r3
 80014ea:	b2a4      	uxth	r4, r4
 80014ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80014f0:	fb01 f307 	mul.w	r3, r1, r7
 80014f4:	42a3      	cmp	r3, r4
 80014f6:	d908      	bls.n	800150a <__udivmoddi4+0x272>
 80014f8:	eb1c 0404 	adds.w	r4, ip, r4
 80014fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001500:	d213      	bcs.n	800152a <__udivmoddi4+0x292>
 8001502:	42a3      	cmp	r3, r4
 8001504:	d911      	bls.n	800152a <__udivmoddi4+0x292>
 8001506:	3902      	subs	r1, #2
 8001508:	4464      	add	r4, ip
 800150a:	1ae4      	subs	r4, r4, r3
 800150c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001510:	e73b      	b.n	800138a <__udivmoddi4+0xf2>
 8001512:	4604      	mov	r4, r0
 8001514:	e6f2      	b.n	80012fc <__udivmoddi4+0x64>
 8001516:	4608      	mov	r0, r1
 8001518:	e708      	b.n	800132c <__udivmoddi4+0x94>
 800151a:	45c2      	cmp	sl, r8
 800151c:	d2af      	bcs.n	800147e <__udivmoddi4+0x1e6>
 800151e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001522:	eb63 060c 	sbc.w	r6, r3, ip
 8001526:	3801      	subs	r0, #1
 8001528:	e7a9      	b.n	800147e <__udivmoddi4+0x1e6>
 800152a:	4631      	mov	r1, r6
 800152c:	e7ed      	b.n	800150a <__udivmoddi4+0x272>
 800152e:	4603      	mov	r3, r0
 8001530:	e79a      	b.n	8001468 <__udivmoddi4+0x1d0>
 8001532:	4630      	mov	r0, r6
 8001534:	e7d4      	b.n	80014e0 <__udivmoddi4+0x248>
 8001536:	46b0      	mov	r8, r6
 8001538:	e781      	b.n	800143e <__udivmoddi4+0x1a6>
 800153a:	4463      	add	r3, ip
 800153c:	3802      	subs	r0, #2
 800153e:	e74f      	b.n	80013e0 <__udivmoddi4+0x148>
 8001540:	4606      	mov	r6, r0
 8001542:	4623      	mov	r3, r4
 8001544:	4608      	mov	r0, r1
 8001546:	e711      	b.n	800136c <__udivmoddi4+0xd4>
 8001548:	3e02      	subs	r6, #2
 800154a:	4463      	add	r3, ip
 800154c:	e732      	b.n	80013b4 <__udivmoddi4+0x11c>
 800154e:	bf00      	nop

08001550 <selfrel_offset31>:
 8001550:	6803      	ldr	r3, [r0, #0]
 8001552:	005a      	lsls	r2, r3, #1
 8001554:	bf4c      	ite	mi
 8001556:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800155a:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 800155e:	4418      	add	r0, r3
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop

08001564 <search_EIT_table>:
 8001564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001568:	b341      	cbz	r1, 80015bc <search_EIT_table+0x58>
 800156a:	f101 38ff 	add.w	r8, r1, #4294967295
 800156e:	4605      	mov	r5, r0
 8001570:	4616      	mov	r6, r2
 8001572:	4647      	mov	r7, r8
 8001574:	2400      	movs	r4, #0
 8001576:	19e1      	adds	r1, r4, r7
 8001578:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800157c:	1049      	asrs	r1, r1, #1
 800157e:	eb05 09c1 	add.w	r9, r5, r1, lsl #3
 8001582:	4648      	mov	r0, r9
 8001584:	f7ff ffe4 	bl	8001550 <selfrel_offset31>
 8001588:	4588      	cmp	r8, r1
 800158a:	4603      	mov	r3, r0
 800158c:	ea4f 02c1 	mov.w	r2, r1, lsl #3
 8001590:	d00e      	beq.n	80015b0 <search_EIT_table+0x4c>
 8001592:	f102 0008 	add.w	r0, r2, #8
 8001596:	42b3      	cmp	r3, r6
 8001598:	4428      	add	r0, r5
 800159a:	d80b      	bhi.n	80015b4 <search_EIT_table+0x50>
 800159c:	f7ff ffd8 	bl	8001550 <selfrel_offset31>
 80015a0:	3801      	subs	r0, #1
 80015a2:	42b0      	cmp	r0, r6
 80015a4:	f101 0401 	add.w	r4, r1, #1
 80015a8:	d3e5      	bcc.n	8001576 <search_EIT_table+0x12>
 80015aa:	4648      	mov	r0, r9
 80015ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015b0:	42b0      	cmp	r0, r6
 80015b2:	d9fa      	bls.n	80015aa <search_EIT_table+0x46>
 80015b4:	428c      	cmp	r4, r1
 80015b6:	d001      	beq.n	80015bc <search_EIT_table+0x58>
 80015b8:	1e4f      	subs	r7, r1, #1
 80015ba:	e7dc      	b.n	8001576 <search_EIT_table+0x12>
 80015bc:	f04f 0900 	mov.w	r9, #0
 80015c0:	4648      	mov	r0, r9
 80015c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015c6:	bf00      	nop

080015c8 <__gnu_unwind_get_pr_addr>:
 80015c8:	2801      	cmp	r0, #1
 80015ca:	d007      	beq.n	80015dc <__gnu_unwind_get_pr_addr+0x14>
 80015cc:	2802      	cmp	r0, #2
 80015ce:	d007      	beq.n	80015e0 <__gnu_unwind_get_pr_addr+0x18>
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <__gnu_unwind_get_pr_addr+0x1c>)
 80015d2:	2800      	cmp	r0, #0
 80015d4:	bf0c      	ite	eq
 80015d6:	4618      	moveq	r0, r3
 80015d8:	2000      	movne	r0, #0
 80015da:	4770      	bx	lr
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <__gnu_unwind_get_pr_addr+0x20>)
 80015de:	4770      	bx	lr
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <__gnu_unwind_get_pr_addr+0x24>)
 80015e2:	4770      	bx	lr
 80015e4:	08001ca5 	.word	0x08001ca5
 80015e8:	08001ca9 	.word	0x08001ca9
 80015ec:	08001cad 	.word	0x08001cad

080015f0 <get_eit_entry>:
 80015f0:	b530      	push	{r4, r5, lr}
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <get_eit_entry+0x88>)
 80015f4:	4604      	mov	r4, r0
 80015f6:	b083      	sub	sp, #12
 80015f8:	1e8d      	subs	r5, r1, #2
 80015fa:	b31b      	cbz	r3, 8001644 <get_eit_entry+0x54>
 80015fc:	4628      	mov	r0, r5
 80015fe:	a901      	add	r1, sp, #4
 8001600:	f3af 8000 	nop.w
 8001604:	b388      	cbz	r0, 800166a <get_eit_entry+0x7a>
 8001606:	9901      	ldr	r1, [sp, #4]
 8001608:	462a      	mov	r2, r5
 800160a:	f7ff ffab 	bl	8001564 <search_EIT_table>
 800160e:	4601      	mov	r1, r0
 8001610:	b358      	cbz	r0, 800166a <get_eit_entry+0x7a>
 8001612:	f7ff ff9d 	bl	8001550 <selfrel_offset31>
 8001616:	684b      	ldr	r3, [r1, #4]
 8001618:	64a0      	str	r0, [r4, #72]	@ 0x48
 800161a:	2b01      	cmp	r3, #1
 800161c:	d028      	beq.n	8001670 <get_eit_entry+0x80>
 800161e:	2b00      	cmp	r3, #0
 8001620:	f101 0004 	add.w	r0, r1, #4
 8001624:	db1f      	blt.n	8001666 <get_eit_entry+0x76>
 8001626:	f7ff ff93 	bl	8001550 <selfrel_offset31>
 800162a:	2300      	movs	r3, #0
 800162c:	6523      	str	r3, [r4, #80]	@ 0x50
 800162e:	6803      	ldr	r3, [r0, #0]
 8001630:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0d      	blt.n	8001652 <get_eit_entry+0x62>
 8001636:	f7ff ff8b 	bl	8001550 <selfrel_offset31>
 800163a:	4603      	mov	r3, r0
 800163c:	2000      	movs	r0, #0
 800163e:	6123      	str	r3, [r4, #16]
 8001640:	b003      	add	sp, #12
 8001642:	bd30      	pop	{r4, r5, pc}
 8001644:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <get_eit_entry+0x8c>)
 8001646:	490e      	ldr	r1, [pc, #56]	@ (8001680 <get_eit_entry+0x90>)
 8001648:	4618      	mov	r0, r3
 800164a:	1ac9      	subs	r1, r1, r3
 800164c:	10c9      	asrs	r1, r1, #3
 800164e:	9101      	str	r1, [sp, #4]
 8001650:	e7da      	b.n	8001608 <get_eit_entry+0x18>
 8001652:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8001656:	f7ff ffb7 	bl	80015c8 <__gnu_unwind_get_pr_addr>
 800165a:	4603      	mov	r3, r0
 800165c:	b128      	cbz	r0, 800166a <get_eit_entry+0x7a>
 800165e:	2000      	movs	r0, #0
 8001660:	6123      	str	r3, [r4, #16]
 8001662:	b003      	add	sp, #12
 8001664:	bd30      	pop	{r4, r5, pc}
 8001666:	2301      	movs	r3, #1
 8001668:	e7e0      	b.n	800162c <get_eit_entry+0x3c>
 800166a:	2300      	movs	r3, #0
 800166c:	2009      	movs	r0, #9
 800166e:	e7e6      	b.n	800163e <get_eit_entry+0x4e>
 8001670:	2300      	movs	r3, #0
 8001672:	2005      	movs	r0, #5
 8001674:	e7e3      	b.n	800163e <get_eit_entry+0x4e>
 8001676:	bf00      	nop
 8001678:	00000000 	.word	0x00000000
 800167c:	0800ff78 	.word	0x0800ff78
 8001680:	08010038 	.word	0x08010038

08001684 <restore_non_core_regs>:
 8001684:	6803      	ldr	r3, [r0, #0]
 8001686:	b510      	push	{r4, lr}
 8001688:	07da      	lsls	r2, r3, #31
 800168a:	4604      	mov	r4, r0
 800168c:	d406      	bmi.n	800169c <restore_non_core_regs+0x18>
 800168e:	079b      	lsls	r3, r3, #30
 8001690:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 8001694:	d509      	bpl.n	80016aa <restore_non_core_regs+0x26>
 8001696:	f000 fc6f 	bl	8001f78 <__gnu_Unwind_Restore_VFP_D>
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	0759      	lsls	r1, r3, #29
 800169e:	d509      	bpl.n	80016b4 <restore_non_core_regs+0x30>
 80016a0:	071a      	lsls	r2, r3, #28
 80016a2:	d50e      	bpl.n	80016c2 <restore_non_core_regs+0x3e>
 80016a4:	06db      	lsls	r3, r3, #27
 80016a6:	d513      	bpl.n	80016d0 <restore_non_core_regs+0x4c>
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	f000 fc5d 	bl	8001f68 <__gnu_Unwind_Restore_VFP>
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	0759      	lsls	r1, r3, #29
 80016b2:	d4f5      	bmi.n	80016a0 <restore_non_core_regs+0x1c>
 80016b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80016b8:	f000 fc66 	bl	8001f88 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	071a      	lsls	r2, r3, #28
 80016c0:	d4f0      	bmi.n	80016a4 <restore_non_core_regs+0x20>
 80016c2:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 80016c6:	f000 fc67 	bl	8001f98 <__gnu_Unwind_Restore_WMMXD>
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	06db      	lsls	r3, r3, #27
 80016ce:	d4eb      	bmi.n	80016a8 <restore_non_core_regs+0x24>
 80016d0:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 80016d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016d8:	f000 bca2 	b.w	8002020 <__gnu_Unwind_Restore_WMMXC>

080016dc <__gnu_unwind_24bit.constprop.0>:
 80016dc:	2009      	movs	r0, #9
 80016de:	4770      	bx	lr

080016e0 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80016e0:	4603      	mov	r3, r0
 80016e2:	6800      	ldr	r0, [r0, #0]
 80016e4:	b100      	cbz	r0, 80016e8 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80016e6:	4418      	add	r0, r3
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop

080016ec <_Unwind_DebugHook>:
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop

080016f0 <unwind_phase2>:
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	4604      	mov	r4, r0
 80016f4:	460e      	mov	r6, r1
 80016f6:	4620      	mov	r0, r4
 80016f8:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80016fa:	f7ff ff79 	bl	80015f0 <get_eit_entry>
 80016fe:	4605      	mov	r5, r0
 8001700:	b998      	cbnz	r0, 800172a <unwind_phase2+0x3a>
 8001702:	f8d6 c040 	ldr.w	ip, [r6, #64]	@ 0x40
 8001706:	4632      	mov	r2, r6
 8001708:	4621      	mov	r1, r4
 800170a:	2001      	movs	r0, #1
 800170c:	6923      	ldr	r3, [r4, #16]
 800170e:	f8c4 c014 	str.w	ip, [r4, #20]
 8001712:	4798      	blx	r3
 8001714:	2808      	cmp	r0, #8
 8001716:	d0ee      	beq.n	80016f6 <unwind_phase2+0x6>
 8001718:	2807      	cmp	r0, #7
 800171a:	d106      	bne.n	800172a <unwind_phase2+0x3a>
 800171c:	4628      	mov	r0, r5
 800171e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001720:	f7ff ffe4 	bl	80016ec <_Unwind_DebugHook>
 8001724:	1d30      	adds	r0, r6, #4
 8001726:	f000 fc13 	bl	8001f50 <__restore_core_regs>
 800172a:	f00c fd27 	bl	800e17c <abort>
 800172e:	bf00      	nop

08001730 <unwind_phase2_forced>:
 8001730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001734:	f04f 0a00 	mov.w	sl, #0
 8001738:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 800173c:	f10d 0e0c 	add.w	lr, sp, #12
 8001740:	f101 0c04 	add.w	ip, r1, #4
 8001744:	68c7      	ldr	r7, [r0, #12]
 8001746:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800174a:	4606      	mov	r6, r0
 800174c:	4614      	mov	r4, r2
 800174e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001752:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001756:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800175a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800175e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001762:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001766:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800176a:	ad02      	add	r5, sp, #8
 800176c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001770:	f8c5 a000 	str.w	sl, [r5]
 8001774:	e021      	b.n	80017ba <unwind_phase2_forced+0x8a>
 8001776:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001778:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800177c:	4629      	mov	r1, r5
 800177e:	6173      	str	r3, [r6, #20]
 8001780:	a87a      	add	r0, sp, #488	@ 0x1e8
 8001782:	f00a fa10 	bl	800bba6 <memcpy>
 8001786:	4631      	mov	r1, r6
 8001788:	4650      	mov	r0, sl
 800178a:	6933      	ldr	r3, [r6, #16]
 800178c:	aa7a      	add	r2, sp, #488	@ 0x1e8
 800178e:	4798      	blx	r3
 8001790:	9c88      	ldr	r4, [sp, #544]	@ 0x220
 8001792:	4682      	mov	sl, r0
 8001794:	646c      	str	r4, [r5, #68]	@ 0x44
 8001796:	4633      	mov	r3, r6
 8001798:	4632      	mov	r2, r6
 800179a:	4649      	mov	r1, r9
 800179c:	2001      	movs	r0, #1
 800179e:	e9cd 5800 	strd	r5, r8, [sp]
 80017a2:	47b8      	blx	r7
 80017a4:	4604      	mov	r4, r0
 80017a6:	bb30      	cbnz	r0, 80017f6 <unwind_phase2_forced+0xc6>
 80017a8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80017ac:	4628      	mov	r0, r5
 80017ae:	a97a      	add	r1, sp, #488	@ 0x1e8
 80017b0:	f00a f9f9 	bl	800bba6 <memcpy>
 80017b4:	f1ba 0f08 	cmp.w	sl, #8
 80017b8:	d11a      	bne.n	80017f0 <unwind_phase2_forced+0xc0>
 80017ba:	4630      	mov	r0, r6
 80017bc:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80017be:	f7ff ff17 	bl	80015f0 <get_eit_entry>
 80017c2:	f104 0909 	add.w	r9, r4, #9
 80017c6:	fa5f fa89 	uxtb.w	sl, r9
 80017ca:	4604      	mov	r4, r0
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d0d2      	beq.n	8001776 <unwind_phase2_forced+0x46>
 80017d0:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 80017d2:	4633      	mov	r3, r6
 80017d4:	6469      	str	r1, [r5, #68]	@ 0x44
 80017d6:	4632      	mov	r2, r6
 80017d8:	2001      	movs	r0, #1
 80017da:	e9cd 5800 	strd	r5, r8, [sp]
 80017de:	f04a 0110 	orr.w	r1, sl, #16
 80017e2:	47b8      	blx	r7
 80017e4:	b938      	cbnz	r0, 80017f6 <unwind_phase2_forced+0xc6>
 80017e6:	4620      	mov	r0, r4
 80017e8:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 80017ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017f0:	f1ba 0f07 	cmp.w	sl, #7
 80017f4:	d005      	beq.n	8001802 <unwind_phase2_forced+0xd2>
 80017f6:	2409      	movs	r4, #9
 80017f8:	4620      	mov	r0, r4
 80017fa:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 80017fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001802:	4620      	mov	r0, r4
 8001804:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8001806:	f7ff ff71 	bl	80016ec <_Unwind_DebugHook>
 800180a:	a803      	add	r0, sp, #12
 800180c:	f000 fba0 	bl	8001f50 <__restore_core_regs>

08001810 <_Unwind_GetCFA>:
 8001810:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001812:	4770      	bx	lr

08001814 <__gnu_Unwind_RaiseException>:
 8001814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001816:	f04f 37ff 	mov.w	r7, #4294967295
 800181a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800181c:	b0f9      	sub	sp, #484	@ 0x1e4
 800181e:	640b      	str	r3, [r1, #64]	@ 0x40
 8001820:	ac01      	add	r4, sp, #4
 8001822:	f101 0c04 	add.w	ip, r1, #4
 8001826:	460e      	mov	r6, r1
 8001828:	4605      	mov	r5, r0
 800182a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800182e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001830:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001836:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800183a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001844:	9700      	str	r7, [sp, #0]
 8001846:	e006      	b.n	8001856 <__gnu_Unwind_RaiseException+0x42>
 8001848:	466a      	mov	r2, sp
 800184a:	4629      	mov	r1, r5
 800184c:	692b      	ldr	r3, [r5, #16]
 800184e:	4798      	blx	r3
 8001850:	2808      	cmp	r0, #8
 8001852:	4604      	mov	r4, r0
 8001854:	d108      	bne.n	8001868 <__gnu_Unwind_RaiseException+0x54>
 8001856:	4628      	mov	r0, r5
 8001858:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800185a:	f7ff fec9 	bl	80015f0 <get_eit_entry>
 800185e:	2800      	cmp	r0, #0
 8001860:	d0f2      	beq.n	8001848 <__gnu_Unwind_RaiseException+0x34>
 8001862:	2009      	movs	r0, #9
 8001864:	b079      	add	sp, #484	@ 0x1e4
 8001866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001868:	4668      	mov	r0, sp
 800186a:	f7ff ff0b 	bl	8001684 <restore_non_core_regs>
 800186e:	2c06      	cmp	r4, #6
 8001870:	d1f7      	bne.n	8001862 <__gnu_Unwind_RaiseException+0x4e>
 8001872:	4631      	mov	r1, r6
 8001874:	4628      	mov	r0, r5
 8001876:	f7ff ff3b 	bl	80016f0 <unwind_phase2>
 800187a:	bf00      	nop

0800187c <__gnu_Unwind_ForcedUnwind>:
 800187c:	b410      	push	{r4}
 800187e:	4614      	mov	r4, r2
 8001880:	6184      	str	r4, [r0, #24]
 8001882:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8001884:	60c1      	str	r1, [r0, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	641c      	str	r4, [r3, #64]	@ 0x40
 800188a:	4619      	mov	r1, r3
 800188c:	bc10      	pop	{r4}
 800188e:	e74f      	b.n	8001730 <unwind_phase2_forced>

08001890 <__gnu_Unwind_Resume>:
 8001890:	b570      	push	{r4, r5, r6, lr}
 8001892:	6943      	ldr	r3, [r0, #20]
 8001894:	68c6      	ldr	r6, [r0, #12]
 8001896:	640b      	str	r3, [r1, #64]	@ 0x40
 8001898:	b9ae      	cbnz	r6, 80018c6 <__gnu_Unwind_Resume+0x36>
 800189a:	460a      	mov	r2, r1
 800189c:	6903      	ldr	r3, [r0, #16]
 800189e:	4604      	mov	r4, r0
 80018a0:	460d      	mov	r5, r1
 80018a2:	4601      	mov	r1, r0
 80018a4:	2002      	movs	r0, #2
 80018a6:	4798      	blx	r3
 80018a8:	2807      	cmp	r0, #7
 80018aa:	d005      	beq.n	80018b8 <__gnu_Unwind_Resume+0x28>
 80018ac:	2808      	cmp	r0, #8
 80018ae:	d10f      	bne.n	80018d0 <__gnu_Unwind_Resume+0x40>
 80018b0:	4629      	mov	r1, r5
 80018b2:	4620      	mov	r0, r4
 80018b4:	f7ff ff1c 	bl	80016f0 <unwind_phase2>
 80018b8:	4630      	mov	r0, r6
 80018ba:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80018bc:	f7ff ff16 	bl	80016ec <_Unwind_DebugHook>
 80018c0:	1d28      	adds	r0, r5, #4
 80018c2:	f000 fb45 	bl	8001f50 <__restore_core_regs>
 80018c6:	2201      	movs	r2, #1
 80018c8:	f7ff ff32 	bl	8001730 <unwind_phase2_forced>
 80018cc:	f00c fc56 	bl	800e17c <abort>
 80018d0:	f00c fc54 	bl	800e17c <abort>

080018d4 <__gnu_Unwind_Resume_or_Rethrow>:
 80018d4:	68c2      	ldr	r2, [r0, #12]
 80018d6:	b12a      	cbz	r2, 80018e4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80018d8:	f8d1 c03c 	ldr.w	ip, [r1, #60]	@ 0x3c
 80018dc:	2200      	movs	r2, #0
 80018de:	f8c1 c040 	str.w	ip, [r1, #64]	@ 0x40
 80018e2:	e725      	b.n	8001730 <unwind_phase2_forced>
 80018e4:	e796      	b.n	8001814 <__gnu_Unwind_RaiseException>
 80018e6:	bf00      	nop

080018e8 <_Unwind_Complete>:
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop

080018ec <_Unwind_DeleteException>:
 80018ec:	6883      	ldr	r3, [r0, #8]
 80018ee:	4601      	mov	r1, r0
 80018f0:	b10b      	cbz	r3, 80018f6 <_Unwind_DeleteException+0xa>
 80018f2:	2001      	movs	r0, #1
 80018f4:	4718      	bx	r3
 80018f6:	4770      	bx	lr

080018f8 <_Unwind_VRS_Get>:
 80018f8:	2901      	cmp	r1, #1
 80018fa:	d010      	beq.n	800191e <_Unwind_VRS_Get+0x26>
 80018fc:	d809      	bhi.n	8001912 <_Unwind_VRS_Get+0x1a>
 80018fe:	b983      	cbnz	r3, 8001922 <_Unwind_VRS_Get+0x2a>
 8001900:	2a0f      	cmp	r2, #15
 8001902:	d80e      	bhi.n	8001922 <_Unwind_VRS_Get+0x2a>
 8001904:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001908:	6852      	ldr	r2, [r2, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	9b00      	ldr	r3, [sp, #0]
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	4770      	bx	lr
 8001912:	3903      	subs	r1, #3
 8001914:	2901      	cmp	r1, #1
 8001916:	bf8c      	ite	hi
 8001918:	2002      	movhi	r0, #2
 800191a:	2001      	movls	r0, #1
 800191c:	4770      	bx	lr
 800191e:	4608      	mov	r0, r1
 8001920:	4770      	bx	lr
 8001922:	2002      	movs	r0, #2
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop

08001928 <_Unwind_GetGR>:
 8001928:	2300      	movs	r3, #0
 800192a:	b500      	push	{lr}
 800192c:	b085      	sub	sp, #20
 800192e:	460a      	mov	r2, r1
 8001930:	a903      	add	r1, sp, #12
 8001932:	9100      	str	r1, [sp, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff ffdf 	bl	80018f8 <_Unwind_VRS_Get>
 800193a:	9803      	ldr	r0, [sp, #12]
 800193c:	b005      	add	sp, #20
 800193e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001942:	bf00      	nop

08001944 <_Unwind_VRS_Set>:
 8001944:	2901      	cmp	r1, #1
 8001946:	d010      	beq.n	800196a <_Unwind_VRS_Set+0x26>
 8001948:	d809      	bhi.n	800195e <_Unwind_VRS_Set+0x1a>
 800194a:	b983      	cbnz	r3, 800196e <_Unwind_VRS_Set+0x2a>
 800194c:	2a0f      	cmp	r2, #15
 800194e:	d80e      	bhi.n	800196e <_Unwind_VRS_Set+0x2a>
 8001950:	9900      	ldr	r1, [sp, #0]
 8001952:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001956:	6809      	ldr	r1, [r1, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	6051      	str	r1, [r2, #4]
 800195c:	4770      	bx	lr
 800195e:	3903      	subs	r1, #3
 8001960:	2901      	cmp	r1, #1
 8001962:	bf8c      	ite	hi
 8001964:	2002      	movhi	r0, #2
 8001966:	2001      	movls	r0, #1
 8001968:	4770      	bx	lr
 800196a:	4608      	mov	r0, r1
 800196c:	4770      	bx	lr
 800196e:	2002      	movs	r0, #2
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop

08001974 <_Unwind_SetGR>:
 8001974:	2300      	movs	r3, #0
 8001976:	b510      	push	{r4, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	ac03      	add	r4, sp, #12
 800197c:	9203      	str	r2, [sp, #12]
 800197e:	9400      	str	r4, [sp, #0]
 8001980:	460a      	mov	r2, r1
 8001982:	4619      	mov	r1, r3
 8001984:	f7ff ffde 	bl	8001944 <_Unwind_VRS_Set>
 8001988:	b004      	add	sp, #16
 800198a:	bd10      	pop	{r4, pc}

0800198c <__gnu_Unwind_Backtrace>:
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	f04f 36ff 	mov.w	r6, #4294967295
 8001992:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8001994:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8001998:	6413      	str	r3, [r2, #64]	@ 0x40
 800199a:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 800199e:	f102 0c04 	add.w	ip, r2, #4
 80019a2:	4605      	mov	r5, r0
 80019a4:	460c      	mov	r4, r1
 80019a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80019aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80019ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80019b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80019b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80019ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80019be:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80019c2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80019c6:	9616      	str	r6, [sp, #88]	@ 0x58
 80019c8:	e012      	b.n	80019f0 <__gnu_Unwind_Backtrace+0x64>
 80019ca:	210c      	movs	r1, #12
 80019cc:	a816      	add	r0, sp, #88	@ 0x58
 80019ce:	466a      	mov	r2, sp
 80019d0:	f7ff ffd0 	bl	8001974 <_Unwind_SetGR>
 80019d4:	4621      	mov	r1, r4
 80019d6:	a816      	add	r0, sp, #88	@ 0x58
 80019d8:	47a8      	blx	r5
 80019da:	b978      	cbnz	r0, 80019fc <__gnu_Unwind_Backtrace+0x70>
 80019dc:	4669      	mov	r1, sp
 80019de:	2008      	movs	r0, #8
 80019e0:	9b04      	ldr	r3, [sp, #16]
 80019e2:	aa16      	add	r2, sp, #88	@ 0x58
 80019e4:	4798      	blx	r3
 80019e6:	2805      	cmp	r0, #5
 80019e8:	4606      	mov	r6, r0
 80019ea:	d008      	beq.n	80019fe <__gnu_Unwind_Backtrace+0x72>
 80019ec:	2809      	cmp	r0, #9
 80019ee:	d005      	beq.n	80019fc <__gnu_Unwind_Backtrace+0x70>
 80019f0:	4668      	mov	r0, sp
 80019f2:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80019f4:	f7ff fdfc 	bl	80015f0 <get_eit_entry>
 80019f8:	2800      	cmp	r0, #0
 80019fa:	d0e6      	beq.n	80019ca <__gnu_Unwind_Backtrace+0x3e>
 80019fc:	2609      	movs	r6, #9
 80019fe:	a816      	add	r0, sp, #88	@ 0x58
 8001a00:	f7ff fe40 	bl	8001684 <restore_non_core_regs>
 8001a04:	4630      	mov	r0, r6
 8001a06:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 8001a0a:	bd70      	pop	{r4, r5, r6, pc}

08001a0c <__gnu_unwind_pr_common>:
 8001a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a10:	4693      	mov	fp, r2
 8001a12:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001a14:	460d      	mov	r5, r1
 8001a16:	f852 1b04 	ldr.w	r1, [r2], #4
 8001a1a:	b089      	sub	sp, #36	@ 0x24
 8001a1c:	f000 0c03 	and.w	ip, r0, #3
 8001a20:	9206      	str	r2, [sp, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d079      	beq.n	8001b1a <__gnu_unwind_pr_common+0x10e>
 8001a26:	2402      	movs	r4, #2
 8001a28:	0c0e      	lsrs	r6, r1, #16
 8001a2a:	f88d 601d 	strb.w	r6, [sp, #29]
 8001a2e:	0409      	lsls	r1, r1, #16
 8001a30:	b2f6      	uxtb	r6, r6
 8001a32:	9105      	str	r1, [sp, #20]
 8001a34:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8001a38:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 8001a3a:	f1bc 0f02 	cmp.w	ip, #2
 8001a3e:	bf08      	it	eq
 8001a40:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8001a42:	f017 0701 	ands.w	r7, r7, #1
 8001a46:	f88d 401c 	strb.w	r4, [sp, #28]
 8001a4a:	d00c      	beq.n	8001a66 <__gnu_unwind_pr_common+0x5a>
 8001a4c:	4658      	mov	r0, fp
 8001a4e:	a905      	add	r1, sp, #20
 8001a50:	f000 fb80 	bl	8002154 <__gnu_unwind_execute>
 8001a54:	b918      	cbnz	r0, 8001a5e <__gnu_unwind_pr_common+0x52>
 8001a56:	2008      	movs	r0, #8
 8001a58:	b009      	add	sp, #36	@ 0x24
 8001a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a5e:	2009      	movs	r0, #9
 8001a60:	b009      	add	sp, #36	@ 0x24
 8001a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a66:	6816      	ldr	r6, [r2, #0]
 8001a68:	2e00      	cmp	r6, #0
 8001a6a:	d0ef      	beq.n	8001a4c <__gnu_unwind_pr_common+0x40>
 8001a6c:	46b2      	mov	sl, r6
 8001a6e:	4664      	mov	r4, ip
 8001a70:	4699      	mov	r9, r3
 8001a72:	f000 0108 	and.w	r1, r0, #8
 8001a76:	9101      	str	r1, [sp, #4]
 8001a78:	9702      	str	r7, [sp, #8]
 8001a7a:	f1b9 0f02 	cmp.w	r9, #2
 8001a7e:	d048      	beq.n	8001b12 <__gnu_unwind_pr_common+0x106>
 8001a80:	f8b2 a000 	ldrh.w	sl, [r2]
 8001a84:	8856      	ldrh	r6, [r2, #2]
 8001a86:	f102 0804 	add.w	r8, r2, #4
 8001a8a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8001a8c:	f026 0201 	bic.w	r2, r6, #1
 8001a90:	210f      	movs	r1, #15
 8001a92:	4658      	mov	r0, fp
 8001a94:	18d7      	adds	r7, r2, r3
 8001a96:	f7ff ff47 	bl	8001928 <_Unwind_GetGR>
 8001a9a:	4287      	cmp	r7, r0
 8001a9c:	d837      	bhi.n	8001b0e <__gnu_unwind_pr_common+0x102>
 8001a9e:	f02a 0201 	bic.w	r2, sl, #1
 8001aa2:	443a      	add	r2, r7
 8001aa4:	4282      	cmp	r2, r0
 8001aa6:	bf94      	ite	ls
 8001aa8:	2200      	movls	r2, #0
 8001aaa:	2201      	movhi	r2, #1
 8001aac:	0076      	lsls	r6, r6, #1
 8001aae:	f006 0302 	and.w	r3, r6, #2
 8001ab2:	f00a 0a01 	and.w	sl, sl, #1
 8001ab6:	ea43 030a 	orr.w	r3, r3, sl
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d047      	beq.n	8001b4e <__gnu_unwind_pr_common+0x142>
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d031      	beq.n	8001b26 <__gnu_unwind_pr_common+0x11a>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1cb      	bne.n	8001a5e <__gnu_unwind_pr_common+0x52>
 8001ac6:	b114      	cbz	r4, 8001ace <__gnu_unwind_pr_common+0xc2>
 8001ac8:	2a00      	cmp	r2, #0
 8001aca:	f040 80ca 	bne.w	8001c62 <__gnu_unwind_pr_common+0x256>
 8001ace:	f108 0204 	add.w	r2, r8, #4
 8001ad2:	f8d2 a000 	ldr.w	sl, [r2]
 8001ad6:	f1ba 0f00 	cmp.w	sl, #0
 8001ada:	d1ce      	bne.n	8001a7a <__gnu_unwind_pr_common+0x6e>
 8001adc:	4658      	mov	r0, fp
 8001ade:	a905      	add	r1, sp, #20
 8001ae0:	9f02      	ldr	r7, [sp, #8]
 8001ae2:	f000 fb37 	bl	8002154 <__gnu_unwind_execute>
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	d1b9      	bne.n	8001a5e <__gnu_unwind_pr_common+0x52>
 8001aea:	2f00      	cmp	r7, #0
 8001aec:	d0b3      	beq.n	8001a56 <__gnu_unwind_pr_common+0x4a>
 8001aee:	210f      	movs	r1, #15
 8001af0:	4658      	mov	r0, fp
 8001af2:	f7ff ff19 	bl	8001928 <_Unwind_GetGR>
 8001af6:	210e      	movs	r1, #14
 8001af8:	4602      	mov	r2, r0
 8001afa:	4658      	mov	r0, fp
 8001afc:	f7ff ff3a 	bl	8001974 <_Unwind_SetGR>
 8001b00:	210f      	movs	r1, #15
 8001b02:	4658      	mov	r0, fp
 8001b04:	4a66      	ldr	r2, [pc, #408]	@ (8001ca0 <__gnu_unwind_pr_common+0x294>)
 8001b06:	f7ff ff35 	bl	8001974 <_Unwind_SetGR>
 8001b0a:	2007      	movs	r0, #7
 8001b0c:	e7a8      	b.n	8001a60 <__gnu_unwind_pr_common+0x54>
 8001b0e:	2200      	movs	r2, #0
 8001b10:	e7cc      	b.n	8001aac <__gnu_unwind_pr_common+0xa0>
 8001b12:	6856      	ldr	r6, [r2, #4]
 8001b14:	f102 0808 	add.w	r8, r2, #8
 8001b18:	e7b7      	b.n	8001a8a <__gnu_unwind_pr_common+0x7e>
 8001b1a:	0209      	lsls	r1, r1, #8
 8001b1c:	2403      	movs	r4, #3
 8001b1e:	9105      	str	r1, [sp, #20]
 8001b20:	f88d 301d 	strb.w	r3, [sp, #29]
 8001b24:	e788      	b.n	8001a38 <__gnu_unwind_pr_common+0x2c>
 8001b26:	f8d8 6000 	ldr.w	r6, [r8]
 8001b2a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8001b2e:	2c00      	cmp	r4, #0
 8001b30:	d144      	bne.n	8001bbc <__gnu_unwind_pr_common+0x1b0>
 8001b32:	b122      	cbz	r2, 8001b3e <__gnu_unwind_pr_common+0x132>
 8001b34:	9a01      	ldr	r2, [sp, #4]
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d05a      	beq.n	8001bf0 <__gnu_unwind_pr_common+0x1e4>
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d058      	beq.n	8001bf0 <__gnu_unwind_pr_common+0x1e4>
 8001b3e:	2e00      	cmp	r6, #0
 8001b40:	da01      	bge.n	8001b46 <__gnu_unwind_pr_common+0x13a>
 8001b42:	f108 0804 	add.w	r8, r8, #4
 8001b46:	3301      	adds	r3, #1
 8001b48:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 8001b4c:	e7c1      	b.n	8001ad2 <__gnu_unwind_pr_common+0xc6>
 8001b4e:	b9ec      	cbnz	r4, 8001b8c <__gnu_unwind_pr_common+0x180>
 8001b50:	b1ca      	cbz	r2, 8001b86 <__gnu_unwind_pr_common+0x17a>
 8001b52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001b56:	f8d8 2000 	ldr.w	r2, [r8]
 8001b5a:	1c99      	adds	r1, r3, #2
 8001b5c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001b60:	f43f af7d 	beq.w	8001a5e <__gnu_unwind_pr_common+0x52>
 8001b64:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8001b68:	3301      	adds	r3, #1
 8001b6a:	9104      	str	r1, [sp, #16]
 8001b6c:	f000 808c 	beq.w	8001c88 <__gnu_unwind_pr_common+0x27c>
 8001b70:	f108 0004 	add.w	r0, r8, #4
 8001b74:	f7ff fdb4 	bl	80016e0 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001b78:	ab04      	add	r3, sp, #16
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	f3af 8000 	nop.w
 8001b82:	2800      	cmp	r0, #0
 8001b84:	d157      	bne.n	8001c36 <__gnu_unwind_pr_common+0x22a>
 8001b86:	f108 0208 	add.w	r2, r8, #8
 8001b8a:	e7a2      	b.n	8001ad2 <__gnu_unwind_pr_common+0xc6>
 8001b8c:	210d      	movs	r1, #13
 8001b8e:	4658      	mov	r0, fp
 8001b90:	f7ff feca 	bl	8001928 <_Unwind_GetGR>
 8001b94:	6a2b      	ldr	r3, [r5, #32]
 8001b96:	4283      	cmp	r3, r0
 8001b98:	d1f5      	bne.n	8001b86 <__gnu_unwind_pr_common+0x17a>
 8001b9a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001b9c:	4598      	cmp	r8, r3
 8001b9e:	d1f2      	bne.n	8001b86 <__gnu_unwind_pr_common+0x17a>
 8001ba0:	4640      	mov	r0, r8
 8001ba2:	f7ff fcd5 	bl	8001550 <selfrel_offset31>
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4658      	mov	r0, fp
 8001bac:	f7ff fee2 	bl	8001974 <_Unwind_SetGR>
 8001bb0:	462a      	mov	r2, r5
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4658      	mov	r0, fp
 8001bb6:	f7ff fedd 	bl	8001974 <_Unwind_SetGR>
 8001bba:	e7a6      	b.n	8001b0a <__gnu_unwind_pr_common+0xfe>
 8001bbc:	210d      	movs	r1, #13
 8001bbe:	4658      	mov	r0, fp
 8001bc0:	9303      	str	r3, [sp, #12]
 8001bc2:	f7ff feb1 	bl	8001928 <_Unwind_GetGR>
 8001bc6:	6a2a      	ldr	r2, [r5, #32]
 8001bc8:	9b03      	ldr	r3, [sp, #12]
 8001bca:	4282      	cmp	r2, r0
 8001bcc:	d1b7      	bne.n	8001b3e <__gnu_unwind_pr_common+0x132>
 8001bce:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001bd0:	4590      	cmp	r8, r2
 8001bd2:	d1b4      	bne.n	8001b3e <__gnu_unwind_pr_common+0x132>
 8001bd4:	2700      	movs	r7, #0
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 8001bdc:	4442      	add	r2, r8
 8001bde:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001be0:	636a      	str	r2, [r5, #52]	@ 0x34
 8001be2:	f8d8 2000 	ldr.w	r2, [r8]
 8001be6:	42ba      	cmp	r2, r7
 8001be8:	db56      	blt.n	8001c98 <__gnu_unwind_pr_common+0x28c>
 8001bea:	2201      	movs	r2, #1
 8001bec:	9202      	str	r2, [sp, #8]
 8001bee:	e7aa      	b.n	8001b46 <__gnu_unwind_pr_common+0x13a>
 8001bf0:	9403      	str	r4, [sp, #12]
 8001bf2:	2600      	movs	r6, #0
 8001bf4:	461c      	mov	r4, r3
 8001bf6:	f108 0a04 	add.w	sl, r8, #4
 8001bfa:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8001bfe:	e00d      	b.n	8001c1c <__gnu_unwind_pr_common+0x210>
 8001c00:	4650      	mov	r0, sl
 8001c02:	9704      	str	r7, [sp, #16]
 8001c04:	f7ff fd6c 	bl	80016e0 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4601      	mov	r1, r0
 8001c0c:	ab04      	add	r3, sp, #16
 8001c0e:	4628      	mov	r0, r5
 8001c10:	3601      	adds	r6, #1
 8001c12:	f10a 0a04 	add.w	sl, sl, #4
 8001c16:	f3af 8000 	nop.w
 8001c1a:	b9e8      	cbnz	r0, 8001c58 <__gnu_unwind_pr_common+0x24c>
 8001c1c:	42a6      	cmp	r6, r4
 8001c1e:	d1ef      	bne.n	8001c00 <__gnu_unwind_pr_common+0x1f4>
 8001c20:	210d      	movs	r1, #13
 8001c22:	4658      	mov	r0, fp
 8001c24:	f7ff fe80 	bl	8001928 <_Unwind_GetGR>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	9a04      	ldr	r2, [sp, #16]
 8001c2c:	2006      	movs	r0, #6
 8001c2e:	e9c5 2809 	strd	r2, r8, [r5, #36]	@ 0x24
 8001c32:	622b      	str	r3, [r5, #32]
 8001c34:	e714      	b.n	8001a60 <__gnu_unwind_pr_common+0x54>
 8001c36:	4604      	mov	r4, r0
 8001c38:	210d      	movs	r1, #13
 8001c3a:	4658      	mov	r0, fp
 8001c3c:	f7ff fe74 	bl	8001928 <_Unwind_GetGR>
 8001c40:	9e04      	ldr	r6, [sp, #16]
 8001c42:	2c02      	cmp	r4, #2
 8001c44:	bf08      	it	eq
 8001c46:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8001c48:	6228      	str	r0, [r5, #32]
 8001c4a:	bf08      	it	eq
 8001c4c:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 8001c50:	2006      	movs	r0, #6
 8001c52:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8001c56:	e703      	b.n	8001a60 <__gnu_unwind_pr_common+0x54>
 8001c58:	4623      	mov	r3, r4
 8001c5a:	f8d8 6000 	ldr.w	r6, [r8]
 8001c5e:	9c03      	ldr	r4, [sp, #12]
 8001c60:	e76d      	b.n	8001b3e <__gnu_unwind_pr_common+0x132>
 8001c62:	4640      	mov	r0, r8
 8001c64:	f7ff fc74 	bl	8001550 <selfrel_offset31>
 8001c68:	f108 0204 	add.w	r2, r8, #4
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	63aa      	str	r2, [r5, #56]	@ 0x38
 8001c70:	4628      	mov	r0, r5
 8001c72:	f3af 8000 	nop.w
 8001c76:	2800      	cmp	r0, #0
 8001c78:	f43f aef1 	beq.w	8001a5e <__gnu_unwind_pr_common+0x52>
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	210f      	movs	r1, #15
 8001c80:	4658      	mov	r0, fp
 8001c82:	f7ff fe77 	bl	8001974 <_Unwind_SetGR>
 8001c86:	e740      	b.n	8001b0a <__gnu_unwind_pr_common+0xfe>
 8001c88:	460c      	mov	r4, r1
 8001c8a:	4658      	mov	r0, fp
 8001c8c:	210d      	movs	r1, #13
 8001c8e:	f7ff fe4b 	bl	8001928 <_Unwind_GetGR>
 8001c92:	4626      	mov	r6, r4
 8001c94:	6228      	str	r0, [r5, #32]
 8001c96:	e7db      	b.n	8001c50 <__gnu_unwind_pr_common+0x244>
 8001c98:	1c58      	adds	r0, r3, #1
 8001c9a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8001c9e:	e780      	b.n	8001ba2 <__gnu_unwind_pr_common+0x196>
 8001ca0:	00000000 	.word	0x00000000

08001ca4 <__aeabi_unwind_cpp_pr0>:
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e6b1      	b.n	8001a0c <__gnu_unwind_pr_common>

08001ca8 <__aeabi_unwind_cpp_pr1>:
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e6af      	b.n	8001a0c <__gnu_unwind_pr_common>

08001cac <__aeabi_unwind_cpp_pr2>:
 8001cac:	2302      	movs	r3, #2
 8001cae:	e6ad      	b.n	8001a0c <__gnu_unwind_pr_common>

08001cb0 <_Unwind_VRS_Pop>:
 8001cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cb4:	4606      	mov	r6, r0
 8001cb6:	4615      	mov	r5, r2
 8001cb8:	461c      	mov	r4, r3
 8001cba:	b0c3      	sub	sp, #268	@ 0x10c
 8001cbc:	2904      	cmp	r1, #4
 8001cbe:	f200 80cd 	bhi.w	8001e5c <_Unwind_VRS_Pop+0x1ac>
 8001cc2:	e8df f001 	tbb	[pc, r1]
 8001cc6:	51ac      	.short	0x51ac
 8001cc8:	2acb      	.short	0x2acb
 8001cca:	03          	.byte	0x03
 8001ccb:	00          	.byte	0x00
 8001ccc:	2c00      	cmp	r4, #0
 8001cce:	f040 80c5 	bne.w	8001e5c <_Unwind_VRS_Pop+0x1ac>
 8001cd2:	2a10      	cmp	r2, #16
 8001cd4:	f200 80c2 	bhi.w	8001e5c <_Unwind_VRS_Pop+0x1ac>
 8001cd8:	6803      	ldr	r3, [r0, #0]
 8001cda:	06dc      	lsls	r4, r3, #27
 8001cdc:	f100 80e3 	bmi.w	8001ea6 <_Unwind_VRS_Pop+0x1f6>
 8001ce0:	af20      	add	r7, sp, #128	@ 0x80
 8001ce2:	4638      	mov	r0, r7
 8001ce4:	f000 f9a6 	bl	8002034 <__gnu_Unwind_Save_WMMXC>
 8001ce8:	2401      	movs	r4, #1
 8001cea:	4638      	mov	r0, r7
 8001cec:	2300      	movs	r3, #0
 8001cee:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8001cf0:	fa04 f203 	lsl.w	r2, r4, r3
 8001cf4:	422a      	tst	r2, r5
 8001cf6:	f103 0301 	add.w	r3, r3, #1
 8001cfa:	d005      	beq.n	8001d08 <_Unwind_VRS_Pop+0x58>
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	f852 cb04 	ldr.w	ip, [r2], #4
 8001d02:	4611      	mov	r1, r2
 8001d04:	f8c0 c000 	str.w	ip, [r0]
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	f100 0004 	add.w	r0, r0, #4
 8001d0e:	d1ef      	bne.n	8001cf0 <_Unwind_VRS_Pop+0x40>
 8001d10:	4638      	mov	r0, r7
 8001d12:	63b1      	str	r1, [r6, #56]	@ 0x38
 8001d14:	f000 f984 	bl	8002020 <__gnu_Unwind_Restore_WMMXC>
 8001d18:	e095      	b.n	8001e46 <_Unwind_VRS_Pop+0x196>
 8001d1a:	2c03      	cmp	r4, #3
 8001d1c:	f040 809e 	bne.w	8001e5c <_Unwind_VRS_Pop+0x1ac>
 8001d20:	b294      	uxth	r4, r2
 8001d22:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8001d2c:	f200 8096 	bhi.w	8001e5c <_Unwind_VRS_Pop+0x1ac>
 8001d30:	6803      	ldr	r3, [r0, #0]
 8001d32:	071f      	lsls	r7, r3, #28
 8001d34:	f100 80bf 	bmi.w	8001eb6 <_Unwind_VRS_Pop+0x206>
 8001d38:	af20      	add	r7, sp, #128	@ 0x80
 8001d3a:	4638      	mov	r0, r7
 8001d3c:	f000 f94e 	bl	8001fdc <__gnu_Unwind_Save_WMMXD>
 8001d40:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001d42:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001d46:	b154      	cbz	r4, 8001d5e <_Unwind_VRS_Pop+0xae>
 8001d48:	460b      	mov	r3, r1
 8001d4a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001d4e:	1ad0      	subs	r0, r2, r3
 8001d50:	00e4      	lsls	r4, r4, #3
 8001d52:	581d      	ldr	r5, [r3, r0]
 8001d54:	f843 5b04 	str.w	r5, [r3], #4
 8001d58:	428b      	cmp	r3, r1
 8001d5a:	d1fa      	bne.n	8001d52 <_Unwind_VRS_Pop+0xa2>
 8001d5c:	4422      	add	r2, r4
 8001d5e:	4638      	mov	r0, r7
 8001d60:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001d62:	f000 f919 	bl	8001f98 <__gnu_Unwind_Restore_WMMXD>
 8001d66:	e06e      	b.n	8001e46 <_Unwind_VRS_Pop+0x196>
 8001d68:	2c01      	cmp	r4, #1
 8001d6a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8001d6e:	b295      	uxth	r5, r2
 8001d70:	d06d      	beq.n	8001e4e <_Unwind_VRS_Pop+0x19e>
 8001d72:	2c05      	cmp	r4, #5
 8001d74:	d172      	bne.n	8001e5c <_Unwind_VRS_Pop+0x1ac>
 8001d76:	eb08 0905 	add.w	r9, r8, r5
 8001d7a:	f1b9 0f20 	cmp.w	r9, #32
 8001d7e:	d86d      	bhi.n	8001e5c <_Unwind_VRS_Pop+0x1ac>
 8001d80:	f1b8 0f0f 	cmp.w	r8, #15
 8001d84:	d86e      	bhi.n	8001e64 <_Unwind_VRS_Pop+0x1b4>
 8001d86:	f1b9 0f10 	cmp.w	r9, #16
 8001d8a:	6803      	ldr	r3, [r0, #0]
 8001d8c:	f200 809b 	bhi.w	8001ec6 <_Unwind_VRS_Pop+0x216>
 8001d90:	07d9      	lsls	r1, r3, #31
 8001d92:	d508      	bpl.n	8001da6 <_Unwind_VRS_Pop+0xf6>
 8001d94:	4630      	mov	r0, r6
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	f043 0302 	orr.w	r3, r3, #2
 8001d9e:	f840 3b48 	str.w	r3, [r0], #72
 8001da2:	f000 f8ed 	bl	8001f80 <__gnu_Unwind_Save_VFP_D>
 8001da6:	af20      	add	r7, sp, #128	@ 0x80
 8001da8:	4638      	mov	r0, r7
 8001daa:	f000 f8e9 	bl	8001f80 <__gnu_Unwind_Save_VFP_D>
 8001dae:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001db0:	2d00      	cmp	r5, #0
 8001db2:	f000 80b5 	beq.w	8001f20 <_Unwind_VRS_Pop+0x270>
 8001db6:	006d      	lsls	r5, r5, #1
 8001db8:	1e6a      	subs	r2, r5, #1
 8001dba:	2500      	movs	r5, #0
 8001dbc:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001dc0:	3201      	adds	r2, #1
 8001dc2:	3904      	subs	r1, #4
 8001dc4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001dc8:	f853 0b04 	ldr.w	r0, [r3], #4
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	f841 0f04 	str.w	r0, [r1, #4]!
 8001dd2:	d1f9      	bne.n	8001dc8 <_Unwind_VRS_Pop+0x118>
 8001dd4:	2d00      	cmp	r5, #0
 8001dd6:	f000 809d 	beq.w	8001f14 <_Unwind_VRS_Pop+0x264>
 8001dda:	4641      	mov	r1, r8
 8001ddc:	2910      	cmp	r1, #16
 8001dde:	bf38      	it	cc
 8001de0:	2110      	movcc	r1, #16
 8001de2:	466f      	mov	r7, sp
 8001de4:	006b      	lsls	r3, r5, #1
 8001de6:	3910      	subs	r1, #16
 8001de8:	3b01      	subs	r3, #1
 8001dea:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001dee:	3301      	adds	r3, #1
 8001df0:	3904      	subs	r1, #4
 8001df2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001df6:	f852 0b04 	ldr.w	r0, [r2], #4
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	f841 0f04 	str.w	r0, [r1, #4]!
 8001e00:	d1f9      	bne.n	8001df6 <_Unwind_VRS_Pop+0x146>
 8001e02:	2c01      	cmp	r4, #1
 8001e04:	f000 8084 	beq.w	8001f10 <_Unwind_VRS_Pop+0x260>
 8001e08:	f1b8 0f0f 	cmp.w	r8, #15
 8001e0c:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001e0e:	d802      	bhi.n	8001e16 <_Unwind_VRS_Pop+0x166>
 8001e10:	a820      	add	r0, sp, #128	@ 0x80
 8001e12:	f000 f8b1 	bl	8001f78 <__gnu_Unwind_Restore_VFP_D>
 8001e16:	4638      	mov	r0, r7
 8001e18:	f000 f8b6 	bl	8001f88 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001e1c:	e013      	b.n	8001e46 <_Unwind_VRS_Pop+0x196>
 8001e1e:	b9ec      	cbnz	r4, 8001e5c <_Unwind_VRS_Pop+0x1ac>
 8001e20:	4623      	mov	r3, r4
 8001e22:	2401      	movs	r4, #1
 8001e24:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8001e26:	1d37      	adds	r7, r6, #4
 8001e28:	b290      	uxth	r0, r2
 8001e2a:	fa04 f203 	lsl.w	r2, r4, r3
 8001e2e:	4202      	tst	r2, r0
 8001e30:	bf1c      	itt	ne
 8001e32:	f851 2b04 	ldrne.w	r2, [r1], #4
 8001e36:	f847 2023 	strne.w	r2, [r7, r3, lsl #2]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	2b10      	cmp	r3, #16
 8001e3e:	d1f4      	bne.n	8001e2a <_Unwind_VRS_Pop+0x17a>
 8001e40:	04a8      	lsls	r0, r5, #18
 8001e42:	d400      	bmi.n	8001e46 <_Unwind_VRS_Pop+0x196>
 8001e44:	63b1      	str	r1, [r6, #56]	@ 0x38
 8001e46:	2000      	movs	r0, #0
 8001e48:	b043      	add	sp, #268	@ 0x10c
 8001e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e4e:	eb08 0305 	add.w	r3, r8, r5
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d802      	bhi.n	8001e5c <_Unwind_VRS_Pop+0x1ac>
 8001e56:	f1b8 0f10 	cmp.w	r8, #16
 8001e5a:	d114      	bne.n	8001e86 <_Unwind_VRS_Pop+0x1d6>
 8001e5c:	2002      	movs	r0, #2
 8001e5e:	b043      	add	sp, #268	@ 0x10c
 8001e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e64:	2d00      	cmp	r5, #0
 8001e66:	d0ee      	beq.n	8001e46 <_Unwind_VRS_Pop+0x196>
 8001e68:	6803      	ldr	r3, [r0, #0]
 8001e6a:	075a      	lsls	r2, r3, #29
 8001e6c:	d45c      	bmi.n	8001f28 <_Unwind_VRS_Pop+0x278>
 8001e6e:	466f      	mov	r7, sp
 8001e70:	4638      	mov	r0, r7
 8001e72:	f000 f88d 	bl	8001f90 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001e76:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001e78:	006b      	lsls	r3, r5, #1
 8001e7a:	f1a8 0110 	sub.w	r1, r8, #16
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001e84:	e7b3      	b.n	8001dee <_Unwind_VRS_Pop+0x13e>
 8001e86:	6803      	ldr	r3, [r0, #0]
 8001e88:	07da      	lsls	r2, r3, #31
 8001e8a:	d459      	bmi.n	8001f40 <_Unwind_VRS_Pop+0x290>
 8001e8c:	af20      	add	r7, sp, #128	@ 0x80
 8001e8e:	4638      	mov	r0, r7
 8001e90:	f000 f86e 	bl	8001f70 <__gnu_Unwind_Save_VFP>
 8001e94:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001e96:	2d00      	cmp	r5, #0
 8001e98:	d18d      	bne.n	8001db6 <_Unwind_VRS_Pop+0x106>
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	4638      	mov	r0, r7
 8001e9e:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001ea0:	f000 f862 	bl	8001f68 <__gnu_Unwind_Restore_VFP>
 8001ea4:	e7cf      	b.n	8001e46 <_Unwind_VRS_Pop+0x196>
 8001ea6:	f023 0310 	bic.w	r3, r3, #16
 8001eaa:	6003      	str	r3, [r0, #0]
 8001eac:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8001eb0:	f000 f8c0 	bl	8002034 <__gnu_Unwind_Save_WMMXC>
 8001eb4:	e714      	b.n	8001ce0 <_Unwind_VRS_Pop+0x30>
 8001eb6:	f023 0308 	bic.w	r3, r3, #8
 8001eba:	6003      	str	r3, [r0, #0]
 8001ebc:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8001ec0:	f000 f88c 	bl	8001fdc <__gnu_Unwind_Save_WMMXD>
 8001ec4:	e738      	b.n	8001d38 <_Unwind_VRS_Pop+0x88>
 8001ec6:	07d9      	lsls	r1, r3, #31
 8001ec8:	d508      	bpl.n	8001edc <_Unwind_VRS_Pop+0x22c>
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	f840 3b48 	str.w	r3, [r0], #72
 8001ed6:	f000 f853 	bl	8001f80 <__gnu_Unwind_Save_VFP_D>
 8001eda:	6833      	ldr	r3, [r6, #0]
 8001edc:	0758      	lsls	r0, r3, #29
 8001ede:	d506      	bpl.n	8001eee <_Unwind_VRS_Pop+0x23e>
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
 8001ee6:	f840 3bd0 	str.w	r3, [r0], #208
 8001eea:	f000 f851 	bl	8001f90 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001eee:	af20      	add	r7, sp, #128	@ 0x80
 8001ef0:	4638      	mov	r0, r7
 8001ef2:	f000 f845 	bl	8001f80 <__gnu_Unwind_Save_VFP_D>
 8001ef6:	4668      	mov	r0, sp
 8001ef8:	f000 f84a 	bl	8001f90 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001efc:	f1c8 0210 	rsb	r2, r8, #16
 8001f00:	0052      	lsls	r2, r2, #1
 8001f02:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001f04:	f1a9 0510 	sub.w	r5, r9, #16
 8001f08:	3a01      	subs	r2, #1
 8001f0a:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001f0e:	e757      	b.n	8001dc0 <_Unwind_VRS_Pop+0x110>
 8001f10:	af20      	add	r7, sp, #128	@ 0x80
 8001f12:	e7c2      	b.n	8001e9a <_Unwind_VRS_Pop+0x1ea>
 8001f14:	2c01      	cmp	r4, #1
 8001f16:	d0c0      	beq.n	8001e9a <_Unwind_VRS_Pop+0x1ea>
 8001f18:	f1b8 0f0f 	cmp.w	r8, #15
 8001f1c:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001f1e:	d892      	bhi.n	8001e46 <_Unwind_VRS_Pop+0x196>
 8001f20:	4638      	mov	r0, r7
 8001f22:	f000 f829 	bl	8001f78 <__gnu_Unwind_Restore_VFP_D>
 8001f26:	e78e      	b.n	8001e46 <_Unwind_VRS_Pop+0x196>
 8001f28:	466f      	mov	r7, sp
 8001f2a:	f023 0304 	bic.w	r3, r3, #4
 8001f2e:	f840 3bd0 	str.w	r3, [r0], #208
 8001f32:	f000 f82d 	bl	8001f90 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001f36:	4638      	mov	r0, r7
 8001f38:	f000 f82a 	bl	8001f90 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001f3c:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001f3e:	e79b      	b.n	8001e78 <_Unwind_VRS_Pop+0x1c8>
 8001f40:	4630      	mov	r0, r6
 8001f42:	f023 0303 	bic.w	r3, r3, #3
 8001f46:	f840 3b48 	str.w	r3, [r0], #72
 8001f4a:	f000 f811 	bl	8001f70 <__gnu_Unwind_Save_VFP>
 8001f4e:	e79d      	b.n	8001e8c <_Unwind_VRS_Pop+0x1dc>

08001f50 <__restore_core_regs>:
 8001f50:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8001f54:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001f58:	469c      	mov	ip, r3
 8001f5a:	46a6      	mov	lr, r4
 8001f5c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001f60:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001f64:	46e5      	mov	sp, ip
 8001f66:	bd00      	pop	{pc}

08001f68 <__gnu_Unwind_Restore_VFP>:
 8001f68:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop

08001f70 <__gnu_Unwind_Save_VFP>:
 8001f70:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop

08001f78 <__gnu_Unwind_Restore_VFP_D>:
 8001f78:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop

08001f80 <__gnu_Unwind_Save_VFP_D>:
 8001f80:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop

08001f88 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001f88:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop

08001f90 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001f90:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop

08001f98 <__gnu_Unwind_Restore_WMMXD>:
 8001f98:	ecf0 0102 	ldfe	f0, [r0], #8
 8001f9c:	ecf0 1102 	ldfe	f1, [r0], #8
 8001fa0:	ecf0 2102 	ldfe	f2, [r0], #8
 8001fa4:	ecf0 3102 	ldfe	f3, [r0], #8
 8001fa8:	ecf0 4102 	ldfe	f4, [r0], #8
 8001fac:	ecf0 5102 	ldfe	f5, [r0], #8
 8001fb0:	ecf0 6102 	ldfe	f6, [r0], #8
 8001fb4:	ecf0 7102 	ldfe	f7, [r0], #8
 8001fb8:	ecf0 8102 	ldfp	f0, [r0], #8
 8001fbc:	ecf0 9102 	ldfp	f1, [r0], #8
 8001fc0:	ecf0 a102 	ldfp	f2, [r0], #8
 8001fc4:	ecf0 b102 	ldfp	f3, [r0], #8
 8001fc8:	ecf0 c102 	ldfp	f4, [r0], #8
 8001fcc:	ecf0 d102 	ldfp	f5, [r0], #8
 8001fd0:	ecf0 e102 	ldfp	f6, [r0], #8
 8001fd4:	ecf0 f102 	ldfp	f7, [r0], #8
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop

08001fdc <__gnu_Unwind_Save_WMMXD>:
 8001fdc:	ece0 0102 	stfe	f0, [r0], #8
 8001fe0:	ece0 1102 	stfe	f1, [r0], #8
 8001fe4:	ece0 2102 	stfe	f2, [r0], #8
 8001fe8:	ece0 3102 	stfe	f3, [r0], #8
 8001fec:	ece0 4102 	stfe	f4, [r0], #8
 8001ff0:	ece0 5102 	stfe	f5, [r0], #8
 8001ff4:	ece0 6102 	stfe	f6, [r0], #8
 8001ff8:	ece0 7102 	stfe	f7, [r0], #8
 8001ffc:	ece0 8102 	stfp	f0, [r0], #8
 8002000:	ece0 9102 	stfp	f1, [r0], #8
 8002004:	ece0 a102 	stfp	f2, [r0], #8
 8002008:	ece0 b102 	stfp	f3, [r0], #8
 800200c:	ece0 c102 	stfp	f4, [r0], #8
 8002010:	ece0 d102 	stfp	f5, [r0], #8
 8002014:	ece0 e102 	stfp	f6, [r0], #8
 8002018:	ece0 f102 	stfp	f7, [r0], #8
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop

08002020 <__gnu_Unwind_Restore_WMMXC>:
 8002020:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8002024:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8002028:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800202c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <__gnu_Unwind_Save_WMMXC>:
 8002034:	fca0 8101 	stc2	1, cr8, [r0], #4
 8002038:	fca0 9101 	stc2	1, cr9, [r0], #4
 800203c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8002040:	fca0 b101 	stc2	1, cr11, [r0], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop

08002048 <_Unwind_RaiseException>:
 8002048:	46ec      	mov	ip, sp
 800204a:	b500      	push	{lr}
 800204c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8002050:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	e92d 000c 	stmdb	sp!, {r2, r3}
 800205c:	a901      	add	r1, sp, #4
 800205e:	f7ff fbd9 	bl	8001814 <__gnu_Unwind_RaiseException>
 8002062:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8002066:	b012      	add	sp, #72	@ 0x48
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop

0800206c <_Unwind_Resume>:
 800206c:	46ec      	mov	ip, sp
 800206e:	b500      	push	{lr}
 8002070:	e92d 5000 	stmdb	sp!, {ip, lr}
 8002074:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8002080:	a901      	add	r1, sp, #4
 8002082:	f7ff fc05 	bl	8001890 <__gnu_Unwind_Resume>
 8002086:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 800208a:	b012      	add	sp, #72	@ 0x48
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop

08002090 <_Unwind_Resume_or_Rethrow>:
 8002090:	46ec      	mov	ip, sp
 8002092:	b500      	push	{lr}
 8002094:	e92d 5000 	stmdb	sp!, {ip, lr}
 8002098:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80020a4:	a901      	add	r1, sp, #4
 80020a6:	f7ff fc15 	bl	80018d4 <__gnu_Unwind_Resume_or_Rethrow>
 80020aa:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80020ae:	b012      	add	sp, #72	@ 0x48
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop

080020b4 <_Unwind_ForcedUnwind>:
 80020b4:	46ec      	mov	ip, sp
 80020b6:	b500      	push	{lr}
 80020b8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80020bc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80020c8:	ab01      	add	r3, sp, #4
 80020ca:	f7ff fbd7 	bl	800187c <__gnu_Unwind_ForcedUnwind>
 80020ce:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80020d2:	b012      	add	sp, #72	@ 0x48
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop

080020d8 <_Unwind_Backtrace>:
 80020d8:	46ec      	mov	ip, sp
 80020da:	b500      	push	{lr}
 80020dc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80020e0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80020ec:	aa01      	add	r2, sp, #4
 80020ee:	f7ff fc4d 	bl	800198c <__gnu_Unwind_Backtrace>
 80020f2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80020f6:	b012      	add	sp, #72	@ 0x48
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop

080020fc <next_unwind_byte>:
 80020fc:	7a02      	ldrb	r2, [r0, #8]
 80020fe:	4603      	mov	r3, r0
 8002100:	b97a      	cbnz	r2, 8002122 <next_unwind_byte+0x26>
 8002102:	7a42      	ldrb	r2, [r0, #9]
 8002104:	b1a2      	cbz	r2, 8002130 <next_unwind_byte+0x34>
 8002106:	f04f 0c03 	mov.w	ip, #3
 800210a:	6841      	ldr	r1, [r0, #4]
 800210c:	3a01      	subs	r2, #1
 800210e:	7242      	strb	r2, [r0, #9]
 8002110:	6808      	ldr	r0, [r1, #0]
 8002112:	1d0a      	adds	r2, r1, #4
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	0202      	lsls	r2, r0, #8
 8002118:	f883 c008 	strb.w	ip, [r3, #8]
 800211c:	0e00      	lsrs	r0, r0, #24
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	4770      	bx	lr
 8002122:	6800      	ldr	r0, [r0, #0]
 8002124:	3a01      	subs	r2, #1
 8002126:	721a      	strb	r2, [r3, #8]
 8002128:	0202      	lsls	r2, r0, #8
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	0e00      	lsrs	r0, r0, #24
 800212e:	4770      	bx	lr
 8002130:	20b0      	movs	r0, #176	@ 0xb0
 8002132:	4770      	bx	lr

08002134 <_Unwind_GetGR.constprop.0>:
 8002134:	2300      	movs	r3, #0
 8002136:	b500      	push	{lr}
 8002138:	b085      	sub	sp, #20
 800213a:	a903      	add	r1, sp, #12
 800213c:	9100      	str	r1, [sp, #0]
 800213e:	220c      	movs	r2, #12
 8002140:	4619      	mov	r1, r3
 8002142:	f7ff fbd9 	bl	80018f8 <_Unwind_VRS_Get>
 8002146:	9803      	ldr	r0, [sp, #12]
 8002148:	b005      	add	sp, #20
 800214a:	f85d fb04 	ldr.w	pc, [sp], #4
 800214e:	bf00      	nop

08002150 <unwind_UCB_from_context>:
 8002150:	e7f0      	b.n	8002134 <_Unwind_GetGR.constprop.0>
 8002152:	bf00      	nop

08002154 <__gnu_unwind_execute>:
 8002154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002158:	f04f 0800 	mov.w	r8, #0
 800215c:	4606      	mov	r6, r0
 800215e:	460d      	mov	r5, r1
 8002160:	b085      	sub	sp, #20
 8002162:	4628      	mov	r0, r5
 8002164:	f7ff ffca 	bl	80020fc <next_unwind_byte>
 8002168:	28b0      	cmp	r0, #176	@ 0xb0
 800216a:	4604      	mov	r4, r0
 800216c:	f000 80dc 	beq.w	8002328 <__gnu_unwind_execute+0x1d4>
 8002170:	0607      	lsls	r7, r0, #24
 8002172:	d547      	bpl.n	8002204 <__gnu_unwind_execute+0xb0>
 8002174:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8002178:	2b80      	cmp	r3, #128	@ 0x80
 800217a:	d05f      	beq.n	800223c <__gnu_unwind_execute+0xe8>
 800217c:	2bb0      	cmp	r3, #176	@ 0xb0
 800217e:	d074      	beq.n	800226a <__gnu_unwind_execute+0x116>
 8002180:	d81b      	bhi.n	80021ba <__gnu_unwind_execute+0x66>
 8002182:	2b90      	cmp	r3, #144	@ 0x90
 8002184:	f000 809c 	beq.w	80022c0 <__gnu_unwind_execute+0x16c>
 8002188:	2ba0      	cmp	r3, #160	@ 0xa0
 800218a:	d112      	bne.n	80021b2 <__gnu_unwind_execute+0x5e>
 800218c:	43c3      	mvns	r3, r0
 800218e:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	411a      	asrs	r2, r3
 8002198:	0701      	lsls	r1, r0, #28
 800219a:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 800219e:	d501      	bpl.n	80021a4 <__gnu_unwind_execute+0x50>
 80021a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021a4:	2300      	movs	r3, #0
 80021a6:	4630      	mov	r0, r6
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7ff fd81 	bl	8001cb0 <_Unwind_VRS_Pop>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d0d7      	beq.n	8002162 <__gnu_unwind_execute+0xe>
 80021b2:	2009      	movs	r0, #9
 80021b4:	b005      	add	sp, #20
 80021b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80021bc:	d16e      	bne.n	800229c <__gnu_unwind_execute+0x148>
 80021be:	28c6      	cmp	r0, #198	@ 0xc6
 80021c0:	f000 8094 	beq.w	80022ec <__gnu_unwind_execute+0x198>
 80021c4:	28c7      	cmp	r0, #199	@ 0xc7
 80021c6:	f000 80b4 	beq.w	8002332 <__gnu_unwind_execute+0x1de>
 80021ca:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80021ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80021d0:	f000 80c9 	beq.w	8002366 <__gnu_unwind_execute+0x212>
 80021d4:	28c8      	cmp	r0, #200	@ 0xc8
 80021d6:	f000 80d4 	beq.w	8002382 <__gnu_unwind_execute+0x22e>
 80021da:	28c9      	cmp	r0, #201	@ 0xc9
 80021dc:	d1e9      	bne.n	80021b2 <__gnu_unwind_execute+0x5e>
 80021de:	4628      	mov	r0, r5
 80021e0:	f7ff ff8c 	bl	80020fc <next_unwind_byte>
 80021e4:	2305      	movs	r3, #5
 80021e6:	4604      	mov	r4, r0
 80021e8:	2101      	movs	r1, #1
 80021ea:	4630      	mov	r0, r6
 80021ec:	0322      	lsls	r2, r4, #12
 80021ee:	f004 040f 	and.w	r4, r4, #15
 80021f2:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 80021f6:	440c      	add	r4, r1
 80021f8:	4322      	orrs	r2, r4
 80021fa:	f7ff fd59 	bl	8001cb0 <_Unwind_VRS_Pop>
 80021fe:	2800      	cmp	r0, #0
 8002200:	d0af      	beq.n	8002162 <__gnu_unwind_execute+0xe>
 8002202:	e7d6      	b.n	80021b2 <__gnu_unwind_execute+0x5e>
 8002204:	0083      	lsls	r3, r0, #2
 8002206:	b2db      	uxtb	r3, r3
 8002208:	1d1f      	adds	r7, r3, #4
 800220a:	2300      	movs	r3, #0
 800220c:	f10d 090c 	add.w	r9, sp, #12
 8002210:	4619      	mov	r1, r3
 8002212:	220d      	movs	r2, #13
 8002214:	4630      	mov	r0, r6
 8002216:	f8cd 9000 	str.w	r9, [sp]
 800221a:	f7ff fb6d 	bl	80018f8 <_Unwind_VRS_Get>
 800221e:	9b03      	ldr	r3, [sp, #12]
 8002220:	0660      	lsls	r0, r4, #25
 8002222:	bf4c      	ite	mi
 8002224:	1bdf      	submi	r7, r3, r7
 8002226:	18ff      	addpl	r7, r7, r3
 8002228:	2300      	movs	r3, #0
 800222a:	220d      	movs	r2, #13
 800222c:	4630      	mov	r0, r6
 800222e:	4619      	mov	r1, r3
 8002230:	f8cd 9000 	str.w	r9, [sp]
 8002234:	9703      	str	r7, [sp, #12]
 8002236:	f7ff fb85 	bl	8001944 <_Unwind_VRS_Set>
 800223a:	e792      	b.n	8002162 <__gnu_unwind_execute+0xe>
 800223c:	4628      	mov	r0, r5
 800223e:	f7ff ff5d 	bl	80020fc <next_unwind_byte>
 8002242:	0224      	lsls	r4, r4, #8
 8002244:	4320      	orrs	r0, r4
 8002246:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800224a:	d0b2      	beq.n	80021b2 <__gnu_unwind_execute+0x5e>
 800224c:	2300      	movs	r3, #0
 800224e:	0104      	lsls	r4, r0, #4
 8002250:	4619      	mov	r1, r3
 8002252:	4630      	mov	r0, r6
 8002254:	b2a2      	uxth	r2, r4
 8002256:	f7ff fd2b 	bl	8001cb0 <_Unwind_VRS_Pop>
 800225a:	2800      	cmp	r0, #0
 800225c:	d1a9      	bne.n	80021b2 <__gnu_unwind_execute+0x5e>
 800225e:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8002262:	bf18      	it	ne
 8002264:	f04f 0801 	movne.w	r8, #1
 8002268:	e77b      	b.n	8002162 <__gnu_unwind_execute+0xe>
 800226a:	28b1      	cmp	r0, #177	@ 0xb1
 800226c:	d052      	beq.n	8002314 <__gnu_unwind_execute+0x1c0>
 800226e:	28b2      	cmp	r0, #178	@ 0xb2
 8002270:	f000 80ac 	beq.w	80023cc <__gnu_unwind_execute+0x278>
 8002274:	28b3      	cmp	r0, #179	@ 0xb3
 8002276:	d06e      	beq.n	8002356 <__gnu_unwind_execute+0x202>
 8002278:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 800227c:	2bb4      	cmp	r3, #180	@ 0xb4
 800227e:	d098      	beq.n	80021b2 <__gnu_unwind_execute+0x5e>
 8002280:	2301      	movs	r3, #1
 8002282:	f000 0207 	and.w	r2, r0, #7
 8002286:	441a      	add	r2, r3
 8002288:	4630      	mov	r0, r6
 800228a:	4619      	mov	r1, r3
 800228c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002290:	f7ff fd0e 	bl	8001cb0 <_Unwind_VRS_Pop>
 8002294:	2800      	cmp	r0, #0
 8002296:	f43f af64 	beq.w	8002162 <__gnu_unwind_execute+0xe>
 800229a:	e78a      	b.n	80021b2 <__gnu_unwind_execute+0x5e>
 800229c:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80022a0:	2bd0      	cmp	r3, #208	@ 0xd0
 80022a2:	d186      	bne.n	80021b2 <__gnu_unwind_execute+0x5e>
 80022a4:	f000 0207 	and.w	r2, r0, #7
 80022a8:	3201      	adds	r2, #1
 80022aa:	2305      	movs	r3, #5
 80022ac:	2101      	movs	r1, #1
 80022ae:	4630      	mov	r0, r6
 80022b0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80022b4:	f7ff fcfc 	bl	8001cb0 <_Unwind_VRS_Pop>
 80022b8:	2800      	cmp	r0, #0
 80022ba:	f43f af52 	beq.w	8002162 <__gnu_unwind_execute+0xe>
 80022be:	e778      	b.n	80021b2 <__gnu_unwind_execute+0x5e>
 80022c0:	f000 030d 	and.w	r3, r0, #13
 80022c4:	2b0d      	cmp	r3, #13
 80022c6:	f43f af74 	beq.w	80021b2 <__gnu_unwind_execute+0x5e>
 80022ca:	2300      	movs	r3, #0
 80022cc:	af03      	add	r7, sp, #12
 80022ce:	4619      	mov	r1, r3
 80022d0:	f000 020f 	and.w	r2, r0, #15
 80022d4:	9700      	str	r7, [sp, #0]
 80022d6:	4630      	mov	r0, r6
 80022d8:	f7ff fb0e 	bl	80018f8 <_Unwind_VRS_Get>
 80022dc:	2300      	movs	r3, #0
 80022de:	220d      	movs	r2, #13
 80022e0:	4630      	mov	r0, r6
 80022e2:	4619      	mov	r1, r3
 80022e4:	9700      	str	r7, [sp, #0]
 80022e6:	f7ff fb2d 	bl	8001944 <_Unwind_VRS_Set>
 80022ea:	e73a      	b.n	8002162 <__gnu_unwind_execute+0xe>
 80022ec:	4628      	mov	r0, r5
 80022ee:	f7ff ff05 	bl	80020fc <next_unwind_byte>
 80022f2:	4604      	mov	r4, r0
 80022f4:	2303      	movs	r3, #3
 80022f6:	0322      	lsls	r2, r4, #12
 80022f8:	f004 040f 	and.w	r4, r4, #15
 80022fc:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8002300:	3401      	adds	r4, #1
 8002302:	4630      	mov	r0, r6
 8002304:	4619      	mov	r1, r3
 8002306:	4322      	orrs	r2, r4
 8002308:	f7ff fcd2 	bl	8001cb0 <_Unwind_VRS_Pop>
 800230c:	2800      	cmp	r0, #0
 800230e:	f43f af28 	beq.w	8002162 <__gnu_unwind_execute+0xe>
 8002312:	e74e      	b.n	80021b2 <__gnu_unwind_execute+0x5e>
 8002314:	4628      	mov	r0, r5
 8002316:	f7ff fef1 	bl	80020fc <next_unwind_byte>
 800231a:	1e43      	subs	r3, r0, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b0e      	cmp	r3, #14
 8002320:	4602      	mov	r2, r0
 8002322:	f67f af3f 	bls.w	80021a4 <__gnu_unwind_execute+0x50>
 8002326:	e744      	b.n	80021b2 <__gnu_unwind_execute+0x5e>
 8002328:	f1b8 0f00 	cmp.w	r8, #0
 800232c:	d03e      	beq.n	80023ac <__gnu_unwind_execute+0x258>
 800232e:	2000      	movs	r0, #0
 8002330:	e740      	b.n	80021b4 <__gnu_unwind_execute+0x60>
 8002332:	4628      	mov	r0, r5
 8002334:	f7ff fee2 	bl	80020fc <next_unwind_byte>
 8002338:	1e43      	subs	r3, r0, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b0e      	cmp	r3, #14
 800233e:	4602      	mov	r2, r0
 8002340:	f63f af37 	bhi.w	80021b2 <__gnu_unwind_execute+0x5e>
 8002344:	2300      	movs	r3, #0
 8002346:	2104      	movs	r1, #4
 8002348:	4630      	mov	r0, r6
 800234a:	f7ff fcb1 	bl	8001cb0 <_Unwind_VRS_Pop>
 800234e:	2800      	cmp	r0, #0
 8002350:	f43f af07 	beq.w	8002162 <__gnu_unwind_execute+0xe>
 8002354:	e72d      	b.n	80021b2 <__gnu_unwind_execute+0x5e>
 8002356:	4628      	mov	r0, r5
 8002358:	f7ff fed0 	bl	80020fc <next_unwind_byte>
 800235c:	2301      	movs	r3, #1
 800235e:	4604      	mov	r4, r0
 8002360:	4619      	mov	r1, r3
 8002362:	4630      	mov	r0, r6
 8002364:	e742      	b.n	80021ec <__gnu_unwind_execute+0x98>
 8002366:	2303      	movs	r3, #3
 8002368:	f000 020f 	and.w	r2, r0, #15
 800236c:	3201      	adds	r2, #1
 800236e:	4630      	mov	r0, r6
 8002370:	4619      	mov	r1, r3
 8002372:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8002376:	f7ff fc9b 	bl	8001cb0 <_Unwind_VRS_Pop>
 800237a:	2800      	cmp	r0, #0
 800237c:	f43f aef1 	beq.w	8002162 <__gnu_unwind_execute+0xe>
 8002380:	e717      	b.n	80021b2 <__gnu_unwind_execute+0x5e>
 8002382:	4628      	mov	r0, r5
 8002384:	f7ff feba 	bl	80020fc <next_unwind_byte>
 8002388:	4602      	mov	r2, r0
 800238a:	2101      	movs	r1, #1
 800238c:	f002 04f0 	and.w	r4, r2, #240	@ 0xf0
 8002390:	f002 020f 	and.w	r2, r2, #15
 8002394:	3410      	adds	r4, #16
 8002396:	440a      	add	r2, r1
 8002398:	2305      	movs	r3, #5
 800239a:	4630      	mov	r0, r6
 800239c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80023a0:	f7ff fc86 	bl	8001cb0 <_Unwind_VRS_Pop>
 80023a4:	2800      	cmp	r0, #0
 80023a6:	f43f aedc 	beq.w	8002162 <__gnu_unwind_execute+0xe>
 80023aa:	e702      	b.n	80021b2 <__gnu_unwind_execute+0x5e>
 80023ac:	ac03      	add	r4, sp, #12
 80023ae:	4643      	mov	r3, r8
 80023b0:	4641      	mov	r1, r8
 80023b2:	220e      	movs	r2, #14
 80023b4:	4630      	mov	r0, r6
 80023b6:	9400      	str	r4, [sp, #0]
 80023b8:	f7ff fa9e 	bl	80018f8 <_Unwind_VRS_Get>
 80023bc:	4643      	mov	r3, r8
 80023be:	220f      	movs	r2, #15
 80023c0:	4641      	mov	r1, r8
 80023c2:	4630      	mov	r0, r6
 80023c4:	9400      	str	r4, [sp, #0]
 80023c6:	f7ff fabd 	bl	8001944 <_Unwind_VRS_Set>
 80023ca:	e7b0      	b.n	800232e <__gnu_unwind_execute+0x1da>
 80023cc:	2300      	movs	r3, #0
 80023ce:	f10d 090c 	add.w	r9, sp, #12
 80023d2:	220d      	movs	r2, #13
 80023d4:	4619      	mov	r1, r3
 80023d6:	4630      	mov	r0, r6
 80023d8:	f8cd 9000 	str.w	r9, [sp]
 80023dc:	f7ff fa8c 	bl	80018f8 <_Unwind_VRS_Get>
 80023e0:	4628      	mov	r0, r5
 80023e2:	f7ff fe8b 	bl	80020fc <next_unwind_byte>
 80023e6:	0602      	lsls	r2, r0, #24
 80023e8:	f04f 0702 	mov.w	r7, #2
 80023ec:	9c03      	ldr	r4, [sp, #12]
 80023ee:	d50b      	bpl.n	8002408 <__gnu_unwind_execute+0x2b4>
 80023f0:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80023f4:	40b8      	lsls	r0, r7
 80023f6:	4404      	add	r4, r0
 80023f8:	4628      	mov	r0, r5
 80023fa:	9403      	str	r4, [sp, #12]
 80023fc:	f7ff fe7e 	bl	80020fc <next_unwind_byte>
 8002400:	0603      	lsls	r3, r0, #24
 8002402:	f107 0707 	add.w	r7, r7, #7
 8002406:	d4f3      	bmi.n	80023f0 <__gnu_unwind_execute+0x29c>
 8002408:	2300      	movs	r3, #0
 800240a:	fa00 f207 	lsl.w	r2, r0, r7
 800240e:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8002412:	4422      	add	r2, r4
 8002414:	9203      	str	r2, [sp, #12]
 8002416:	4630      	mov	r0, r6
 8002418:	220d      	movs	r2, #13
 800241a:	4619      	mov	r1, r3
 800241c:	f8cd 9000 	str.w	r9, [sp]
 8002420:	f7ff fa90 	bl	8001944 <_Unwind_VRS_Set>
 8002424:	e69d      	b.n	8002162 <__gnu_unwind_execute+0xe>
 8002426:	bf00      	nop

08002428 <__gnu_unwind_frame>:
 8002428:	460b      	mov	r3, r1
 800242a:	f04f 0c03 	mov.w	ip, #3
 800242e:	b500      	push	{lr}
 8002430:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002432:	4618      	mov	r0, r3
 8002434:	6853      	ldr	r3, [r2, #4]
 8002436:	b085      	sub	sp, #20
 8002438:	3208      	adds	r2, #8
 800243a:	9202      	str	r2, [sp, #8]
 800243c:	a901      	add	r1, sp, #4
 800243e:	0e1a      	lsrs	r2, r3, #24
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	f88d c00c 	strb.w	ip, [sp, #12]
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	f88d 200d 	strb.w	r2, [sp, #13]
 800244c:	f7ff fe82 	bl	8002154 <__gnu_unwind_execute>
 8002450:	b005      	add	sp, #20
 8002452:	f85d fb04 	ldr.w	pc, [sp], #4
 8002456:	bf00      	nop

08002458 <_Unwind_GetRegionStart>:
 8002458:	b508      	push	{r3, lr}
 800245a:	f7ff fe79 	bl	8002150 <unwind_UCB_from_context>
 800245e:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8002460:	bd08      	pop	{r3, pc}
 8002462:	bf00      	nop

08002464 <_Unwind_GetLanguageSpecificData>:
 8002464:	b508      	push	{r3, lr}
 8002466:	f7ff fe73 	bl	8002150 <unwind_UCB_from_context>
 800246a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800246c:	79c3      	ldrb	r3, [r0, #7]
 800246e:	3302      	adds	r3, #2
 8002470:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002474:	bd08      	pop	{r3, pc}
 8002476:	bf00      	nop

08002478 <__aeabi_idiv0>:
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	0000      	movs	r0, r0
	...

08002480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002480:	b5b0      	push	{r4, r5, r7, lr}
 8002482:	b0b0      	sub	sp, #192	@ 0xc0
 8002484:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002486:	f000 fe73 	bl	8003170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800248a:	f000 f967 	bl	800275c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800248e:	f000 fadb 	bl	8002a48 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002492:	f000 f9bf 	bl	8002814 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002496:	f000 f9fb 	bl	8002890 <MX_I2C1_Init>
  MX_SPI1_Init();
 800249a:	f000 fa27 	bl	80028ec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800249e:	f000 faa9 	bl	80029f4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80024a2:	f000 fa59 	bl	8002958 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  	//GPIO SETUP
    HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024ac:	4892      	ldr	r0, [pc, #584]	@ (80026f8 <main+0x278>)
 80024ae:	f001 fc6c 	bl	8003d8a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80024b2:	2201      	movs	r2, #1
 80024b4:	2110      	movs	r1, #16
 80024b6:	4891      	ldr	r0, [pc, #580]	@ (80026fc <main+0x27c>)
 80024b8:	f001 fc67 	bl	8003d8a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024c2:	488d      	ldr	r0, [pc, #564]	@ (80026f8 <main+0x278>)
 80024c4:	f001 fc61 	bl	8003d8a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2120      	movs	r1, #32
 80024cc:	488c      	ldr	r0, [pc, #560]	@ (8002700 <main+0x280>)
 80024ce:	f001 fc5c 	bl	8003d8a <HAL_GPIO_WritePin>

    // ADC board expander setup
    TCA_Init(0b0100001, hi2c1);
 80024d2:	4c8c      	ldr	r4, [pc, #560]	@ (8002704 <main+0x284>)
 80024d4:	4668      	mov	r0, sp
 80024d6:	f104 030c 	add.w	r3, r4, #12
 80024da:	2248      	movs	r2, #72	@ 0x48
 80024dc:	4619      	mov	r1, r3
 80024de:	f009 fb62 	bl	800bba6 <memcpy>
 80024e2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80024e6:	2021      	movs	r0, #33	@ 0x21
 80024e8:	f006 ff2c 	bl	8009344 <TCA_Init>

    TCA_PinMode(P07, 0);
 80024ec:	2100      	movs	r1, #0
 80024ee:	2007      	movs	r0, #7
 80024f0:	f006 ff4e 	bl	8009390 <TCA_PinMode>
    TCA_PinMode(P11, 0);
 80024f4:	2100      	movs	r1, #0
 80024f6:	2009      	movs	r0, #9
 80024f8:	f006 ff4a 	bl	8009390 <TCA_PinMode>
    TCA_PinMode(P12, 0);
 80024fc:	2100      	movs	r1, #0
 80024fe:	200a      	movs	r0, #10
 8002500:	f006 ff46 	bl	8009390 <TCA_PinMode>

    TCA_WritePin(P07, 1);
 8002504:	2101      	movs	r1, #1
 8002506:	2007      	movs	r0, #7
 8002508:	f006 ff9a 	bl	8009440 <TCA_WritePin>
    TCA_WritePin(P11, 0);
 800250c:	2100      	movs	r1, #0
 800250e:	2009      	movs	r0, #9
 8002510:	f006 ff96 	bl	8009440 <TCA_WritePin>
    TCA_WritePin(P12, 0);
 8002514:	2100      	movs	r1, #0
 8002516:	200a      	movs	r0, #10
 8002518:	f006 ff92 	bl	8009440 <TCA_WritePin>

    // High-speed DAC setup
    DACREF(0.0);
 800251c:	f04f 0000 	mov.w	r0, #0
 8002520:	f005 fca6 	bl	8007e70 <DACREF>
    DACOFFS(0.0);
 8002524:	f04f 0000 	mov.w	r0, #0
 8002528:	f005 fd02 	bl	8007f30 <DACOFFS>

    // High-speed ADC setup
    ADCREF(1.2);
 800252c:	4876      	ldr	r0, [pc, #472]	@ (8002708 <main+0x288>)
 800252e:	f005 fd67 	bl	8008000 <ADCREF>
    ADCOFFS(0.0);
 8002532:	f04f 0000 	mov.w	r0, #0
 8002536:	f005 fdbf 	bl	80080b8 <ADCOFFS>

    //HAL_TIM_Base_Start_IT(&htim4);

    // system functions setup
    Function SYSfunctions[] = { {.name = "ID", .run = SCPIC_SYS_ID},
 800253a:	4b74      	ldr	r3, [pc, #464]	@ (800270c <main+0x28c>)
 800253c:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8002540:	461d      	mov	r5, r3
 8002542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002546:	e895 0003 	ldmia.w	r5, {r0, r1}
 800254a:	e884 0003 	stmia.w	r4, {r0, r1}
       							 {.name = "RESET", .run = SCPIC_SYS_RESET},
   								 {.name = "APPLY", .run = SCPIC_SYS_APPLY}	};

    Class SYSclass = { .name = "SYS", .functions = SYSfunctions, .functionsLength = 3 };
 800254e:	4b70      	ldr	r3, [pc, #448]	@ (8002710 <main+0x290>)
 8002550:	657b      	str	r3, [r7, #84]	@ 0x54
 8002552:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002556:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002558:	2303      	movs	r3, #3
 800255a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    addClass(&SYSclass, 0);
 800255c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f006 fb24 	bl	8008bb0 <addClass>

    // output functions setup
    Function OUTfunctions[] = { {.name = "MAXAMPLITUDE", .run = SCPIC_OUT_MAXAMPLITUDE},
 8002568:	4b6a      	ldr	r3, [pc, #424]	@ (8002714 <main+0x294>)
 800256a:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800256e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           						{.name = "MODE", .run = SCPIC_OUT_MODE} };

    Class OUTclass = { .name = "OUT", .functions = OUTfunctions, .functionsLength = 2 };
 8002574:	4b68      	ldr	r3, [pc, #416]	@ (8002718 <main+0x298>)
 8002576:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002578:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800257c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800257e:	2302      	movs	r3, #2
 8002580:	643b      	str	r3, [r7, #64]	@ 0x40
    addClass(&OUTclass, 0);
 8002582:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f006 fb11 	bl	8008bb0 <addClass>

    //SCPI setup
    Function Lolafunctions[] = { {.name = "FID", .run = SCPIC_FID},
 800258e:	4b63      	ldr	r3, [pc, #396]	@ (800271c <main+0x29c>)
 8002590:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								 {.name = "INIT", .run = SCPIC_INIT}	};


    Class Lolaclass = { .name = "LOLA", .functions = Lolafunctions, .functionsLength = 2 };
 800259a:	4b61      	ldr	r3, [pc, #388]	@ (8002720 <main+0x2a0>)
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	2302      	movs	r3, #2
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
    addClass(&Lolaclass, 0);
 80025a8:	f107 031c 	add.w	r3, r7, #28
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f006 fafe 	bl	8008bb0 <addClass>

    Function DVMfunctions[] = { {.name = "RAW", .run = SCPIC_DVM_RAW},
 80025b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002724 <main+0x2a4>)
 80025b6:	f107 040c 	add.w	r4, r7, #12
 80025ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    							{.name = "VAL", .run = SCPIC_DVM_VAL}	};

    Class DVMclass = { .name = "DVM", .functions = DVMfunctions, .functionsLength = 2 };
 80025c0:	4b59      	ldr	r3, [pc, #356]	@ (8002728 <main+0x2a8>)
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	2302      	movs	r3, #2
 80025cc:	60bb      	str	r3, [r7, #8]
    addClass(&DVMclass, 0);
 80025ce:	463b      	mov	r3, r7
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f006 faec 	bl	8008bb0 <addClass>

    //SimpleOS setup
    kernel_init(20); // max 20 tasks
 80025d8:	2014      	movs	r0, #20
 80025da:	f006 fb23 	bl	8008c24 <kernel_init>


    //SPARTAN3 SETUP
    LOLA1.Config = JTAG;
 80025de:	4b53      	ldr	r3, [pc, #332]	@ (800272c <main+0x2ac>)
 80025e0:	2206      	movs	r2, #6
 80025e2:	705a      	strb	r2, [r3, #1]
    LOLA1.Trials = 100;
 80025e4:	4b51      	ldr	r3, [pc, #324]	@ (800272c <main+0x2ac>)
 80025e6:	2264      	movs	r2, #100	@ 0x64
 80025e8:	805a      	strh	r2, [r3, #2]
    LOLA1.compatibleFirmwareID = 0xF103;
 80025ea:	4b50      	ldr	r3, [pc, #320]	@ (800272c <main+0x2ac>)
 80025ec:	f24f 1203 	movw	r2, #61699	@ 0xf103
 80025f0:	809a      	strh	r2, [r3, #4]

    //High frequency DAC setup
    HFDAC1.maxAmplitude = 0;
 80025f2:	4b4f      	ldr	r3, [pc, #316]	@ (8002730 <main+0x2b0>)
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	605a      	str	r2, [r3, #4]
    HFDAC1.mode = Voltage_output;
 80025fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002730 <main+0x2b0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
    HFDAC1.offset = 0;
 8002600:	4b4b      	ldr	r3, [pc, #300]	@ (8002730 <main+0x2b0>)
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	609a      	str	r2, [r3, #8]

    //Hight Frequency ADC setup
    HFADC1.ADCref = 2.5;
 8002608:	4b4a      	ldr	r3, [pc, #296]	@ (8002734 <main+0x2b4>)
 800260a:	4a4b      	ldr	r2, [pc, #300]	@ (8002738 <main+0x2b8>)
 800260c:	609a      	str	r2, [r3, #8]
    HFADC1.OUT_MEASURING_OFFSET = 0;
 800260e:	4b49      	ldr	r3, [pc, #292]	@ (8002734 <main+0x2b4>)
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	605a      	str	r2, [r3, #4]
    HFADC1.source = OUT;
 8002616:	4b47      	ldr	r3, [pc, #284]	@ (8002734 <main+0x2b4>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
    HFADC1.UIO_channel = 1;
 800261c:	4b45      	ldr	r3, [pc, #276]	@ (8002734 <main+0x2b4>)
 800261e:	2201      	movs	r2, #1
 8002620:	709a      	strb	r2, [r3, #2]
    HFADC1.UIO_channelLetter = 'A';
 8002622:	4b44      	ldr	r3, [pc, #272]	@ (8002734 <main+0x2b4>)
 8002624:	2241      	movs	r2, #65	@ 0x41
 8002626:	70da      	strb	r2, [r3, #3]
    HFADC1.mode = Voltage_input;
 8002628:	4b42      	ldr	r3, [pc, #264]	@ (8002734 <main+0x2b4>)
 800262a:	2200      	movs	r2, #0
 800262c:	705a      	strb	r2, [r3, #1]

    //Oscilloscope setup
    OSC1.prescaler = 1;
 800262e:	4b43      	ldr	r3, [pc, #268]	@ (800273c <main+0x2bc>)
 8002630:	2201      	movs	r2, #1
 8002632:	609a      	str	r2, [r3, #8]
    OSC1.samplesAfterTrig = 1000;
 8002634:	4b41      	ldr	r3, [pc, #260]	@ (800273c <main+0x2bc>)
 8002636:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800263a:	80da      	strh	r2, [r3, #6]
    OSC1.trigMode = rising;
 800263c:	4b3f      	ldr	r3, [pc, #252]	@ (800273c <main+0x2bc>)
 800263e:	2201      	movs	r2, #1
 8002640:	711a      	strb	r2, [r3, #4]
    OSC1.triggerLevel = 0;
 8002642:	4b3e      	ldr	r3, [pc, #248]	@ (800273c <main+0x2bc>)
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

    //CharTrak setup
    CHT1.characteristic = Open;
 800264a:	4b3d      	ldr	r3, [pc, #244]	@ (8002740 <main+0x2c0>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
    CHT1.Uamp = 0;
 8002650:	4b3b      	ldr	r3, [pc, #236]	@ (8002740 <main+0x2c0>)
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	605a      	str	r2, [r3, #4]

    // Arbitrary waveform generator setup
    AWG1.waveform = Square;
 8002658:	4b3a      	ldr	r3, [pc, #232]	@ (8002744 <main+0x2c4>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
    AWG1.Uavg = 0.0;
 800265e:	4b39      	ldr	r3, [pc, #228]	@ (8002744 <main+0x2c4>)
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	605a      	str	r2, [r3, #4]
    AWG1.Uamp = 2.0;
 8002666:	4b37      	ldr	r3, [pc, #220]	@ (8002744 <main+0x2c4>)
 8002668:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800266c:	609a      	str	r2, [r3, #8]
    AWG1.DutyCycle = 20.0;
 800266e:	4b35      	ldr	r3, [pc, #212]	@ (8002744 <main+0x2c4>)
 8002670:	4a35      	ldr	r2, [pc, #212]	@ (8002748 <main+0x2c8>)
 8002672:	60da      	str	r2, [r3, #12]
    AWG1.Freq = 10000.0;
 8002674:	4933      	ldr	r1, [pc, #204]	@ (8002744 <main+0x2c4>)
 8002676:	a31c      	add	r3, pc, #112	@ (adr r3, 80026e8 <main+0x268>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	e9c1 2304 	strd	r2, r3, [r1, #16]

    // Noise generator setup
    NOISE1.Enable = 0;
 8002680:	4b32      	ldr	r3, [pc, #200]	@ (800274c <main+0x2cc>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
    NOISE1.Freq = 10000.0;
 8002686:	4b31      	ldr	r3, [pc, #196]	@ (800274c <main+0x2cc>)
 8002688:	4a31      	ldr	r2, [pc, #196]	@ (8002750 <main+0x2d0>)
 800268a:	609a      	str	r2, [r3, #8]
    NOISE1.Uamp = 1.0;
 800268c:	4b2f      	ldr	r3, [pc, #188]	@ (800274c <main+0x2cc>)
 800268e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002692:	605a      	str	r2, [r3, #4]
    NOISE1.Seed = 0x800f000f000f0001;
 8002694:	492d      	ldr	r1, [pc, #180]	@ (800274c <main+0x2cc>)
 8002696:	a316      	add	r3, pc, #88	@ (adr r3, 80026f0 <main+0x270>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	e9c1 2304 	strd	r2, r3, [r1, #16]

    HFDAC_SET_ALL(&HFDAC1);
 80026a0:	4823      	ldr	r0, [pc, #140]	@ (8002730 <main+0x2b0>)
 80026a2:	f005 f939 	bl	8007918 <HFDAC_SET_ALL>
    HFADC_SET_ALL(&HFADC1);
 80026a6:	4823      	ldr	r0, [pc, #140]	@ (8002734 <main+0x2b4>)
 80026a8:	f005 f884 	bl	80077b4 <HFADC_SET_ALL>

    OSC_SET_ALL(&OSC1, &HFADC1);
 80026ac:	4921      	ldr	r1, [pc, #132]	@ (8002734 <main+0x2b4>)
 80026ae:	4823      	ldr	r0, [pc, #140]	@ (800273c <main+0x2bc>)
 80026b0:	f005 fafc 	bl	8007cac <OSC_SET_ALL>

    HFDAC_DIRECT_DATA(&HFDAC1, 0);
 80026b4:	f04f 0100 	mov.w	r1, #0
 80026b8:	481d      	ldr	r0, [pc, #116]	@ (8002730 <main+0x2b0>)
 80026ba:	f005 f8ed 	bl	8007898 <HFDAC_DIRECT_DATA>
    AWG_Load_Waveform(&AWG1, &HFDAC1);
 80026be:	491c      	ldr	r1, [pc, #112]	@ (8002730 <main+0x2b0>)
 80026c0:	4820      	ldr	r0, [pc, #128]	@ (8002744 <main+0x2c4>)
 80026c2:	f004 fccd 	bl	8007060 <AWG_Load_Waveform>
    //NOISE_Load_param(&NOISE1, &HFDAC1);
    LOLA_enable_features(ALL_EN, 0); // disable all features
 80026c6:	2100      	movs	r1, #0
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f005 fa52 	bl	8007b74 <LOLA_enable_features>
    //NOISE_Load_param(NOISE1);

    //AWG_Load_Waveform(AWG1,NOISE1);

    // RS485 receive interrupt setup
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 80026d0:	227d      	movs	r2, #125	@ 0x7d
 80026d2:	4920      	ldr	r1, [pc, #128]	@ (8002754 <main+0x2d4>)
 80026d4:	4820      	ldr	r0, [pc, #128]	@ (8002758 <main+0x2d8>)
 80026d6:	f003 fee8 	bl	80064aa <HAL_UARTEx_ReceiveToIdle_IT>

    kernel_begin(); //////////////////////////////////// CODE DOESNT GET FURTHER
 80026da:	f006 fdf5 	bl	80092c8 <kernel_begin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026de:	bf00      	nop
 80026e0:	e7fd      	b.n	80026de <main+0x25e>
 80026e2:	bf00      	nop
 80026e4:	f3af 8000 	nop.w
 80026e8:	00000000 	.word	0x00000000
 80026ec:	40c38800 	.word	0x40c38800
 80026f0:	000f0001 	.word	0x000f0001
 80026f4:	800f000f 	.word	0x800f000f
 80026f8:	40011000 	.word	0x40011000
 80026fc:	40010800 	.word	0x40010800
 8002700:	40010c00 	.word	0x40010c00
 8002704:	2000023c 	.word	0x2000023c
 8002708:	3f99999a 	.word	0x3f99999a
 800270c:	0800ee70 	.word	0x0800ee70
 8002710:	0800ee48 	.word	0x0800ee48
 8002714:	0800eea0 	.word	0x0800eea0
 8002718:	0800ee4c 	.word	0x0800ee4c
 800271c:	0800eebc 	.word	0x0800eebc
 8002720:	0800ee50 	.word	0x0800ee50
 8002724:	0800eed4 	.word	0x0800eed4
 8002728:	0800ee58 	.word	0x0800ee58
 800272c:	200003b0 	.word	0x200003b0
 8002730:	200003c4 	.word	0x200003c4
 8002734:	200003b8 	.word	0x200003b8
 8002738:	40200000 	.word	0x40200000
 800273c:	200003d4 	.word	0x200003d4
 8002740:	200003a8 	.word	0x200003a8
 8002744:	20000378 	.word	0x20000378
 8002748:	41a00000 	.word	0x41a00000
 800274c:	20000390 	.word	0x20000390
 8002750:	461c4000 	.word	0x461c4000
 8002754:	20000470 	.word	0x20000470
 8002758:	20000330 	.word	0x20000330

0800275c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b094      	sub	sp, #80	@ 0x50
 8002760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002766:	2228      	movs	r2, #40	@ 0x28
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f008 ff5a 	bl	800b624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800278c:	2301      	movs	r3, #1
 800278e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002790:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002796:	2300      	movs	r3, #0
 8002798:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800279a:	2301      	movs	r3, #1
 800279c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800279e:	2302      	movs	r3, #2
 80027a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80027a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80027ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 ffae 	bl	8004714 <HAL_RCC_OscConfig>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80027be:	f000 fa12 	bl	8002be6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027c2:	230f      	movs	r3, #15
 80027c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027c6:	2302      	movs	r3, #2
 80027c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2101      	movs	r1, #1
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fa1a 	bl	8004c18 <HAL_RCC_ClockConfig>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80027ea:	f000 f9fc 	bl	8002be6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80027ee:	2302      	movs	r3, #2
 80027f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80027f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 fb9a 	bl	8004f34 <HAL_RCCEx_PeriphCLKConfig>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002806:	f000 f9ee 	bl	8002be6 <Error_Handler>
  }
}
 800280a:	bf00      	nop
 800280c:	3750      	adds	r7, #80	@ 0x50
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002824:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <MX_ADC1_Init+0x74>)
 8002826:	4a19      	ldr	r2, [pc, #100]	@ (800288c <MX_ADC1_Init+0x78>)
 8002828:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800282a:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <MX_ADC1_Init+0x74>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <MX_ADC1_Init+0x74>)
 8002832:	2200      	movs	r2, #0
 8002834:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <MX_ADC1_Init+0x74>)
 8002838:	2200      	movs	r2, #0
 800283a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <MX_ADC1_Init+0x74>)
 800283e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002842:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <MX_ADC1_Init+0x74>)
 8002846:	2200      	movs	r2, #0
 8002848:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800284a:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <MX_ADC1_Init+0x74>)
 800284c:	2201      	movs	r2, #1
 800284e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002850:	480d      	ldr	r0, [pc, #52]	@ (8002888 <MX_ADC1_Init+0x74>)
 8002852:	f000 fd13 	bl	800327c <HAL_ADC_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800285c:	f000 f9c3 	bl	8002be6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002860:	2300      	movs	r3, #0
 8002862:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002864:	2301      	movs	r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	4619      	mov	r1, r3
 8002870:	4805      	ldr	r0, [pc, #20]	@ (8002888 <MX_ADC1_Init+0x74>)
 8002872:	f000 fddb 	bl	800342c <HAL_ADC_ConfigChannel>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800287c:	f000 f9b3 	bl	8002be6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	2000020c 	.word	0x2000020c
 800288c:	40012400 	.word	0x40012400

08002890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002894:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <MX_I2C1_Init+0x50>)
 8002896:	4a13      	ldr	r2, [pc, #76]	@ (80028e4 <MX_I2C1_Init+0x54>)
 8002898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800289a:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <MX_I2C1_Init+0x50>)
 800289c:	4a12      	ldr	r2, [pc, #72]	@ (80028e8 <MX_I2C1_Init+0x58>)
 800289e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028a0:	4b0f      	ldr	r3, [pc, #60]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028a6:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028ac:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028b4:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028ba:	4b09      	ldr	r3, [pc, #36]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028c0:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028cc:	4804      	ldr	r0, [pc, #16]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028ce:	f001 fa75 	bl	8003dbc <HAL_I2C_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028d8:	f000 f985 	bl	8002be6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	2000023c 	.word	0x2000023c
 80028e4:	40005400 	.word	0x40005400
 80028e8:	000186a0 	.word	0x000186a0

080028ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028f0:	4b17      	ldr	r3, [pc, #92]	@ (8002950 <MX_SPI1_Init+0x64>)
 80028f2:	4a18      	ldr	r2, [pc, #96]	@ (8002954 <MX_SPI1_Init+0x68>)
 80028f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028f6:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <MX_SPI1_Init+0x64>)
 80028f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028fe:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <MX_SPI1_Init+0x64>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002904:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <MX_SPI1_Init+0x64>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800290a:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <MX_SPI1_Init+0x64>)
 800290c:	2202      	movs	r2, #2
 800290e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002910:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <MX_SPI1_Init+0x64>)
 8002912:	2200      	movs	r2, #0
 8002914:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002916:	4b0e      	ldr	r3, [pc, #56]	@ (8002950 <MX_SPI1_Init+0x64>)
 8002918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800291c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <MX_SPI1_Init+0x64>)
 8002920:	2228      	movs	r2, #40	@ 0x28
 8002922:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002924:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <MX_SPI1_Init+0x64>)
 8002926:	2200      	movs	r2, #0
 8002928:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <MX_SPI1_Init+0x64>)
 800292c:	2200      	movs	r2, #0
 800292e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002930:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <MX_SPI1_Init+0x64>)
 8002932:	2200      	movs	r2, #0
 8002934:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <MX_SPI1_Init+0x64>)
 8002938:	220a      	movs	r2, #10
 800293a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800293c:	4804      	ldr	r0, [pc, #16]	@ (8002950 <MX_SPI1_Init+0x64>)
 800293e:	f002 fbaf 	bl	80050a0 <HAL_SPI_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002948:	f000 f94d 	bl	8002be6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000290 	.word	0x20000290
 8002954:	40013000 	.word	0x40013000

08002958 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800296c:	463b      	mov	r3, r7
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002974:	4b1d      	ldr	r3, [pc, #116]	@ (80029ec <MX_TIM4_Init+0x94>)
 8002976:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <MX_TIM4_Init+0x98>)
 8002978:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 800297a:	4b1c      	ldr	r3, [pc, #112]	@ (80029ec <MX_TIM4_Init+0x94>)
 800297c:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8002980:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002982:	4b1a      	ldr	r3, [pc, #104]	@ (80029ec <MX_TIM4_Init+0x94>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50-1;
 8002988:	4b18      	ldr	r3, [pc, #96]	@ (80029ec <MX_TIM4_Init+0x94>)
 800298a:	2231      	movs	r2, #49	@ 0x31
 800298c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800298e:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <MX_TIM4_Init+0x94>)
 8002990:	2200      	movs	r2, #0
 8002992:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002994:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <MX_TIM4_Init+0x94>)
 8002996:	2200      	movs	r2, #0
 8002998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800299a:	4814      	ldr	r0, [pc, #80]	@ (80029ec <MX_TIM4_Init+0x94>)
 800299c:	f003 f908 	bl	8005bb0 <HAL_TIM_Base_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80029a6:	f000 f91e 	bl	8002be6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80029b0:	f107 0308 	add.w	r3, r7, #8
 80029b4:	4619      	mov	r1, r3
 80029b6:	480d      	ldr	r0, [pc, #52]	@ (80029ec <MX_TIM4_Init+0x94>)
 80029b8:	f003 fa51 	bl	8005e5e <HAL_TIM_ConfigClockSource>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80029c2:	f000 f910 	bl	8002be6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029ce:	463b      	mov	r3, r7
 80029d0:	4619      	mov	r1, r3
 80029d2:	4806      	ldr	r0, [pc, #24]	@ (80029ec <MX_TIM4_Init+0x94>)
 80029d4:	f003 fc26 	bl	8006224 <HAL_TIMEx_MasterConfigSynchronization>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80029de:	f000 f902 	bl	8002be6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200002e8 	.word	0x200002e8
 80029f0:	40000800 	.word	0x40000800

080029f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <MX_USART1_UART_Init+0x4c>)
 80029fa:	4a12      	ldr	r2, [pc, #72]	@ (8002a44 <MX_USART1_UART_Init+0x50>)
 80029fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <MX_USART1_UART_Init+0x4c>)
 8002a00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <MX_USART1_UART_Init+0x4c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <MX_USART1_UART_Init+0x4c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a12:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <MX_USART1_UART_Init+0x4c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a18:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <MX_USART1_UART_Init+0x4c>)
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a1e:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <MX_USART1_UART_Init+0x4c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a24:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <MX_USART1_UART_Init+0x4c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a2a:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <MX_USART1_UART_Init+0x4c>)
 8002a2c:	f003 fc6a 	bl	8006304 <HAL_UART_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a36:	f000 f8d6 	bl	8002be6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000330 	.word	0x20000330
 8002a44:	40013800 	.word	0x40013800

08002a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4e:	f107 0310 	add.w	r3, r7, #16
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b8c <MX_GPIO_Init+0x144>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a4a      	ldr	r2, [pc, #296]	@ (8002b8c <MX_GPIO_Init+0x144>)
 8002a62:	f043 0310 	orr.w	r3, r3, #16
 8002a66:	6193      	str	r3, [r2, #24]
 8002a68:	4b48      	ldr	r3, [pc, #288]	@ (8002b8c <MX_GPIO_Init+0x144>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a74:	4b45      	ldr	r3, [pc, #276]	@ (8002b8c <MX_GPIO_Init+0x144>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	4a44      	ldr	r2, [pc, #272]	@ (8002b8c <MX_GPIO_Init+0x144>)
 8002a7a:	f043 0320 	orr.w	r3, r3, #32
 8002a7e:	6193      	str	r3, [r2, #24]
 8002a80:	4b42      	ldr	r3, [pc, #264]	@ (8002b8c <MX_GPIO_Init+0x144>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b8c <MX_GPIO_Init+0x144>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	4a3e      	ldr	r2, [pc, #248]	@ (8002b8c <MX_GPIO_Init+0x144>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	6193      	str	r3, [r2, #24]
 8002a98:	4b3c      	ldr	r3, [pc, #240]	@ (8002b8c <MX_GPIO_Init+0x144>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa4:	4b39      	ldr	r3, [pc, #228]	@ (8002b8c <MX_GPIO_Init+0x144>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	4a38      	ldr	r2, [pc, #224]	@ (8002b8c <MX_GPIO_Init+0x144>)
 8002aaa:	f043 0308 	orr.w	r3, r3, #8
 8002aae:	6193      	str	r3, [r2, #24]
 8002ab0:	4b36      	ldr	r3, [pc, #216]	@ (8002b8c <MX_GPIO_Init+0x144>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_DACS_Pin|LDAC_Pin, GPIO_PIN_RESET);
 8002abc:	2200      	movs	r2, #0
 8002abe:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002ac2:	4833      	ldr	r0, [pc, #204]	@ (8002b90 <MX_GPIO_Init+0x148>)
 8002ac4:	f001 f961 	bl	8003d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin, GPIO_PIN_RESET);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	211e      	movs	r1, #30
 8002acc:	4831      	ldr	r0, [pc, #196]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002ace:	f001 f95c 	bl	8003d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f24f 4127 	movw	r1, #62503	@ 0xf427
 8002ad8:	482f      	ldr	r0, [pc, #188]	@ (8002b98 <MX_GPIO_Init+0x150>)
 8002ada:	f001 f956 	bl	8003d8a <HAL_GPIO_WritePin>
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SPI1_DACS_Pin LDAC_Pin */
  GPIO_InitStruct.Pin = SPI1_DACS_Pin|LDAC_Pin;
 8002ade:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af0:	f107 0310 	add.w	r3, r7, #16
 8002af4:	4619      	mov	r1, r3
 8002af6:	4826      	ldr	r0, [pc, #152]	@ (8002b90 <MX_GPIO_Init+0x148>)
 8002af8:	f000 ffac 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : VselC0_Pin VselC1_Pin PROGB_Pin SPI1_FPGAS_Pin */
  GPIO_InitStruct.Pin = VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin;
 8002afc:	231e      	movs	r3, #30
 8002afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	4619      	mov	r1, r3
 8002b12:	4820      	ldr	r0, [pc, #128]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002b14:	f000 ff9e 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : VselB1_Pin VselB0_Pin VselA1_Pin VselA0_Pin
                           MODE_Pin M2_Pin M1_Pin M0_Pin
                           DIR_Pin */
  GPIO_InitStruct.Pin = VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 8002b18:	f24f 4327 	movw	r3, #62503	@ 0xf427
 8002b1c:	613b      	str	r3, [r7, #16]
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2302      	movs	r3, #2
 8002b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2a:	f107 0310 	add.w	r3, r7, #16
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4819      	ldr	r0, [pc, #100]	@ (8002b98 <MX_GPIO_Init+0x150>)
 8002b32:	f000 ff8f 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : FPGA_IRQ_Pin USB_detect_Pin */
  GPIO_InitStruct.Pin = FPGA_IRQ_Pin|USB_detect_Pin;
 8002b36:	f640 0308 	movw	r3, #2056	@ 0x808
 8002b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b3c:	4b17      	ldr	r3, [pc, #92]	@ (8002b9c <MX_GPIO_Init+0x154>)
 8002b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4813      	ldr	r0, [pc, #76]	@ (8002b98 <MX_GPIO_Init+0x150>)
 8002b4c:	f000 ff82 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : DONE_Pin INITB_Pin */
  GPIO_InitStruct.Pin = DONE_Pin|INITB_Pin;
 8002b50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5e:	f107 0310 	add.w	r3, r7, #16
 8002b62:	4619      	mov	r1, r3
 8002b64:	480b      	ldr	r0, [pc, #44]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002b66:	f000 ff75 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_IRQ_Pin */
  GPIO_InitStruct.Pin = UI_IRQ_Pin;
 8002b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b70:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <MX_GPIO_Init+0x154>)
 8002b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UI_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4805      	ldr	r0, [pc, #20]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002b80:	f000 ff68 	bl	8003a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b84:	bf00      	nop
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40011000 	.word	0x40011000
 8002b94:	40010800 	.word	0x40010800
 8002b98:	40010c00 	.word	0x40010c00
 8002b9c:	10110000 	.word	0x10110000

08002ba0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
	 SCPI_EXECUTE();
 8002bac:	f005 fd68 	bl	8008680 <SCPI_EXECUTE>
	 RS485_Transmit(TXbuff);
 8002bb0:	4805      	ldr	r0, [pc, #20]	@ (8002bc8 <HAL_UARTEx_RxEventCallback+0x28>)
 8002bb2:	f005 fae9 	bl	8008188 <RS485_Transmit>
	 HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 8002bb6:	227d      	movs	r2, #125	@ 0x7d
 8002bb8:	4904      	ldr	r1, [pc, #16]	@ (8002bcc <HAL_UARTEx_RxEventCallback+0x2c>)
 8002bba:	4805      	ldr	r0, [pc, #20]	@ (8002bd0 <HAL_UARTEx_RxEventCallback+0x30>)
 8002bbc:	f003 fc75 	bl	80064aa <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	200003f0 	.word	0x200003f0
 8002bcc:	20000470 	.word	0x20000470
 8002bd0:	20000330 	.word	0x20000330

08002bd4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bea:	b672      	cpsid	i
}
 8002bec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bee:	bf00      	nop
 8002bf0:	e7fd      	b.n	8002bee <Error_Handler+0x8>
	...

08002bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bfa:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <HAL_MspInit+0x5c>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	4a14      	ldr	r2, [pc, #80]	@ (8002c50 <HAL_MspInit+0x5c>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6193      	str	r3, [r2, #24]
 8002c06:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_MspInit+0x5c>)
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	4b0f      	ldr	r3, [pc, #60]	@ (8002c50 <HAL_MspInit+0x5c>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4a0e      	ldr	r2, [pc, #56]	@ (8002c50 <HAL_MspInit+0x5c>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	61d3      	str	r3, [r2, #28]
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <HAL_MspInit+0x5c>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <HAL_MspInit+0x60>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <HAL_MspInit+0x60>)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40010000 	.word	0x40010000

08002c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a14      	ldr	r2, [pc, #80]	@ (8002cc4 <HAL_ADC_MspInit+0x6c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d121      	bne.n	8002cbc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c78:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <HAL_ADC_MspInit+0x70>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	4a12      	ldr	r2, [pc, #72]	@ (8002cc8 <HAL_ADC_MspInit+0x70>)
 8002c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c82:	6193      	str	r3, [r2, #24]
 8002c84:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <HAL_ADC_MspInit+0x70>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c90:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <HAL_ADC_MspInit+0x70>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc8 <HAL_ADC_MspInit+0x70>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6193      	str	r3, [r2, #24]
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <HAL_ADC_MspInit+0x70>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Ain_Pin;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cac:	2303      	movs	r3, #3
 8002cae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Ain_GPIO_Port, &GPIO_InitStruct);
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4805      	ldr	r0, [pc, #20]	@ (8002ccc <HAL_ADC_MspInit+0x74>)
 8002cb8:	f000 fecc 	bl	8003a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cbc:	bf00      	nop
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40012400 	.word	0x40012400
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40010800 	.word	0x40010800

08002cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	@ 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1d      	ldr	r2, [pc, #116]	@ (8002d60 <HAL_I2C_MspInit+0x90>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d132      	bne.n	8002d56 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d64 <HAL_I2C_MspInit+0x94>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d64 <HAL_I2C_MspInit+0x94>)
 8002cf6:	f043 0308 	orr.w	r3, r3, #8
 8002cfa:	6193      	str	r3, [r2, #24]
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_I2C_MspInit+0x94>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d08:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d0e:	2312      	movs	r3, #18
 8002d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d12:	2303      	movs	r3, #3
 8002d14:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4812      	ldr	r0, [pc, #72]	@ (8002d68 <HAL_I2C_MspInit+0x98>)
 8002d1e:	f000 fe99 	bl	8003a54 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002d22:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <HAL_I2C_MspInit+0x9c>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	f043 0302 	orr.w	r3, r3, #2
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d38:	4a0c      	ldr	r2, [pc, #48]	@ (8002d6c <HAL_I2C_MspInit+0x9c>)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d3e:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <HAL_I2C_MspInit+0x94>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4a08      	ldr	r2, [pc, #32]	@ (8002d64 <HAL_I2C_MspInit+0x94>)
 8002d44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d48:	61d3      	str	r3, [r2, #28]
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_I2C_MspInit+0x94>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d56:	bf00      	nop
 8002d58:	3728      	adds	r7, #40	@ 0x28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40005400 	.word	0x40005400
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40010c00 	.word	0x40010c00
 8002d6c:	40010000 	.word	0x40010000

08002d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 0310 	add.w	r3, r7, #16
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002df8 <HAL_SPI_MspInit+0x88>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d12f      	bne.n	8002df0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d90:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	4a19      	ldr	r2, [pc, #100]	@ (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002d96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d9a:	6193      	str	r3, [r2, #24]
 8002d9c:	4b17      	ldr	r3, [pc, #92]	@ (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da8:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a13      	ldr	r2, [pc, #76]	@ (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002dc0:	23a0      	movs	r3, #160	@ 0xa0
 8002dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dcc:	f107 0310 	add.w	r3, r7, #16
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	480b      	ldr	r0, [pc, #44]	@ (8002e00 <HAL_SPI_MspInit+0x90>)
 8002dd4:	f000 fe3e 	bl	8003a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dd8:	2340      	movs	r3, #64	@ 0x40
 8002dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de4:	f107 0310 	add.w	r3, r7, #16
 8002de8:	4619      	mov	r1, r3
 8002dea:	4805      	ldr	r0, [pc, #20]	@ (8002e00 <HAL_SPI_MspInit+0x90>)
 8002dec:	f000 fe32 	bl	8003a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002df0:	bf00      	nop
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40013000 	.word	0x40013000
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40010800 	.word	0x40010800

08002e04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0d      	ldr	r2, [pc, #52]	@ (8002e48 <HAL_TIM_Base_MspInit+0x44>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d113      	bne.n	8002e3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e16:	4b0d      	ldr	r3, [pc, #52]	@ (8002e4c <HAL_TIM_Base_MspInit+0x48>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e4c <HAL_TIM_Base_MspInit+0x48>)
 8002e1c:	f043 0304 	orr.w	r3, r3, #4
 8002e20:	61d3      	str	r3, [r2, #28]
 8002e22:	4b0a      	ldr	r3, [pc, #40]	@ (8002e4c <HAL_TIM_Base_MspInit+0x48>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	201e      	movs	r0, #30
 8002e34:	f000 fd21 	bl	800387a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e38:	201e      	movs	r0, #30
 8002e3a:	f000 fd3a 	bl	80038b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40000800 	.word	0x40000800
 8002e4c:	40021000 	.word	0x40021000

08002e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	@ 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a26      	ldr	r2, [pc, #152]	@ (8002f04 <HAL_UART_MspInit+0xb4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d145      	bne.n	8002efc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e70:	4b25      	ldr	r3, [pc, #148]	@ (8002f08 <HAL_UART_MspInit+0xb8>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	4a24      	ldr	r2, [pc, #144]	@ (8002f08 <HAL_UART_MspInit+0xb8>)
 8002e76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e7a:	6193      	str	r3, [r2, #24]
 8002e7c:	4b22      	ldr	r3, [pc, #136]	@ (8002f08 <HAL_UART_MspInit+0xb8>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e88:	4b1f      	ldr	r3, [pc, #124]	@ (8002f08 <HAL_UART_MspInit+0xb8>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8002f08 <HAL_UART_MspInit+0xb8>)
 8002e8e:	f043 0308 	orr.w	r3, r3, #8
 8002e92:	6193      	str	r3, [r2, #24]
 8002e94:	4b1c      	ldr	r3, [pc, #112]	@ (8002f08 <HAL_UART_MspInit+0xb8>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ea0:	2340      	movs	r3, #64	@ 0x40
 8002ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4816      	ldr	r0, [pc, #88]	@ (8002f0c <HAL_UART_MspInit+0xbc>)
 8002eb4:	f000 fdce 	bl	8003a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4810      	ldr	r0, [pc, #64]	@ (8002f0c <HAL_UART_MspInit+0xbc>)
 8002ecc:	f000 fdc2 	bl	8003a54 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f10 <HAL_UART_MspInit+0xc0>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f10 <HAL_UART_MspInit+0xc0>)
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002eec:	2200      	movs	r2, #0
 8002eee:	2101      	movs	r1, #1
 8002ef0:	2025      	movs	r0, #37	@ 0x25
 8002ef2:	f000 fcc2 	bl	800387a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ef6:	2025      	movs	r0, #37	@ 0x25
 8002ef8:	f000 fcdb 	bl	80038b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002efc:	bf00      	nop
 8002efe:	3728      	adds	r7, #40	@ 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40013800 	.word	0x40013800
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40010c00 	.word	0x40010c00
 8002f10:	40010000 	.word	0x40010000

08002f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <NMI_Handler+0x4>

08002f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <HardFault_Handler+0x4>

08002f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <MemManage_Handler+0x4>

08002f2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <BusFault_Handler+0x4>

08002f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <UsageFault_Handler+0x4>

08002f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f64:	f000 f94a 	bl	80031fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f70:	4802      	ldr	r0, [pc, #8]	@ (8002f7c <TIM4_IRQHandler+0x10>)
 8002f72:	f002 fe6c 	bl	8005c4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200002e8 	.word	0x200002e8

08002f80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f84:	4802      	ldr	r0, [pc, #8]	@ (8002f90 <USART1_IRQHandler+0x10>)
 8002f86:	f003 faed 	bl	8006564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000330 	.word	0x20000330

08002f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return 1;
 8002f98:	2301      	movs	r3, #1
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <_kill>:

int _kill(int pid, int sig)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fac:	f008 fdb8 	bl	800bb20 <__errno>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2216      	movs	r2, #22
 8002fb4:	601a      	str	r2, [r3, #0]
  return -1;
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <_exit>:

void _exit (int status)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fca:	f04f 31ff 	mov.w	r1, #4294967295
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ffe7 	bl	8002fa2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fd4:	bf00      	nop
 8002fd6:	e7fd      	b.n	8002fd4 <_exit+0x12>

08002fd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	e00a      	b.n	8003000 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fea:	f3af 8000 	nop.w
 8002fee:	4601      	mov	r1, r0
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	60ba      	str	r2, [r7, #8]
 8002ff6:	b2ca      	uxtb	r2, r1
 8002ff8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	dbf0      	blt.n	8002fea <_read+0x12>
  }

  return len;
 8003008:	687b      	ldr	r3, [r7, #4]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	e009      	b.n	8003038 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	60ba      	str	r2, [r7, #8]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	dbf1      	blt.n	8003024 <_write+0x12>
  }
  return len;
 8003040:	687b      	ldr	r3, [r7, #4]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <_close>:

int _close(int file)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003070:	605a      	str	r2, [r3, #4]
  return 0;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <_isatty>:

int _isatty(int file)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003086:	2301      	movs	r3, #1
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
	...

080030ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b4:	4a14      	ldr	r2, [pc, #80]	@ (8003108 <_sbrk+0x5c>)
 80030b6:	4b15      	ldr	r3, [pc, #84]	@ (800310c <_sbrk+0x60>)
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c0:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <_sbrk+0x64>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030c8:	4b11      	ldr	r3, [pc, #68]	@ (8003110 <_sbrk+0x64>)
 80030ca:	4a12      	ldr	r2, [pc, #72]	@ (8003114 <_sbrk+0x68>)
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ce:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <_sbrk+0x64>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d207      	bcs.n	80030ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030dc:	f008 fd20 	bl	800bb20 <__errno>
 80030e0:	4603      	mov	r3, r0
 80030e2:	220c      	movs	r2, #12
 80030e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ea:	e009      	b.n	8003100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030ec:	4b08      	ldr	r3, [pc, #32]	@ (8003110 <_sbrk+0x64>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030f2:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <_sbrk+0x64>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	4a05      	ldr	r2, [pc, #20]	@ (8003110 <_sbrk+0x64>)
 80030fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030fe:	68fb      	ldr	r3, [r7, #12]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20005000 	.word	0x20005000
 800310c:	00000400 	.word	0x00000400
 8003110:	200003e0 	.word	0x200003e0
 8003114:	20000748 	.word	0x20000748

08003118 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003124:	f7ff fff8 	bl	8003118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003128:	480b      	ldr	r0, [pc, #44]	@ (8003158 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800312a:	490c      	ldr	r1, [pc, #48]	@ (800315c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800312c:	4a0c      	ldr	r2, [pc, #48]	@ (8003160 <LoopFillZerobss+0x16>)
  movs r3, #0
 800312e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003130:	e002      	b.n	8003138 <LoopCopyDataInit>

08003132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003136:	3304      	adds	r3, #4

08003138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800313a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800313c:	d3f9      	bcc.n	8003132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800313e:	4a09      	ldr	r2, [pc, #36]	@ (8003164 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003140:	4c09      	ldr	r4, [pc, #36]	@ (8003168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003144:	e001      	b.n	800314a <LoopFillZerobss>

08003146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003148:	3204      	adds	r2, #4

0800314a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800314a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800314c:	d3fb      	bcc.n	8003146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800314e:	f008 fced 	bl	800bb2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003152:	f7ff f995 	bl	8002480 <main>
  bx lr
 8003156:	4770      	bx	lr
  ldr r0, =_sdata
 8003158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800315c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003160:	08010040 	.word	0x08010040
  ldr r2, =_sbss
 8003164:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003168:	20000748 	.word	0x20000748

0800316c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800316c:	e7fe      	b.n	800316c <ADC1_2_IRQHandler>
	...

08003170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003174:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <HAL_Init+0x28>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a07      	ldr	r2, [pc, #28]	@ (8003198 <HAL_Init+0x28>)
 800317a:	f043 0310 	orr.w	r3, r3, #16
 800317e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003180:	2003      	movs	r0, #3
 8003182:	f000 fb6f 	bl	8003864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003186:	200f      	movs	r0, #15
 8003188:	f000 f808 	bl	800319c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800318c:	f7ff fd32 	bl	8002bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40022000 	.word	0x40022000

0800319c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a4:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <HAL_InitTick+0x54>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b12      	ldr	r3, [pc, #72]	@ (80031f4 <HAL_InitTick+0x58>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fb8b 	bl	80038d6 <HAL_SYSTICK_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00e      	b.n	80031e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d80a      	bhi.n	80031e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d0:	2200      	movs	r2, #0
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	f000 fb4f 	bl	800387a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031dc:	4a06      	ldr	r2, [pc, #24]	@ (80031f8 <HAL_InitTick+0x5c>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000000 	.word	0x20000000
 80031f4:	20000008 	.word	0x20000008
 80031f8:	20000004 	.word	0x20000004

080031fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_IncTick+0x1c>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b05      	ldr	r3, [pc, #20]	@ (800321c <HAL_IncTick+0x20>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4413      	add	r3, r2
 800320c:	4a03      	ldr	r2, [pc, #12]	@ (800321c <HAL_IncTick+0x20>)
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	20000008 	.word	0x20000008
 800321c:	200003e4 	.word	0x200003e4

08003220 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return uwTick;
 8003224:	4b02      	ldr	r3, [pc, #8]	@ (8003230 <HAL_GetTick+0x10>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr
 8003230:	200003e4 	.word	0x200003e4

08003234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800323c:	f7ff fff0 	bl	8003220 <HAL_GetTick>
 8003240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d005      	beq.n	800325a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800324e:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <HAL_Delay+0x44>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800325a:	bf00      	nop
 800325c:	f7ff ffe0 	bl	8003220 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	429a      	cmp	r2, r3
 800326a:	d8f7      	bhi.n	800325c <HAL_Delay+0x28>
  {
  }
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000008 	.word	0x20000008

0800327c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0be      	b.n	800341c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff fccc 	bl	8002c58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f9ab 	bl	800361c <ADC_ConversionStop_Disable>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 8099 	bne.w	800340a <HAL_ADC_Init+0x18e>
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 8095 	bne.w	800340a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032e8:	f023 0302 	bic.w	r3, r3, #2
 80032ec:	f043 0202 	orr.w	r2, r3, #2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7b1b      	ldrb	r3, [r3, #12]
 8003302:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003304:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	4313      	orrs	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003314:	d003      	beq.n	800331e <HAL_ADC_Init+0xa2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d102      	bne.n	8003324 <HAL_ADC_Init+0xa8>
 800331e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003322:	e000      	b.n	8003326 <HAL_ADC_Init+0xaa>
 8003324:	2300      	movs	r3, #0
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7d1b      	ldrb	r3, [r3, #20]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d119      	bne.n	8003368 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7b1b      	ldrb	r3, [r3, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	3b01      	subs	r3, #1
 8003342:	035a      	lsls	r2, r3, #13
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	e00b      	b.n	8003368 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	4b28      	ldr	r3, [pc, #160]	@ (8003424 <HAL_ADC_Init+0x1a8>)
 8003384:	4013      	ands	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	430b      	orrs	r3, r1
 800338e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003398:	d003      	beq.n	80033a2 <HAL_ADC_Init+0x126>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d104      	bne.n	80033ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	051b      	lsls	r3, r3, #20
 80033aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	430a      	orrs	r2, r1
 80033be:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	4b18      	ldr	r3, [pc, #96]	@ (8003428 <HAL_ADC_Init+0x1ac>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d10b      	bne.n	80033e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	f023 0303 	bic.w	r3, r3, #3
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033e6:	e018      	b.n	800341a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ec:	f023 0312 	bic.w	r3, r3, #18
 80033f0:	f043 0210 	orr.w	r2, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003408:	e007      	b.n	800341a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340e:	f043 0210 	orr.w	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800341a:	7dfb      	ldrb	r3, [r7, #23]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	ffe1f7fd 	.word	0xffe1f7fd
 8003428:	ff1f0efe 	.word	0xff1f0efe

0800342c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_ADC_ConfigChannel+0x20>
 8003448:	2302      	movs	r3, #2
 800344a:	e0dc      	b.n	8003606 <HAL_ADC_ConfigChannel+0x1da>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b06      	cmp	r3, #6
 800345a:	d81c      	bhi.n	8003496 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	3b05      	subs	r3, #5
 800346e:	221f      	movs	r2, #31
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	4019      	ands	r1, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	3b05      	subs	r3, #5
 8003488:	fa00 f203 	lsl.w	r2, r0, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	635a      	str	r2, [r3, #52]	@ 0x34
 8003494:	e03c      	b.n	8003510 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d81c      	bhi.n	80034d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	3b23      	subs	r3, #35	@ 0x23
 80034b0:	221f      	movs	r2, #31
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	4019      	ands	r1, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	3b23      	subs	r3, #35	@ 0x23
 80034ca:	fa00 f203 	lsl.w	r2, r0, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80034d6:	e01b      	b.n	8003510 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	3b41      	subs	r3, #65	@ 0x41
 80034ea:	221f      	movs	r2, #31
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	4019      	ands	r1, r3
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	3b41      	subs	r3, #65	@ 0x41
 8003504:	fa00 f203 	lsl.w	r2, r0, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b09      	cmp	r3, #9
 8003516:	d91c      	bls.n	8003552 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68d9      	ldr	r1, [r3, #12]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	3b1e      	subs	r3, #30
 800352a:	2207      	movs	r2, #7
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	4019      	ands	r1, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	6898      	ldr	r0, [r3, #8]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	3b1e      	subs	r3, #30
 8003544:	fa00 f203 	lsl.w	r2, r0, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	e019      	b.n	8003586 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6919      	ldr	r1, [r3, #16]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	2207      	movs	r2, #7
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	4019      	ands	r1, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6898      	ldr	r0, [r3, #8]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	fa00 f203 	lsl.w	r2, r0, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b10      	cmp	r3, #16
 800358c:	d003      	beq.n	8003596 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003592:	2b11      	cmp	r3, #17
 8003594:	d132      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1d      	ldr	r2, [pc, #116]	@ (8003610 <HAL_ADC_ConfigChannel+0x1e4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d125      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d126      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80035bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	d11a      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035c6:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <HAL_ADC_ConfigChannel+0x1e8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a13      	ldr	r2, [pc, #76]	@ (8003618 <HAL_ADC_ConfigChannel+0x1ec>)
 80035cc:	fba2 2303 	umull	r2, r3, r2, r3
 80035d0:	0c9a      	lsrs	r2, r3, #18
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035dc:	e002      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f9      	bne.n	80035de <HAL_ADC_ConfigChannel+0x1b2>
 80035ea:	e007      	b.n	80035fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003604:	7bfb      	ldrb	r3, [r7, #15]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	40012400 	.word	0x40012400
 8003614:	20000000 	.word	0x20000000
 8003618:	431bde83 	.word	0x431bde83

0800361c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d12e      	bne.n	8003694 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003646:	f7ff fdeb 	bl	8003220 <HAL_GetTick>
 800364a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800364c:	e01b      	b.n	8003686 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800364e:	f7ff fde7 	bl	8003220 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d914      	bls.n	8003686 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b01      	cmp	r3, #1
 8003668:	d10d      	bne.n	8003686 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366e:	f043 0210 	orr.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e007      	b.n	8003696 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b01      	cmp	r3, #1
 8003692:	d0dc      	beq.n	800364e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b0:	4b0c      	ldr	r3, [pc, #48]	@ (80036e4 <__NVIC_SetPriorityGrouping+0x44>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036bc:	4013      	ands	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036d2:	4a04      	ldr	r2, [pc, #16]	@ (80036e4 <__NVIC_SetPriorityGrouping+0x44>)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	60d3      	str	r3, [r2, #12]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036ec:	4b04      	ldr	r3, [pc, #16]	@ (8003700 <__NVIC_GetPriorityGrouping+0x18>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	f003 0307 	and.w	r3, r3, #7
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	2b00      	cmp	r3, #0
 8003714:	db0b      	blt.n	800372e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	f003 021f 	and.w	r2, r3, #31
 800371c:	4906      	ldr	r1, [pc, #24]	@ (8003738 <__NVIC_EnableIRQ+0x34>)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	2001      	movs	r0, #1
 8003726:	fa00 f202 	lsl.w	r2, r0, r2
 800372a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	e000e100 	.word	0xe000e100

0800373c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	6039      	str	r1, [r7, #0]
 8003746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374c:	2b00      	cmp	r3, #0
 800374e:	db0a      	blt.n	8003766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	b2da      	uxtb	r2, r3
 8003754:	490c      	ldr	r1, [pc, #48]	@ (8003788 <__NVIC_SetPriority+0x4c>)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	0112      	lsls	r2, r2, #4
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	440b      	add	r3, r1
 8003760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003764:	e00a      	b.n	800377c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4908      	ldr	r1, [pc, #32]	@ (800378c <__NVIC_SetPriority+0x50>)
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	3b04      	subs	r3, #4
 8003774:	0112      	lsls	r2, r2, #4
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	440b      	add	r3, r1
 800377a:	761a      	strb	r2, [r3, #24]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000e100 	.word	0xe000e100
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	@ 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f1c3 0307 	rsb	r3, r3, #7
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	bf28      	it	cs
 80037ae:	2304      	movcs	r3, #4
 80037b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3304      	adds	r3, #4
 80037b6:	2b06      	cmp	r3, #6
 80037b8:	d902      	bls.n	80037c0 <NVIC_EncodePriority+0x30>
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	3b03      	subs	r3, #3
 80037be:	e000      	b.n	80037c2 <NVIC_EncodePriority+0x32>
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c4:	f04f 32ff 	mov.w	r2, #4294967295
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43da      	mvns	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	401a      	ands	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037d8:	f04f 31ff 	mov.w	r1, #4294967295
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa01 f303 	lsl.w	r3, r1, r3
 80037e2:	43d9      	mvns	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e8:	4313      	orrs	r3, r2
         );
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3724      	adds	r7, #36	@ 0x24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037f8:	f3bf 8f4f 	dsb	sy
}
 80037fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <__NVIC_SystemReset+0x24>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003806:	4904      	ldr	r1, [pc, #16]	@ (8003818 <__NVIC_SystemReset+0x24>)
 8003808:	4b04      	ldr	r3, [pc, #16]	@ (800381c <__NVIC_SystemReset+0x28>)
 800380a:	4313      	orrs	r3, r2
 800380c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800380e:	f3bf 8f4f 	dsb	sy
}
 8003812:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <__NVIC_SystemReset+0x20>
 8003818:	e000ed00 	.word	0xe000ed00
 800381c:	05fa0004 	.word	0x05fa0004

08003820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3b01      	subs	r3, #1
 800382c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003830:	d301      	bcc.n	8003836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003832:	2301      	movs	r3, #1
 8003834:	e00f      	b.n	8003856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003836:	4a0a      	ldr	r2, [pc, #40]	@ (8003860 <SysTick_Config+0x40>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3b01      	subs	r3, #1
 800383c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800383e:	210f      	movs	r1, #15
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	f7ff ff7a 	bl	800373c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003848:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <SysTick_Config+0x40>)
 800384a:	2200      	movs	r2, #0
 800384c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800384e:	4b04      	ldr	r3, [pc, #16]	@ (8003860 <SysTick_Config+0x40>)
 8003850:	2207      	movs	r2, #7
 8003852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	e000e010 	.word	0xe000e010

08003864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff17 	bl	80036a0 <__NVIC_SetPriorityGrouping>
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800388c:	f7ff ff2c 	bl	80036e8 <__NVIC_GetPriorityGrouping>
 8003890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	6978      	ldr	r0, [r7, #20]
 8003898:	f7ff ff7a 	bl	8003790 <NVIC_EncodePriority>
 800389c:	4602      	mov	r2, r0
 800389e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff49 	bl	800373c <__NVIC_SetPriority>
}
 80038aa:	bf00      	nop
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ff1f 	bl	8003704 <__NVIC_EnableIRQ>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80038d2:	f7ff ff8f 	bl	80037f4 <__NVIC_SystemReset>

080038d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ff9e 	bl	8003820 <SysTick_Config>
 80038e4:	4603      	mov	r3, r0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d008      	beq.n	8003918 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2204      	movs	r2, #4
 800390a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e020      	b.n	800395a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 020e 	bic.w	r2, r2, #14
 8003926:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f202 	lsl.w	r2, r1, r2
 8003946:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003958:	7bfb      	ldrb	r3, [r7, #15]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d005      	beq.n	8003988 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2204      	movs	r2, #4
 8003980:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e051      	b.n	8003a2c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 020e 	bic.w	r2, r2, #14
 8003996:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a22      	ldr	r2, [pc, #136]	@ (8003a38 <HAL_DMA_Abort_IT+0xd4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d029      	beq.n	8003a06 <HAL_DMA_Abort_IT+0xa2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a21      	ldr	r2, [pc, #132]	@ (8003a3c <HAL_DMA_Abort_IT+0xd8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d022      	beq.n	8003a02 <HAL_DMA_Abort_IT+0x9e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a40 <HAL_DMA_Abort_IT+0xdc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01a      	beq.n	80039fc <HAL_DMA_Abort_IT+0x98>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003a44 <HAL_DMA_Abort_IT+0xe0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d012      	beq.n	80039f6 <HAL_DMA_Abort_IT+0x92>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a48 <HAL_DMA_Abort_IT+0xe4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00a      	beq.n	80039f0 <HAL_DMA_Abort_IT+0x8c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1b      	ldr	r2, [pc, #108]	@ (8003a4c <HAL_DMA_Abort_IT+0xe8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d102      	bne.n	80039ea <HAL_DMA_Abort_IT+0x86>
 80039e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039e8:	e00e      	b.n	8003a08 <HAL_DMA_Abort_IT+0xa4>
 80039ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039ee:	e00b      	b.n	8003a08 <HAL_DMA_Abort_IT+0xa4>
 80039f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039f4:	e008      	b.n	8003a08 <HAL_DMA_Abort_IT+0xa4>
 80039f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039fa:	e005      	b.n	8003a08 <HAL_DMA_Abort_IT+0xa4>
 80039fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a00:	e002      	b.n	8003a08 <HAL_DMA_Abort_IT+0xa4>
 8003a02:	2310      	movs	r3, #16
 8003a04:	e000      	b.n	8003a08 <HAL_DMA_Abort_IT+0xa4>
 8003a06:	2301      	movs	r3, #1
 8003a08:	4a11      	ldr	r2, [pc, #68]	@ (8003a50 <HAL_DMA_Abort_IT+0xec>)
 8003a0a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
    } 
  }
  return status;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40020008 	.word	0x40020008
 8003a3c:	4002001c 	.word	0x4002001c
 8003a40:	40020030 	.word	0x40020030
 8003a44:	40020044 	.word	0x40020044
 8003a48:	40020058 	.word	0x40020058
 8003a4c:	4002006c 	.word	0x4002006c
 8003a50:	40020000 	.word	0x40020000

08003a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b08b      	sub	sp, #44	@ 0x2c
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a62:	2300      	movs	r3, #0
 8003a64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a66:	e169      	b.n	8003d3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a68:	2201      	movs	r2, #1
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	f040 8158 	bne.w	8003d36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4a9a      	ldr	r2, [pc, #616]	@ (8003cf4 <HAL_GPIO_Init+0x2a0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d05e      	beq.n	8003b4e <HAL_GPIO_Init+0xfa>
 8003a90:	4a98      	ldr	r2, [pc, #608]	@ (8003cf4 <HAL_GPIO_Init+0x2a0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d875      	bhi.n	8003b82 <HAL_GPIO_Init+0x12e>
 8003a96:	4a98      	ldr	r2, [pc, #608]	@ (8003cf8 <HAL_GPIO_Init+0x2a4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d058      	beq.n	8003b4e <HAL_GPIO_Init+0xfa>
 8003a9c:	4a96      	ldr	r2, [pc, #600]	@ (8003cf8 <HAL_GPIO_Init+0x2a4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d86f      	bhi.n	8003b82 <HAL_GPIO_Init+0x12e>
 8003aa2:	4a96      	ldr	r2, [pc, #600]	@ (8003cfc <HAL_GPIO_Init+0x2a8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d052      	beq.n	8003b4e <HAL_GPIO_Init+0xfa>
 8003aa8:	4a94      	ldr	r2, [pc, #592]	@ (8003cfc <HAL_GPIO_Init+0x2a8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d869      	bhi.n	8003b82 <HAL_GPIO_Init+0x12e>
 8003aae:	4a94      	ldr	r2, [pc, #592]	@ (8003d00 <HAL_GPIO_Init+0x2ac>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d04c      	beq.n	8003b4e <HAL_GPIO_Init+0xfa>
 8003ab4:	4a92      	ldr	r2, [pc, #584]	@ (8003d00 <HAL_GPIO_Init+0x2ac>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d863      	bhi.n	8003b82 <HAL_GPIO_Init+0x12e>
 8003aba:	4a92      	ldr	r2, [pc, #584]	@ (8003d04 <HAL_GPIO_Init+0x2b0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d046      	beq.n	8003b4e <HAL_GPIO_Init+0xfa>
 8003ac0:	4a90      	ldr	r2, [pc, #576]	@ (8003d04 <HAL_GPIO_Init+0x2b0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d85d      	bhi.n	8003b82 <HAL_GPIO_Init+0x12e>
 8003ac6:	2b12      	cmp	r3, #18
 8003ac8:	d82a      	bhi.n	8003b20 <HAL_GPIO_Init+0xcc>
 8003aca:	2b12      	cmp	r3, #18
 8003acc:	d859      	bhi.n	8003b82 <HAL_GPIO_Init+0x12e>
 8003ace:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <HAL_GPIO_Init+0x80>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003b4f 	.word	0x08003b4f
 8003ad8:	08003b29 	.word	0x08003b29
 8003adc:	08003b3b 	.word	0x08003b3b
 8003ae0:	08003b7d 	.word	0x08003b7d
 8003ae4:	08003b83 	.word	0x08003b83
 8003ae8:	08003b83 	.word	0x08003b83
 8003aec:	08003b83 	.word	0x08003b83
 8003af0:	08003b83 	.word	0x08003b83
 8003af4:	08003b83 	.word	0x08003b83
 8003af8:	08003b83 	.word	0x08003b83
 8003afc:	08003b83 	.word	0x08003b83
 8003b00:	08003b83 	.word	0x08003b83
 8003b04:	08003b83 	.word	0x08003b83
 8003b08:	08003b83 	.word	0x08003b83
 8003b0c:	08003b83 	.word	0x08003b83
 8003b10:	08003b83 	.word	0x08003b83
 8003b14:	08003b83 	.word	0x08003b83
 8003b18:	08003b31 	.word	0x08003b31
 8003b1c:	08003b45 	.word	0x08003b45
 8003b20:	4a79      	ldr	r2, [pc, #484]	@ (8003d08 <HAL_GPIO_Init+0x2b4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b26:	e02c      	b.n	8003b82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	623b      	str	r3, [r7, #32]
          break;
 8003b2e:	e029      	b.n	8003b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	3304      	adds	r3, #4
 8003b36:	623b      	str	r3, [r7, #32]
          break;
 8003b38:	e024      	b.n	8003b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	3308      	adds	r3, #8
 8003b40:	623b      	str	r3, [r7, #32]
          break;
 8003b42:	e01f      	b.n	8003b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	623b      	str	r3, [r7, #32]
          break;
 8003b4c:	e01a      	b.n	8003b84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b56:	2304      	movs	r3, #4
 8003b58:	623b      	str	r3, [r7, #32]
          break;
 8003b5a:	e013      	b.n	8003b84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b64:	2308      	movs	r3, #8
 8003b66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	611a      	str	r2, [r3, #16]
          break;
 8003b6e:	e009      	b.n	8003b84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b70:	2308      	movs	r3, #8
 8003b72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	615a      	str	r2, [r3, #20]
          break;
 8003b7a:	e003      	b.n	8003b84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	623b      	str	r3, [r7, #32]
          break;
 8003b80:	e000      	b.n	8003b84 <HAL_GPIO_Init+0x130>
          break;
 8003b82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2bff      	cmp	r3, #255	@ 0xff
 8003b88:	d801      	bhi.n	8003b8e <HAL_GPIO_Init+0x13a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	e001      	b.n	8003b92 <HAL_GPIO_Init+0x13e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2bff      	cmp	r3, #255	@ 0xff
 8003b98:	d802      	bhi.n	8003ba0 <HAL_GPIO_Init+0x14c>
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	e002      	b.n	8003ba6 <HAL_GPIO_Init+0x152>
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	3b08      	subs	r3, #8
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	210f      	movs	r1, #15
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	6a39      	ldr	r1, [r7, #32]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80b1 	beq.w	8003d36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8003d0c <HAL_GPIO_Init+0x2b8>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	4a4c      	ldr	r2, [pc, #304]	@ (8003d0c <HAL_GPIO_Init+0x2b8>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6193      	str	r3, [r2, #24]
 8003be0:	4b4a      	ldr	r3, [pc, #296]	@ (8003d0c <HAL_GPIO_Init+0x2b8>)
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003bec:	4a48      	ldr	r2, [pc, #288]	@ (8003d10 <HAL_GPIO_Init+0x2bc>)
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	089b      	lsrs	r3, r3, #2
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	220f      	movs	r2, #15
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a40      	ldr	r2, [pc, #256]	@ (8003d14 <HAL_GPIO_Init+0x2c0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <HAL_GPIO_Init+0x1ec>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a3f      	ldr	r2, [pc, #252]	@ (8003d18 <HAL_GPIO_Init+0x2c4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00d      	beq.n	8003c3c <HAL_GPIO_Init+0x1e8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a3e      	ldr	r2, [pc, #248]	@ (8003d1c <HAL_GPIO_Init+0x2c8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d007      	beq.n	8003c38 <HAL_GPIO_Init+0x1e4>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a3d      	ldr	r2, [pc, #244]	@ (8003d20 <HAL_GPIO_Init+0x2cc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d101      	bne.n	8003c34 <HAL_GPIO_Init+0x1e0>
 8003c30:	2303      	movs	r3, #3
 8003c32:	e006      	b.n	8003c42 <HAL_GPIO_Init+0x1ee>
 8003c34:	2304      	movs	r3, #4
 8003c36:	e004      	b.n	8003c42 <HAL_GPIO_Init+0x1ee>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e002      	b.n	8003c42 <HAL_GPIO_Init+0x1ee>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <HAL_GPIO_Init+0x1ee>
 8003c40:	2300      	movs	r3, #0
 8003c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c44:	f002 0203 	and.w	r2, r2, #3
 8003c48:	0092      	lsls	r2, r2, #2
 8003c4a:	4093      	lsls	r3, r2
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c52:	492f      	ldr	r1, [pc, #188]	@ (8003d10 <HAL_GPIO_Init+0x2bc>)
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	3302      	adds	r3, #2
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d006      	beq.n	8003c7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	492c      	ldr	r1, [pc, #176]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]
 8003c78:	e006      	b.n	8003c88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	4928      	ldr	r1, [pc, #160]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d006      	beq.n	8003ca2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c94:	4b23      	ldr	r3, [pc, #140]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	4922      	ldr	r1, [pc, #136]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60cb      	str	r3, [r1, #12]
 8003ca0:	e006      	b.n	8003cb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ca2:	4b20      	ldr	r3, [pc, #128]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	491e      	ldr	r1, [pc, #120]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d006      	beq.n	8003cca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cbc:	4b19      	ldr	r3, [pc, #100]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	4918      	ldr	r1, [pc, #96]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]
 8003cc8:	e006      	b.n	8003cd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cca:	4b16      	ldr	r3, [pc, #88]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	4914      	ldr	r1, [pc, #80]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d021      	beq.n	8003d28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	490e      	ldr	r1, [pc, #56]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]
 8003cf0:	e021      	b.n	8003d36 <HAL_GPIO_Init+0x2e2>
 8003cf2:	bf00      	nop
 8003cf4:	10320000 	.word	0x10320000
 8003cf8:	10310000 	.word	0x10310000
 8003cfc:	10220000 	.word	0x10220000
 8003d00:	10210000 	.word	0x10210000
 8003d04:	10120000 	.word	0x10120000
 8003d08:	10110000 	.word	0x10110000
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40010000 	.word	0x40010000
 8003d14:	40010800 	.word	0x40010800
 8003d18:	40010c00 	.word	0x40010c00
 8003d1c:	40011000 	.word	0x40011000
 8003d20:	40011400 	.word	0x40011400
 8003d24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	4909      	ldr	r1, [pc, #36]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	3301      	adds	r3, #1
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	fa22 f303 	lsr.w	r3, r2, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f47f ae8e 	bne.w	8003a68 <HAL_GPIO_Init+0x14>
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	372c      	adds	r7, #44	@ 0x2c
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	40010400 	.word	0x40010400

08003d5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	887b      	ldrh	r3, [r7, #2]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
 8003d78:	e001      	b.n	8003d7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	807b      	strh	r3, [r7, #2]
 8003d96:	4613      	mov	r3, r2
 8003d98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d9a:	787b      	ldrb	r3, [r7, #1]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003da0:	887a      	ldrh	r2, [r7, #2]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003da6:	e003      	b.n	8003db0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003da8:	887b      	ldrh	r3, [r7, #2]
 8003daa:	041a      	lsls	r2, r3, #16
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	611a      	str	r2, [r3, #16]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
	...

08003dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e12b      	b.n	8004026 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fe ff74 	bl	8002cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	@ 0x24
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e20:	f001 f842 	bl	8004ea8 <HAL_RCC_GetPCLK1Freq>
 8003e24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4a81      	ldr	r2, [pc, #516]	@ (8004030 <HAL_I2C_Init+0x274>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d807      	bhi.n	8003e40 <HAL_I2C_Init+0x84>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a80      	ldr	r2, [pc, #512]	@ (8004034 <HAL_I2C_Init+0x278>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	bf94      	ite	ls
 8003e38:	2301      	movls	r3, #1
 8003e3a:	2300      	movhi	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e006      	b.n	8003e4e <HAL_I2C_Init+0x92>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a7d      	ldr	r2, [pc, #500]	@ (8004038 <HAL_I2C_Init+0x27c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	bf94      	ite	ls
 8003e48:	2301      	movls	r3, #1
 8003e4a:	2300      	movhi	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e0e7      	b.n	8004026 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4a78      	ldr	r2, [pc, #480]	@ (800403c <HAL_I2C_Init+0x280>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	0c9b      	lsrs	r3, r3, #18
 8003e60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4a6a      	ldr	r2, [pc, #424]	@ (8004030 <HAL_I2C_Init+0x274>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d802      	bhi.n	8003e90 <HAL_I2C_Init+0xd4>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	e009      	b.n	8003ea4 <HAL_I2C_Init+0xe8>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	4a69      	ldr	r2, [pc, #420]	@ (8004040 <HAL_I2C_Init+0x284>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	099b      	lsrs	r3, r3, #6
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003eb6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	495c      	ldr	r1, [pc, #368]	@ (8004030 <HAL_I2C_Init+0x274>)
 8003ec0:	428b      	cmp	r3, r1
 8003ec2:	d819      	bhi.n	8003ef8 <HAL_I2C_Init+0x13c>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1e59      	subs	r1, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed2:	1c59      	adds	r1, r3, #1
 8003ed4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ed8:	400b      	ands	r3, r1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_I2C_Init+0x138>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1e59      	subs	r1, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eec:	3301      	adds	r3, #1
 8003eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef2:	e051      	b.n	8003f98 <HAL_I2C_Init+0x1dc>
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	e04f      	b.n	8003f98 <HAL_I2C_Init+0x1dc>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d111      	bne.n	8003f24 <HAL_I2C_Init+0x168>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1e58      	subs	r0, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	440b      	add	r3, r1
 8003f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f12:	3301      	adds	r3, #1
 8003f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e012      	b.n	8003f4a <HAL_I2C_Init+0x18e>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1e58      	subs	r0, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	0099      	lsls	r1, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf0c      	ite	eq
 8003f44:	2301      	moveq	r3, #1
 8003f46:	2300      	movne	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Init+0x196>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e022      	b.n	8003f98 <HAL_I2C_Init+0x1dc>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10e      	bne.n	8003f78 <HAL_I2C_Init+0x1bc>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1e58      	subs	r0, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	460b      	mov	r3, r1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	440b      	add	r3, r1
 8003f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f76:	e00f      	b.n	8003f98 <HAL_I2C_Init+0x1dc>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1e58      	subs	r0, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	0099      	lsls	r1, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	6809      	ldr	r1, [r1, #0]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003fc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6911      	ldr	r1, [r2, #16]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68d2      	ldr	r2, [r2, #12]
 8003fd2:	4311      	orrs	r1, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	000186a0 	.word	0x000186a0
 8004034:	001e847f 	.word	0x001e847f
 8004038:	003d08ff 	.word	0x003d08ff
 800403c:	431bde83 	.word	0x431bde83
 8004040:	10624dd3 	.word	0x10624dd3

08004044 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	461a      	mov	r2, r3
 8004052:	4603      	mov	r3, r0
 8004054:	817b      	strh	r3, [r7, #10]
 8004056:	460b      	mov	r3, r1
 8004058:	813b      	strh	r3, [r7, #8]
 800405a:	4613      	mov	r3, r2
 800405c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800405e:	f7ff f8df 	bl	8003220 <HAL_GetTick>
 8004062:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b20      	cmp	r3, #32
 800406e:	f040 80d9 	bne.w	8004224 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	2319      	movs	r3, #25
 8004078:	2201      	movs	r2, #1
 800407a:	496d      	ldr	r1, [pc, #436]	@ (8004230 <HAL_I2C_Mem_Write+0x1ec>)
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f971 	bl	8004364 <I2C_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004088:	2302      	movs	r3, #2
 800408a:	e0cc      	b.n	8004226 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_I2C_Mem_Write+0x56>
 8004096:	2302      	movs	r3, #2
 8004098:	e0c5      	b.n	8004226 <HAL_I2C_Mem_Write+0x1e2>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d007      	beq.n	80040c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2221      	movs	r2, #33	@ 0x21
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2240      	movs	r2, #64	@ 0x40
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a3a      	ldr	r2, [r7, #32]
 80040ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4a4d      	ldr	r2, [pc, #308]	@ (8004234 <HAL_I2C_Mem_Write+0x1f0>)
 8004100:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004102:	88f8      	ldrh	r0, [r7, #6]
 8004104:	893a      	ldrh	r2, [r7, #8]
 8004106:	8979      	ldrh	r1, [r7, #10]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	4603      	mov	r3, r0
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f890 	bl	8004238 <I2C_RequestMemoryWrite>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d052      	beq.n	80041c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e081      	b.n	8004226 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fa36 	bl	8004598 <I2C_WaitOnTXEFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00d      	beq.n	800414e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	2b04      	cmp	r3, #4
 8004138:	d107      	bne.n	800414a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004148:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e06b      	b.n	8004226 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	781a      	ldrb	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b04      	cmp	r3, #4
 800418a:	d11b      	bne.n	80041c4 <HAL_I2C_Mem_Write+0x180>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004190:	2b00      	cmp	r3, #0
 8004192:	d017      	beq.n	80041c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1aa      	bne.n	8004122 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fa29 	bl	8004628 <I2C_WaitOnBTFFlagUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00d      	beq.n	80041f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d107      	bne.n	80041f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e016      	b.n	8004226 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	e000      	b.n	8004226 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004224:	2302      	movs	r3, #2
  }
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	00100002 	.word	0x00100002
 8004234:	ffff0000 	.word	0xffff0000

08004238 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	4608      	mov	r0, r1
 8004242:	4611      	mov	r1, r2
 8004244:	461a      	mov	r2, r3
 8004246:	4603      	mov	r3, r0
 8004248:	817b      	strh	r3, [r7, #10]
 800424a:	460b      	mov	r3, r1
 800424c:	813b      	strh	r3, [r7, #8]
 800424e:	4613      	mov	r3, r2
 8004250:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004260:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	2200      	movs	r2, #0
 800426a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f878 	bl	8004364 <I2C_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00d      	beq.n	8004296 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004288:	d103      	bne.n	8004292 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004290:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e05f      	b.n	8004356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004296:	897b      	ldrh	r3, [r7, #10]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	6a3a      	ldr	r2, [r7, #32]
 80042aa:	492d      	ldr	r1, [pc, #180]	@ (8004360 <I2C_RequestMemoryWrite+0x128>)
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f8d3 	bl	8004458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e04c      	b.n	8004356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d4:	6a39      	ldr	r1, [r7, #32]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f95e 	bl	8004598 <I2C_WaitOnTXEFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00d      	beq.n	80042fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d107      	bne.n	80042fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e02b      	b.n	8004356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d105      	bne.n	8004310 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004304:	893b      	ldrh	r3, [r7, #8]
 8004306:	b2da      	uxtb	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	611a      	str	r2, [r3, #16]
 800430e:	e021      	b.n	8004354 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004310:	893b      	ldrh	r3, [r7, #8]
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	b29b      	uxth	r3, r3
 8004316:	b2da      	uxtb	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800431e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004320:	6a39      	ldr	r1, [r7, #32]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f938 	bl	8004598 <I2C_WaitOnTXEFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00d      	beq.n	800434a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	2b04      	cmp	r3, #4
 8004334:	d107      	bne.n	8004346 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004344:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e005      	b.n	8004356 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800434a:	893b      	ldrh	r3, [r7, #8]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	00010002 	.word	0x00010002

08004364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004374:	e048      	b.n	8004408 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d044      	beq.n	8004408 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437e:	f7fe ff4f 	bl	8003220 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d302      	bcc.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d139      	bne.n	8004408 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	0c1b      	lsrs	r3, r3, #16
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10d      	bne.n	80043ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	43da      	mvns	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4013      	ands	r3, r2
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	e00c      	b.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	43da      	mvns	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d116      	bne.n	8004408 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e023      	b.n	8004450 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d10d      	bne.n	800442e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	43da      	mvns	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	e00c      	b.n	8004448 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	43da      	mvns	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4013      	ands	r3, r2
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	429a      	cmp	r2, r3
 800444c:	d093      	beq.n	8004376 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004466:	e071      	b.n	800454c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004476:	d123      	bne.n	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004486:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004490:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	f043 0204 	orr.w	r2, r3, #4
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e067      	b.n	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d041      	beq.n	800454c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c8:	f7fe feaa 	bl	8003220 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d302      	bcc.n	80044de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d136      	bne.n	800454c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d10c      	bne.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	43da      	mvns	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4013      	ands	r3, r2
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	e00b      	b.n	800451a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	43da      	mvns	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4013      	ands	r3, r2
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf14      	ite	ne
 8004514:	2301      	movne	r3, #1
 8004516:	2300      	moveq	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	f043 0220 	orr.w	r2, r3, #32
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e021      	b.n	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	0c1b      	lsrs	r3, r3, #16
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b01      	cmp	r3, #1
 8004554:	d10c      	bne.n	8004570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	43da      	mvns	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4013      	ands	r3, r2
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf14      	ite	ne
 8004568:	2301      	movne	r3, #1
 800456a:	2300      	moveq	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e00b      	b.n	8004588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	43da      	mvns	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4013      	ands	r3, r2
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	bf14      	ite	ne
 8004582:	2301      	movne	r3, #1
 8004584:	2300      	moveq	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	f47f af6d 	bne.w	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a4:	e034      	b.n	8004610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f886 	bl	80046b8 <I2C_IsAcknowledgeFailed>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e034      	b.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d028      	beq.n	8004610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fe fe2f 	bl	8003220 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11d      	bne.n	8004610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045de:	2b80      	cmp	r3, #128	@ 0x80
 80045e0:	d016      	beq.n	8004610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	f043 0220 	orr.w	r2, r3, #32
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e007      	b.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461a:	2b80      	cmp	r3, #128	@ 0x80
 800461c:	d1c3      	bne.n	80045a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004634:	e034      	b.n	80046a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f83e 	bl	80046b8 <I2C_IsAcknowledgeFailed>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e034      	b.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d028      	beq.n	80046a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464e:	f7fe fde7 	bl	8003220 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d11d      	bne.n	80046a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b04      	cmp	r3, #4
 8004670:	d016      	beq.n	80046a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e007      	b.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d1c3      	bne.n	8004636 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ce:	d11b      	bne.n	8004708 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	f043 0204 	orr.w	r2, r3, #4
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr

08004714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e272      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8087 	beq.w	8004842 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004734:	4b92      	ldr	r3, [pc, #584]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b04      	cmp	r3, #4
 800473e:	d00c      	beq.n	800475a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004740:	4b8f      	ldr	r3, [pc, #572]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 030c 	and.w	r3, r3, #12
 8004748:	2b08      	cmp	r3, #8
 800474a:	d112      	bne.n	8004772 <HAL_RCC_OscConfig+0x5e>
 800474c:	4b8c      	ldr	r3, [pc, #560]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004758:	d10b      	bne.n	8004772 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475a:	4b89      	ldr	r3, [pc, #548]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d06c      	beq.n	8004840 <HAL_RCC_OscConfig+0x12c>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d168      	bne.n	8004840 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e24c      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x76>
 800477c:	4b80      	ldr	r3, [pc, #512]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a7f      	ldr	r2, [pc, #508]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 8004782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e02e      	b.n	80047e8 <HAL_RCC_OscConfig+0xd4>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0x98>
 8004792:	4b7b      	ldr	r3, [pc, #492]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a7a      	ldr	r2, [pc, #488]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 8004798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	4b78      	ldr	r3, [pc, #480]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a77      	ldr	r2, [pc, #476]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e01d      	b.n	80047e8 <HAL_RCC_OscConfig+0xd4>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCC_OscConfig+0xbc>
 80047b6:	4b72      	ldr	r3, [pc, #456]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a71      	ldr	r2, [pc, #452]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80047bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	4b6f      	ldr	r3, [pc, #444]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a6e      	ldr	r2, [pc, #440]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80047c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	e00b      	b.n	80047e8 <HAL_RCC_OscConfig+0xd4>
 80047d0:	4b6b      	ldr	r3, [pc, #428]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a6a      	ldr	r2, [pc, #424]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80047d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	4b68      	ldr	r3, [pc, #416]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a67      	ldr	r2, [pc, #412]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80047e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d013      	beq.n	8004818 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f0:	f7fe fd16 	bl	8003220 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f8:	f7fe fd12 	bl	8003220 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b64      	cmp	r3, #100	@ 0x64
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e200      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	4b5d      	ldr	r3, [pc, #372]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0xe4>
 8004816:	e014      	b.n	8004842 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fe fd02 	bl	8003220 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004820:	f7fe fcfe 	bl	8003220 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	@ 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e1ec      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004832:	4b53      	ldr	r3, [pc, #332]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x10c>
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d063      	beq.n	8004916 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800484e:	4b4c      	ldr	r3, [pc, #304]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00b      	beq.n	8004872 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800485a:	4b49      	ldr	r3, [pc, #292]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b08      	cmp	r3, #8
 8004864:	d11c      	bne.n	80048a0 <HAL_RCC_OscConfig+0x18c>
 8004866:	4b46      	ldr	r3, [pc, #280]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d116      	bne.n	80048a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004872:	4b43      	ldr	r3, [pc, #268]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <HAL_RCC_OscConfig+0x176>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d001      	beq.n	800488a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e1c0      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488a:	4b3d      	ldr	r3, [pc, #244]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4939      	ldr	r1, [pc, #228]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 800489a:	4313      	orrs	r3, r2
 800489c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489e:	e03a      	b.n	8004916 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d020      	beq.n	80048ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a8:	4b36      	ldr	r3, [pc, #216]	@ (8004984 <HAL_RCC_OscConfig+0x270>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fe fcb7 	bl	8003220 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b6:	f7fe fcb3 	bl	8003220 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e1a1      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4927      	ldr	r1, [pc, #156]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]
 80048e8:	e015      	b.n	8004916 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ea:	4b26      	ldr	r3, [pc, #152]	@ (8004984 <HAL_RCC_OscConfig+0x270>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f0:	f7fe fc96 	bl	8003220 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f8:	f7fe fc92 	bl	8003220 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e180      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490a:	4b1d      	ldr	r3, [pc, #116]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d03a      	beq.n	8004998 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d019      	beq.n	800495e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800492a:	4b17      	ldr	r3, [pc, #92]	@ (8004988 <HAL_RCC_OscConfig+0x274>)
 800492c:	2201      	movs	r2, #1
 800492e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004930:	f7fe fc76 	bl	8003220 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004938:	f7fe fc72 	bl	8003220 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e160      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494a:	4b0d      	ldr	r3, [pc, #52]	@ (8004980 <HAL_RCC_OscConfig+0x26c>)
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004956:	2001      	movs	r0, #1
 8004958:	f000 face 	bl	8004ef8 <RCC_Delay>
 800495c:	e01c      	b.n	8004998 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800495e:	4b0a      	ldr	r3, [pc, #40]	@ (8004988 <HAL_RCC_OscConfig+0x274>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004964:	f7fe fc5c 	bl	8003220 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800496a:	e00f      	b.n	800498c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800496c:	f7fe fc58 	bl	8003220 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d908      	bls.n	800498c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e146      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000
 8004984:	42420000 	.word	0x42420000
 8004988:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800498c:	4b92      	ldr	r3, [pc, #584]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e9      	bne.n	800496c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80a6 	beq.w	8004af2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a6:	2300      	movs	r3, #0
 80049a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049aa:	4b8b      	ldr	r3, [pc, #556]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10d      	bne.n	80049d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b6:	4b88      	ldr	r3, [pc, #544]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	4a87      	ldr	r2, [pc, #540]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c0:	61d3      	str	r3, [r2, #28]
 80049c2:	4b85      	ldr	r3, [pc, #532]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ce:	2301      	movs	r3, #1
 80049d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d2:	4b82      	ldr	r3, [pc, #520]	@ (8004bdc <HAL_RCC_OscConfig+0x4c8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d118      	bne.n	8004a10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049de:	4b7f      	ldr	r3, [pc, #508]	@ (8004bdc <HAL_RCC_OscConfig+0x4c8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a7e      	ldr	r2, [pc, #504]	@ (8004bdc <HAL_RCC_OscConfig+0x4c8>)
 80049e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ea:	f7fe fc19 	bl	8003220 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f2:	f7fe fc15 	bl	8003220 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b64      	cmp	r3, #100	@ 0x64
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e103      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a04:	4b75      	ldr	r3, [pc, #468]	@ (8004bdc <HAL_RCC_OscConfig+0x4c8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d106      	bne.n	8004a26 <HAL_RCC_OscConfig+0x312>
 8004a18:	4b6f      	ldr	r3, [pc, #444]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	4a6e      	ldr	r2, [pc, #440]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a1e:	f043 0301 	orr.w	r3, r3, #1
 8004a22:	6213      	str	r3, [r2, #32]
 8004a24:	e02d      	b.n	8004a82 <HAL_RCC_OscConfig+0x36e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10c      	bne.n	8004a48 <HAL_RCC_OscConfig+0x334>
 8004a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	4a69      	ldr	r2, [pc, #420]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	6213      	str	r3, [r2, #32]
 8004a3a:	4b67      	ldr	r3, [pc, #412]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	4a66      	ldr	r2, [pc, #408]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a40:	f023 0304 	bic.w	r3, r3, #4
 8004a44:	6213      	str	r3, [r2, #32]
 8004a46:	e01c      	b.n	8004a82 <HAL_RCC_OscConfig+0x36e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b05      	cmp	r3, #5
 8004a4e:	d10c      	bne.n	8004a6a <HAL_RCC_OscConfig+0x356>
 8004a50:	4b61      	ldr	r3, [pc, #388]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	4a60      	ldr	r2, [pc, #384]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a56:	f043 0304 	orr.w	r3, r3, #4
 8004a5a:	6213      	str	r3, [r2, #32]
 8004a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4a5d      	ldr	r2, [pc, #372]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	6213      	str	r3, [r2, #32]
 8004a68:	e00b      	b.n	8004a82 <HAL_RCC_OscConfig+0x36e>
 8004a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	4a5a      	ldr	r2, [pc, #360]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	6213      	str	r3, [r2, #32]
 8004a76:	4b58      	ldr	r3, [pc, #352]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	4a57      	ldr	r2, [pc, #348]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a7c:	f023 0304 	bic.w	r3, r3, #4
 8004a80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d015      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8a:	f7fe fbc9 	bl	8003220 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a92:	f7fe fbc5 	bl	8003220 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e0b1      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0ee      	beq.n	8004a92 <HAL_RCC_OscConfig+0x37e>
 8004ab4:	e014      	b.n	8004ae0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab6:	f7fe fbb3 	bl	8003220 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004abc:	e00a      	b.n	8004ad4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004abe:	f7fe fbaf 	bl	8003220 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e09b      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad4:	4b40      	ldr	r3, [pc, #256]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1ee      	bne.n	8004abe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d105      	bne.n	8004af2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	4a3b      	ldr	r2, [pc, #236]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004aec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004af0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 8087 	beq.w	8004c0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004afc:	4b36      	ldr	r3, [pc, #216]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 030c 	and.w	r3, r3, #12
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d061      	beq.n	8004bcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d146      	bne.n	8004b9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b10:	4b33      	ldr	r3, [pc, #204]	@ (8004be0 <HAL_RCC_OscConfig+0x4cc>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7fe fb83 	bl	8003220 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fe fb7f 	bl	8003220 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e06d      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b30:	4b29      	ldr	r3, [pc, #164]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b44:	d108      	bne.n	8004b58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b46:	4b24      	ldr	r3, [pc, #144]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	4921      	ldr	r1, [pc, #132]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b58:	4b1f      	ldr	r3, [pc, #124]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a19      	ldr	r1, [r3, #32]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	491b      	ldr	r1, [pc, #108]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b70:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <HAL_RCC_OscConfig+0x4cc>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b76:	f7fe fb53 	bl	8003220 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7e:	f7fe fb4f 	bl	8003220 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e03d      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b90:	4b11      	ldr	r3, [pc, #68]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x46a>
 8004b9c:	e035      	b.n	8004c0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b9e:	4b10      	ldr	r3, [pc, #64]	@ (8004be0 <HAL_RCC_OscConfig+0x4cc>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fe fb3c 	bl	8003220 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bac:	f7fe fb38 	bl	8003220 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e026      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bbe:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <HAL_RCC_OscConfig+0x4c4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x498>
 8004bca:	e01e      	b.n	8004c0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e019      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	40007000 	.word	0x40007000
 8004be0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004be4:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <HAL_RCC_OscConfig+0x500>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d106      	bne.n	8004c06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d001      	beq.n	8004c0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40021000 	.word	0x40021000

08004c18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0d0      	b.n	8004dce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d910      	bls.n	8004c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b67      	ldr	r3, [pc, #412]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 0207 	bic.w	r2, r3, #7
 8004c42:	4965      	ldr	r1, [pc, #404]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b63      	ldr	r3, [pc, #396]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0b8      	b.n	8004dce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d020      	beq.n	8004caa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c74:	4b59      	ldr	r3, [pc, #356]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4a58      	ldr	r2, [pc, #352]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c8c:	4b53      	ldr	r3, [pc, #332]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a52      	ldr	r2, [pc, #328]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c98:	4b50      	ldr	r3, [pc, #320]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	494d      	ldr	r1, [pc, #308]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d040      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d107      	bne.n	8004cce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cbe:	4b47      	ldr	r3, [pc, #284]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d115      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e07f      	b.n	8004dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d107      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd6:	4b41      	ldr	r3, [pc, #260]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e073      	b.n	8004dce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e06b      	b.n	8004dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cf6:	4b39      	ldr	r3, [pc, #228]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f023 0203 	bic.w	r2, r3, #3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4936      	ldr	r1, [pc, #216]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d08:	f7fe fa8a 	bl	8003220 <HAL_GetTick>
 8004d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0e:	e00a      	b.n	8004d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d10:	f7fe fa86 	bl	8003220 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e053      	b.n	8004dce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	4b2d      	ldr	r3, [pc, #180]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f003 020c 	and.w	r2, r3, #12
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d1eb      	bne.n	8004d10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d38:	4b27      	ldr	r3, [pc, #156]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d210      	bcs.n	8004d68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d46:	4b24      	ldr	r3, [pc, #144]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f023 0207 	bic.w	r2, r3, #7
 8004d4e:	4922      	ldr	r1, [pc, #136]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b20      	ldr	r3, [pc, #128]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e032      	b.n	8004dce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d74:	4b19      	ldr	r3, [pc, #100]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	4916      	ldr	r1, [pc, #88]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d92:	4b12      	ldr	r3, [pc, #72]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	490e      	ldr	r1, [pc, #56]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004da6:	f000 f821 	bl	8004dec <HAL_RCC_GetSysClockFreq>
 8004daa:	4602      	mov	r2, r0
 8004dac:	4b0b      	ldr	r3, [pc, #44]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	490a      	ldr	r1, [pc, #40]	@ (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004db8:	5ccb      	ldrb	r3, [r1, r3]
 8004dba:	fa22 f303 	lsr.w	r3, r2, r3
 8004dbe:	4a09      	ldr	r2, [pc, #36]	@ (8004de4 <HAL_RCC_ClockConfig+0x1cc>)
 8004dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dc2:	4b09      	ldr	r3, [pc, #36]	@ (8004de8 <HAL_RCC_ClockConfig+0x1d0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fe f9e8 	bl	800319c <HAL_InitTick>

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40022000 	.word	0x40022000
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	0800f0ac 	.word	0x0800f0ac
 8004de4:	20000000 	.word	0x20000000
 8004de8:	20000004 	.word	0x20000004

08004dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e06:	4b1e      	ldr	r3, [pc, #120]	@ (8004e80 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d002      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0x30>
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d003      	beq.n	8004e22 <HAL_RCC_GetSysClockFreq+0x36>
 8004e1a:	e027      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e1c:	4b19      	ldr	r3, [pc, #100]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e1e:	613b      	str	r3, [r7, #16]
      break;
 8004e20:	e027      	b.n	8004e72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	0c9b      	lsrs	r3, r3, #18
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	4a17      	ldr	r2, [pc, #92]	@ (8004e88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e2c:	5cd3      	ldrb	r3, [r2, r3]
 8004e2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d010      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e3a:	4b11      	ldr	r3, [pc, #68]	@ (8004e80 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	0c5b      	lsrs	r3, r3, #17
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	4a11      	ldr	r2, [pc, #68]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e46:	5cd3      	ldrb	r3, [r2, r3]
 8004e48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e4e:	fb03 f202 	mul.w	r2, r3, r2
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e004      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
 8004e64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	613b      	str	r3, [r7, #16]
      break;
 8004e6a:	e002      	b.n	8004e72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e6c:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e6e:	613b      	str	r3, [r7, #16]
      break;
 8004e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e72:	693b      	ldr	r3, [r7, #16]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000
 8004e84:	007a1200 	.word	0x007a1200
 8004e88:	0800f0c4 	.word	0x0800f0c4
 8004e8c:	0800f0d4 	.word	0x0800f0d4
 8004e90:	003d0900 	.word	0x003d0900

08004e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e98:	4b02      	ldr	r3, [pc, #8]	@ (8004ea4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	20000000 	.word	0x20000000

08004ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004eac:	f7ff fff2 	bl	8004e94 <HAL_RCC_GetHCLKFreq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	0a1b      	lsrs	r3, r3, #8
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4903      	ldr	r1, [pc, #12]	@ (8004ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ebe:	5ccb      	ldrb	r3, [r1, r3]
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	0800f0bc 	.word	0x0800f0bc

08004ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ed4:	f7ff ffde 	bl	8004e94 <HAL_RCC_GetHCLKFreq>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	4b05      	ldr	r3, [pc, #20]	@ (8004ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	0adb      	lsrs	r3, r3, #11
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	4903      	ldr	r1, [pc, #12]	@ (8004ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ee6:	5ccb      	ldrb	r3, [r1, r3]
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	0800f0bc 	.word	0x0800f0bc

08004ef8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f00:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <RCC_Delay+0x34>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a0a      	ldr	r2, [pc, #40]	@ (8004f30 <RCC_Delay+0x38>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	0a5b      	lsrs	r3, r3, #9
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	fb02 f303 	mul.w	r3, r2, r3
 8004f12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f14:	bf00      	nop
  }
  while (Delay --);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1e5a      	subs	r2, r3, #1
 8004f1a:	60fa      	str	r2, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f9      	bne.n	8004f14 <RCC_Delay+0x1c>
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr
 8004f2c:	20000000 	.word	0x20000000
 8004f30:	10624dd3 	.word	0x10624dd3

08004f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d07d      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f50:	2300      	movs	r3, #0
 8004f52:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f54:	4b4f      	ldr	r3, [pc, #316]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10d      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f60:	4b4c      	ldr	r3, [pc, #304]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	4a4b      	ldr	r2, [pc, #300]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	61d3      	str	r3, [r2, #28]
 8004f6c:	4b49      	ldr	r3, [pc, #292]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7c:	4b46      	ldr	r3, [pc, #280]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d118      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f88:	4b43      	ldr	r3, [pc, #268]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a42      	ldr	r2, [pc, #264]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f94:	f7fe f944 	bl	8003220 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9a:	e008      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9c:	f7fe f940 	bl	8003220 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	@ 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e06d      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fae:	4b3a      	ldr	r3, [pc, #232]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fba:	4b36      	ldr	r3, [pc, #216]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d02e      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d027      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fee:	4a29      	ldr	r2, [pc, #164]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d014      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffe:	f7fe f90f 	bl	8003220 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005004:	e00a      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005006:	f7fe f90b 	bl	8003220 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005014:	4293      	cmp	r3, r2
 8005016:	d901      	bls.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e036      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501c:	4b1d      	ldr	r3, [pc, #116]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0ee      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005028:	4b1a      	ldr	r3, [pc, #104]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4917      	ldr	r1, [pc, #92]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005036:	4313      	orrs	r3, r2
 8005038:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005040:	4b14      	ldr	r3, [pc, #80]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	4a13      	ldr	r2, [pc, #76]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800504a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005058:	4b0e      	ldr	r3, [pc, #56]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	490b      	ldr	r1, [pc, #44]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005066:	4313      	orrs	r3, r2
 8005068:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005076:	4b07      	ldr	r3, [pc, #28]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	4904      	ldr	r1, [pc, #16]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000
 8005098:	40007000 	.word	0x40007000
 800509c:	42420440 	.word	0x42420440

080050a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e076      	b.n	80051a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d108      	bne.n	80050cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050c2:	d009      	beq.n	80050d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	61da      	str	r2, [r3, #28]
 80050ca:	e005      	b.n	80050d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fd fe3c 	bl	8002d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800510e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515c:	ea42 0103 	orr.w	r1, r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	0c1a      	lsrs	r2, r3, #16
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f002 0204 	and.w	r2, r2, #4
 800517e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69da      	ldr	r2, [r3, #28]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800518e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	4613      	mov	r3, r2
 80051b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_SPI_Transmit+0x22>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e12d      	b.n	8005426 <HAL_SPI_Transmit+0x27e>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051d2:	f7fe f825 	bl	8003220 <HAL_GetTick>
 80051d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d002      	beq.n	80051ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
 80051ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051ec:	e116      	b.n	800541c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_SPI_Transmit+0x52>
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051fe:	e10d      	b.n	800541c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2203      	movs	r2, #3
 8005204:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	88fa      	ldrh	r2, [r7, #6]
 800521e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005246:	d10f      	bne.n	8005268 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005256:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005266:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005272:	2b40      	cmp	r3, #64	@ 0x40
 8005274:	d007      	beq.n	8005286 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005284:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800528e:	d14f      	bne.n	8005330 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <HAL_SPI_Transmit+0xf6>
 8005298:	8afb      	ldrh	r3, [r7, #22]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d142      	bne.n	8005324 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a2:	881a      	ldrh	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ae:	1c9a      	adds	r2, r3, #2
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052c2:	e02f      	b.n	8005324 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d112      	bne.n	80052f8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d6:	881a      	ldrh	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e2:	1c9a      	adds	r2, r3, #2
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80052f6:	e015      	b.n	8005324 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052f8:	f7fd ff92 	bl	8003220 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d803      	bhi.n	8005310 <HAL_SPI_Transmit+0x168>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d102      	bne.n	8005316 <HAL_SPI_Transmit+0x16e>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005322:	e07b      	b.n	800541c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1ca      	bne.n	80052c4 <HAL_SPI_Transmit+0x11c>
 800532e:	e050      	b.n	80053d2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_SPI_Transmit+0x196>
 8005338:	8afb      	ldrh	r3, [r7, #22]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d144      	bne.n	80053c8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	7812      	ldrb	r2, [r2, #0]
 800534a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005364:	e030      	b.n	80053c8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b02      	cmp	r3, #2
 8005372:	d113      	bne.n	800539c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	330c      	adds	r3, #12
 800537e:	7812      	ldrb	r2, [r2, #0]
 8005380:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	86da      	strh	r2, [r3, #54]	@ 0x36
 800539a:	e015      	b.n	80053c8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800539c:	f7fd ff40 	bl	8003220 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d803      	bhi.n	80053b4 <HAL_SPI_Transmit+0x20c>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	d102      	bne.n	80053ba <HAL_SPI_Transmit+0x212>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80053c6:	e029      	b.n	800541c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1c9      	bne.n	8005366 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fbcc 	bl	8005b74 <SPI_EndRxTxTransaction>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e003      	b.n	800541c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005424:	7ffb      	ldrb	r3, [r7, #31]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b088      	sub	sp, #32
 8005432:	af02      	add	r7, sp, #8
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	603b      	str	r3, [r7, #0]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	d002      	beq.n	8005454 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800544e:	2302      	movs	r3, #2
 8005450:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005452:	e0fb      	b.n	800564c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800545c:	d112      	bne.n	8005484 <HAL_SPI_Receive+0x56>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10e      	bne.n	8005484 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2204      	movs	r2, #4
 800546a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f8ef 	bl	800565e <HAL_SPI_TransmitReceive>
 8005480:	4603      	mov	r3, r0
 8005482:	e0e8      	b.n	8005656 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_SPI_Receive+0x64>
 800548e:	2302      	movs	r3, #2
 8005490:	e0e1      	b.n	8005656 <HAL_SPI_Receive+0x228>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800549a:	f7fd fec1 	bl	8003220 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_SPI_Receive+0x7e>
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d102      	bne.n	80054b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054b0:	e0cc      	b.n	800564c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2204      	movs	r2, #4
 80054b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	88fa      	ldrh	r2, [r7, #6]
 80054ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054f8:	d10f      	bne.n	800551a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005508:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005518:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005524:	2b40      	cmp	r3, #64	@ 0x40
 8005526:	d007      	beq.n	8005538 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005536:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d16a      	bne.n	8005616 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005540:	e032      	b.n	80055a8 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d115      	bne.n	800557c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f103 020c 	add.w	r2, r3, #12
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555c:	7812      	ldrb	r2, [r2, #0]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800557a:	e015      	b.n	80055a8 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800557c:	f7fd fe50 	bl	8003220 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d803      	bhi.n	8005594 <HAL_SPI_Receive+0x166>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005592:	d102      	bne.n	800559a <HAL_SPI_Receive+0x16c>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80055a6:	e051      	b.n	800564c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1c7      	bne.n	8005542 <HAL_SPI_Receive+0x114>
 80055b2:	e035      	b.n	8005620 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d113      	bne.n	80055ea <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	b292      	uxth	r2, r2
 80055ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d4:	1c9a      	adds	r2, r3, #2
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055e8:	e015      	b.n	8005616 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ea:	f7fd fe19 	bl	8003220 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d803      	bhi.n	8005602 <HAL_SPI_Receive+0x1d4>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d102      	bne.n	8005608 <HAL_SPI_Receive+0x1da>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005614:	e01a      	b.n	800564c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1c9      	bne.n	80055b4 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 fa53 	bl	8005ad0 <SPI_EndRxTransaction>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	75fb      	strb	r3, [r7, #23]
 8005642:	e003      	b.n	800564c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005654:	7dfb      	ldrb	r3, [r7, #23]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b08c      	sub	sp, #48	@ 0x30
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800566c:	2301      	movs	r3, #1
 800566e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x26>
 8005680:	2302      	movs	r3, #2
 8005682:	e198      	b.n	80059b6 <HAL_SPI_TransmitReceive+0x358>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800568c:	f7fd fdc8 	bl	8003220 <HAL_GetTick>
 8005690:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056a2:	887b      	ldrh	r3, [r7, #2]
 80056a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d00f      	beq.n	80056ce <HAL_SPI_TransmitReceive+0x70>
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056b4:	d107      	bne.n	80056c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d103      	bne.n	80056c6 <HAL_SPI_TransmitReceive+0x68>
 80056be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d003      	beq.n	80056ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80056c6:	2302      	movs	r3, #2
 80056c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80056cc:	e16d      	b.n	80059aa <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_SPI_TransmitReceive+0x82>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <HAL_SPI_TransmitReceive+0x82>
 80056da:	887b      	ldrh	r3, [r7, #2]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d103      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80056e6:	e160      	b.n	80059aa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d003      	beq.n	80056fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2205      	movs	r2, #5
 80056f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	887a      	ldrh	r2, [r7, #2]
 800570c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	887a      	ldrh	r2, [r7, #2]
 8005712:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	887a      	ldrh	r2, [r7, #2]
 800571e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	887a      	ldrh	r2, [r7, #2]
 8005724:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573c:	2b40      	cmp	r3, #64	@ 0x40
 800573e:	d007      	beq.n	8005750 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800574e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005758:	d17c      	bne.n	8005854 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_SPI_TransmitReceive+0x10a>
 8005762:	8b7b      	ldrh	r3, [r7, #26]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d16a      	bne.n	800583e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576c:	881a      	ldrh	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005778:	1c9a      	adds	r2, r3, #2
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800578c:	e057      	b.n	800583e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b02      	cmp	r3, #2
 800579a:	d11b      	bne.n	80057d4 <HAL_SPI_TransmitReceive+0x176>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d016      	beq.n	80057d4 <HAL_SPI_TransmitReceive+0x176>
 80057a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d113      	bne.n	80057d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b0:	881a      	ldrh	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057bc:	1c9a      	adds	r2, r3, #2
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d119      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x1b8>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d014      	beq.n	8005816 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f6:	b292      	uxth	r2, r2
 80057f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fe:	1c9a      	adds	r2, r3, #2
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005812:	2301      	movs	r3, #1
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005816:	f7fd fd03 	bl	8003220 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005822:	429a      	cmp	r2, r3
 8005824:	d80b      	bhi.n	800583e <HAL_SPI_TransmitReceive+0x1e0>
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582c:	d007      	beq.n	800583e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800583c:	e0b5      	b.n	80059aa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1a2      	bne.n	800578e <HAL_SPI_TransmitReceive+0x130>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d19d      	bne.n	800578e <HAL_SPI_TransmitReceive+0x130>
 8005852:	e080      	b.n	8005956 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <HAL_SPI_TransmitReceive+0x204>
 800585c:	8b7b      	ldrh	r3, [r7, #26]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d16f      	bne.n	8005942 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	330c      	adds	r3, #12
 800586c:	7812      	ldrb	r2, [r2, #0]
 800586e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005888:	e05b      	b.n	8005942 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b02      	cmp	r3, #2
 8005896:	d11c      	bne.n	80058d2 <HAL_SPI_TransmitReceive+0x274>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d017      	beq.n	80058d2 <HAL_SPI_TransmitReceive+0x274>
 80058a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d114      	bne.n	80058d2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	7812      	ldrb	r2, [r2, #0]
 80058b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d119      	bne.n	8005914 <HAL_SPI_TransmitReceive+0x2b6>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d014      	beq.n	8005914 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005910:	2301      	movs	r3, #1
 8005912:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005914:	f7fd fc84 	bl	8003220 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005920:	429a      	cmp	r2, r3
 8005922:	d803      	bhi.n	800592c <HAL_SPI_TransmitReceive+0x2ce>
 8005924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d102      	bne.n	8005932 <HAL_SPI_TransmitReceive+0x2d4>
 800592c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592e:	2b00      	cmp	r3, #0
 8005930:	d107      	bne.n	8005942 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005940:	e033      	b.n	80059aa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d19e      	bne.n	800588a <HAL_SPI_TransmitReceive+0x22c>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d199      	bne.n	800588a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005958:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f90a 	bl	8005b74 <SPI_EndRxTxTransaction>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d006      	beq.n	8005974 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005972:	e01a      	b.n	80059aa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059a0:	e003      	b.n	80059aa <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80059b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3730      	adds	r7, #48	@ 0x30
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	4613      	mov	r3, r2
 80059ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059d0:	f7fd fc26 	bl	8003220 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	4413      	add	r3, r2
 80059de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059e0:	f7fd fc1e 	bl	8003220 <HAL_GetTick>
 80059e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059e6:	4b39      	ldr	r3, [pc, #228]	@ (8005acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	015b      	lsls	r3, r3, #5
 80059ec:	0d1b      	lsrs	r3, r3, #20
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059f6:	e054      	b.n	8005aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fe:	d050      	beq.n	8005aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a00:	f7fd fc0e 	bl	8003220 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d902      	bls.n	8005a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d13d      	bne.n	8005a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a2e:	d111      	bne.n	8005a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a38:	d004      	beq.n	8005a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a42:	d107      	bne.n	8005a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a5c:	d10f      	bne.n	8005a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e017      	b.n	8005ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	bf0c      	ite	eq
 8005ab2:	2301      	moveq	r3, #1
 8005ab4:	2300      	movne	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	461a      	mov	r2, r3
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d19b      	bne.n	80059f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3720      	adds	r7, #32
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000000 	.word	0x20000000

08005ad0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ae4:	d111      	bne.n	8005b0a <SPI_EndRxTransaction+0x3a>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aee:	d004      	beq.n	8005afa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af8:	d107      	bne.n	8005b0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b08:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b12:	d117      	bne.n	8005b44 <SPI_EndRxTransaction+0x74>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b1c:	d112      	bne.n	8005b44 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2101      	movs	r1, #1
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff ff49 	bl	80059c0 <SPI_WaitFlagStateUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01a      	beq.n	8005b6a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b38:	f043 0220 	orr.w	r2, r3, #32
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e013      	b.n	8005b6c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2180      	movs	r1, #128	@ 0x80
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7ff ff36 	bl	80059c0 <SPI_WaitFlagStateUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5e:	f043 0220 	orr.w	r2, r3, #32
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e000      	b.n	8005b6c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2200      	movs	r2, #0
 8005b88:	2180      	movs	r1, #128	@ 0x80
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f7ff ff18 	bl	80059c0 <SPI_WaitFlagStateUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d007      	beq.n	8005ba6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9a:	f043 0220 	orr.w	r2, r3, #32
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e000      	b.n	8005ba8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e041      	b.n	8005c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fd f914 	bl	8002e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	f000 fa20 	bl	8006034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d122      	bne.n	8005caa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d11b      	bne.n	8005caa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f06f 0202 	mvn.w	r2, #2
 8005c7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f9b4 	bl	8005ffe <HAL_TIM_IC_CaptureCallback>
 8005c96:	e005      	b.n	8005ca4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f9a7 	bl	8005fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f9b6 	bl	8006010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d122      	bne.n	8005cfe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d11b      	bne.n	8005cfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f06f 0204 	mvn.w	r2, #4
 8005cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f98a 	bl	8005ffe <HAL_TIM_IC_CaptureCallback>
 8005cea:	e005      	b.n	8005cf8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f97d 	bl	8005fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f98c 	bl	8006010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d122      	bne.n	8005d52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d11b      	bne.n	8005d52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f06f 0208 	mvn.w	r2, #8
 8005d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2204      	movs	r2, #4
 8005d28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f960 	bl	8005ffe <HAL_TIM_IC_CaptureCallback>
 8005d3e:	e005      	b.n	8005d4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f953 	bl	8005fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f962 	bl	8006010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d122      	bne.n	8005da6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	d11b      	bne.n	8005da6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f06f 0210 	mvn.w	r2, #16
 8005d76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2208      	movs	r2, #8
 8005d7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f936 	bl	8005ffe <HAL_TIM_IC_CaptureCallback>
 8005d92:	e005      	b.n	8005da0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f929 	bl	8005fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f938 	bl	8006010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d10e      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d107      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f06f 0201 	mvn.w	r2, #1
 8005dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fc ff01 	bl	8002bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ddc:	2b80      	cmp	r3, #128	@ 0x80
 8005dde:	d10e      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dea:	2b80      	cmp	r3, #128	@ 0x80
 8005dec:	d107      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fa7a 	bl	80062f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e08:	2b40      	cmp	r3, #64	@ 0x40
 8005e0a:	d10e      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e16:	2b40      	cmp	r3, #64	@ 0x40
 8005e18:	d107      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8fc 	bl	8006022 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d10e      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d107      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f06f 0220 	mvn.w	r2, #32
 8005e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fa45 	bl	80062e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_TIM_ConfigClockSource+0x1c>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e0b4      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x186>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ea0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb2:	d03e      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0xd4>
 8005eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb8:	f200 8087 	bhi.w	8005fca <HAL_TIM_ConfigClockSource+0x16c>
 8005ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec0:	f000 8086 	beq.w	8005fd0 <HAL_TIM_ConfigClockSource+0x172>
 8005ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec8:	d87f      	bhi.n	8005fca <HAL_TIM_ConfigClockSource+0x16c>
 8005eca:	2b70      	cmp	r3, #112	@ 0x70
 8005ecc:	d01a      	beq.n	8005f04 <HAL_TIM_ConfigClockSource+0xa6>
 8005ece:	2b70      	cmp	r3, #112	@ 0x70
 8005ed0:	d87b      	bhi.n	8005fca <HAL_TIM_ConfigClockSource+0x16c>
 8005ed2:	2b60      	cmp	r3, #96	@ 0x60
 8005ed4:	d050      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x11a>
 8005ed6:	2b60      	cmp	r3, #96	@ 0x60
 8005ed8:	d877      	bhi.n	8005fca <HAL_TIM_ConfigClockSource+0x16c>
 8005eda:	2b50      	cmp	r3, #80	@ 0x50
 8005edc:	d03c      	beq.n	8005f58 <HAL_TIM_ConfigClockSource+0xfa>
 8005ede:	2b50      	cmp	r3, #80	@ 0x50
 8005ee0:	d873      	bhi.n	8005fca <HAL_TIM_ConfigClockSource+0x16c>
 8005ee2:	2b40      	cmp	r3, #64	@ 0x40
 8005ee4:	d058      	beq.n	8005f98 <HAL_TIM_ConfigClockSource+0x13a>
 8005ee6:	2b40      	cmp	r3, #64	@ 0x40
 8005ee8:	d86f      	bhi.n	8005fca <HAL_TIM_ConfigClockSource+0x16c>
 8005eea:	2b30      	cmp	r3, #48	@ 0x30
 8005eec:	d064      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x15a>
 8005eee:	2b30      	cmp	r3, #48	@ 0x30
 8005ef0:	d86b      	bhi.n	8005fca <HAL_TIM_ConfigClockSource+0x16c>
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d060      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x15a>
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d867      	bhi.n	8005fca <HAL_TIM_ConfigClockSource+0x16c>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d05c      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x15a>
 8005efe:	2b10      	cmp	r3, #16
 8005f00:	d05a      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x15a>
 8005f02:	e062      	b.n	8005fca <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f14:	f000 f967 	bl	80061e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	609a      	str	r2, [r3, #8]
      break;
 8005f30:	e04f      	b.n	8005fd2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f42:	f000 f950 	bl	80061e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f54:	609a      	str	r2, [r3, #8]
      break;
 8005f56:	e03c      	b.n	8005fd2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f64:	461a      	mov	r2, r3
 8005f66:	f000 f8c7 	bl	80060f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2150      	movs	r1, #80	@ 0x50
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 f91e 	bl	80061b2 <TIM_ITRx_SetConfig>
      break;
 8005f76:	e02c      	b.n	8005fd2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f84:	461a      	mov	r2, r3
 8005f86:	f000 f8e5 	bl	8006154 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2160      	movs	r1, #96	@ 0x60
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 f90e 	bl	80061b2 <TIM_ITRx_SetConfig>
      break;
 8005f96:	e01c      	b.n	8005fd2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	f000 f8a7 	bl	80060f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2140      	movs	r1, #64	@ 0x40
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 f8fe 	bl	80061b2 <TIM_ITRx_SetConfig>
      break;
 8005fb6:	e00c      	b.n	8005fd2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f000 f8f5 	bl	80061b2 <TIM_ITRx_SetConfig>
      break;
 8005fc8:	e003      	b.n	8005fd2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8005fce:	e000      	b.n	8005fd2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr

08006022 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr

08006034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a29      	ldr	r2, [pc, #164]	@ (80060ec <TIM_Base_SetConfig+0xb8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00b      	beq.n	8006064 <TIM_Base_SetConfig+0x30>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006052:	d007      	beq.n	8006064 <TIM_Base_SetConfig+0x30>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a26      	ldr	r2, [pc, #152]	@ (80060f0 <TIM_Base_SetConfig+0xbc>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d003      	beq.n	8006064 <TIM_Base_SetConfig+0x30>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a25      	ldr	r2, [pc, #148]	@ (80060f4 <TIM_Base_SetConfig+0xc0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d108      	bne.n	8006076 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800606a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a1c      	ldr	r2, [pc, #112]	@ (80060ec <TIM_Base_SetConfig+0xb8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00b      	beq.n	8006096 <TIM_Base_SetConfig+0x62>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006084:	d007      	beq.n	8006096 <TIM_Base_SetConfig+0x62>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a19      	ldr	r2, [pc, #100]	@ (80060f0 <TIM_Base_SetConfig+0xbc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d003      	beq.n	8006096 <TIM_Base_SetConfig+0x62>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a18      	ldr	r2, [pc, #96]	@ (80060f4 <TIM_Base_SetConfig+0xc0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d108      	bne.n	80060a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800609c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a07      	ldr	r2, [pc, #28]	@ (80060ec <TIM_Base_SetConfig+0xb8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d103      	bne.n	80060dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	615a      	str	r2, [r3, #20]
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr
 80060ec:	40012c00 	.word	0x40012c00
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800

080060f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0201 	bic.w	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 030a 	bic.w	r3, r3, #10
 8006134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr

08006154 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f023 0210 	bic.w	r2, r3, #16
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800617e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	031b      	lsls	r3, r3, #12
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006190:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	621a      	str	r2, [r3, #32]
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr

080061b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f043 0307 	orr.w	r3, r3, #7
 80061d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	609a      	str	r2, [r3, #8]
}
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr

080061e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b087      	sub	sp, #28
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
 80061f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006200:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	021a      	lsls	r2, r3, #8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	431a      	orrs	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4313      	orrs	r3, r2
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	609a      	str	r2, [r3, #8]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr

08006224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006238:	2302      	movs	r3, #2
 800623a:	e046      	b.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a16      	ldr	r2, [pc, #88]	@ (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00e      	beq.n	800629e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006288:	d009      	beq.n	800629e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a12      	ldr	r2, [pc, #72]	@ (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d004      	beq.n	800629e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a10      	ldr	r2, [pc, #64]	@ (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d10c      	bne.n	80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40000800 	.word	0x40000800

080062e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr

080062f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e042      	b.n	800639c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fc fd90 	bl	8002e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2224      	movs	r2, #36	@ 0x24
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fdfb 	bl	8006f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800635c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695a      	ldr	r2, [r3, #20]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800636c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800637c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08a      	sub	sp, #40	@ 0x28
 80063a8:	af02      	add	r7, sp, #8
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	4613      	mov	r3, r2
 80063b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	d16d      	bne.n	80064a0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <HAL_UART_Transmit+0x2c>
 80063ca:	88fb      	ldrh	r3, [r7, #6]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e066      	b.n	80064a2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2221      	movs	r2, #33	@ 0x21
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063e2:	f7fc ff1d 	bl	8003220 <HAL_GetTick>
 80063e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	88fa      	ldrh	r2, [r7, #6]
 80063ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	88fa      	ldrh	r2, [r7, #6]
 80063f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fc:	d108      	bne.n	8006410 <HAL_UART_Transmit+0x6c>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d104      	bne.n	8006410 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	e003      	b.n	8006418 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006414:	2300      	movs	r3, #0
 8006416:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006418:	e02a      	b.n	8006470 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2200      	movs	r2, #0
 8006422:	2180      	movs	r1, #128	@ 0x80
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fb4a 	bl	8006abe <UART_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e036      	b.n	80064a2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10b      	bne.n	8006452 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006448:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	3302      	adds	r3, #2
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	e007      	b.n	8006462 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	3301      	adds	r3, #1
 8006460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1cf      	bne.n	800641a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2200      	movs	r2, #0
 8006482:	2140      	movs	r1, #64	@ 0x40
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fb1a 	bl	8006abe <UART_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e006      	b.n	80064a2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80064a0:	2302      	movs	r3, #2
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3720      	adds	r7, #32
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b08c      	sub	sp, #48	@ 0x30
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	4613      	mov	r3, r2
 80064b6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d14a      	bne.n	800655a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e043      	b.n	800655c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2201      	movs	r2, #1
 80064d8:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	461a      	mov	r2, r3
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fb57 	bl	8006b9a <UART_Start_Receive_IT>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80064f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d12c      	bne.n	8006554 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d125      	bne.n	800654e <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006502:	2300      	movs	r3, #0
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	330c      	adds	r3, #12
 800651e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	617b      	str	r3, [r7, #20]
   return(result);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f043 0310 	orr.w	r3, r3, #16
 800652e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	330c      	adds	r3, #12
 8006536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006538:	627a      	str	r2, [r7, #36]	@ 0x24
 800653a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653c:	6a39      	ldr	r1, [r7, #32]
 800653e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006540:	e841 2300 	strex	r3, r2, [r1]
 8006544:	61fb      	str	r3, [r7, #28]
   return(result);
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e5      	bne.n	8006518 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800654c:	e002      	b.n	8006554 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006554:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006558:	e000      	b.n	800655c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3730      	adds	r7, #48	@ 0x30
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b0ba      	sub	sp, #232	@ 0xe8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800658a:	2300      	movs	r3, #0
 800658c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006590:	2300      	movs	r3, #0
 8006592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80065a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10f      	bne.n	80065ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <HAL_UART_IRQHandler+0x66>
 80065b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fbff 	bl	8006dc6 <UART_Receive_IT>
      return;
 80065c8:	e25b      	b.n	8006a82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 80de 	beq.w	8006790 <HAL_UART_IRQHandler+0x22c>
 80065d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d106      	bne.n	80065ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80d1 	beq.w	8006790 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00b      	beq.n	8006612 <HAL_UART_IRQHandler+0xae>
 80065fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660a:	f043 0201 	orr.w	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00b      	beq.n	8006636 <HAL_UART_IRQHandler+0xd2>
 800661e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d005      	beq.n	8006636 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800662e:	f043 0202 	orr.w	r2, r3, #2
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00b      	beq.n	800665a <HAL_UART_IRQHandler+0xf6>
 8006642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006652:	f043 0204 	orr.w	r2, r3, #4
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800665a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d011      	beq.n	800668a <HAL_UART_IRQHandler+0x126>
 8006666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800666a:	f003 0320 	and.w	r3, r3, #32
 800666e:	2b00      	cmp	r3, #0
 8006670:	d105      	bne.n	800667e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006682:	f043 0208 	orr.w	r2, r3, #8
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 81f2 	beq.w	8006a78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <HAL_UART_IRQHandler+0x14e>
 80066a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fb8a 	bl	8006dc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bf14      	ite	ne
 80066c0:	2301      	movne	r3, #1
 80066c2:	2300      	moveq	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <HAL_UART_IRQHandler+0x17a>
 80066d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d04f      	beq.n	800677e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fa94 	bl	8006c0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d041      	beq.n	8006776 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3314      	adds	r3, #20
 80066f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006700:	e853 3f00 	ldrex	r3, [r3]
 8006704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006708:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800670c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3314      	adds	r3, #20
 800671a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800671e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006722:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800672a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1d9      	bne.n	80066f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d013      	beq.n	800676e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800674a:	4a7e      	ldr	r2, [pc, #504]	@ (8006944 <HAL_UART_IRQHandler+0x3e0>)
 800674c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006752:	4618      	mov	r0, r3
 8006754:	f7fd f906 	bl	8003964 <HAL_DMA_Abort_IT>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d016      	beq.n	800678c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676c:	e00e      	b.n	800678c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f99c 	bl	8006aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006774:	e00a      	b.n	800678c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f998 	bl	8006aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677c:	e006      	b.n	800678c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f994 	bl	8006aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800678a:	e175      	b.n	8006a78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678c:	bf00      	nop
    return;
 800678e:	e173      	b.n	8006a78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006794:	2b01      	cmp	r3, #1
 8006796:	f040 814f 	bne.w	8006a38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800679a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8148 	beq.w	8006a38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8141 	beq.w	8006a38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067b6:	2300      	movs	r3, #0
 80067b8:	60bb      	str	r3, [r7, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	60bb      	str	r3, [r7, #8]
 80067ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 80b6 	beq.w	8006948 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 8145 	beq.w	8006a7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067fa:	429a      	cmp	r2, r3
 80067fc:	f080 813e 	bcs.w	8006a7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006806:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	2b20      	cmp	r3, #32
 8006810:	f000 8088 	beq.w	8006924 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	330c      	adds	r3, #12
 800681a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800682a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800682e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006832:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	330c      	adds	r3, #12
 800683c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006840:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006844:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800684c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006858:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1d9      	bne.n	8006814 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3314      	adds	r3, #20
 8006866:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006872:	f023 0301 	bic.w	r3, r3, #1
 8006876:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3314      	adds	r3, #20
 8006880:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006884:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006888:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800688c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006896:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e1      	bne.n	8006860 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3314      	adds	r3, #20
 80068a2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3314      	adds	r3, #20
 80068bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80068c0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e3      	bne.n	800689c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	330c      	adds	r3, #12
 80068e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068f4:	f023 0310 	bic.w	r3, r3, #16
 80068f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006906:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006908:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800690c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e3      	bne.n	80068e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800691e:	4618      	mov	r0, r3
 8006920:	f7fc ffe5 	bl	80038ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006932:	b29b      	uxth	r3, r3
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	b29b      	uxth	r3, r3
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fc f930 	bl	8002ba0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006940:	e09c      	b.n	8006a7c <HAL_UART_IRQHandler+0x518>
 8006942:	bf00      	nop
 8006944:	08006cd1 	.word	0x08006cd1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006950:	b29b      	uxth	r3, r3
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800695c:	b29b      	uxth	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 808e 	beq.w	8006a80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8089 	beq.w	8006a80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	330c      	adds	r3, #12
 8006974:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800697e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006980:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006984:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	330c      	adds	r3, #12
 800698e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006992:	647a      	str	r2, [r7, #68]	@ 0x44
 8006994:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006998:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e3      	bne.n	800696e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3314      	adds	r3, #20
 80069ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	623b      	str	r3, [r7, #32]
   return(result);
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	f023 0301 	bic.w	r3, r3, #1
 80069bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3314      	adds	r3, #20
 80069c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80069ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80069cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e3      	bne.n	80069a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0310 	bic.w	r3, r3, #16
 8006a02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006a10:	61fa      	str	r2, [r7, #28]
 8006a12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	69b9      	ldr	r1, [r7, #24]
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e3      	bne.n	80069ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7fc f8b5 	bl	8002ba0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a36:	e023      	b.n	8006a80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d009      	beq.n	8006a58 <HAL_UART_IRQHandler+0x4f4>
 8006a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f951 	bl	8006cf8 <UART_Transmit_IT>
    return;
 8006a56:	e014      	b.n	8006a82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00e      	beq.n	8006a82 <HAL_UART_IRQHandler+0x51e>
 8006a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d008      	beq.n	8006a82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f990 	bl	8006d96 <UART_EndTransmit_IT>
    return;
 8006a76:	e004      	b.n	8006a82 <HAL_UART_IRQHandler+0x51e>
    return;
 8006a78:	bf00      	nop
 8006a7a:	e002      	b.n	8006a82 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a7c:	bf00      	nop
 8006a7e:	e000      	b.n	8006a82 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a80:	bf00      	nop
  }
}
 8006a82:	37e8      	adds	r7, #232	@ 0xe8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr

08006a9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr

08006aac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b090      	sub	sp, #64	@ 0x40
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	603b      	str	r3, [r7, #0]
 8006aca:	4613      	mov	r3, r2
 8006acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ace:	e050      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad6:	d04c      	beq.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d007      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0x30>
 8006ade:	f7fc fb9f 	bl	8003220 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d241      	bcs.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b0e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b10:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e5      	bne.n	8006aee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3314      	adds	r3, #20
 8006b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	613b      	str	r3, [r7, #16]
   return(result);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b42:	623a      	str	r2, [r7, #32]
 8006b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	69f9      	ldr	r1, [r7, #28]
 8006b48:	6a3a      	ldr	r2, [r7, #32]
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e5      	bne.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e00f      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	bf0c      	ite	eq
 8006b82:	2301      	moveq	r3, #1
 8006b84:	2300      	movne	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d09f      	beq.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3740      	adds	r7, #64	@ 0x40
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	88fa      	ldrh	r2, [r7, #6]
 8006bb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	88fa      	ldrh	r2, [r7, #6]
 8006bb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2222      	movs	r2, #34	@ 0x22
 8006bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d007      	beq.n	8006be0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bde:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695a      	ldr	r2, [r3, #20]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0220 	orr.w	r2, r2, #32
 8006bfe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b095      	sub	sp, #84	@ 0x54
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	330c      	adds	r3, #12
 8006c1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	330c      	adds	r3, #12
 8006c32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c34:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e5      	bne.n	8006c14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3314      	adds	r3, #20
 8006c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3314      	adds	r3, #20
 8006c66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e5      	bne.n	8006c48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d119      	bne.n	8006cb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	330c      	adds	r3, #12
 8006c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f023 0310 	bic.w	r3, r3, #16
 8006c9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ca4:	61ba      	str	r2, [r7, #24]
 8006ca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6979      	ldr	r1, [r7, #20]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e5      	bne.n	8006c84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006cc6:	bf00      	nop
 8006cc8:	3754      	adds	r7, #84	@ 0x54
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr

08006cd0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7ff fede 	bl	8006aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b21      	cmp	r3, #33	@ 0x21
 8006d0a:	d13e      	bne.n	8006d8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d14:	d114      	bne.n	8006d40 <UART_Transmit_IT+0x48>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d110      	bne.n	8006d40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	1c9a      	adds	r2, r3, #2
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	621a      	str	r2, [r3, #32]
 8006d3e:	e008      	b.n	8006d52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	1c59      	adds	r1, r3, #1
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6211      	str	r1, [r2, #32]
 8006d4a:	781a      	ldrb	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10f      	bne.n	8006d86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	e000      	b.n	8006d8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d8a:	2302      	movs	r3, #2
  }
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr

08006d96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b082      	sub	sp, #8
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff fe66 	bl	8006a88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b08c      	sub	sp, #48	@ 0x30
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b22      	cmp	r3, #34	@ 0x22
 8006dd8:	f040 80ae 	bne.w	8006f38 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de4:	d117      	bne.n	8006e16 <UART_Receive_IT+0x50>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d113      	bne.n	8006e16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0e:	1c9a      	adds	r2, r3, #2
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e14:	e026      	b.n	8006e64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e28:	d007      	beq.n	8006e3a <UART_Receive_IT+0x74>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <UART_Receive_IT+0x82>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	e008      	b.n	8006e5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	4619      	mov	r1, r3
 8006e72:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d15d      	bne.n	8006f34 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0220 	bic.w	r2, r2, #32
 8006e86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695a      	ldr	r2, [r3, #20]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0201 	bic.w	r2, r2, #1
 8006ea6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d135      	bne.n	8006f2a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f023 0310 	bic.w	r3, r3, #16
 8006eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee4:	623a      	str	r2, [r7, #32]
 8006ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	69f9      	ldr	r1, [r7, #28]
 8006eea:	6a3a      	ldr	r2, [r7, #32]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0310 	and.w	r3, r3, #16
 8006f02:	2b10      	cmp	r3, #16
 8006f04:	d10a      	bne.n	8006f1c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fb fe3c 	bl	8002ba0 <HAL_UARTEx_RxEventCallback>
 8006f28:	e002      	b.n	8006f30 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff fdb5 	bl	8006a9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	e002      	b.n	8006f3a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	e000      	b.n	8006f3a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f38:	2302      	movs	r3, #2
  }
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3730      	adds	r7, #48	@ 0x30
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689a      	ldr	r2, [r3, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006f7e:	f023 030c 	bic.w	r3, r3, #12
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8007058 <UART_SetConfig+0x114>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d103      	bne.n	8006fb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006fac:	f7fd ff90 	bl	8004ed0 <HAL_RCC_GetPCLK2Freq>
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	e002      	b.n	8006fba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006fb4:	f7fd ff78 	bl	8004ea8 <HAL_RCC_GetPCLK1Freq>
 8006fb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009a      	lsls	r2, r3, #2
 8006fc4:	441a      	add	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd0:	4a22      	ldr	r2, [pc, #136]	@ (800705c <UART_SetConfig+0x118>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	0119      	lsls	r1, r3, #4
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009a      	lsls	r2, r3, #2
 8006fe4:	441a      	add	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800705c <UART_SetConfig+0x118>)
 8006ff2:	fba3 0302 	umull	r0, r3, r3, r2
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	2064      	movs	r0, #100	@ 0x64
 8006ffa:	fb00 f303 	mul.w	r3, r0, r3
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	011b      	lsls	r3, r3, #4
 8007002:	3332      	adds	r3, #50	@ 0x32
 8007004:	4a15      	ldr	r2, [pc, #84]	@ (800705c <UART_SetConfig+0x118>)
 8007006:	fba2 2303 	umull	r2, r3, r2, r3
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007010:	4419      	add	r1, r3
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	009a      	lsls	r2, r3, #2
 800701c:	441a      	add	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	fbb2 f2f3 	udiv	r2, r2, r3
 8007028:	4b0c      	ldr	r3, [pc, #48]	@ (800705c <UART_SetConfig+0x118>)
 800702a:	fba3 0302 	umull	r0, r3, r3, r2
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	2064      	movs	r0, #100	@ 0x64
 8007032:	fb00 f303 	mul.w	r3, r0, r3
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	3332      	adds	r3, #50	@ 0x32
 800703c:	4a07      	ldr	r2, [pc, #28]	@ (800705c <UART_SetConfig+0x118>)
 800703e:	fba2 2303 	umull	r2, r3, r2, r3
 8007042:	095b      	lsrs	r3, r3, #5
 8007044:	f003 020f 	and.w	r2, r3, #15
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	440a      	add	r2, r1
 800704e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40013800 	.word	0x40013800
 800705c:	51eb851f 	.word	0x51eb851f

08007060 <AWG_Load_Waveform>:
#include "math.h"

#define MaxDepth 2048 // max AWG samples

void AWG_Load_Waveform(AWG_struct* AWG, HFDAC_struct* HFDAC)
{
 8007060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007064:	b088      	sub	sp, #32
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
	LOLA_enable_features(AWG_EN, 0); // disable AWG
 800706c:	2100      	movs	r1, #0
 800706e:	2002      	movs	r0, #2
 8007070:	f000 fd80 	bl	8007b74 <LOLA_enable_features>

	uint8_t byte[4];
	int16_t data;

	uint16_t depth = trimInt((int)round(DACmaxFreq/AWG->Freq), 1, (MaxDepth-1));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800707a:	a1ad      	add	r1, pc, #692	@ (adr r1, 8007330 <AWG_Load_Waveform+0x2d0>)
 800707c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007080:	f7f9 fb6c 	bl	800075c <__aeabi_ddiv>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4610      	mov	r0, r2
 800708a:	4619      	mov	r1, r3
 800708c:	f007 f8fc 	bl	800e288 <round>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4610      	mov	r0, r2
 8007096:	4619      	mov	r1, r3
 8007098:	f7f9 fce6 	bl	8000a68 <__aeabi_d2iz>
 800709c:	4603      	mov	r3, r0
 800709e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80070a2:	2101      	movs	r1, #1
 80070a4:	4618      	mov	r0, r3
 80070a6:	f002 fa48 	bl	800953a <trimInt>
 80070aa:	4603      	mov	r3, r0
 80070ac:	837b      	strh	r3, [r7, #26]


	uint16_t DepthPos = trimInt((int)round(depth*AWG->DutyCycle/100), 1, (MaxDepth-1));
 80070ae:	8b7b      	ldrh	r3, [r7, #26]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7f9 fe2b 	bl	8000d0c <__aeabi_i2f>
 80070b6:	4602      	mov	r2, r0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	4619      	mov	r1, r3
 80070be:	4610      	mov	r0, r2
 80070c0:	f7f9 fe78 	bl	8000db4 <__aeabi_fmul>
 80070c4:	4603      	mov	r3, r0
 80070c6:	499e      	ldr	r1, [pc, #632]	@ (8007340 <AWG_Load_Waveform+0x2e0>)
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7f9 ff27 	bl	8000f1c <__aeabi_fdiv>
 80070ce:	4603      	mov	r3, r0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7f9 f9c1 	bl	8000458 <__aeabi_f2d>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4610      	mov	r0, r2
 80070dc:	4619      	mov	r1, r3
 80070de:	f007 f8d3 	bl	800e288 <round>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4610      	mov	r0, r2
 80070e8:	4619      	mov	r1, r3
 80070ea:	f7f9 fcbd 	bl	8000a68 <__aeabi_d2iz>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80070f4:	2101      	movs	r1, #1
 80070f6:	4618      	mov	r0, r3
 80070f8:	f002 fa1f 	bl	800953a <trimInt>
 80070fc:	4603      	mov	r3, r0
 80070fe:	833b      	strh	r3, [r7, #24]
	uint16_t DepthNeg = trimInt((int)(depth-DepthPos), 1, (MaxDepth-1));
 8007100:	8b7a      	ldrh	r2, [r7, #26]
 8007102:	8b3b      	ldrh	r3, [r7, #24]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800710a:	2101      	movs	r1, #1
 800710c:	4618      	mov	r0, r3
 800710e:	f002 fa14 	bl	800953a <trimInt>
 8007112:	4603      	mov	r3, r0
 8007114:	82fb      	strh	r3, [r7, #22]

	// setting sample count
	byte[0] = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((depth>>8)&0x00ff);
 800711a:	8b7b      	ldrh	r3, [r7, #26]
 800711c:	0a1b      	lsrs	r3, r3, #8
 800711e:	b29b      	uxth	r3, r3
 8007120:	b2db      	uxtb	r3, r3
 8007122:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(depth&0x00ff);
 8007124:	8b7b      	ldrh	r3, [r7, #26]
 8007126:	b2db      	uxtb	r3, r3
 8007128:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)AWG_MAXADRESS;
 800712a:	2306      	movs	r3, #6
 800712c:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 800712e:	f107 0108 	add.w	r1, r7, #8
 8007132:	2364      	movs	r3, #100	@ 0x64
 8007134:	2204      	movs	r2, #4
 8007136:	4883      	ldr	r0, [pc, #524]	@ (8007344 <AWG_Load_Waveform+0x2e4>)
 8007138:	f7fe f836 	bl	80051a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 800713c:	2200      	movs	r2, #0
 800713e:	2110      	movs	r1, #16
 8007140:	4881      	ldr	r0, [pc, #516]	@ (8007348 <AWG_Load_Waveform+0x2e8>)
 8007142:	f7fc fe22 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8007146:	2201      	movs	r2, #1
 8007148:	2110      	movs	r1, #16
 800714a:	487f      	ldr	r0, [pc, #508]	@ (8007348 <AWG_Load_Waveform+0x2e8>)
 800714c:	f7fc fe1d 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007150:	2200      	movs	r2, #0
 8007152:	2110      	movs	r1, #16
 8007154:	487c      	ldr	r0, [pc, #496]	@ (8007348 <AWG_Load_Waveform+0x2e8>)
 8007156:	f7fc fe18 	bl	8003d8a <HAL_GPIO_WritePin>

	//Setting up clock
	uint32_t D = (uint32_t)round(MCLKfreq/(depth*AWG->Freq));
 800715a:	8b7b      	ldrh	r3, [r7, #26]
 800715c:	4618      	mov	r0, r3
 800715e:	f7f9 f969 	bl	8000434 <__aeabi_i2d>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007168:	f7f9 f9ce 	bl	8000508 <__aeabi_dmul>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	a171      	add	r1, pc, #452	@ (adr r1, 8007338 <AWG_Load_Waveform+0x2d8>)
 8007172:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007176:	f7f9 faf1 	bl	800075c <__aeabi_ddiv>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4610      	mov	r0, r2
 8007180:	4619      	mov	r1, r3
 8007182:	f007 f881 	bl	800e288 <round>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4610      	mov	r0, r2
 800718c:	4619      	mov	r1, r3
 800718e:	f7f9 fc93 	bl	8000ab8 <__aeabi_d2uiz>
 8007192:	4603      	mov	r3, r0
 8007194:	613b      	str	r3, [r7, #16]

	data = D;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	83fb      	strh	r3, [r7, #30]

	byte[0] = (uint8_t)((data>>16)&0x00ff);
 800719a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800719e:	141b      	asrs	r3, r3, #16
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((data>>8)&0x00ff);
 80071a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80071a8:	121b      	asrs	r3, r3, #8
 80071aa:	b21b      	sxth	r3, r3
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(data&0x00ff);
 80071b0:	8bfb      	ldrh	r3, [r7, #30]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)AWG_D;
 80071b6:	2302      	movs	r3, #2
 80071b8:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80071ba:	f107 0108 	add.w	r1, r7, #8
 80071be:	2364      	movs	r3, #100	@ 0x64
 80071c0:	2204      	movs	r2, #4
 80071c2:	4860      	ldr	r0, [pc, #384]	@ (8007344 <AWG_Load_Waveform+0x2e4>)
 80071c4:	f7fd fff0 	bl	80051a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80071c8:	2201      	movs	r2, #1
 80071ca:	2110      	movs	r1, #16
 80071cc:	485e      	ldr	r0, [pc, #376]	@ (8007348 <AWG_Load_Waveform+0x2e8>)
 80071ce:	f7fc fddc 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80071d2:	2200      	movs	r2, #0
 80071d4:	2110      	movs	r1, #16
 80071d6:	485c      	ldr	r0, [pc, #368]	@ (8007348 <AWG_Load_Waveform+0x2e8>)
 80071d8:	f7fc fdd7 	bl	8003d8a <HAL_GPIO_WritePin>

	// loading waveform

	float relativeDACcode = AWG->Uamp * HFDAC->relativeDACcodeCoef;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	4619      	mov	r1, r3
 80071e6:	4610      	mov	r0, r2
 80071e8:	f7f9 fde4 	bl	8000db4 <__aeabi_fmul>
 80071ec:	4603      	mov	r3, r0
 80071ee:	60fb      	str	r3, [r7, #12]

	for(int16_t addr = 0; addr < depth; addr++)
 80071f0:	2300      	movs	r3, #0
 80071f2:	83bb      	strh	r3, [r7, #28]
 80071f4:	e172      	b.n	80074dc <AWG_Load_Waveform+0x47c>
	{

		switch(AWG->waveform)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	f200 8139 	bhi.w	8007472 <AWG_Load_Waveform+0x412>
 8007200:	a201      	add	r2, pc, #4	@ (adr r2, 8007208 <AWG_Load_Waveform+0x1a8>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	08007219 	.word	0x08007219
 800720c:	080072af 	.word	0x080072af
 8007210:	080073db 	.word	0x080073db
 8007214:	0800746d 	.word	0x0800746d
		{
			case Square: data = (int16_t)round((addr>=(depth*AWG->DutyCycle/100))*relativeDACcode-(relativeDACcode/2.0)); break;
 8007218:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800721c:	4618      	mov	r0, r3
 800721e:	f7f9 fd75 	bl	8000d0c <__aeabi_i2f>
 8007222:	4604      	mov	r4, r0
 8007224:	8b7b      	ldrh	r3, [r7, #26]
 8007226:	4618      	mov	r0, r3
 8007228:	f7f9 fd70 	bl	8000d0c <__aeabi_i2f>
 800722c:	4602      	mov	r2, r0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	4619      	mov	r1, r3
 8007234:	4610      	mov	r0, r2
 8007236:	f7f9 fdbd 	bl	8000db4 <__aeabi_fmul>
 800723a:	4603      	mov	r3, r0
 800723c:	4940      	ldr	r1, [pc, #256]	@ (8007340 <AWG_Load_Waveform+0x2e0>)
 800723e:	4618      	mov	r0, r3
 8007240:	f7f9 fe6c 	bl	8000f1c <__aeabi_fdiv>
 8007244:	4603      	mov	r3, r0
 8007246:	4619      	mov	r1, r3
 8007248:	4620      	mov	r0, r4
 800724a:	f7f9 ff65 	bl	8001118 <__aeabi_fcmpge>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <AWG_Load_Waveform+0x1fa>
 8007254:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007258:	e001      	b.n	800725e <AWG_Load_Waveform+0x1fe>
 800725a:	f04f 0300 	mov.w	r3, #0
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	4618      	mov	r0, r3
 8007262:	f7f9 fda7 	bl	8000db4 <__aeabi_fmul>
 8007266:	4603      	mov	r3, r0
 8007268:	4618      	mov	r0, r3
 800726a:	f7f9 f8f5 	bl	8000458 <__aeabi_f2d>
 800726e:	4604      	mov	r4, r0
 8007270:	460d      	mov	r5, r1
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7f9 f8f0 	bl	8000458 <__aeabi_f2d>
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007280:	f7f9 fa6c 	bl	800075c <__aeabi_ddiv>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4620      	mov	r0, r4
 800728a:	4629      	mov	r1, r5
 800728c:	f7f8 ff84 	bl	8000198 <__aeabi_dsub>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4610      	mov	r0, r2
 8007296:	4619      	mov	r1, r3
 8007298:	f006 fff6 	bl	800e288 <round>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4610      	mov	r0, r2
 80072a2:	4619      	mov	r1, r3
 80072a4:	f7f9 fbe0 	bl	8000a68 <__aeabi_d2iz>
 80072a8:	4603      	mov	r3, r0
 80072aa:	83fb      	strh	r3, [r7, #30]
 80072ac:	e0e1      	b.n	8007472 <AWG_Load_Waveform+0x412>

			case Triangle:	if(addr <= DepthPos) data = (int16_t)round(relativeDACcode*addr/(DepthPos*1.0)-(relativeDACcode/2.0)); // rising edge
 80072ae:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80072b2:	8b3b      	ldrh	r3, [r7, #24]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	dc49      	bgt.n	800734c <AWG_Load_Waveform+0x2ec>
 80072b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80072bc:	4618      	mov	r0, r3
 80072be:	f7f9 fd25 	bl	8000d0c <__aeabi_i2f>
 80072c2:	4603      	mov	r3, r0
 80072c4:	68f9      	ldr	r1, [r7, #12]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7f9 fd74 	bl	8000db4 <__aeabi_fmul>
 80072cc:	4603      	mov	r3, r0
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7f9 f8c2 	bl	8000458 <__aeabi_f2d>
 80072d4:	4604      	mov	r4, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	8b3b      	ldrh	r3, [r7, #24]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7f9 f8aa 	bl	8000434 <__aeabi_i2d>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4620      	mov	r0, r4
 80072e6:	4629      	mov	r1, r5
 80072e8:	f7f9 fa38 	bl	800075c <__aeabi_ddiv>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4614      	mov	r4, r2
 80072f2:	461d      	mov	r5, r3
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7f9 f8af 	bl	8000458 <__aeabi_f2d>
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007302:	f7f9 fa2b 	bl	800075c <__aeabi_ddiv>
 8007306:	4602      	mov	r2, r0
 8007308:	460b      	mov	r3, r1
 800730a:	4620      	mov	r0, r4
 800730c:	4629      	mov	r1, r5
 800730e:	f7f8 ff43 	bl	8000198 <__aeabi_dsub>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4610      	mov	r0, r2
 8007318:	4619      	mov	r1, r3
 800731a:	f006 ffb5 	bl	800e288 <round>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4610      	mov	r0, r2
 8007324:	4619      	mov	r1, r3
 8007326:	f7f9 fb9f 	bl	8000a68 <__aeabi_d2iz>
 800732a:	4603      	mov	r3, r0
 800732c:	83fb      	strh	r3, [r7, #30]
							else data = (int16_t)round(relativeDACcode*(1-(addr-DepthPos)/(DepthNeg*1.0))-(relativeDACcode/2.0)); break; // falling edge
 800732e:	e0a0      	b.n	8007472 <AWG_Load_Waveform+0x412>
 8007330:	00000000 	.word	0x00000000
 8007334:	417312d0 	.word	0x417312d0
 8007338:	00000000 	.word	0x00000000
 800733c:	41b0b076 	.word	0x41b0b076
 8007340:	42c80000 	.word	0x42c80000
 8007344:	20000290 	.word	0x20000290
 8007348:	40010800 	.word	0x40010800
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7f9 f883 	bl	8000458 <__aeabi_f2d>
 8007352:	4604      	mov	r4, r0
 8007354:	460d      	mov	r5, r1
 8007356:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800735a:	8b3b      	ldrh	r3, [r7, #24]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	4618      	mov	r0, r3
 8007360:	f7f9 f868 	bl	8000434 <__aeabi_i2d>
 8007364:	4680      	mov	r8, r0
 8007366:	4689      	mov	r9, r1
 8007368:	8afb      	ldrh	r3, [r7, #22]
 800736a:	4618      	mov	r0, r3
 800736c:	f7f9 f862 	bl	8000434 <__aeabi_i2d>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4640      	mov	r0, r8
 8007376:	4649      	mov	r1, r9
 8007378:	f7f9 f9f0 	bl	800075c <__aeabi_ddiv>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	f04f 0000 	mov.w	r0, #0
 8007384:	4960      	ldr	r1, [pc, #384]	@ (8007508 <AWG_Load_Waveform+0x4a8>)
 8007386:	f7f8 ff07 	bl	8000198 <__aeabi_dsub>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4620      	mov	r0, r4
 8007390:	4629      	mov	r1, r5
 8007392:	f7f9 f8b9 	bl	8000508 <__aeabi_dmul>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4614      	mov	r4, r2
 800739c:	461d      	mov	r5, r3
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7f9 f85a 	bl	8000458 <__aeabi_f2d>
 80073a4:	f04f 0200 	mov.w	r2, #0
 80073a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80073ac:	f7f9 f9d6 	bl	800075c <__aeabi_ddiv>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4620      	mov	r0, r4
 80073b6:	4629      	mov	r1, r5
 80073b8:	f7f8 feee 	bl	8000198 <__aeabi_dsub>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4610      	mov	r0, r2
 80073c2:	4619      	mov	r1, r3
 80073c4:	f006 ff60 	bl	800e288 <round>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4610      	mov	r0, r2
 80073ce:	4619      	mov	r1, r3
 80073d0:	f7f9 fb4a 	bl	8000a68 <__aeabi_d2iz>
 80073d4:	4603      	mov	r3, r0
 80073d6:	83fb      	strh	r3, [r7, #30]
 80073d8:	e04b      	b.n	8007472 <AWG_Load_Waveform+0x412>

			case Sine: data = (int16_t)round(relativeDACcode*(AWG->Uavg+sinf((addr*3.14159*2)/(1.0*depth)))); break;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685c      	ldr	r4, [r3, #4]
 80073de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7f9 f826 	bl	8000434 <__aeabi_i2d>
 80073e8:	a345      	add	r3, pc, #276	@ (adr r3, 8007500 <AWG_Load_Waveform+0x4a0>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	f7f9 f88b 	bl	8000508 <__aeabi_dmul>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4610      	mov	r0, r2
 80073f8:	4619      	mov	r1, r3
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	f7f8 fecd 	bl	800019c <__adddf3>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4690      	mov	r8, r2
 8007408:	4699      	mov	r9, r3
 800740a:	8b7b      	ldrh	r3, [r7, #26]
 800740c:	4618      	mov	r0, r3
 800740e:	f7f9 f811 	bl	8000434 <__aeabi_i2d>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	4640      	mov	r0, r8
 8007418:	4649      	mov	r1, r9
 800741a:	f7f9 f99f 	bl	800075c <__aeabi_ddiv>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	4610      	mov	r0, r2
 8007424:	4619      	mov	r1, r3
 8007426:	f7f9 fb67 	bl	8000af8 <__aeabi_d2f>
 800742a:	4603      	mov	r3, r0
 800742c:	4618      	mov	r0, r3
 800742e:	f006 fef1 	bl	800e214 <sinf>
 8007432:	4603      	mov	r3, r0
 8007434:	4619      	mov	r1, r3
 8007436:	4620      	mov	r0, r4
 8007438:	f7f9 fbb4 	bl	8000ba4 <__addsf3>
 800743c:	4603      	mov	r3, r0
 800743e:	68f9      	ldr	r1, [r7, #12]
 8007440:	4618      	mov	r0, r3
 8007442:	f7f9 fcb7 	bl	8000db4 <__aeabi_fmul>
 8007446:	4603      	mov	r3, r0
 8007448:	4618      	mov	r0, r3
 800744a:	f7f9 f805 	bl	8000458 <__aeabi_f2d>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4610      	mov	r0, r2
 8007454:	4619      	mov	r1, r3
 8007456:	f006 ff17 	bl	800e288 <round>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4610      	mov	r0, r2
 8007460:	4619      	mov	r1, r3
 8007462:	f7f9 fb01 	bl	8000a68 <__aeabi_d2iz>
 8007466:	4603      	mov	r3, r0
 8007468:	83fb      	strh	r3, [r7, #30]
 800746a:	e002      	b.n	8007472 <AWG_Load_Waveform+0x412>

			case Func: data = 0; break;
 800746c:	2300      	movs	r3, #0
 800746e:	83fb      	strh	r3, [r7, #30]
 8007470:	bf00      	nop
		}

		byte[0] = (int8_t)((addr>>4)&0x00ff);
 8007472:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007476:	111b      	asrs	r3, r3, #4
 8007478:	b21b      	sxth	r3, r3
 800747a:	b2db      	uxtb	r3, r3
 800747c:	723b      	strb	r3, [r7, #8]
		byte[1] = (int8_t)(((data>>8)&0x000f)|((addr<<4)&0x00f0));
 800747e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007482:	121b      	asrs	r3, r3, #8
 8007484:	b21b      	sxth	r3, r3
 8007486:	b25b      	sxtb	r3, r3
 8007488:	f003 030f 	and.w	r3, r3, #15
 800748c:	b25a      	sxtb	r2, r3
 800748e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	b25b      	sxtb	r3, r3
 8007496:	f023 030f 	bic.w	r3, r3, #15
 800749a:	b25b      	sxtb	r3, r3
 800749c:	4313      	orrs	r3, r2
 800749e:	b25b      	sxtb	r3, r3
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	727b      	strb	r3, [r7, #9]
		byte[2] = (int8_t)(data&0x00ff);
 80074a4:	8bfb      	ldrh	r3, [r7, #30]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	72bb      	strb	r3, [r7, #10]
		byte[3] = (int8_t)AWG_DATA;
 80074aa:	2305      	movs	r3, #5
 80074ac:	72fb      	strb	r3, [r7, #11]

		HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80074ae:	f107 0108 	add.w	r1, r7, #8
 80074b2:	2364      	movs	r3, #100	@ 0x64
 80074b4:	2204      	movs	r2, #4
 80074b6:	4815      	ldr	r0, [pc, #84]	@ (800750c <AWG_Load_Waveform+0x4ac>)
 80074b8:	f7fd fe76 	bl	80051a8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80074bc:	2201      	movs	r2, #1
 80074be:	2110      	movs	r1, #16
 80074c0:	4813      	ldr	r0, [pc, #76]	@ (8007510 <AWG_Load_Waveform+0x4b0>)
 80074c2:	f7fc fc62 	bl	8003d8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80074c6:	2200      	movs	r2, #0
 80074c8:	2110      	movs	r1, #16
 80074ca:	4811      	ldr	r0, [pc, #68]	@ (8007510 <AWG_Load_Waveform+0x4b0>)
 80074cc:	f7fc fc5d 	bl	8003d8a <HAL_GPIO_WritePin>
	for(int16_t addr = 0; addr < depth; addr++)
 80074d0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3301      	adds	r3, #1
 80074d8:	b29b      	uxth	r3, r3
 80074da:	83bb      	strh	r3, [r7, #28]
 80074dc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80074e0:	8b7b      	ldrh	r3, [r7, #26]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	f6ff ae87 	blt.w	80071f6 <AWG_Load_Waveform+0x196>
	}
		LOLA_enable_features(AWG_EN, 1); // enable AWG
 80074e8:	2101      	movs	r1, #1
 80074ea:	2002      	movs	r0, #2
 80074ec:	f000 fb42 	bl	8007b74 <LOLA_enable_features>
}
 80074f0:	bf00      	nop
 80074f2:	3720      	adds	r7, #32
 80074f4:	46bd      	mov	sp, r7
 80074f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80074fa:	bf00      	nop
 80074fc:	f3af 8000 	nop.w
 8007500:	f01b866e 	.word	0xf01b866e
 8007504:	400921f9 	.word	0x400921f9
 8007508:	3ff00000 	.word	0x3ff00000
 800750c:	20000290 	.word	0x20000290
 8007510:	40010800 	.word	0x40010800

08007514 <DVM_GET_DATA_RAW>:
#include "board.h"
#include "trim.h"


int16_t DVM_GET_DATA_RAW()
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
	int16_t RawValue = 0; // voltage or current
 800751a:	2300      	movs	r3, #0
 800751c:	80fb      	strh	r3, [r7, #6]
	uint8_t byte[4];

	byte[0] = (int8_t)0;
 800751e:	2300      	movs	r3, #0
 8007520:	703b      	strb	r3, [r7, #0]
	byte[1] = (int8_t)0;
 8007522:	2300      	movs	r3, #0
 8007524:	707b      	strb	r3, [r7, #1]
	byte[2] = (int8_t)0;
 8007526:	2300      	movs	r3, #0
 8007528:	70bb      	strb	r3, [r7, #2]
	byte[3] = (int8_t)DVM_DATA;
 800752a:	2314      	movs	r3, #20
 800752c:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 800752e:	4639      	mov	r1, r7
 8007530:	2364      	movs	r3, #100	@ 0x64
 8007532:	2204      	movs	r2, #4
 8007534:	4817      	ldr	r0, [pc, #92]	@ (8007594 <DVM_GET_DATA_RAW+0x80>)
 8007536:	f7fd fe37 	bl	80051a8 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 800753a:	2200      	movs	r2, #0
 800753c:	2110      	movs	r1, #16
 800753e:	4816      	ldr	r0, [pc, #88]	@ (8007598 <DVM_GET_DATA_RAW+0x84>)
 8007540:	f7fc fc23 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8007544:	2201      	movs	r2, #1
 8007546:	2110      	movs	r1, #16
 8007548:	4813      	ldr	r0, [pc, #76]	@ (8007598 <DVM_GET_DATA_RAW+0x84>)
 800754a:	f7fc fc1e 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 800754e:	2200      	movs	r2, #0
 8007550:	2110      	movs	r1, #16
 8007552:	4811      	ldr	r0, [pc, #68]	@ (8007598 <DVM_GET_DATA_RAW+0x84>)
 8007554:	f7fc fc19 	bl	8003d8a <HAL_GPIO_WritePin>

	if (HAL_SPI_Receive(&hspi1, byte, 4, HAL_MAX_DELAY) == HAL_OK) RawValue = to_signed_12bit((int16_t)((byte[2] << 8) | byte[3]));
 8007558:	4639      	mov	r1, r7
 800755a:	f04f 33ff 	mov.w	r3, #4294967295
 800755e:	2204      	movs	r2, #4
 8007560:	480c      	ldr	r0, [pc, #48]	@ (8007594 <DVM_GET_DATA_RAW+0x80>)
 8007562:	f7fd ff64 	bl	800542e <HAL_SPI_Receive>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10c      	bne.n	8007586 <DVM_GET_DATA_RAW+0x72>
 800756c:	78bb      	ldrb	r3, [r7, #2]
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	b21a      	sxth	r2, r3
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	b21b      	sxth	r3, r3
 8007576:	4313      	orrs	r3, r2
 8007578:	b21b      	sxth	r3, r3
 800757a:	b29b      	uxth	r3, r3
 800757c:	4618      	mov	r0, r3
 800757e:	f001 ffc1 	bl	8009504 <to_signed_12bit>
 8007582:	4603      	mov	r3, r0
 8007584:	80fb      	strh	r3, [r7, #6]

	return RawValue;
 8007586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000290 	.word	0x20000290
 8007598:	40010800 	.word	0x40010800

0800759c <DVM_GET_FILTERED_DATA_RAW>:

int16_t DVM_GET_FILTERED_DATA_RAW(uint16_t NoSamples)
{
 800759c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075a0:	b086      	sub	sp, #24
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	4603      	mov	r3, r0
 80075a6:	80fb      	strh	r3, [r7, #6]
	int64_t out = 0;
 80075a8:	f04f 0200 	mov.w	r2, #0
 80075ac:	f04f 0300 	mov.w	r3, #0
 80075b0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	for(int i = 0; i < NoSamples; i++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	e011      	b.n	80075de <DVM_GET_FILTERED_DATA_RAW+0x42>
	{
		out += DVM_GET_DATA_RAW();
 80075ba:	f7ff ffab 	bl	8007514 <DVM_GET_DATA_RAW>
 80075be:	4603      	mov	r3, r0
 80075c0:	b21b      	sxth	r3, r3
 80075c2:	17da      	asrs	r2, r3, #31
 80075c4:	461c      	mov	r4, r3
 80075c6:	4615      	mov	r5, r2
 80075c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80075cc:	eb12 0804 	adds.w	r8, r2, r4
 80075d0:	eb43 0905 	adc.w	r9, r3, r5
 80075d4:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for(int i = 0; i < NoSamples; i++)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3301      	adds	r3, #1
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	dbe9      	blt.n	80075ba <DVM_GET_FILTERED_DATA_RAW+0x1e>
	}
	out /= NoSamples;
 80075e6:	88fb      	ldrh	r3, [r7, #6]
 80075e8:	2200      	movs	r2, #0
 80075ea:	469a      	mov	sl, r3
 80075ec:	4693      	mov	fp, r2
 80075ee:	4652      	mov	r2, sl
 80075f0:	465b      	mov	r3, fp
 80075f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80075f6:	f7f9 fdc9 	bl	800118c <__aeabi_ldivmod>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return (int16_t)out;
 8007602:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007610 <HFADC_CONVERT_RAW2VALUE>:
#include "HFADC.h"
#include "ProgRef.h"
#include "TCA9555.h"

float HFADC_CONVERT_RAW2VALUE(HFADC_struct* HFADC, uint16_t RAW)
{
 8007610:	b5b0      	push	{r4, r5, r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	807b      	strh	r3, [r7, #2]
	float VALUE = HFADCfrontendGain * HFADC->ADCref * (RAW/(maxValOf11Bit*1.0));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	4618      	mov	r0, r3
 8007622:	f7f8 ff19 	bl	8000458 <__aeabi_f2d>
 8007626:	a330      	add	r3, pc, #192	@ (adr r3, 80076e8 <HFADC_CONVERT_RAW2VALUE+0xd8>)
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f7f8 ff6c 	bl	8000508 <__aeabi_dmul>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4614      	mov	r4, r2
 8007636:	461d      	mov	r5, r3
 8007638:	887b      	ldrh	r3, [r7, #2]
 800763a:	4618      	mov	r0, r3
 800763c:	f7f8 fefa 	bl	8000434 <__aeabi_i2d>
 8007640:	f04f 0200 	mov.w	r2, #0
 8007644:	4b2a      	ldr	r3, [pc, #168]	@ (80076f0 <HFADC_CONVERT_RAW2VALUE+0xe0>)
 8007646:	f7f9 f889 	bl	800075c <__aeabi_ddiv>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4620      	mov	r0, r4
 8007650:	4629      	mov	r1, r5
 8007652:	f7f8 ff59 	bl	8000508 <__aeabi_dmul>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	4610      	mov	r0, r2
 800765c:	4619      	mov	r1, r3
 800765e:	f7f9 fa4b 	bl	8000af8 <__aeabi_d2f>
 8007662:	4603      	mov	r3, r0
 8007664:	60fb      	str	r3, [r7, #12]

	switch(HFADC->source)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d035      	beq.n	80076da <HFADC_CONVERT_RAW2VALUE+0xca>
 800766e:	2b02      	cmp	r3, #2
 8007670:	dc2f      	bgt.n	80076d2 <HFADC_CONVERT_RAW2VALUE+0xc2>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <HFADC_CONVERT_RAW2VALUE+0x6c>
 8007676:	2b01      	cmp	r3, #1
 8007678:	d024      	beq.n	80076c4 <HFADC_CONVERT_RAW2VALUE+0xb4>
 800767a:	e02a      	b.n	80076d2 <HFADC_CONVERT_RAW2VALUE+0xc2>
	{
		case OUT: if(HFADC->mode == Voltage_input) VALUE = VALUE*HFADCoutVoltageGain - HFADC->OUT_MEASURING_OFFSET;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10f      	bne.n	80076a4 <HFADC_CONVERT_RAW2VALUE+0x94>
 8007684:	f04f 0100 	mov.w	r1, #0
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f7f9 fb93 	bl	8000db4 <__aeabi_fmul>
 800768e:	4603      	mov	r3, r0
 8007690:	461a      	mov	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	4619      	mov	r1, r3
 8007698:	4610      	mov	r0, r2
 800769a:	f7f9 fa81 	bl	8000ba0 <__aeabi_fsub>
 800769e:	4603      	mov	r3, r0
 80076a0:	60fb      	str	r3, [r7, #12]
				  else 						 	   VALUE = VALUE*HFADCoutCurrentGain - HFADC->OUT_MEASURING_OFFSET;
		break;
 80076a2:	e01b      	b.n	80076dc <HFADC_CONVERT_RAW2VALUE+0xcc>
				  else 						 	   VALUE = VALUE*HFADCoutCurrentGain - HFADC->OUT_MEASURING_OFFSET;
 80076a4:	f04f 0100 	mov.w	r1, #0
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7f9 fb83 	bl	8000db4 <__aeabi_fmul>
 80076ae:	4603      	mov	r3, r0
 80076b0:	461a      	mov	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	4619      	mov	r1, r3
 80076b8:	4610      	mov	r0, r2
 80076ba:	f7f9 fa71 	bl	8000ba0 <__aeabi_fsub>
 80076be:	4603      	mov	r3, r0
 80076c0:	60fb      	str	r3, [r7, #12]
		break;
 80076c2:	e00b      	b.n	80076dc <HFADC_CONVERT_RAW2VALUE+0xcc>

		case IN: VALUE *= HFADCinGain; break;
 80076c4:	490b      	ldr	r1, [pc, #44]	@ (80076f4 <HFADC_CONVERT_RAW2VALUE+0xe4>)
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f7f9 fb74 	bl	8000db4 <__aeabi_fmul>
 80076cc:	4603      	mov	r3, r0
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	e004      	b.n	80076dc <HFADC_CONVERT_RAW2VALUE+0xcc>

		case UIO: VALUE *= HFADCuioGain; break;

		default: VALUE = 0; break;
 80076d2:	f04f 0300 	mov.w	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	e000      	b.n	80076dc <HFADC_CONVERT_RAW2VALUE+0xcc>
		case UIO: VALUE *= HFADCuioGain; break;
 80076da:	bf00      	nop
	}

	return VALUE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bdb0      	pop	{r4, r5, r7, pc}
 80076e6:	bf00      	nop
 80076e8:	cccccccd 	.word	0xcccccccd
 80076ec:	4008cccc 	.word	0x4008cccc
 80076f0:	40a00000 	.word	0x40a00000
 80076f4:	423c0000 	.word	0x423c0000

080076f8 <HFADC_CONVERT_VALUE2RAW>:

uint16_t HFADC_CONVERT_VALUE2RAW(HFADC_struct* HFADC, float VALUE)
{
 80076f8:	b5b0      	push	{r4, r5, r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
	switch(HFADC->source)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d025      	beq.n	8007756 <HFADC_CONVERT_VALUE2RAW+0x5e>
 800770a:	2b02      	cmp	r3, #2
 800770c:	dc1f      	bgt.n	800774e <HFADC_CONVERT_VALUE2RAW+0x56>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <HFADC_CONVERT_VALUE2RAW+0x20>
 8007712:	2b01      	cmp	r3, #1
 8007714:	d014      	beq.n	8007740 <HFADC_CONVERT_VALUE2RAW+0x48>
 8007716:	e01a      	b.n	800774e <HFADC_CONVERT_VALUE2RAW+0x56>
	{
		case OUT: if(HFADC->mode == Voltage_input) VALUE /= HFADCoutVoltageGain;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d107      	bne.n	8007730 <HFADC_CONVERT_VALUE2RAW+0x38>
 8007720:	f04f 0100 	mov.w	r1, #0
 8007724:	6838      	ldr	r0, [r7, #0]
 8007726:	f7f9 fbf9 	bl	8000f1c <__aeabi_fdiv>
 800772a:	4603      	mov	r3, r0
 800772c:	603b      	str	r3, [r7, #0]
				  else 						 	   VALUE /= HFADCoutCurrentGain;
		break;
 800772e:	e013      	b.n	8007758 <HFADC_CONVERT_VALUE2RAW+0x60>
				  else 						 	   VALUE /= HFADCoutCurrentGain;
 8007730:	f04f 0100 	mov.w	r1, #0
 8007734:	6838      	ldr	r0, [r7, #0]
 8007736:	f7f9 fbf1 	bl	8000f1c <__aeabi_fdiv>
 800773a:	4603      	mov	r3, r0
 800773c:	603b      	str	r3, [r7, #0]
		break;
 800773e:	e00b      	b.n	8007758 <HFADC_CONVERT_VALUE2RAW+0x60>

		case IN: VALUE /= HFADCinGain; break;
 8007740:	491b      	ldr	r1, [pc, #108]	@ (80077b0 <HFADC_CONVERT_VALUE2RAW+0xb8>)
 8007742:	6838      	ldr	r0, [r7, #0]
 8007744:	f7f9 fbea 	bl	8000f1c <__aeabi_fdiv>
 8007748:	4603      	mov	r3, r0
 800774a:	603b      	str	r3, [r7, #0]
 800774c:	e004      	b.n	8007758 <HFADC_CONVERT_VALUE2RAW+0x60>

		case UIO: VALUE /= HFADCuioGain; break;

		default: VALUE = 0; break;
 800774e:	f04f 0300 	mov.w	r3, #0
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	e000      	b.n	8007758 <HFADC_CONVERT_VALUE2RAW+0x60>
		case UIO: VALUE /= HFADCuioGain; break;
 8007756:	bf00      	nop
	}

	uint16_t RAW = (uint16_t) maxValOf11Bit*VALUE/(HFADCfrontendGain*HFADC->ADCref);
 8007758:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 800775c:	6838      	ldr	r0, [r7, #0]
 800775e:	f7f9 fb29 	bl	8000db4 <__aeabi_fmul>
 8007762:	4603      	mov	r3, r0
 8007764:	4618      	mov	r0, r3
 8007766:	f7f8 fe77 	bl	8000458 <__aeabi_f2d>
 800776a:	4604      	mov	r4, r0
 800776c:	460d      	mov	r5, r1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	4618      	mov	r0, r3
 8007774:	f7f8 fe70 	bl	8000458 <__aeabi_f2d>
 8007778:	a30b      	add	r3, pc, #44	@ (adr r3, 80077a8 <HFADC_CONVERT_VALUE2RAW+0xb0>)
 800777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777e:	f7f8 fec3 	bl	8000508 <__aeabi_dmul>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	4620      	mov	r0, r4
 8007788:	4629      	mov	r1, r5
 800778a:	f7f8 ffe7 	bl	800075c <__aeabi_ddiv>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	4610      	mov	r0, r2
 8007794:	4619      	mov	r1, r3
 8007796:	f7f9 f98f 	bl	8000ab8 <__aeabi_d2uiz>
 800779a:	4603      	mov	r3, r0
 800779c:	81fb      	strh	r3, [r7, #14]

	return RAW;
 800779e:	89fb      	ldrh	r3, [r7, #14]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bdb0      	pop	{r4, r5, r7, pc}
 80077a8:	cccccccd 	.word	0xcccccccd
 80077ac:	4008cccc 	.word	0x4008cccc
 80077b0:	423c0000 	.word	0x423c0000

080077b4 <HFADC_SET_ALL>:

void HFADC_SET_ALL(HFADC_struct* HFADC)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
	HFADC_SET_REF(HFADC->ADCref);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7f8 fe49 	bl	8000458 <__aeabi_f2d>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4610      	mov	r0, r2
 80077cc:	4619      	mov	r1, r3
 80077ce:	f000 f809 	bl	80077e4 <HFADC_SET_REF>
	HFADC_SET_UIO_SOURCE(HFADC->UIO_channel);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	789b      	ldrb	r3, [r3, #2]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f811 	bl	80077fe <HFADC_SET_UIO_SOURCE>

	return;
 80077dc:	bf00      	nop
}
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HFADC_SET_REF>:

void HFADC_SET_REF(HFADC_struct* HFADC)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
	ADCREF(HFADC->ADCref);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fc05 	bl	8008000 <ADCREF>
}
 80077f6:	bf00      	nop
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HFADC_SET_UIO_SOURCE>:
{

}

void HFADC_SET_UIO_SOURCE(HFADC_struct* HFADC)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]

}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr

08007810 <HFDAC_SET_MAX_AMPLITUDE>:
#include "HFDAC.h"
#include "main.h"
#include "LOLA.h"

void HFDAC_SET_MAX_AMPLITUDE(HFDAC_struct* HFDAC)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
	DACREF((HFDAC->maxAmplitude)*2/6.4);	// setting DAC Voltage reference
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	4619      	mov	r1, r3
 800781e:	4618      	mov	r0, r3
 8007820:	f7f9 f9c0 	bl	8000ba4 <__addsf3>
 8007824:	4603      	mov	r3, r0
 8007826:	4618      	mov	r0, r3
 8007828:	f7f8 fe16 	bl	8000458 <__aeabi_f2d>
 800782c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007868 <HFDAC_SET_MAX_AMPLITUDE+0x58>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f8 ff93 	bl	800075c <__aeabi_ddiv>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4610      	mov	r0, r2
 800783c:	4619      	mov	r1, r3
 800783e:	f7f9 f95b 	bl	8000af8 <__aeabi_d2f>
 8007842:	4603      	mov	r3, r0
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fb13 	bl	8007e70 <DACREF>
	HFDAC->relativeDACcodeCoef = 2047/(HFDAC->maxAmplitude); // multiply any number from -1 to 1 and you will get direct code for DAC
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	4619      	mov	r1, r3
 8007850:	4807      	ldr	r0, [pc, #28]	@ (8007870 <HFDAC_SET_MAX_AMPLITUDE+0x60>)
 8007852:	f7f9 fb63 	bl	8000f1c <__aeabi_fdiv>
 8007856:	4603      	mov	r3, r0
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	60da      	str	r2, [r3, #12]
}
 800785e:	bf00      	nop
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	9999999a 	.word	0x9999999a
 800786c:	40199999 	.word	0x40199999
 8007870:	44ffe000 	.word	0x44ffe000

08007874 <HFDAC_SET_MODE>:

void HFDAC_SET_MODE(HFDAC_MODE mode)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, mode);
 800787e:	79fb      	ldrb	r3, [r7, #7]
 8007880:	461a      	mov	r2, r3
 8007882:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007886:	4803      	ldr	r0, [pc, #12]	@ (8007894 <HFDAC_SET_MODE+0x20>)
 8007888:	f7fc fa7f 	bl	8003d8a <HAL_GPIO_WritePin>
}
 800788c:	bf00      	nop
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	40010c00 	.word	0x40010c00

08007898 <HFDAC_DIRECT_DATA>:

void HFDAC_DIRECT_DATA(HFDAC_struct* HFDAC, float value)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
	uint8_t byte[4];

	int16_t data = value * HFDAC->relativeDACcodeCoef;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7f9 fa83 	bl	8000db4 <__aeabi_fmul>
 80078ae:	4603      	mov	r3, r0
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7f9 fc45 	bl	8001140 <__aeabi_f2iz>
 80078b6:	4603      	mov	r3, r0
 80078b8:	81fb      	strh	r3, [r7, #14]

	byte[0] = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)((data>>8)&0x000f);
 80078be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80078c2:	121b      	asrs	r3, r3, #8
 80078c4:	b21b      	sxth	r3, r3
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 030f 	and.w	r3, r3, #15
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)(data&0x00ff);
 80078d0:	89fb      	ldrh	r3, [r7, #14]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)DAC_DIRECTDATA;
 80078d6:	2304      	movs	r3, #4
 80078d8:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80078da:	f107 0108 	add.w	r1, r7, #8
 80078de:	2364      	movs	r3, #100	@ 0x64
 80078e0:	2204      	movs	r2, #4
 80078e2:	480b      	ldr	r0, [pc, #44]	@ (8007910 <HFDAC_DIRECT_DATA+0x78>)
 80078e4:	f7fd fc60 	bl	80051a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80078e8:	2200      	movs	r2, #0
 80078ea:	2110      	movs	r1, #16
 80078ec:	4809      	ldr	r0, [pc, #36]	@ (8007914 <HFDAC_DIRECT_DATA+0x7c>)
 80078ee:	f7fc fa4c 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80078f2:	2201      	movs	r2, #1
 80078f4:	2110      	movs	r1, #16
 80078f6:	4807      	ldr	r0, [pc, #28]	@ (8007914 <HFDAC_DIRECT_DATA+0x7c>)
 80078f8:	f7fc fa47 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80078fc:	2200      	movs	r2, #0
 80078fe:	2110      	movs	r1, #16
 8007900:	4804      	ldr	r0, [pc, #16]	@ (8007914 <HFDAC_DIRECT_DATA+0x7c>)
 8007902:	f7fc fa42 	bl	8003d8a <HAL_GPIO_WritePin>
}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20000290 	.word	0x20000290
 8007914:	40010800 	.word	0x40010800

08007918 <HFDAC_SET_ALL>:

void HFDAC_SET_ALL(HFDAC_struct* HFDAC)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
	HFDAC_SET_MAX_AMPLITUDE(HFDAC);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff ff75 	bl	8007810 <HFDAC_SET_MAX_AMPLITUDE>
	HFDAC_SET_MODE(HFDAC->mode);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff ffa2 	bl	8007874 <HFDAC_SET_MODE>

}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <LOLA_CFG_SEL>:
#include "board.h"
#include "ProgRef.h"


void LOLA_CFG_SEL(InitType t)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	71fb      	strb	r3, [r7, #7]
	switch(t)
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	2b05      	cmp	r3, #5
 8007946:	f200 8081 	bhi.w	8007a4c <LOLA_CFG_SEL+0x114>
 800794a:	a201      	add	r2, pc, #4	@ (adr r2, 8007950 <LOLA_CFG_SEL+0x18>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	08007969 	.word	0x08007969
 8007954:	0800798f 	.word	0x0800798f
 8007958:	080079b5 	.word	0x080079b5
 800795c:	080079db 	.word	0x080079db
 8007960:	08007a01 	.word	0x08007a01
 8007964:	08007a27 	.word	0x08007a27
		{
			// reference: http://dangerousprototypes.com/docs/Xilinx_Spartan_3_FPGA_quick_start#Boot_configuration
			case Master_Serial:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 8007968:	2200      	movs	r2, #0
 800796a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800796e:	4843      	ldr	r0, [pc, #268]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 8007970:	f7fc fa0b 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 8007974:	2200      	movs	r2, #0
 8007976:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800797a:	4840      	ldr	r0, [pc, #256]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 800797c:	f7fc fa05 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 8007980:	2200      	movs	r2, #0
 8007982:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007986:	483d      	ldr	r0, [pc, #244]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 8007988:	f7fc f9ff 	bl	8003d8a <HAL_GPIO_WritePin>
			break;
 800798c:	e071      	b.n	8007a72 <LOLA_CFG_SEL+0x13a>

			case SPI_FLASH:	// SPI FLASH
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 800798e:	2200      	movs	r2, #0
 8007990:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007994:	4839      	ldr	r0, [pc, #228]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 8007996:	f7fc f9f8 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 800799a:	2200      	movs	r2, #0
 800799c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80079a0:	4836      	ldr	r0, [pc, #216]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 80079a2:	f7fc f9f2 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 80079a6:	2201      	movs	r2, #1
 80079a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079ac:	4833      	ldr	r0, [pc, #204]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 80079ae:	f7fc f9ec 	bl	8003d8a <HAL_GPIO_WritePin>
			break;
 80079b2:	e05e      	b.n	8007a72 <LOLA_CFG_SEL+0x13a>

			case BPI_Up:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80079b4:	2200      	movs	r2, #0
 80079b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80079ba:	4830      	ldr	r0, [pc, #192]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 80079bc:	f7fc f9e5 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 80079c0:	2201      	movs	r2, #1
 80079c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80079c6:	482d      	ldr	r0, [pc, #180]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 80079c8:	f7fc f9df 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 80079cc:	2200      	movs	r2, #0
 80079ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079d2:	482a      	ldr	r0, [pc, #168]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 80079d4:	f7fc f9d9 	bl	8003d8a <HAL_GPIO_WritePin>
			break;
 80079d8:	e04b      	b.n	8007a72 <LOLA_CFG_SEL+0x13a>

			case BPI_Down:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80079da:	2200      	movs	r2, #0
 80079dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80079e0:	4826      	ldr	r0, [pc, #152]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 80079e2:	f7fc f9d2 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 80079e6:	2201      	movs	r2, #1
 80079e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80079ec:	4823      	ldr	r0, [pc, #140]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 80079ee:	f7fc f9cc 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 80079f2:	2201      	movs	r2, #1
 80079f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079f8:	4820      	ldr	r0, [pc, #128]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 80079fa:	f7fc f9c6 	bl	8003d8a <HAL_GPIO_WritePin>
			break;
 80079fe:	e038      	b.n	8007a72 <LOLA_CFG_SEL+0x13a>

			case Slave_parallel:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8007a00:	2201      	movs	r2, #1
 8007a02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007a06:	481d      	ldr	r0, [pc, #116]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 8007a08:	f7fc f9bf 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007a12:	481a      	ldr	r0, [pc, #104]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 8007a14:	f7fc f9b9 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a1e:	4817      	ldr	r0, [pc, #92]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 8007a20:	f7fc f9b3 	bl	8003d8a <HAL_GPIO_WritePin>
			break;
 8007a24:	e025      	b.n	8007a72 <LOLA_CFG_SEL+0x13a>

			case Slave_Serial:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8007a26:	2201      	movs	r2, #1
 8007a28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007a2c:	4813      	ldr	r0, [pc, #76]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 8007a2e:	f7fc f9ac 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8007a32:	2201      	movs	r2, #1
 8007a34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007a38:	4810      	ldr	r0, [pc, #64]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 8007a3a:	f7fc f9a6 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a44:	480d      	ldr	r0, [pc, #52]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 8007a46:	f7fc f9a0 	bl	8003d8a <HAL_GPIO_WritePin>
			break;
 8007a4a:	e012      	b.n	8007a72 <LOLA_CFG_SEL+0x13a>

			default: // JTAG on default
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007a52:	480a      	ldr	r0, [pc, #40]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 8007a54:	f7fc f999 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007a5e:	4807      	ldr	r0, [pc, #28]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 8007a60:	f7fc f993 	bl	8003d8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8007a64:	2201      	movs	r2, #1
 8007a66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a6a:	4804      	ldr	r0, [pc, #16]	@ (8007a7c <LOLA_CFG_SEL+0x144>)
 8007a6c:	f7fc f98d 	bl	8003d8a <HAL_GPIO_WritePin>
			break;
 8007a70:	bf00      	nop
		}
}
 8007a72:	bf00      	nop
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	40010c00 	.word	0x40010c00

08007a80 <LOLA_Init>:

uint8_t LOLA_Init(LOLAconfig_struct* LOLAconfig)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
	uint16_t AttemptsLeft;
	uint16_t FID = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	817b      	strh	r3, [r7, #10]
	uint16_t TrialsLeft = LOLAconfig->Trials;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	885b      	ldrh	r3, [r3, #2]
 8007a90:	81bb      	strh	r3, [r7, #12]


	do{
		LOLAconfig->Status = NO_FIRMWARE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]
		LOLA_Reset();
 8007a98:	f000 f85c 	bl	8007b54 <LOLA_Reset>
		HAL_Delay(200);
 8007a9c:	20c8      	movs	r0, #200	@ 0xc8
 8007a9e:	f7fb fbc9 	bl	8003234 <HAL_Delay>
		LOLA_CFG_SEL(LOLAconfig->Config);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	785b      	ldrb	r3, [r3, #1]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff ff46 	bl	8007938 <LOLA_CFG_SEL>

		AttemptsLeft = 20;
 8007aac:	2314      	movs	r3, #20
 8007aae:	81fb      	strh	r3, [r7, #14]

		if(LOLAconfig->Config == JTAG)	// unlimited timer for manual JTAG configuration
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	2b06      	cmp	r3, #6
 8007ab6:	d10f      	bne.n	8007ad8 <LOLA_Init+0x58>
			while(!HAL_GPIO_ReadPin(DONE_GPIO_Port, DONE_Pin)){}
 8007ab8:	bf00      	nop
 8007aba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007abe:	4824      	ldr	r0, [pc, #144]	@ (8007b50 <LOLA_Init+0xd0>)
 8007ac0:	f7fc f94c 	bl	8003d5c <HAL_GPIO_ReadPin>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0f7      	beq.n	8007aba <LOLA_Init+0x3a>
 8007aca:	e010      	b.n	8007aee <LOLA_Init+0x6e>
		else
			while(!HAL_GPIO_ReadPin(DONE_GPIO_Port, DONE_Pin) && AttemptsLeft > 0)
			{
				AttemptsLeft--;
 8007acc:	89fb      	ldrh	r3, [r7, #14]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	81fb      	strh	r3, [r7, #14]
				HAL_Delay(100);
 8007ad2:	2064      	movs	r0, #100	@ 0x64
 8007ad4:	f7fb fbae 	bl	8003234 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(DONE_GPIO_Port, DONE_Pin) && AttemptsLeft > 0)
 8007ad8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007adc:	481c      	ldr	r0, [pc, #112]	@ (8007b50 <LOLA_Init+0xd0>)
 8007ade:	f7fc f93d 	bl	8003d5c <HAL_GPIO_ReadPin>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <LOLA_Init+0x6e>
 8007ae8:	89fb      	ldrh	r3, [r7, #14]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1ee      	bne.n	8007acc <LOLA_Init+0x4c>
			}

		AttemptsLeft = 20;
 8007aee:	2314      	movs	r3, #20
 8007af0:	81fb      	strh	r3, [r7, #14]

		do{
			HAL_Delay(100);
 8007af2:	2064      	movs	r0, #100	@ 0x64
 8007af4:	f7fb fb9e 	bl	8003234 <HAL_Delay>
			FID = LOLA_GET_FIRMWAREID();
 8007af8:	f000 f89a 	bl	8007c30 <LOLA_GET_FIRMWAREID>
 8007afc:	4603      	mov	r3, r0
 8007afe:	817b      	strh	r3, [r7, #10]

			if(LOLAconfig->compatibleFirmwareID == FID) LOLAconfig->Status = FIRMWARE_OK;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	889b      	ldrh	r3, [r3, #4]
 8007b04:	897a      	ldrh	r2, [r7, #10]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d103      	bne.n	8007b12 <LOLA_Init+0x92>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	701a      	strb	r2, [r3, #0]
 8007b10:	e002      	b.n	8007b18 <LOLA_Init+0x98>
			else LOLAconfig->Status = INVALID_FIRMWARE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	701a      	strb	r2, [r3, #0]
		}while(AttemptsLeft > 0 && LOLAconfig->Status != FIRMWARE_OK);
 8007b18:	89fb      	ldrh	r3, [r7, #14]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <LOLA_Init+0xa6>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d1e5      	bne.n	8007af2 <LOLA_Init+0x72>

		TrialsLeft--;
 8007b26:	89bb      	ldrh	r3, [r7, #12]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	81bb      	strh	r3, [r7, #12]

	}while(TrialsLeft > 0 && LOLAconfig->Status != FIRMWARE_OK);
 8007b2c:	89bb      	ldrh	r3, [r7, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <LOLA_Init+0xba>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d1ab      	bne.n	8007a92 <LOLA_Init+0x12>

	if(LOLAconfig->Status == FIRMWARE_OK) return 1;	// sucesfull configuration
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d101      	bne.n	8007b46 <LOLA_Init+0xc6>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <LOLA_Init+0xc8>
	else return 0; // timer ran out
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	40010800 	.word	0x40010800

08007b54 <LOLA_Reset>:

void LOLA_Reset()
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 0);
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2108      	movs	r1, #8
 8007b5c:	4804      	ldr	r0, [pc, #16]	@ (8007b70 <LOLA_Reset+0x1c>)
 8007b5e:	f7fc f914 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 1);
 8007b62:	2201      	movs	r2, #1
 8007b64:	2108      	movs	r1, #8
 8007b66:	4802      	ldr	r0, [pc, #8]	@ (8007b70 <LOLA_Reset+0x1c>)
 8007b68:	f7fc f90f 	bl	8003d8a <HAL_GPIO_WritePin>
}
 8007b6c:	bf00      	nop
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40010800 	.word	0x40010800

08007b74 <LOLA_enable_features>:
}*/

uint16_t enablersReg = 0;

void LOLA_enable_features(LOLAfeatures LOLAfeatures1, uint8_t ENABLE)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	460a      	mov	r2, r1
 8007b7e:	71fb      	strb	r3, [r7, #7]
 8007b80:	4613      	mov	r3, r2
 8007b82:	71bb      	strb	r3, [r7, #6]
	uint16_t enablersMask = 0x0001 << LOLAfeatures1;
 8007b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8e:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	if((uint16_t)LOLAfeatures1 == (uint16_t)ALL_EN) 	enablersMask = 0xffff;
 8007b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d102      	bne.n	8007ba4 <LOLA_enable_features+0x30>
 8007b9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ba2:	81fb      	strh	r3, [r7, #14]

	if(ENABLE) 	enablersReg |= enablersMask;
 8007ba4:	79bb      	ldrb	r3, [r7, #6]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d007      	beq.n	8007bba <LOLA_enable_features+0x46>
 8007baa:	4b1e      	ldr	r3, [pc, #120]	@ (8007c24 <LOLA_enable_features+0xb0>)
 8007bac:	881a      	ldrh	r2, [r3, #0]
 8007bae:	89fb      	ldrh	r3, [r7, #14]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8007c24 <LOLA_enable_features+0xb0>)
 8007bb6:	801a      	strh	r2, [r3, #0]
 8007bb8:	e00b      	b.n	8007bd2 <LOLA_enable_features+0x5e>
	else 		enablersReg &= ~enablersMask;
 8007bba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bbe:	43db      	mvns	r3, r3
 8007bc0:	b21a      	sxth	r2, r3
 8007bc2:	4b18      	ldr	r3, [pc, #96]	@ (8007c24 <LOLA_enable_features+0xb0>)
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b21b      	sxth	r3, r3
 8007bc8:	4013      	ands	r3, r2
 8007bca:	b21b      	sxth	r3, r3
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	4b15      	ldr	r3, [pc, #84]	@ (8007c24 <LOLA_enable_features+0xb0>)
 8007bd0:	801a      	strh	r2, [r3, #0]

	byte[0] = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((enablersReg>>8)&0x00ff);
 8007bd6:	4b13      	ldr	r3, [pc, #76]	@ (8007c24 <LOLA_enable_features+0xb0>)
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	0a1b      	lsrs	r3, r3, #8
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(enablersReg&0x00ff);
 8007be2:	4b10      	ldr	r3, [pc, #64]	@ (8007c24 <LOLA_enable_features+0xb0>)
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)ENABLERS;
 8007bea:	2303      	movs	r3, #3
 8007bec:	72fb      	strb	r3, [r7, #11]


	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8007bee:	f107 0108 	add.w	r1, r7, #8
 8007bf2:	2364      	movs	r3, #100	@ 0x64
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	480c      	ldr	r0, [pc, #48]	@ (8007c28 <LOLA_enable_features+0xb4>)
 8007bf8:	f7fd fad6 	bl	80051a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2110      	movs	r1, #16
 8007c00:	480a      	ldr	r0, [pc, #40]	@ (8007c2c <LOLA_enable_features+0xb8>)
 8007c02:	f7fc f8c2 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8007c06:	2201      	movs	r2, #1
 8007c08:	2110      	movs	r1, #16
 8007c0a:	4808      	ldr	r0, [pc, #32]	@ (8007c2c <LOLA_enable_features+0xb8>)
 8007c0c:	f7fc f8bd 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007c10:	2200      	movs	r2, #0
 8007c12:	2110      	movs	r1, #16
 8007c14:	4805      	ldr	r0, [pc, #20]	@ (8007c2c <LOLA_enable_features+0xb8>)
 8007c16:	f7fc f8b8 	bl	8003d8a <HAL_GPIO_WritePin>
}
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	200003e8 	.word	0x200003e8
 8007c28:	20000290 	.word	0x20000290
 8007c2c:	40010800 	.word	0x40010800

08007c30 <LOLA_GET_FIRMWAREID>:

uint16_t LOLA_GET_FIRMWAREID()
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
	uint16_t FirmwareID = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	byte[0] = (int8_t)0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)FIRMWARE_ID;
 8007c46:	2313      	movs	r3, #19
 8007c48:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8007c4a:	f107 0108 	add.w	r1, r7, #8
 8007c4e:	2364      	movs	r3, #100	@ 0x64
 8007c50:	2204      	movs	r2, #4
 8007c52:	4814      	ldr	r0, [pc, #80]	@ (8007ca4 <LOLA_GET_FIRMWAREID+0x74>)
 8007c54:	f7fd faa8 	bl	80051a8 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2110      	movs	r1, #16
 8007c5c:	4812      	ldr	r0, [pc, #72]	@ (8007ca8 <LOLA_GET_FIRMWAREID+0x78>)
 8007c5e:	f7fc f894 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8007c62:	2201      	movs	r2, #1
 8007c64:	2110      	movs	r1, #16
 8007c66:	4810      	ldr	r0, [pc, #64]	@ (8007ca8 <LOLA_GET_FIRMWAREID+0x78>)
 8007c68:	f7fc f88f 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2110      	movs	r1, #16
 8007c70:	480d      	ldr	r0, [pc, #52]	@ (8007ca8 <LOLA_GET_FIRMWAREID+0x78>)
 8007c72:	f7fc f88a 	bl	8003d8a <HAL_GPIO_WritePin>

	uint8_t rxBuffer[4];

	 // Receive 4 bytes
	if (HAL_SPI_Receive(&hspi1, rxBuffer, 4, HAL_MAX_DELAY) == HAL_OK) FirmwareID = (rxBuffer[2] << 8) | rxBuffer[3];
 8007c76:	1d39      	adds	r1, r7, #4
 8007c78:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7c:	2204      	movs	r2, #4
 8007c7e:	4809      	ldr	r0, [pc, #36]	@ (8007ca4 <LOLA_GET_FIRMWAREID+0x74>)
 8007c80:	f7fd fbd5 	bl	800542e <HAL_SPI_Receive>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d107      	bne.n	8007c9a <LOLA_GET_FIRMWAREID+0x6a>
 8007c8a:	79bb      	ldrb	r3, [r7, #6]
 8007c8c:	021b      	lsls	r3, r3, #8
 8007c8e:	b21a      	sxth	r2, r3
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	b21b      	sxth	r3, r3
 8007c94:	4313      	orrs	r3, r2
 8007c96:	b21b      	sxth	r3, r3
 8007c98:	81fb      	strh	r3, [r7, #14]

	return FirmwareID;
 8007c9a:	89fb      	ldrh	r3, [r7, #14]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20000290 	.word	0x20000290
 8007ca8:	40010800 	.word	0x40010800

08007cac <OSC_SET_ALL>:

#include "OSC.h"
#include "main.h"

void OSC_SET_ALL(OSC_struct* OSC, HFADC_struct* HFADC)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
	OSC_SET_PRESCALER(OSC);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f8a8 	bl	8007e0c <OSC_SET_PRESCALER>
	OSC_SET_SAMPLES_AFTER_TRIGGER(OSC);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f873 	bl	8007da8 <OSC_SET_SAMPLES_AFTER_TRIGGER>
	OSC_SET_TRIGGER_MODE(OSC);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f844 	bl	8007d50 <OSC_SET_TRIGGER_MODE>
	OSC_SET_TRIGGER_VAL(OSC, HFADC);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f804 	bl	8007cd8 <OSC_SET_TRIGGER_VAL>
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <OSC_SET_TRIGGER_VAL>:
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);

}

void OSC_SET_TRIGGER_VAL(OSC_struct* OSC, HFADC_struct* HFADC)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
	uint8_t byte[4];

	int16_t data = HFADC_CONVERT_VALUE2RAW(HFADC, OSC->triggerLevel);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6838      	ldr	r0, [r7, #0]
 8007cea:	f7ff fd05 	bl	80076f8 <HFADC_CONVERT_VALUE2RAW>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	81fb      	strh	r3, [r7, #14]

	byte[0] = (int8_t)0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)((data>>8)&0x000f);
 8007cf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007cfa:	121b      	asrs	r3, r3, #8
 8007cfc:	b21b      	sxth	r3, r3
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)(data&0x00ff);
 8007d08:	89fb      	ldrh	r3, [r7, #14]
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)OSC_TRIGLEVEL;
 8007d0e:	230b      	movs	r3, #11
 8007d10:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8007d12:	f107 0108 	add.w	r1, r7, #8
 8007d16:	2364      	movs	r3, #100	@ 0x64
 8007d18:	2204      	movs	r2, #4
 8007d1a:	480b      	ldr	r0, [pc, #44]	@ (8007d48 <OSC_SET_TRIGGER_VAL+0x70>)
 8007d1c:	f7fd fa44 	bl	80051a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007d20:	2200      	movs	r2, #0
 8007d22:	2110      	movs	r1, #16
 8007d24:	4809      	ldr	r0, [pc, #36]	@ (8007d4c <OSC_SET_TRIGGER_VAL+0x74>)
 8007d26:	f7fc f830 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	2110      	movs	r1, #16
 8007d2e:	4807      	ldr	r0, [pc, #28]	@ (8007d4c <OSC_SET_TRIGGER_VAL+0x74>)
 8007d30:	f7fc f82b 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007d34:	2200      	movs	r2, #0
 8007d36:	2110      	movs	r1, #16
 8007d38:	4804      	ldr	r0, [pc, #16]	@ (8007d4c <OSC_SET_TRIGGER_VAL+0x74>)
 8007d3a:	f7fc f826 	bl	8003d8a <HAL_GPIO_WritePin>
}
 8007d3e:	bf00      	nop
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000290 	.word	0x20000290
 8007d4c:	40010800 	.word	0x40010800

08007d50 <OSC_SET_TRIGGER_MODE>:

void OSC_SET_TRIGGER_MODE(OSC_struct* OSC)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	uint8_t byte[4];

	byte[0] = (int8_t)0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	733b      	strb	r3, [r7, #12]
	byte[1] = (int8_t)0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	737b      	strb	r3, [r7, #13]
	byte[2] = (int8_t)OSC->trigMode;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	791b      	ldrb	r3, [r3, #4]
 8007d64:	73bb      	strb	r3, [r7, #14]
	byte[3] = (int8_t)OSC_TRIGLEVEL;
 8007d66:	230b      	movs	r3, #11
 8007d68:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8007d6a:	f107 010c 	add.w	r1, r7, #12
 8007d6e:	2364      	movs	r3, #100	@ 0x64
 8007d70:	2204      	movs	r2, #4
 8007d72:	480b      	ldr	r0, [pc, #44]	@ (8007da0 <OSC_SET_TRIGGER_MODE+0x50>)
 8007d74:	f7fd fa18 	bl	80051a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2110      	movs	r1, #16
 8007d7c:	4809      	ldr	r0, [pc, #36]	@ (8007da4 <OSC_SET_TRIGGER_MODE+0x54>)
 8007d7e:	f7fc f804 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8007d82:	2201      	movs	r2, #1
 8007d84:	2110      	movs	r1, #16
 8007d86:	4807      	ldr	r0, [pc, #28]	@ (8007da4 <OSC_SET_TRIGGER_MODE+0x54>)
 8007d88:	f7fb ffff 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2110      	movs	r1, #16
 8007d90:	4804      	ldr	r0, [pc, #16]	@ (8007da4 <OSC_SET_TRIGGER_MODE+0x54>)
 8007d92:	f7fb fffa 	bl	8003d8a <HAL_GPIO_WritePin>
}
 8007d96:	bf00      	nop
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000290 	.word	0x20000290
 8007da4:	40010800 	.word	0x40010800

08007da8 <OSC_SET_SAMPLES_AFTER_TRIGGER>:

void OSC_SET_SAMPLES_AFTER_TRIGGER(OSC_struct* OSC)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	uint8_t byte[4];

	int16_t data = OSC->samplesAfterTrig;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	88db      	ldrh	r3, [r3, #6]
 8007db4:	81fb      	strh	r3, [r7, #14]

	byte[0] = (int8_t)0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)((data>>8)&0x00ff);
 8007dba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007dbe:	121b      	asrs	r3, r3, #8
 8007dc0:	b21b      	sxth	r3, r3
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)(data&0x00ff);
 8007dc6:	89fb      	ldrh	r3, [r7, #14]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)OSC_SAMPLESAFTERTRIG;
 8007dcc:	230c      	movs	r3, #12
 8007dce:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8007dd0:	f107 0108 	add.w	r1, r7, #8
 8007dd4:	2364      	movs	r3, #100	@ 0x64
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	480a      	ldr	r0, [pc, #40]	@ (8007e04 <OSC_SET_SAMPLES_AFTER_TRIGGER+0x5c>)
 8007dda:	f7fd f9e5 	bl	80051a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007dde:	2200      	movs	r2, #0
 8007de0:	2110      	movs	r1, #16
 8007de2:	4809      	ldr	r0, [pc, #36]	@ (8007e08 <OSC_SET_SAMPLES_AFTER_TRIGGER+0x60>)
 8007de4:	f7fb ffd1 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8007de8:	2201      	movs	r2, #1
 8007dea:	2110      	movs	r1, #16
 8007dec:	4806      	ldr	r0, [pc, #24]	@ (8007e08 <OSC_SET_SAMPLES_AFTER_TRIGGER+0x60>)
 8007dee:	f7fb ffcc 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007df2:	2200      	movs	r2, #0
 8007df4:	2110      	movs	r1, #16
 8007df6:	4804      	ldr	r0, [pc, #16]	@ (8007e08 <OSC_SET_SAMPLES_AFTER_TRIGGER+0x60>)
 8007df8:	f7fb ffc7 	bl	8003d8a <HAL_GPIO_WritePin>
}
 8007dfc:	bf00      	nop
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000290 	.word	0x20000290
 8007e08:	40010800 	.word	0x40010800

08007e0c <OSC_SET_PRESCALER>:

void OSC_SET_PRESCALER(OSC_struct* OSC)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	uint8_t byte[4];

	uint32_t prescaler = OSC->prescaler;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	60fb      	str	r3, [r7, #12]

	// setting prescaler
	byte[0] = (uint8_t)((prescaler>>16)&0x00ff);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	0c1b      	lsrs	r3, r3, #16
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((prescaler>>8)&0x00ff);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	0a1b      	lsrs	r3, r3, #8
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(prescaler&0x00ff);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)OSC_PRESCALER;
 8007e30:	230d      	movs	r3, #13
 8007e32:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8007e34:	f107 0108 	add.w	r1, r7, #8
 8007e38:	2364      	movs	r3, #100	@ 0x64
 8007e3a:	2204      	movs	r2, #4
 8007e3c:	480a      	ldr	r0, [pc, #40]	@ (8007e68 <OSC_SET_PRESCALER+0x5c>)
 8007e3e:	f7fd f9b3 	bl	80051a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007e42:	2200      	movs	r2, #0
 8007e44:	2110      	movs	r1, #16
 8007e46:	4809      	ldr	r0, [pc, #36]	@ (8007e6c <OSC_SET_PRESCALER+0x60>)
 8007e48:	f7fb ff9f 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	2110      	movs	r1, #16
 8007e50:	4806      	ldr	r0, [pc, #24]	@ (8007e6c <OSC_SET_PRESCALER+0x60>)
 8007e52:	f7fb ff9a 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8007e56:	2200      	movs	r2, #0
 8007e58:	2110      	movs	r1, #16
 8007e5a:	4804      	ldr	r0, [pc, #16]	@ (8007e6c <OSC_SET_PRESCALER+0x60>)
 8007e5c:	f7fb ff95 	bl	8003d8a <HAL_GPIO_WritePin>
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	20000290 	.word	0x20000290
 8007e6c:	40010800 	.word	0x40010800

08007e70 <DACREF>:
#include "trim.h"

float DACref = 0;

void DACREF(float v) // 0 <= v <= 2.5
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 8007e78:	4a27      	ldr	r2, [pc, #156]	@ (8007f18 <DACREF+0xa8>)
 8007e7a:	f04f 0100 	mov.w	r1, #0
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 fb74 	bl	800956c <trimFloat>
 8007e84:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 8007e86:	4924      	ldr	r1, [pc, #144]	@ (8007f18 <DACREF+0xa8>)
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7f9 f927 	bl	80010dc <__aeabi_fcmpeq>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <DACREF+0x2c>
 8007e94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e98:	81fb      	strh	r3, [r7, #14]
 8007e9a:	e018      	b.n	8007ece <DACREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7f8 fadb 	bl	8000458 <__aeabi_f2d>
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f1c <DACREF+0xac>)
 8007ea8:	f7f8 fc58 	bl	800075c <__aeabi_ddiv>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	f04f 0200 	mov.w	r2, #0
 8007eb8:	4b19      	ldr	r3, [pc, #100]	@ (8007f20 <DACREF+0xb0>)
 8007eba:	f7f8 fb25 	bl	8000508 <__aeabi_dmul>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	f7f8 fdf7 	bl	8000ab8 <__aeabi_d2uiz>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	81fb      	strh	r3, [r7, #14]

	DACref = v;
 8007ece:	4a15      	ldr	r2, [pc, #84]	@ (8007f24 <DACREF+0xb4>)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6013      	str	r3, [r2, #0]

	uint8_t byte[3];

	byte[0] = (3<<1)|(1<<4);	//3 shifted=channel D	1 shifted=load
 8007ed4:	2316      	movs	r3, #22
 8007ed6:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8007ed8:	89fb      	ldrh	r3, [r7, #14]
 8007eda:	099b      	lsrs	r3, r3, #6
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8007ee2:	89fb      	ldrh	r3, [r7, #14]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8007eea:	2200      	movs	r2, #0
 8007eec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007ef0:	480d      	ldr	r0, [pc, #52]	@ (8007f28 <DACREF+0xb8>)
 8007ef2:	f7fb ff4a 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8007ef6:	f107 0108 	add.w	r1, r7, #8
 8007efa:	2364      	movs	r3, #100	@ 0x64
 8007efc:	2203      	movs	r2, #3
 8007efe:	480b      	ldr	r0, [pc, #44]	@ (8007f2c <DACREF+0xbc>)
 8007f00:	f7fd f952 	bl	80051a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8007f04:	2201      	movs	r2, #1
 8007f06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007f0a:	4807      	ldr	r0, [pc, #28]	@ (8007f28 <DACREF+0xb8>)
 8007f0c:	f7fb ff3d 	bl	8003d8a <HAL_GPIO_WritePin>
}
 8007f10:	bf00      	nop
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	40200000 	.word	0x40200000
 8007f1c:	40040000 	.word	0x40040000
 8007f20:	40d00000 	.word	0x40d00000
 8007f24:	200003ec 	.word	0x200003ec
 8007f28:	40011000 	.word	0x40011000
 8007f2c:	20000290 	.word	0x20000290

08007f30 <DACOFFS>:

void DACOFFS(float v) // -12.5 <= v <= 12.5
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 8007f38:	4a2a      	ldr	r2, [pc, #168]	@ (8007fe4 <DACOFFS+0xb4>)
 8007f3a:	492b      	ldr	r1, [pc, #172]	@ (8007fe8 <DACOFFS+0xb8>)
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 fb15 	bl	800956c <trimFloat>
 8007f42:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 8007f44:	4927      	ldr	r1, [pc, #156]	@ (8007fe4 <DACOFFS+0xb4>)
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7f9 f8c8 	bl	80010dc <__aeabi_fcmpeq>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <DACOFFS+0x2a>
 8007f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f56:	81fb      	strh	r3, [r7, #14]
 8007f58:	e021      	b.n	8007f9e <DACOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7f8 fa7c 	bl	8000458 <__aeabi_f2d>
 8007f60:	f04f 0200 	mov.w	r2, #0
 8007f64:	4b21      	ldr	r3, [pc, #132]	@ (8007fec <DACOFFS+0xbc>)
 8007f66:	f7f8 f919 	bl	800019c <__adddf3>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4610      	mov	r0, r2
 8007f70:	4619      	mov	r1, r3
 8007f72:	f04f 0200 	mov.w	r2, #0
 8007f76:	4b1e      	ldr	r3, [pc, #120]	@ (8007ff0 <DACOFFS+0xc0>)
 8007f78:	f7f8 fbf0 	bl	800075c <__aeabi_ddiv>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4610      	mov	r0, r2
 8007f82:	4619      	mov	r1, r3
 8007f84:	f04f 0200 	mov.w	r2, #0
 8007f88:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff4 <DACOFFS+0xc4>)
 8007f8a:	f7f8 fabd 	bl	8000508 <__aeabi_dmul>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4610      	mov	r0, r2
 8007f94:	4619      	mov	r1, r3
 8007f96:	f7f8 fd8f 	bl	8000ab8 <__aeabi_d2uiz>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (2<<1)|(1<<4);	//2 shifted=channel C	1 shifted=load
 8007f9e:	2314      	movs	r3, #20
 8007fa0:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8007fa2:	89fb      	ldrh	r3, [r7, #14]
 8007fa4:	099b      	lsrs	r3, r3, #6
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8007fac:	89fb      	ldrh	r3, [r7, #14]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007fba:	480f      	ldr	r0, [pc, #60]	@ (8007ff8 <DACOFFS+0xc8>)
 8007fbc:	f7fb fee5 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8007fc0:	f107 0108 	add.w	r1, r7, #8
 8007fc4:	2364      	movs	r3, #100	@ 0x64
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	480c      	ldr	r0, [pc, #48]	@ (8007ffc <DACOFFS+0xcc>)
 8007fca:	f7fd f8ed 	bl	80051a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007fd4:	4808      	ldr	r0, [pc, #32]	@ (8007ff8 <DACOFFS+0xc8>)
 8007fd6:	f7fb fed8 	bl	8003d8a <HAL_GPIO_WritePin>
}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	41480000 	.word	0x41480000
 8007fe8:	c1480000 	.word	0xc1480000
 8007fec:	40290000 	.word	0x40290000
 8007ff0:	40390000 	.word	0x40390000
 8007ff4:	40d00000 	.word	0x40d00000
 8007ff8:	40011000 	.word	0x40011000
 8007ffc:	20000290 	.word	0x20000290

08008000 <ADCREF>:

void ADCREF(float v) // 0 <= v <= 2.5
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 8008008:	4a26      	ldr	r2, [pc, #152]	@ (80080a4 <ADCREF+0xa4>)
 800800a:	f04f 0100 	mov.w	r1, #0
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f001 faac 	bl	800956c <trimFloat>
 8008014:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 8008016:	4923      	ldr	r1, [pc, #140]	@ (80080a4 <ADCREF+0xa4>)
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7f9 f85f 	bl	80010dc <__aeabi_fcmpeq>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <ADCREF+0x2c>
 8008024:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008028:	81fb      	strh	r3, [r7, #14]
 800802a:	e018      	b.n	800805e <ADCREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7f8 fa13 	bl	8000458 <__aeabi_f2d>
 8008032:	f04f 0200 	mov.w	r2, #0
 8008036:	4b1c      	ldr	r3, [pc, #112]	@ (80080a8 <ADCREF+0xa8>)
 8008038:	f7f8 fb90 	bl	800075c <__aeabi_ddiv>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4610      	mov	r0, r2
 8008042:	4619      	mov	r1, r3
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	4b18      	ldr	r3, [pc, #96]	@ (80080ac <ADCREF+0xac>)
 800804a:	f7f8 fa5d 	bl	8000508 <__aeabi_dmul>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4610      	mov	r0, r2
 8008054:	4619      	mov	r1, r3
 8008056:	f7f8 fd2f 	bl	8000ab8 <__aeabi_d2uiz>
 800805a:	4603      	mov	r3, r0
 800805c:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<1)|(1<<4); //1 shifted=channel B	1 shifted=load
 800805e:	2312      	movs	r3, #18
 8008060:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8008062:	89fb      	ldrh	r3, [r7, #14]
 8008064:	099b      	lsrs	r3, r3, #6
 8008066:	b29b      	uxth	r3, r3
 8008068:	b2db      	uxtb	r3, r3
 800806a:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 800806c:	89fb      	ldrh	r3, [r7, #14]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	b2db      	uxtb	r3, r3
 8008072:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8008074:	2200      	movs	r2, #0
 8008076:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800807a:	480d      	ldr	r0, [pc, #52]	@ (80080b0 <ADCREF+0xb0>)
 800807c:	f7fb fe85 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8008080:	f107 0108 	add.w	r1, r7, #8
 8008084:	2364      	movs	r3, #100	@ 0x64
 8008086:	2203      	movs	r2, #3
 8008088:	480a      	ldr	r0, [pc, #40]	@ (80080b4 <ADCREF+0xb4>)
 800808a:	f7fd f88d 	bl	80051a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 800808e:	2201      	movs	r2, #1
 8008090:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008094:	4806      	ldr	r0, [pc, #24]	@ (80080b0 <ADCREF+0xb0>)
 8008096:	f7fb fe78 	bl	8003d8a <HAL_GPIO_WritePin>
}
 800809a:	bf00      	nop
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	40200000 	.word	0x40200000
 80080a8:	40040000 	.word	0x40040000
 80080ac:	40d00000 	.word	0x40d00000
 80080b0:	40011000 	.word	0x40011000
 80080b4:	20000290 	.word	0x20000290

080080b8 <ADCOFFS>:

void ADCOFFS(float v) // -12.5 <= v <= 12.5
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 80080c0:	4a2a      	ldr	r2, [pc, #168]	@ (800816c <ADCOFFS+0xb4>)
 80080c2:	492b      	ldr	r1, [pc, #172]	@ (8008170 <ADCOFFS+0xb8>)
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 fa51 	bl	800956c <trimFloat>
 80080ca:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 80080cc:	4927      	ldr	r1, [pc, #156]	@ (800816c <ADCOFFS+0xb4>)
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7f9 f804 	bl	80010dc <__aeabi_fcmpeq>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <ADCOFFS+0x2a>
 80080da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80080de:	81fb      	strh	r3, [r7, #14]
 80080e0:	e021      	b.n	8008126 <ADCOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7f8 f9b8 	bl	8000458 <__aeabi_f2d>
 80080e8:	f04f 0200 	mov.w	r2, #0
 80080ec:	4b21      	ldr	r3, [pc, #132]	@ (8008174 <ADCOFFS+0xbc>)
 80080ee:	f7f8 f855 	bl	800019c <__adddf3>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4610      	mov	r0, r2
 80080f8:	4619      	mov	r1, r3
 80080fa:	f04f 0200 	mov.w	r2, #0
 80080fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008178 <ADCOFFS+0xc0>)
 8008100:	f7f8 fb2c 	bl	800075c <__aeabi_ddiv>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4610      	mov	r0, r2
 800810a:	4619      	mov	r1, r3
 800810c:	f04f 0200 	mov.w	r2, #0
 8008110:	4b1a      	ldr	r3, [pc, #104]	@ (800817c <ADCOFFS+0xc4>)
 8008112:	f7f8 f9f9 	bl	8000508 <__aeabi_dmul>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4610      	mov	r0, r2
 800811c:	4619      	mov	r1, r3
 800811e:	f7f8 fccb 	bl	8000ab8 <__aeabi_d2uiz>
 8008122:	4603      	mov	r3, r0
 8008124:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<4); //none shifted=channel A	1 shifted=load
 8008126:	2310      	movs	r3, #16
 8008128:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 800812a:	89fb      	ldrh	r3, [r7, #14]
 800812c:	099b      	lsrs	r3, r3, #6
 800812e:	b29b      	uxth	r3, r3
 8008130:	b2db      	uxtb	r3, r3
 8008132:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8008134:	89fb      	ldrh	r3, [r7, #14]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	b2db      	uxtb	r3, r3
 800813a:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 800813c:	2200      	movs	r2, #0
 800813e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008142:	480f      	ldr	r0, [pc, #60]	@ (8008180 <ADCOFFS+0xc8>)
 8008144:	f7fb fe21 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8008148:	f107 0108 	add.w	r1, r7, #8
 800814c:	2364      	movs	r3, #100	@ 0x64
 800814e:	2203      	movs	r2, #3
 8008150:	480c      	ldr	r0, [pc, #48]	@ (8008184 <ADCOFFS+0xcc>)
 8008152:	f7fd f829 	bl	80051a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8008156:	2201      	movs	r2, #1
 8008158:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800815c:	4808      	ldr	r0, [pc, #32]	@ (8008180 <ADCOFFS+0xc8>)
 800815e:	f7fb fe14 	bl	8003d8a <HAL_GPIO_WritePin>
}
 8008162:	bf00      	nop
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	41480000 	.word	0x41480000
 8008170:	c1480000 	.word	0xc1480000
 8008174:	40290000 	.word	0x40290000
 8008178:	40390000 	.word	0x40390000
 800817c:	40d00000 	.word	0x40d00000
 8008180:	40011000 	.word	0x40011000
 8008184:	20000290 	.word	0x20000290

08008188 <RS485_Transmit>:

char TXbuff[RS485BUFFSIZE] = {0};
char RXbuff[RS485BUFFSIZE] = {0};

void RS485_Transmit(char *message)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	//strcat(message, "\r\n");

	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);	// Enable Driver
 8008190:	2201      	movs	r2, #1
 8008192:	2120      	movs	r1, #32
 8008194:	480a      	ldr	r0, [pc, #40]	@ (80081c0 <RS485_Transmit+0x38>)
 8008196:	f7fb fdf8 	bl	8003d8a <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, message, strlen(message), 100);	// Transmit
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7f7 fff0 	bl	8000180 <strlen>
 80081a0:	4603      	mov	r3, r0
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	2364      	movs	r3, #100	@ 0x64
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4806      	ldr	r0, [pc, #24]	@ (80081c4 <RS485_Transmit+0x3c>)
 80081aa:	f7fe f8fb 	bl	80063a4 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);	// Disable Driver
 80081ae:	2200      	movs	r2, #0
 80081b0:	2120      	movs	r1, #32
 80081b2:	4803      	ldr	r0, [pc, #12]	@ (80081c0 <RS485_Transmit+0x38>)
 80081b4:	f7fb fde9 	bl	8003d8a <HAL_GPIO_WritePin>
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	40010c00 	.word	0x40010c00
 80081c4:	20000330 	.word	0x20000330

080081c8 <SCPIC_SYS_APPLY>:
 */

#include "SCPI_Commands.h"

void SCPIC_SYS_APPLY(struct subword** subwords, int length)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d124      	bne.n	8008222 <SCPIC_SYS_APPLY+0x5a>
	if(subwords[0]->type != params) return;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d121      	bne.n	8008226 <SCPIC_SYS_APPLY+0x5e>
	Subword* subword = subwords[0];
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	60fb      	str	r3, [r7, #12]

	if(subword->paramType == INT_P)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	7a1b      	ldrb	r3, [r3, #8]
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d11b      	bne.n	8008228 <SCPIC_SYS_APPLY+0x60>
	{
		if(subword->integerParam)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d017      	beq.n	8008228 <SCPIC_SYS_APPLY+0x60>
		{
			HFDAC_SET_ALL(&HFDAC1);
 80081f8:	480d      	ldr	r0, [pc, #52]	@ (8008230 <SCPIC_SYS_APPLY+0x68>)
 80081fa:	f7ff fb8d 	bl	8007918 <HFDAC_SET_ALL>
			HFADC_SET_ALL(&HFADC1);
 80081fe:	480d      	ldr	r0, [pc, #52]	@ (8008234 <SCPIC_SYS_APPLY+0x6c>)
 8008200:	f7ff fad8 	bl	80077b4 <HFADC_SET_ALL>
			OSC_SET_ALL(&OSC1, &HFADC1);
 8008204:	490b      	ldr	r1, [pc, #44]	@ (8008234 <SCPIC_SYS_APPLY+0x6c>)
 8008206:	480c      	ldr	r0, [pc, #48]	@ (8008238 <SCPIC_SYS_APPLY+0x70>)
 8008208:	f7ff fd50 	bl	8007cac <OSC_SET_ALL>
			AWG_Load_Waveform(&AWG1, &HFDAC1);
 800820c:	4908      	ldr	r1, [pc, #32]	@ (8008230 <SCPIC_SYS_APPLY+0x68>)
 800820e:	480b      	ldr	r0, [pc, #44]	@ (800823c <SCPIC_SYS_APPLY+0x74>)
 8008210:	f7fe ff26 	bl	8007060 <AWG_Load_Waveform>

			strcpy(TXbuff, "OK");
 8008214:	4b0a      	ldr	r3, [pc, #40]	@ (8008240 <SCPIC_SYS_APPLY+0x78>)
 8008216:	4a0b      	ldr	r2, [pc, #44]	@ (8008244 <SCPIC_SYS_APPLY+0x7c>)
 8008218:	8811      	ldrh	r1, [r2, #0]
 800821a:	7892      	ldrb	r2, [r2, #2]
 800821c:	8019      	strh	r1, [r3, #0]
 800821e:	709a      	strb	r2, [r3, #2]
 8008220:	e002      	b.n	8008228 <SCPIC_SYS_APPLY+0x60>
	if(length != 1) return;
 8008222:	bf00      	nop
 8008224:	e000      	b.n	8008228 <SCPIC_SYS_APPLY+0x60>
	if(subwords[0]->type != params) return;
 8008226:	bf00      	nop
		}
	}
}
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	200003c4 	.word	0x200003c4
 8008234:	200003b8 	.word	0x200003b8
 8008238:	200003d4 	.word	0x200003d4
 800823c:	20000378 	.word	0x20000378
 8008240:	200003f0 	.word	0x200003f0
 8008244:	0800eee4 	.word	0x0800eee4

08008248 <SCPIC_SYS_RESET>:

void SCPIC_SYS_RESET(struct subword** subwords, int length)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d118      	bne.n	800828a <SCPIC_SYS_RESET+0x42>
		if(subwords[0]->type != params) return;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d115      	bne.n	800828e <SCPIC_SYS_RESET+0x46>
		Subword* subword = subwords[0];
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	60fb      	str	r3, [r7, #12]

		if(subword->paramType == INT_P)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	7a1b      	ldrb	r3, [r3, #8]
 800826c:	2b03      	cmp	r3, #3
 800826e:	d10f      	bne.n	8008290 <SCPIC_SYS_RESET+0x48>
		{
			if(subword->integerParam)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00b      	beq.n	8008290 <SCPIC_SYS_RESET+0x48>
			{
				strcpy(TXbuff, "OK");
 8008278:	4b07      	ldr	r3, [pc, #28]	@ (8008298 <SCPIC_SYS_RESET+0x50>)
 800827a:	4a08      	ldr	r2, [pc, #32]	@ (800829c <SCPIC_SYS_RESET+0x54>)
 800827c:	8811      	ldrh	r1, [r2, #0]
 800827e:	7892      	ldrb	r2, [r2, #2]
 8008280:	8019      	strh	r1, [r3, #0]
 8008282:	709a      	strb	r2, [r3, #2]
				HAL_NVIC_SystemReset();
 8008284:	f7fb fb23 	bl	80038ce <HAL_NVIC_SystemReset>
 8008288:	e002      	b.n	8008290 <SCPIC_SYS_RESET+0x48>
	if(length != 1) return;
 800828a:	bf00      	nop
 800828c:	e000      	b.n	8008290 <SCPIC_SYS_RESET+0x48>
		if(subwords[0]->type != params) return;
 800828e:	bf00      	nop
			}
		}
}
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	200003f0 	.word	0x200003f0
 800829c:	0800eee4 	.word	0x0800eee4

080082a0 <SCPIC_SYS_ID>:

void SCPIC_SYS_ID(struct subword** subwords, int length)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d111      	bne.n	80082d4 <SCPIC_SYS_ID+0x34>
	if(subwords[0]->type != params) return;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d10e      	bne.n	80082d8 <SCPIC_SYS_ID+0x38>
	Subword* subword = subwords[0];
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	60fb      	str	r3, [r7, #12]

	if(subword->paramType == EVAL_P)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	7a1b      	ldrb	r3, [r3, #8]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d108      	bne.n	80082da <SCPIC_SYS_ID+0x3a>
	{
		sprintf(TXbuff, "%x\r\n", DEVICE_ID);
 80082c8:	220f      	movs	r2, #15
 80082ca:	4905      	ldr	r1, [pc, #20]	@ (80082e0 <SCPIC_SYS_ID+0x40>)
 80082cc:	4805      	ldr	r0, [pc, #20]	@ (80082e4 <SCPIC_SYS_ID+0x44>)
 80082ce:	f003 f8b1 	bl	800b434 <siprintf>
 80082d2:	e002      	b.n	80082da <SCPIC_SYS_ID+0x3a>
	if(length != 1) return;
 80082d4:	bf00      	nop
 80082d6:	e000      	b.n	80082da <SCPIC_SYS_ID+0x3a>
	if(subwords[0]->type != params) return;
 80082d8:	bf00      	nop
	}
}
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	0800eee8 	.word	0x0800eee8
 80082e4:	200003f0 	.word	0x200003f0

080082e8 <SCPIC_OUT_MAXAMPLITUDE>:



void SCPIC_OUT_MAXAMPLITUDE(struct subword** subwords, int length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d128      	bne.n	800834a <SCPIC_OUT_MAXAMPLITUDE+0x62>
	if(subwords[0]->type != params) return;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d125      	bne.n	800834e <SCPIC_OUT_MAXAMPLITUDE+0x66>
	Subword* subword = subwords[0];
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]

	if(subword->paramType == FLOAT_P)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	7a1b      	ldrb	r3, [r3, #8]
 800830c:	2b04      	cmp	r3, #4
 800830e:	d11f      	bne.n	8008350 <SCPIC_OUT_MAXAMPLITUDE+0x68>
	{
		if(checkFloat(subword->floatParam, 20, 0))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	4618      	mov	r0, r3
 8008316:	f7f8 f89f 	bl	8000458 <__aeabi_f2d>
 800831a:	2300      	movs	r3, #0
 800831c:	2214      	movs	r2, #20
 800831e:	f001 f943 	bl	80095a8 <checkFloat>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00a      	beq.n	800833e <SCPIC_OUT_MAXAMPLITUDE+0x56>
		{
			HFDAC1.maxAmplitude = subword->floatParam;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	4a0a      	ldr	r2, [pc, #40]	@ (8008358 <SCPIC_OUT_MAXAMPLITUDE+0x70>)
 800832e:	6053      	str	r3, [r2, #4]
			strcpy(TXbuff, "OK");
 8008330:	4b0a      	ldr	r3, [pc, #40]	@ (800835c <SCPIC_OUT_MAXAMPLITUDE+0x74>)
 8008332:	4a0b      	ldr	r2, [pc, #44]	@ (8008360 <SCPIC_OUT_MAXAMPLITUDE+0x78>)
 8008334:	8811      	ldrh	r1, [r2, #0]
 8008336:	7892      	ldrb	r2, [r2, #2]
 8008338:	8019      	strh	r1, [r3, #0]
 800833a:	709a      	strb	r2, [r3, #2]
 800833c:	e008      	b.n	8008350 <SCPIC_OUT_MAXAMPLITUDE+0x68>
		}
		else strcpy(TXbuff, "ERR:VAL");
 800833e:	4a07      	ldr	r2, [pc, #28]	@ (800835c <SCPIC_OUT_MAXAMPLITUDE+0x74>)
 8008340:	4b08      	ldr	r3, [pc, #32]	@ (8008364 <SCPIC_OUT_MAXAMPLITUDE+0x7c>)
 8008342:	cb03      	ldmia	r3!, {r0, r1}
 8008344:	6010      	str	r0, [r2, #0]
 8008346:	6051      	str	r1, [r2, #4]
 8008348:	e002      	b.n	8008350 <SCPIC_OUT_MAXAMPLITUDE+0x68>
	if(length != 1) return;
 800834a:	bf00      	nop
 800834c:	e000      	b.n	8008350 <SCPIC_OUT_MAXAMPLITUDE+0x68>
	if(subwords[0]->type != params) return;
 800834e:	bf00      	nop
	}
}
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200003c4 	.word	0x200003c4
 800835c:	200003f0 	.word	0x200003f0
 8008360:	0800eee4 	.word	0x0800eee4
 8008364:	0800eef0 	.word	0x0800eef0

08008368 <SCPIC_OUT_MODE>:

void SCPIC_OUT_MODE(struct subword** subwords, int length)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d148      	bne.n	800840a <SCPIC_OUT_MODE+0xa2>
	if(subwords[0]->type != params) return;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d145      	bne.n	800840e <SCPIC_OUT_MODE+0xa6>
	Subword* subword = subwords[0];
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60fb      	str	r3, [r7, #12]

	switch(subword->paramType)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	7a1b      	ldrb	r3, [r3, #8]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d002      	beq.n	8008396 <SCPIC_OUT_MODE+0x2e>
 8008390:	2b05      	cmp	r3, #5
 8008392:	d014      	beq.n	80083be <SCPIC_OUT_MODE+0x56>
 8008394:	e03e      	b.n	8008414 <SCPIC_OUT_MODE+0xac>
	{
		case EVAL_P:
			switch(HFDAC1.mode)
 8008396:	4b21      	ldr	r3, [pc, #132]	@ (800841c <SCPIC_OUT_MODE+0xb4>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <SCPIC_OUT_MODE+0x3c>
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d006      	beq.n	80083b0 <SCPIC_OUT_MODE+0x48>
			{
				case Voltage_output: strcpy(TXbuff, "VOLTAGE"); break;
				case Current_output: strcpy(TXbuff, "CURRENT"); break;
			}
		break;
 80083a2:	e037      	b.n	8008414 <SCPIC_OUT_MODE+0xac>
				case Voltage_output: strcpy(TXbuff, "VOLTAGE"); break;
 80083a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008420 <SCPIC_OUT_MODE+0xb8>)
 80083a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008424 <SCPIC_OUT_MODE+0xbc>)
 80083a8:	cb03      	ldmia	r3!, {r0, r1}
 80083aa:	6010      	str	r0, [r2, #0]
 80083ac:	6051      	str	r1, [r2, #4]
 80083ae:	e005      	b.n	80083bc <SCPIC_OUT_MODE+0x54>
				case Current_output: strcpy(TXbuff, "CURRENT"); break;
 80083b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008420 <SCPIC_OUT_MODE+0xb8>)
 80083b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008428 <SCPIC_OUT_MODE+0xc0>)
 80083b4:	cb03      	ldmia	r3!, {r0, r1}
 80083b6:	6010      	str	r0, [r2, #0]
 80083b8:	6051      	str	r1, [r2, #4]
 80083ba:	bf00      	nop
		break;
 80083bc:	e02a      	b.n	8008414 <SCPIC_OUT_MODE+0xac>

		case OTHER_P:
			if(!strcmp(subword->otherParam, "VOLTAGE"))
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	4918      	ldr	r1, [pc, #96]	@ (8008424 <SCPIC_OUT_MODE+0xbc>)
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7f7 fed1 	bl	800016c <strcmp>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d109      	bne.n	80083e4 <SCPIC_OUT_MODE+0x7c>
			{
				HFDAC1.mode = Voltage_output;
 80083d0:	4b12      	ldr	r3, [pc, #72]	@ (800841c <SCPIC_OUT_MODE+0xb4>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	701a      	strb	r2, [r3, #0]
				strcpy(TXbuff, "OK");
 80083d6:	4b12      	ldr	r3, [pc, #72]	@ (8008420 <SCPIC_OUT_MODE+0xb8>)
 80083d8:	4a14      	ldr	r2, [pc, #80]	@ (800842c <SCPIC_OUT_MODE+0xc4>)
 80083da:	8811      	ldrh	r1, [r2, #0]
 80083dc:	7892      	ldrb	r2, [r2, #2]
 80083de:	8019      	strh	r1, [r3, #0]
 80083e0:	709a      	strb	r2, [r3, #2]
			else if(!strcmp(subword->otherParam, "CURRENT"))
			{
				HFDAC1.mode = Current_output;
				strcpy(TXbuff, "OK");
			}
		break;
 80083e2:	e016      	b.n	8008412 <SCPIC_OUT_MODE+0xaa>
			else if(!strcmp(subword->otherParam, "CURRENT"))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	490f      	ldr	r1, [pc, #60]	@ (8008428 <SCPIC_OUT_MODE+0xc0>)
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7f7 febe 	bl	800016c <strcmp>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10d      	bne.n	8008412 <SCPIC_OUT_MODE+0xaa>
				HFDAC1.mode = Current_output;
 80083f6:	4b09      	ldr	r3, [pc, #36]	@ (800841c <SCPIC_OUT_MODE+0xb4>)
 80083f8:	2201      	movs	r2, #1
 80083fa:	701a      	strb	r2, [r3, #0]
				strcpy(TXbuff, "OK");
 80083fc:	4b08      	ldr	r3, [pc, #32]	@ (8008420 <SCPIC_OUT_MODE+0xb8>)
 80083fe:	4a0b      	ldr	r2, [pc, #44]	@ (800842c <SCPIC_OUT_MODE+0xc4>)
 8008400:	8811      	ldrh	r1, [r2, #0]
 8008402:	7892      	ldrb	r2, [r2, #2]
 8008404:	8019      	strh	r1, [r3, #0]
 8008406:	709a      	strb	r2, [r3, #2]
		break;
 8008408:	e003      	b.n	8008412 <SCPIC_OUT_MODE+0xaa>
	if(length != 1) return;
 800840a:	bf00      	nop
 800840c:	e002      	b.n	8008414 <SCPIC_OUT_MODE+0xac>
	if(subwords[0]->type != params) return;
 800840e:	bf00      	nop
 8008410:	e000      	b.n	8008414 <SCPIC_OUT_MODE+0xac>
		break;
 8008412:	bf00      	nop
	}

}
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	200003c4 	.word	0x200003c4
 8008420:	200003f0 	.word	0x200003f0
 8008424:	0800eef8 	.word	0x0800eef8
 8008428:	0800ef00 	.word	0x0800ef00
 800842c:	0800eee4 	.word	0x0800eee4

08008430 <SCPIC_DVM_RAW>:



void SCPIC_DVM_RAW(struct subword** subwords, int length)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d118      	bne.n	8008472 <SCPIC_DVM_RAW+0x42>
	if(subwords[0]->type != params) return;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d115      	bne.n	8008476 <SCPIC_DVM_RAW+0x46>
	Subword* subword = subwords[0];
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60fb      	str	r3, [r7, #12]

	if(subword->paramType == EVAL_P)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	7a1b      	ldrb	r3, [r3, #8]
 8008454:	2b02      	cmp	r3, #2
 8008456:	d10f      	bne.n	8008478 <SCPIC_DVM_RAW+0x48>
	{
		int16_t DVM = DVM_GET_FILTERED_DATA_RAW(100);
 8008458:	2064      	movs	r0, #100	@ 0x64
 800845a:	f7ff f89f 	bl	800759c <DVM_GET_FILTERED_DATA_RAW>
 800845e:	4603      	mov	r3, r0
 8008460:	817b      	strh	r3, [r7, #10]
		sprintf(TXbuff, "%d\r\n", DVM);
 8008462:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008466:	461a      	mov	r2, r3
 8008468:	4905      	ldr	r1, [pc, #20]	@ (8008480 <SCPIC_DVM_RAW+0x50>)
 800846a:	4806      	ldr	r0, [pc, #24]	@ (8008484 <SCPIC_DVM_RAW+0x54>)
 800846c:	f002 ffe2 	bl	800b434 <siprintf>
 8008470:	e002      	b.n	8008478 <SCPIC_DVM_RAW+0x48>
	if(length != 1) return;
 8008472:	bf00      	nop
 8008474:	e000      	b.n	8008478 <SCPIC_DVM_RAW+0x48>
	if(subwords[0]->type != params) return;
 8008476:	bf00      	nop
	}
}
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	0800ef08 	.word	0x0800ef08
 8008484:	200003f0 	.word	0x200003f0

08008488 <SCPIC_DVM_VAL>:

void SCPIC_DVM_VAL(struct subword** subwords, int length)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af02      	add	r7, sp, #8
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d129      	bne.n	80084ec <SCPIC_DVM_VAL+0x64>
	if(subwords[0]->type != params) return;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d126      	bne.n	80084f0 <SCPIC_DVM_VAL+0x68>
	Subword* subword = subwords[0];
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	613b      	str	r3, [r7, #16]

	if(subword->paramType == EVAL_P)
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	7a1b      	ldrb	r3, [r3, #8]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d120      	bne.n	80084f2 <SCPIC_DVM_VAL+0x6a>
	{
		char unit = 'V';
 80084b0:	2356      	movs	r3, #86	@ 0x56
 80084b2:	75fb      	strb	r3, [r7, #23]
		float DVM = HFADC_CONVERT_RAW2VALUE(&HFADC1, DVM_GET_FILTERED_DATA_RAW(100));
 80084b4:	2064      	movs	r0, #100	@ 0x64
 80084b6:	f7ff f871 	bl	800759c <DVM_GET_FILTERED_DATA_RAW>
 80084ba:	4603      	mov	r3, r0
 80084bc:	b29b      	uxth	r3, r3
 80084be:	4619      	mov	r1, r3
 80084c0:	480d      	ldr	r0, [pc, #52]	@ (80084f8 <SCPIC_DVM_VAL+0x70>)
 80084c2:	f7ff f8a5 	bl	8007610 <HFADC_CONVERT_RAW2VALUE>
 80084c6:	60f8      	str	r0, [r7, #12]
		if(HFADC1.mode == Current_input) unit = 'A';
 80084c8:	4b0b      	ldr	r3, [pc, #44]	@ (80084f8 <SCPIC_DVM_VAL+0x70>)
 80084ca:	785b      	ldrb	r3, [r3, #1]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d101      	bne.n	80084d4 <SCPIC_DVM_VAL+0x4c>
 80084d0:	2341      	movs	r3, #65	@ 0x41
 80084d2:	75fb      	strb	r3, [r7, #23]
		sprintf(TXbuff, "%f%c\r\n", DVM, unit);
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f7f7 ffbf 	bl	8000458 <__aeabi_f2d>
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	7df9      	ldrb	r1, [r7, #23]
 80084e0:	9100      	str	r1, [sp, #0]
 80084e2:	4906      	ldr	r1, [pc, #24]	@ (80084fc <SCPIC_DVM_VAL+0x74>)
 80084e4:	4806      	ldr	r0, [pc, #24]	@ (8008500 <SCPIC_DVM_VAL+0x78>)
 80084e6:	f002 ffa5 	bl	800b434 <siprintf>
 80084ea:	e002      	b.n	80084f2 <SCPIC_DVM_VAL+0x6a>
	if(length != 1) return;
 80084ec:	bf00      	nop
 80084ee:	e000      	b.n	80084f2 <SCPIC_DVM_VAL+0x6a>
	if(subwords[0]->type != params) return;
 80084f0:	bf00      	nop
	}
}
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	200003b8 	.word	0x200003b8
 80084fc:	0800ef10 	.word	0x0800ef10
 8008500:	200003f0 	.word	0x200003f0

08008504 <SCPIC_INIT>:


void SCPIC_INIT(struct subword** subwords, int length)
{
 8008504:	b5b0      	push	{r4, r5, r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d16d      	bne.n	80085f0 <SCPIC_INIT+0xec>
	if(subwords[0]->type != params) return;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d16a      	bne.n	80085f4 <SCPIC_INIT+0xf0>
	Subword* subword = subwords[0];
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60fb      	str	r3, [r7, #12]

	switch(subword->paramType)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	7a1b      	ldrb	r3, [r3, #8]
 8008528:	2b02      	cmp	r3, #2
 800852a:	d002      	beq.n	8008532 <SCPIC_INIT+0x2e>
 800852c:	2b05      	cmp	r3, #5
 800852e:	d023      	beq.n	8008578 <SCPIC_INIT+0x74>
 8008530:	e061      	b.n	80085f6 <SCPIC_INIT+0xf2>
	{
		case EVAL_P:
			switch(LOLA1.Status)
 8008532:	4b32      	ldr	r3, [pc, #200]	@ (80085fc <SCPIC_INIT+0xf8>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d002      	beq.n	8008540 <SCPIC_INIT+0x3c>
 800853a:	2b02      	cmp	r3, #2
 800853c:	d00c      	beq.n	8008558 <SCPIC_INIT+0x54>
 800853e:	e012      	b.n	8008566 <SCPIC_INIT+0x62>
			{
				case INVALID_FIRMWARE: strcpy(TXbuff, "INVALID FIRMWARE"); break;
 8008540:	4a2f      	ldr	r2, [pc, #188]	@ (8008600 <SCPIC_INIT+0xfc>)
 8008542:	4b30      	ldr	r3, [pc, #192]	@ (8008604 <SCPIC_INIT+0x100>)
 8008544:	4615      	mov	r5, r2
 8008546:	461c      	mov	r4, r3
 8008548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800854a:	6028      	str	r0, [r5, #0]
 800854c:	6069      	str	r1, [r5, #4]
 800854e:	60aa      	str	r2, [r5, #8]
 8008550:	60eb      	str	r3, [r5, #12]
 8008552:	7823      	ldrb	r3, [r4, #0]
 8008554:	742b      	strb	r3, [r5, #16]
 8008556:	e00e      	b.n	8008576 <SCPIC_INIT+0x72>
				case FIRMWARE_OK: strcpy(TXbuff, "OK"); break;
 8008558:	4b29      	ldr	r3, [pc, #164]	@ (8008600 <SCPIC_INIT+0xfc>)
 800855a:	4a2b      	ldr	r2, [pc, #172]	@ (8008608 <SCPIC_INIT+0x104>)
 800855c:	8811      	ldrh	r1, [r2, #0]
 800855e:	7892      	ldrb	r2, [r2, #2]
 8008560:	8019      	strh	r1, [r3, #0]
 8008562:	709a      	strb	r2, [r3, #2]
 8008564:	e007      	b.n	8008576 <SCPIC_INIT+0x72>
				default: strcpy(TXbuff, "NO FIRMWARE"); break;
 8008566:	4a26      	ldr	r2, [pc, #152]	@ (8008600 <SCPIC_INIT+0xfc>)
 8008568:	4b28      	ldr	r3, [pc, #160]	@ (800860c <SCPIC_INIT+0x108>)
 800856a:	4614      	mov	r4, r2
 800856c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800856e:	6020      	str	r0, [r4, #0]
 8008570:	6061      	str	r1, [r4, #4]
 8008572:	60a2      	str	r2, [r4, #8]
 8008574:	bf00      	nop
			}
		break;
 8008576:	e03e      	b.n	80085f6 <SCPIC_INIT+0xf2>

		case OTHER_P:
			if(!strcmp(subword->otherParam, "JTAG"))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	4924      	ldr	r1, [pc, #144]	@ (8008610 <SCPIC_INIT+0x10c>)
 800857e:	4618      	mov	r0, r3
 8008580:	f7f7 fdf4 	bl	800016c <strcmp>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d114      	bne.n	80085b4 <SCPIC_INIT+0xb0>
			{
				LOLA1.Config = JTAG;
 800858a:	4b1c      	ldr	r3, [pc, #112]	@ (80085fc <SCPIC_INIT+0xf8>)
 800858c:	2206      	movs	r2, #6
 800858e:	705a      	strb	r2, [r3, #1]
				if(Task_add(Task_LOLA_INIT, PRIORITY_URGENT, 10000, 20)) strcpy(TXbuff, "OK");
 8008590:	2314      	movs	r3, #20
 8008592:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008596:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800859a:	481e      	ldr	r0, [pc, #120]	@ (8008614 <SCPIC_INIT+0x110>)
 800859c:	f000 fb8c 	bl	8008cb8 <Task_add>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d027      	beq.n	80085f6 <SCPIC_INIT+0xf2>
 80085a6:	4b16      	ldr	r3, [pc, #88]	@ (8008600 <SCPIC_INIT+0xfc>)
 80085a8:	4a17      	ldr	r2, [pc, #92]	@ (8008608 <SCPIC_INIT+0x104>)
 80085aa:	8811      	ldrh	r1, [r2, #0]
 80085ac:	7892      	ldrb	r2, [r2, #2]
 80085ae:	8019      	strh	r1, [r3, #0]
 80085b0:	709a      	strb	r2, [r3, #2]
 80085b2:	e020      	b.n	80085f6 <SCPIC_INIT+0xf2>
			}
			else if(!strcmp(subword->otherParam, "FLASH"))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	4917      	ldr	r1, [pc, #92]	@ (8008618 <SCPIC_INIT+0x114>)
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7f7 fdd6 	bl	800016c <strcmp>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d117      	bne.n	80085f6 <SCPIC_INIT+0xf2>
			{
				LOLA1.Config = SPI_FLASH;
 80085c6:	4b0d      	ldr	r3, [pc, #52]	@ (80085fc <SCPIC_INIT+0xf8>)
 80085c8:	2201      	movs	r2, #1
 80085ca:	705a      	strb	r2, [r3, #1]
				if(Task_add(Task_LOLA_INIT, PRIORITY_URGENT, 10000, 20)) strcpy(TXbuff, "OK");
 80085cc:	2314      	movs	r3, #20
 80085ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80085d2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80085d6:	480f      	ldr	r0, [pc, #60]	@ (8008614 <SCPIC_INIT+0x110>)
 80085d8:	f000 fb6e 	bl	8008cb8 <Task_add>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d009      	beq.n	80085f6 <SCPIC_INIT+0xf2>
 80085e2:	4b07      	ldr	r3, [pc, #28]	@ (8008600 <SCPIC_INIT+0xfc>)
 80085e4:	4a08      	ldr	r2, [pc, #32]	@ (8008608 <SCPIC_INIT+0x104>)
 80085e6:	8811      	ldrh	r1, [r2, #0]
 80085e8:	7892      	ldrb	r2, [r2, #2]
 80085ea:	8019      	strh	r1, [r3, #0]
 80085ec:	709a      	strb	r2, [r3, #2]
 80085ee:	e002      	b.n	80085f6 <SCPIC_INIT+0xf2>
	if(length != 1) return;
 80085f0:	bf00      	nop
 80085f2:	e000      	b.n	80085f6 <SCPIC_INIT+0xf2>
	if(subwords[0]->type != params) return;
 80085f4:	bf00      	nop
			}
	}

}
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bdb0      	pop	{r4, r5, r7, pc}
 80085fc:	200003b0 	.word	0x200003b0
 8008600:	200003f0 	.word	0x200003f0
 8008604:	0800ef18 	.word	0x0800ef18
 8008608:	0800eee4 	.word	0x0800eee4
 800860c:	0800ef2c 	.word	0x0800ef2c
 8008610:	0800ef38 	.word	0x0800ef38
 8008614:	080094f1 	.word	0x080094f1
 8008618:	0800ef40 	.word	0x0800ef40

0800861c <SCPIC_FID>:

void SCPIC_FID(struct subword** subwords, int length)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d11c      	bne.n	8008666 <SCPIC_FID+0x4a>
	if(subwords[0]->type != params) return;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d119      	bne.n	800866a <SCPIC_FID+0x4e>
	Subword* subword = subwords[0];
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]
	strcpy(TXbuff,"OK\r\n");
 800863c:	4b0d      	ldr	r3, [pc, #52]	@ (8008674 <SCPIC_FID+0x58>)
 800863e:	4a0e      	ldr	r2, [pc, #56]	@ (8008678 <SCPIC_FID+0x5c>)
 8008640:	6810      	ldr	r0, [r2, #0]
 8008642:	6018      	str	r0, [r3, #0]
 8008644:	7912      	ldrb	r2, [r2, #4]
 8008646:	711a      	strb	r2, [r3, #4]

	if(subword->paramType == EVAL_P)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	7a1b      	ldrb	r3, [r3, #8]
 800864c:	2b02      	cmp	r3, #2
 800864e:	d10d      	bne.n	800866c <SCPIC_FID+0x50>
	{
		uint16_t id = LOLA_GET_FIRMWAREID();
 8008650:	f7ff faee 	bl	8007c30 <LOLA_GET_FIRMWAREID>
 8008654:	4603      	mov	r3, r0
 8008656:	817b      	strh	r3, [r7, #10]
		sprintf(TXbuff, "%x\r\n", id);
 8008658:	897b      	ldrh	r3, [r7, #10]
 800865a:	461a      	mov	r2, r3
 800865c:	4907      	ldr	r1, [pc, #28]	@ (800867c <SCPIC_FID+0x60>)
 800865e:	4805      	ldr	r0, [pc, #20]	@ (8008674 <SCPIC_FID+0x58>)
 8008660:	f002 fee8 	bl	800b434 <siprintf>
 8008664:	e002      	b.n	800866c <SCPIC_FID+0x50>
	if(length != 1) return;
 8008666:	bf00      	nop
 8008668:	e000      	b.n	800866c <SCPIC_FID+0x50>
	if(subwords[0]->type != params) return;
 800866a:	bf00      	nop

		default:

			break;
	}*/
}
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	200003f0 	.word	0x200003f0
 8008678:	0800ef48 	.word	0x0800ef48
 800867c:	0800eee8 	.word	0x0800eee8

08008680 <SCPI_EXECUTE>:

#include "SCPI_Lib.h"
#include "RS485.h"

void SCPI_EXECUTE()
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
	char* formatedMessage = ReformatString(RXbuff, RS485BUFFSIZE); //tady je změna
 8008686:	217d      	movs	r1, #125	@ 0x7d
 8008688:	482e      	ldr	r0, [pc, #184]	@ (8008744 <SCPI_EXECUTE+0xc4>)
 800868a:	f000 f861 	bl	8008750 <ReformatString>
 800868e:	60b8      	str	r0, [r7, #8]

		strcpy(TXbuff, "ERR\r\n");
 8008690:	4b2d      	ldr	r3, [pc, #180]	@ (8008748 <SCPI_EXECUTE+0xc8>)
 8008692:	4a2e      	ldr	r2, [pc, #184]	@ (800874c <SCPI_EXECUTE+0xcc>)
 8008694:	6810      	ldr	r0, [r2, #0]
 8008696:	6018      	str	r0, [r3, #0]
 8008698:	8892      	ldrh	r2, [r2, #4]
 800869a:	809a      	strh	r2, [r3, #4]

		Word* word = generateWordDirect(formatedMessage);
 800869c:	68b8      	ldr	r0, [r7, #8]
 800869e:	f000 f96b 	bl	8008978 <generateWordDirect>
 80086a2:	6078      	str	r0, [r7, #4]

		free(formatedMessage);
 80086a4:	68b8      	ldr	r0, [r7, #8]
 80086a6:	f000 ffc5 	bl	8009634 <free>

		//if(word->address == RackID || word->address == 1)
		if (word != NULL) {
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d045      	beq.n	800873c <SCPI_EXECUTE+0xbc>
			executeWord(word);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fa43 	bl	8008b3c <executeWord>

			for (int i = word->subwordsCount - 1; i >= 0; i--)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	e02f      	b.n	8008720 <SCPI_EXECUTE+0xa0>
			{
				if (word->subwords[i]->paramType == OTHER_P && word->subwords[i]->otherParam != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	7a1b      	ldrb	r3, [r3, #8]
 80086ce:	2b05      	cmp	r3, #5
 80086d0:	d11a      	bne.n	8008708 <SCPI_EXECUTE+0x88>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689a      	ldr	r2, [r3, #8]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d011      	beq.n	8008708 <SCPI_EXECUTE+0x88>
				{
					free(word->subwords[i]->otherParam);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 ff9e 	bl	8009634 <free>
					word->subwords[i]->otherParam = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2200      	movs	r2, #0
 8008706:	615a      	str	r2, [r3, #20]
				}
				free(word->subwords[i]);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 ff8d 	bl	8009634 <free>
			for (int i = word->subwordsCount - 1; i >= 0; i--)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3b01      	subs	r3, #1
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	dacc      	bge.n	80086c0 <SCPI_EXECUTE+0x40>
			}
			free(word->subwords);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 ff82 	bl	8009634 <free>
			word->subwords = NULL;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	609a      	str	r2, [r3, #8]
			free(word);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 ff7c 	bl	8009634 <free>
		}
}
 800873c:	bf00      	nop
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20000470 	.word	0x20000470
 8008748:	200003f0 	.word	0x200003f0
 800874c:	0800efd8 	.word	0x0800efd8

08008750 <ReformatString>:
//int defaultClassIndex;
int classLength = 0;
int defaultClassIndex = -1;

char* ReformatString(char* chararr, int arrMaxSize)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
	char* temp = (char*)calloc(strlen(chararr) + 1, sizeof(char));
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7f7 fd10 	bl	8000180 <strlen>
 8008760:	4603      	mov	r3, r0
 8008762:	3301      	adds	r3, #1
 8008764:	2101      	movs	r1, #1
 8008766:	4618      	mov	r0, r3
 8008768:	f000 ff40 	bl	80095ec <calloc>
 800876c:	4603      	mov	r3, r0
 800876e:	60bb      	str	r3, [r7, #8]
	strcpy(temp, chararr);
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	68b8      	ldr	r0, [r7, #8]
 8008774:	f003 fa01 	bl	800bb7a <strcpy>
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	e015      	b.n	80087aa <ReformatString+0x5a>
	{
		if (chararr[i] == '\r' || chararr[i] == '\n')
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	4413      	add	r3, r2
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b0d      	cmp	r3, #13
 8008788:	d005      	beq.n	8008796 <ReformatString+0x46>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	4413      	add	r3, r2
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b0a      	cmp	r3, #10
 8008794:	d106      	bne.n	80087a4 <ReformatString+0x54>
		{
			temp[i] = '\0';
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	4413      	add	r3, r2
 800879c:	2200      	movs	r2, #0
 800879e:	701a      	strb	r2, [r3, #0]
			return temp;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	e00d      	b.n	80087c0 <ReformatString+0x70>
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	da05      	bge.n	80087be <ReformatString+0x6e>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	4413      	add	r3, r2
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1df      	bne.n	800877e <ReformatString+0x2e>
		}
	}
	return temp;
 80087be:	68bb      	ldr	r3, [r7, #8]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <generateSubwordn>:

Subword* generateSubwordn(char* subcommand, int length, Class* class)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	@ 0x28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
	Subword* final = (Subword*)malloc(sizeof(Subword));
 80087d4:	2018      	movs	r0, #24
 80087d6:	f000 ff25 	bl	8009624 <malloc>
 80087da:	4603      	mov	r3, r0
 80087dc:	61fb      	str	r3, [r7, #28]
	final->type = params;
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	2201      	movs	r2, #1
 80087e2:	701a      	strb	r2, [r3, #0]
	final->integerParam = 0;
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	2200      	movs	r2, #0
 80087e8:	611a      	str	r2, [r3, #16]
	final->otherParam = NULL;
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	2200      	movs	r2, #0
 80087ee:	615a      	str	r2, [r3, #20]
	final->paramType = 0;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	2200      	movs	r2, #0
 80087f4:	721a      	strb	r2, [r3, #8]

	for (int i = 0; i < class->functionsLength; i++)
 80087f6:	2300      	movs	r3, #0
 80087f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80087fa:	e018      	b.n	800882e <generateSubwordn+0x66>
	{
		if (!strncmp(subcommand, class->functions[i].name, length))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	4413      	add	r3, r2
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	4619      	mov	r1, r3
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f003 f905 	bl	800ba1c <strncmp>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d107      	bne.n	8008828 <generateSubwordn+0x60>
		{
			final->type = function;
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
			final->functionIndex = i;
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008822:	605a      	str	r2, [r3, #4]
			return final;
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	e06e      	b.n	8008906 <generateSubwordn+0x13e>
	for (int i = 0; i < class->functionsLength; i++)
 8008828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882a:	3301      	adds	r3, #1
 800882c:	627b      	str	r3, [r7, #36]	@ 0x24
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008834:	429a      	cmp	r2, r3
 8008836:	dbe1      	blt.n	80087fc <generateSubwordn+0x34>
		}
	}

	for (int i = 0; i < paramsLength; i++)
 8008838:	2300      	movs	r3, #0
 800883a:	623b      	str	r3, [r7, #32]
 800883c:	e014      	b.n	8008868 <generateSubwordn+0xa0>
	{
		if (!strncmp(subcommand, paramsList[i], length))
 800883e:	4a34      	ldr	r2, [pc, #208]	@ (8008910 <generateSubwordn+0x148>)
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	4619      	mov	r1, r3
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f003 f8e6 	bl	800ba1c <strncmp>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d105      	bne.n	8008862 <generateSubwordn+0x9a>
		{
			final->paramType = (ParamTypes)i;
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	b2da      	uxtb	r2, r3
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	721a      	strb	r2, [r3, #8]
			return final;
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	e051      	b.n	8008906 <generateSubwordn+0x13e>
	for (int i = 0; i < paramsLength; i++)
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	3301      	adds	r3, #1
 8008866:	623b      	str	r3, [r7, #32]
 8008868:	4b2a      	ldr	r3, [pc, #168]	@ (8008914 <generateSubwordn+0x14c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6a3a      	ldr	r2, [r7, #32]
 800886e:	429a      	cmp	r2, r3
 8008870:	dbe5      	blt.n	800883e <generateSubwordn+0x76>
		}
	}

	float f;
	if (strchr(subcommand, '.'))
 8008872:	212e      	movs	r1, #46	@ 0x2e
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f002 fedd 	bl	800b634 <strchr>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01a      	beq.n	80088b6 <generateSubwordn+0xee>
	{
		if ((f = atof(subcommand)) != 0)
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 feac 	bl	80095de <atof>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4610      	mov	r0, r2
 800888c:	4619      	mov	r1, r3
 800888e:	f7f8 f933 	bl	8000af8 <__aeabi_d2f>
 8008892:	4603      	mov	r3, r0
 8008894:	61bb      	str	r3, [r7, #24]
 8008896:	f04f 0100 	mov.w	r1, #0
 800889a:	69b8      	ldr	r0, [r7, #24]
 800889c:	f7f8 fc1e 	bl	80010dc <__aeabi_fcmpeq>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d107      	bne.n	80088b6 <generateSubwordn+0xee>
		{
			final->paramType = FLOAT_P;
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	2204      	movs	r2, #4
 80088aa:	721a      	strb	r2, [r3, #8]
			final->floatParam = f;
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	60da      	str	r2, [r3, #12]
			return final;
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	e027      	b.n	8008906 <generateSubwordn+0x13e>
		}
	}

	int n;
	if ((n = atoi(subcommand)))
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 fe94 	bl	80095e4 <atoi>
 80088bc:	6178      	str	r0, [r7, #20]
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d007      	beq.n	80088d4 <generateSubwordn+0x10c>
	{
		final->paramType = INT_P;
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	2203      	movs	r2, #3
 80088c8:	721a      	strb	r2, [r3, #8]
		final->integerParam = n;
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	611a      	str	r2, [r3, #16]
		return final;
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	e018      	b.n	8008906 <generateSubwordn+0x13e>
	}

	final->paramType = OTHER_P;
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	2205      	movs	r2, #5
 80088d8:	721a      	strb	r2, [r3, #8]
	final->otherParam = (char*)calloc(length + 1, sizeof(char));
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	3301      	adds	r3, #1
 80088de:	2101      	movs	r1, #1
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fe83 	bl	80095ec <calloc>
 80088e6:	4603      	mov	r3, r0
 80088e8:	461a      	mov	r2, r3
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	615a      	str	r2, [r3, #20]
	if (final->otherParam != NULL) strncpy(final->otherParam, subcommand, length);
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d006      	beq.n	8008904 <generateSubwordn+0x13c>
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	68f9      	ldr	r1, [r7, #12]
 80088fe:	4618      	mov	r0, r3
 8008900:	f003 f89e 	bl	800ba40 <strncpy>
	return final;
 8008904:	69fb      	ldr	r3, [r7, #28]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3728      	adds	r7, #40	@ 0x28
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	2000000c 	.word	0x2000000c
 8008914:	20000018 	.word	0x20000018

08008918 <findClassIndex>:

int findClassIndex(char* subcommand, int length)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < classLength; i++)
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	e015      	b.n	8008954 <findClassIndex+0x3c>
	{
		if (!strncmp(subcommand, classList[i].name, length))
 8008928:	4b10      	ldr	r3, [pc, #64]	@ (800896c <findClassIndex+0x54>)
 800892a:	6819      	ldr	r1, [r3, #0]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	4613      	mov	r3, r2
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f003 f86c 	bl	800ba1c <strncmp>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <findClassIndex+0x36>
		{
			return i;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	e009      	b.n	8008962 <findClassIndex+0x4a>
	for (int i = 0; i < classLength; i++)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3301      	adds	r3, #1
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	4b06      	ldr	r3, [pc, #24]	@ (8008970 <findClassIndex+0x58>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	429a      	cmp	r2, r3
 800895c:	dbe4      	blt.n	8008928 <findClassIndex+0x10>
		}
	}

	return defaultClassIndex;
 800895e:	4b05      	ldr	r3, [pc, #20]	@ (8008974 <findClassIndex+0x5c>)
 8008960:	681b      	ldr	r3, [r3, #0]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	200004f0 	.word	0x200004f0
 8008970:	200004f4 	.word	0x200004f4
 8008974:	2000001c 	.word	0x2000001c

08008978 <generateWordDirect>:

Word* generateWordDirect(char* command)
{
 8008978:	b590      	push	{r4, r7, lr}
 800897a:	b08d      	sub	sp, #52	@ 0x34
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	Word* final = (Word*)malloc(sizeof(Word));
 8008980:	2010      	movs	r0, #16
 8008982:	f000 fe4f 	bl	8009624 <malloc>
 8008986:	4603      	mov	r3, r0
 8008988:	61bb      	str	r3, [r7, #24]
	final->address = -1;
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	f04f 32ff 	mov.w	r2, #4294967295
 8008990:	601a      	str	r2, [r3, #0]
	final->subwords = NULL;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	2200      	movs	r2, #0
 8008996:	609a      	str	r2, [r3, #8]
	final->subwordsCount = 0;
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	2200      	movs	r2, #0
 800899c:	60da      	str	r2, [r3, #12]

	char* currSymbol = command;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int intermediateLength = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	Class* currentClass = classList;
 80089a6:	4b62      	ldr	r3, [pc, #392]	@ (8008b30 <generateWordDirect+0x1b8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
	int currentClassIndex = defaultClassIndex;
 80089ac:	4b61      	ldr	r3, [pc, #388]	@ (8008b34 <generateWordDirect+0x1bc>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	617b      	str	r3, [r7, #20]

	int isLast = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	623b      	str	r3, [r7, #32]
	int firstSubWord = 1;
 80089b6:	2301      	movs	r3, #1
 80089b8:	61fb      	str	r3, [r7, #28]

	while (!isLast)
 80089ba:	e0af      	b.n	8008b1c <generateWordDirect+0x1a4>
	{
		isLast = *currSymbol == '\0';
 80089bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	bf0c      	ite	eq
 80089c4:	2301      	moveq	r3, #1
 80089c6:	2300      	movne	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	623b      	str	r3, [r7, #32]
		switch (*currSymbol)
 80089cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80089d2:	d005      	beq.n	80089e0 <generateWordDirect+0x68>
 80089d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80089d6:	dc65      	bgt.n	8008aa4 <generateWordDirect+0x12c>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <generateWordDirect+0x68>
 80089dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80089de:	d161      	bne.n	8008aa4 <generateWordDirect+0x12c>
		{
		case ':':
		case '\0':
		case '?':

			if (intermediateLength == 0) break;
 80089e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d062      	beq.n	8008aac <generateWordDirect+0x134>
			if (final->address == -1)
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ee:	d10a      	bne.n	8008a06 <generateWordDirect+0x8e>
			{
				final->address = atoi(currSymbol - intermediateLength);
 80089f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f2:	425b      	negs	r3, r3
 80089f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089f6:	4413      	add	r3, r2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fdf3 	bl	80095e4 <atoi>
 80089fe:	4602      	mov	r2, r0
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	e04b      	b.n	8008a9e <generateWordDirect+0x126>
			}

			else
			{
				if (firstSubWord)
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d020      	beq.n	8008a4e <generateWordDirect+0xd6>
				{
					int index = findClassIndex(currSymbol - intermediateLength, intermediateLength);
 8008a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0e:	425b      	negs	r3, r3
 8008a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a12:	4413      	add	r3, r2
 8008a14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff ff7e 	bl	8008918 <findClassIndex>
 8008a1c:	6138      	str	r0, [r7, #16]
					currentClass = &classList[index];
 8008a1e:	4b44      	ldr	r3, [pc, #272]	@ (8008b30 <generateWordDirect+0x1b8>)
 8008a20:	6819      	ldr	r1, [r3, #0]
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	4613      	mov	r3, r2
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	4413      	add	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	440b      	add	r3, r1
 8008a2e:	627b      	str	r3, [r7, #36]	@ 0x24
					final->classIndex = index;
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	605a      	str	r2, [r3, #4]
					currentClassIndex = index;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	617b      	str	r3, [r7, #20]
					firstSubWord = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	61fb      	str	r3, [r7, #28]
					if (currentClassIndex != defaultClassIndex)
 8008a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8008b34 <generateWordDirect+0x1bc>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d002      	beq.n	8008a4e <generateWordDirect+0xd6>
					{
						intermediateLength = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
						break;
 8008a4c:	e02f      	b.n	8008aae <generateWordDirect+0x136>
					}
				}

				final->subwordsCount++;
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	60da      	str	r2, [r3, #12]
				Subword** intermediate = (Subword*)realloc(final->subwords, final->subwordsCount * sizeof(Subword*));
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4619      	mov	r1, r3
 8008a64:	4610      	mov	r0, r2
 8008a66:	f000 fe9b 	bl	80097a0 <realloc>
 8008a6a:	60f8      	str	r0, [r7, #12]
				if (intermediate != NULL)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d015      	beq.n	8008a9e <generateWordDirect+0x126>
				{
					final->subwords = intermediate;																				///??????
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	609a      	str	r2, [r3, #8]
					final->subwords[final->subwordsCount - 1] = generateSubwordn(currSymbol - intermediateLength, intermediateLength, currentClass);
 8008a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7a:	425b      	negs	r3, r3
 8008a7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a7e:	18d0      	adds	r0, r2, r3
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	18d4      	adds	r4, r2, r3
 8008a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a96:	f7ff fe97 	bl	80087c8 <generateSubwordn>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6023      	str	r3, [r4, #0]
				}
			}

			intermediateLength = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	62bb      	str	r3, [r7, #40]	@ 0x28

			break;
 8008aa2:	e004      	b.n	8008aae <generateWordDirect+0x136>

		default:
			intermediateLength++;
 8008aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8008aaa:	e000      	b.n	8008aae <generateWordDirect+0x136>
			if (intermediateLength == 0) break;
 8008aac:	bf00      	nop

		}

		if (*currSymbol == '?')
 8008aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b3f      	cmp	r3, #63	@ 0x3f
 8008ab4:	d128      	bne.n	8008b08 <generateWordDirect+0x190>
		{
			final->subwordsCount++;
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	60da      	str	r2, [r3, #12]
			Subword** intermediate = (Subword*)realloc(final->subwords, final->subwordsCount * sizeof(Subword));
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	460b      	mov	r3, r1
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	440b      	add	r3, r1
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	f000 fe63 	bl	80097a0 <realloc>
 8008ada:	60b8      	str	r0, [r7, #8]
			if (intermediate != NULL)
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d012      	beq.n	8008b08 <generateWordDirect+0x190>
			{
				final->subwords = intermediate;																						///??????
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	609a      	str	r2, [r3, #8]
				final->subwords[final->subwordsCount - 1] = generateSubwordn("?", 1, currentClass);
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008af4:	3b01      	subs	r3, #1
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	18d4      	adds	r4, r2, r3
 8008afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008afc:	2101      	movs	r1, #1
 8008afe:	480e      	ldr	r0, [pc, #56]	@ (8008b38 <generateWordDirect+0x1c0>)
 8008b00:	f7ff fe62 	bl	80087c8 <generateSubwordn>
 8008b04:	4603      	mov	r3, r0
 8008b06:	6023      	str	r3, [r4, #0]
			}
		}

		currSymbol += !isLast;
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	bf0c      	ite	eq
 8008b0e:	2301      	moveq	r3, #1
 8008b10:	2300      	movne	r3, #0
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	461a      	mov	r2, r3
 8008b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b18:	4413      	add	r3, r2
 8008b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (!isLast)
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f43f af4c 	beq.w	80089bc <generateWordDirect+0x44>
	}

	return final;
 8008b24:	69bb      	ldr	r3, [r7, #24]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3734      	adds	r7, #52	@ 0x34
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd90      	pop	{r4, r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200004f0 	.word	0x200004f0
 8008b34:	2000001c 	.word	0x2000001c
 8008b38:	0800efec 	.word	0x0800efec

08008b3c <executeWord>:

void executeWord(Word* word)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
	if (word->subwordsCount < 1) return;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	dd27      	ble.n	8008b9c <executeWord+0x60>
	if (word->subwords == NULL) return;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d025      	beq.n	8008ba0 <executeWord+0x64>
	if (word->subwords[0]->type != function) return;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d121      	bne.n	8008ba4 <executeWord+0x68>
	int classIndex = word->classIndex;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	60fb      	str	r3, [r7, #12]
	int functionIndex = word->subwords[0]->functionIndex;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	60bb      	str	r3, [r7, #8]
	classList[classIndex].functions[functionIndex].run(word->subwords + 1, word->subwordsCount - 1);
 8008b70:	4b0e      	ldr	r3, [pc, #56]	@ (8008bac <executeWord+0x70>)
 8008b72:	6819      	ldr	r1, [r3, #0]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4613      	mov	r3, r2
 8008b78:	005b      	lsls	r3, r3, #1
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	440b      	add	r3, r1
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	4413      	add	r3, r2
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	6892      	ldr	r2, [r2, #8]
 8008b8e:	1d10      	adds	r0, r2, #4
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	68d2      	ldr	r2, [r2, #12]
 8008b94:	3a01      	subs	r2, #1
 8008b96:	4611      	mov	r1, r2
 8008b98:	4798      	blx	r3
 8008b9a:	e004      	b.n	8008ba6 <executeWord+0x6a>
	if (word->subwordsCount < 1) return;
 8008b9c:	bf00      	nop
 8008b9e:	e002      	b.n	8008ba6 <executeWord+0x6a>
	if (word->subwords == NULL) return;
 8008ba0:	bf00      	nop
 8008ba2:	e000      	b.n	8008ba6 <executeWord+0x6a>
	if (word->subwords[0]->type != function) return;
 8008ba4:	bf00      	nop
}
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	200004f0 	.word	0x200004f0

08008bb0 <addClass>:
	if (isDefault) defaultClassIndex = classLength;
	classLength++;
}

void addClass(Class* class, int isDefault)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
	classList = (Class*)realloc(classList, (classLength + 1) * sizeof(Class));
 8008bba:	4b17      	ldr	r3, [pc, #92]	@ (8008c18 <addClass+0x68>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	4b17      	ldr	r3, [pc, #92]	@ (8008c1c <addClass+0x6c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	440b      	add	r3, r1
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	f000 fde5 	bl	80097a0 <realloc>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8008c18 <addClass+0x68>)
 8008bda:	6013      	str	r3, [r2, #0]
	classList[classLength] = *class;
 8008bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8008c18 <addClass+0x68>)
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	4b0e      	ldr	r3, [pc, #56]	@ (8008c1c <addClass+0x6c>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4619      	mov	r1, r3
 8008be6:	460b      	mov	r3, r1
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	440b      	add	r3, r1
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8008bf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (isDefault) defaultClassIndex = classLength;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <addClass+0x56>
 8008bfe:	4b07      	ldr	r3, [pc, #28]	@ (8008c1c <addClass+0x6c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a07      	ldr	r2, [pc, #28]	@ (8008c20 <addClass+0x70>)
 8008c04:	6013      	str	r3, [r2, #0]
	classLength++;
 8008c06:	4b05      	ldr	r3, [pc, #20]	@ (8008c1c <addClass+0x6c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	4a03      	ldr	r2, [pc, #12]	@ (8008c1c <addClass+0x6c>)
 8008c0e:	6013      	str	r3, [r2, #0]
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	200004f0 	.word	0x200004f0
 8008c1c:	200004f4 	.word	0x200004f4
 8008c20:	2000001c 	.word	0x2000001c

08008c24 <kernel_init>:
long Task_count(void)
{
    return TaskList->TaskCount;
}

int kernel_init(long MaxTasksinput) {
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]

    TaskList = (TaskList_struct*)malloc(sizeof(TaskList_struct));
 8008c2c:	202c      	movs	r0, #44	@ 0x2c
 8008c2e:	f000 fcf9 	bl	8009624 <malloc>
 8008c32:	4603      	mov	r3, r0
 8008c34:	461a      	mov	r2, r3
 8008c36:	4b1e      	ldr	r3, [pc, #120]	@ (8008cb0 <kernel_init+0x8c>)
 8008c38:	601a      	str	r2, [r3, #0]
    if (TaskList == NULL) {
 8008c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb0 <kernel_init+0x8c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d104      	bne.n	8008c4c <kernel_init+0x28>
        perror("Failed to allocate memory whili initializing SimpleOS");
 8008c42:	481c      	ldr	r0, [pc, #112]	@ (8008cb4 <kernel_init+0x90>)
 8008c44:	f002 fbee 	bl	800b424 <perror>
        return 0;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	e02c      	b.n	8008ca6 <kernel_init+0x82>
    }

    TaskList->TaskCount = 0;
 8008c4c:	4b18      	ldr	r3, [pc, #96]	@ (8008cb0 <kernel_init+0x8c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]
    TaskList->TaskFunc = NULL;
 8008c54:	4b16      	ldr	r3, [pc, #88]	@ (8008cb0 <kernel_init+0x8c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	605a      	str	r2, [r3, #4]
    TaskList->TaskTime = NULL;
 8008c5c:	4b14      	ldr	r3, [pc, #80]	@ (8008cb0 <kernel_init+0x8c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2200      	movs	r2, #0
 8008c62:	609a      	str	r2, [r3, #8]
    TaskList->TaskMaxTries = NULL;
 8008c64:	4b12      	ldr	r3, [pc, #72]	@ (8008cb0 <kernel_init+0x8c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	60da      	str	r2, [r3, #12]
    TaskList->TaskPriority = NULL;
 8008c6c:	4b10      	ldr	r3, [pc, #64]	@ (8008cb0 <kernel_init+0x8c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2200      	movs	r2, #0
 8008c72:	611a      	str	r2, [r3, #16]

    TaskList->ERRbufferSize = 0;
 8008c74:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb0 <kernel_init+0x8c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	619a      	str	r2, [r3, #24]
    TaskList->ERRbuffer = NULL;
 8008c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb0 <kernel_init+0x8c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2200      	movs	r2, #0
 8008c82:	615a      	str	r2, [r3, #20]

    TaskList->status= KERNEL_NOT_RUNNING;
 8008c84:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb0 <kernel_init+0x8c>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	771a      	strb	r2, [r3, #28]
    TaskList->MaxTasks = MaxTasksinput;
 8008c8c:	4b08      	ldr	r3, [pc, #32]	@ (8008cb0 <kernel_init+0x8c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	621a      	str	r2, [r3, #32]

    TaskList->kernelRunningFlag = 0;
 8008c94:	4b06      	ldr	r3, [pc, #24]	@ (8008cb0 <kernel_init+0x8c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	625a      	str	r2, [r3, #36]	@ 0x24
    TaskList->kernelHaltFlag = 0;
 8008c9c:	4b04      	ldr	r3, [pc, #16]	@ (8008cb0 <kernel_init+0x8c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	629a      	str	r2, [r3, #40]	@ 0x28

    return 1;
 8008ca4:	2301      	movs	r3, #1
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	200004f8 	.word	0x200004f8
 8008cb4:	0800eff8 	.word	0x0800eff8

08008cb8 <Task_add>:

    return 1;
}

int Task_add(TaskFunc_t func, int priority, long time, long MaxTries) 
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b088      	sub	sp, #32
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	603b      	str	r3, [r7, #0]
    if (TaskList->TaskCount >= TaskList->MaxTasks)
 8008cc6:	4b47      	ldr	r3, [pc, #284]	@ (8008de4 <Task_add+0x12c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	4b45      	ldr	r3, [pc, #276]	@ (8008de4 <Task_add+0x12c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	db01      	blt.n	8008cda <Task_add+0x22>
    {
        return 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e07f      	b.n	8008dda <Task_add+0x122>
    }

    TaskFunc_t* newFuncs = (TaskFunc_t*)realloc(TaskList->TaskFunc, (TaskList->TaskCount + 1) * sizeof(TaskFunc_t));
 8008cda:	4b42      	ldr	r3, [pc, #264]	@ (8008de4 <Task_add+0x12c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	4b40      	ldr	r3, [pc, #256]	@ (8008de4 <Task_add+0x12c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4619      	mov	r1, r3
 8008cec:	4610      	mov	r0, r2
 8008cee:	f000 fd57 	bl	80097a0 <realloc>
 8008cf2:	61f8      	str	r0, [r7, #28]
    long* newTimes = (long*)realloc(TaskList->TaskTime, (TaskList->TaskCount + 1) * sizeof(long));
 8008cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8008de4 <Task_add+0x12c>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689a      	ldr	r2, [r3, #8]
 8008cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8008de4 <Task_add+0x12c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3301      	adds	r3, #1
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f000 fd4a 	bl	80097a0 <realloc>
 8008d0c:	61b8      	str	r0, [r7, #24]
    long* newMaxTries = (long*)realloc(TaskList->TaskMaxTries, (TaskList->TaskCount + 1) * sizeof(long));
 8008d0e:	4b35      	ldr	r3, [pc, #212]	@ (8008de4 <Task_add+0x12c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	4b33      	ldr	r3, [pc, #204]	@ (8008de4 <Task_add+0x12c>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f000 fd3d 	bl	80097a0 <realloc>
 8008d26:	6178      	str	r0, [r7, #20]
    int* newPriorities = (int*)realloc(TaskList->TaskPriority, (TaskList->TaskCount + 1) * sizeof(int));
 8008d28:	4b2e      	ldr	r3, [pc, #184]	@ (8008de4 <Task_add+0x12c>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	691a      	ldr	r2, [r3, #16]
 8008d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8008de4 <Task_add+0x12c>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3301      	adds	r3, #1
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f000 fd30 	bl	80097a0 <realloc>
 8008d40:	6138      	str	r0, [r7, #16]

    if (newFuncs == NULL || newTimes == NULL || newMaxTries == NULL || newPriorities == NULL)
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d008      	beq.n	8008d5a <Task_add+0xa2>
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d005      	beq.n	8008d5a <Task_add+0xa2>
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <Task_add+0xa2>
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <Task_add+0xa6>
    {
        return 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e03d      	b.n	8008dda <Task_add+0x122>
    }

    TaskList->TaskFunc = newFuncs;
 8008d5e:	4b21      	ldr	r3, [pc, #132]	@ (8008de4 <Task_add+0x12c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	69fa      	ldr	r2, [r7, #28]
 8008d64:	605a      	str	r2, [r3, #4]
    TaskList->TaskFunc[TaskList->TaskCount] = func;
 8008d66:	4b1f      	ldr	r3, [pc, #124]	@ (8008de4 <Task_add+0x12c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8008de4 <Task_add+0x12c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	601a      	str	r2, [r3, #0]

    TaskList->TaskTime = newTimes;
 8008d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008de4 <Task_add+0x12c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	609a      	str	r2, [r3, #8]
    TaskList->TaskTime[TaskList->TaskCount] = time;
 8008d82:	4b18      	ldr	r3, [pc, #96]	@ (8008de4 <Task_add+0x12c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	689a      	ldr	r2, [r3, #8]
 8008d88:	4b16      	ldr	r3, [pc, #88]	@ (8008de4 <Task_add+0x12c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	601a      	str	r2, [r3, #0]

    TaskList->TaskMaxTries = newMaxTries;
 8008d96:	4b13      	ldr	r3, [pc, #76]	@ (8008de4 <Task_add+0x12c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	60da      	str	r2, [r3, #12]
    TaskList->TaskMaxTries[TaskList->TaskCount] = MaxTries;
 8008d9e:	4b11      	ldr	r3, [pc, #68]	@ (8008de4 <Task_add+0x12c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	4b0f      	ldr	r3, [pc, #60]	@ (8008de4 <Task_add+0x12c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	601a      	str	r2, [r3, #0]

    TaskList->TaskPriority = newPriorities;
 8008db2:	4b0c      	ldr	r3, [pc, #48]	@ (8008de4 <Task_add+0x12c>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	611a      	str	r2, [r3, #16]
    TaskList->TaskPriority[TaskList->TaskCount] = priority;
 8008dba:	4b0a      	ldr	r3, [pc, #40]	@ (8008de4 <Task_add+0x12c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	691a      	ldr	r2, [r3, #16]
 8008dc0:	4b08      	ldr	r3, [pc, #32]	@ (8008de4 <Task_add+0x12c>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	601a      	str	r2, [r3, #0]

    TaskList->TaskCount++;
 8008dce:	4b05      	ldr	r3, [pc, #20]	@ (8008de4 <Task_add+0x12c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	3201      	adds	r2, #1
 8008dd6:	601a      	str	r2, [r3, #0]

    return 1;
 8008dd8:	2301      	movs	r3, #1
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3720      	adds	r7, #32
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	200004f8 	.word	0x200004f8

08008de8 <compare_priority>:

// Comparator function for qsort
int compare_priority(const void* a, const void* b) {
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
    int index_a = *(const int*)a;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	60fb      	str	r3, [r7, #12]
    int index_b = *(const int*)b;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	60bb      	str	r3, [r7, #8]
    return global_priorities[index_b] - global_priorities[index_a];
 8008dfe:	4b09      	ldr	r3, [pc, #36]	@ (8008e24 <compare_priority+0x3c>)
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4b06      	ldr	r3, [pc, #24]	@ (8008e24 <compare_priority+0x3c>)
 8008e0c:	6819      	ldr	r1, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	440b      	add	r3, r1
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	1ad3      	subs	r3, r2, r3
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bc80      	pop	{r7}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	200005a0 	.word	0x200005a0

08008e28 <TaskList_sort_priorities>:

void TaskList_sort_priorities()
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af00      	add	r7, sp, #0
    // Create an array of indices
    int* indices = (int*)malloc(TaskList->TaskCount * sizeof(int));
 8008e2e:	4b74      	ldr	r3, [pc, #464]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fbf4 	bl	8009624 <malloc>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	613b      	str	r3, [r7, #16]
    for (long i = 0; i < TaskList->TaskCount; ++i) {
 8008e40:	2300      	movs	r3, #0
 8008e42:	61fb      	str	r3, [r7, #28]
 8008e44:	e008      	b.n	8008e58 <TaskList_sort_priorities+0x30>
        indices[i] = i;
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	69fa      	ldr	r2, [r7, #28]
 8008e50:	601a      	str	r2, [r3, #0]
    for (long i = 0; i < TaskList->TaskCount; ++i) {
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	3301      	adds	r3, #1
 8008e56:	61fb      	str	r3, [r7, #28]
 8008e58:	4b69      	ldr	r3, [pc, #420]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	dbf0      	blt.n	8008e46 <TaskList_sort_priorities+0x1e>
    }

    // Set the global priorities pointer to the TaskPriority array
    global_priorities = TaskList->TaskPriority;
 8008e64:	4b66      	ldr	r3, [pc, #408]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	4a66      	ldr	r2, [pc, #408]	@ (8009004 <TaskList_sort_priorities+0x1dc>)
 8008e6c:	6013      	str	r3, [r2, #0]

    // Sort indices based on TaskPriority
    qsort(indices, TaskList->TaskCount, sizeof(int), compare_priority);
 8008e6e:	4b64      	ldr	r3, [pc, #400]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4619      	mov	r1, r3
 8008e76:	4b64      	ldr	r3, [pc, #400]	@ (8009008 <TaskList_sort_priorities+0x1e0>)
 8008e78:	2204      	movs	r2, #4
 8008e7a:	6938      	ldr	r0, [r7, #16]
 8008e7c:	f001 fb89 	bl	800a592 <qsort>

    // Allocate temporary arrays for sorted elements
    TaskFunc_t* sorted_TaskFunc = (TaskFunc_t*)malloc(TaskList->TaskCount * sizeof(TaskFunc_t));
 8008e80:	4b5f      	ldr	r3, [pc, #380]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fbcb 	bl	8009624 <malloc>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	60fb      	str	r3, [r7, #12]
    long* sorted_TaskTime = (long*)malloc(TaskList->TaskCount * sizeof(long));
 8008e92:	4b5b      	ldr	r3, [pc, #364]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 fbc2 	bl	8009624 <malloc>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	60bb      	str	r3, [r7, #8]
    long* sorted_TaskMaxTries = (long*)malloc(TaskList->TaskCount * sizeof(long));
 8008ea4:	4b56      	ldr	r3, [pc, #344]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 fbb9 	bl	8009624 <malloc>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	607b      	str	r3, [r7, #4]
    int* sorted_TaskPriority = (int*)malloc(TaskList->TaskCount * sizeof(int));
 8008eb6:	4b52      	ldr	r3, [pc, #328]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fbb0 	bl	8009624 <malloc>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	603b      	str	r3, [r7, #0]

    // Populate sorted arrays
    for (long i = 0; i < TaskList->TaskCount; i++) {
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61bb      	str	r3, [r7, #24]
 8008ecc:	e042      	b.n	8008f54 <TaskList_sort_priorities+0x12c>
        sorted_TaskFunc[i] = TaskList->TaskFunc[indices[i]];
 8008ece:	4b4c      	ldr	r3, [pc, #304]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	6939      	ldr	r1, [r7, #16]
 8008eda:	440b      	add	r3, r1
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	441a      	add	r2, r3
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	68f9      	ldr	r1, [r7, #12]
 8008ee8:	440b      	add	r3, r1
 8008eea:	6812      	ldr	r2, [r2, #0]
 8008eec:	601a      	str	r2, [r3, #0]
        sorted_TaskTime[i] = TaskList->TaskTime[indices[i]];
 8008eee:	4b44      	ldr	r3, [pc, #272]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689a      	ldr	r2, [r3, #8]
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	6939      	ldr	r1, [r7, #16]
 8008efa:	440b      	add	r3, r1
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	441a      	add	r2, r3
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	68b9      	ldr	r1, [r7, #8]
 8008f08:	440b      	add	r3, r1
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	601a      	str	r2, [r3, #0]
        sorted_TaskMaxTries[i] = TaskList->TaskMaxTries[indices[i]];
 8008f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	6939      	ldr	r1, [r7, #16]
 8008f1a:	440b      	add	r3, r1
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	441a      	add	r2, r3
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	440b      	add	r3, r1
 8008f2a:	6812      	ldr	r2, [r2, #0]
 8008f2c:	601a      	str	r2, [r3, #0]
        sorted_TaskPriority[i] = TaskList->TaskPriority[indices[i]];
 8008f2e:	4b34      	ldr	r3, [pc, #208]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	691a      	ldr	r2, [r3, #16]
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	6939      	ldr	r1, [r7, #16]
 8008f3a:	440b      	add	r3, r1
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	441a      	add	r2, r3
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	440b      	add	r3, r1
 8008f4a:	6812      	ldr	r2, [r2, #0]
 8008f4c:	601a      	str	r2, [r3, #0]
    for (long i = 0; i < TaskList->TaskCount; i++) {
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	3301      	adds	r3, #1
 8008f52:	61bb      	str	r3, [r7, #24]
 8008f54:	4b2a      	ldr	r3, [pc, #168]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	dbb6      	blt.n	8008ece <TaskList_sort_priorities+0xa6>
    }

    // Copy sorted arrays back to the original task list
    for (long i = 0; i < TaskList->TaskCount; i++) {
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]
 8008f64:	e032      	b.n	8008fcc <TaskList_sort_priorities+0x1a4>
        TaskList->TaskFunc[i] = sorted_TaskFunc[i];
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	441a      	add	r2, r3
 8008f6e:	4b24      	ldr	r3, [pc, #144]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6859      	ldr	r1, [r3, #4]
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	440b      	add	r3, r1
 8008f7a:	6812      	ldr	r2, [r2, #0]
 8008f7c:	601a      	str	r2, [r3, #0]
        TaskList->TaskTime[i] = sorted_TaskTime[i];
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	441a      	add	r2, r3
 8008f86:	4b1e      	ldr	r3, [pc, #120]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6899      	ldr	r1, [r3, #8]
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	6812      	ldr	r2, [r2, #0]
 8008f94:	601a      	str	r2, [r3, #0]
        TaskList->TaskMaxTries[i] = sorted_TaskMaxTries[i];
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	441a      	add	r2, r3
 8008f9e:	4b18      	ldr	r3, [pc, #96]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68d9      	ldr	r1, [r3, #12]
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	440b      	add	r3, r1
 8008faa:	6812      	ldr	r2, [r2, #0]
 8008fac:	601a      	str	r2, [r3, #0]
        TaskList->TaskPriority[i] = sorted_TaskPriority[i];
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	441a      	add	r2, r3
 8008fb6:	4b12      	ldr	r3, [pc, #72]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	6919      	ldr	r1, [r3, #16]
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	440b      	add	r3, r1
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	601a      	str	r2, [r3, #0]
    for (long i = 0; i < TaskList->TaskCount; i++) {
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	617b      	str	r3, [r7, #20]
 8008fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8009000 <TaskList_sort_priorities+0x1d8>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	dbc6      	blt.n	8008f66 <TaskList_sort_priorities+0x13e>
    }

    // Free temporary arrays and indices
    free(sorted_TaskFunc);
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 fb2b 	bl	8009634 <free>
    free(sorted_TaskTime);
 8008fde:	68b8      	ldr	r0, [r7, #8]
 8008fe0:	f000 fb28 	bl	8009634 <free>
    free(sorted_TaskMaxTries);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fb25 	bl	8009634 <free>
    free(sorted_TaskPriority);
 8008fea:	6838      	ldr	r0, [r7, #0]
 8008fec:	f000 fb22 	bl	8009634 <free>
    free(indices);
 8008ff0:	6938      	ldr	r0, [r7, #16]
 8008ff2:	f000 fb1f 	bl	8009634 <free>
}
 8008ff6:	bf00      	nop
 8008ff8:	3720      	adds	r7, #32
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	200004f8 	.word	0x200004f8
 8009004:	200005a0 	.word	0x200005a0
 8009008:	08008de9 	.word	0x08008de9

0800900c <Task_remove>:

int Task_remove(long index) 
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
    if (index >= TaskList->TaskCount) {
 8009014:	4b71      	ldr	r3, [pc, #452]	@ (80091dc <Task_remove+0x1d0>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	429a      	cmp	r2, r3
 800901e:	db09      	blt.n	8009034 <Task_remove+0x28>
        fprintf(stderr, "Index out of bounds\n");
 8009020:	4b6f      	ldr	r3, [pc, #444]	@ (80091e0 <Task_remove+0x1d4>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	2214      	movs	r2, #20
 8009028:	2101      	movs	r1, #1
 800902a:	486e      	ldr	r0, [pc, #440]	@ (80091e4 <Task_remove+0x1d8>)
 800902c:	f002 f966 	bl	800b2fc <fwrite>
        return 0;
 8009030:	2300      	movs	r3, #0
 8009032:	e0cf      	b.n	80091d4 <Task_remove+0x1c8>
    }

    // Shift all elements after the index to the left by one position
    for (long i = index; i < TaskList->TaskCount - 1; ++i) 
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	e03e      	b.n	80090b8 <Task_remove+0xac>
    {
        TaskList->TaskFunc[i] = TaskList->TaskFunc[i + 1];
 800903a:	4b68      	ldr	r3, [pc, #416]	@ (80091dc <Task_remove+0x1d0>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	3301      	adds	r3, #1
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	441a      	add	r2, r3
 8009048:	4b64      	ldr	r3, [pc, #400]	@ (80091dc <Task_remove+0x1d0>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6859      	ldr	r1, [r3, #4]
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	440b      	add	r3, r1
 8009054:	6812      	ldr	r2, [r2, #0]
 8009056:	601a      	str	r2, [r3, #0]
        TaskList->TaskPriority[i] = TaskList->TaskPriority[i + 1];
 8009058:	4b60      	ldr	r3, [pc, #384]	@ (80091dc <Task_remove+0x1d0>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	691a      	ldr	r2, [r3, #16]
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	3301      	adds	r3, #1
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	441a      	add	r2, r3
 8009066:	4b5d      	ldr	r3, [pc, #372]	@ (80091dc <Task_remove+0x1d0>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6919      	ldr	r1, [r3, #16]
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	440b      	add	r3, r1
 8009072:	6812      	ldr	r2, [r2, #0]
 8009074:	601a      	str	r2, [r3, #0]
        TaskList->TaskTime[i] = TaskList->TaskTime[i + 1];
 8009076:	4b59      	ldr	r3, [pc, #356]	@ (80091dc <Task_remove+0x1d0>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	3301      	adds	r3, #1
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	441a      	add	r2, r3
 8009084:	4b55      	ldr	r3, [pc, #340]	@ (80091dc <Task_remove+0x1d0>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6899      	ldr	r1, [r3, #8]
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	440b      	add	r3, r1
 8009090:	6812      	ldr	r2, [r2, #0]
 8009092:	601a      	str	r2, [r3, #0]
        TaskList->TaskMaxTries[i] = TaskList->TaskMaxTries[i + 1];
 8009094:	4b51      	ldr	r3, [pc, #324]	@ (80091dc <Task_remove+0x1d0>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	3301      	adds	r3, #1
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	441a      	add	r2, r3
 80090a2:	4b4e      	ldr	r3, [pc, #312]	@ (80091dc <Task_remove+0x1d0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68d9      	ldr	r1, [r3, #12]
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	440b      	add	r3, r1
 80090ae:	6812      	ldr	r2, [r2, #0]
 80090b0:	601a      	str	r2, [r3, #0]
    for (long i = index; i < TaskList->TaskCount - 1; ++i) 
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	3301      	adds	r3, #1
 80090b6:	61fb      	str	r3, [r7, #28]
 80090b8:	4b48      	ldr	r3, [pc, #288]	@ (80091dc <Task_remove+0x1d0>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3b01      	subs	r3, #1
 80090c0:	69fa      	ldr	r2, [r7, #28]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	dbb9      	blt.n	800903a <Task_remove+0x2e>
    }

    TaskList->TaskCount -= 1;
 80090c6:	4b45      	ldr	r3, [pc, #276]	@ (80091dc <Task_remove+0x1d0>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	4b43      	ldr	r3, [pc, #268]	@ (80091dc <Task_remove+0x1d0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3a01      	subs	r2, #1
 80090d2:	601a      	str	r2, [r3, #0]

    // Handle the case where the task list becomes empty
    if (TaskList->TaskCount == 0) {
 80090d4:	4b41      	ldr	r3, [pc, #260]	@ (80091dc <Task_remove+0x1d0>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d128      	bne.n	8009130 <Task_remove+0x124>
        free(TaskList->TaskFunc);
 80090de:	4b3f      	ldr	r3, [pc, #252]	@ (80091dc <Task_remove+0x1d0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 faa5 	bl	8009634 <free>
        free(TaskList->TaskPriority);
 80090ea:	4b3c      	ldr	r3, [pc, #240]	@ (80091dc <Task_remove+0x1d0>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fa9f 	bl	8009634 <free>
        free(TaskList->TaskTime);
 80090f6:	4b39      	ldr	r3, [pc, #228]	@ (80091dc <Task_remove+0x1d0>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fa99 	bl	8009634 <free>
        free(TaskList->TaskMaxTries);
 8009102:	4b36      	ldr	r3, [pc, #216]	@ (80091dc <Task_remove+0x1d0>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fa93 	bl	8009634 <free>

        TaskList->TaskFunc = NULL;
 800910e:	4b33      	ldr	r3, [pc, #204]	@ (80091dc <Task_remove+0x1d0>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2200      	movs	r2, #0
 8009114:	605a      	str	r2, [r3, #4]
        TaskList->TaskPriority = NULL;
 8009116:	4b31      	ldr	r3, [pc, #196]	@ (80091dc <Task_remove+0x1d0>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2200      	movs	r2, #0
 800911c:	611a      	str	r2, [r3, #16]
        TaskList->TaskTime = NULL;
 800911e:	4b2f      	ldr	r3, [pc, #188]	@ (80091dc <Task_remove+0x1d0>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2200      	movs	r2, #0
 8009124:	609a      	str	r2, [r3, #8]
        TaskList->TaskMaxTries = NULL;
 8009126:	4b2d      	ldr	r3, [pc, #180]	@ (80091dc <Task_remove+0x1d0>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2200      	movs	r2, #0
 800912c:	60da      	str	r2, [r3, #12]
 800912e:	e050      	b.n	80091d2 <Task_remove+0x1c6>
    }
    else {
        // Reallocate memory to shrink the arrays by one element
        TaskFunc_t* newFuncs = (TaskFunc_t*)realloc(TaskList->TaskFunc, TaskList->TaskCount * sizeof(TaskFunc_t));
 8009130:	4b2a      	ldr	r3, [pc, #168]	@ (80091dc <Task_remove+0x1d0>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	4b29      	ldr	r3, [pc, #164]	@ (80091dc <Task_remove+0x1d0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f000 fb2d 	bl	80097a0 <realloc>
 8009146:	61b8      	str	r0, [r7, #24]
        int* newPriorities = (long*)realloc(TaskList->TaskPriority, TaskList->TaskCount * sizeof(int));
 8009148:	4b24      	ldr	r3, [pc, #144]	@ (80091dc <Task_remove+0x1d0>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	691a      	ldr	r2, [r3, #16]
 800914e:	4b23      	ldr	r3, [pc, #140]	@ (80091dc <Task_remove+0x1d0>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4619      	mov	r1, r3
 8009158:	4610      	mov	r0, r2
 800915a:	f000 fb21 	bl	80097a0 <realloc>
 800915e:	6178      	str	r0, [r7, #20]
        long* newTimes = (long*)realloc(TaskList->TaskTime, TaskList->TaskCount * sizeof(long));
 8009160:	4b1e      	ldr	r3, [pc, #120]	@ (80091dc <Task_remove+0x1d0>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	4b1d      	ldr	r3, [pc, #116]	@ (80091dc <Task_remove+0x1d0>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4619      	mov	r1, r3
 8009170:	4610      	mov	r0, r2
 8009172:	f000 fb15 	bl	80097a0 <realloc>
 8009176:	6138      	str	r0, [r7, #16]
        long* newMaxTries = (long*)realloc(TaskList->TaskMaxTries, TaskList->TaskCount * sizeof(long));
 8009178:	4b18      	ldr	r3, [pc, #96]	@ (80091dc <Task_remove+0x1d0>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68da      	ldr	r2, [r3, #12]
 800917e:	4b17      	ldr	r3, [pc, #92]	@ (80091dc <Task_remove+0x1d0>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4619      	mov	r1, r3
 8009188:	4610      	mov	r0, r2
 800918a:	f000 fb09 	bl	80097a0 <realloc>
 800918e:	60f8      	str	r0, [r7, #12]

        if (newFuncs == NULL || newTimes == NULL || newMaxTries == NULL || newPriorities == NULL)
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d008      	beq.n	80091a8 <Task_remove+0x19c>
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d005      	beq.n	80091a8 <Task_remove+0x19c>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d002      	beq.n	80091a8 <Task_remove+0x19c>
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d104      	bne.n	80091b2 <Task_remove+0x1a6>
        {
            perror("Failed to reallocate memory while removing task");
 80091a8:	480f      	ldr	r0, [pc, #60]	@ (80091e8 <Task_remove+0x1dc>)
 80091aa:	f002 f93b 	bl	800b424 <perror>
            return 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	e010      	b.n	80091d4 <Task_remove+0x1c8>
        }

        TaskList->TaskFunc = newFuncs;
 80091b2:	4b0a      	ldr	r3, [pc, #40]	@ (80091dc <Task_remove+0x1d0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	605a      	str	r2, [r3, #4]
        TaskList->TaskPriority = newPriorities;
 80091ba:	4b08      	ldr	r3, [pc, #32]	@ (80091dc <Task_remove+0x1d0>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	611a      	str	r2, [r3, #16]
        TaskList->TaskTime = newTimes;
 80091c2:	4b06      	ldr	r3, [pc, #24]	@ (80091dc <Task_remove+0x1d0>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	609a      	str	r2, [r3, #8]
        TaskList->TaskMaxTries = newMaxTries;
 80091ca:	4b04      	ldr	r3, [pc, #16]	@ (80091dc <Task_remove+0x1d0>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	60da      	str	r2, [r3, #12]
    }

    return 1;
 80091d2:	2301      	movs	r3, #1
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3720      	adds	r7, #32
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	200004f8 	.word	0x200004f8
 80091e0:	200001a0 	.word	0x200001a0
 80091e4:	0800f030 	.word	0x0800f030
 80091e8:	0800f048 	.word	0x0800f048

080091ec <Task_execute>:

int Task_execute()
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
    if (!TaskList->kernelRunningFlag)   TaskList->status = KERNEL_NOT_RUNNING;
 80091f2:	4b25      	ldr	r3, [pc, #148]	@ (8009288 <Task_execute+0x9c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <Task_execute+0x1a>
 80091fc:	4b22      	ldr	r3, [pc, #136]	@ (8009288 <Task_execute+0x9c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2202      	movs	r2, #2
 8009202:	771a      	strb	r2, [r3, #28]
 8009204:	e00d      	b.n	8009222 <Task_execute+0x36>
    else if (TaskList->kernelHaltFlag)  TaskList->status = KERNEL_HALTED;
 8009206:	4b20      	ldr	r3, [pc, #128]	@ (8009288 <Task_execute+0x9c>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800920c:	2b00      	cmp	r3, #0
 800920e:	d004      	beq.n	800921a <Task_execute+0x2e>
 8009210:	4b1d      	ldr	r3, [pc, #116]	@ (8009288 <Task_execute+0x9c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2201      	movs	r2, #1
 8009216:	771a      	strb	r2, [r3, #28]
 8009218:	e003      	b.n	8009222 <Task_execute+0x36>
    else                                TaskList->status = KERNEL_RUNNING;
 800921a:	4b1b      	ldr	r3, [pc, #108]	@ (8009288 <Task_execute+0x9c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2200      	movs	r2, #0
 8009220:	771a      	strb	r2, [r3, #28]

        int exit = setjmp(env); // setjump alows to cancel running function
 8009222:	481a      	ldr	r0, [pc, #104]	@ (800928c <Task_execute+0xa0>)
 8009224:	f7f6 ff94 	bl	8000150 <setjmp>
 8009228:	4603      	mov	r3, r0
 800922a:	607b      	str	r3, [r7, #4]
        if (exit == 0)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d121      	bne.n	8009276 <Task_execute+0x8a>
        {

            if (TaskList->TaskFunc[0]() == TASK_DONE)
 8009232:	4b15      	ldr	r3, [pc, #84]	@ (8009288 <Task_execute+0x9c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4798      	blx	r3
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d104      	bne.n	800924c <Task_execute+0x60>
            {
                Task_remove(0); 
 8009242:	2000      	movs	r0, #0
 8009244:	f7ff fee2 	bl	800900c <Task_remove>
                return TASK_DONE;
 8009248:	2300      	movs	r3, #0
 800924a:	e018      	b.n	800927e <Task_execute+0x92>
            }
            else
            {
                TaskList->TaskMaxTries[0]--;
 800924c:	4b0e      	ldr	r3, [pc, #56]	@ (8009288 <Task_execute+0x9c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	3a01      	subs	r2, #1
 8009256:	601a      	str	r2, [r3, #0]

                if (TaskList->TaskMaxTries[0] > 0)
 8009258:	4b0b      	ldr	r3, [pc, #44]	@ (8009288 <Task_execute+0x9c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	dd03      	ble.n	800926c <Task_execute+0x80>
                {
                    Task_current_to_end();
 8009264:	f000 f814 	bl	8009290 <Task_current_to_end>
                    return TASK_RETRYING;
 8009268:	2304      	movs	r3, #4
 800926a:	e008      	b.n	800927e <Task_execute+0x92>
                }      
                else
                {
                    Task_remove(0);
 800926c:	2000      	movs	r0, #0
 800926e:	f7ff fecd 	bl	800900c <Task_remove>
                    return TASK_TRIES_EXPIRED;
 8009272:	2301      	movs	r3, #1
 8009274:	e003      	b.n	800927e <Task_execute+0x92>
                }
            }
        }
        else
        {
            Task_remove(0);
 8009276:	2000      	movs	r0, #0
 8009278:	f7ff fec8 	bl	800900c <Task_remove>
            return exit;
 800927c:	687b      	ldr	r3, [r7, #4]
        }
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	200004f8 	.word	0x200004f8
 800928c:	20000500 	.word	0x20000500

08009290 <Task_current_to_end>:

int Task_current_to_end()
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
    Task_add(TaskList->TaskFunc[0], TaskList->TaskPriority[0], TaskList->TaskTime[0], TaskList->TaskMaxTries[0]);
 8009294:	4b0b      	ldr	r3, [pc, #44]	@ (80092c4 <Task_current_to_end+0x34>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	4b09      	ldr	r3, [pc, #36]	@ (80092c4 <Task_current_to_end+0x34>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	6819      	ldr	r1, [r3, #0]
 80092a4:	4b07      	ldr	r3, [pc, #28]	@ (80092c4 <Task_current_to_end+0x34>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	4b05      	ldr	r3, [pc, #20]	@ (80092c4 <Task_current_to_end+0x34>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f7ff fd00 	bl	8008cb8 <Task_add>
    return Task_remove(0);
 80092b8:	2000      	movs	r0, #0
 80092ba:	f7ff fea7 	bl	800900c <Task_remove>
 80092be:	4603      	mov	r3, r0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	200004f8 	.word	0x200004f8

080092c8 <kernel_begin>:

    TaskList->TaskTime[0]--;
}

void kernel_begin()
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	af00      	add	r7, sp, #0
    TaskList->kernelRunningFlag = 1;
 80092cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009304 <kernel_begin+0x3c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2201      	movs	r2, #1
 80092d2:	625a      	str	r2, [r3, #36]	@ 0x24

    while (TaskList->kernelRunningFlag)
 80092d4:	e00d      	b.n	80092f2 <kernel_begin+0x2a>
        if (TaskList->TaskCount > 0 && !TaskList->kernelHaltFlag)
 80092d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009304 <kernel_begin+0x3c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dd08      	ble.n	80092f2 <kernel_begin+0x2a>
 80092e0:	4b08      	ldr	r3, [pc, #32]	@ (8009304 <kernel_begin+0x3c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d103      	bne.n	80092f2 <kernel_begin+0x2a>
        {
            TaskList_sort_priorities();
 80092ea:	f7ff fd9d 	bl	8008e28 <TaskList_sort_priorities>
            Task_execute();
 80092ee:	f7ff ff7d 	bl	80091ec <Task_execute>
    while (TaskList->kernelRunningFlag)
 80092f2:	4b04      	ldr	r3, [pc, #16]	@ (8009304 <kernel_begin+0x3c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1ec      	bne.n	80092d6 <kernel_begin+0xe>
        }
}
 80092fc:	bf00      	nop
 80092fe:	bf00      	nop
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	200004f8 	.word	0x200004f8

08009308 <writeToRegister>:
uint8_t is_initialised = 0;

I2C_HandleTypeDef I2CHandle;

void writeToRegister(uint16_t device_address, uint16_t memory_address, uint8_t *data)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af04      	add	r7, sp, #16
 800930e:	4603      	mov	r3, r0
 8009310:	603a      	str	r2, [r7, #0]
 8009312:	80fb      	strh	r3, [r7, #6]
 8009314:	460b      	mov	r3, r1
 8009316:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&I2CHandle, (device_address<<1), memory_address, 1, data, 1, 1000);
 8009318:	88fb      	ldrh	r3, [r7, #6]
 800931a:	005b      	lsls	r3, r3, #1
 800931c:	b299      	uxth	r1, r3
 800931e:	88ba      	ldrh	r2, [r7, #4]
 8009320:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009324:	9302      	str	r3, [sp, #8]
 8009326:	2301      	movs	r3, #1
 8009328:	9301      	str	r3, [sp, #4]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	2301      	movs	r3, #1
 8009330:	4803      	ldr	r0, [pc, #12]	@ (8009340 <writeToRegister+0x38>)
 8009332:	f7fa fe87 	bl	8004044 <HAL_I2C_Mem_Write>
}
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	200005a8 	.word	0x200005a8

08009344 <TCA_Init>:

void TCA_Init(uint8_t address, I2C_HandleTypeDef handle)
{
 8009344:	b084      	sub	sp, #16
 8009346:	b590      	push	{r4, r7, lr}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	4604      	mov	r4, r0
 800934e:	f107 001c 	add.w	r0, r7, #28
 8009352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8009356:	4623      	mov	r3, r4
 8009358:	71fb      	strb	r3, [r7, #7]
	TCA_address = address;
 800935a:	4a0a      	ldr	r2, [pc, #40]	@ (8009384 <TCA_Init+0x40>)
 800935c:	79fb      	ldrb	r3, [r7, #7]
 800935e:	7013      	strb	r3, [r2, #0]
	I2CHandle = handle;
 8009360:	4b09      	ldr	r3, [pc, #36]	@ (8009388 <TCA_Init+0x44>)
 8009362:	4618      	mov	r0, r3
 8009364:	f107 031c 	add.w	r3, r7, #28
 8009368:	2254      	movs	r2, #84	@ 0x54
 800936a:	4619      	mov	r1, r3
 800936c:	f002 fc1b 	bl	800bba6 <memcpy>
	is_initialised = 1;
 8009370:	4b06      	ldr	r3, [pc, #24]	@ (800938c <TCA_Init+0x48>)
 8009372:	2201      	movs	r2, #1
 8009374:	701a      	strb	r2, [r3, #0]
}
 8009376:	bf00      	nop
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009380:	b004      	add	sp, #16
 8009382:	4770      	bx	lr
 8009384:	20000024 	.word	0x20000024
 8009388:	200005a8 	.word	0x200005a8
 800938c:	200005a4 	.word	0x200005a4

08009390 <TCA_PinMode>:

void TCA_PinMode(uint32_t pin, uint32_t mode)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 800939a:	4b25      	ldr	r3, [pc, #148]	@ (8009430 <TCA_PinMode+0xa0>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d03d      	beq.n	800941e <TCA_PinMode+0x8e>
	if(pin > 15) return;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b0f      	cmp	r3, #15
 80093a6:	d83c      	bhi.n	8009422 <TCA_PinMode+0x92>
	if(mode != 0 && mode != 1) return;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <TCA_PinMode+0x24>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d138      	bne.n	8009426 <TCA_PinMode+0x96>

	uint8_t mask =  1 << (pin % 8);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	2201      	movs	r2, #1
 80093bc:	fa02 f303 	lsl.w	r3, r2, r3
 80093c0:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? PINMODE_REGISTER_LOW : PINMODE_REGISTER_HIGH;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b07      	cmp	r3, #7
 80093c6:	d801      	bhi.n	80093cc <TCA_PinMode+0x3c>
 80093c8:	2306      	movs	r3, #6
 80093ca:	e000      	b.n	80093ce <TCA_PinMode+0x3e>
 80093cc:	2307      	movs	r3, #7
 80093ce:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &pinmode_register_state_low : &pinmode_register_state_high;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b07      	cmp	r3, #7
 80093d4:	d801      	bhi.n	80093da <TCA_PinMode+0x4a>
 80093d6:	4b17      	ldr	r3, [pc, #92]	@ (8009434 <TCA_PinMode+0xa4>)
 80093d8:	e000      	b.n	80093dc <TCA_PinMode+0x4c>
 80093da:	4b17      	ldr	r3, [pc, #92]	@ (8009438 <TCA_PinMode+0xa8>)
 80093dc:	60bb      	str	r3, [r7, #8]

	if (mode) 	*data |= mask;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d007      	beq.n	80093f4 <TCA_PinMode+0x64>
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	781a      	ldrb	r2, [r3, #0]
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	e00b      	b.n	800940c <TCA_PinMode+0x7c>
	else 		*data &= ~mask;
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	b25a      	sxtb	r2, r3
 80093fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093fe:	43db      	mvns	r3, r3
 8009400:	b25b      	sxtb	r3, r3
 8009402:	4013      	ands	r3, r2
 8009404:	b25b      	sxtb	r3, r3
 8009406:	b2da      	uxtb	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 800940c:	4b0b      	ldr	r3, [pc, #44]	@ (800943c <TCA_PinMode+0xac>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	4618      	mov	r0, r3
 8009412:	89bb      	ldrh	r3, [r7, #12]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	4619      	mov	r1, r3
 8009418:	f7ff ff76 	bl	8009308 <writeToRegister>
 800941c:	e004      	b.n	8009428 <TCA_PinMode+0x98>
	if(!is_initialised) return;
 800941e:	bf00      	nop
 8009420:	e002      	b.n	8009428 <TCA_PinMode+0x98>
	if(pin > 15) return;
 8009422:	bf00      	nop
 8009424:	e000      	b.n	8009428 <TCA_PinMode+0x98>
	if(mode != 0 && mode != 1) return;
 8009426:	bf00      	nop
}
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	200005a4 	.word	0x200005a4
 8009434:	20000022 	.word	0x20000022
 8009438:	20000023 	.word	0x20000023
 800943c:	20000024 	.word	0x20000024

08009440 <TCA_WritePin>:

	writeToRegister(TCA_address, memory_address, data);
}

void TCA_WritePin(uint32_t pin, uint32_t value)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 800944a:	4b25      	ldr	r3, [pc, #148]	@ (80094e0 <TCA_WritePin+0xa0>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d03d      	beq.n	80094ce <TCA_WritePin+0x8e>
	if(pin > 15) return;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b0f      	cmp	r3, #15
 8009456:	d83c      	bhi.n	80094d2 <TCA_WritePin+0x92>
	if(value != 0 && value != 1) return;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <TCA_WritePin+0x24>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d138      	bne.n	80094d6 <TCA_WritePin+0x96>

	uint8_t mask =  1 << (pin % 8);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f003 0307 	and.w	r3, r3, #7
 800946a:	2201      	movs	r2, #1
 800946c:	fa02 f303 	lsl.w	r3, r2, r3
 8009470:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? OUTPUT_REGISTER_LOW : OUTPUT_REGISTER_HIGH;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b07      	cmp	r3, #7
 8009476:	d801      	bhi.n	800947c <TCA_WritePin+0x3c>
 8009478:	2302      	movs	r3, #2
 800947a:	e000      	b.n	800947e <TCA_WritePin+0x3e>
 800947c:	2303      	movs	r3, #3
 800947e:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &output_register_state_low : &output_register_state_high;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b07      	cmp	r3, #7
 8009484:	d801      	bhi.n	800948a <TCA_WritePin+0x4a>
 8009486:	4b17      	ldr	r3, [pc, #92]	@ (80094e4 <TCA_WritePin+0xa4>)
 8009488:	e000      	b.n	800948c <TCA_WritePin+0x4c>
 800948a:	4b17      	ldr	r3, [pc, #92]	@ (80094e8 <TCA_WritePin+0xa8>)
 800948c:	60bb      	str	r3, [r7, #8]

	if (value)	*data |= mask;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d007      	beq.n	80094a4 <TCA_WritePin+0x64>
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	781a      	ldrb	r2, [r3, #0]
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	4313      	orrs	r3, r2
 800949c:	b2da      	uxtb	r2, r3
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	701a      	strb	r2, [r3, #0]
 80094a2:	e00b      	b.n	80094bc <TCA_WritePin+0x7c>
	else 		*data &= ~mask;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	b25a      	sxtb	r2, r3
 80094aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ae:	43db      	mvns	r3, r3
 80094b0:	b25b      	sxtb	r3, r3
 80094b2:	4013      	ands	r3, r2
 80094b4:	b25b      	sxtb	r3, r3
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 80094bc:	4b0b      	ldr	r3, [pc, #44]	@ (80094ec <TCA_WritePin+0xac>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	4618      	mov	r0, r3
 80094c2:	89bb      	ldrh	r3, [r7, #12]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	4619      	mov	r1, r3
 80094c8:	f7ff ff1e 	bl	8009308 <writeToRegister>
 80094cc:	e004      	b.n	80094d8 <TCA_WritePin+0x98>
	if(!is_initialised) return;
 80094ce:	bf00      	nop
 80094d0:	e002      	b.n	80094d8 <TCA_WritePin+0x98>
	if(pin > 15) return;
 80094d2:	bf00      	nop
 80094d4:	e000      	b.n	80094d8 <TCA_WritePin+0x98>
	if(value != 0 && value != 1) return;
 80094d6:	bf00      	nop
}
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	200005a4 	.word	0x200005a4
 80094e4:	20000020 	.word	0x20000020
 80094e8:	20000021 	.word	0x20000021
 80094ec:	20000024 	.word	0x20000024

080094f0 <Task_LOLA_INIT>:
 */

#include "Tasks.h"

int Task_LOLA_INIT()
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	af00      	add	r7, sp, #0
	return LOLA_Init(&LOLA1);
 80094f4:	4802      	ldr	r0, [pc, #8]	@ (8009500 <Task_LOLA_INIT+0x10>)
 80094f6:	f7fe fac3 	bl	8007a80 <LOLA_Init>
 80094fa:	4603      	mov	r3, r0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	200003b0 	.word	0x200003b0

08009504 <to_signed_12bit>:
 */

#include "stdint.h"

int16_t to_signed_12bit(uint16_t value)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	4603      	mov	r3, r0
 800950c:	80fb      	strh	r3, [r7, #6]
    // Mask to get the lower 12 bits
    value &= 0x0FFF;
 800950e:	88fb      	ldrh	r3, [r7, #6]
 8009510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009514:	80fb      	strh	r3, [r7, #6]

    // Check if the sign bit (bit 11) is set
    if (value & 0x0800) {
 8009516:	88fb      	ldrh	r3, [r7, #6]
 8009518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800951c:	2b00      	cmp	r3, #0
 800951e:	d005      	beq.n	800952c <to_signed_12bit+0x28>
        // If sign bit is set, make it negative
        value |= 0xF000; // Set the upper 4 bits to 1 to preserve the sign in 16-bit signed int
 8009520:	88fb      	ldrh	r3, [r7, #6]
 8009522:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8009526:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800952a:	80fb      	strh	r3, [r7, #6]
    }

    return (int16_t)value;
 800952c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr

0800953a <trimInt>:

int trimInt(int integer, int min, int max)
{
 800953a:	b480      	push	{r7}
 800953c:	b085      	sub	sp, #20
 800953e:	af00      	add	r7, sp, #0
 8009540:	60f8      	str	r0, [r7, #12]
 8009542:	60b9      	str	r1, [r7, #8]
 8009544:	607a      	str	r2, [r7, #4]
	if(integer>max) integer = max;
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	429a      	cmp	r2, r3
 800954c:	dd02      	ble.n	8009554 <trimInt+0x1a>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	e005      	b.n	8009560 <trimInt+0x26>
	else if(integer<min) integer = min;
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	429a      	cmp	r2, r3
 800955a:	da01      	bge.n	8009560 <trimInt+0x26>
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	60fb      	str	r3, [r7, #12]
	return integer;
 8009560:	68fb      	ldr	r3, [r7, #12]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	bc80      	pop	{r7}
 800956a:	4770      	bx	lr

0800956c <trimFloat>:

float trimFloat(float floating, float min, float max)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
	if(floating>max) floating = max;
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f7f7 fdd6 	bl	800112c <__aeabi_fcmpgt>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <trimFloat+0x20>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	60fb      	str	r3, [r7, #12]
 800958a:	e008      	b.n	800959e <trimFloat+0x32>
	else if(floating<min) floating = min;
 800958c:	68b9      	ldr	r1, [r7, #8]
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7f7 fdae 	bl	80010f0 <__aeabi_fcmplt>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <trimFloat+0x32>
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	60fb      	str	r3, [r7, #12]
	return floating;
 800959e:	68fb      	ldr	r3, [r7, #12]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <checkFloat>:

int checkFloat(float input, float max, float min)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
	return (input <= max)&&(input >= min);
 80095b4:	68b9      	ldr	r1, [r7, #8]
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f7f7 fda4 	bl	8001104 <__aeabi_fcmple>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d008      	beq.n	80095d4 <checkFloat+0x2c>
 80095c2:	6879      	ldr	r1, [r7, #4]
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f7f7 fda7 	bl	8001118 <__aeabi_fcmpge>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <checkFloat+0x2c>
 80095d0:	2301      	movs	r3, #1
 80095d2:	e000      	b.n	80095d6 <checkFloat+0x2e>
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <atof>:
 80095de:	2100      	movs	r1, #0
 80095e0:	f000 bf0e 	b.w	800a400 <strtod>

080095e4 <atoi>:
 80095e4:	220a      	movs	r2, #10
 80095e6:	2100      	movs	r1, #0
 80095e8:	f000 bf90 	b.w	800a50c <strtol>

080095ec <calloc>:
 80095ec:	4b02      	ldr	r3, [pc, #8]	@ (80095f8 <calloc+0xc>)
 80095ee:	460a      	mov	r2, r1
 80095f0:	4601      	mov	r1, r0
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	f000 b802 	b.w	80095fc <_calloc_r>
 80095f8:	200001a0 	.word	0x200001a0

080095fc <_calloc_r>:
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	fba1 5402 	umull	r5, r4, r1, r2
 8009602:	b93c      	cbnz	r4, 8009614 <_calloc_r+0x18>
 8009604:	4629      	mov	r1, r5
 8009606:	f000 f83f 	bl	8009688 <_malloc_r>
 800960a:	4606      	mov	r6, r0
 800960c:	b928      	cbnz	r0, 800961a <_calloc_r+0x1e>
 800960e:	2600      	movs	r6, #0
 8009610:	4630      	mov	r0, r6
 8009612:	bd70      	pop	{r4, r5, r6, pc}
 8009614:	220c      	movs	r2, #12
 8009616:	6002      	str	r2, [r0, #0]
 8009618:	e7f9      	b.n	800960e <_calloc_r+0x12>
 800961a:	462a      	mov	r2, r5
 800961c:	4621      	mov	r1, r4
 800961e:	f002 f801 	bl	800b624 <memset>
 8009622:	e7f5      	b.n	8009610 <_calloc_r+0x14>

08009624 <malloc>:
 8009624:	4b02      	ldr	r3, [pc, #8]	@ (8009630 <malloc+0xc>)
 8009626:	4601      	mov	r1, r0
 8009628:	6818      	ldr	r0, [r3, #0]
 800962a:	f000 b82d 	b.w	8009688 <_malloc_r>
 800962e:	bf00      	nop
 8009630:	200001a0 	.word	0x200001a0

08009634 <free>:
 8009634:	4b02      	ldr	r3, [pc, #8]	@ (8009640 <free+0xc>)
 8009636:	4601      	mov	r1, r0
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	f003 b919 	b.w	800c870 <_free_r>
 800963e:	bf00      	nop
 8009640:	200001a0 	.word	0x200001a0

08009644 <sbrk_aligned>:
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	4e0f      	ldr	r6, [pc, #60]	@ (8009684 <sbrk_aligned+0x40>)
 8009648:	460c      	mov	r4, r1
 800964a:	6831      	ldr	r1, [r6, #0]
 800964c:	4605      	mov	r5, r0
 800964e:	b911      	cbnz	r1, 8009656 <sbrk_aligned+0x12>
 8009650:	f002 fa44 	bl	800badc <_sbrk_r>
 8009654:	6030      	str	r0, [r6, #0]
 8009656:	4621      	mov	r1, r4
 8009658:	4628      	mov	r0, r5
 800965a:	f002 fa3f 	bl	800badc <_sbrk_r>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	d103      	bne.n	800966a <sbrk_aligned+0x26>
 8009662:	f04f 34ff 	mov.w	r4, #4294967295
 8009666:	4620      	mov	r0, r4
 8009668:	bd70      	pop	{r4, r5, r6, pc}
 800966a:	1cc4      	adds	r4, r0, #3
 800966c:	f024 0403 	bic.w	r4, r4, #3
 8009670:	42a0      	cmp	r0, r4
 8009672:	d0f8      	beq.n	8009666 <sbrk_aligned+0x22>
 8009674:	1a21      	subs	r1, r4, r0
 8009676:	4628      	mov	r0, r5
 8009678:	f002 fa30 	bl	800badc <_sbrk_r>
 800967c:	3001      	adds	r0, #1
 800967e:	d1f2      	bne.n	8009666 <sbrk_aligned+0x22>
 8009680:	e7ef      	b.n	8009662 <sbrk_aligned+0x1e>
 8009682:	bf00      	nop
 8009684:	200005fc 	.word	0x200005fc

08009688 <_malloc_r>:
 8009688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800968c:	1ccd      	adds	r5, r1, #3
 800968e:	f025 0503 	bic.w	r5, r5, #3
 8009692:	3508      	adds	r5, #8
 8009694:	2d0c      	cmp	r5, #12
 8009696:	bf38      	it	cc
 8009698:	250c      	movcc	r5, #12
 800969a:	2d00      	cmp	r5, #0
 800969c:	4606      	mov	r6, r0
 800969e:	db01      	blt.n	80096a4 <_malloc_r+0x1c>
 80096a0:	42a9      	cmp	r1, r5
 80096a2:	d904      	bls.n	80096ae <_malloc_r+0x26>
 80096a4:	230c      	movs	r3, #12
 80096a6:	6033      	str	r3, [r6, #0]
 80096a8:	2000      	movs	r0, #0
 80096aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009784 <_malloc_r+0xfc>
 80096b2:	f000 f869 	bl	8009788 <__malloc_lock>
 80096b6:	f8d8 3000 	ldr.w	r3, [r8]
 80096ba:	461c      	mov	r4, r3
 80096bc:	bb44      	cbnz	r4, 8009710 <_malloc_r+0x88>
 80096be:	4629      	mov	r1, r5
 80096c0:	4630      	mov	r0, r6
 80096c2:	f7ff ffbf 	bl	8009644 <sbrk_aligned>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	4604      	mov	r4, r0
 80096ca:	d158      	bne.n	800977e <_malloc_r+0xf6>
 80096cc:	f8d8 4000 	ldr.w	r4, [r8]
 80096d0:	4627      	mov	r7, r4
 80096d2:	2f00      	cmp	r7, #0
 80096d4:	d143      	bne.n	800975e <_malloc_r+0xd6>
 80096d6:	2c00      	cmp	r4, #0
 80096d8:	d04b      	beq.n	8009772 <_malloc_r+0xea>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	4639      	mov	r1, r7
 80096de:	4630      	mov	r0, r6
 80096e0:	eb04 0903 	add.w	r9, r4, r3
 80096e4:	f002 f9fa 	bl	800badc <_sbrk_r>
 80096e8:	4581      	cmp	r9, r0
 80096ea:	d142      	bne.n	8009772 <_malloc_r+0xea>
 80096ec:	6821      	ldr	r1, [r4, #0]
 80096ee:	4630      	mov	r0, r6
 80096f0:	1a6d      	subs	r5, r5, r1
 80096f2:	4629      	mov	r1, r5
 80096f4:	f7ff ffa6 	bl	8009644 <sbrk_aligned>
 80096f8:	3001      	adds	r0, #1
 80096fa:	d03a      	beq.n	8009772 <_malloc_r+0xea>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	442b      	add	r3, r5
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	f8d8 3000 	ldr.w	r3, [r8]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	bb62      	cbnz	r2, 8009764 <_malloc_r+0xdc>
 800970a:	f8c8 7000 	str.w	r7, [r8]
 800970e:	e00f      	b.n	8009730 <_malloc_r+0xa8>
 8009710:	6822      	ldr	r2, [r4, #0]
 8009712:	1b52      	subs	r2, r2, r5
 8009714:	d420      	bmi.n	8009758 <_malloc_r+0xd0>
 8009716:	2a0b      	cmp	r2, #11
 8009718:	d917      	bls.n	800974a <_malloc_r+0xc2>
 800971a:	1961      	adds	r1, r4, r5
 800971c:	42a3      	cmp	r3, r4
 800971e:	6025      	str	r5, [r4, #0]
 8009720:	bf18      	it	ne
 8009722:	6059      	strne	r1, [r3, #4]
 8009724:	6863      	ldr	r3, [r4, #4]
 8009726:	bf08      	it	eq
 8009728:	f8c8 1000 	streq.w	r1, [r8]
 800972c:	5162      	str	r2, [r4, r5]
 800972e:	604b      	str	r3, [r1, #4]
 8009730:	4630      	mov	r0, r6
 8009732:	f000 f82f 	bl	8009794 <__malloc_unlock>
 8009736:	f104 000b 	add.w	r0, r4, #11
 800973a:	1d23      	adds	r3, r4, #4
 800973c:	f020 0007 	bic.w	r0, r0, #7
 8009740:	1ac2      	subs	r2, r0, r3
 8009742:	bf1c      	itt	ne
 8009744:	1a1b      	subne	r3, r3, r0
 8009746:	50a3      	strne	r3, [r4, r2]
 8009748:	e7af      	b.n	80096aa <_malloc_r+0x22>
 800974a:	6862      	ldr	r2, [r4, #4]
 800974c:	42a3      	cmp	r3, r4
 800974e:	bf0c      	ite	eq
 8009750:	f8c8 2000 	streq.w	r2, [r8]
 8009754:	605a      	strne	r2, [r3, #4]
 8009756:	e7eb      	b.n	8009730 <_malloc_r+0xa8>
 8009758:	4623      	mov	r3, r4
 800975a:	6864      	ldr	r4, [r4, #4]
 800975c:	e7ae      	b.n	80096bc <_malloc_r+0x34>
 800975e:	463c      	mov	r4, r7
 8009760:	687f      	ldr	r7, [r7, #4]
 8009762:	e7b6      	b.n	80096d2 <_malloc_r+0x4a>
 8009764:	461a      	mov	r2, r3
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	42a3      	cmp	r3, r4
 800976a:	d1fb      	bne.n	8009764 <_malloc_r+0xdc>
 800976c:	2300      	movs	r3, #0
 800976e:	6053      	str	r3, [r2, #4]
 8009770:	e7de      	b.n	8009730 <_malloc_r+0xa8>
 8009772:	230c      	movs	r3, #12
 8009774:	4630      	mov	r0, r6
 8009776:	6033      	str	r3, [r6, #0]
 8009778:	f000 f80c 	bl	8009794 <__malloc_unlock>
 800977c:	e794      	b.n	80096a8 <_malloc_r+0x20>
 800977e:	6005      	str	r5, [r0, #0]
 8009780:	e7d6      	b.n	8009730 <_malloc_r+0xa8>
 8009782:	bf00      	nop
 8009784:	20000600 	.word	0x20000600

08009788 <__malloc_lock>:
 8009788:	4801      	ldr	r0, [pc, #4]	@ (8009790 <__malloc_lock+0x8>)
 800978a:	f002 b9f4 	b.w	800bb76 <__retarget_lock_acquire_recursive>
 800978e:	bf00      	nop
 8009790:	20000744 	.word	0x20000744

08009794 <__malloc_unlock>:
 8009794:	4801      	ldr	r0, [pc, #4]	@ (800979c <__malloc_unlock+0x8>)
 8009796:	f002 b9ef 	b.w	800bb78 <__retarget_lock_release_recursive>
 800979a:	bf00      	nop
 800979c:	20000744 	.word	0x20000744

080097a0 <realloc>:
 80097a0:	4b02      	ldr	r3, [pc, #8]	@ (80097ac <realloc+0xc>)
 80097a2:	460a      	mov	r2, r1
 80097a4:	4601      	mov	r1, r0
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	f000 b802 	b.w	80097b0 <_realloc_r>
 80097ac:	200001a0 	.word	0x200001a0

080097b0 <_realloc_r>:
 80097b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b4:	4680      	mov	r8, r0
 80097b6:	4615      	mov	r5, r2
 80097b8:	460c      	mov	r4, r1
 80097ba:	b921      	cbnz	r1, 80097c6 <_realloc_r+0x16>
 80097bc:	4611      	mov	r1, r2
 80097be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097c2:	f7ff bf61 	b.w	8009688 <_malloc_r>
 80097c6:	b92a      	cbnz	r2, 80097d4 <_realloc_r+0x24>
 80097c8:	f003 f852 	bl	800c870 <_free_r>
 80097cc:	2400      	movs	r4, #0
 80097ce:	4620      	mov	r0, r4
 80097d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d4:	f004 f886 	bl	800d8e4 <_malloc_usable_size_r>
 80097d8:	4285      	cmp	r5, r0
 80097da:	4606      	mov	r6, r0
 80097dc:	d802      	bhi.n	80097e4 <_realloc_r+0x34>
 80097de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80097e2:	d8f4      	bhi.n	80097ce <_realloc_r+0x1e>
 80097e4:	4629      	mov	r1, r5
 80097e6:	4640      	mov	r0, r8
 80097e8:	f7ff ff4e 	bl	8009688 <_malloc_r>
 80097ec:	4607      	mov	r7, r0
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d0ec      	beq.n	80097cc <_realloc_r+0x1c>
 80097f2:	42b5      	cmp	r5, r6
 80097f4:	462a      	mov	r2, r5
 80097f6:	4621      	mov	r1, r4
 80097f8:	bf28      	it	cs
 80097fa:	4632      	movcs	r2, r6
 80097fc:	f002 f9d3 	bl	800bba6 <memcpy>
 8009800:	4621      	mov	r1, r4
 8009802:	4640      	mov	r0, r8
 8009804:	f003 f834 	bl	800c870 <_free_r>
 8009808:	463c      	mov	r4, r7
 800980a:	e7e0      	b.n	80097ce <_realloc_r+0x1e>

0800980c <sulp>:
 800980c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009810:	460f      	mov	r7, r1
 8009812:	4690      	mov	r8, r2
 8009814:	f003 ff32 	bl	800d67c <__ulp>
 8009818:	4604      	mov	r4, r0
 800981a:	460d      	mov	r5, r1
 800981c:	f1b8 0f00 	cmp.w	r8, #0
 8009820:	d011      	beq.n	8009846 <sulp+0x3a>
 8009822:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009826:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800982a:	2b00      	cmp	r3, #0
 800982c:	dd0b      	ble.n	8009846 <sulp+0x3a>
 800982e:	2400      	movs	r4, #0
 8009830:	051b      	lsls	r3, r3, #20
 8009832:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009836:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800983a:	4622      	mov	r2, r4
 800983c:	462b      	mov	r3, r5
 800983e:	f7f6 fe63 	bl	8000508 <__aeabi_dmul>
 8009842:	4604      	mov	r4, r0
 8009844:	460d      	mov	r5, r1
 8009846:	4620      	mov	r0, r4
 8009848:	4629      	mov	r1, r5
 800984a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009850 <_strtod_l>:
 8009850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009854:	b09f      	sub	sp, #124	@ 0x7c
 8009856:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009858:	2200      	movs	r2, #0
 800985a:	460c      	mov	r4, r1
 800985c:	921a      	str	r2, [sp, #104]	@ 0x68
 800985e:	f04f 0a00 	mov.w	sl, #0
 8009862:	f04f 0b00 	mov.w	fp, #0
 8009866:	460a      	mov	r2, r1
 8009868:	9005      	str	r0, [sp, #20]
 800986a:	9219      	str	r2, [sp, #100]	@ 0x64
 800986c:	7811      	ldrb	r1, [r2, #0]
 800986e:	292b      	cmp	r1, #43	@ 0x2b
 8009870:	d048      	beq.n	8009904 <_strtod_l+0xb4>
 8009872:	d836      	bhi.n	80098e2 <_strtod_l+0x92>
 8009874:	290d      	cmp	r1, #13
 8009876:	d830      	bhi.n	80098da <_strtod_l+0x8a>
 8009878:	2908      	cmp	r1, #8
 800987a:	d830      	bhi.n	80098de <_strtod_l+0x8e>
 800987c:	2900      	cmp	r1, #0
 800987e:	d039      	beq.n	80098f4 <_strtod_l+0xa4>
 8009880:	2200      	movs	r2, #0
 8009882:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009884:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009886:	782a      	ldrb	r2, [r5, #0]
 8009888:	2a30      	cmp	r2, #48	@ 0x30
 800988a:	f040 80b1 	bne.w	80099f0 <_strtod_l+0x1a0>
 800988e:	786a      	ldrb	r2, [r5, #1]
 8009890:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009894:	2a58      	cmp	r2, #88	@ 0x58
 8009896:	d16c      	bne.n	8009972 <_strtod_l+0x122>
 8009898:	9302      	str	r3, [sp, #8]
 800989a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800989c:	4a8e      	ldr	r2, [pc, #568]	@ (8009ad8 <_strtod_l+0x288>)
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	ab1a      	add	r3, sp, #104	@ 0x68
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	9805      	ldr	r0, [sp, #20]
 80098a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80098a8:	a919      	add	r1, sp, #100	@ 0x64
 80098aa:	f003 f891 	bl	800c9d0 <__gethex>
 80098ae:	f010 060f 	ands.w	r6, r0, #15
 80098b2:	4604      	mov	r4, r0
 80098b4:	d005      	beq.n	80098c2 <_strtod_l+0x72>
 80098b6:	2e06      	cmp	r6, #6
 80098b8:	d126      	bne.n	8009908 <_strtod_l+0xb8>
 80098ba:	2300      	movs	r3, #0
 80098bc:	3501      	adds	r5, #1
 80098be:	9519      	str	r5, [sp, #100]	@ 0x64
 80098c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f040 8584 	bne.w	800a3d2 <_strtod_l+0xb82>
 80098ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098cc:	b1bb      	cbz	r3, 80098fe <_strtod_l+0xae>
 80098ce:	4650      	mov	r0, sl
 80098d0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80098d4:	b01f      	add	sp, #124	@ 0x7c
 80098d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098da:	2920      	cmp	r1, #32
 80098dc:	d1d0      	bne.n	8009880 <_strtod_l+0x30>
 80098de:	3201      	adds	r2, #1
 80098e0:	e7c3      	b.n	800986a <_strtod_l+0x1a>
 80098e2:	292d      	cmp	r1, #45	@ 0x2d
 80098e4:	d1cc      	bne.n	8009880 <_strtod_l+0x30>
 80098e6:	2101      	movs	r1, #1
 80098e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80098ea:	1c51      	adds	r1, r2, #1
 80098ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80098ee:	7852      	ldrb	r2, [r2, #1]
 80098f0:	2a00      	cmp	r2, #0
 80098f2:	d1c7      	bne.n	8009884 <_strtod_l+0x34>
 80098f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80098f6:	9419      	str	r4, [sp, #100]	@ 0x64
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f040 8568 	bne.w	800a3ce <_strtod_l+0xb7e>
 80098fe:	4650      	mov	r0, sl
 8009900:	4659      	mov	r1, fp
 8009902:	e7e7      	b.n	80098d4 <_strtod_l+0x84>
 8009904:	2100      	movs	r1, #0
 8009906:	e7ef      	b.n	80098e8 <_strtod_l+0x98>
 8009908:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800990a:	b13a      	cbz	r2, 800991c <_strtod_l+0xcc>
 800990c:	2135      	movs	r1, #53	@ 0x35
 800990e:	a81c      	add	r0, sp, #112	@ 0x70
 8009910:	f003 ffa4 	bl	800d85c <__copybits>
 8009914:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009916:	9805      	ldr	r0, [sp, #20]
 8009918:	f003 fb7e 	bl	800d018 <_Bfree>
 800991c:	3e01      	subs	r6, #1
 800991e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009920:	2e04      	cmp	r6, #4
 8009922:	d806      	bhi.n	8009932 <_strtod_l+0xe2>
 8009924:	e8df f006 	tbb	[pc, r6]
 8009928:	201d0314 	.word	0x201d0314
 800992c:	14          	.byte	0x14
 800992d:	00          	.byte	0x00
 800992e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009932:	05e1      	lsls	r1, r4, #23
 8009934:	bf48      	it	mi
 8009936:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800993a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800993e:	0d1b      	lsrs	r3, r3, #20
 8009940:	051b      	lsls	r3, r3, #20
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1bd      	bne.n	80098c2 <_strtod_l+0x72>
 8009946:	f002 f8eb 	bl	800bb20 <__errno>
 800994a:	2322      	movs	r3, #34	@ 0x22
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	e7b8      	b.n	80098c2 <_strtod_l+0x72>
 8009950:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009954:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009958:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800995c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009960:	e7e7      	b.n	8009932 <_strtod_l+0xe2>
 8009962:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009adc <_strtod_l+0x28c>
 8009966:	e7e4      	b.n	8009932 <_strtod_l+0xe2>
 8009968:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800996c:	f04f 3aff 	mov.w	sl, #4294967295
 8009970:	e7df      	b.n	8009932 <_strtod_l+0xe2>
 8009972:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009974:	1c5a      	adds	r2, r3, #1
 8009976:	9219      	str	r2, [sp, #100]	@ 0x64
 8009978:	785b      	ldrb	r3, [r3, #1]
 800997a:	2b30      	cmp	r3, #48	@ 0x30
 800997c:	d0f9      	beq.n	8009972 <_strtod_l+0x122>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d09f      	beq.n	80098c2 <_strtod_l+0x72>
 8009982:	2301      	movs	r3, #1
 8009984:	9309      	str	r3, [sp, #36]	@ 0x24
 8009986:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009988:	220a      	movs	r2, #10
 800998a:	930c      	str	r3, [sp, #48]	@ 0x30
 800998c:	2300      	movs	r3, #0
 800998e:	461f      	mov	r7, r3
 8009990:	9308      	str	r3, [sp, #32]
 8009992:	930a      	str	r3, [sp, #40]	@ 0x28
 8009994:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009996:	7805      	ldrb	r5, [r0, #0]
 8009998:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800999c:	b2d9      	uxtb	r1, r3
 800999e:	2909      	cmp	r1, #9
 80099a0:	d928      	bls.n	80099f4 <_strtod_l+0x1a4>
 80099a2:	2201      	movs	r2, #1
 80099a4:	494e      	ldr	r1, [pc, #312]	@ (8009ae0 <_strtod_l+0x290>)
 80099a6:	f002 f839 	bl	800ba1c <strncmp>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d032      	beq.n	8009a14 <_strtod_l+0x1c4>
 80099ae:	2000      	movs	r0, #0
 80099b0:	462a      	mov	r2, r5
 80099b2:	4681      	mov	r9, r0
 80099b4:	463d      	mov	r5, r7
 80099b6:	4603      	mov	r3, r0
 80099b8:	2a65      	cmp	r2, #101	@ 0x65
 80099ba:	d001      	beq.n	80099c0 <_strtod_l+0x170>
 80099bc:	2a45      	cmp	r2, #69	@ 0x45
 80099be:	d114      	bne.n	80099ea <_strtod_l+0x19a>
 80099c0:	b91d      	cbnz	r5, 80099ca <_strtod_l+0x17a>
 80099c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099c4:	4302      	orrs	r2, r0
 80099c6:	d095      	beq.n	80098f4 <_strtod_l+0xa4>
 80099c8:	2500      	movs	r5, #0
 80099ca:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80099cc:	1c62      	adds	r2, r4, #1
 80099ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80099d0:	7862      	ldrb	r2, [r4, #1]
 80099d2:	2a2b      	cmp	r2, #43	@ 0x2b
 80099d4:	d077      	beq.n	8009ac6 <_strtod_l+0x276>
 80099d6:	2a2d      	cmp	r2, #45	@ 0x2d
 80099d8:	d07b      	beq.n	8009ad2 <_strtod_l+0x282>
 80099da:	f04f 0c00 	mov.w	ip, #0
 80099de:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80099e2:	2909      	cmp	r1, #9
 80099e4:	f240 8082 	bls.w	8009aec <_strtod_l+0x29c>
 80099e8:	9419      	str	r4, [sp, #100]	@ 0x64
 80099ea:	f04f 0800 	mov.w	r8, #0
 80099ee:	e0a2      	b.n	8009b36 <_strtod_l+0x2e6>
 80099f0:	2300      	movs	r3, #0
 80099f2:	e7c7      	b.n	8009984 <_strtod_l+0x134>
 80099f4:	2f08      	cmp	r7, #8
 80099f6:	bfd5      	itete	le
 80099f8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80099fa:	9908      	ldrgt	r1, [sp, #32]
 80099fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8009a00:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009a04:	f100 0001 	add.w	r0, r0, #1
 8009a08:	bfd4      	ite	le
 8009a0a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009a0c:	9308      	strgt	r3, [sp, #32]
 8009a0e:	3701      	adds	r7, #1
 8009a10:	9019      	str	r0, [sp, #100]	@ 0x64
 8009a12:	e7bf      	b.n	8009994 <_strtod_l+0x144>
 8009a14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a1a:	785a      	ldrb	r2, [r3, #1]
 8009a1c:	b37f      	cbz	r7, 8009a7e <_strtod_l+0x22e>
 8009a1e:	4681      	mov	r9, r0
 8009a20:	463d      	mov	r5, r7
 8009a22:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009a26:	2b09      	cmp	r3, #9
 8009a28:	d912      	bls.n	8009a50 <_strtod_l+0x200>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e7c4      	b.n	80099b8 <_strtod_l+0x168>
 8009a2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a30:	3001      	adds	r0, #1
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a36:	785a      	ldrb	r2, [r3, #1]
 8009a38:	2a30      	cmp	r2, #48	@ 0x30
 8009a3a:	d0f8      	beq.n	8009a2e <_strtod_l+0x1de>
 8009a3c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	f200 84cb 	bhi.w	800a3dc <_strtod_l+0xb8c>
 8009a46:	4681      	mov	r9, r0
 8009a48:	2000      	movs	r0, #0
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a4e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a50:	3a30      	subs	r2, #48	@ 0x30
 8009a52:	f100 0301 	add.w	r3, r0, #1
 8009a56:	d02a      	beq.n	8009aae <_strtod_l+0x25e>
 8009a58:	4499      	add	r9, r3
 8009a5a:	210a      	movs	r1, #10
 8009a5c:	462b      	mov	r3, r5
 8009a5e:	eb00 0c05 	add.w	ip, r0, r5
 8009a62:	4563      	cmp	r3, ip
 8009a64:	d10d      	bne.n	8009a82 <_strtod_l+0x232>
 8009a66:	1c69      	adds	r1, r5, #1
 8009a68:	4401      	add	r1, r0
 8009a6a:	4428      	add	r0, r5
 8009a6c:	2808      	cmp	r0, #8
 8009a6e:	dc16      	bgt.n	8009a9e <_strtod_l+0x24e>
 8009a70:	230a      	movs	r3, #10
 8009a72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009a74:	fb03 2300 	mla	r3, r3, r0, r2
 8009a78:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	e018      	b.n	8009ab0 <_strtod_l+0x260>
 8009a7e:	4638      	mov	r0, r7
 8009a80:	e7da      	b.n	8009a38 <_strtod_l+0x1e8>
 8009a82:	2b08      	cmp	r3, #8
 8009a84:	f103 0301 	add.w	r3, r3, #1
 8009a88:	dc03      	bgt.n	8009a92 <_strtod_l+0x242>
 8009a8a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009a8c:	434e      	muls	r6, r1
 8009a8e:	960a      	str	r6, [sp, #40]	@ 0x28
 8009a90:	e7e7      	b.n	8009a62 <_strtod_l+0x212>
 8009a92:	2b10      	cmp	r3, #16
 8009a94:	bfde      	ittt	le
 8009a96:	9e08      	ldrle	r6, [sp, #32]
 8009a98:	434e      	mulle	r6, r1
 8009a9a:	9608      	strle	r6, [sp, #32]
 8009a9c:	e7e1      	b.n	8009a62 <_strtod_l+0x212>
 8009a9e:	280f      	cmp	r0, #15
 8009aa0:	dceb      	bgt.n	8009a7a <_strtod_l+0x22a>
 8009aa2:	230a      	movs	r3, #10
 8009aa4:	9808      	ldr	r0, [sp, #32]
 8009aa6:	fb03 2300 	mla	r3, r3, r0, r2
 8009aaa:	9308      	str	r3, [sp, #32]
 8009aac:	e7e5      	b.n	8009a7a <_strtod_l+0x22a>
 8009aae:	4629      	mov	r1, r5
 8009ab0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ab2:	460d      	mov	r5, r1
 8009ab4:	1c50      	adds	r0, r2, #1
 8009ab6:	9019      	str	r0, [sp, #100]	@ 0x64
 8009ab8:	7852      	ldrb	r2, [r2, #1]
 8009aba:	4618      	mov	r0, r3
 8009abc:	e7b1      	b.n	8009a22 <_strtod_l+0x1d2>
 8009abe:	f04f 0900 	mov.w	r9, #0
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e77d      	b.n	80099c2 <_strtod_l+0x172>
 8009ac6:	f04f 0c00 	mov.w	ip, #0
 8009aca:	1ca2      	adds	r2, r4, #2
 8009acc:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ace:	78a2      	ldrb	r2, [r4, #2]
 8009ad0:	e785      	b.n	80099de <_strtod_l+0x18e>
 8009ad2:	f04f 0c01 	mov.w	ip, #1
 8009ad6:	e7f8      	b.n	8009aca <_strtod_l+0x27a>
 8009ad8:	0800f0ec 	.word	0x0800f0ec
 8009adc:	7ff00000 	.word	0x7ff00000
 8009ae0:	0800f0d6 	.word	0x0800f0d6
 8009ae4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ae6:	1c51      	adds	r1, r2, #1
 8009ae8:	9119      	str	r1, [sp, #100]	@ 0x64
 8009aea:	7852      	ldrb	r2, [r2, #1]
 8009aec:	2a30      	cmp	r2, #48	@ 0x30
 8009aee:	d0f9      	beq.n	8009ae4 <_strtod_l+0x294>
 8009af0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009af4:	2908      	cmp	r1, #8
 8009af6:	f63f af78 	bhi.w	80099ea <_strtod_l+0x19a>
 8009afa:	f04f 080a 	mov.w	r8, #10
 8009afe:	3a30      	subs	r2, #48	@ 0x30
 8009b00:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b04:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009b06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b08:	1c56      	adds	r6, r2, #1
 8009b0a:	9619      	str	r6, [sp, #100]	@ 0x64
 8009b0c:	7852      	ldrb	r2, [r2, #1]
 8009b0e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009b12:	f1be 0f09 	cmp.w	lr, #9
 8009b16:	d939      	bls.n	8009b8c <_strtod_l+0x33c>
 8009b18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009b1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009b1e:	1a76      	subs	r6, r6, r1
 8009b20:	2e08      	cmp	r6, #8
 8009b22:	dc03      	bgt.n	8009b2c <_strtod_l+0x2dc>
 8009b24:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009b26:	4588      	cmp	r8, r1
 8009b28:	bfa8      	it	ge
 8009b2a:	4688      	movge	r8, r1
 8009b2c:	f1bc 0f00 	cmp.w	ip, #0
 8009b30:	d001      	beq.n	8009b36 <_strtod_l+0x2e6>
 8009b32:	f1c8 0800 	rsb	r8, r8, #0
 8009b36:	2d00      	cmp	r5, #0
 8009b38:	d14e      	bne.n	8009bd8 <_strtod_l+0x388>
 8009b3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b3c:	4308      	orrs	r0, r1
 8009b3e:	f47f aec0 	bne.w	80098c2 <_strtod_l+0x72>
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f47f aed6 	bne.w	80098f4 <_strtod_l+0xa4>
 8009b48:	2a69      	cmp	r2, #105	@ 0x69
 8009b4a:	d028      	beq.n	8009b9e <_strtod_l+0x34e>
 8009b4c:	dc25      	bgt.n	8009b9a <_strtod_l+0x34a>
 8009b4e:	2a49      	cmp	r2, #73	@ 0x49
 8009b50:	d025      	beq.n	8009b9e <_strtod_l+0x34e>
 8009b52:	2a4e      	cmp	r2, #78	@ 0x4e
 8009b54:	f47f aece 	bne.w	80098f4 <_strtod_l+0xa4>
 8009b58:	499a      	ldr	r1, [pc, #616]	@ (8009dc4 <_strtod_l+0x574>)
 8009b5a:	a819      	add	r0, sp, #100	@ 0x64
 8009b5c:	f003 f95a 	bl	800ce14 <__match>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	f43f aec7 	beq.w	80098f4 <_strtod_l+0xa4>
 8009b66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	2b28      	cmp	r3, #40	@ 0x28
 8009b6c:	d12e      	bne.n	8009bcc <_strtod_l+0x37c>
 8009b6e:	4996      	ldr	r1, [pc, #600]	@ (8009dc8 <_strtod_l+0x578>)
 8009b70:	aa1c      	add	r2, sp, #112	@ 0x70
 8009b72:	a819      	add	r0, sp, #100	@ 0x64
 8009b74:	f003 f962 	bl	800ce3c <__hexnan>
 8009b78:	2805      	cmp	r0, #5
 8009b7a:	d127      	bne.n	8009bcc <_strtod_l+0x37c>
 8009b7c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009b7e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009b82:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009b86:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009b8a:	e69a      	b.n	80098c2 <_strtod_l+0x72>
 8009b8c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009b8e:	fb08 2101 	mla	r1, r8, r1, r2
 8009b92:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009b96:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b98:	e7b5      	b.n	8009b06 <_strtod_l+0x2b6>
 8009b9a:	2a6e      	cmp	r2, #110	@ 0x6e
 8009b9c:	e7da      	b.n	8009b54 <_strtod_l+0x304>
 8009b9e:	498b      	ldr	r1, [pc, #556]	@ (8009dcc <_strtod_l+0x57c>)
 8009ba0:	a819      	add	r0, sp, #100	@ 0x64
 8009ba2:	f003 f937 	bl	800ce14 <__match>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	f43f aea4 	beq.w	80098f4 <_strtod_l+0xa4>
 8009bac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bae:	4988      	ldr	r1, [pc, #544]	@ (8009dd0 <_strtod_l+0x580>)
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	a819      	add	r0, sp, #100	@ 0x64
 8009bb4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009bb6:	f003 f92d 	bl	800ce14 <__match>
 8009bba:	b910      	cbnz	r0, 8009bc2 <_strtod_l+0x372>
 8009bbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009bc2:	f04f 0a00 	mov.w	sl, #0
 8009bc6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009dd4 <_strtod_l+0x584>
 8009bca:	e67a      	b.n	80098c2 <_strtod_l+0x72>
 8009bcc:	4882      	ldr	r0, [pc, #520]	@ (8009dd8 <_strtod_l+0x588>)
 8009bce:	f001 fff9 	bl	800bbc4 <nan>
 8009bd2:	4682      	mov	sl, r0
 8009bd4:	468b      	mov	fp, r1
 8009bd6:	e674      	b.n	80098c2 <_strtod_l+0x72>
 8009bd8:	eba8 0309 	sub.w	r3, r8, r9
 8009bdc:	2f00      	cmp	r7, #0
 8009bde:	bf08      	it	eq
 8009be0:	462f      	moveq	r7, r5
 8009be2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009be4:	2d10      	cmp	r5, #16
 8009be6:	462c      	mov	r4, r5
 8009be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bea:	bfa8      	it	ge
 8009bec:	2410      	movge	r4, #16
 8009bee:	f7f6 fc11 	bl	8000414 <__aeabi_ui2d>
 8009bf2:	2d09      	cmp	r5, #9
 8009bf4:	4682      	mov	sl, r0
 8009bf6:	468b      	mov	fp, r1
 8009bf8:	dc11      	bgt.n	8009c1e <_strtod_l+0x3ce>
 8009bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f43f ae60 	beq.w	80098c2 <_strtod_l+0x72>
 8009c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c04:	dd76      	ble.n	8009cf4 <_strtod_l+0x4a4>
 8009c06:	2b16      	cmp	r3, #22
 8009c08:	dc5d      	bgt.n	8009cc6 <_strtod_l+0x476>
 8009c0a:	4974      	ldr	r1, [pc, #464]	@ (8009ddc <_strtod_l+0x58c>)
 8009c0c:	4652      	mov	r2, sl
 8009c0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c12:	465b      	mov	r3, fp
 8009c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c18:	f7f6 fc76 	bl	8000508 <__aeabi_dmul>
 8009c1c:	e7d9      	b.n	8009bd2 <_strtod_l+0x382>
 8009c1e:	4b6f      	ldr	r3, [pc, #444]	@ (8009ddc <_strtod_l+0x58c>)
 8009c20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009c28:	f7f6 fc6e 	bl	8000508 <__aeabi_dmul>
 8009c2c:	4682      	mov	sl, r0
 8009c2e:	9808      	ldr	r0, [sp, #32]
 8009c30:	468b      	mov	fp, r1
 8009c32:	f7f6 fbef 	bl	8000414 <__aeabi_ui2d>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4650      	mov	r0, sl
 8009c3c:	4659      	mov	r1, fp
 8009c3e:	f7f6 faad 	bl	800019c <__adddf3>
 8009c42:	2d0f      	cmp	r5, #15
 8009c44:	4682      	mov	sl, r0
 8009c46:	468b      	mov	fp, r1
 8009c48:	ddd7      	ble.n	8009bfa <_strtod_l+0x3aa>
 8009c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c4c:	1b2c      	subs	r4, r5, r4
 8009c4e:	441c      	add	r4, r3
 8009c50:	2c00      	cmp	r4, #0
 8009c52:	f340 8096 	ble.w	8009d82 <_strtod_l+0x532>
 8009c56:	f014 030f 	ands.w	r3, r4, #15
 8009c5a:	d00a      	beq.n	8009c72 <_strtod_l+0x422>
 8009c5c:	495f      	ldr	r1, [pc, #380]	@ (8009ddc <_strtod_l+0x58c>)
 8009c5e:	4652      	mov	r2, sl
 8009c60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c68:	465b      	mov	r3, fp
 8009c6a:	f7f6 fc4d 	bl	8000508 <__aeabi_dmul>
 8009c6e:	4682      	mov	sl, r0
 8009c70:	468b      	mov	fp, r1
 8009c72:	f034 040f 	bics.w	r4, r4, #15
 8009c76:	d073      	beq.n	8009d60 <_strtod_l+0x510>
 8009c78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009c7c:	dd48      	ble.n	8009d10 <_strtod_l+0x4c0>
 8009c7e:	2400      	movs	r4, #0
 8009c80:	46a0      	mov	r8, r4
 8009c82:	46a1      	mov	r9, r4
 8009c84:	940a      	str	r4, [sp, #40]	@ 0x28
 8009c86:	2322      	movs	r3, #34	@ 0x22
 8009c88:	f04f 0a00 	mov.w	sl, #0
 8009c8c:	9a05      	ldr	r2, [sp, #20]
 8009c8e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009dd4 <_strtod_l+0x584>
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f43f ae13 	beq.w	80098c2 <_strtod_l+0x72>
 8009c9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c9e:	9805      	ldr	r0, [sp, #20]
 8009ca0:	f003 f9ba 	bl	800d018 <_Bfree>
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	9805      	ldr	r0, [sp, #20]
 8009ca8:	f003 f9b6 	bl	800d018 <_Bfree>
 8009cac:	4641      	mov	r1, r8
 8009cae:	9805      	ldr	r0, [sp, #20]
 8009cb0:	f003 f9b2 	bl	800d018 <_Bfree>
 8009cb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009cb6:	9805      	ldr	r0, [sp, #20]
 8009cb8:	f003 f9ae 	bl	800d018 <_Bfree>
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	9805      	ldr	r0, [sp, #20]
 8009cc0:	f003 f9aa 	bl	800d018 <_Bfree>
 8009cc4:	e5fd      	b.n	80098c2 <_strtod_l+0x72>
 8009cc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	dbbc      	blt.n	8009c4a <_strtod_l+0x3fa>
 8009cd0:	4c42      	ldr	r4, [pc, #264]	@ (8009ddc <_strtod_l+0x58c>)
 8009cd2:	f1c5 050f 	rsb	r5, r5, #15
 8009cd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009cda:	4652      	mov	r2, sl
 8009cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ce0:	465b      	mov	r3, fp
 8009ce2:	f7f6 fc11 	bl	8000508 <__aeabi_dmul>
 8009ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ce8:	1b5d      	subs	r5, r3, r5
 8009cea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009cee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009cf2:	e791      	b.n	8009c18 <_strtod_l+0x3c8>
 8009cf4:	3316      	adds	r3, #22
 8009cf6:	dba8      	blt.n	8009c4a <_strtod_l+0x3fa>
 8009cf8:	4b38      	ldr	r3, [pc, #224]	@ (8009ddc <_strtod_l+0x58c>)
 8009cfa:	eba9 0808 	sub.w	r8, r9, r8
 8009cfe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009d02:	4650      	mov	r0, sl
 8009d04:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009d08:	4659      	mov	r1, fp
 8009d0a:	f7f6 fd27 	bl	800075c <__aeabi_ddiv>
 8009d0e:	e760      	b.n	8009bd2 <_strtod_l+0x382>
 8009d10:	4b33      	ldr	r3, [pc, #204]	@ (8009de0 <_strtod_l+0x590>)
 8009d12:	4650      	mov	r0, sl
 8009d14:	9308      	str	r3, [sp, #32]
 8009d16:	2300      	movs	r3, #0
 8009d18:	4659      	mov	r1, fp
 8009d1a:	461e      	mov	r6, r3
 8009d1c:	1124      	asrs	r4, r4, #4
 8009d1e:	2c01      	cmp	r4, #1
 8009d20:	dc21      	bgt.n	8009d66 <_strtod_l+0x516>
 8009d22:	b10b      	cbz	r3, 8009d28 <_strtod_l+0x4d8>
 8009d24:	4682      	mov	sl, r0
 8009d26:	468b      	mov	fp, r1
 8009d28:	492d      	ldr	r1, [pc, #180]	@ (8009de0 <_strtod_l+0x590>)
 8009d2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009d2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009d32:	4652      	mov	r2, sl
 8009d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d38:	465b      	mov	r3, fp
 8009d3a:	f7f6 fbe5 	bl	8000508 <__aeabi_dmul>
 8009d3e:	4b25      	ldr	r3, [pc, #148]	@ (8009dd4 <_strtod_l+0x584>)
 8009d40:	460a      	mov	r2, r1
 8009d42:	400b      	ands	r3, r1
 8009d44:	4927      	ldr	r1, [pc, #156]	@ (8009de4 <_strtod_l+0x594>)
 8009d46:	4682      	mov	sl, r0
 8009d48:	428b      	cmp	r3, r1
 8009d4a:	d898      	bhi.n	8009c7e <_strtod_l+0x42e>
 8009d4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009d50:	428b      	cmp	r3, r1
 8009d52:	bf86      	itte	hi
 8009d54:	f04f 3aff 	movhi.w	sl, #4294967295
 8009d58:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009de8 <_strtod_l+0x598>
 8009d5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009d60:	2300      	movs	r3, #0
 8009d62:	9308      	str	r3, [sp, #32]
 8009d64:	e07a      	b.n	8009e5c <_strtod_l+0x60c>
 8009d66:	07e2      	lsls	r2, r4, #31
 8009d68:	d505      	bpl.n	8009d76 <_strtod_l+0x526>
 8009d6a:	9b08      	ldr	r3, [sp, #32]
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	f7f6 fbca 	bl	8000508 <__aeabi_dmul>
 8009d74:	2301      	movs	r3, #1
 8009d76:	9a08      	ldr	r2, [sp, #32]
 8009d78:	3601      	adds	r6, #1
 8009d7a:	3208      	adds	r2, #8
 8009d7c:	1064      	asrs	r4, r4, #1
 8009d7e:	9208      	str	r2, [sp, #32]
 8009d80:	e7cd      	b.n	8009d1e <_strtod_l+0x4ce>
 8009d82:	d0ed      	beq.n	8009d60 <_strtod_l+0x510>
 8009d84:	4264      	negs	r4, r4
 8009d86:	f014 020f 	ands.w	r2, r4, #15
 8009d8a:	d00a      	beq.n	8009da2 <_strtod_l+0x552>
 8009d8c:	4b13      	ldr	r3, [pc, #76]	@ (8009ddc <_strtod_l+0x58c>)
 8009d8e:	4650      	mov	r0, sl
 8009d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d94:	4659      	mov	r1, fp
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	f7f6 fcdf 	bl	800075c <__aeabi_ddiv>
 8009d9e:	4682      	mov	sl, r0
 8009da0:	468b      	mov	fp, r1
 8009da2:	1124      	asrs	r4, r4, #4
 8009da4:	d0dc      	beq.n	8009d60 <_strtod_l+0x510>
 8009da6:	2c1f      	cmp	r4, #31
 8009da8:	dd20      	ble.n	8009dec <_strtod_l+0x59c>
 8009daa:	2400      	movs	r4, #0
 8009dac:	46a0      	mov	r8, r4
 8009dae:	46a1      	mov	r9, r4
 8009db0:	940a      	str	r4, [sp, #40]	@ 0x28
 8009db2:	2322      	movs	r3, #34	@ 0x22
 8009db4:	9a05      	ldr	r2, [sp, #20]
 8009db6:	f04f 0a00 	mov.w	sl, #0
 8009dba:	f04f 0b00 	mov.w	fp, #0
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	e768      	b.n	8009c94 <_strtod_l+0x444>
 8009dc2:	bf00      	nop
 8009dc4:	0800f236 	.word	0x0800f236
 8009dc8:	0800f0d8 	.word	0x0800f0d8
 8009dcc:	0800f22e 	.word	0x0800f22e
 8009dd0:	0800f8fe 	.word	0x0800f8fe
 8009dd4:	7ff00000 	.word	0x7ff00000
 8009dd8:	0800fb8c 	.word	0x0800fb8c
 8009ddc:	0800fa78 	.word	0x0800fa78
 8009de0:	0800fa50 	.word	0x0800fa50
 8009de4:	7ca00000 	.word	0x7ca00000
 8009de8:	7fefffff 	.word	0x7fefffff
 8009dec:	f014 0310 	ands.w	r3, r4, #16
 8009df0:	bf18      	it	ne
 8009df2:	236a      	movne	r3, #106	@ 0x6a
 8009df4:	4650      	mov	r0, sl
 8009df6:	9308      	str	r3, [sp, #32]
 8009df8:	4659      	mov	r1, fp
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	4ea9      	ldr	r6, [pc, #676]	@ (800a0a4 <_strtod_l+0x854>)
 8009dfe:	07e2      	lsls	r2, r4, #31
 8009e00:	d504      	bpl.n	8009e0c <_strtod_l+0x5bc>
 8009e02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e06:	f7f6 fb7f 	bl	8000508 <__aeabi_dmul>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	1064      	asrs	r4, r4, #1
 8009e0e:	f106 0608 	add.w	r6, r6, #8
 8009e12:	d1f4      	bne.n	8009dfe <_strtod_l+0x5ae>
 8009e14:	b10b      	cbz	r3, 8009e1a <_strtod_l+0x5ca>
 8009e16:	4682      	mov	sl, r0
 8009e18:	468b      	mov	fp, r1
 8009e1a:	9b08      	ldr	r3, [sp, #32]
 8009e1c:	b1b3      	cbz	r3, 8009e4c <_strtod_l+0x5fc>
 8009e1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009e22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	4659      	mov	r1, fp
 8009e2a:	dd0f      	ble.n	8009e4c <_strtod_l+0x5fc>
 8009e2c:	2b1f      	cmp	r3, #31
 8009e2e:	dd57      	ble.n	8009ee0 <_strtod_l+0x690>
 8009e30:	2b34      	cmp	r3, #52	@ 0x34
 8009e32:	bfd8      	it	le
 8009e34:	f04f 33ff 	movle.w	r3, #4294967295
 8009e38:	f04f 0a00 	mov.w	sl, #0
 8009e3c:	bfcf      	iteee	gt
 8009e3e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009e42:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009e46:	4093      	lslle	r3, r2
 8009e48:	ea03 0b01 	andle.w	fp, r3, r1
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2300      	movs	r3, #0
 8009e50:	4650      	mov	r0, sl
 8009e52:	4659      	mov	r1, fp
 8009e54:	f7f6 fdc0 	bl	80009d8 <__aeabi_dcmpeq>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d1a6      	bne.n	8009daa <_strtod_l+0x55a>
 8009e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e5e:	463a      	mov	r2, r7
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009e64:	462b      	mov	r3, r5
 8009e66:	9805      	ldr	r0, [sp, #20]
 8009e68:	f003 f93e 	bl	800d0e8 <__s2b>
 8009e6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	f43f af05 	beq.w	8009c7e <_strtod_l+0x42e>
 8009e74:	2400      	movs	r4, #0
 8009e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e78:	eba9 0308 	sub.w	r3, r9, r8
 8009e7c:	2a00      	cmp	r2, #0
 8009e7e:	bfa8      	it	ge
 8009e80:	2300      	movge	r3, #0
 8009e82:	46a0      	mov	r8, r4
 8009e84:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009e8a:	9316      	str	r3, [sp, #88]	@ 0x58
 8009e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e8e:	9805      	ldr	r0, [sp, #20]
 8009e90:	6859      	ldr	r1, [r3, #4]
 8009e92:	f003 f881 	bl	800cf98 <_Balloc>
 8009e96:	4681      	mov	r9, r0
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	f43f aef4 	beq.w	8009c86 <_strtod_l+0x436>
 8009e9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ea0:	300c      	adds	r0, #12
 8009ea2:	691a      	ldr	r2, [r3, #16]
 8009ea4:	f103 010c 	add.w	r1, r3, #12
 8009ea8:	3202      	adds	r2, #2
 8009eaa:	0092      	lsls	r2, r2, #2
 8009eac:	f001 fe7b 	bl	800bba6 <memcpy>
 8009eb0:	ab1c      	add	r3, sp, #112	@ 0x70
 8009eb2:	9301      	str	r3, [sp, #4]
 8009eb4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	4652      	mov	r2, sl
 8009eba:	465b      	mov	r3, fp
 8009ebc:	9805      	ldr	r0, [sp, #20]
 8009ebe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009ec2:	f003 fc43 	bl	800d74c <__d2b>
 8009ec6:	901a      	str	r0, [sp, #104]	@ 0x68
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	f43f aedc 	beq.w	8009c86 <_strtod_l+0x436>
 8009ece:	2101      	movs	r1, #1
 8009ed0:	9805      	ldr	r0, [sp, #20]
 8009ed2:	f003 f99f 	bl	800d214 <__i2b>
 8009ed6:	4680      	mov	r8, r0
 8009ed8:	b948      	cbnz	r0, 8009eee <_strtod_l+0x69e>
 8009eda:	f04f 0800 	mov.w	r8, #0
 8009ede:	e6d2      	b.n	8009c86 <_strtod_l+0x436>
 8009ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee8:	ea03 0a0a 	and.w	sl, r3, sl
 8009eec:	e7ae      	b.n	8009e4c <_strtod_l+0x5fc>
 8009eee:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009ef0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009ef2:	2d00      	cmp	r5, #0
 8009ef4:	bfab      	itete	ge
 8009ef6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009ef8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009efa:	18ef      	addge	r7, r5, r3
 8009efc:	1b5e      	sublt	r6, r3, r5
 8009efe:	9b08      	ldr	r3, [sp, #32]
 8009f00:	bfa8      	it	ge
 8009f02:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009f04:	eba5 0503 	sub.w	r5, r5, r3
 8009f08:	4415      	add	r5, r2
 8009f0a:	4b67      	ldr	r3, [pc, #412]	@ (800a0a8 <_strtod_l+0x858>)
 8009f0c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009f10:	bfb8      	it	lt
 8009f12:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009f14:	429d      	cmp	r5, r3
 8009f16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009f1a:	da50      	bge.n	8009fbe <_strtod_l+0x76e>
 8009f1c:	1b5b      	subs	r3, r3, r5
 8009f1e:	2b1f      	cmp	r3, #31
 8009f20:	f04f 0101 	mov.w	r1, #1
 8009f24:	eba2 0203 	sub.w	r2, r2, r3
 8009f28:	dc3d      	bgt.n	8009fa6 <_strtod_l+0x756>
 8009f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f30:	2300      	movs	r3, #0
 8009f32:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f34:	18bd      	adds	r5, r7, r2
 8009f36:	9b08      	ldr	r3, [sp, #32]
 8009f38:	42af      	cmp	r7, r5
 8009f3a:	4416      	add	r6, r2
 8009f3c:	441e      	add	r6, r3
 8009f3e:	463b      	mov	r3, r7
 8009f40:	bfa8      	it	ge
 8009f42:	462b      	movge	r3, r5
 8009f44:	42b3      	cmp	r3, r6
 8009f46:	bfa8      	it	ge
 8009f48:	4633      	movge	r3, r6
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	bfc2      	ittt	gt
 8009f4e:	1aed      	subgt	r5, r5, r3
 8009f50:	1af6      	subgt	r6, r6, r3
 8009f52:	1aff      	subgt	r7, r7, r3
 8009f54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	dd16      	ble.n	8009f88 <_strtod_l+0x738>
 8009f5a:	4641      	mov	r1, r8
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	9805      	ldr	r0, [sp, #20]
 8009f60:	f003 fa16 	bl	800d390 <__pow5mult>
 8009f64:	4680      	mov	r8, r0
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d0b7      	beq.n	8009eda <_strtod_l+0x68a>
 8009f6a:	4601      	mov	r1, r0
 8009f6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f6e:	9805      	ldr	r0, [sp, #20]
 8009f70:	f003 f966 	bl	800d240 <__multiply>
 8009f74:	900e      	str	r0, [sp, #56]	@ 0x38
 8009f76:	2800      	cmp	r0, #0
 8009f78:	f43f ae85 	beq.w	8009c86 <_strtod_l+0x436>
 8009f7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f7e:	9805      	ldr	r0, [sp, #20]
 8009f80:	f003 f84a 	bl	800d018 <_Bfree>
 8009f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f86:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f88:	2d00      	cmp	r5, #0
 8009f8a:	dc1d      	bgt.n	8009fc8 <_strtod_l+0x778>
 8009f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	dd23      	ble.n	8009fda <_strtod_l+0x78a>
 8009f92:	4649      	mov	r1, r9
 8009f94:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009f96:	9805      	ldr	r0, [sp, #20]
 8009f98:	f003 f9fa 	bl	800d390 <__pow5mult>
 8009f9c:	4681      	mov	r9, r0
 8009f9e:	b9e0      	cbnz	r0, 8009fda <_strtod_l+0x78a>
 8009fa0:	f04f 0900 	mov.w	r9, #0
 8009fa4:	e66f      	b.n	8009c86 <_strtod_l+0x436>
 8009fa6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009faa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009fae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009fb2:	35e2      	adds	r5, #226	@ 0xe2
 8009fb4:	fa01 f305 	lsl.w	r3, r1, r5
 8009fb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009fba:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009fbc:	e7ba      	b.n	8009f34 <_strtod_l+0x6e4>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009fc6:	e7b5      	b.n	8009f34 <_strtod_l+0x6e4>
 8009fc8:	462a      	mov	r2, r5
 8009fca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009fcc:	9805      	ldr	r0, [sp, #20]
 8009fce:	f003 fa39 	bl	800d444 <__lshift>
 8009fd2:	901a      	str	r0, [sp, #104]	@ 0x68
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d1d9      	bne.n	8009f8c <_strtod_l+0x73c>
 8009fd8:	e655      	b.n	8009c86 <_strtod_l+0x436>
 8009fda:	2e00      	cmp	r6, #0
 8009fdc:	dd07      	ble.n	8009fee <_strtod_l+0x79e>
 8009fde:	4649      	mov	r1, r9
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	9805      	ldr	r0, [sp, #20]
 8009fe4:	f003 fa2e 	bl	800d444 <__lshift>
 8009fe8:	4681      	mov	r9, r0
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d0d8      	beq.n	8009fa0 <_strtod_l+0x750>
 8009fee:	2f00      	cmp	r7, #0
 8009ff0:	dd08      	ble.n	800a004 <_strtod_l+0x7b4>
 8009ff2:	4641      	mov	r1, r8
 8009ff4:	463a      	mov	r2, r7
 8009ff6:	9805      	ldr	r0, [sp, #20]
 8009ff8:	f003 fa24 	bl	800d444 <__lshift>
 8009ffc:	4680      	mov	r8, r0
 8009ffe:	2800      	cmp	r0, #0
 800a000:	f43f ae41 	beq.w	8009c86 <_strtod_l+0x436>
 800a004:	464a      	mov	r2, r9
 800a006:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a008:	9805      	ldr	r0, [sp, #20]
 800a00a:	f003 faa3 	bl	800d554 <__mdiff>
 800a00e:	4604      	mov	r4, r0
 800a010:	2800      	cmp	r0, #0
 800a012:	f43f ae38 	beq.w	8009c86 <_strtod_l+0x436>
 800a016:	68c3      	ldr	r3, [r0, #12]
 800a018:	4641      	mov	r1, r8
 800a01a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a01c:	2300      	movs	r3, #0
 800a01e:	60c3      	str	r3, [r0, #12]
 800a020:	f003 fa7c 	bl	800d51c <__mcmp>
 800a024:	2800      	cmp	r0, #0
 800a026:	da45      	bge.n	800a0b4 <_strtod_l+0x864>
 800a028:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a02a:	ea53 030a 	orrs.w	r3, r3, sl
 800a02e:	d16b      	bne.n	800a108 <_strtod_l+0x8b8>
 800a030:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a034:	2b00      	cmp	r3, #0
 800a036:	d167      	bne.n	800a108 <_strtod_l+0x8b8>
 800a038:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a03c:	0d1b      	lsrs	r3, r3, #20
 800a03e:	051b      	lsls	r3, r3, #20
 800a040:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a044:	d960      	bls.n	800a108 <_strtod_l+0x8b8>
 800a046:	6963      	ldr	r3, [r4, #20]
 800a048:	b913      	cbnz	r3, 800a050 <_strtod_l+0x800>
 800a04a:	6923      	ldr	r3, [r4, #16]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	dd5b      	ble.n	800a108 <_strtod_l+0x8b8>
 800a050:	4621      	mov	r1, r4
 800a052:	2201      	movs	r2, #1
 800a054:	9805      	ldr	r0, [sp, #20]
 800a056:	f003 f9f5 	bl	800d444 <__lshift>
 800a05a:	4641      	mov	r1, r8
 800a05c:	4604      	mov	r4, r0
 800a05e:	f003 fa5d 	bl	800d51c <__mcmp>
 800a062:	2800      	cmp	r0, #0
 800a064:	dd50      	ble.n	800a108 <_strtod_l+0x8b8>
 800a066:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a06a:	9a08      	ldr	r2, [sp, #32]
 800a06c:	0d1b      	lsrs	r3, r3, #20
 800a06e:	051b      	lsls	r3, r3, #20
 800a070:	2a00      	cmp	r2, #0
 800a072:	d06a      	beq.n	800a14a <_strtod_l+0x8fa>
 800a074:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a078:	d867      	bhi.n	800a14a <_strtod_l+0x8fa>
 800a07a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a07e:	f67f ae98 	bls.w	8009db2 <_strtod_l+0x562>
 800a082:	4650      	mov	r0, sl
 800a084:	4659      	mov	r1, fp
 800a086:	4b09      	ldr	r3, [pc, #36]	@ (800a0ac <_strtod_l+0x85c>)
 800a088:	2200      	movs	r2, #0
 800a08a:	f7f6 fa3d 	bl	8000508 <__aeabi_dmul>
 800a08e:	4b08      	ldr	r3, [pc, #32]	@ (800a0b0 <_strtod_l+0x860>)
 800a090:	4682      	mov	sl, r0
 800a092:	400b      	ands	r3, r1
 800a094:	468b      	mov	fp, r1
 800a096:	2b00      	cmp	r3, #0
 800a098:	f47f ae00 	bne.w	8009c9c <_strtod_l+0x44c>
 800a09c:	2322      	movs	r3, #34	@ 0x22
 800a09e:	9a05      	ldr	r2, [sp, #20]
 800a0a0:	6013      	str	r3, [r2, #0]
 800a0a2:	e5fb      	b.n	8009c9c <_strtod_l+0x44c>
 800a0a4:	0800f100 	.word	0x0800f100
 800a0a8:	fffffc02 	.word	0xfffffc02
 800a0ac:	39500000 	.word	0x39500000
 800a0b0:	7ff00000 	.word	0x7ff00000
 800a0b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a0b8:	d165      	bne.n	800a186 <_strtod_l+0x936>
 800a0ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a0bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0c0:	b35a      	cbz	r2, 800a11a <_strtod_l+0x8ca>
 800a0c2:	4a99      	ldr	r2, [pc, #612]	@ (800a328 <_strtod_l+0xad8>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d12b      	bne.n	800a120 <_strtod_l+0x8d0>
 800a0c8:	9b08      	ldr	r3, [sp, #32]
 800a0ca:	4651      	mov	r1, sl
 800a0cc:	b303      	cbz	r3, 800a110 <_strtod_l+0x8c0>
 800a0ce:	465a      	mov	r2, fp
 800a0d0:	4b96      	ldr	r3, [pc, #600]	@ (800a32c <_strtod_l+0xadc>)
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0dc:	d81b      	bhi.n	800a116 <_strtod_l+0x8c6>
 800a0de:	0d1b      	lsrs	r3, r3, #20
 800a0e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e8:	4299      	cmp	r1, r3
 800a0ea:	d119      	bne.n	800a120 <_strtod_l+0x8d0>
 800a0ec:	4b90      	ldr	r3, [pc, #576]	@ (800a330 <_strtod_l+0xae0>)
 800a0ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d102      	bne.n	800a0fa <_strtod_l+0x8aa>
 800a0f4:	3101      	adds	r1, #1
 800a0f6:	f43f adc6 	beq.w	8009c86 <_strtod_l+0x436>
 800a0fa:	f04f 0a00 	mov.w	sl, #0
 800a0fe:	4b8b      	ldr	r3, [pc, #556]	@ (800a32c <_strtod_l+0xadc>)
 800a100:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a102:	401a      	ands	r2, r3
 800a104:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a108:	9b08      	ldr	r3, [sp, #32]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1b9      	bne.n	800a082 <_strtod_l+0x832>
 800a10e:	e5c5      	b.n	8009c9c <_strtod_l+0x44c>
 800a110:	f04f 33ff 	mov.w	r3, #4294967295
 800a114:	e7e8      	b.n	800a0e8 <_strtod_l+0x898>
 800a116:	4613      	mov	r3, r2
 800a118:	e7e6      	b.n	800a0e8 <_strtod_l+0x898>
 800a11a:	ea53 030a 	orrs.w	r3, r3, sl
 800a11e:	d0a2      	beq.n	800a066 <_strtod_l+0x816>
 800a120:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a122:	b1db      	cbz	r3, 800a15c <_strtod_l+0x90c>
 800a124:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a126:	4213      	tst	r3, r2
 800a128:	d0ee      	beq.n	800a108 <_strtod_l+0x8b8>
 800a12a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a12c:	4650      	mov	r0, sl
 800a12e:	4659      	mov	r1, fp
 800a130:	9a08      	ldr	r2, [sp, #32]
 800a132:	b1bb      	cbz	r3, 800a164 <_strtod_l+0x914>
 800a134:	f7ff fb6a 	bl	800980c <sulp>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a140:	f7f6 f82c 	bl	800019c <__adddf3>
 800a144:	4682      	mov	sl, r0
 800a146:	468b      	mov	fp, r1
 800a148:	e7de      	b.n	800a108 <_strtod_l+0x8b8>
 800a14a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a14e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a152:	f04f 3aff 	mov.w	sl, #4294967295
 800a156:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a15a:	e7d5      	b.n	800a108 <_strtod_l+0x8b8>
 800a15c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a15e:	ea13 0f0a 	tst.w	r3, sl
 800a162:	e7e1      	b.n	800a128 <_strtod_l+0x8d8>
 800a164:	f7ff fb52 	bl	800980c <sulp>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a170:	f7f6 f812 	bl	8000198 <__aeabi_dsub>
 800a174:	2200      	movs	r2, #0
 800a176:	2300      	movs	r3, #0
 800a178:	4682      	mov	sl, r0
 800a17a:	468b      	mov	fp, r1
 800a17c:	f7f6 fc2c 	bl	80009d8 <__aeabi_dcmpeq>
 800a180:	2800      	cmp	r0, #0
 800a182:	d0c1      	beq.n	800a108 <_strtod_l+0x8b8>
 800a184:	e615      	b.n	8009db2 <_strtod_l+0x562>
 800a186:	4641      	mov	r1, r8
 800a188:	4620      	mov	r0, r4
 800a18a:	f003 fb37 	bl	800d7fc <__ratio>
 800a18e:	2200      	movs	r2, #0
 800a190:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a194:	4606      	mov	r6, r0
 800a196:	460f      	mov	r7, r1
 800a198:	f7f6 fc32 	bl	8000a00 <__aeabi_dcmple>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d06d      	beq.n	800a27c <_strtod_l+0xa2c>
 800a1a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d178      	bne.n	800a298 <_strtod_l+0xa48>
 800a1a6:	f1ba 0f00 	cmp.w	sl, #0
 800a1aa:	d156      	bne.n	800a25a <_strtod_l+0xa0a>
 800a1ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d158      	bne.n	800a268 <_strtod_l+0xa18>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	4639      	mov	r1, r7
 800a1bc:	4b5d      	ldr	r3, [pc, #372]	@ (800a334 <_strtod_l+0xae4>)
 800a1be:	f7f6 fc15 	bl	80009ec <__aeabi_dcmplt>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d157      	bne.n	800a276 <_strtod_l+0xa26>
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	4b5a      	ldr	r3, [pc, #360]	@ (800a338 <_strtod_l+0xae8>)
 800a1ce:	f7f6 f99b 	bl	8000508 <__aeabi_dmul>
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	460f      	mov	r7, r1
 800a1d6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a1da:	9606      	str	r6, [sp, #24]
 800a1dc:	9307      	str	r3, [sp, #28]
 800a1de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1e2:	4d52      	ldr	r5, [pc, #328]	@ (800a32c <_strtod_l+0xadc>)
 800a1e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a1e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1ea:	401d      	ands	r5, r3
 800a1ec:	4b53      	ldr	r3, [pc, #332]	@ (800a33c <_strtod_l+0xaec>)
 800a1ee:	429d      	cmp	r5, r3
 800a1f0:	f040 80aa 	bne.w	800a348 <_strtod_l+0xaf8>
 800a1f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1f6:	4650      	mov	r0, sl
 800a1f8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a1fc:	4659      	mov	r1, fp
 800a1fe:	f003 fa3d 	bl	800d67c <__ulp>
 800a202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a206:	f7f6 f97f 	bl	8000508 <__aeabi_dmul>
 800a20a:	4652      	mov	r2, sl
 800a20c:	465b      	mov	r3, fp
 800a20e:	f7f5 ffc5 	bl	800019c <__adddf3>
 800a212:	460b      	mov	r3, r1
 800a214:	4945      	ldr	r1, [pc, #276]	@ (800a32c <_strtod_l+0xadc>)
 800a216:	4a4a      	ldr	r2, [pc, #296]	@ (800a340 <_strtod_l+0xaf0>)
 800a218:	4019      	ands	r1, r3
 800a21a:	4291      	cmp	r1, r2
 800a21c:	4682      	mov	sl, r0
 800a21e:	d942      	bls.n	800a2a6 <_strtod_l+0xa56>
 800a220:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a222:	4b43      	ldr	r3, [pc, #268]	@ (800a330 <_strtod_l+0xae0>)
 800a224:	429a      	cmp	r2, r3
 800a226:	d103      	bne.n	800a230 <_strtod_l+0x9e0>
 800a228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a22a:	3301      	adds	r3, #1
 800a22c:	f43f ad2b 	beq.w	8009c86 <_strtod_l+0x436>
 800a230:	f04f 3aff 	mov.w	sl, #4294967295
 800a234:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a330 <_strtod_l+0xae0>
 800a238:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a23a:	9805      	ldr	r0, [sp, #20]
 800a23c:	f002 feec 	bl	800d018 <_Bfree>
 800a240:	4649      	mov	r1, r9
 800a242:	9805      	ldr	r0, [sp, #20]
 800a244:	f002 fee8 	bl	800d018 <_Bfree>
 800a248:	4641      	mov	r1, r8
 800a24a:	9805      	ldr	r0, [sp, #20]
 800a24c:	f002 fee4 	bl	800d018 <_Bfree>
 800a250:	4621      	mov	r1, r4
 800a252:	9805      	ldr	r0, [sp, #20]
 800a254:	f002 fee0 	bl	800d018 <_Bfree>
 800a258:	e618      	b.n	8009e8c <_strtod_l+0x63c>
 800a25a:	f1ba 0f01 	cmp.w	sl, #1
 800a25e:	d103      	bne.n	800a268 <_strtod_l+0xa18>
 800a260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a262:	2b00      	cmp	r3, #0
 800a264:	f43f ada5 	beq.w	8009db2 <_strtod_l+0x562>
 800a268:	2200      	movs	r2, #0
 800a26a:	4b36      	ldr	r3, [pc, #216]	@ (800a344 <_strtod_l+0xaf4>)
 800a26c:	2600      	movs	r6, #0
 800a26e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a272:	4f30      	ldr	r7, [pc, #192]	@ (800a334 <_strtod_l+0xae4>)
 800a274:	e7b3      	b.n	800a1de <_strtod_l+0x98e>
 800a276:	2600      	movs	r6, #0
 800a278:	4f2f      	ldr	r7, [pc, #188]	@ (800a338 <_strtod_l+0xae8>)
 800a27a:	e7ac      	b.n	800a1d6 <_strtod_l+0x986>
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	4b2d      	ldr	r3, [pc, #180]	@ (800a338 <_strtod_l+0xae8>)
 800a282:	2200      	movs	r2, #0
 800a284:	f7f6 f940 	bl	8000508 <__aeabi_dmul>
 800a288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a28a:	4606      	mov	r6, r0
 800a28c:	460f      	mov	r7, r1
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0a1      	beq.n	800a1d6 <_strtod_l+0x986>
 800a292:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a296:	e7a2      	b.n	800a1de <_strtod_l+0x98e>
 800a298:	2200      	movs	r2, #0
 800a29a:	4b26      	ldr	r3, [pc, #152]	@ (800a334 <_strtod_l+0xae4>)
 800a29c:	4616      	mov	r6, r2
 800a29e:	461f      	mov	r7, r3
 800a2a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a2a4:	e79b      	b.n	800a1de <_strtod_l+0x98e>
 800a2a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a2aa:	9b08      	ldr	r3, [sp, #32]
 800a2ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1c1      	bne.n	800a238 <_strtod_l+0x9e8>
 800a2b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2b8:	0d1b      	lsrs	r3, r3, #20
 800a2ba:	051b      	lsls	r3, r3, #20
 800a2bc:	429d      	cmp	r5, r3
 800a2be:	d1bb      	bne.n	800a238 <_strtod_l+0x9e8>
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	4639      	mov	r1, r7
 800a2c4:	f7f6 ffb2 	bl	800122c <__aeabi_d2lz>
 800a2c8:	f7f6 f8f0 	bl	80004ac <__aeabi_l2d>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	f7f5 ff60 	bl	8000198 <__aeabi_dsub>
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4602      	mov	r2, r0
 800a2dc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a2e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a2e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2e6:	ea46 060a 	orr.w	r6, r6, sl
 800a2ea:	431e      	orrs	r6, r3
 800a2ec:	d069      	beq.n	800a3c2 <_strtod_l+0xb72>
 800a2ee:	a30a      	add	r3, pc, #40	@ (adr r3, 800a318 <_strtod_l+0xac8>)
 800a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f4:	f7f6 fb7a 	bl	80009ec <__aeabi_dcmplt>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	f47f accf 	bne.w	8009c9c <_strtod_l+0x44c>
 800a2fe:	a308      	add	r3, pc, #32	@ (adr r3, 800a320 <_strtod_l+0xad0>)
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a308:	f7f6 fb8e 	bl	8000a28 <__aeabi_dcmpgt>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d093      	beq.n	800a238 <_strtod_l+0x9e8>
 800a310:	e4c4      	b.n	8009c9c <_strtod_l+0x44c>
 800a312:	bf00      	nop
 800a314:	f3af 8000 	nop.w
 800a318:	94a03595 	.word	0x94a03595
 800a31c:	3fdfffff 	.word	0x3fdfffff
 800a320:	35afe535 	.word	0x35afe535
 800a324:	3fe00000 	.word	0x3fe00000
 800a328:	000fffff 	.word	0x000fffff
 800a32c:	7ff00000 	.word	0x7ff00000
 800a330:	7fefffff 	.word	0x7fefffff
 800a334:	3ff00000 	.word	0x3ff00000
 800a338:	3fe00000 	.word	0x3fe00000
 800a33c:	7fe00000 	.word	0x7fe00000
 800a340:	7c9fffff 	.word	0x7c9fffff
 800a344:	bff00000 	.word	0xbff00000
 800a348:	9b08      	ldr	r3, [sp, #32]
 800a34a:	b323      	cbz	r3, 800a396 <_strtod_l+0xb46>
 800a34c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a350:	d821      	bhi.n	800a396 <_strtod_l+0xb46>
 800a352:	a327      	add	r3, pc, #156	@ (adr r3, 800a3f0 <_strtod_l+0xba0>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	4630      	mov	r0, r6
 800a35a:	4639      	mov	r1, r7
 800a35c:	f7f6 fb50 	bl	8000a00 <__aeabi_dcmple>
 800a360:	b1a0      	cbz	r0, 800a38c <_strtod_l+0xb3c>
 800a362:	4639      	mov	r1, r7
 800a364:	4630      	mov	r0, r6
 800a366:	f7f6 fba7 	bl	8000ab8 <__aeabi_d2uiz>
 800a36a:	2801      	cmp	r0, #1
 800a36c:	bf38      	it	cc
 800a36e:	2001      	movcc	r0, #1
 800a370:	f7f6 f850 	bl	8000414 <__aeabi_ui2d>
 800a374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	b9fb      	cbnz	r3, 800a3bc <_strtod_l+0xb6c>
 800a37c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a380:	9014      	str	r0, [sp, #80]	@ 0x50
 800a382:	9315      	str	r3, [sp, #84]	@ 0x54
 800a384:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a388:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a38c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a38e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a392:	1b5b      	subs	r3, r3, r5
 800a394:	9311      	str	r3, [sp, #68]	@ 0x44
 800a396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a39a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a39e:	f003 f96d 	bl	800d67c <__ulp>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4650      	mov	r0, sl
 800a3a8:	4659      	mov	r1, fp
 800a3aa:	f7f6 f8ad 	bl	8000508 <__aeabi_dmul>
 800a3ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a3b2:	f7f5 fef3 	bl	800019c <__adddf3>
 800a3b6:	4682      	mov	sl, r0
 800a3b8:	468b      	mov	fp, r1
 800a3ba:	e776      	b.n	800a2aa <_strtod_l+0xa5a>
 800a3bc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a3c0:	e7e0      	b.n	800a384 <_strtod_l+0xb34>
 800a3c2:	a30d      	add	r3, pc, #52	@ (adr r3, 800a3f8 <_strtod_l+0xba8>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	f7f6 fb10 	bl	80009ec <__aeabi_dcmplt>
 800a3cc:	e79e      	b.n	800a30c <_strtod_l+0xabc>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3d4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	f7ff ba77 	b.w	80098ca <_strtod_l+0x7a>
 800a3dc:	2a65      	cmp	r2, #101	@ 0x65
 800a3de:	f43f ab6e 	beq.w	8009abe <_strtod_l+0x26e>
 800a3e2:	2a45      	cmp	r2, #69	@ 0x45
 800a3e4:	f43f ab6b 	beq.w	8009abe <_strtod_l+0x26e>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	f7ff bba6 	b.w	8009b3a <_strtod_l+0x2ea>
 800a3ee:	bf00      	nop
 800a3f0:	ffc00000 	.word	0xffc00000
 800a3f4:	41dfffff 	.word	0x41dfffff
 800a3f8:	94a03595 	.word	0x94a03595
 800a3fc:	3fcfffff 	.word	0x3fcfffff

0800a400 <strtod>:
 800a400:	460a      	mov	r2, r1
 800a402:	4601      	mov	r1, r0
 800a404:	4802      	ldr	r0, [pc, #8]	@ (800a410 <strtod+0x10>)
 800a406:	4b03      	ldr	r3, [pc, #12]	@ (800a414 <strtod+0x14>)
 800a408:	6800      	ldr	r0, [r0, #0]
 800a40a:	f7ff ba21 	b.w	8009850 <_strtod_l>
 800a40e:	bf00      	nop
 800a410:	200001a0 	.word	0x200001a0
 800a414:	20000034 	.word	0x20000034

0800a418 <_strtol_l.constprop.0>:
 800a418:	2b24      	cmp	r3, #36	@ 0x24
 800a41a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a41e:	4686      	mov	lr, r0
 800a420:	4690      	mov	r8, r2
 800a422:	d801      	bhi.n	800a428 <_strtol_l.constprop.0+0x10>
 800a424:	2b01      	cmp	r3, #1
 800a426:	d106      	bne.n	800a436 <_strtol_l.constprop.0+0x1e>
 800a428:	f001 fb7a 	bl	800bb20 <__errno>
 800a42c:	2316      	movs	r3, #22
 800a42e:	6003      	str	r3, [r0, #0]
 800a430:	2000      	movs	r0, #0
 800a432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a436:	460d      	mov	r5, r1
 800a438:	4833      	ldr	r0, [pc, #204]	@ (800a508 <_strtol_l.constprop.0+0xf0>)
 800a43a:	462a      	mov	r2, r5
 800a43c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a440:	5d06      	ldrb	r6, [r0, r4]
 800a442:	f016 0608 	ands.w	r6, r6, #8
 800a446:	d1f8      	bne.n	800a43a <_strtol_l.constprop.0+0x22>
 800a448:	2c2d      	cmp	r4, #45	@ 0x2d
 800a44a:	d12d      	bne.n	800a4a8 <_strtol_l.constprop.0+0x90>
 800a44c:	2601      	movs	r6, #1
 800a44e:	782c      	ldrb	r4, [r5, #0]
 800a450:	1c95      	adds	r5, r2, #2
 800a452:	f033 0210 	bics.w	r2, r3, #16
 800a456:	d109      	bne.n	800a46c <_strtol_l.constprop.0+0x54>
 800a458:	2c30      	cmp	r4, #48	@ 0x30
 800a45a:	d12a      	bne.n	800a4b2 <_strtol_l.constprop.0+0x9a>
 800a45c:	782a      	ldrb	r2, [r5, #0]
 800a45e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a462:	2a58      	cmp	r2, #88	@ 0x58
 800a464:	d125      	bne.n	800a4b2 <_strtol_l.constprop.0+0x9a>
 800a466:	2310      	movs	r3, #16
 800a468:	786c      	ldrb	r4, [r5, #1]
 800a46a:	3502      	adds	r5, #2
 800a46c:	2200      	movs	r2, #0
 800a46e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a472:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a476:	fbbc f9f3 	udiv	r9, ip, r3
 800a47a:	4610      	mov	r0, r2
 800a47c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a480:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a484:	2f09      	cmp	r7, #9
 800a486:	d81b      	bhi.n	800a4c0 <_strtol_l.constprop.0+0xa8>
 800a488:	463c      	mov	r4, r7
 800a48a:	42a3      	cmp	r3, r4
 800a48c:	dd27      	ble.n	800a4de <_strtol_l.constprop.0+0xc6>
 800a48e:	1c57      	adds	r7, r2, #1
 800a490:	d007      	beq.n	800a4a2 <_strtol_l.constprop.0+0x8a>
 800a492:	4581      	cmp	r9, r0
 800a494:	d320      	bcc.n	800a4d8 <_strtol_l.constprop.0+0xc0>
 800a496:	d101      	bne.n	800a49c <_strtol_l.constprop.0+0x84>
 800a498:	45a2      	cmp	sl, r4
 800a49a:	db1d      	blt.n	800a4d8 <_strtol_l.constprop.0+0xc0>
 800a49c:	2201      	movs	r2, #1
 800a49e:	fb00 4003 	mla	r0, r0, r3, r4
 800a4a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4a6:	e7eb      	b.n	800a480 <_strtol_l.constprop.0+0x68>
 800a4a8:	2c2b      	cmp	r4, #43	@ 0x2b
 800a4aa:	bf04      	itt	eq
 800a4ac:	782c      	ldrbeq	r4, [r5, #0]
 800a4ae:	1c95      	addeq	r5, r2, #2
 800a4b0:	e7cf      	b.n	800a452 <_strtol_l.constprop.0+0x3a>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1da      	bne.n	800a46c <_strtol_l.constprop.0+0x54>
 800a4b6:	2c30      	cmp	r4, #48	@ 0x30
 800a4b8:	bf0c      	ite	eq
 800a4ba:	2308      	moveq	r3, #8
 800a4bc:	230a      	movne	r3, #10
 800a4be:	e7d5      	b.n	800a46c <_strtol_l.constprop.0+0x54>
 800a4c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a4c4:	2f19      	cmp	r7, #25
 800a4c6:	d801      	bhi.n	800a4cc <_strtol_l.constprop.0+0xb4>
 800a4c8:	3c37      	subs	r4, #55	@ 0x37
 800a4ca:	e7de      	b.n	800a48a <_strtol_l.constprop.0+0x72>
 800a4cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a4d0:	2f19      	cmp	r7, #25
 800a4d2:	d804      	bhi.n	800a4de <_strtol_l.constprop.0+0xc6>
 800a4d4:	3c57      	subs	r4, #87	@ 0x57
 800a4d6:	e7d8      	b.n	800a48a <_strtol_l.constprop.0+0x72>
 800a4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4dc:	e7e1      	b.n	800a4a2 <_strtol_l.constprop.0+0x8a>
 800a4de:	1c53      	adds	r3, r2, #1
 800a4e0:	d108      	bne.n	800a4f4 <_strtol_l.constprop.0+0xdc>
 800a4e2:	2322      	movs	r3, #34	@ 0x22
 800a4e4:	4660      	mov	r0, ip
 800a4e6:	f8ce 3000 	str.w	r3, [lr]
 800a4ea:	f1b8 0f00 	cmp.w	r8, #0
 800a4ee:	d0a0      	beq.n	800a432 <_strtol_l.constprop.0+0x1a>
 800a4f0:	1e69      	subs	r1, r5, #1
 800a4f2:	e006      	b.n	800a502 <_strtol_l.constprop.0+0xea>
 800a4f4:	b106      	cbz	r6, 800a4f8 <_strtol_l.constprop.0+0xe0>
 800a4f6:	4240      	negs	r0, r0
 800a4f8:	f1b8 0f00 	cmp.w	r8, #0
 800a4fc:	d099      	beq.n	800a432 <_strtol_l.constprop.0+0x1a>
 800a4fe:	2a00      	cmp	r2, #0
 800a500:	d1f6      	bne.n	800a4f0 <_strtol_l.constprop.0+0xd8>
 800a502:	f8c8 1000 	str.w	r1, [r8]
 800a506:	e794      	b.n	800a432 <_strtol_l.constprop.0+0x1a>
 800a508:	0800f129 	.word	0x0800f129

0800a50c <strtol>:
 800a50c:	4613      	mov	r3, r2
 800a50e:	460a      	mov	r2, r1
 800a510:	4601      	mov	r1, r0
 800a512:	4802      	ldr	r0, [pc, #8]	@ (800a51c <strtol+0x10>)
 800a514:	6800      	ldr	r0, [r0, #0]
 800a516:	f7ff bf7f 	b.w	800a418 <_strtol_l.constprop.0>
 800a51a:	bf00      	nop
 800a51c:	200001a0 	.word	0x200001a0

0800a520 <swapfunc>:
 800a520:	2b02      	cmp	r3, #2
 800a522:	b510      	push	{r4, lr}
 800a524:	d00a      	beq.n	800a53c <swapfunc+0x1c>
 800a526:	0892      	lsrs	r2, r2, #2
 800a528:	6803      	ldr	r3, [r0, #0]
 800a52a:	680c      	ldr	r4, [r1, #0]
 800a52c:	3a01      	subs	r2, #1
 800a52e:	2a00      	cmp	r2, #0
 800a530:	f840 4b04 	str.w	r4, [r0], #4
 800a534:	f841 3b04 	str.w	r3, [r1], #4
 800a538:	dcf6      	bgt.n	800a528 <swapfunc+0x8>
 800a53a:	bd10      	pop	{r4, pc}
 800a53c:	4402      	add	r2, r0
 800a53e:	780c      	ldrb	r4, [r1, #0]
 800a540:	7803      	ldrb	r3, [r0, #0]
 800a542:	f800 4b01 	strb.w	r4, [r0], #1
 800a546:	f801 3b01 	strb.w	r3, [r1], #1
 800a54a:	1a13      	subs	r3, r2, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	dcf6      	bgt.n	800a53e <swapfunc+0x1e>
 800a550:	e7f3      	b.n	800a53a <swapfunc+0x1a>

0800a552 <med3.constprop.0>:
 800a552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a554:	460f      	mov	r7, r1
 800a556:	4616      	mov	r6, r2
 800a558:	4604      	mov	r4, r0
 800a55a:	461d      	mov	r5, r3
 800a55c:	4798      	blx	r3
 800a55e:	2800      	cmp	r0, #0
 800a560:	4631      	mov	r1, r6
 800a562:	4638      	mov	r0, r7
 800a564:	da0c      	bge.n	800a580 <med3.constprop.0+0x2e>
 800a566:	47a8      	blx	r5
 800a568:	2800      	cmp	r0, #0
 800a56a:	da02      	bge.n	800a572 <med3.constprop.0+0x20>
 800a56c:	463c      	mov	r4, r7
 800a56e:	4620      	mov	r0, r4
 800a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a572:	4631      	mov	r1, r6
 800a574:	4620      	mov	r0, r4
 800a576:	47a8      	blx	r5
 800a578:	2800      	cmp	r0, #0
 800a57a:	daf8      	bge.n	800a56e <med3.constprop.0+0x1c>
 800a57c:	4634      	mov	r4, r6
 800a57e:	e7f6      	b.n	800a56e <med3.constprop.0+0x1c>
 800a580:	47a8      	blx	r5
 800a582:	2800      	cmp	r0, #0
 800a584:	dcf2      	bgt.n	800a56c <med3.constprop.0+0x1a>
 800a586:	4631      	mov	r1, r6
 800a588:	4620      	mov	r0, r4
 800a58a:	47a8      	blx	r5
 800a58c:	2800      	cmp	r0, #0
 800a58e:	daf5      	bge.n	800a57c <med3.constprop.0+0x2a>
 800a590:	e7ed      	b.n	800a56e <med3.constprop.0+0x1c>

0800a592 <qsort>:
 800a592:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a596:	b095      	sub	sp, #84	@ 0x54
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	ea40 0302 	orr.w	r3, r0, r2
 800a59e:	079b      	lsls	r3, r3, #30
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	4614      	mov	r4, r2
 800a5a4:	d119      	bne.n	800a5da <qsort+0x48>
 800a5a6:	f1b2 0804 	subs.w	r8, r2, #4
 800a5aa:	bf18      	it	ne
 800a5ac:	f04f 0801 	movne.w	r8, #1
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	9301      	str	r3, [sp, #4]
 800a5b4:	fb04 f701 	mul.w	r7, r4, r1
 800a5b8:	2906      	cmp	r1, #6
 800a5ba:	eb06 0307 	add.w	r3, r6, r7
 800a5be:	eb06 0b04 	add.w	fp, r6, r4
 800a5c2:	9302      	str	r3, [sp, #8]
 800a5c4:	d828      	bhi.n	800a618 <qsort+0x86>
 800a5c6:	9b02      	ldr	r3, [sp, #8]
 800a5c8:	459b      	cmp	fp, r3
 800a5ca:	d310      	bcc.n	800a5ee <qsort+0x5c>
 800a5cc:	9b01      	ldr	r3, [sp, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f040 8118 	bne.w	800a804 <qsort+0x272>
 800a5d4:	b015      	add	sp, #84	@ 0x54
 800a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5da:	f04f 0802 	mov.w	r8, #2
 800a5de:	e7e7      	b.n	800a5b0 <qsort+0x1e>
 800a5e0:	4643      	mov	r3, r8
 800a5e2:	4622      	mov	r2, r4
 800a5e4:	4639      	mov	r1, r7
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f7ff ff9a 	bl	800a520 <swapfunc>
 800a5ec:	e00f      	b.n	800a60e <qsort+0x7c>
 800a5ee:	465d      	mov	r5, fp
 800a5f0:	e00e      	b.n	800a610 <qsort+0x7e>
 800a5f2:	1b2f      	subs	r7, r5, r4
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	9b00      	ldr	r3, [sp, #0]
 800a5fa:	4798      	blx	r3
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	dd09      	ble.n	800a614 <qsort+0x82>
 800a600:	f1b8 0f00 	cmp.w	r8, #0
 800a604:	d1ec      	bne.n	800a5e0 <qsort+0x4e>
 800a606:	682b      	ldr	r3, [r5, #0]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	602a      	str	r2, [r5, #0]
 800a60c:	603b      	str	r3, [r7, #0]
 800a60e:	463d      	mov	r5, r7
 800a610:	42ae      	cmp	r6, r5
 800a612:	d3ee      	bcc.n	800a5f2 <qsort+0x60>
 800a614:	44a3      	add	fp, r4
 800a616:	e7d6      	b.n	800a5c6 <qsort+0x34>
 800a618:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800a61c:	1b3f      	subs	r7, r7, r4
 800a61e:	2907      	cmp	r1, #7
 800a620:	fb04 6909 	mla	r9, r4, r9, r6
 800a624:	4437      	add	r7, r6
 800a626:	d021      	beq.n	800a66c <qsort+0xda>
 800a628:	2928      	cmp	r1, #40	@ 0x28
 800a62a:	d944      	bls.n	800a6b6 <qsort+0x124>
 800a62c:	08cd      	lsrs	r5, r1, #3
 800a62e:	4365      	muls	r5, r4
 800a630:	9b00      	ldr	r3, [sp, #0]
 800a632:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800a636:	1971      	adds	r1, r6, r5
 800a638:	4630      	mov	r0, r6
 800a63a:	f7ff ff8a 	bl	800a552 <med3.constprop.0>
 800a63e:	4649      	mov	r1, r9
 800a640:	eb09 0205 	add.w	r2, r9, r5
 800a644:	9b00      	ldr	r3, [sp, #0]
 800a646:	4682      	mov	sl, r0
 800a648:	1b48      	subs	r0, r1, r5
 800a64a:	f7ff ff82 	bl	800a552 <med3.constprop.0>
 800a64e:	463a      	mov	r2, r7
 800a650:	4681      	mov	r9, r0
 800a652:	9b00      	ldr	r3, [sp, #0]
 800a654:	1b79      	subs	r1, r7, r5
 800a656:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800a65a:	f7ff ff7a 	bl	800a552 <med3.constprop.0>
 800a65e:	4602      	mov	r2, r0
 800a660:	4649      	mov	r1, r9
 800a662:	4650      	mov	r0, sl
 800a664:	9b00      	ldr	r3, [sp, #0]
 800a666:	f7ff ff74 	bl	800a552 <med3.constprop.0>
 800a66a:	4681      	mov	r9, r0
 800a66c:	f1b8 0f00 	cmp.w	r8, #0
 800a670:	d124      	bne.n	800a6bc <qsort+0x12a>
 800a672:	6833      	ldr	r3, [r6, #0]
 800a674:	f8d9 2000 	ldr.w	r2, [r9]
 800a678:	6032      	str	r2, [r6, #0]
 800a67a:	f8c9 3000 	str.w	r3, [r9]
 800a67e:	46d9      	mov	r9, fp
 800a680:	46ba      	mov	sl, r7
 800a682:	465d      	mov	r5, fp
 800a684:	2300      	movs	r3, #0
 800a686:	45b9      	cmp	r9, r7
 800a688:	d857      	bhi.n	800a73a <qsort+0x1a8>
 800a68a:	9303      	str	r3, [sp, #12]
 800a68c:	4631      	mov	r1, r6
 800a68e:	9b00      	ldr	r3, [sp, #0]
 800a690:	4648      	mov	r0, r9
 800a692:	4798      	blx	r3
 800a694:	2800      	cmp	r0, #0
 800a696:	9b03      	ldr	r3, [sp, #12]
 800a698:	dc2c      	bgt.n	800a6f4 <qsort+0x162>
 800a69a:	d10a      	bne.n	800a6b2 <qsort+0x120>
 800a69c:	f1b8 0f00 	cmp.w	r8, #0
 800a6a0:	d113      	bne.n	800a6ca <qsort+0x138>
 800a6a2:	682b      	ldr	r3, [r5, #0]
 800a6a4:	f8d9 2000 	ldr.w	r2, [r9]
 800a6a8:	602a      	str	r2, [r5, #0]
 800a6aa:	f8c9 3000 	str.w	r3, [r9]
 800a6ae:	4425      	add	r5, r4
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	44a1      	add	r9, r4
 800a6b4:	e7e7      	b.n	800a686 <qsort+0xf4>
 800a6b6:	463a      	mov	r2, r7
 800a6b8:	46b2      	mov	sl, r6
 800a6ba:	e7d1      	b.n	800a660 <qsort+0xce>
 800a6bc:	4643      	mov	r3, r8
 800a6be:	4622      	mov	r2, r4
 800a6c0:	4649      	mov	r1, r9
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f7ff ff2c 	bl	800a520 <swapfunc>
 800a6c8:	e7d9      	b.n	800a67e <qsort+0xec>
 800a6ca:	4643      	mov	r3, r8
 800a6cc:	4622      	mov	r2, r4
 800a6ce:	4649      	mov	r1, r9
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f7ff ff25 	bl	800a520 <swapfunc>
 800a6d6:	e7ea      	b.n	800a6ae <qsort+0x11c>
 800a6d8:	d10b      	bne.n	800a6f2 <qsort+0x160>
 800a6da:	f1b8 0f00 	cmp.w	r8, #0
 800a6de:	d11e      	bne.n	800a71e <qsort+0x18c>
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	f8da 2000 	ldr.w	r2, [sl]
 800a6e6:	603a      	str	r2, [r7, #0]
 800a6e8:	f8ca 3000 	str.w	r3, [sl]
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	ebaa 0a04 	sub.w	sl, sl, r4
 800a6f2:	1b3f      	subs	r7, r7, r4
 800a6f4:	45b9      	cmp	r9, r7
 800a6f6:	d820      	bhi.n	800a73a <qsort+0x1a8>
 800a6f8:	9303      	str	r3, [sp, #12]
 800a6fa:	4631      	mov	r1, r6
 800a6fc:	9b00      	ldr	r3, [sp, #0]
 800a6fe:	4638      	mov	r0, r7
 800a700:	4798      	blx	r3
 800a702:	2800      	cmp	r0, #0
 800a704:	9b03      	ldr	r3, [sp, #12]
 800a706:	dae7      	bge.n	800a6d8 <qsort+0x146>
 800a708:	f1b8 0f00 	cmp.w	r8, #0
 800a70c:	d10e      	bne.n	800a72c <qsort+0x19a>
 800a70e:	f8d9 3000 	ldr.w	r3, [r9]
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	f8c9 2000 	str.w	r2, [r9]
 800a718:	603b      	str	r3, [r7, #0]
 800a71a:	1b3f      	subs	r7, r7, r4
 800a71c:	e7c8      	b.n	800a6b0 <qsort+0x11e>
 800a71e:	4643      	mov	r3, r8
 800a720:	4622      	mov	r2, r4
 800a722:	4651      	mov	r1, sl
 800a724:	4638      	mov	r0, r7
 800a726:	f7ff fefb 	bl	800a520 <swapfunc>
 800a72a:	e7df      	b.n	800a6ec <qsort+0x15a>
 800a72c:	4643      	mov	r3, r8
 800a72e:	4622      	mov	r2, r4
 800a730:	4639      	mov	r1, r7
 800a732:	4648      	mov	r0, r9
 800a734:	f7ff fef4 	bl	800a520 <swapfunc>
 800a738:	e7ef      	b.n	800a71a <qsort+0x188>
 800a73a:	b9fb      	cbnz	r3, 800a77c <qsort+0x1ea>
 800a73c:	9b02      	ldr	r3, [sp, #8]
 800a73e:	459b      	cmp	fp, r3
 800a740:	f4bf af44 	bcs.w	800a5cc <qsort+0x3a>
 800a744:	465d      	mov	r5, fp
 800a746:	e015      	b.n	800a774 <qsort+0x1e2>
 800a748:	4643      	mov	r3, r8
 800a74a:	4622      	mov	r2, r4
 800a74c:	4639      	mov	r1, r7
 800a74e:	4628      	mov	r0, r5
 800a750:	f7ff fee6 	bl	800a520 <swapfunc>
 800a754:	e00d      	b.n	800a772 <qsort+0x1e0>
 800a756:	1b2f      	subs	r7, r5, r4
 800a758:	4629      	mov	r1, r5
 800a75a:	4638      	mov	r0, r7
 800a75c:	9b00      	ldr	r3, [sp, #0]
 800a75e:	4798      	blx	r3
 800a760:	2800      	cmp	r0, #0
 800a762:	dd09      	ble.n	800a778 <qsort+0x1e6>
 800a764:	f1b8 0f00 	cmp.w	r8, #0
 800a768:	d1ee      	bne.n	800a748 <qsort+0x1b6>
 800a76a:	682b      	ldr	r3, [r5, #0]
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	602a      	str	r2, [r5, #0]
 800a770:	603b      	str	r3, [r7, #0]
 800a772:	463d      	mov	r5, r7
 800a774:	42ae      	cmp	r6, r5
 800a776:	d3ee      	bcc.n	800a756 <qsort+0x1c4>
 800a778:	44a3      	add	fp, r4
 800a77a:	e7df      	b.n	800a73c <qsort+0x1aa>
 800a77c:	eba9 0b05 	sub.w	fp, r9, r5
 800a780:	1baa      	subs	r2, r5, r6
 800a782:	455a      	cmp	r2, fp
 800a784:	bfa8      	it	ge
 800a786:	465a      	movge	r2, fp
 800a788:	b12a      	cbz	r2, 800a796 <qsort+0x204>
 800a78a:	4643      	mov	r3, r8
 800a78c:	4630      	mov	r0, r6
 800a78e:	eba9 0102 	sub.w	r1, r9, r2
 800a792:	f7ff fec5 	bl	800a520 <swapfunc>
 800a796:	9b02      	ldr	r3, [sp, #8]
 800a798:	ebaa 0507 	sub.w	r5, sl, r7
 800a79c:	eba3 020a 	sub.w	r2, r3, sl
 800a7a0:	1b12      	subs	r2, r2, r4
 800a7a2:	42aa      	cmp	r2, r5
 800a7a4:	bf28      	it	cs
 800a7a6:	462a      	movcs	r2, r5
 800a7a8:	b12a      	cbz	r2, 800a7b6 <qsort+0x224>
 800a7aa:	9902      	ldr	r1, [sp, #8]
 800a7ac:	4643      	mov	r3, r8
 800a7ae:	4648      	mov	r0, r9
 800a7b0:	1a89      	subs	r1, r1, r2
 800a7b2:	f7ff feb5 	bl	800a520 <swapfunc>
 800a7b6:	9b02      	ldr	r3, [sp, #8]
 800a7b8:	455d      	cmp	r5, fp
 800a7ba:	465f      	mov	r7, fp
 800a7bc:	eba3 0005 	sub.w	r0, r3, r5
 800a7c0:	d904      	bls.n	800a7cc <qsort+0x23a>
 800a7c2:	4633      	mov	r3, r6
 800a7c4:	462f      	mov	r7, r5
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	465d      	mov	r5, fp
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	42a5      	cmp	r5, r4
 800a7ce:	d923      	bls.n	800a818 <qsort+0x286>
 800a7d0:	9b01      	ldr	r3, [sp, #4]
 800a7d2:	fbb5 f1f4 	udiv	r1, r5, r4
 800a7d6:	2b07      	cmp	r3, #7
 800a7d8:	d80e      	bhi.n	800a7f8 <qsort+0x266>
 800a7da:	fbb7 f7f4 	udiv	r7, r7, r4
 800a7de:	9a01      	ldr	r2, [sp, #4]
 800a7e0:	ab14      	add	r3, sp, #80	@ 0x50
 800a7e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7e6:	f843 6c40 	str.w	r6, [r3, #-64]
 800a7ea:	f843 7c3c 	str.w	r7, [r3, #-60]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	e6dd      	b.n	800a5b4 <qsort+0x22>
 800a7f8:	4622      	mov	r2, r4
 800a7fa:	9b00      	ldr	r3, [sp, #0]
 800a7fc:	f7ff fec9 	bl	800a592 <qsort>
 800a800:	42a7      	cmp	r7, r4
 800a802:	d80c      	bhi.n	800a81e <qsort+0x28c>
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	3b01      	subs	r3, #1
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	9a01      	ldr	r2, [sp, #4]
 800a80c:	ab14      	add	r3, sp, #80	@ 0x50
 800a80e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a812:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 800a816:	e7ed      	b.n	800a7f4 <qsort+0x262>
 800a818:	42a7      	cmp	r7, r4
 800a81a:	f67f aed7 	bls.w	800a5cc <qsort+0x3a>
 800a81e:	fbb7 f1f4 	udiv	r1, r7, r4
 800a822:	4630      	mov	r0, r6
 800a824:	e7e6      	b.n	800a7f4 <qsort+0x262>

0800a826 <__cvt>:
 800a826:	2b00      	cmp	r3, #0
 800a828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a82c:	461d      	mov	r5, r3
 800a82e:	bfbb      	ittet	lt
 800a830:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a834:	461d      	movlt	r5, r3
 800a836:	2300      	movge	r3, #0
 800a838:	232d      	movlt	r3, #45	@ 0x2d
 800a83a:	b088      	sub	sp, #32
 800a83c:	4614      	mov	r4, r2
 800a83e:	bfb8      	it	lt
 800a840:	4614      	movlt	r4, r2
 800a842:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a844:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a846:	7013      	strb	r3, [r2, #0]
 800a848:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a84a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a84e:	f023 0820 	bic.w	r8, r3, #32
 800a852:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a856:	d005      	beq.n	800a864 <__cvt+0x3e>
 800a858:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a85c:	d100      	bne.n	800a860 <__cvt+0x3a>
 800a85e:	3601      	adds	r6, #1
 800a860:	2302      	movs	r3, #2
 800a862:	e000      	b.n	800a866 <__cvt+0x40>
 800a864:	2303      	movs	r3, #3
 800a866:	aa07      	add	r2, sp, #28
 800a868:	9204      	str	r2, [sp, #16]
 800a86a:	aa06      	add	r2, sp, #24
 800a86c:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a870:	e9cd 3600 	strd	r3, r6, [sp]
 800a874:	4622      	mov	r2, r4
 800a876:	462b      	mov	r3, r5
 800a878:	f001 fa32 	bl	800bce0 <_dtoa_r>
 800a87c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a880:	4607      	mov	r7, r0
 800a882:	d119      	bne.n	800a8b8 <__cvt+0x92>
 800a884:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a886:	07db      	lsls	r3, r3, #31
 800a888:	d50e      	bpl.n	800a8a8 <__cvt+0x82>
 800a88a:	eb00 0906 	add.w	r9, r0, r6
 800a88e:	2200      	movs	r2, #0
 800a890:	2300      	movs	r3, #0
 800a892:	4620      	mov	r0, r4
 800a894:	4629      	mov	r1, r5
 800a896:	f7f6 f89f 	bl	80009d8 <__aeabi_dcmpeq>
 800a89a:	b108      	cbz	r0, 800a8a0 <__cvt+0x7a>
 800a89c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a8a0:	2230      	movs	r2, #48	@ 0x30
 800a8a2:	9b07      	ldr	r3, [sp, #28]
 800a8a4:	454b      	cmp	r3, r9
 800a8a6:	d31e      	bcc.n	800a8e6 <__cvt+0xc0>
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	9b07      	ldr	r3, [sp, #28]
 800a8ac:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a8ae:	1bdb      	subs	r3, r3, r7
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	b008      	add	sp, #32
 800a8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a8bc:	eb00 0906 	add.w	r9, r0, r6
 800a8c0:	d1e5      	bne.n	800a88e <__cvt+0x68>
 800a8c2:	7803      	ldrb	r3, [r0, #0]
 800a8c4:	2b30      	cmp	r3, #48	@ 0x30
 800a8c6:	d10a      	bne.n	800a8de <__cvt+0xb8>
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	f7f6 f882 	bl	80009d8 <__aeabi_dcmpeq>
 800a8d4:	b918      	cbnz	r0, 800a8de <__cvt+0xb8>
 800a8d6:	f1c6 0601 	rsb	r6, r6, #1
 800a8da:	f8ca 6000 	str.w	r6, [sl]
 800a8de:	f8da 3000 	ldr.w	r3, [sl]
 800a8e2:	4499      	add	r9, r3
 800a8e4:	e7d3      	b.n	800a88e <__cvt+0x68>
 800a8e6:	1c59      	adds	r1, r3, #1
 800a8e8:	9107      	str	r1, [sp, #28]
 800a8ea:	701a      	strb	r2, [r3, #0]
 800a8ec:	e7d9      	b.n	800a8a2 <__cvt+0x7c>

0800a8ee <__exponent>:
 800a8ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8f0:	2900      	cmp	r1, #0
 800a8f2:	bfb6      	itet	lt
 800a8f4:	232d      	movlt	r3, #45	@ 0x2d
 800a8f6:	232b      	movge	r3, #43	@ 0x2b
 800a8f8:	4249      	neglt	r1, r1
 800a8fa:	2909      	cmp	r1, #9
 800a8fc:	7002      	strb	r2, [r0, #0]
 800a8fe:	7043      	strb	r3, [r0, #1]
 800a900:	dd29      	ble.n	800a956 <__exponent+0x68>
 800a902:	f10d 0307 	add.w	r3, sp, #7
 800a906:	461d      	mov	r5, r3
 800a908:	270a      	movs	r7, #10
 800a90a:	fbb1 f6f7 	udiv	r6, r1, r7
 800a90e:	461a      	mov	r2, r3
 800a910:	fb07 1416 	mls	r4, r7, r6, r1
 800a914:	3430      	adds	r4, #48	@ 0x30
 800a916:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a91a:	460c      	mov	r4, r1
 800a91c:	2c63      	cmp	r4, #99	@ 0x63
 800a91e:	4631      	mov	r1, r6
 800a920:	f103 33ff 	add.w	r3, r3, #4294967295
 800a924:	dcf1      	bgt.n	800a90a <__exponent+0x1c>
 800a926:	3130      	adds	r1, #48	@ 0x30
 800a928:	1e94      	subs	r4, r2, #2
 800a92a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a92e:	4623      	mov	r3, r4
 800a930:	1c41      	adds	r1, r0, #1
 800a932:	42ab      	cmp	r3, r5
 800a934:	d30a      	bcc.n	800a94c <__exponent+0x5e>
 800a936:	f10d 0309 	add.w	r3, sp, #9
 800a93a:	1a9b      	subs	r3, r3, r2
 800a93c:	42ac      	cmp	r4, r5
 800a93e:	bf88      	it	hi
 800a940:	2300      	movhi	r3, #0
 800a942:	3302      	adds	r3, #2
 800a944:	4403      	add	r3, r0
 800a946:	1a18      	subs	r0, r3, r0
 800a948:	b003      	add	sp, #12
 800a94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a950:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a954:	e7ed      	b.n	800a932 <__exponent+0x44>
 800a956:	2330      	movs	r3, #48	@ 0x30
 800a958:	3130      	adds	r1, #48	@ 0x30
 800a95a:	7083      	strb	r3, [r0, #2]
 800a95c:	70c1      	strb	r1, [r0, #3]
 800a95e:	1d03      	adds	r3, r0, #4
 800a960:	e7f1      	b.n	800a946 <__exponent+0x58>
	...

0800a964 <_printf_float>:
 800a964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a968:	b091      	sub	sp, #68	@ 0x44
 800a96a:	460c      	mov	r4, r1
 800a96c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a970:	4616      	mov	r6, r2
 800a972:	461f      	mov	r7, r3
 800a974:	4605      	mov	r5, r0
 800a976:	f001 f879 	bl	800ba6c <_localeconv_r>
 800a97a:	6803      	ldr	r3, [r0, #0]
 800a97c:	4618      	mov	r0, r3
 800a97e:	9308      	str	r3, [sp, #32]
 800a980:	f7f5 fbfe 	bl	8000180 <strlen>
 800a984:	2300      	movs	r3, #0
 800a986:	930e      	str	r3, [sp, #56]	@ 0x38
 800a988:	f8d8 3000 	ldr.w	r3, [r8]
 800a98c:	9009      	str	r0, [sp, #36]	@ 0x24
 800a98e:	3307      	adds	r3, #7
 800a990:	f023 0307 	bic.w	r3, r3, #7
 800a994:	f103 0208 	add.w	r2, r3, #8
 800a998:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a99c:	f8d4 b000 	ldr.w	fp, [r4]
 800a9a0:	f8c8 2000 	str.w	r2, [r8]
 800a9a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a9ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9ae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a9be:	4b9c      	ldr	r3, [pc, #624]	@ (800ac30 <_printf_float+0x2cc>)
 800a9c0:	f7f6 f83c 	bl	8000a3c <__aeabi_dcmpun>
 800a9c4:	bb70      	cbnz	r0, 800aa24 <_printf_float+0xc0>
 800a9c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ce:	4b98      	ldr	r3, [pc, #608]	@ (800ac30 <_printf_float+0x2cc>)
 800a9d0:	f7f6 f816 	bl	8000a00 <__aeabi_dcmple>
 800a9d4:	bb30      	cbnz	r0, 800aa24 <_printf_float+0xc0>
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	2300      	movs	r3, #0
 800a9da:	4640      	mov	r0, r8
 800a9dc:	4649      	mov	r1, r9
 800a9de:	f7f6 f805 	bl	80009ec <__aeabi_dcmplt>
 800a9e2:	b110      	cbz	r0, 800a9ea <_printf_float+0x86>
 800a9e4:	232d      	movs	r3, #45	@ 0x2d
 800a9e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9ea:	4a92      	ldr	r2, [pc, #584]	@ (800ac34 <_printf_float+0x2d0>)
 800a9ec:	4b92      	ldr	r3, [pc, #584]	@ (800ac38 <_printf_float+0x2d4>)
 800a9ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a9f2:	bf94      	ite	ls
 800a9f4:	4690      	movls	r8, r2
 800a9f6:	4698      	movhi	r8, r3
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	f04f 0900 	mov.w	r9, #0
 800a9fe:	6123      	str	r3, [r4, #16]
 800aa00:	f02b 0304 	bic.w	r3, fp, #4
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	4633      	mov	r3, r6
 800aa08:	4621      	mov	r1, r4
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	9700      	str	r7, [sp, #0]
 800aa0e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800aa10:	f000 f9d4 	bl	800adbc <_printf_common>
 800aa14:	3001      	adds	r0, #1
 800aa16:	f040 8090 	bne.w	800ab3a <_printf_float+0x1d6>
 800aa1a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1e:	b011      	add	sp, #68	@ 0x44
 800aa20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa24:	4642      	mov	r2, r8
 800aa26:	464b      	mov	r3, r9
 800aa28:	4640      	mov	r0, r8
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	f7f6 f806 	bl	8000a3c <__aeabi_dcmpun>
 800aa30:	b148      	cbz	r0, 800aa46 <_printf_float+0xe2>
 800aa32:	464b      	mov	r3, r9
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	bfb8      	it	lt
 800aa38:	232d      	movlt	r3, #45	@ 0x2d
 800aa3a:	4a80      	ldr	r2, [pc, #512]	@ (800ac3c <_printf_float+0x2d8>)
 800aa3c:	bfb8      	it	lt
 800aa3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aa42:	4b7f      	ldr	r3, [pc, #508]	@ (800ac40 <_printf_float+0x2dc>)
 800aa44:	e7d3      	b.n	800a9ee <_printf_float+0x8a>
 800aa46:	6863      	ldr	r3, [r4, #4]
 800aa48:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800aa4c:	1c5a      	adds	r2, r3, #1
 800aa4e:	d13f      	bne.n	800aad0 <_printf_float+0x16c>
 800aa50:	2306      	movs	r3, #6
 800aa52:	6063      	str	r3, [r4, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	9206      	str	r2, [sp, #24]
 800aa5e:	aa0e      	add	r2, sp, #56	@ 0x38
 800aa60:	e9cd a204 	strd	sl, r2, [sp, #16]
 800aa64:	aa0d      	add	r2, sp, #52	@ 0x34
 800aa66:	9203      	str	r2, [sp, #12]
 800aa68:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800aa6c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aa70:	6863      	ldr	r3, [r4, #4]
 800aa72:	4642      	mov	r2, r8
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	4628      	mov	r0, r5
 800aa78:	464b      	mov	r3, r9
 800aa7a:	910a      	str	r1, [sp, #40]	@ 0x28
 800aa7c:	f7ff fed3 	bl	800a826 <__cvt>
 800aa80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa82:	4680      	mov	r8, r0
 800aa84:	2947      	cmp	r1, #71	@ 0x47
 800aa86:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800aa88:	d128      	bne.n	800aadc <_printf_float+0x178>
 800aa8a:	1cc8      	adds	r0, r1, #3
 800aa8c:	db02      	blt.n	800aa94 <_printf_float+0x130>
 800aa8e:	6863      	ldr	r3, [r4, #4]
 800aa90:	4299      	cmp	r1, r3
 800aa92:	dd40      	ble.n	800ab16 <_printf_float+0x1b2>
 800aa94:	f1aa 0a02 	sub.w	sl, sl, #2
 800aa98:	fa5f fa8a 	uxtb.w	sl, sl
 800aa9c:	4652      	mov	r2, sl
 800aa9e:	3901      	subs	r1, #1
 800aaa0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aaa4:	910d      	str	r1, [sp, #52]	@ 0x34
 800aaa6:	f7ff ff22 	bl	800a8ee <__exponent>
 800aaaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aaac:	4681      	mov	r9, r0
 800aaae:	1813      	adds	r3, r2, r0
 800aab0:	2a01      	cmp	r2, #1
 800aab2:	6123      	str	r3, [r4, #16]
 800aab4:	dc02      	bgt.n	800aabc <_printf_float+0x158>
 800aab6:	6822      	ldr	r2, [r4, #0]
 800aab8:	07d2      	lsls	r2, r2, #31
 800aaba:	d501      	bpl.n	800aac0 <_printf_float+0x15c>
 800aabc:	3301      	adds	r3, #1
 800aabe:	6123      	str	r3, [r4, #16]
 800aac0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d09e      	beq.n	800aa06 <_printf_float+0xa2>
 800aac8:	232d      	movs	r3, #45	@ 0x2d
 800aaca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aace:	e79a      	b.n	800aa06 <_printf_float+0xa2>
 800aad0:	2947      	cmp	r1, #71	@ 0x47
 800aad2:	d1bf      	bne.n	800aa54 <_printf_float+0xf0>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1bd      	bne.n	800aa54 <_printf_float+0xf0>
 800aad8:	2301      	movs	r3, #1
 800aada:	e7ba      	b.n	800aa52 <_printf_float+0xee>
 800aadc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aae0:	d9dc      	bls.n	800aa9c <_printf_float+0x138>
 800aae2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aae6:	d118      	bne.n	800ab1a <_printf_float+0x1b6>
 800aae8:	2900      	cmp	r1, #0
 800aaea:	6863      	ldr	r3, [r4, #4]
 800aaec:	dd0b      	ble.n	800ab06 <_printf_float+0x1a2>
 800aaee:	6121      	str	r1, [r4, #16]
 800aaf0:	b913      	cbnz	r3, 800aaf8 <_printf_float+0x194>
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	07d0      	lsls	r0, r2, #31
 800aaf6:	d502      	bpl.n	800aafe <_printf_float+0x19a>
 800aaf8:	3301      	adds	r3, #1
 800aafa:	440b      	add	r3, r1
 800aafc:	6123      	str	r3, [r4, #16]
 800aafe:	f04f 0900 	mov.w	r9, #0
 800ab02:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ab04:	e7dc      	b.n	800aac0 <_printf_float+0x15c>
 800ab06:	b913      	cbnz	r3, 800ab0e <_printf_float+0x1aa>
 800ab08:	6822      	ldr	r2, [r4, #0]
 800ab0a:	07d2      	lsls	r2, r2, #31
 800ab0c:	d501      	bpl.n	800ab12 <_printf_float+0x1ae>
 800ab0e:	3302      	adds	r3, #2
 800ab10:	e7f4      	b.n	800aafc <_printf_float+0x198>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e7f2      	b.n	800aafc <_printf_float+0x198>
 800ab16:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ab1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab1c:	4299      	cmp	r1, r3
 800ab1e:	db05      	blt.n	800ab2c <_printf_float+0x1c8>
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	6121      	str	r1, [r4, #16]
 800ab24:	07d8      	lsls	r0, r3, #31
 800ab26:	d5ea      	bpl.n	800aafe <_printf_float+0x19a>
 800ab28:	1c4b      	adds	r3, r1, #1
 800ab2a:	e7e7      	b.n	800aafc <_printf_float+0x198>
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	bfcc      	ite	gt
 800ab30:	2201      	movgt	r2, #1
 800ab32:	f1c1 0202 	rsble	r2, r1, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	e7e0      	b.n	800aafc <_printf_float+0x198>
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	055a      	lsls	r2, r3, #21
 800ab3e:	d407      	bmi.n	800ab50 <_printf_float+0x1ec>
 800ab40:	6923      	ldr	r3, [r4, #16]
 800ab42:	4642      	mov	r2, r8
 800ab44:	4631      	mov	r1, r6
 800ab46:	4628      	mov	r0, r5
 800ab48:	47b8      	blx	r7
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d12b      	bne.n	800aba6 <_printf_float+0x242>
 800ab4e:	e764      	b.n	800aa1a <_printf_float+0xb6>
 800ab50:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab54:	f240 80dc 	bls.w	800ad10 <_printf_float+0x3ac>
 800ab58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	2300      	movs	r3, #0
 800ab60:	f7f5 ff3a 	bl	80009d8 <__aeabi_dcmpeq>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d033      	beq.n	800abd0 <_printf_float+0x26c>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	4a35      	ldr	r2, [pc, #212]	@ (800ac44 <_printf_float+0x2e0>)
 800ab70:	47b8      	blx	r7
 800ab72:	3001      	adds	r0, #1
 800ab74:	f43f af51 	beq.w	800aa1a <_printf_float+0xb6>
 800ab78:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800ab7c:	4543      	cmp	r3, r8
 800ab7e:	db02      	blt.n	800ab86 <_printf_float+0x222>
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	07d8      	lsls	r0, r3, #31
 800ab84:	d50f      	bpl.n	800aba6 <_printf_float+0x242>
 800ab86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	47b8      	blx	r7
 800ab90:	3001      	adds	r0, #1
 800ab92:	f43f af42 	beq.w	800aa1a <_printf_float+0xb6>
 800ab96:	f04f 0900 	mov.w	r9, #0
 800ab9a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab9e:	f104 0a1a 	add.w	sl, r4, #26
 800aba2:	45c8      	cmp	r8, r9
 800aba4:	dc09      	bgt.n	800abba <_printf_float+0x256>
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	079b      	lsls	r3, r3, #30
 800abaa:	f100 8102 	bmi.w	800adb2 <_printf_float+0x44e>
 800abae:	68e0      	ldr	r0, [r4, #12]
 800abb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abb2:	4298      	cmp	r0, r3
 800abb4:	bfb8      	it	lt
 800abb6:	4618      	movlt	r0, r3
 800abb8:	e731      	b.n	800aa1e <_printf_float+0xba>
 800abba:	2301      	movs	r3, #1
 800abbc:	4652      	mov	r2, sl
 800abbe:	4631      	mov	r1, r6
 800abc0:	4628      	mov	r0, r5
 800abc2:	47b8      	blx	r7
 800abc4:	3001      	adds	r0, #1
 800abc6:	f43f af28 	beq.w	800aa1a <_printf_float+0xb6>
 800abca:	f109 0901 	add.w	r9, r9, #1
 800abce:	e7e8      	b.n	800aba2 <_printf_float+0x23e>
 800abd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	dc38      	bgt.n	800ac48 <_printf_float+0x2e4>
 800abd6:	2301      	movs	r3, #1
 800abd8:	4631      	mov	r1, r6
 800abda:	4628      	mov	r0, r5
 800abdc:	4a19      	ldr	r2, [pc, #100]	@ (800ac44 <_printf_float+0x2e0>)
 800abde:	47b8      	blx	r7
 800abe0:	3001      	adds	r0, #1
 800abe2:	f43f af1a 	beq.w	800aa1a <_printf_float+0xb6>
 800abe6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800abea:	ea59 0303 	orrs.w	r3, r9, r3
 800abee:	d102      	bne.n	800abf6 <_printf_float+0x292>
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	07d9      	lsls	r1, r3, #31
 800abf4:	d5d7      	bpl.n	800aba6 <_printf_float+0x242>
 800abf6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800abfa:	4631      	mov	r1, r6
 800abfc:	4628      	mov	r0, r5
 800abfe:	47b8      	blx	r7
 800ac00:	3001      	adds	r0, #1
 800ac02:	f43f af0a 	beq.w	800aa1a <_printf_float+0xb6>
 800ac06:	f04f 0a00 	mov.w	sl, #0
 800ac0a:	f104 0b1a 	add.w	fp, r4, #26
 800ac0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac10:	425b      	negs	r3, r3
 800ac12:	4553      	cmp	r3, sl
 800ac14:	dc01      	bgt.n	800ac1a <_printf_float+0x2b6>
 800ac16:	464b      	mov	r3, r9
 800ac18:	e793      	b.n	800ab42 <_printf_float+0x1de>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	465a      	mov	r2, fp
 800ac1e:	4631      	mov	r1, r6
 800ac20:	4628      	mov	r0, r5
 800ac22:	47b8      	blx	r7
 800ac24:	3001      	adds	r0, #1
 800ac26:	f43f aef8 	beq.w	800aa1a <_printf_float+0xb6>
 800ac2a:	f10a 0a01 	add.w	sl, sl, #1
 800ac2e:	e7ee      	b.n	800ac0e <_printf_float+0x2aa>
 800ac30:	7fefffff 	.word	0x7fefffff
 800ac34:	0800f229 	.word	0x0800f229
 800ac38:	0800f22d 	.word	0x0800f22d
 800ac3c:	0800f231 	.word	0x0800f231
 800ac40:	0800f235 	.word	0x0800f235
 800ac44:	0800f239 	.word	0x0800f239
 800ac48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac4a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ac4e:	4553      	cmp	r3, sl
 800ac50:	bfa8      	it	ge
 800ac52:	4653      	movge	r3, sl
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	4699      	mov	r9, r3
 800ac58:	dc36      	bgt.n	800acc8 <_printf_float+0x364>
 800ac5a:	f04f 0b00 	mov.w	fp, #0
 800ac5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac62:	f104 021a 	add.w	r2, r4, #26
 800ac66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac68:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac6a:	eba3 0309 	sub.w	r3, r3, r9
 800ac6e:	455b      	cmp	r3, fp
 800ac70:	dc31      	bgt.n	800acd6 <_printf_float+0x372>
 800ac72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac74:	459a      	cmp	sl, r3
 800ac76:	dc3a      	bgt.n	800acee <_printf_float+0x38a>
 800ac78:	6823      	ldr	r3, [r4, #0]
 800ac7a:	07da      	lsls	r2, r3, #31
 800ac7c:	d437      	bmi.n	800acee <_printf_float+0x38a>
 800ac7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac80:	ebaa 0903 	sub.w	r9, sl, r3
 800ac84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac86:	ebaa 0303 	sub.w	r3, sl, r3
 800ac8a:	4599      	cmp	r9, r3
 800ac8c:	bfa8      	it	ge
 800ac8e:	4699      	movge	r9, r3
 800ac90:	f1b9 0f00 	cmp.w	r9, #0
 800ac94:	dc33      	bgt.n	800acfe <_printf_float+0x39a>
 800ac96:	f04f 0800 	mov.w	r8, #0
 800ac9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac9e:	f104 0b1a 	add.w	fp, r4, #26
 800aca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aca4:	ebaa 0303 	sub.w	r3, sl, r3
 800aca8:	eba3 0309 	sub.w	r3, r3, r9
 800acac:	4543      	cmp	r3, r8
 800acae:	f77f af7a 	ble.w	800aba6 <_printf_float+0x242>
 800acb2:	2301      	movs	r3, #1
 800acb4:	465a      	mov	r2, fp
 800acb6:	4631      	mov	r1, r6
 800acb8:	4628      	mov	r0, r5
 800acba:	47b8      	blx	r7
 800acbc:	3001      	adds	r0, #1
 800acbe:	f43f aeac 	beq.w	800aa1a <_printf_float+0xb6>
 800acc2:	f108 0801 	add.w	r8, r8, #1
 800acc6:	e7ec      	b.n	800aca2 <_printf_float+0x33e>
 800acc8:	4642      	mov	r2, r8
 800acca:	4631      	mov	r1, r6
 800accc:	4628      	mov	r0, r5
 800acce:	47b8      	blx	r7
 800acd0:	3001      	adds	r0, #1
 800acd2:	d1c2      	bne.n	800ac5a <_printf_float+0x2f6>
 800acd4:	e6a1      	b.n	800aa1a <_printf_float+0xb6>
 800acd6:	2301      	movs	r3, #1
 800acd8:	4631      	mov	r1, r6
 800acda:	4628      	mov	r0, r5
 800acdc:	920a      	str	r2, [sp, #40]	@ 0x28
 800acde:	47b8      	blx	r7
 800ace0:	3001      	adds	r0, #1
 800ace2:	f43f ae9a 	beq.w	800aa1a <_printf_float+0xb6>
 800ace6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ace8:	f10b 0b01 	add.w	fp, fp, #1
 800acec:	e7bb      	b.n	800ac66 <_printf_float+0x302>
 800acee:	4631      	mov	r1, r6
 800acf0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800acf4:	4628      	mov	r0, r5
 800acf6:	47b8      	blx	r7
 800acf8:	3001      	adds	r0, #1
 800acfa:	d1c0      	bne.n	800ac7e <_printf_float+0x31a>
 800acfc:	e68d      	b.n	800aa1a <_printf_float+0xb6>
 800acfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad00:	464b      	mov	r3, r9
 800ad02:	4631      	mov	r1, r6
 800ad04:	4628      	mov	r0, r5
 800ad06:	4442      	add	r2, r8
 800ad08:	47b8      	blx	r7
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	d1c3      	bne.n	800ac96 <_printf_float+0x332>
 800ad0e:	e684      	b.n	800aa1a <_printf_float+0xb6>
 800ad10:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ad14:	f1ba 0f01 	cmp.w	sl, #1
 800ad18:	dc01      	bgt.n	800ad1e <_printf_float+0x3ba>
 800ad1a:	07db      	lsls	r3, r3, #31
 800ad1c:	d536      	bpl.n	800ad8c <_printf_float+0x428>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	4642      	mov	r2, r8
 800ad22:	4631      	mov	r1, r6
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b8      	blx	r7
 800ad28:	3001      	adds	r0, #1
 800ad2a:	f43f ae76 	beq.w	800aa1a <_printf_float+0xb6>
 800ad2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad32:	4631      	mov	r1, r6
 800ad34:	4628      	mov	r0, r5
 800ad36:	47b8      	blx	r7
 800ad38:	3001      	adds	r0, #1
 800ad3a:	f43f ae6e 	beq.w	800aa1a <_printf_float+0xb6>
 800ad3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad42:	2200      	movs	r2, #0
 800ad44:	2300      	movs	r3, #0
 800ad46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad4a:	f7f5 fe45 	bl	80009d8 <__aeabi_dcmpeq>
 800ad4e:	b9c0      	cbnz	r0, 800ad82 <_printf_float+0x41e>
 800ad50:	4653      	mov	r3, sl
 800ad52:	f108 0201 	add.w	r2, r8, #1
 800ad56:	4631      	mov	r1, r6
 800ad58:	4628      	mov	r0, r5
 800ad5a:	47b8      	blx	r7
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d10c      	bne.n	800ad7a <_printf_float+0x416>
 800ad60:	e65b      	b.n	800aa1a <_printf_float+0xb6>
 800ad62:	2301      	movs	r3, #1
 800ad64:	465a      	mov	r2, fp
 800ad66:	4631      	mov	r1, r6
 800ad68:	4628      	mov	r0, r5
 800ad6a:	47b8      	blx	r7
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	f43f ae54 	beq.w	800aa1a <_printf_float+0xb6>
 800ad72:	f108 0801 	add.w	r8, r8, #1
 800ad76:	45d0      	cmp	r8, sl
 800ad78:	dbf3      	blt.n	800ad62 <_printf_float+0x3fe>
 800ad7a:	464b      	mov	r3, r9
 800ad7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ad80:	e6e0      	b.n	800ab44 <_printf_float+0x1e0>
 800ad82:	f04f 0800 	mov.w	r8, #0
 800ad86:	f104 0b1a 	add.w	fp, r4, #26
 800ad8a:	e7f4      	b.n	800ad76 <_printf_float+0x412>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	4642      	mov	r2, r8
 800ad90:	e7e1      	b.n	800ad56 <_printf_float+0x3f2>
 800ad92:	2301      	movs	r3, #1
 800ad94:	464a      	mov	r2, r9
 800ad96:	4631      	mov	r1, r6
 800ad98:	4628      	mov	r0, r5
 800ad9a:	47b8      	blx	r7
 800ad9c:	3001      	adds	r0, #1
 800ad9e:	f43f ae3c 	beq.w	800aa1a <_printf_float+0xb6>
 800ada2:	f108 0801 	add.w	r8, r8, #1
 800ada6:	68e3      	ldr	r3, [r4, #12]
 800ada8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800adaa:	1a5b      	subs	r3, r3, r1
 800adac:	4543      	cmp	r3, r8
 800adae:	dcf0      	bgt.n	800ad92 <_printf_float+0x42e>
 800adb0:	e6fd      	b.n	800abae <_printf_float+0x24a>
 800adb2:	f04f 0800 	mov.w	r8, #0
 800adb6:	f104 0919 	add.w	r9, r4, #25
 800adba:	e7f4      	b.n	800ada6 <_printf_float+0x442>

0800adbc <_printf_common>:
 800adbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adc0:	4616      	mov	r6, r2
 800adc2:	4698      	mov	r8, r3
 800adc4:	688a      	ldr	r2, [r1, #8]
 800adc6:	690b      	ldr	r3, [r1, #16]
 800adc8:	4607      	mov	r7, r0
 800adca:	4293      	cmp	r3, r2
 800adcc:	bfb8      	it	lt
 800adce:	4613      	movlt	r3, r2
 800add0:	6033      	str	r3, [r6, #0]
 800add2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800add6:	460c      	mov	r4, r1
 800add8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800addc:	b10a      	cbz	r2, 800ade2 <_printf_common+0x26>
 800adde:	3301      	adds	r3, #1
 800ade0:	6033      	str	r3, [r6, #0]
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	0699      	lsls	r1, r3, #26
 800ade6:	bf42      	ittt	mi
 800ade8:	6833      	ldrmi	r3, [r6, #0]
 800adea:	3302      	addmi	r3, #2
 800adec:	6033      	strmi	r3, [r6, #0]
 800adee:	6825      	ldr	r5, [r4, #0]
 800adf0:	f015 0506 	ands.w	r5, r5, #6
 800adf4:	d106      	bne.n	800ae04 <_printf_common+0x48>
 800adf6:	f104 0a19 	add.w	sl, r4, #25
 800adfa:	68e3      	ldr	r3, [r4, #12]
 800adfc:	6832      	ldr	r2, [r6, #0]
 800adfe:	1a9b      	subs	r3, r3, r2
 800ae00:	42ab      	cmp	r3, r5
 800ae02:	dc2b      	bgt.n	800ae5c <_printf_common+0xa0>
 800ae04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae08:	6822      	ldr	r2, [r4, #0]
 800ae0a:	3b00      	subs	r3, #0
 800ae0c:	bf18      	it	ne
 800ae0e:	2301      	movne	r3, #1
 800ae10:	0692      	lsls	r2, r2, #26
 800ae12:	d430      	bmi.n	800ae76 <_printf_common+0xba>
 800ae14:	4641      	mov	r1, r8
 800ae16:	4638      	mov	r0, r7
 800ae18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae1c:	47c8      	blx	r9
 800ae1e:	3001      	adds	r0, #1
 800ae20:	d023      	beq.n	800ae6a <_printf_common+0xae>
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	6922      	ldr	r2, [r4, #16]
 800ae26:	f003 0306 	and.w	r3, r3, #6
 800ae2a:	2b04      	cmp	r3, #4
 800ae2c:	bf14      	ite	ne
 800ae2e:	2500      	movne	r5, #0
 800ae30:	6833      	ldreq	r3, [r6, #0]
 800ae32:	f04f 0600 	mov.w	r6, #0
 800ae36:	bf08      	it	eq
 800ae38:	68e5      	ldreq	r5, [r4, #12]
 800ae3a:	f104 041a 	add.w	r4, r4, #26
 800ae3e:	bf08      	it	eq
 800ae40:	1aed      	subeq	r5, r5, r3
 800ae42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ae46:	bf08      	it	eq
 800ae48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	bfc4      	itt	gt
 800ae50:	1a9b      	subgt	r3, r3, r2
 800ae52:	18ed      	addgt	r5, r5, r3
 800ae54:	42b5      	cmp	r5, r6
 800ae56:	d11a      	bne.n	800ae8e <_printf_common+0xd2>
 800ae58:	2000      	movs	r0, #0
 800ae5a:	e008      	b.n	800ae6e <_printf_common+0xb2>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	4652      	mov	r2, sl
 800ae60:	4641      	mov	r1, r8
 800ae62:	4638      	mov	r0, r7
 800ae64:	47c8      	blx	r9
 800ae66:	3001      	adds	r0, #1
 800ae68:	d103      	bne.n	800ae72 <_printf_common+0xb6>
 800ae6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae72:	3501      	adds	r5, #1
 800ae74:	e7c1      	b.n	800adfa <_printf_common+0x3e>
 800ae76:	2030      	movs	r0, #48	@ 0x30
 800ae78:	18e1      	adds	r1, r4, r3
 800ae7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae84:	4422      	add	r2, r4
 800ae86:	3302      	adds	r3, #2
 800ae88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae8c:	e7c2      	b.n	800ae14 <_printf_common+0x58>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	4622      	mov	r2, r4
 800ae92:	4641      	mov	r1, r8
 800ae94:	4638      	mov	r0, r7
 800ae96:	47c8      	blx	r9
 800ae98:	3001      	adds	r0, #1
 800ae9a:	d0e6      	beq.n	800ae6a <_printf_common+0xae>
 800ae9c:	3601      	adds	r6, #1
 800ae9e:	e7d9      	b.n	800ae54 <_printf_common+0x98>

0800aea0 <_printf_i>:
 800aea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aea4:	7e0f      	ldrb	r7, [r1, #24]
 800aea6:	4691      	mov	r9, r2
 800aea8:	2f78      	cmp	r7, #120	@ 0x78
 800aeaa:	4680      	mov	r8, r0
 800aeac:	460c      	mov	r4, r1
 800aeae:	469a      	mov	sl, r3
 800aeb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aeb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aeb6:	d807      	bhi.n	800aec8 <_printf_i+0x28>
 800aeb8:	2f62      	cmp	r7, #98	@ 0x62
 800aeba:	d80a      	bhi.n	800aed2 <_printf_i+0x32>
 800aebc:	2f00      	cmp	r7, #0
 800aebe:	f000 80d3 	beq.w	800b068 <_printf_i+0x1c8>
 800aec2:	2f58      	cmp	r7, #88	@ 0x58
 800aec4:	f000 80ba 	beq.w	800b03c <_printf_i+0x19c>
 800aec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aecc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aed0:	e03a      	b.n	800af48 <_printf_i+0xa8>
 800aed2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aed6:	2b15      	cmp	r3, #21
 800aed8:	d8f6      	bhi.n	800aec8 <_printf_i+0x28>
 800aeda:	a101      	add	r1, pc, #4	@ (adr r1, 800aee0 <_printf_i+0x40>)
 800aedc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aee0:	0800af39 	.word	0x0800af39
 800aee4:	0800af4d 	.word	0x0800af4d
 800aee8:	0800aec9 	.word	0x0800aec9
 800aeec:	0800aec9 	.word	0x0800aec9
 800aef0:	0800aec9 	.word	0x0800aec9
 800aef4:	0800aec9 	.word	0x0800aec9
 800aef8:	0800af4d 	.word	0x0800af4d
 800aefc:	0800aec9 	.word	0x0800aec9
 800af00:	0800aec9 	.word	0x0800aec9
 800af04:	0800aec9 	.word	0x0800aec9
 800af08:	0800aec9 	.word	0x0800aec9
 800af0c:	0800b04f 	.word	0x0800b04f
 800af10:	0800af77 	.word	0x0800af77
 800af14:	0800b009 	.word	0x0800b009
 800af18:	0800aec9 	.word	0x0800aec9
 800af1c:	0800aec9 	.word	0x0800aec9
 800af20:	0800b071 	.word	0x0800b071
 800af24:	0800aec9 	.word	0x0800aec9
 800af28:	0800af77 	.word	0x0800af77
 800af2c:	0800aec9 	.word	0x0800aec9
 800af30:	0800aec9 	.word	0x0800aec9
 800af34:	0800b011 	.word	0x0800b011
 800af38:	6833      	ldr	r3, [r6, #0]
 800af3a:	1d1a      	adds	r2, r3, #4
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	6032      	str	r2, [r6, #0]
 800af40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af48:	2301      	movs	r3, #1
 800af4a:	e09e      	b.n	800b08a <_printf_i+0x1ea>
 800af4c:	6833      	ldr	r3, [r6, #0]
 800af4e:	6820      	ldr	r0, [r4, #0]
 800af50:	1d19      	adds	r1, r3, #4
 800af52:	6031      	str	r1, [r6, #0]
 800af54:	0606      	lsls	r6, r0, #24
 800af56:	d501      	bpl.n	800af5c <_printf_i+0xbc>
 800af58:	681d      	ldr	r5, [r3, #0]
 800af5a:	e003      	b.n	800af64 <_printf_i+0xc4>
 800af5c:	0645      	lsls	r5, r0, #25
 800af5e:	d5fb      	bpl.n	800af58 <_printf_i+0xb8>
 800af60:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af64:	2d00      	cmp	r5, #0
 800af66:	da03      	bge.n	800af70 <_printf_i+0xd0>
 800af68:	232d      	movs	r3, #45	@ 0x2d
 800af6a:	426d      	negs	r5, r5
 800af6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af70:	230a      	movs	r3, #10
 800af72:	4859      	ldr	r0, [pc, #356]	@ (800b0d8 <_printf_i+0x238>)
 800af74:	e011      	b.n	800af9a <_printf_i+0xfa>
 800af76:	6821      	ldr	r1, [r4, #0]
 800af78:	6833      	ldr	r3, [r6, #0]
 800af7a:	0608      	lsls	r0, r1, #24
 800af7c:	f853 5b04 	ldr.w	r5, [r3], #4
 800af80:	d402      	bmi.n	800af88 <_printf_i+0xe8>
 800af82:	0649      	lsls	r1, r1, #25
 800af84:	bf48      	it	mi
 800af86:	b2ad      	uxthmi	r5, r5
 800af88:	2f6f      	cmp	r7, #111	@ 0x6f
 800af8a:	6033      	str	r3, [r6, #0]
 800af8c:	bf14      	ite	ne
 800af8e:	230a      	movne	r3, #10
 800af90:	2308      	moveq	r3, #8
 800af92:	4851      	ldr	r0, [pc, #324]	@ (800b0d8 <_printf_i+0x238>)
 800af94:	2100      	movs	r1, #0
 800af96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af9a:	6866      	ldr	r6, [r4, #4]
 800af9c:	2e00      	cmp	r6, #0
 800af9e:	bfa8      	it	ge
 800afa0:	6821      	ldrge	r1, [r4, #0]
 800afa2:	60a6      	str	r6, [r4, #8]
 800afa4:	bfa4      	itt	ge
 800afa6:	f021 0104 	bicge.w	r1, r1, #4
 800afaa:	6021      	strge	r1, [r4, #0]
 800afac:	b90d      	cbnz	r5, 800afb2 <_printf_i+0x112>
 800afae:	2e00      	cmp	r6, #0
 800afb0:	d04b      	beq.n	800b04a <_printf_i+0x1aa>
 800afb2:	4616      	mov	r6, r2
 800afb4:	fbb5 f1f3 	udiv	r1, r5, r3
 800afb8:	fb03 5711 	mls	r7, r3, r1, r5
 800afbc:	5dc7      	ldrb	r7, [r0, r7]
 800afbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800afc2:	462f      	mov	r7, r5
 800afc4:	42bb      	cmp	r3, r7
 800afc6:	460d      	mov	r5, r1
 800afc8:	d9f4      	bls.n	800afb4 <_printf_i+0x114>
 800afca:	2b08      	cmp	r3, #8
 800afcc:	d10b      	bne.n	800afe6 <_printf_i+0x146>
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	07df      	lsls	r7, r3, #31
 800afd2:	d508      	bpl.n	800afe6 <_printf_i+0x146>
 800afd4:	6923      	ldr	r3, [r4, #16]
 800afd6:	6861      	ldr	r1, [r4, #4]
 800afd8:	4299      	cmp	r1, r3
 800afda:	bfde      	ittt	le
 800afdc:	2330      	movle	r3, #48	@ 0x30
 800afde:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afe2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afe6:	1b92      	subs	r2, r2, r6
 800afe8:	6122      	str	r2, [r4, #16]
 800afea:	464b      	mov	r3, r9
 800afec:	4621      	mov	r1, r4
 800afee:	4640      	mov	r0, r8
 800aff0:	f8cd a000 	str.w	sl, [sp]
 800aff4:	aa03      	add	r2, sp, #12
 800aff6:	f7ff fee1 	bl	800adbc <_printf_common>
 800affa:	3001      	adds	r0, #1
 800affc:	d14a      	bne.n	800b094 <_printf_i+0x1f4>
 800affe:	f04f 30ff 	mov.w	r0, #4294967295
 800b002:	b004      	add	sp, #16
 800b004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	f043 0320 	orr.w	r3, r3, #32
 800b00e:	6023      	str	r3, [r4, #0]
 800b010:	2778      	movs	r7, #120	@ 0x78
 800b012:	4832      	ldr	r0, [pc, #200]	@ (800b0dc <_printf_i+0x23c>)
 800b014:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b018:	6823      	ldr	r3, [r4, #0]
 800b01a:	6831      	ldr	r1, [r6, #0]
 800b01c:	061f      	lsls	r7, r3, #24
 800b01e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b022:	d402      	bmi.n	800b02a <_printf_i+0x18a>
 800b024:	065f      	lsls	r7, r3, #25
 800b026:	bf48      	it	mi
 800b028:	b2ad      	uxthmi	r5, r5
 800b02a:	6031      	str	r1, [r6, #0]
 800b02c:	07d9      	lsls	r1, r3, #31
 800b02e:	bf44      	itt	mi
 800b030:	f043 0320 	orrmi.w	r3, r3, #32
 800b034:	6023      	strmi	r3, [r4, #0]
 800b036:	b11d      	cbz	r5, 800b040 <_printf_i+0x1a0>
 800b038:	2310      	movs	r3, #16
 800b03a:	e7ab      	b.n	800af94 <_printf_i+0xf4>
 800b03c:	4826      	ldr	r0, [pc, #152]	@ (800b0d8 <_printf_i+0x238>)
 800b03e:	e7e9      	b.n	800b014 <_printf_i+0x174>
 800b040:	6823      	ldr	r3, [r4, #0]
 800b042:	f023 0320 	bic.w	r3, r3, #32
 800b046:	6023      	str	r3, [r4, #0]
 800b048:	e7f6      	b.n	800b038 <_printf_i+0x198>
 800b04a:	4616      	mov	r6, r2
 800b04c:	e7bd      	b.n	800afca <_printf_i+0x12a>
 800b04e:	6833      	ldr	r3, [r6, #0]
 800b050:	6825      	ldr	r5, [r4, #0]
 800b052:	1d18      	adds	r0, r3, #4
 800b054:	6961      	ldr	r1, [r4, #20]
 800b056:	6030      	str	r0, [r6, #0]
 800b058:	062e      	lsls	r6, r5, #24
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	d501      	bpl.n	800b062 <_printf_i+0x1c2>
 800b05e:	6019      	str	r1, [r3, #0]
 800b060:	e002      	b.n	800b068 <_printf_i+0x1c8>
 800b062:	0668      	lsls	r0, r5, #25
 800b064:	d5fb      	bpl.n	800b05e <_printf_i+0x1be>
 800b066:	8019      	strh	r1, [r3, #0]
 800b068:	2300      	movs	r3, #0
 800b06a:	4616      	mov	r6, r2
 800b06c:	6123      	str	r3, [r4, #16]
 800b06e:	e7bc      	b.n	800afea <_printf_i+0x14a>
 800b070:	6833      	ldr	r3, [r6, #0]
 800b072:	2100      	movs	r1, #0
 800b074:	1d1a      	adds	r2, r3, #4
 800b076:	6032      	str	r2, [r6, #0]
 800b078:	681e      	ldr	r6, [r3, #0]
 800b07a:	6862      	ldr	r2, [r4, #4]
 800b07c:	4630      	mov	r0, r6
 800b07e:	f000 fd84 	bl	800bb8a <memchr>
 800b082:	b108      	cbz	r0, 800b088 <_printf_i+0x1e8>
 800b084:	1b80      	subs	r0, r0, r6
 800b086:	6060      	str	r0, [r4, #4]
 800b088:	6863      	ldr	r3, [r4, #4]
 800b08a:	6123      	str	r3, [r4, #16]
 800b08c:	2300      	movs	r3, #0
 800b08e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b092:	e7aa      	b.n	800afea <_printf_i+0x14a>
 800b094:	4632      	mov	r2, r6
 800b096:	4649      	mov	r1, r9
 800b098:	4640      	mov	r0, r8
 800b09a:	6923      	ldr	r3, [r4, #16]
 800b09c:	47d0      	blx	sl
 800b09e:	3001      	adds	r0, #1
 800b0a0:	d0ad      	beq.n	800affe <_printf_i+0x15e>
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	079b      	lsls	r3, r3, #30
 800b0a6:	d413      	bmi.n	800b0d0 <_printf_i+0x230>
 800b0a8:	68e0      	ldr	r0, [r4, #12]
 800b0aa:	9b03      	ldr	r3, [sp, #12]
 800b0ac:	4298      	cmp	r0, r3
 800b0ae:	bfb8      	it	lt
 800b0b0:	4618      	movlt	r0, r3
 800b0b2:	e7a6      	b.n	800b002 <_printf_i+0x162>
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	4632      	mov	r2, r6
 800b0b8:	4649      	mov	r1, r9
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	47d0      	blx	sl
 800b0be:	3001      	adds	r0, #1
 800b0c0:	d09d      	beq.n	800affe <_printf_i+0x15e>
 800b0c2:	3501      	adds	r5, #1
 800b0c4:	68e3      	ldr	r3, [r4, #12]
 800b0c6:	9903      	ldr	r1, [sp, #12]
 800b0c8:	1a5b      	subs	r3, r3, r1
 800b0ca:	42ab      	cmp	r3, r5
 800b0cc:	dcf2      	bgt.n	800b0b4 <_printf_i+0x214>
 800b0ce:	e7eb      	b.n	800b0a8 <_printf_i+0x208>
 800b0d0:	2500      	movs	r5, #0
 800b0d2:	f104 0619 	add.w	r6, r4, #25
 800b0d6:	e7f5      	b.n	800b0c4 <_printf_i+0x224>
 800b0d8:	0800f23b 	.word	0x0800f23b
 800b0dc:	0800f24c 	.word	0x0800f24c

0800b0e0 <std>:
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	b510      	push	{r4, lr}
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	e9c0 3300 	strd	r3, r3, [r0]
 800b0ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0ee:	6083      	str	r3, [r0, #8]
 800b0f0:	8181      	strh	r1, [r0, #12]
 800b0f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b0f4:	81c2      	strh	r2, [r0, #14]
 800b0f6:	6183      	str	r3, [r0, #24]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	2208      	movs	r2, #8
 800b0fc:	305c      	adds	r0, #92	@ 0x5c
 800b0fe:	f000 fa91 	bl	800b624 <memset>
 800b102:	4b0d      	ldr	r3, [pc, #52]	@ (800b138 <std+0x58>)
 800b104:	6224      	str	r4, [r4, #32]
 800b106:	6263      	str	r3, [r4, #36]	@ 0x24
 800b108:	4b0c      	ldr	r3, [pc, #48]	@ (800b13c <std+0x5c>)
 800b10a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b10c:	4b0c      	ldr	r3, [pc, #48]	@ (800b140 <std+0x60>)
 800b10e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b110:	4b0c      	ldr	r3, [pc, #48]	@ (800b144 <std+0x64>)
 800b112:	6323      	str	r3, [r4, #48]	@ 0x30
 800b114:	4b0c      	ldr	r3, [pc, #48]	@ (800b148 <std+0x68>)
 800b116:	429c      	cmp	r4, r3
 800b118:	d006      	beq.n	800b128 <std+0x48>
 800b11a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b11e:	4294      	cmp	r4, r2
 800b120:	d002      	beq.n	800b128 <std+0x48>
 800b122:	33d0      	adds	r3, #208	@ 0xd0
 800b124:	429c      	cmp	r4, r3
 800b126:	d105      	bne.n	800b134 <std+0x54>
 800b128:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b130:	f000 bd20 	b.w	800bb74 <__retarget_lock_init_recursive>
 800b134:	bd10      	pop	{r4, pc}
 800b136:	bf00      	nop
 800b138:	0800b475 	.word	0x0800b475
 800b13c:	0800b497 	.word	0x0800b497
 800b140:	0800b4cf 	.word	0x0800b4cf
 800b144:	0800b4f3 	.word	0x0800b4f3
 800b148:	20000604 	.word	0x20000604

0800b14c <stdio_exit_handler>:
 800b14c:	4a02      	ldr	r2, [pc, #8]	@ (800b158 <stdio_exit_handler+0xc>)
 800b14e:	4903      	ldr	r1, [pc, #12]	@ (800b15c <stdio_exit_handler+0x10>)
 800b150:	4803      	ldr	r0, [pc, #12]	@ (800b160 <stdio_exit_handler+0x14>)
 800b152:	f000 b869 	b.w	800b228 <_fwalk_sglue>
 800b156:	bf00      	nop
 800b158:	20000028 	.word	0x20000028
 800b15c:	0800df3d 	.word	0x0800df3d
 800b160:	200001a4 	.word	0x200001a4

0800b164 <cleanup_stdio>:
 800b164:	6841      	ldr	r1, [r0, #4]
 800b166:	4b0c      	ldr	r3, [pc, #48]	@ (800b198 <cleanup_stdio+0x34>)
 800b168:	b510      	push	{r4, lr}
 800b16a:	4299      	cmp	r1, r3
 800b16c:	4604      	mov	r4, r0
 800b16e:	d001      	beq.n	800b174 <cleanup_stdio+0x10>
 800b170:	f002 fee4 	bl	800df3c <_fflush_r>
 800b174:	68a1      	ldr	r1, [r4, #8]
 800b176:	4b09      	ldr	r3, [pc, #36]	@ (800b19c <cleanup_stdio+0x38>)
 800b178:	4299      	cmp	r1, r3
 800b17a:	d002      	beq.n	800b182 <cleanup_stdio+0x1e>
 800b17c:	4620      	mov	r0, r4
 800b17e:	f002 fedd 	bl	800df3c <_fflush_r>
 800b182:	68e1      	ldr	r1, [r4, #12]
 800b184:	4b06      	ldr	r3, [pc, #24]	@ (800b1a0 <cleanup_stdio+0x3c>)
 800b186:	4299      	cmp	r1, r3
 800b188:	d004      	beq.n	800b194 <cleanup_stdio+0x30>
 800b18a:	4620      	mov	r0, r4
 800b18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b190:	f002 bed4 	b.w	800df3c <_fflush_r>
 800b194:	bd10      	pop	{r4, pc}
 800b196:	bf00      	nop
 800b198:	20000604 	.word	0x20000604
 800b19c:	2000066c 	.word	0x2000066c
 800b1a0:	200006d4 	.word	0x200006d4

0800b1a4 <global_stdio_init.part.0>:
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b1d4 <global_stdio_init.part.0+0x30>)
 800b1a8:	4c0b      	ldr	r4, [pc, #44]	@ (800b1d8 <global_stdio_init.part.0+0x34>)
 800b1aa:	4a0c      	ldr	r2, [pc, #48]	@ (800b1dc <global_stdio_init.part.0+0x38>)
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	2104      	movs	r1, #4
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f7ff ff94 	bl	800b0e0 <std>
 800b1b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1bc:	2201      	movs	r2, #1
 800b1be:	2109      	movs	r1, #9
 800b1c0:	f7ff ff8e 	bl	800b0e0 <std>
 800b1c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1ce:	2112      	movs	r1, #18
 800b1d0:	f7ff bf86 	b.w	800b0e0 <std>
 800b1d4:	2000073c 	.word	0x2000073c
 800b1d8:	20000604 	.word	0x20000604
 800b1dc:	0800b14d 	.word	0x0800b14d

0800b1e0 <__sfp_lock_acquire>:
 800b1e0:	4801      	ldr	r0, [pc, #4]	@ (800b1e8 <__sfp_lock_acquire+0x8>)
 800b1e2:	f000 bcc8 	b.w	800bb76 <__retarget_lock_acquire_recursive>
 800b1e6:	bf00      	nop
 800b1e8:	20000745 	.word	0x20000745

0800b1ec <__sfp_lock_release>:
 800b1ec:	4801      	ldr	r0, [pc, #4]	@ (800b1f4 <__sfp_lock_release+0x8>)
 800b1ee:	f000 bcc3 	b.w	800bb78 <__retarget_lock_release_recursive>
 800b1f2:	bf00      	nop
 800b1f4:	20000745 	.word	0x20000745

0800b1f8 <__sinit>:
 800b1f8:	b510      	push	{r4, lr}
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	f7ff fff0 	bl	800b1e0 <__sfp_lock_acquire>
 800b200:	6a23      	ldr	r3, [r4, #32]
 800b202:	b11b      	cbz	r3, 800b20c <__sinit+0x14>
 800b204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b208:	f7ff bff0 	b.w	800b1ec <__sfp_lock_release>
 800b20c:	4b04      	ldr	r3, [pc, #16]	@ (800b220 <__sinit+0x28>)
 800b20e:	6223      	str	r3, [r4, #32]
 800b210:	4b04      	ldr	r3, [pc, #16]	@ (800b224 <__sinit+0x2c>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1f5      	bne.n	800b204 <__sinit+0xc>
 800b218:	f7ff ffc4 	bl	800b1a4 <global_stdio_init.part.0>
 800b21c:	e7f2      	b.n	800b204 <__sinit+0xc>
 800b21e:	bf00      	nop
 800b220:	0800b165 	.word	0x0800b165
 800b224:	2000073c 	.word	0x2000073c

0800b228 <_fwalk_sglue>:
 800b228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b22c:	4607      	mov	r7, r0
 800b22e:	4688      	mov	r8, r1
 800b230:	4614      	mov	r4, r2
 800b232:	2600      	movs	r6, #0
 800b234:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b238:	f1b9 0901 	subs.w	r9, r9, #1
 800b23c:	d505      	bpl.n	800b24a <_fwalk_sglue+0x22>
 800b23e:	6824      	ldr	r4, [r4, #0]
 800b240:	2c00      	cmp	r4, #0
 800b242:	d1f7      	bne.n	800b234 <_fwalk_sglue+0xc>
 800b244:	4630      	mov	r0, r6
 800b246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24a:	89ab      	ldrh	r3, [r5, #12]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d907      	bls.n	800b260 <_fwalk_sglue+0x38>
 800b250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b254:	3301      	adds	r3, #1
 800b256:	d003      	beq.n	800b260 <_fwalk_sglue+0x38>
 800b258:	4629      	mov	r1, r5
 800b25a:	4638      	mov	r0, r7
 800b25c:	47c0      	blx	r8
 800b25e:	4306      	orrs	r6, r0
 800b260:	3568      	adds	r5, #104	@ 0x68
 800b262:	e7e9      	b.n	800b238 <_fwalk_sglue+0x10>

0800b264 <_fwrite_r>:
 800b264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b268:	9c08      	ldr	r4, [sp, #32]
 800b26a:	468a      	mov	sl, r1
 800b26c:	4690      	mov	r8, r2
 800b26e:	4606      	mov	r6, r0
 800b270:	fb02 f903 	mul.w	r9, r2, r3
 800b274:	b118      	cbz	r0, 800b27e <_fwrite_r+0x1a>
 800b276:	6a03      	ldr	r3, [r0, #32]
 800b278:	b90b      	cbnz	r3, 800b27e <_fwrite_r+0x1a>
 800b27a:	f7ff ffbd 	bl	800b1f8 <__sinit>
 800b27e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b280:	07dd      	lsls	r5, r3, #31
 800b282:	d405      	bmi.n	800b290 <_fwrite_r+0x2c>
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	0598      	lsls	r0, r3, #22
 800b288:	d402      	bmi.n	800b290 <_fwrite_r+0x2c>
 800b28a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b28c:	f000 fc73 	bl	800bb76 <__retarget_lock_acquire_recursive>
 800b290:	89a3      	ldrh	r3, [r4, #12]
 800b292:	0719      	lsls	r1, r3, #28
 800b294:	d516      	bpl.n	800b2c4 <_fwrite_r+0x60>
 800b296:	6923      	ldr	r3, [r4, #16]
 800b298:	b1a3      	cbz	r3, 800b2c4 <_fwrite_r+0x60>
 800b29a:	2500      	movs	r5, #0
 800b29c:	454d      	cmp	r5, r9
 800b29e:	d01f      	beq.n	800b2e0 <_fwrite_r+0x7c>
 800b2a0:	68a7      	ldr	r7, [r4, #8]
 800b2a2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800b2a6:	3f01      	subs	r7, #1
 800b2a8:	2f00      	cmp	r7, #0
 800b2aa:	60a7      	str	r7, [r4, #8]
 800b2ac:	da04      	bge.n	800b2b8 <_fwrite_r+0x54>
 800b2ae:	69a3      	ldr	r3, [r4, #24]
 800b2b0:	429f      	cmp	r7, r3
 800b2b2:	db0f      	blt.n	800b2d4 <_fwrite_r+0x70>
 800b2b4:	290a      	cmp	r1, #10
 800b2b6:	d00d      	beq.n	800b2d4 <_fwrite_r+0x70>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	1c5a      	adds	r2, r3, #1
 800b2bc:	6022      	str	r2, [r4, #0]
 800b2be:	7019      	strb	r1, [r3, #0]
 800b2c0:	3501      	adds	r5, #1
 800b2c2:	e7eb      	b.n	800b29c <_fwrite_r+0x38>
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f000 f956 	bl	800b578 <__swsetup_r>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d0e4      	beq.n	800b29a <_fwrite_r+0x36>
 800b2d0:	2500      	movs	r5, #0
 800b2d2:	e005      	b.n	800b2e0 <_fwrite_r+0x7c>
 800b2d4:	4622      	mov	r2, r4
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	f000 f90f 	bl	800b4fa <__swbuf_r>
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d1ef      	bne.n	800b2c0 <_fwrite_r+0x5c>
 800b2e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2e2:	07da      	lsls	r2, r3, #31
 800b2e4:	d405      	bmi.n	800b2f2 <_fwrite_r+0x8e>
 800b2e6:	89a3      	ldrh	r3, [r4, #12]
 800b2e8:	059b      	lsls	r3, r3, #22
 800b2ea:	d402      	bmi.n	800b2f2 <_fwrite_r+0x8e>
 800b2ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2ee:	f000 fc43 	bl	800bb78 <__retarget_lock_release_recursive>
 800b2f2:	fbb5 f0f8 	udiv	r0, r5, r8
 800b2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800b2fc <fwrite>:
 800b2fc:	b507      	push	{r0, r1, r2, lr}
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	4613      	mov	r3, r2
 800b302:	460a      	mov	r2, r1
 800b304:	4601      	mov	r1, r0
 800b306:	4803      	ldr	r0, [pc, #12]	@ (800b314 <fwrite+0x18>)
 800b308:	6800      	ldr	r0, [r0, #0]
 800b30a:	f7ff ffab 	bl	800b264 <_fwrite_r>
 800b30e:	b003      	add	sp, #12
 800b310:	f85d fb04 	ldr.w	pc, [sp], #4
 800b314:	200001a0 	.word	0x200001a0

0800b318 <_perror_r>:
 800b318:	6a03      	ldr	r3, [r0, #32]
 800b31a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b31c:	4605      	mov	r5, r0
 800b31e:	460e      	mov	r6, r1
 800b320:	68c4      	ldr	r4, [r0, #12]
 800b322:	b90b      	cbnz	r3, 800b328 <_perror_r+0x10>
 800b324:	f7ff ff68 	bl	800b1f8 <__sinit>
 800b328:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b32a:	07d8      	lsls	r0, r3, #31
 800b32c:	d405      	bmi.n	800b33a <_perror_r+0x22>
 800b32e:	89a3      	ldrh	r3, [r4, #12]
 800b330:	0599      	lsls	r1, r3, #22
 800b332:	d402      	bmi.n	800b33a <_perror_r+0x22>
 800b334:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b336:	f000 fc1e 	bl	800bb76 <__retarget_lock_acquire_recursive>
 800b33a:	4621      	mov	r1, r4
 800b33c:	4628      	mov	r0, r5
 800b33e:	f002 fdfd 	bl	800df3c <_fflush_r>
 800b342:	bb1e      	cbnz	r6, 800b38c <_perror_r+0x74>
 800b344:	2201      	movs	r2, #1
 800b346:	4628      	mov	r0, r5
 800b348:	6829      	ldr	r1, [r5, #0]
 800b34a:	ab01      	add	r3, sp, #4
 800b34c:	f000 f980 	bl	800b650 <_strerror_r>
 800b350:	4607      	mov	r7, r0
 800b352:	2800      	cmp	r0, #0
 800b354:	d145      	bne.n	800b3e2 <_perror_r+0xca>
 800b356:	4831      	ldr	r0, [pc, #196]	@ (800b41c <_perror_r+0x104>)
 800b358:	f7f4 ff12 	bl	8000180 <strlen>
 800b35c:	4606      	mov	r6, r0
 800b35e:	4f2f      	ldr	r7, [pc, #188]	@ (800b41c <_perror_r+0x104>)
 800b360:	b156      	cbz	r6, 800b378 <_perror_r+0x60>
 800b362:	4620      	mov	r0, r4
 800b364:	f002 fe12 	bl	800df8c <fileno>
 800b368:	4633      	mov	r3, r6
 800b36a:	4601      	mov	r1, r0
 800b36c:	463a      	mov	r2, r7
 800b36e:	4628      	mov	r0, r5
 800b370:	f000 fbc4 	bl	800bafc <_write_r>
 800b374:	2800      	cmp	r0, #0
 800b376:	da47      	bge.n	800b408 <_perror_r+0xf0>
 800b378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b37c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b380:	81a2      	strh	r2, [r4, #12]
 800b382:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b384:	07d2      	lsls	r2, r2, #31
 800b386:	d542      	bpl.n	800b40e <_perror_r+0xf6>
 800b388:	b003      	add	sp, #12
 800b38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b38c:	7833      	ldrb	r3, [r6, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d0d8      	beq.n	800b344 <_perror_r+0x2c>
 800b392:	4630      	mov	r0, r6
 800b394:	f7f4 fef4 	bl	8000180 <strlen>
 800b398:	4607      	mov	r7, r0
 800b39a:	b157      	cbz	r7, 800b3b2 <_perror_r+0x9a>
 800b39c:	4620      	mov	r0, r4
 800b39e:	f002 fdf5 	bl	800df8c <fileno>
 800b3a2:	463b      	mov	r3, r7
 800b3a4:	4601      	mov	r1, r0
 800b3a6:	4632      	mov	r2, r6
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f000 fba7 	bl	800bafc <_write_r>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	da14      	bge.n	800b3dc <_perror_r+0xc4>
 800b3b2:	481b      	ldr	r0, [pc, #108]	@ (800b420 <_perror_r+0x108>)
 800b3b4:	f7f4 fee4 	bl	8000180 <strlen>
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	4f19      	ldr	r7, [pc, #100]	@ (800b420 <_perror_r+0x108>)
 800b3bc:	2e00      	cmp	r6, #0
 800b3be:	d0c1      	beq.n	800b344 <_perror_r+0x2c>
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f002 fde3 	bl	800df8c <fileno>
 800b3c6:	4633      	mov	r3, r6
 800b3c8:	4601      	mov	r1, r0
 800b3ca:	463a      	mov	r2, r7
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	f000 fb95 	bl	800bafc <_write_r>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	dbb6      	blt.n	800b344 <_perror_r+0x2c>
 800b3d6:	1a36      	subs	r6, r6, r0
 800b3d8:	4407      	add	r7, r0
 800b3da:	e7ef      	b.n	800b3bc <_perror_r+0xa4>
 800b3dc:	1a3f      	subs	r7, r7, r0
 800b3de:	4406      	add	r6, r0
 800b3e0:	e7db      	b.n	800b39a <_perror_r+0x82>
 800b3e2:	f7f4 fecd 	bl	8000180 <strlen>
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	2e00      	cmp	r6, #0
 800b3ea:	d0b4      	beq.n	800b356 <_perror_r+0x3e>
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f002 fdcd 	bl	800df8c <fileno>
 800b3f2:	4633      	mov	r3, r6
 800b3f4:	4601      	mov	r1, r0
 800b3f6:	463a      	mov	r2, r7
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f000 fb7f 	bl	800bafc <_write_r>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	dba9      	blt.n	800b356 <_perror_r+0x3e>
 800b402:	1a36      	subs	r6, r6, r0
 800b404:	4407      	add	r7, r0
 800b406:	e7ef      	b.n	800b3e8 <_perror_r+0xd0>
 800b408:	1a36      	subs	r6, r6, r0
 800b40a:	4407      	add	r7, r0
 800b40c:	e7a8      	b.n	800b360 <_perror_r+0x48>
 800b40e:	059b      	lsls	r3, r3, #22
 800b410:	d4ba      	bmi.n	800b388 <_perror_r+0x70>
 800b412:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b414:	f000 fbb0 	bl	800bb78 <__retarget_lock_release_recursive>
 800b418:	e7b6      	b.n	800b388 <_perror_r+0x70>
 800b41a:	bf00      	nop
 800b41c:	0800fb8b 	.word	0x0800fb8b
 800b420:	0800fb5b 	.word	0x0800fb5b

0800b424 <perror>:
 800b424:	4b02      	ldr	r3, [pc, #8]	@ (800b430 <perror+0xc>)
 800b426:	4601      	mov	r1, r0
 800b428:	6818      	ldr	r0, [r3, #0]
 800b42a:	f7ff bf75 	b.w	800b318 <_perror_r>
 800b42e:	bf00      	nop
 800b430:	200001a0 	.word	0x200001a0

0800b434 <siprintf>:
 800b434:	b40e      	push	{r1, r2, r3}
 800b436:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b43a:	b500      	push	{lr}
 800b43c:	b09c      	sub	sp, #112	@ 0x70
 800b43e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b440:	9002      	str	r0, [sp, #8]
 800b442:	9006      	str	r0, [sp, #24]
 800b444:	9107      	str	r1, [sp, #28]
 800b446:	9104      	str	r1, [sp, #16]
 800b448:	4808      	ldr	r0, [pc, #32]	@ (800b46c <siprintf+0x38>)
 800b44a:	4909      	ldr	r1, [pc, #36]	@ (800b470 <siprintf+0x3c>)
 800b44c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b450:	9105      	str	r1, [sp, #20]
 800b452:	6800      	ldr	r0, [r0, #0]
 800b454:	a902      	add	r1, sp, #8
 800b456:	9301      	str	r3, [sp, #4]
 800b458:	f002 fab4 	bl	800d9c4 <_svfiprintf_r>
 800b45c:	2200      	movs	r2, #0
 800b45e:	9b02      	ldr	r3, [sp, #8]
 800b460:	701a      	strb	r2, [r3, #0]
 800b462:	b01c      	add	sp, #112	@ 0x70
 800b464:	f85d eb04 	ldr.w	lr, [sp], #4
 800b468:	b003      	add	sp, #12
 800b46a:	4770      	bx	lr
 800b46c:	200001a0 	.word	0x200001a0
 800b470:	ffff0208 	.word	0xffff0208

0800b474 <__sread>:
 800b474:	b510      	push	{r4, lr}
 800b476:	460c      	mov	r4, r1
 800b478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b47c:	f000 fb1c 	bl	800bab8 <_read_r>
 800b480:	2800      	cmp	r0, #0
 800b482:	bfab      	itete	ge
 800b484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b486:	89a3      	ldrhlt	r3, [r4, #12]
 800b488:	181b      	addge	r3, r3, r0
 800b48a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b48e:	bfac      	ite	ge
 800b490:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b492:	81a3      	strhlt	r3, [r4, #12]
 800b494:	bd10      	pop	{r4, pc}

0800b496 <__swrite>:
 800b496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49a:	461f      	mov	r7, r3
 800b49c:	898b      	ldrh	r3, [r1, #12]
 800b49e:	4605      	mov	r5, r0
 800b4a0:	05db      	lsls	r3, r3, #23
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	4616      	mov	r6, r2
 800b4a6:	d505      	bpl.n	800b4b4 <__swrite+0x1e>
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b0:	f000 faf0 	bl	800ba94 <_lseek_r>
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	4632      	mov	r2, r6
 800b4b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4bc:	81a3      	strh	r3, [r4, #12]
 800b4be:	4628      	mov	r0, r5
 800b4c0:	463b      	mov	r3, r7
 800b4c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ca:	f000 bb17 	b.w	800bafc <_write_r>

0800b4ce <__sseek>:
 800b4ce:	b510      	push	{r4, lr}
 800b4d0:	460c      	mov	r4, r1
 800b4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d6:	f000 fadd 	bl	800ba94 <_lseek_r>
 800b4da:	1c43      	adds	r3, r0, #1
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	bf15      	itete	ne
 800b4e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b4e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b4e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b4ea:	81a3      	strheq	r3, [r4, #12]
 800b4ec:	bf18      	it	ne
 800b4ee:	81a3      	strhne	r3, [r4, #12]
 800b4f0:	bd10      	pop	{r4, pc}

0800b4f2 <__sclose>:
 800b4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4f6:	f000 babd 	b.w	800ba74 <_close_r>

0800b4fa <__swbuf_r>:
 800b4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fc:	460e      	mov	r6, r1
 800b4fe:	4614      	mov	r4, r2
 800b500:	4605      	mov	r5, r0
 800b502:	b118      	cbz	r0, 800b50c <__swbuf_r+0x12>
 800b504:	6a03      	ldr	r3, [r0, #32]
 800b506:	b90b      	cbnz	r3, 800b50c <__swbuf_r+0x12>
 800b508:	f7ff fe76 	bl	800b1f8 <__sinit>
 800b50c:	69a3      	ldr	r3, [r4, #24]
 800b50e:	60a3      	str	r3, [r4, #8]
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	071a      	lsls	r2, r3, #28
 800b514:	d501      	bpl.n	800b51a <__swbuf_r+0x20>
 800b516:	6923      	ldr	r3, [r4, #16]
 800b518:	b943      	cbnz	r3, 800b52c <__swbuf_r+0x32>
 800b51a:	4621      	mov	r1, r4
 800b51c:	4628      	mov	r0, r5
 800b51e:	f000 f82b 	bl	800b578 <__swsetup_r>
 800b522:	b118      	cbz	r0, 800b52c <__swbuf_r+0x32>
 800b524:	f04f 37ff 	mov.w	r7, #4294967295
 800b528:	4638      	mov	r0, r7
 800b52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b52c:	6823      	ldr	r3, [r4, #0]
 800b52e:	6922      	ldr	r2, [r4, #16]
 800b530:	b2f6      	uxtb	r6, r6
 800b532:	1a98      	subs	r0, r3, r2
 800b534:	6963      	ldr	r3, [r4, #20]
 800b536:	4637      	mov	r7, r6
 800b538:	4283      	cmp	r3, r0
 800b53a:	dc05      	bgt.n	800b548 <__swbuf_r+0x4e>
 800b53c:	4621      	mov	r1, r4
 800b53e:	4628      	mov	r0, r5
 800b540:	f002 fcfc 	bl	800df3c <_fflush_r>
 800b544:	2800      	cmp	r0, #0
 800b546:	d1ed      	bne.n	800b524 <__swbuf_r+0x2a>
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	60a3      	str	r3, [r4, #8]
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	1c5a      	adds	r2, r3, #1
 800b552:	6022      	str	r2, [r4, #0]
 800b554:	701e      	strb	r6, [r3, #0]
 800b556:	6962      	ldr	r2, [r4, #20]
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d004      	beq.n	800b568 <__swbuf_r+0x6e>
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	07db      	lsls	r3, r3, #31
 800b562:	d5e1      	bpl.n	800b528 <__swbuf_r+0x2e>
 800b564:	2e0a      	cmp	r6, #10
 800b566:	d1df      	bne.n	800b528 <__swbuf_r+0x2e>
 800b568:	4621      	mov	r1, r4
 800b56a:	4628      	mov	r0, r5
 800b56c:	f002 fce6 	bl	800df3c <_fflush_r>
 800b570:	2800      	cmp	r0, #0
 800b572:	d0d9      	beq.n	800b528 <__swbuf_r+0x2e>
 800b574:	e7d6      	b.n	800b524 <__swbuf_r+0x2a>
	...

0800b578 <__swsetup_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4b29      	ldr	r3, [pc, #164]	@ (800b620 <__swsetup_r+0xa8>)
 800b57c:	4605      	mov	r5, r0
 800b57e:	6818      	ldr	r0, [r3, #0]
 800b580:	460c      	mov	r4, r1
 800b582:	b118      	cbz	r0, 800b58c <__swsetup_r+0x14>
 800b584:	6a03      	ldr	r3, [r0, #32]
 800b586:	b90b      	cbnz	r3, 800b58c <__swsetup_r+0x14>
 800b588:	f7ff fe36 	bl	800b1f8 <__sinit>
 800b58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b590:	0719      	lsls	r1, r3, #28
 800b592:	d422      	bmi.n	800b5da <__swsetup_r+0x62>
 800b594:	06da      	lsls	r2, r3, #27
 800b596:	d407      	bmi.n	800b5a8 <__swsetup_r+0x30>
 800b598:	2209      	movs	r2, #9
 800b59a:	602a      	str	r2, [r5, #0]
 800b59c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a4:	81a3      	strh	r3, [r4, #12]
 800b5a6:	e033      	b.n	800b610 <__swsetup_r+0x98>
 800b5a8:	0758      	lsls	r0, r3, #29
 800b5aa:	d512      	bpl.n	800b5d2 <__swsetup_r+0x5a>
 800b5ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5ae:	b141      	cbz	r1, 800b5c2 <__swsetup_r+0x4a>
 800b5b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5b4:	4299      	cmp	r1, r3
 800b5b6:	d002      	beq.n	800b5be <__swsetup_r+0x46>
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	f001 f959 	bl	800c870 <_free_r>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b5c8:	81a3      	strh	r3, [r4, #12]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	6063      	str	r3, [r4, #4]
 800b5ce:	6923      	ldr	r3, [r4, #16]
 800b5d0:	6023      	str	r3, [r4, #0]
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	f043 0308 	orr.w	r3, r3, #8
 800b5d8:	81a3      	strh	r3, [r4, #12]
 800b5da:	6923      	ldr	r3, [r4, #16]
 800b5dc:	b94b      	cbnz	r3, 800b5f2 <__swsetup_r+0x7a>
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b5e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5e8:	d003      	beq.n	800b5f2 <__swsetup_r+0x7a>
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f002 fd1c 	bl	800e02a <__smakebuf_r>
 800b5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5f6:	f013 0201 	ands.w	r2, r3, #1
 800b5fa:	d00a      	beq.n	800b612 <__swsetup_r+0x9a>
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	60a2      	str	r2, [r4, #8]
 800b600:	6962      	ldr	r2, [r4, #20]
 800b602:	4252      	negs	r2, r2
 800b604:	61a2      	str	r2, [r4, #24]
 800b606:	6922      	ldr	r2, [r4, #16]
 800b608:	b942      	cbnz	r2, 800b61c <__swsetup_r+0xa4>
 800b60a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b60e:	d1c5      	bne.n	800b59c <__swsetup_r+0x24>
 800b610:	bd38      	pop	{r3, r4, r5, pc}
 800b612:	0799      	lsls	r1, r3, #30
 800b614:	bf58      	it	pl
 800b616:	6962      	ldrpl	r2, [r4, #20]
 800b618:	60a2      	str	r2, [r4, #8]
 800b61a:	e7f4      	b.n	800b606 <__swsetup_r+0x8e>
 800b61c:	2000      	movs	r0, #0
 800b61e:	e7f7      	b.n	800b610 <__swsetup_r+0x98>
 800b620:	200001a0 	.word	0x200001a0

0800b624 <memset>:
 800b624:	4603      	mov	r3, r0
 800b626:	4402      	add	r2, r0
 800b628:	4293      	cmp	r3, r2
 800b62a:	d100      	bne.n	800b62e <memset+0xa>
 800b62c:	4770      	bx	lr
 800b62e:	f803 1b01 	strb.w	r1, [r3], #1
 800b632:	e7f9      	b.n	800b628 <memset+0x4>

0800b634 <strchr>:
 800b634:	4603      	mov	r3, r0
 800b636:	b2c9      	uxtb	r1, r1
 800b638:	4618      	mov	r0, r3
 800b63a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b63e:	b112      	cbz	r2, 800b646 <strchr+0x12>
 800b640:	428a      	cmp	r2, r1
 800b642:	d1f9      	bne.n	800b638 <strchr+0x4>
 800b644:	4770      	bx	lr
 800b646:	2900      	cmp	r1, #0
 800b648:	bf18      	it	ne
 800b64a:	2000      	movne	r0, #0
 800b64c:	4770      	bx	lr
	...

0800b650 <_strerror_r>:
 800b650:	b510      	push	{r4, lr}
 800b652:	4604      	mov	r4, r0
 800b654:	4608      	mov	r0, r1
 800b656:	4611      	mov	r1, r2
 800b658:	461a      	mov	r2, r3
 800b65a:	288e      	cmp	r0, #142	@ 0x8e
 800b65c:	f200 8130 	bhi.w	800b8c0 <_strerror_r+0x270>
 800b660:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b664:	0138008f 	.word	0x0138008f
 800b668:	00940092 	.word	0x00940092
 800b66c:	00980096 	.word	0x00980096
 800b670:	009c009a 	.word	0x009c009a
 800b674:	00a2009e 	.word	0x00a2009e
 800b678:	00a800a4 	.word	0x00a800a4
 800b67c:	00ac00aa 	.word	0x00ac00aa
 800b680:	012e00ae 	.word	0x012e00ae
 800b684:	00b200b0 	.word	0x00b200b0
 800b688:	00b600b4 	.word	0x00b600b4
 800b68c:	00be00b8 	.word	0x00be00b8
 800b690:	00c600c0 	.word	0x00c600c0
 800b694:	00ca00c8 	.word	0x00ca00c8
 800b698:	00ce00cc 	.word	0x00ce00cc
 800b69c:	00d600d2 	.word	0x00d600d2
 800b6a0:	00da00d8 	.word	0x00da00d8
 800b6a4:	00de00dc 	.word	0x00de00dc
 800b6a8:	00e200e0 	.word	0x00e200e0
 800b6ac:	012e00e4 	.word	0x012e00e4
 800b6b0:	012e012e 	.word	0x012e012e
 800b6b4:	012e012e 	.word	0x012e012e
 800b6b8:	012e012e 	.word	0x012e012e
 800b6bc:	00e8012e 	.word	0x00e8012e
 800b6c0:	012e00ec 	.word	0x012e00ec
 800b6c4:	012e012e 	.word	0x012e012e
 800b6c8:	012e012e 	.word	0x012e012e
 800b6cc:	012e012e 	.word	0x012e012e
 800b6d0:	012e012e 	.word	0x012e012e
 800b6d4:	012e012e 	.word	0x012e012e
 800b6d8:	012e012e 	.word	0x012e012e
 800b6dc:	010800ee 	.word	0x010800ee
 800b6e0:	00f200f0 	.word	0x00f200f0
 800b6e4:	012e012e 	.word	0x012e012e
 800b6e8:	00f4012e 	.word	0x00f4012e
 800b6ec:	012e012e 	.word	0x012e012e
 800b6f0:	00f6012e 	.word	0x00f6012e
 800b6f4:	012e012e 	.word	0x012e012e
 800b6f8:	012e00fa 	.word	0x012e00fa
 800b6fc:	00fc012e 	.word	0x00fc012e
 800b700:	012e012e 	.word	0x012e012e
 800b704:	012e012e 	.word	0x012e012e
 800b708:	012e012e 	.word	0x012e012e
 800b70c:	012e012e 	.word	0x012e012e
 800b710:	012e012e 	.word	0x012e012e
 800b714:	012e00fe 	.word	0x012e00fe
 800b718:	01020100 	.word	0x01020100
 800b71c:	012e0104 	.word	0x012e0104
 800b720:	0126012e 	.word	0x0126012e
 800b724:	012e012e 	.word	0x012e012e
 800b728:	012e012e 	.word	0x012e012e
 800b72c:	012e012e 	.word	0x012e012e
 800b730:	012e012e 	.word	0x012e012e
 800b734:	01060114 	.word	0x01060114
 800b738:	010c010a 	.word	0x010c010a
 800b73c:	0110010e 	.word	0x0110010e
 800b740:	0112012e 	.word	0x0112012e
 800b744:	011a0116 	.word	0x011a0116
 800b748:	00c200ea 	.word	0x00c200ea
 800b74c:	00ba012c 	.word	0x00ba012c
 800b750:	00bc00d0 	.word	0x00bc00d0
 800b754:	00a600a0 	.word	0x00a600a0
 800b758:	00f8012a 	.word	0x00f8012a
 800b75c:	0118012e 	.word	0x0118012e
 800b760:	011e00c4 	.word	0x011e00c4
 800b764:	012e011c 	.word	0x012e011c
 800b768:	012e012e 	.word	0x012e012e
 800b76c:	012e012e 	.word	0x012e012e
 800b770:	012e00d4 	.word	0x012e00d4
 800b774:	012e012e 	.word	0x012e012e
 800b778:	012800e6 	.word	0x012800e6
 800b77c:	01220120 	.word	0x01220120
 800b780:	0124      	.short	0x0124
 800b782:	4b55      	ldr	r3, [pc, #340]	@ (800b8d8 <_strerror_r+0x288>)
 800b784:	4618      	mov	r0, r3
 800b786:	bd10      	pop	{r4, pc}
 800b788:	4b54      	ldr	r3, [pc, #336]	@ (800b8dc <_strerror_r+0x28c>)
 800b78a:	e7fb      	b.n	800b784 <_strerror_r+0x134>
 800b78c:	4b54      	ldr	r3, [pc, #336]	@ (800b8e0 <_strerror_r+0x290>)
 800b78e:	e7f9      	b.n	800b784 <_strerror_r+0x134>
 800b790:	4b54      	ldr	r3, [pc, #336]	@ (800b8e4 <_strerror_r+0x294>)
 800b792:	e7f7      	b.n	800b784 <_strerror_r+0x134>
 800b794:	4b54      	ldr	r3, [pc, #336]	@ (800b8e8 <_strerror_r+0x298>)
 800b796:	e7f5      	b.n	800b784 <_strerror_r+0x134>
 800b798:	4b54      	ldr	r3, [pc, #336]	@ (800b8ec <_strerror_r+0x29c>)
 800b79a:	e7f3      	b.n	800b784 <_strerror_r+0x134>
 800b79c:	4b54      	ldr	r3, [pc, #336]	@ (800b8f0 <_strerror_r+0x2a0>)
 800b79e:	e7f1      	b.n	800b784 <_strerror_r+0x134>
 800b7a0:	4b54      	ldr	r3, [pc, #336]	@ (800b8f4 <_strerror_r+0x2a4>)
 800b7a2:	e7ef      	b.n	800b784 <_strerror_r+0x134>
 800b7a4:	4b54      	ldr	r3, [pc, #336]	@ (800b8f8 <_strerror_r+0x2a8>)
 800b7a6:	e7ed      	b.n	800b784 <_strerror_r+0x134>
 800b7a8:	4b54      	ldr	r3, [pc, #336]	@ (800b8fc <_strerror_r+0x2ac>)
 800b7aa:	e7eb      	b.n	800b784 <_strerror_r+0x134>
 800b7ac:	4b54      	ldr	r3, [pc, #336]	@ (800b900 <_strerror_r+0x2b0>)
 800b7ae:	e7e9      	b.n	800b784 <_strerror_r+0x134>
 800b7b0:	4b54      	ldr	r3, [pc, #336]	@ (800b904 <_strerror_r+0x2b4>)
 800b7b2:	e7e7      	b.n	800b784 <_strerror_r+0x134>
 800b7b4:	4b54      	ldr	r3, [pc, #336]	@ (800b908 <_strerror_r+0x2b8>)
 800b7b6:	e7e5      	b.n	800b784 <_strerror_r+0x134>
 800b7b8:	4b54      	ldr	r3, [pc, #336]	@ (800b90c <_strerror_r+0x2bc>)
 800b7ba:	e7e3      	b.n	800b784 <_strerror_r+0x134>
 800b7bc:	4b54      	ldr	r3, [pc, #336]	@ (800b910 <_strerror_r+0x2c0>)
 800b7be:	e7e1      	b.n	800b784 <_strerror_r+0x134>
 800b7c0:	4b54      	ldr	r3, [pc, #336]	@ (800b914 <_strerror_r+0x2c4>)
 800b7c2:	e7df      	b.n	800b784 <_strerror_r+0x134>
 800b7c4:	4b54      	ldr	r3, [pc, #336]	@ (800b918 <_strerror_r+0x2c8>)
 800b7c6:	e7dd      	b.n	800b784 <_strerror_r+0x134>
 800b7c8:	4b54      	ldr	r3, [pc, #336]	@ (800b91c <_strerror_r+0x2cc>)
 800b7ca:	e7db      	b.n	800b784 <_strerror_r+0x134>
 800b7cc:	4b54      	ldr	r3, [pc, #336]	@ (800b920 <_strerror_r+0x2d0>)
 800b7ce:	e7d9      	b.n	800b784 <_strerror_r+0x134>
 800b7d0:	4b54      	ldr	r3, [pc, #336]	@ (800b924 <_strerror_r+0x2d4>)
 800b7d2:	e7d7      	b.n	800b784 <_strerror_r+0x134>
 800b7d4:	4b54      	ldr	r3, [pc, #336]	@ (800b928 <_strerror_r+0x2d8>)
 800b7d6:	e7d5      	b.n	800b784 <_strerror_r+0x134>
 800b7d8:	4b54      	ldr	r3, [pc, #336]	@ (800b92c <_strerror_r+0x2dc>)
 800b7da:	e7d3      	b.n	800b784 <_strerror_r+0x134>
 800b7dc:	4b54      	ldr	r3, [pc, #336]	@ (800b930 <_strerror_r+0x2e0>)
 800b7de:	e7d1      	b.n	800b784 <_strerror_r+0x134>
 800b7e0:	4b54      	ldr	r3, [pc, #336]	@ (800b934 <_strerror_r+0x2e4>)
 800b7e2:	e7cf      	b.n	800b784 <_strerror_r+0x134>
 800b7e4:	4b54      	ldr	r3, [pc, #336]	@ (800b938 <_strerror_r+0x2e8>)
 800b7e6:	e7cd      	b.n	800b784 <_strerror_r+0x134>
 800b7e8:	4b54      	ldr	r3, [pc, #336]	@ (800b93c <_strerror_r+0x2ec>)
 800b7ea:	e7cb      	b.n	800b784 <_strerror_r+0x134>
 800b7ec:	4b54      	ldr	r3, [pc, #336]	@ (800b940 <_strerror_r+0x2f0>)
 800b7ee:	e7c9      	b.n	800b784 <_strerror_r+0x134>
 800b7f0:	4b54      	ldr	r3, [pc, #336]	@ (800b944 <_strerror_r+0x2f4>)
 800b7f2:	e7c7      	b.n	800b784 <_strerror_r+0x134>
 800b7f4:	4b54      	ldr	r3, [pc, #336]	@ (800b948 <_strerror_r+0x2f8>)
 800b7f6:	e7c5      	b.n	800b784 <_strerror_r+0x134>
 800b7f8:	4b54      	ldr	r3, [pc, #336]	@ (800b94c <_strerror_r+0x2fc>)
 800b7fa:	e7c3      	b.n	800b784 <_strerror_r+0x134>
 800b7fc:	4b54      	ldr	r3, [pc, #336]	@ (800b950 <_strerror_r+0x300>)
 800b7fe:	e7c1      	b.n	800b784 <_strerror_r+0x134>
 800b800:	4b54      	ldr	r3, [pc, #336]	@ (800b954 <_strerror_r+0x304>)
 800b802:	e7bf      	b.n	800b784 <_strerror_r+0x134>
 800b804:	4b54      	ldr	r3, [pc, #336]	@ (800b958 <_strerror_r+0x308>)
 800b806:	e7bd      	b.n	800b784 <_strerror_r+0x134>
 800b808:	4b54      	ldr	r3, [pc, #336]	@ (800b95c <_strerror_r+0x30c>)
 800b80a:	e7bb      	b.n	800b784 <_strerror_r+0x134>
 800b80c:	4b54      	ldr	r3, [pc, #336]	@ (800b960 <_strerror_r+0x310>)
 800b80e:	e7b9      	b.n	800b784 <_strerror_r+0x134>
 800b810:	4b54      	ldr	r3, [pc, #336]	@ (800b964 <_strerror_r+0x314>)
 800b812:	e7b7      	b.n	800b784 <_strerror_r+0x134>
 800b814:	4b54      	ldr	r3, [pc, #336]	@ (800b968 <_strerror_r+0x318>)
 800b816:	e7b5      	b.n	800b784 <_strerror_r+0x134>
 800b818:	4b54      	ldr	r3, [pc, #336]	@ (800b96c <_strerror_r+0x31c>)
 800b81a:	e7b3      	b.n	800b784 <_strerror_r+0x134>
 800b81c:	4b54      	ldr	r3, [pc, #336]	@ (800b970 <_strerror_r+0x320>)
 800b81e:	e7b1      	b.n	800b784 <_strerror_r+0x134>
 800b820:	4b54      	ldr	r3, [pc, #336]	@ (800b974 <_strerror_r+0x324>)
 800b822:	e7af      	b.n	800b784 <_strerror_r+0x134>
 800b824:	4b54      	ldr	r3, [pc, #336]	@ (800b978 <_strerror_r+0x328>)
 800b826:	e7ad      	b.n	800b784 <_strerror_r+0x134>
 800b828:	4b54      	ldr	r3, [pc, #336]	@ (800b97c <_strerror_r+0x32c>)
 800b82a:	e7ab      	b.n	800b784 <_strerror_r+0x134>
 800b82c:	4b54      	ldr	r3, [pc, #336]	@ (800b980 <_strerror_r+0x330>)
 800b82e:	e7a9      	b.n	800b784 <_strerror_r+0x134>
 800b830:	4b54      	ldr	r3, [pc, #336]	@ (800b984 <_strerror_r+0x334>)
 800b832:	e7a7      	b.n	800b784 <_strerror_r+0x134>
 800b834:	4b54      	ldr	r3, [pc, #336]	@ (800b988 <_strerror_r+0x338>)
 800b836:	e7a5      	b.n	800b784 <_strerror_r+0x134>
 800b838:	4b54      	ldr	r3, [pc, #336]	@ (800b98c <_strerror_r+0x33c>)
 800b83a:	e7a3      	b.n	800b784 <_strerror_r+0x134>
 800b83c:	4b54      	ldr	r3, [pc, #336]	@ (800b990 <_strerror_r+0x340>)
 800b83e:	e7a1      	b.n	800b784 <_strerror_r+0x134>
 800b840:	4b54      	ldr	r3, [pc, #336]	@ (800b994 <_strerror_r+0x344>)
 800b842:	e79f      	b.n	800b784 <_strerror_r+0x134>
 800b844:	4b54      	ldr	r3, [pc, #336]	@ (800b998 <_strerror_r+0x348>)
 800b846:	e79d      	b.n	800b784 <_strerror_r+0x134>
 800b848:	4b54      	ldr	r3, [pc, #336]	@ (800b99c <_strerror_r+0x34c>)
 800b84a:	e79b      	b.n	800b784 <_strerror_r+0x134>
 800b84c:	4b54      	ldr	r3, [pc, #336]	@ (800b9a0 <_strerror_r+0x350>)
 800b84e:	e799      	b.n	800b784 <_strerror_r+0x134>
 800b850:	4b54      	ldr	r3, [pc, #336]	@ (800b9a4 <_strerror_r+0x354>)
 800b852:	e797      	b.n	800b784 <_strerror_r+0x134>
 800b854:	4b54      	ldr	r3, [pc, #336]	@ (800b9a8 <_strerror_r+0x358>)
 800b856:	e795      	b.n	800b784 <_strerror_r+0x134>
 800b858:	4b54      	ldr	r3, [pc, #336]	@ (800b9ac <_strerror_r+0x35c>)
 800b85a:	e793      	b.n	800b784 <_strerror_r+0x134>
 800b85c:	4b54      	ldr	r3, [pc, #336]	@ (800b9b0 <_strerror_r+0x360>)
 800b85e:	e791      	b.n	800b784 <_strerror_r+0x134>
 800b860:	4b54      	ldr	r3, [pc, #336]	@ (800b9b4 <_strerror_r+0x364>)
 800b862:	e78f      	b.n	800b784 <_strerror_r+0x134>
 800b864:	4b54      	ldr	r3, [pc, #336]	@ (800b9b8 <_strerror_r+0x368>)
 800b866:	e78d      	b.n	800b784 <_strerror_r+0x134>
 800b868:	4b54      	ldr	r3, [pc, #336]	@ (800b9bc <_strerror_r+0x36c>)
 800b86a:	e78b      	b.n	800b784 <_strerror_r+0x134>
 800b86c:	4b54      	ldr	r3, [pc, #336]	@ (800b9c0 <_strerror_r+0x370>)
 800b86e:	e789      	b.n	800b784 <_strerror_r+0x134>
 800b870:	4b54      	ldr	r3, [pc, #336]	@ (800b9c4 <_strerror_r+0x374>)
 800b872:	e787      	b.n	800b784 <_strerror_r+0x134>
 800b874:	4b54      	ldr	r3, [pc, #336]	@ (800b9c8 <_strerror_r+0x378>)
 800b876:	e785      	b.n	800b784 <_strerror_r+0x134>
 800b878:	4b54      	ldr	r3, [pc, #336]	@ (800b9cc <_strerror_r+0x37c>)
 800b87a:	e783      	b.n	800b784 <_strerror_r+0x134>
 800b87c:	4b54      	ldr	r3, [pc, #336]	@ (800b9d0 <_strerror_r+0x380>)
 800b87e:	e781      	b.n	800b784 <_strerror_r+0x134>
 800b880:	4b54      	ldr	r3, [pc, #336]	@ (800b9d4 <_strerror_r+0x384>)
 800b882:	e77f      	b.n	800b784 <_strerror_r+0x134>
 800b884:	4b54      	ldr	r3, [pc, #336]	@ (800b9d8 <_strerror_r+0x388>)
 800b886:	e77d      	b.n	800b784 <_strerror_r+0x134>
 800b888:	4b54      	ldr	r3, [pc, #336]	@ (800b9dc <_strerror_r+0x38c>)
 800b88a:	e77b      	b.n	800b784 <_strerror_r+0x134>
 800b88c:	4b54      	ldr	r3, [pc, #336]	@ (800b9e0 <_strerror_r+0x390>)
 800b88e:	e779      	b.n	800b784 <_strerror_r+0x134>
 800b890:	4b54      	ldr	r3, [pc, #336]	@ (800b9e4 <_strerror_r+0x394>)
 800b892:	e777      	b.n	800b784 <_strerror_r+0x134>
 800b894:	4b54      	ldr	r3, [pc, #336]	@ (800b9e8 <_strerror_r+0x398>)
 800b896:	e775      	b.n	800b784 <_strerror_r+0x134>
 800b898:	4b54      	ldr	r3, [pc, #336]	@ (800b9ec <_strerror_r+0x39c>)
 800b89a:	e773      	b.n	800b784 <_strerror_r+0x134>
 800b89c:	4b54      	ldr	r3, [pc, #336]	@ (800b9f0 <_strerror_r+0x3a0>)
 800b89e:	e771      	b.n	800b784 <_strerror_r+0x134>
 800b8a0:	4b54      	ldr	r3, [pc, #336]	@ (800b9f4 <_strerror_r+0x3a4>)
 800b8a2:	e76f      	b.n	800b784 <_strerror_r+0x134>
 800b8a4:	4b54      	ldr	r3, [pc, #336]	@ (800b9f8 <_strerror_r+0x3a8>)
 800b8a6:	e76d      	b.n	800b784 <_strerror_r+0x134>
 800b8a8:	4b54      	ldr	r3, [pc, #336]	@ (800b9fc <_strerror_r+0x3ac>)
 800b8aa:	e76b      	b.n	800b784 <_strerror_r+0x134>
 800b8ac:	4b54      	ldr	r3, [pc, #336]	@ (800ba00 <_strerror_r+0x3b0>)
 800b8ae:	e769      	b.n	800b784 <_strerror_r+0x134>
 800b8b0:	4b54      	ldr	r3, [pc, #336]	@ (800ba04 <_strerror_r+0x3b4>)
 800b8b2:	e767      	b.n	800b784 <_strerror_r+0x134>
 800b8b4:	4b54      	ldr	r3, [pc, #336]	@ (800ba08 <_strerror_r+0x3b8>)
 800b8b6:	e765      	b.n	800b784 <_strerror_r+0x134>
 800b8b8:	4b54      	ldr	r3, [pc, #336]	@ (800ba0c <_strerror_r+0x3bc>)
 800b8ba:	e763      	b.n	800b784 <_strerror_r+0x134>
 800b8bc:	4b54      	ldr	r3, [pc, #336]	@ (800ba10 <_strerror_r+0x3c0>)
 800b8be:	e761      	b.n	800b784 <_strerror_r+0x134>
 800b8c0:	2a00      	cmp	r2, #0
 800b8c2:	bf08      	it	eq
 800b8c4:	4622      	moveq	r2, r4
 800b8c6:	f000 f8ce 	bl	800ba66 <_user_strerror>
 800b8ca:	4b52      	ldr	r3, [pc, #328]	@ (800ba14 <_strerror_r+0x3c4>)
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	bf18      	it	ne
 800b8d0:	4603      	movne	r3, r0
 800b8d2:	e757      	b.n	800b784 <_strerror_r+0x134>
 800b8d4:	4b50      	ldr	r3, [pc, #320]	@ (800ba18 <_strerror_r+0x3c8>)
 800b8d6:	e755      	b.n	800b784 <_strerror_r+0x134>
 800b8d8:	0800f25d 	.word	0x0800f25d
 800b8dc:	0800f26f 	.word	0x0800f26f
 800b8e0:	0800f289 	.word	0x0800f289
 800b8e4:	0800f299 	.word	0x0800f299
 800b8e8:	0800f2b1 	.word	0x0800f2b1
 800b8ec:	0800f2bb 	.word	0x0800f2bb
 800b8f0:	0800f2d5 	.word	0x0800f2d5
 800b8f4:	0800f2e7 	.word	0x0800f2e7
 800b8f8:	0800f2f9 	.word	0x0800f2f9
 800b8fc:	0800f312 	.word	0x0800f312
 800b900:	0800f322 	.word	0x0800f322
 800b904:	0800f32e 	.word	0x0800f32e
 800b908:	0800f34b 	.word	0x0800f34b
 800b90c:	0800f35d 	.word	0x0800f35d
 800b910:	0800f36e 	.word	0x0800f36e
 800b914:	0800f380 	.word	0x0800f380
 800b918:	0800f38c 	.word	0x0800f38c
 800b91c:	0800f3a4 	.word	0x0800f3a4
 800b920:	0800f3b0 	.word	0x0800f3b0
 800b924:	0800f3c2 	.word	0x0800f3c2
 800b928:	0800f3d1 	.word	0x0800f3d1
 800b92c:	0800f3e1 	.word	0x0800f3e1
 800b930:	0800f3ee 	.word	0x0800f3ee
 800b934:	0800f40d 	.word	0x0800f40d
 800b938:	0800f41c 	.word	0x0800f41c
 800b93c:	0800f42d 	.word	0x0800f42d
 800b940:	0800f451 	.word	0x0800f451
 800b944:	0800f46f 	.word	0x0800f46f
 800b948:	0800f48d 	.word	0x0800f48d
 800b94c:	0800f4ad 	.word	0x0800f4ad
 800b950:	0800f4c4 	.word	0x0800f4c4
 800b954:	0800f4d3 	.word	0x0800f4d3
 800b958:	0800f4e2 	.word	0x0800f4e2
 800b95c:	0800f4f6 	.word	0x0800f4f6
 800b960:	0800f50e 	.word	0x0800f50e
 800b964:	0800f51c 	.word	0x0800f51c
 800b968:	0800f529 	.word	0x0800f529
 800b96c:	0800f53f 	.word	0x0800f53f
 800b970:	0800f54e 	.word	0x0800f54e
 800b974:	0800f55a 	.word	0x0800f55a
 800b978:	0800f589 	.word	0x0800f589
 800b97c:	0800f59a 	.word	0x0800f59a
 800b980:	0800f5b5 	.word	0x0800f5b5
 800b984:	0800f5c8 	.word	0x0800f5c8
 800b988:	0800f5de 	.word	0x0800f5de
 800b98c:	0800f5e7 	.word	0x0800f5e7
 800b990:	0800f5fe 	.word	0x0800f5fe
 800b994:	0800f606 	.word	0x0800f606
 800b998:	0800f613 	.word	0x0800f613
 800b99c:	0800f628 	.word	0x0800f628
 800b9a0:	0800f63c 	.word	0x0800f63c
 800b9a4:	0800f654 	.word	0x0800f654
 800b9a8:	0800f663 	.word	0x0800f663
 800b9ac:	0800f674 	.word	0x0800f674
 800b9b0:	0800f687 	.word	0x0800f687
 800b9b4:	0800f693 	.word	0x0800f693
 800b9b8:	0800f6ac 	.word	0x0800f6ac
 800b9bc:	0800f6c0 	.word	0x0800f6c0
 800b9c0:	0800f6db 	.word	0x0800f6db
 800b9c4:	0800f6f3 	.word	0x0800f6f3
 800b9c8:	0800f70d 	.word	0x0800f70d
 800b9cc:	0800f715 	.word	0x0800f715
 800b9d0:	0800f745 	.word	0x0800f745
 800b9d4:	0800f764 	.word	0x0800f764
 800b9d8:	0800f783 	.word	0x0800f783
 800b9dc:	0800f79a 	.word	0x0800f79a
 800b9e0:	0800f7ad 	.word	0x0800f7ad
 800b9e4:	0800f7c6 	.word	0x0800f7c6
 800b9e8:	0800f7dd 	.word	0x0800f7dd
 800b9ec:	0800f7f3 	.word	0x0800f7f3
 800b9f0:	0800f814 	.word	0x0800f814
 800b9f4:	0800f82c 	.word	0x0800f82c
 800b9f8:	0800f848 	.word	0x0800f848
 800b9fc:	0800f85b 	.word	0x0800f85b
 800ba00:	0800f871 	.word	0x0800f871
 800ba04:	0800f885 	.word	0x0800f885
 800ba08:	0800f8a7 	.word	0x0800f8a7
 800ba0c:	0800f8cd 	.word	0x0800f8cd
 800ba10:	0800f8de 	.word	0x0800f8de
 800ba14:	0800fb8c 	.word	0x0800fb8c
 800ba18:	0800f265 	.word	0x0800f265

0800ba1c <strncmp>:
 800ba1c:	b510      	push	{r4, lr}
 800ba1e:	b16a      	cbz	r2, 800ba3c <strncmp+0x20>
 800ba20:	3901      	subs	r1, #1
 800ba22:	1884      	adds	r4, r0, r2
 800ba24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d103      	bne.n	800ba38 <strncmp+0x1c>
 800ba30:	42a0      	cmp	r0, r4
 800ba32:	d001      	beq.n	800ba38 <strncmp+0x1c>
 800ba34:	2a00      	cmp	r2, #0
 800ba36:	d1f5      	bne.n	800ba24 <strncmp+0x8>
 800ba38:	1ad0      	subs	r0, r2, r3
 800ba3a:	bd10      	pop	{r4, pc}
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	e7fc      	b.n	800ba3a <strncmp+0x1e>

0800ba40 <strncpy>:
 800ba40:	4603      	mov	r3, r0
 800ba42:	b510      	push	{r4, lr}
 800ba44:	3901      	subs	r1, #1
 800ba46:	b132      	cbz	r2, 800ba56 <strncpy+0x16>
 800ba48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ba4c:	3a01      	subs	r2, #1
 800ba4e:	f803 4b01 	strb.w	r4, [r3], #1
 800ba52:	2c00      	cmp	r4, #0
 800ba54:	d1f7      	bne.n	800ba46 <strncpy+0x6>
 800ba56:	2100      	movs	r1, #0
 800ba58:	441a      	add	r2, r3
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d100      	bne.n	800ba60 <strncpy+0x20>
 800ba5e:	bd10      	pop	{r4, pc}
 800ba60:	f803 1b01 	strb.w	r1, [r3], #1
 800ba64:	e7f9      	b.n	800ba5a <strncpy+0x1a>

0800ba66 <_user_strerror>:
 800ba66:	2000      	movs	r0, #0
 800ba68:	4770      	bx	lr
	...

0800ba6c <_localeconv_r>:
 800ba6c:	4800      	ldr	r0, [pc, #0]	@ (800ba70 <_localeconv_r+0x4>)
 800ba6e:	4770      	bx	lr
 800ba70:	20000124 	.word	0x20000124

0800ba74 <_close_r>:
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	2300      	movs	r3, #0
 800ba78:	4d05      	ldr	r5, [pc, #20]	@ (800ba90 <_close_r+0x1c>)
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	4608      	mov	r0, r1
 800ba7e:	602b      	str	r3, [r5, #0]
 800ba80:	f7f7 fae3 	bl	800304a <_close>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	d102      	bne.n	800ba8e <_close_r+0x1a>
 800ba88:	682b      	ldr	r3, [r5, #0]
 800ba8a:	b103      	cbz	r3, 800ba8e <_close_r+0x1a>
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
 800ba90:	20000740 	.word	0x20000740

0800ba94 <_lseek_r>:
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	4604      	mov	r4, r0
 800ba98:	4608      	mov	r0, r1
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	4d05      	ldr	r5, [pc, #20]	@ (800bab4 <_lseek_r+0x20>)
 800baa0:	602a      	str	r2, [r5, #0]
 800baa2:	461a      	mov	r2, r3
 800baa4:	f7f7 faf5 	bl	8003092 <_lseek>
 800baa8:	1c43      	adds	r3, r0, #1
 800baaa:	d102      	bne.n	800bab2 <_lseek_r+0x1e>
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	b103      	cbz	r3, 800bab2 <_lseek_r+0x1e>
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	20000740 	.word	0x20000740

0800bab8 <_read_r>:
 800bab8:	b538      	push	{r3, r4, r5, lr}
 800baba:	4604      	mov	r4, r0
 800babc:	4608      	mov	r0, r1
 800babe:	4611      	mov	r1, r2
 800bac0:	2200      	movs	r2, #0
 800bac2:	4d05      	ldr	r5, [pc, #20]	@ (800bad8 <_read_r+0x20>)
 800bac4:	602a      	str	r2, [r5, #0]
 800bac6:	461a      	mov	r2, r3
 800bac8:	f7f7 fa86 	bl	8002fd8 <_read>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d102      	bne.n	800bad6 <_read_r+0x1e>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	b103      	cbz	r3, 800bad6 <_read_r+0x1e>
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	20000740 	.word	0x20000740

0800badc <_sbrk_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	2300      	movs	r3, #0
 800bae0:	4d05      	ldr	r5, [pc, #20]	@ (800baf8 <_sbrk_r+0x1c>)
 800bae2:	4604      	mov	r4, r0
 800bae4:	4608      	mov	r0, r1
 800bae6:	602b      	str	r3, [r5, #0]
 800bae8:	f7f7 fae0 	bl	80030ac <_sbrk>
 800baec:	1c43      	adds	r3, r0, #1
 800baee:	d102      	bne.n	800baf6 <_sbrk_r+0x1a>
 800baf0:	682b      	ldr	r3, [r5, #0]
 800baf2:	b103      	cbz	r3, 800baf6 <_sbrk_r+0x1a>
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	bd38      	pop	{r3, r4, r5, pc}
 800baf8:	20000740 	.word	0x20000740

0800bafc <_write_r>:
 800bafc:	b538      	push	{r3, r4, r5, lr}
 800bafe:	4604      	mov	r4, r0
 800bb00:	4608      	mov	r0, r1
 800bb02:	4611      	mov	r1, r2
 800bb04:	2200      	movs	r2, #0
 800bb06:	4d05      	ldr	r5, [pc, #20]	@ (800bb1c <_write_r+0x20>)
 800bb08:	602a      	str	r2, [r5, #0]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	f7f7 fa81 	bl	8003012 <_write>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d102      	bne.n	800bb1a <_write_r+0x1e>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	b103      	cbz	r3, 800bb1a <_write_r+0x1e>
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	20000740 	.word	0x20000740

0800bb20 <__errno>:
 800bb20:	4b01      	ldr	r3, [pc, #4]	@ (800bb28 <__errno+0x8>)
 800bb22:	6818      	ldr	r0, [r3, #0]
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	200001a0 	.word	0x200001a0

0800bb2c <__libc_init_array>:
 800bb2c:	b570      	push	{r4, r5, r6, lr}
 800bb2e:	2600      	movs	r6, #0
 800bb30:	4d0c      	ldr	r5, [pc, #48]	@ (800bb64 <__libc_init_array+0x38>)
 800bb32:	4c0d      	ldr	r4, [pc, #52]	@ (800bb68 <__libc_init_array+0x3c>)
 800bb34:	1b64      	subs	r4, r4, r5
 800bb36:	10a4      	asrs	r4, r4, #2
 800bb38:	42a6      	cmp	r6, r4
 800bb3a:	d109      	bne.n	800bb50 <__libc_init_array+0x24>
 800bb3c:	f003 f978 	bl	800ee30 <_init>
 800bb40:	2600      	movs	r6, #0
 800bb42:	4d0a      	ldr	r5, [pc, #40]	@ (800bb6c <__libc_init_array+0x40>)
 800bb44:	4c0a      	ldr	r4, [pc, #40]	@ (800bb70 <__libc_init_array+0x44>)
 800bb46:	1b64      	subs	r4, r4, r5
 800bb48:	10a4      	asrs	r4, r4, #2
 800bb4a:	42a6      	cmp	r6, r4
 800bb4c:	d105      	bne.n	800bb5a <__libc_init_array+0x2e>
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}
 800bb50:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb54:	4798      	blx	r3
 800bb56:	3601      	adds	r6, #1
 800bb58:	e7ee      	b.n	800bb38 <__libc_init_array+0xc>
 800bb5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb5e:	4798      	blx	r3
 800bb60:	3601      	adds	r6, #1
 800bb62:	e7f2      	b.n	800bb4a <__libc_init_array+0x1e>
 800bb64:	08010038 	.word	0x08010038
 800bb68:	08010038 	.word	0x08010038
 800bb6c:	08010038 	.word	0x08010038
 800bb70:	0801003c 	.word	0x0801003c

0800bb74 <__retarget_lock_init_recursive>:
 800bb74:	4770      	bx	lr

0800bb76 <__retarget_lock_acquire_recursive>:
 800bb76:	4770      	bx	lr

0800bb78 <__retarget_lock_release_recursive>:
 800bb78:	4770      	bx	lr

0800bb7a <strcpy>:
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb80:	f803 2b01 	strb.w	r2, [r3], #1
 800bb84:	2a00      	cmp	r2, #0
 800bb86:	d1f9      	bne.n	800bb7c <strcpy+0x2>
 800bb88:	4770      	bx	lr

0800bb8a <memchr>:
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	b2c9      	uxtb	r1, r1
 800bb90:	4402      	add	r2, r0
 800bb92:	4293      	cmp	r3, r2
 800bb94:	4618      	mov	r0, r3
 800bb96:	d101      	bne.n	800bb9c <memchr+0x12>
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e003      	b.n	800bba4 <memchr+0x1a>
 800bb9c:	7804      	ldrb	r4, [r0, #0]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	428c      	cmp	r4, r1
 800bba2:	d1f6      	bne.n	800bb92 <memchr+0x8>
 800bba4:	bd10      	pop	{r4, pc}

0800bba6 <memcpy>:
 800bba6:	440a      	add	r2, r1
 800bba8:	4291      	cmp	r1, r2
 800bbaa:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbae:	d100      	bne.n	800bbb2 <memcpy+0xc>
 800bbb0:	4770      	bx	lr
 800bbb2:	b510      	push	{r4, lr}
 800bbb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbb8:	4291      	cmp	r1, r2
 800bbba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbbe:	d1f9      	bne.n	800bbb4 <memcpy+0xe>
 800bbc0:	bd10      	pop	{r4, pc}
	...

0800bbc4 <nan>:
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	4901      	ldr	r1, [pc, #4]	@ (800bbcc <nan+0x8>)
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	7ff80000 	.word	0x7ff80000

0800bbd0 <quorem>:
 800bbd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	6903      	ldr	r3, [r0, #16]
 800bbd6:	690c      	ldr	r4, [r1, #16]
 800bbd8:	4607      	mov	r7, r0
 800bbda:	42a3      	cmp	r3, r4
 800bbdc:	db7e      	blt.n	800bcdc <quorem+0x10c>
 800bbde:	3c01      	subs	r4, #1
 800bbe0:	00a3      	lsls	r3, r4, #2
 800bbe2:	f100 0514 	add.w	r5, r0, #20
 800bbe6:	f101 0814 	add.w	r8, r1, #20
 800bbea:	9300      	str	r3, [sp, #0]
 800bbec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbf0:	9301      	str	r3, [sp, #4]
 800bbf2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc06:	d32e      	bcc.n	800bc66 <quorem+0x96>
 800bc08:	f04f 0a00 	mov.w	sl, #0
 800bc0c:	46c4      	mov	ip, r8
 800bc0e:	46ae      	mov	lr, r5
 800bc10:	46d3      	mov	fp, sl
 800bc12:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc16:	b298      	uxth	r0, r3
 800bc18:	fb06 a000 	mla	r0, r6, r0, sl
 800bc1c:	0c1b      	lsrs	r3, r3, #16
 800bc1e:	0c02      	lsrs	r2, r0, #16
 800bc20:	fb06 2303 	mla	r3, r6, r3, r2
 800bc24:	f8de 2000 	ldr.w	r2, [lr]
 800bc28:	b280      	uxth	r0, r0
 800bc2a:	b292      	uxth	r2, r2
 800bc2c:	1a12      	subs	r2, r2, r0
 800bc2e:	445a      	add	r2, fp
 800bc30:	f8de 0000 	ldr.w	r0, [lr]
 800bc34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bc3e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc42:	b292      	uxth	r2, r2
 800bc44:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc48:	45e1      	cmp	r9, ip
 800bc4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc4e:	f84e 2b04 	str.w	r2, [lr], #4
 800bc52:	d2de      	bcs.n	800bc12 <quorem+0x42>
 800bc54:	9b00      	ldr	r3, [sp, #0]
 800bc56:	58eb      	ldr	r3, [r5, r3]
 800bc58:	b92b      	cbnz	r3, 800bc66 <quorem+0x96>
 800bc5a:	9b01      	ldr	r3, [sp, #4]
 800bc5c:	3b04      	subs	r3, #4
 800bc5e:	429d      	cmp	r5, r3
 800bc60:	461a      	mov	r2, r3
 800bc62:	d32f      	bcc.n	800bcc4 <quorem+0xf4>
 800bc64:	613c      	str	r4, [r7, #16]
 800bc66:	4638      	mov	r0, r7
 800bc68:	f001 fc58 	bl	800d51c <__mcmp>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	db25      	blt.n	800bcbc <quorem+0xec>
 800bc70:	4629      	mov	r1, r5
 800bc72:	2000      	movs	r0, #0
 800bc74:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc78:	f8d1 c000 	ldr.w	ip, [r1]
 800bc7c:	fa1f fe82 	uxth.w	lr, r2
 800bc80:	fa1f f38c 	uxth.w	r3, ip
 800bc84:	eba3 030e 	sub.w	r3, r3, lr
 800bc88:	4403      	add	r3, r0
 800bc8a:	0c12      	lsrs	r2, r2, #16
 800bc8c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bc90:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc9a:	45c1      	cmp	r9, r8
 800bc9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bca0:	f841 3b04 	str.w	r3, [r1], #4
 800bca4:	d2e6      	bcs.n	800bc74 <quorem+0xa4>
 800bca6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcae:	b922      	cbnz	r2, 800bcba <quorem+0xea>
 800bcb0:	3b04      	subs	r3, #4
 800bcb2:	429d      	cmp	r5, r3
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	d30b      	bcc.n	800bcd0 <quorem+0x100>
 800bcb8:	613c      	str	r4, [r7, #16]
 800bcba:	3601      	adds	r6, #1
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	b003      	add	sp, #12
 800bcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc4:	6812      	ldr	r2, [r2, #0]
 800bcc6:	3b04      	subs	r3, #4
 800bcc8:	2a00      	cmp	r2, #0
 800bcca:	d1cb      	bne.n	800bc64 <quorem+0x94>
 800bccc:	3c01      	subs	r4, #1
 800bcce:	e7c6      	b.n	800bc5e <quorem+0x8e>
 800bcd0:	6812      	ldr	r2, [r2, #0]
 800bcd2:	3b04      	subs	r3, #4
 800bcd4:	2a00      	cmp	r2, #0
 800bcd6:	d1ef      	bne.n	800bcb8 <quorem+0xe8>
 800bcd8:	3c01      	subs	r4, #1
 800bcda:	e7ea      	b.n	800bcb2 <quorem+0xe2>
 800bcdc:	2000      	movs	r0, #0
 800bcde:	e7ee      	b.n	800bcbe <quorem+0xee>

0800bce0 <_dtoa_r>:
 800bce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce4:	4614      	mov	r4, r2
 800bce6:	461d      	mov	r5, r3
 800bce8:	69c7      	ldr	r7, [r0, #28]
 800bcea:	b097      	sub	sp, #92	@ 0x5c
 800bcec:	4683      	mov	fp, r0
 800bcee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bcf2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800bcf4:	b97f      	cbnz	r7, 800bd16 <_dtoa_r+0x36>
 800bcf6:	2010      	movs	r0, #16
 800bcf8:	f7fd fc94 	bl	8009624 <malloc>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	f8cb 001c 	str.w	r0, [fp, #28]
 800bd02:	b920      	cbnz	r0, 800bd0e <_dtoa_r+0x2e>
 800bd04:	21ef      	movs	r1, #239	@ 0xef
 800bd06:	4ba8      	ldr	r3, [pc, #672]	@ (800bfa8 <_dtoa_r+0x2c8>)
 800bd08:	48a8      	ldr	r0, [pc, #672]	@ (800bfac <_dtoa_r+0x2cc>)
 800bd0a:	f002 fa07 	bl	800e11c <__assert_func>
 800bd0e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bd12:	6007      	str	r7, [r0, #0]
 800bd14:	60c7      	str	r7, [r0, #12]
 800bd16:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd1a:	6819      	ldr	r1, [r3, #0]
 800bd1c:	b159      	cbz	r1, 800bd36 <_dtoa_r+0x56>
 800bd1e:	685a      	ldr	r2, [r3, #4]
 800bd20:	2301      	movs	r3, #1
 800bd22:	4093      	lsls	r3, r2
 800bd24:	604a      	str	r2, [r1, #4]
 800bd26:	608b      	str	r3, [r1, #8]
 800bd28:	4658      	mov	r0, fp
 800bd2a:	f001 f975 	bl	800d018 <_Bfree>
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd34:	601a      	str	r2, [r3, #0]
 800bd36:	1e2b      	subs	r3, r5, #0
 800bd38:	bfaf      	iteee	ge
 800bd3a:	2300      	movge	r3, #0
 800bd3c:	2201      	movlt	r2, #1
 800bd3e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd42:	9303      	strlt	r3, [sp, #12]
 800bd44:	bfa8      	it	ge
 800bd46:	6033      	strge	r3, [r6, #0]
 800bd48:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bd4c:	4b98      	ldr	r3, [pc, #608]	@ (800bfb0 <_dtoa_r+0x2d0>)
 800bd4e:	bfb8      	it	lt
 800bd50:	6032      	strlt	r2, [r6, #0]
 800bd52:	ea33 0308 	bics.w	r3, r3, r8
 800bd56:	d112      	bne.n	800bd7e <_dtoa_r+0x9e>
 800bd58:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd5c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bd5e:	6013      	str	r3, [r2, #0]
 800bd60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bd64:	4323      	orrs	r3, r4
 800bd66:	f000 8550 	beq.w	800c80a <_dtoa_r+0xb2a>
 800bd6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bd6c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800bfb4 <_dtoa_r+0x2d4>
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 8552 	beq.w	800c81a <_dtoa_r+0xb3a>
 800bd76:	f10a 0303 	add.w	r3, sl, #3
 800bd7a:	f000 bd4c 	b.w	800c816 <_dtoa_r+0xb36>
 800bd7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd82:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bd86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f7f4 fe23 	bl	80009d8 <__aeabi_dcmpeq>
 800bd92:	4607      	mov	r7, r0
 800bd94:	b158      	cbz	r0, 800bdae <_dtoa_r+0xce>
 800bd96:	2301      	movs	r3, #1
 800bd98:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bd9a:	6013      	str	r3, [r2, #0]
 800bd9c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bd9e:	b113      	cbz	r3, 800bda6 <_dtoa_r+0xc6>
 800bda0:	4b85      	ldr	r3, [pc, #532]	@ (800bfb8 <_dtoa_r+0x2d8>)
 800bda2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bda4:	6013      	str	r3, [r2, #0]
 800bda6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800bfbc <_dtoa_r+0x2dc>
 800bdaa:	f000 bd36 	b.w	800c81a <_dtoa_r+0xb3a>
 800bdae:	ab14      	add	r3, sp, #80	@ 0x50
 800bdb0:	9301      	str	r3, [sp, #4]
 800bdb2:	ab15      	add	r3, sp, #84	@ 0x54
 800bdb4:	9300      	str	r3, [sp, #0]
 800bdb6:	4658      	mov	r0, fp
 800bdb8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bdbc:	f001 fcc6 	bl	800d74c <__d2b>
 800bdc0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bdc4:	4681      	mov	r9, r0
 800bdc6:	2e00      	cmp	r6, #0
 800bdc8:	d077      	beq.n	800beba <_dtoa_r+0x1da>
 800bdca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bdd0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bdd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdd8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bddc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bde0:	9712      	str	r7, [sp, #72]	@ 0x48
 800bde2:	4619      	mov	r1, r3
 800bde4:	2200      	movs	r2, #0
 800bde6:	4b76      	ldr	r3, [pc, #472]	@ (800bfc0 <_dtoa_r+0x2e0>)
 800bde8:	f7f4 f9d6 	bl	8000198 <__aeabi_dsub>
 800bdec:	a368      	add	r3, pc, #416	@ (adr r3, 800bf90 <_dtoa_r+0x2b0>)
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	f7f4 fb89 	bl	8000508 <__aeabi_dmul>
 800bdf6:	a368      	add	r3, pc, #416	@ (adr r3, 800bf98 <_dtoa_r+0x2b8>)
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f7f4 f9ce 	bl	800019c <__adddf3>
 800be00:	4604      	mov	r4, r0
 800be02:	4630      	mov	r0, r6
 800be04:	460d      	mov	r5, r1
 800be06:	f7f4 fb15 	bl	8000434 <__aeabi_i2d>
 800be0a:	a365      	add	r3, pc, #404	@ (adr r3, 800bfa0 <_dtoa_r+0x2c0>)
 800be0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be10:	f7f4 fb7a 	bl	8000508 <__aeabi_dmul>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	4620      	mov	r0, r4
 800be1a:	4629      	mov	r1, r5
 800be1c:	f7f4 f9be 	bl	800019c <__adddf3>
 800be20:	4604      	mov	r4, r0
 800be22:	460d      	mov	r5, r1
 800be24:	f7f4 fe20 	bl	8000a68 <__aeabi_d2iz>
 800be28:	2200      	movs	r2, #0
 800be2a:	4607      	mov	r7, r0
 800be2c:	2300      	movs	r3, #0
 800be2e:	4620      	mov	r0, r4
 800be30:	4629      	mov	r1, r5
 800be32:	f7f4 fddb 	bl	80009ec <__aeabi_dcmplt>
 800be36:	b140      	cbz	r0, 800be4a <_dtoa_r+0x16a>
 800be38:	4638      	mov	r0, r7
 800be3a:	f7f4 fafb 	bl	8000434 <__aeabi_i2d>
 800be3e:	4622      	mov	r2, r4
 800be40:	462b      	mov	r3, r5
 800be42:	f7f4 fdc9 	bl	80009d8 <__aeabi_dcmpeq>
 800be46:	b900      	cbnz	r0, 800be4a <_dtoa_r+0x16a>
 800be48:	3f01      	subs	r7, #1
 800be4a:	2f16      	cmp	r7, #22
 800be4c:	d853      	bhi.n	800bef6 <_dtoa_r+0x216>
 800be4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be52:	4b5c      	ldr	r3, [pc, #368]	@ (800bfc4 <_dtoa_r+0x2e4>)
 800be54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	f7f4 fdc6 	bl	80009ec <__aeabi_dcmplt>
 800be60:	2800      	cmp	r0, #0
 800be62:	d04a      	beq.n	800befa <_dtoa_r+0x21a>
 800be64:	2300      	movs	r3, #0
 800be66:	3f01      	subs	r7, #1
 800be68:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be6c:	1b9b      	subs	r3, r3, r6
 800be6e:	1e5a      	subs	r2, r3, #1
 800be70:	bf46      	itte	mi
 800be72:	f1c3 0801 	rsbmi	r8, r3, #1
 800be76:	2300      	movmi	r3, #0
 800be78:	f04f 0800 	movpl.w	r8, #0
 800be7c:	9209      	str	r2, [sp, #36]	@ 0x24
 800be7e:	bf48      	it	mi
 800be80:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800be82:	2f00      	cmp	r7, #0
 800be84:	db3b      	blt.n	800befe <_dtoa_r+0x21e>
 800be86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be88:	970e      	str	r7, [sp, #56]	@ 0x38
 800be8a:	443b      	add	r3, r7
 800be8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be8e:	2300      	movs	r3, #0
 800be90:	930a      	str	r3, [sp, #40]	@ 0x28
 800be92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be94:	2b09      	cmp	r3, #9
 800be96:	d866      	bhi.n	800bf66 <_dtoa_r+0x286>
 800be98:	2b05      	cmp	r3, #5
 800be9a:	bfc4      	itt	gt
 800be9c:	3b04      	subgt	r3, #4
 800be9e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800bea0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bea2:	bfc8      	it	gt
 800bea4:	2400      	movgt	r4, #0
 800bea6:	f1a3 0302 	sub.w	r3, r3, #2
 800beaa:	bfd8      	it	le
 800beac:	2401      	movle	r4, #1
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d864      	bhi.n	800bf7c <_dtoa_r+0x29c>
 800beb2:	e8df f003 	tbb	[pc, r3]
 800beb6:	382b      	.short	0x382b
 800beb8:	5636      	.short	0x5636
 800beba:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bebe:	441e      	add	r6, r3
 800bec0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bec4:	2b20      	cmp	r3, #32
 800bec6:	bfc1      	itttt	gt
 800bec8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800becc:	fa08 f803 	lslgt.w	r8, r8, r3
 800bed0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bed4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bed8:	bfd6      	itet	le
 800beda:	f1c3 0320 	rsble	r3, r3, #32
 800bede:	ea48 0003 	orrgt.w	r0, r8, r3
 800bee2:	fa04 f003 	lslle.w	r0, r4, r3
 800bee6:	f7f4 fa95 	bl	8000414 <__aeabi_ui2d>
 800beea:	2201      	movs	r2, #1
 800beec:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bef0:	3e01      	subs	r6, #1
 800bef2:	9212      	str	r2, [sp, #72]	@ 0x48
 800bef4:	e775      	b.n	800bde2 <_dtoa_r+0x102>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e7b6      	b.n	800be68 <_dtoa_r+0x188>
 800befa:	900f      	str	r0, [sp, #60]	@ 0x3c
 800befc:	e7b5      	b.n	800be6a <_dtoa_r+0x18a>
 800befe:	427b      	negs	r3, r7
 800bf00:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf02:	2300      	movs	r3, #0
 800bf04:	eba8 0807 	sub.w	r8, r8, r7
 800bf08:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf0a:	e7c2      	b.n	800be92 <_dtoa_r+0x1b2>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	dc35      	bgt.n	800bf82 <_dtoa_r+0x2a2>
 800bf16:	2301      	movs	r3, #1
 800bf18:	461a      	mov	r2, r3
 800bf1a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bf1e:	9221      	str	r2, [sp, #132]	@ 0x84
 800bf20:	e00b      	b.n	800bf3a <_dtoa_r+0x25a>
 800bf22:	2301      	movs	r3, #1
 800bf24:	e7f3      	b.n	800bf0e <_dtoa_r+0x22e>
 800bf26:	2300      	movs	r3, #0
 800bf28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf2c:	18fb      	adds	r3, r7, r3
 800bf2e:	9308      	str	r3, [sp, #32]
 800bf30:	3301      	adds	r3, #1
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	9307      	str	r3, [sp, #28]
 800bf36:	bfb8      	it	lt
 800bf38:	2301      	movlt	r3, #1
 800bf3a:	2100      	movs	r1, #0
 800bf3c:	2204      	movs	r2, #4
 800bf3e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bf42:	f102 0514 	add.w	r5, r2, #20
 800bf46:	429d      	cmp	r5, r3
 800bf48:	d91f      	bls.n	800bf8a <_dtoa_r+0x2aa>
 800bf4a:	6041      	str	r1, [r0, #4]
 800bf4c:	4658      	mov	r0, fp
 800bf4e:	f001 f823 	bl	800cf98 <_Balloc>
 800bf52:	4682      	mov	sl, r0
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d139      	bne.n	800bfcc <_dtoa_r+0x2ec>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf5e:	4b1a      	ldr	r3, [pc, #104]	@ (800bfc8 <_dtoa_r+0x2e8>)
 800bf60:	e6d2      	b.n	800bd08 <_dtoa_r+0x28>
 800bf62:	2301      	movs	r3, #1
 800bf64:	e7e0      	b.n	800bf28 <_dtoa_r+0x248>
 800bf66:	2401      	movs	r4, #1
 800bf68:	2300      	movs	r3, #0
 800bf6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bf6c:	9320      	str	r3, [sp, #128]	@ 0x80
 800bf6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf72:	2200      	movs	r2, #0
 800bf74:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bf78:	2312      	movs	r3, #18
 800bf7a:	e7d0      	b.n	800bf1e <_dtoa_r+0x23e>
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf80:	e7f5      	b.n	800bf6e <_dtoa_r+0x28e>
 800bf82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf84:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bf88:	e7d7      	b.n	800bf3a <_dtoa_r+0x25a>
 800bf8a:	3101      	adds	r1, #1
 800bf8c:	0052      	lsls	r2, r2, #1
 800bf8e:	e7d8      	b.n	800bf42 <_dtoa_r+0x262>
 800bf90:	636f4361 	.word	0x636f4361
 800bf94:	3fd287a7 	.word	0x3fd287a7
 800bf98:	8b60c8b3 	.word	0x8b60c8b3
 800bf9c:	3fc68a28 	.word	0x3fc68a28
 800bfa0:	509f79fb 	.word	0x509f79fb
 800bfa4:	3fd34413 	.word	0x3fd34413
 800bfa8:	0800f908 	.word	0x0800f908
 800bfac:	0800f91f 	.word	0x0800f91f
 800bfb0:	7ff00000 	.word	0x7ff00000
 800bfb4:	0800f904 	.word	0x0800f904
 800bfb8:	0800f23a 	.word	0x0800f23a
 800bfbc:	0800f239 	.word	0x0800f239
 800bfc0:	3ff80000 	.word	0x3ff80000
 800bfc4:	0800fa78 	.word	0x0800fa78
 800bfc8:	0800f977 	.word	0x0800f977
 800bfcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bfd0:	6018      	str	r0, [r3, #0]
 800bfd2:	9b07      	ldr	r3, [sp, #28]
 800bfd4:	2b0e      	cmp	r3, #14
 800bfd6:	f200 80a4 	bhi.w	800c122 <_dtoa_r+0x442>
 800bfda:	2c00      	cmp	r4, #0
 800bfdc:	f000 80a1 	beq.w	800c122 <_dtoa_r+0x442>
 800bfe0:	2f00      	cmp	r7, #0
 800bfe2:	dd33      	ble.n	800c04c <_dtoa_r+0x36c>
 800bfe4:	4b86      	ldr	r3, [pc, #536]	@ (800c200 <_dtoa_r+0x520>)
 800bfe6:	f007 020f 	and.w	r2, r7, #15
 800bfea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfee:	05f8      	lsls	r0, r7, #23
 800bff0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bff4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bff8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bffc:	d516      	bpl.n	800c02c <_dtoa_r+0x34c>
 800bffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c002:	4b80      	ldr	r3, [pc, #512]	@ (800c204 <_dtoa_r+0x524>)
 800c004:	2603      	movs	r6, #3
 800c006:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c00a:	f7f4 fba7 	bl	800075c <__aeabi_ddiv>
 800c00e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c012:	f004 040f 	and.w	r4, r4, #15
 800c016:	4d7b      	ldr	r5, [pc, #492]	@ (800c204 <_dtoa_r+0x524>)
 800c018:	b954      	cbnz	r4, 800c030 <_dtoa_r+0x350>
 800c01a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c01e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c022:	f7f4 fb9b 	bl	800075c <__aeabi_ddiv>
 800c026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c02a:	e028      	b.n	800c07e <_dtoa_r+0x39e>
 800c02c:	2602      	movs	r6, #2
 800c02e:	e7f2      	b.n	800c016 <_dtoa_r+0x336>
 800c030:	07e1      	lsls	r1, r4, #31
 800c032:	d508      	bpl.n	800c046 <_dtoa_r+0x366>
 800c034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c038:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c03c:	f7f4 fa64 	bl	8000508 <__aeabi_dmul>
 800c040:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c044:	3601      	adds	r6, #1
 800c046:	1064      	asrs	r4, r4, #1
 800c048:	3508      	adds	r5, #8
 800c04a:	e7e5      	b.n	800c018 <_dtoa_r+0x338>
 800c04c:	f000 80d2 	beq.w	800c1f4 <_dtoa_r+0x514>
 800c050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c054:	427c      	negs	r4, r7
 800c056:	4b6a      	ldr	r3, [pc, #424]	@ (800c200 <_dtoa_r+0x520>)
 800c058:	f004 020f 	and.w	r2, r4, #15
 800c05c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	f7f4 fa50 	bl	8000508 <__aeabi_dmul>
 800c068:	2602      	movs	r6, #2
 800c06a:	2300      	movs	r3, #0
 800c06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c070:	4d64      	ldr	r5, [pc, #400]	@ (800c204 <_dtoa_r+0x524>)
 800c072:	1124      	asrs	r4, r4, #4
 800c074:	2c00      	cmp	r4, #0
 800c076:	f040 80b2 	bne.w	800c1de <_dtoa_r+0x4fe>
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1d3      	bne.n	800c026 <_dtoa_r+0x346>
 800c07e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c082:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c084:	2b00      	cmp	r3, #0
 800c086:	f000 80b7 	beq.w	800c1f8 <_dtoa_r+0x518>
 800c08a:	2200      	movs	r2, #0
 800c08c:	4620      	mov	r0, r4
 800c08e:	4629      	mov	r1, r5
 800c090:	4b5d      	ldr	r3, [pc, #372]	@ (800c208 <_dtoa_r+0x528>)
 800c092:	f7f4 fcab 	bl	80009ec <__aeabi_dcmplt>
 800c096:	2800      	cmp	r0, #0
 800c098:	f000 80ae 	beq.w	800c1f8 <_dtoa_r+0x518>
 800c09c:	9b07      	ldr	r3, [sp, #28]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f000 80aa 	beq.w	800c1f8 <_dtoa_r+0x518>
 800c0a4:	9b08      	ldr	r3, [sp, #32]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	dd37      	ble.n	800c11a <_dtoa_r+0x43a>
 800c0aa:	1e7b      	subs	r3, r7, #1
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	9304      	str	r3, [sp, #16]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	4b55      	ldr	r3, [pc, #340]	@ (800c20c <_dtoa_r+0x52c>)
 800c0b6:	f7f4 fa27 	bl	8000508 <__aeabi_dmul>
 800c0ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0be:	9c08      	ldr	r4, [sp, #32]
 800c0c0:	3601      	adds	r6, #1
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	f7f4 f9b6 	bl	8000434 <__aeabi_i2d>
 800c0c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0cc:	f7f4 fa1c 	bl	8000508 <__aeabi_dmul>
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	4b4f      	ldr	r3, [pc, #316]	@ (800c210 <_dtoa_r+0x530>)
 800c0d4:	f7f4 f862 	bl	800019c <__adddf3>
 800c0d8:	4605      	mov	r5, r0
 800c0da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c0de:	2c00      	cmp	r4, #0
 800c0e0:	f040 809a 	bne.w	800c218 <_dtoa_r+0x538>
 800c0e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	4b4a      	ldr	r3, [pc, #296]	@ (800c214 <_dtoa_r+0x534>)
 800c0ec:	f7f4 f854 	bl	8000198 <__aeabi_dsub>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0f8:	462a      	mov	r2, r5
 800c0fa:	4633      	mov	r3, r6
 800c0fc:	f7f4 fc94 	bl	8000a28 <__aeabi_dcmpgt>
 800c100:	2800      	cmp	r0, #0
 800c102:	f040 828e 	bne.w	800c622 <_dtoa_r+0x942>
 800c106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c10a:	462a      	mov	r2, r5
 800c10c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c110:	f7f4 fc6c 	bl	80009ec <__aeabi_dcmplt>
 800c114:	2800      	cmp	r0, #0
 800c116:	f040 8127 	bne.w	800c368 <_dtoa_r+0x688>
 800c11a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c11e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c122:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c124:	2b00      	cmp	r3, #0
 800c126:	f2c0 8163 	blt.w	800c3f0 <_dtoa_r+0x710>
 800c12a:	2f0e      	cmp	r7, #14
 800c12c:	f300 8160 	bgt.w	800c3f0 <_dtoa_r+0x710>
 800c130:	4b33      	ldr	r3, [pc, #204]	@ (800c200 <_dtoa_r+0x520>)
 800c132:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c136:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c13a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c13e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c140:	2b00      	cmp	r3, #0
 800c142:	da03      	bge.n	800c14c <_dtoa_r+0x46c>
 800c144:	9b07      	ldr	r3, [sp, #28]
 800c146:	2b00      	cmp	r3, #0
 800c148:	f340 8100 	ble.w	800c34c <_dtoa_r+0x66c>
 800c14c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c150:	4656      	mov	r6, sl
 800c152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c156:	4620      	mov	r0, r4
 800c158:	4629      	mov	r1, r5
 800c15a:	f7f4 faff 	bl	800075c <__aeabi_ddiv>
 800c15e:	f7f4 fc83 	bl	8000a68 <__aeabi_d2iz>
 800c162:	4680      	mov	r8, r0
 800c164:	f7f4 f966 	bl	8000434 <__aeabi_i2d>
 800c168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c16c:	f7f4 f9cc 	bl	8000508 <__aeabi_dmul>
 800c170:	4602      	mov	r2, r0
 800c172:	460b      	mov	r3, r1
 800c174:	4620      	mov	r0, r4
 800c176:	4629      	mov	r1, r5
 800c178:	f7f4 f80e 	bl	8000198 <__aeabi_dsub>
 800c17c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c180:	9d07      	ldr	r5, [sp, #28]
 800c182:	f806 4b01 	strb.w	r4, [r6], #1
 800c186:	eba6 040a 	sub.w	r4, r6, sl
 800c18a:	42a5      	cmp	r5, r4
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	f040 8116 	bne.w	800c3c0 <_dtoa_r+0x6e0>
 800c194:	f7f4 f802 	bl	800019c <__adddf3>
 800c198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c19c:	4604      	mov	r4, r0
 800c19e:	460d      	mov	r5, r1
 800c1a0:	f7f4 fc42 	bl	8000a28 <__aeabi_dcmpgt>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	f040 80f8 	bne.w	800c39a <_dtoa_r+0x6ba>
 800c1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	f7f4 fc11 	bl	80009d8 <__aeabi_dcmpeq>
 800c1b6:	b118      	cbz	r0, 800c1c0 <_dtoa_r+0x4e0>
 800c1b8:	f018 0f01 	tst.w	r8, #1
 800c1bc:	f040 80ed 	bne.w	800c39a <_dtoa_r+0x6ba>
 800c1c0:	4649      	mov	r1, r9
 800c1c2:	4658      	mov	r0, fp
 800c1c4:	f000 ff28 	bl	800d018 <_Bfree>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	7033      	strb	r3, [r6, #0]
 800c1cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c1ce:	3701      	adds	r7, #1
 800c1d0:	601f      	str	r7, [r3, #0]
 800c1d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 8320 	beq.w	800c81a <_dtoa_r+0xb3a>
 800c1da:	601e      	str	r6, [r3, #0]
 800c1dc:	e31d      	b.n	800c81a <_dtoa_r+0xb3a>
 800c1de:	07e2      	lsls	r2, r4, #31
 800c1e0:	d505      	bpl.n	800c1ee <_dtoa_r+0x50e>
 800c1e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1e6:	f7f4 f98f 	bl	8000508 <__aeabi_dmul>
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	3601      	adds	r6, #1
 800c1ee:	1064      	asrs	r4, r4, #1
 800c1f0:	3508      	adds	r5, #8
 800c1f2:	e73f      	b.n	800c074 <_dtoa_r+0x394>
 800c1f4:	2602      	movs	r6, #2
 800c1f6:	e742      	b.n	800c07e <_dtoa_r+0x39e>
 800c1f8:	9c07      	ldr	r4, [sp, #28]
 800c1fa:	9704      	str	r7, [sp, #16]
 800c1fc:	e761      	b.n	800c0c2 <_dtoa_r+0x3e2>
 800c1fe:	bf00      	nop
 800c200:	0800fa78 	.word	0x0800fa78
 800c204:	0800fa50 	.word	0x0800fa50
 800c208:	3ff00000 	.word	0x3ff00000
 800c20c:	40240000 	.word	0x40240000
 800c210:	401c0000 	.word	0x401c0000
 800c214:	40140000 	.word	0x40140000
 800c218:	4b70      	ldr	r3, [pc, #448]	@ (800c3dc <_dtoa_r+0x6fc>)
 800c21a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c21c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c220:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c224:	4454      	add	r4, sl
 800c226:	2900      	cmp	r1, #0
 800c228:	d045      	beq.n	800c2b6 <_dtoa_r+0x5d6>
 800c22a:	2000      	movs	r0, #0
 800c22c:	496c      	ldr	r1, [pc, #432]	@ (800c3e0 <_dtoa_r+0x700>)
 800c22e:	f7f4 fa95 	bl	800075c <__aeabi_ddiv>
 800c232:	4633      	mov	r3, r6
 800c234:	462a      	mov	r2, r5
 800c236:	f7f3 ffaf 	bl	8000198 <__aeabi_dsub>
 800c23a:	4656      	mov	r6, sl
 800c23c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c244:	f7f4 fc10 	bl	8000a68 <__aeabi_d2iz>
 800c248:	4605      	mov	r5, r0
 800c24a:	f7f4 f8f3 	bl	8000434 <__aeabi_i2d>
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c256:	f7f3 ff9f 	bl	8000198 <__aeabi_dsub>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	3530      	adds	r5, #48	@ 0x30
 800c260:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c264:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c268:	f806 5b01 	strb.w	r5, [r6], #1
 800c26c:	f7f4 fbbe 	bl	80009ec <__aeabi_dcmplt>
 800c270:	2800      	cmp	r0, #0
 800c272:	d163      	bne.n	800c33c <_dtoa_r+0x65c>
 800c274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c278:	2000      	movs	r0, #0
 800c27a:	495a      	ldr	r1, [pc, #360]	@ (800c3e4 <_dtoa_r+0x704>)
 800c27c:	f7f3 ff8c 	bl	8000198 <__aeabi_dsub>
 800c280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c284:	f7f4 fbb2 	bl	80009ec <__aeabi_dcmplt>
 800c288:	2800      	cmp	r0, #0
 800c28a:	f040 8087 	bne.w	800c39c <_dtoa_r+0x6bc>
 800c28e:	42a6      	cmp	r6, r4
 800c290:	f43f af43 	beq.w	800c11a <_dtoa_r+0x43a>
 800c294:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c298:	2200      	movs	r2, #0
 800c29a:	4b53      	ldr	r3, [pc, #332]	@ (800c3e8 <_dtoa_r+0x708>)
 800c29c:	f7f4 f934 	bl	8000508 <__aeabi_dmul>
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2aa:	4b4f      	ldr	r3, [pc, #316]	@ (800c3e8 <_dtoa_r+0x708>)
 800c2ac:	f7f4 f92c 	bl	8000508 <__aeabi_dmul>
 800c2b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2b4:	e7c4      	b.n	800c240 <_dtoa_r+0x560>
 800c2b6:	4631      	mov	r1, r6
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	f7f4 f925 	bl	8000508 <__aeabi_dmul>
 800c2be:	4656      	mov	r6, sl
 800c2c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2c4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2ca:	f7f4 fbcd 	bl	8000a68 <__aeabi_d2iz>
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	f7f4 f8b0 	bl	8000434 <__aeabi_i2d>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2dc:	f7f3 ff5c 	bl	8000198 <__aeabi_dsub>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	3530      	adds	r5, #48	@ 0x30
 800c2e6:	f806 5b01 	strb.w	r5, [r6], #1
 800c2ea:	42a6      	cmp	r6, r4
 800c2ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2f0:	f04f 0200 	mov.w	r2, #0
 800c2f4:	d124      	bne.n	800c340 <_dtoa_r+0x660>
 800c2f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c2fa:	4b39      	ldr	r3, [pc, #228]	@ (800c3e0 <_dtoa_r+0x700>)
 800c2fc:	f7f3 ff4e 	bl	800019c <__adddf3>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c308:	f7f4 fb8e 	bl	8000a28 <__aeabi_dcmpgt>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d145      	bne.n	800c39c <_dtoa_r+0x6bc>
 800c310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c314:	2000      	movs	r0, #0
 800c316:	4932      	ldr	r1, [pc, #200]	@ (800c3e0 <_dtoa_r+0x700>)
 800c318:	f7f3 ff3e 	bl	8000198 <__aeabi_dsub>
 800c31c:	4602      	mov	r2, r0
 800c31e:	460b      	mov	r3, r1
 800c320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c324:	f7f4 fb62 	bl	80009ec <__aeabi_dcmplt>
 800c328:	2800      	cmp	r0, #0
 800c32a:	f43f aef6 	beq.w	800c11a <_dtoa_r+0x43a>
 800c32e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c330:	1e73      	subs	r3, r6, #1
 800c332:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c334:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c338:	2b30      	cmp	r3, #48	@ 0x30
 800c33a:	d0f8      	beq.n	800c32e <_dtoa_r+0x64e>
 800c33c:	9f04      	ldr	r7, [sp, #16]
 800c33e:	e73f      	b.n	800c1c0 <_dtoa_r+0x4e0>
 800c340:	4b29      	ldr	r3, [pc, #164]	@ (800c3e8 <_dtoa_r+0x708>)
 800c342:	f7f4 f8e1 	bl	8000508 <__aeabi_dmul>
 800c346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c34a:	e7bc      	b.n	800c2c6 <_dtoa_r+0x5e6>
 800c34c:	d10c      	bne.n	800c368 <_dtoa_r+0x688>
 800c34e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c352:	2200      	movs	r2, #0
 800c354:	4b25      	ldr	r3, [pc, #148]	@ (800c3ec <_dtoa_r+0x70c>)
 800c356:	f7f4 f8d7 	bl	8000508 <__aeabi_dmul>
 800c35a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c35e:	f7f4 fb59 	bl	8000a14 <__aeabi_dcmpge>
 800c362:	2800      	cmp	r0, #0
 800c364:	f000 815b 	beq.w	800c61e <_dtoa_r+0x93e>
 800c368:	2400      	movs	r4, #0
 800c36a:	4625      	mov	r5, r4
 800c36c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c36e:	4656      	mov	r6, sl
 800c370:	43db      	mvns	r3, r3
 800c372:	9304      	str	r3, [sp, #16]
 800c374:	2700      	movs	r7, #0
 800c376:	4621      	mov	r1, r4
 800c378:	4658      	mov	r0, fp
 800c37a:	f000 fe4d 	bl	800d018 <_Bfree>
 800c37e:	2d00      	cmp	r5, #0
 800c380:	d0dc      	beq.n	800c33c <_dtoa_r+0x65c>
 800c382:	b12f      	cbz	r7, 800c390 <_dtoa_r+0x6b0>
 800c384:	42af      	cmp	r7, r5
 800c386:	d003      	beq.n	800c390 <_dtoa_r+0x6b0>
 800c388:	4639      	mov	r1, r7
 800c38a:	4658      	mov	r0, fp
 800c38c:	f000 fe44 	bl	800d018 <_Bfree>
 800c390:	4629      	mov	r1, r5
 800c392:	4658      	mov	r0, fp
 800c394:	f000 fe40 	bl	800d018 <_Bfree>
 800c398:	e7d0      	b.n	800c33c <_dtoa_r+0x65c>
 800c39a:	9704      	str	r7, [sp, #16]
 800c39c:	4633      	mov	r3, r6
 800c39e:	461e      	mov	r6, r3
 800c3a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3a4:	2a39      	cmp	r2, #57	@ 0x39
 800c3a6:	d107      	bne.n	800c3b8 <_dtoa_r+0x6d8>
 800c3a8:	459a      	cmp	sl, r3
 800c3aa:	d1f8      	bne.n	800c39e <_dtoa_r+0x6be>
 800c3ac:	9a04      	ldr	r2, [sp, #16]
 800c3ae:	3201      	adds	r2, #1
 800c3b0:	9204      	str	r2, [sp, #16]
 800c3b2:	2230      	movs	r2, #48	@ 0x30
 800c3b4:	f88a 2000 	strb.w	r2, [sl]
 800c3b8:	781a      	ldrb	r2, [r3, #0]
 800c3ba:	3201      	adds	r2, #1
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	e7bd      	b.n	800c33c <_dtoa_r+0x65c>
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	4b09      	ldr	r3, [pc, #36]	@ (800c3e8 <_dtoa_r+0x708>)
 800c3c4:	f7f4 f8a0 	bl	8000508 <__aeabi_dmul>
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	460d      	mov	r5, r1
 800c3d0:	f7f4 fb02 	bl	80009d8 <__aeabi_dcmpeq>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	f43f aebc 	beq.w	800c152 <_dtoa_r+0x472>
 800c3da:	e6f1      	b.n	800c1c0 <_dtoa_r+0x4e0>
 800c3dc:	0800fa78 	.word	0x0800fa78
 800c3e0:	3fe00000 	.word	0x3fe00000
 800c3e4:	3ff00000 	.word	0x3ff00000
 800c3e8:	40240000 	.word	0x40240000
 800c3ec:	40140000 	.word	0x40140000
 800c3f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c3f2:	2a00      	cmp	r2, #0
 800c3f4:	f000 80db 	beq.w	800c5ae <_dtoa_r+0x8ce>
 800c3f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c3fa:	2a01      	cmp	r2, #1
 800c3fc:	f300 80bf 	bgt.w	800c57e <_dtoa_r+0x89e>
 800c400:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c402:	2a00      	cmp	r2, #0
 800c404:	f000 80b7 	beq.w	800c576 <_dtoa_r+0x896>
 800c408:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c40c:	4646      	mov	r6, r8
 800c40e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c412:	2101      	movs	r1, #1
 800c414:	441a      	add	r2, r3
 800c416:	4658      	mov	r0, fp
 800c418:	4498      	add	r8, r3
 800c41a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c41c:	f000 fefa 	bl	800d214 <__i2b>
 800c420:	4605      	mov	r5, r0
 800c422:	b15e      	cbz	r6, 800c43c <_dtoa_r+0x75c>
 800c424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c426:	2b00      	cmp	r3, #0
 800c428:	dd08      	ble.n	800c43c <_dtoa_r+0x75c>
 800c42a:	42b3      	cmp	r3, r6
 800c42c:	bfa8      	it	ge
 800c42e:	4633      	movge	r3, r6
 800c430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c432:	eba8 0803 	sub.w	r8, r8, r3
 800c436:	1af6      	subs	r6, r6, r3
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c43c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c43e:	b1f3      	cbz	r3, 800c47e <_dtoa_r+0x79e>
 800c440:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 80b7 	beq.w	800c5b6 <_dtoa_r+0x8d6>
 800c448:	b18c      	cbz	r4, 800c46e <_dtoa_r+0x78e>
 800c44a:	4629      	mov	r1, r5
 800c44c:	4622      	mov	r2, r4
 800c44e:	4658      	mov	r0, fp
 800c450:	f000 ff9e 	bl	800d390 <__pow5mult>
 800c454:	464a      	mov	r2, r9
 800c456:	4601      	mov	r1, r0
 800c458:	4605      	mov	r5, r0
 800c45a:	4658      	mov	r0, fp
 800c45c:	f000 fef0 	bl	800d240 <__multiply>
 800c460:	4649      	mov	r1, r9
 800c462:	9004      	str	r0, [sp, #16]
 800c464:	4658      	mov	r0, fp
 800c466:	f000 fdd7 	bl	800d018 <_Bfree>
 800c46a:	9b04      	ldr	r3, [sp, #16]
 800c46c:	4699      	mov	r9, r3
 800c46e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c470:	1b1a      	subs	r2, r3, r4
 800c472:	d004      	beq.n	800c47e <_dtoa_r+0x79e>
 800c474:	4649      	mov	r1, r9
 800c476:	4658      	mov	r0, fp
 800c478:	f000 ff8a 	bl	800d390 <__pow5mult>
 800c47c:	4681      	mov	r9, r0
 800c47e:	2101      	movs	r1, #1
 800c480:	4658      	mov	r0, fp
 800c482:	f000 fec7 	bl	800d214 <__i2b>
 800c486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c488:	4604      	mov	r4, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 81c9 	beq.w	800c822 <_dtoa_r+0xb42>
 800c490:	461a      	mov	r2, r3
 800c492:	4601      	mov	r1, r0
 800c494:	4658      	mov	r0, fp
 800c496:	f000 ff7b 	bl	800d390 <__pow5mult>
 800c49a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c49c:	4604      	mov	r4, r0
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	f300 808f 	bgt.w	800c5c2 <_dtoa_r+0x8e2>
 800c4a4:	9b02      	ldr	r3, [sp, #8]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	f040 8087 	bne.w	800c5ba <_dtoa_r+0x8da>
 800c4ac:	9b03      	ldr	r3, [sp, #12]
 800c4ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f040 8083 	bne.w	800c5be <_dtoa_r+0x8de>
 800c4b8:	9b03      	ldr	r3, [sp, #12]
 800c4ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4be:	0d1b      	lsrs	r3, r3, #20
 800c4c0:	051b      	lsls	r3, r3, #20
 800c4c2:	b12b      	cbz	r3, 800c4d0 <_dtoa_r+0x7f0>
 800c4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4c6:	f108 0801 	add.w	r8, r8, #1
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 81aa 	beq.w	800c82e <_dtoa_r+0xb4e>
 800c4da:	6923      	ldr	r3, [r4, #16]
 800c4dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4e0:	6918      	ldr	r0, [r3, #16]
 800c4e2:	f000 fe4b 	bl	800d17c <__hi0bits>
 800c4e6:	f1c0 0020 	rsb	r0, r0, #32
 800c4ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ec:	4418      	add	r0, r3
 800c4ee:	f010 001f 	ands.w	r0, r0, #31
 800c4f2:	d071      	beq.n	800c5d8 <_dtoa_r+0x8f8>
 800c4f4:	f1c0 0320 	rsb	r3, r0, #32
 800c4f8:	2b04      	cmp	r3, #4
 800c4fa:	dd65      	ble.n	800c5c8 <_dtoa_r+0x8e8>
 800c4fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4fe:	f1c0 001c 	rsb	r0, r0, #28
 800c502:	4403      	add	r3, r0
 800c504:	4480      	add	r8, r0
 800c506:	4406      	add	r6, r0
 800c508:	9309      	str	r3, [sp, #36]	@ 0x24
 800c50a:	f1b8 0f00 	cmp.w	r8, #0
 800c50e:	dd05      	ble.n	800c51c <_dtoa_r+0x83c>
 800c510:	4649      	mov	r1, r9
 800c512:	4642      	mov	r2, r8
 800c514:	4658      	mov	r0, fp
 800c516:	f000 ff95 	bl	800d444 <__lshift>
 800c51a:	4681      	mov	r9, r0
 800c51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c51e:	2b00      	cmp	r3, #0
 800c520:	dd05      	ble.n	800c52e <_dtoa_r+0x84e>
 800c522:	4621      	mov	r1, r4
 800c524:	461a      	mov	r2, r3
 800c526:	4658      	mov	r0, fp
 800c528:	f000 ff8c 	bl	800d444 <__lshift>
 800c52c:	4604      	mov	r4, r0
 800c52e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c530:	2b00      	cmp	r3, #0
 800c532:	d053      	beq.n	800c5dc <_dtoa_r+0x8fc>
 800c534:	4621      	mov	r1, r4
 800c536:	4648      	mov	r0, r9
 800c538:	f000 fff0 	bl	800d51c <__mcmp>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	da4d      	bge.n	800c5dc <_dtoa_r+0x8fc>
 800c540:	1e7b      	subs	r3, r7, #1
 800c542:	4649      	mov	r1, r9
 800c544:	9304      	str	r3, [sp, #16]
 800c546:	220a      	movs	r2, #10
 800c548:	2300      	movs	r3, #0
 800c54a:	4658      	mov	r0, fp
 800c54c:	f000 fd86 	bl	800d05c <__multadd>
 800c550:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c552:	4681      	mov	r9, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 816c 	beq.w	800c832 <_dtoa_r+0xb52>
 800c55a:	2300      	movs	r3, #0
 800c55c:	4629      	mov	r1, r5
 800c55e:	220a      	movs	r2, #10
 800c560:	4658      	mov	r0, fp
 800c562:	f000 fd7b 	bl	800d05c <__multadd>
 800c566:	9b08      	ldr	r3, [sp, #32]
 800c568:	4605      	mov	r5, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	dc61      	bgt.n	800c632 <_dtoa_r+0x952>
 800c56e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c570:	2b02      	cmp	r3, #2
 800c572:	dc3b      	bgt.n	800c5ec <_dtoa_r+0x90c>
 800c574:	e05d      	b.n	800c632 <_dtoa_r+0x952>
 800c576:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c578:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c57c:	e746      	b.n	800c40c <_dtoa_r+0x72c>
 800c57e:	9b07      	ldr	r3, [sp, #28]
 800c580:	1e5c      	subs	r4, r3, #1
 800c582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c584:	42a3      	cmp	r3, r4
 800c586:	bfbf      	itttt	lt
 800c588:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c58a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c58c:	1ae3      	sublt	r3, r4, r3
 800c58e:	18d2      	addlt	r2, r2, r3
 800c590:	bfa8      	it	ge
 800c592:	1b1c      	subge	r4, r3, r4
 800c594:	9b07      	ldr	r3, [sp, #28]
 800c596:	bfbe      	ittt	lt
 800c598:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c59a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c59c:	2400      	movlt	r4, #0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	bfb5      	itete	lt
 800c5a2:	eba8 0603 	sublt.w	r6, r8, r3
 800c5a6:	4646      	movge	r6, r8
 800c5a8:	2300      	movlt	r3, #0
 800c5aa:	9b07      	ldrge	r3, [sp, #28]
 800c5ac:	e730      	b.n	800c410 <_dtoa_r+0x730>
 800c5ae:	4646      	mov	r6, r8
 800c5b0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c5b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c5b4:	e735      	b.n	800c422 <_dtoa_r+0x742>
 800c5b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5b8:	e75c      	b.n	800c474 <_dtoa_r+0x794>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	e788      	b.n	800c4d0 <_dtoa_r+0x7f0>
 800c5be:	9b02      	ldr	r3, [sp, #8]
 800c5c0:	e786      	b.n	800c4d0 <_dtoa_r+0x7f0>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5c6:	e788      	b.n	800c4da <_dtoa_r+0x7fa>
 800c5c8:	d09f      	beq.n	800c50a <_dtoa_r+0x82a>
 800c5ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5cc:	331c      	adds	r3, #28
 800c5ce:	441a      	add	r2, r3
 800c5d0:	4498      	add	r8, r3
 800c5d2:	441e      	add	r6, r3
 800c5d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5d6:	e798      	b.n	800c50a <_dtoa_r+0x82a>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	e7f6      	b.n	800c5ca <_dtoa_r+0x8ea>
 800c5dc:	9b07      	ldr	r3, [sp, #28]
 800c5de:	9704      	str	r7, [sp, #16]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	dc20      	bgt.n	800c626 <_dtoa_r+0x946>
 800c5e4:	9308      	str	r3, [sp, #32]
 800c5e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c5e8:	2b02      	cmp	r3, #2
 800c5ea:	dd1e      	ble.n	800c62a <_dtoa_r+0x94a>
 800c5ec:	9b08      	ldr	r3, [sp, #32]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f47f aebc 	bne.w	800c36c <_dtoa_r+0x68c>
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	2205      	movs	r2, #5
 800c5f8:	4658      	mov	r0, fp
 800c5fa:	f000 fd2f 	bl	800d05c <__multadd>
 800c5fe:	4601      	mov	r1, r0
 800c600:	4604      	mov	r4, r0
 800c602:	4648      	mov	r0, r9
 800c604:	f000 ff8a 	bl	800d51c <__mcmp>
 800c608:	2800      	cmp	r0, #0
 800c60a:	f77f aeaf 	ble.w	800c36c <_dtoa_r+0x68c>
 800c60e:	2331      	movs	r3, #49	@ 0x31
 800c610:	4656      	mov	r6, sl
 800c612:	f806 3b01 	strb.w	r3, [r6], #1
 800c616:	9b04      	ldr	r3, [sp, #16]
 800c618:	3301      	adds	r3, #1
 800c61a:	9304      	str	r3, [sp, #16]
 800c61c:	e6aa      	b.n	800c374 <_dtoa_r+0x694>
 800c61e:	9c07      	ldr	r4, [sp, #28]
 800c620:	9704      	str	r7, [sp, #16]
 800c622:	4625      	mov	r5, r4
 800c624:	e7f3      	b.n	800c60e <_dtoa_r+0x92e>
 800c626:	9b07      	ldr	r3, [sp, #28]
 800c628:	9308      	str	r3, [sp, #32]
 800c62a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f000 8104 	beq.w	800c83a <_dtoa_r+0xb5a>
 800c632:	2e00      	cmp	r6, #0
 800c634:	dd05      	ble.n	800c642 <_dtoa_r+0x962>
 800c636:	4629      	mov	r1, r5
 800c638:	4632      	mov	r2, r6
 800c63a:	4658      	mov	r0, fp
 800c63c:	f000 ff02 	bl	800d444 <__lshift>
 800c640:	4605      	mov	r5, r0
 800c642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c644:	2b00      	cmp	r3, #0
 800c646:	d05a      	beq.n	800c6fe <_dtoa_r+0xa1e>
 800c648:	4658      	mov	r0, fp
 800c64a:	6869      	ldr	r1, [r5, #4]
 800c64c:	f000 fca4 	bl	800cf98 <_Balloc>
 800c650:	4606      	mov	r6, r0
 800c652:	b928      	cbnz	r0, 800c660 <_dtoa_r+0x980>
 800c654:	4602      	mov	r2, r0
 800c656:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c65a:	4b83      	ldr	r3, [pc, #524]	@ (800c868 <_dtoa_r+0xb88>)
 800c65c:	f7ff bb54 	b.w	800bd08 <_dtoa_r+0x28>
 800c660:	692a      	ldr	r2, [r5, #16]
 800c662:	f105 010c 	add.w	r1, r5, #12
 800c666:	3202      	adds	r2, #2
 800c668:	0092      	lsls	r2, r2, #2
 800c66a:	300c      	adds	r0, #12
 800c66c:	f7ff fa9b 	bl	800bba6 <memcpy>
 800c670:	2201      	movs	r2, #1
 800c672:	4631      	mov	r1, r6
 800c674:	4658      	mov	r0, fp
 800c676:	f000 fee5 	bl	800d444 <__lshift>
 800c67a:	462f      	mov	r7, r5
 800c67c:	4605      	mov	r5, r0
 800c67e:	f10a 0301 	add.w	r3, sl, #1
 800c682:	9307      	str	r3, [sp, #28]
 800c684:	9b08      	ldr	r3, [sp, #32]
 800c686:	4453      	add	r3, sl
 800c688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c68a:	9b02      	ldr	r3, [sp, #8]
 800c68c:	f003 0301 	and.w	r3, r3, #1
 800c690:	930a      	str	r3, [sp, #40]	@ 0x28
 800c692:	9b07      	ldr	r3, [sp, #28]
 800c694:	4621      	mov	r1, r4
 800c696:	3b01      	subs	r3, #1
 800c698:	4648      	mov	r0, r9
 800c69a:	9302      	str	r3, [sp, #8]
 800c69c:	f7ff fa98 	bl	800bbd0 <quorem>
 800c6a0:	4639      	mov	r1, r7
 800c6a2:	9008      	str	r0, [sp, #32]
 800c6a4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c6a8:	4648      	mov	r0, r9
 800c6aa:	f000 ff37 	bl	800d51c <__mcmp>
 800c6ae:	462a      	mov	r2, r5
 800c6b0:	9009      	str	r0, [sp, #36]	@ 0x24
 800c6b2:	4621      	mov	r1, r4
 800c6b4:	4658      	mov	r0, fp
 800c6b6:	f000 ff4d 	bl	800d554 <__mdiff>
 800c6ba:	68c2      	ldr	r2, [r0, #12]
 800c6bc:	4606      	mov	r6, r0
 800c6be:	bb02      	cbnz	r2, 800c702 <_dtoa_r+0xa22>
 800c6c0:	4601      	mov	r1, r0
 800c6c2:	4648      	mov	r0, r9
 800c6c4:	f000 ff2a 	bl	800d51c <__mcmp>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	4658      	mov	r0, fp
 800c6ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800c6d0:	f000 fca2 	bl	800d018 <_Bfree>
 800c6d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c6d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c6d8:	9e07      	ldr	r6, [sp, #28]
 800c6da:	ea43 0102 	orr.w	r1, r3, r2
 800c6de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6e0:	4319      	orrs	r1, r3
 800c6e2:	d110      	bne.n	800c706 <_dtoa_r+0xa26>
 800c6e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6e8:	d029      	beq.n	800c73e <_dtoa_r+0xa5e>
 800c6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	dd02      	ble.n	800c6f6 <_dtoa_r+0xa16>
 800c6f0:	9b08      	ldr	r3, [sp, #32]
 800c6f2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c6f6:	9b02      	ldr	r3, [sp, #8]
 800c6f8:	f883 8000 	strb.w	r8, [r3]
 800c6fc:	e63b      	b.n	800c376 <_dtoa_r+0x696>
 800c6fe:	4628      	mov	r0, r5
 800c700:	e7bb      	b.n	800c67a <_dtoa_r+0x99a>
 800c702:	2201      	movs	r2, #1
 800c704:	e7e1      	b.n	800c6ca <_dtoa_r+0x9ea>
 800c706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c708:	2b00      	cmp	r3, #0
 800c70a:	db04      	blt.n	800c716 <_dtoa_r+0xa36>
 800c70c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c70e:	430b      	orrs	r3, r1
 800c710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c712:	430b      	orrs	r3, r1
 800c714:	d120      	bne.n	800c758 <_dtoa_r+0xa78>
 800c716:	2a00      	cmp	r2, #0
 800c718:	dded      	ble.n	800c6f6 <_dtoa_r+0xa16>
 800c71a:	4649      	mov	r1, r9
 800c71c:	2201      	movs	r2, #1
 800c71e:	4658      	mov	r0, fp
 800c720:	f000 fe90 	bl	800d444 <__lshift>
 800c724:	4621      	mov	r1, r4
 800c726:	4681      	mov	r9, r0
 800c728:	f000 fef8 	bl	800d51c <__mcmp>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	dc03      	bgt.n	800c738 <_dtoa_r+0xa58>
 800c730:	d1e1      	bne.n	800c6f6 <_dtoa_r+0xa16>
 800c732:	f018 0f01 	tst.w	r8, #1
 800c736:	d0de      	beq.n	800c6f6 <_dtoa_r+0xa16>
 800c738:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c73c:	d1d8      	bne.n	800c6f0 <_dtoa_r+0xa10>
 800c73e:	2339      	movs	r3, #57	@ 0x39
 800c740:	9a02      	ldr	r2, [sp, #8]
 800c742:	7013      	strb	r3, [r2, #0]
 800c744:	4633      	mov	r3, r6
 800c746:	461e      	mov	r6, r3
 800c748:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c74c:	3b01      	subs	r3, #1
 800c74e:	2a39      	cmp	r2, #57	@ 0x39
 800c750:	d052      	beq.n	800c7f8 <_dtoa_r+0xb18>
 800c752:	3201      	adds	r2, #1
 800c754:	701a      	strb	r2, [r3, #0]
 800c756:	e60e      	b.n	800c376 <_dtoa_r+0x696>
 800c758:	2a00      	cmp	r2, #0
 800c75a:	dd07      	ble.n	800c76c <_dtoa_r+0xa8c>
 800c75c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c760:	d0ed      	beq.n	800c73e <_dtoa_r+0xa5e>
 800c762:	9a02      	ldr	r2, [sp, #8]
 800c764:	f108 0301 	add.w	r3, r8, #1
 800c768:	7013      	strb	r3, [r2, #0]
 800c76a:	e604      	b.n	800c376 <_dtoa_r+0x696>
 800c76c:	9b07      	ldr	r3, [sp, #28]
 800c76e:	9a07      	ldr	r2, [sp, #28]
 800c770:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c776:	4293      	cmp	r3, r2
 800c778:	d028      	beq.n	800c7cc <_dtoa_r+0xaec>
 800c77a:	4649      	mov	r1, r9
 800c77c:	2300      	movs	r3, #0
 800c77e:	220a      	movs	r2, #10
 800c780:	4658      	mov	r0, fp
 800c782:	f000 fc6b 	bl	800d05c <__multadd>
 800c786:	42af      	cmp	r7, r5
 800c788:	4681      	mov	r9, r0
 800c78a:	f04f 0300 	mov.w	r3, #0
 800c78e:	f04f 020a 	mov.w	r2, #10
 800c792:	4639      	mov	r1, r7
 800c794:	4658      	mov	r0, fp
 800c796:	d107      	bne.n	800c7a8 <_dtoa_r+0xac8>
 800c798:	f000 fc60 	bl	800d05c <__multadd>
 800c79c:	4607      	mov	r7, r0
 800c79e:	4605      	mov	r5, r0
 800c7a0:	9b07      	ldr	r3, [sp, #28]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	9307      	str	r3, [sp, #28]
 800c7a6:	e774      	b.n	800c692 <_dtoa_r+0x9b2>
 800c7a8:	f000 fc58 	bl	800d05c <__multadd>
 800c7ac:	4629      	mov	r1, r5
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	220a      	movs	r2, #10
 800c7b4:	4658      	mov	r0, fp
 800c7b6:	f000 fc51 	bl	800d05c <__multadd>
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	e7f0      	b.n	800c7a0 <_dtoa_r+0xac0>
 800c7be:	9b08      	ldr	r3, [sp, #32]
 800c7c0:	2700      	movs	r7, #0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	bfcc      	ite	gt
 800c7c6:	461e      	movgt	r6, r3
 800c7c8:	2601      	movle	r6, #1
 800c7ca:	4456      	add	r6, sl
 800c7cc:	4649      	mov	r1, r9
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	4658      	mov	r0, fp
 800c7d2:	f000 fe37 	bl	800d444 <__lshift>
 800c7d6:	4621      	mov	r1, r4
 800c7d8:	4681      	mov	r9, r0
 800c7da:	f000 fe9f 	bl	800d51c <__mcmp>
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	dcb0      	bgt.n	800c744 <_dtoa_r+0xa64>
 800c7e2:	d102      	bne.n	800c7ea <_dtoa_r+0xb0a>
 800c7e4:	f018 0f01 	tst.w	r8, #1
 800c7e8:	d1ac      	bne.n	800c744 <_dtoa_r+0xa64>
 800c7ea:	4633      	mov	r3, r6
 800c7ec:	461e      	mov	r6, r3
 800c7ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7f2:	2a30      	cmp	r2, #48	@ 0x30
 800c7f4:	d0fa      	beq.n	800c7ec <_dtoa_r+0xb0c>
 800c7f6:	e5be      	b.n	800c376 <_dtoa_r+0x696>
 800c7f8:	459a      	cmp	sl, r3
 800c7fa:	d1a4      	bne.n	800c746 <_dtoa_r+0xa66>
 800c7fc:	9b04      	ldr	r3, [sp, #16]
 800c7fe:	3301      	adds	r3, #1
 800c800:	9304      	str	r3, [sp, #16]
 800c802:	2331      	movs	r3, #49	@ 0x31
 800c804:	f88a 3000 	strb.w	r3, [sl]
 800c808:	e5b5      	b.n	800c376 <_dtoa_r+0x696>
 800c80a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c80c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c86c <_dtoa_r+0xb8c>
 800c810:	b11b      	cbz	r3, 800c81a <_dtoa_r+0xb3a>
 800c812:	f10a 0308 	add.w	r3, sl, #8
 800c816:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	4650      	mov	r0, sl
 800c81c:	b017      	add	sp, #92	@ 0x5c
 800c81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c822:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c824:	2b01      	cmp	r3, #1
 800c826:	f77f ae3d 	ble.w	800c4a4 <_dtoa_r+0x7c4>
 800c82a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c82c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c82e:	2001      	movs	r0, #1
 800c830:	e65b      	b.n	800c4ea <_dtoa_r+0x80a>
 800c832:	9b08      	ldr	r3, [sp, #32]
 800c834:	2b00      	cmp	r3, #0
 800c836:	f77f aed6 	ble.w	800c5e6 <_dtoa_r+0x906>
 800c83a:	4656      	mov	r6, sl
 800c83c:	4621      	mov	r1, r4
 800c83e:	4648      	mov	r0, r9
 800c840:	f7ff f9c6 	bl	800bbd0 <quorem>
 800c844:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c848:	9b08      	ldr	r3, [sp, #32]
 800c84a:	f806 8b01 	strb.w	r8, [r6], #1
 800c84e:	eba6 020a 	sub.w	r2, r6, sl
 800c852:	4293      	cmp	r3, r2
 800c854:	ddb3      	ble.n	800c7be <_dtoa_r+0xade>
 800c856:	4649      	mov	r1, r9
 800c858:	2300      	movs	r3, #0
 800c85a:	220a      	movs	r2, #10
 800c85c:	4658      	mov	r0, fp
 800c85e:	f000 fbfd 	bl	800d05c <__multadd>
 800c862:	4681      	mov	r9, r0
 800c864:	e7ea      	b.n	800c83c <_dtoa_r+0xb5c>
 800c866:	bf00      	nop
 800c868:	0800f977 	.word	0x0800f977
 800c86c:	0800f8fb 	.word	0x0800f8fb

0800c870 <_free_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4605      	mov	r5, r0
 800c874:	2900      	cmp	r1, #0
 800c876:	d040      	beq.n	800c8fa <_free_r+0x8a>
 800c878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c87c:	1f0c      	subs	r4, r1, #4
 800c87e:	2b00      	cmp	r3, #0
 800c880:	bfb8      	it	lt
 800c882:	18e4      	addlt	r4, r4, r3
 800c884:	f7fc ff80 	bl	8009788 <__malloc_lock>
 800c888:	4a1c      	ldr	r2, [pc, #112]	@ (800c8fc <_free_r+0x8c>)
 800c88a:	6813      	ldr	r3, [r2, #0]
 800c88c:	b933      	cbnz	r3, 800c89c <_free_r+0x2c>
 800c88e:	6063      	str	r3, [r4, #4]
 800c890:	6014      	str	r4, [r2, #0]
 800c892:	4628      	mov	r0, r5
 800c894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c898:	f7fc bf7c 	b.w	8009794 <__malloc_unlock>
 800c89c:	42a3      	cmp	r3, r4
 800c89e:	d908      	bls.n	800c8b2 <_free_r+0x42>
 800c8a0:	6820      	ldr	r0, [r4, #0]
 800c8a2:	1821      	adds	r1, r4, r0
 800c8a4:	428b      	cmp	r3, r1
 800c8a6:	bf01      	itttt	eq
 800c8a8:	6819      	ldreq	r1, [r3, #0]
 800c8aa:	685b      	ldreq	r3, [r3, #4]
 800c8ac:	1809      	addeq	r1, r1, r0
 800c8ae:	6021      	streq	r1, [r4, #0]
 800c8b0:	e7ed      	b.n	800c88e <_free_r+0x1e>
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	b10b      	cbz	r3, 800c8bc <_free_r+0x4c>
 800c8b8:	42a3      	cmp	r3, r4
 800c8ba:	d9fa      	bls.n	800c8b2 <_free_r+0x42>
 800c8bc:	6811      	ldr	r1, [r2, #0]
 800c8be:	1850      	adds	r0, r2, r1
 800c8c0:	42a0      	cmp	r0, r4
 800c8c2:	d10b      	bne.n	800c8dc <_free_r+0x6c>
 800c8c4:	6820      	ldr	r0, [r4, #0]
 800c8c6:	4401      	add	r1, r0
 800c8c8:	1850      	adds	r0, r2, r1
 800c8ca:	4283      	cmp	r3, r0
 800c8cc:	6011      	str	r1, [r2, #0]
 800c8ce:	d1e0      	bne.n	800c892 <_free_r+0x22>
 800c8d0:	6818      	ldr	r0, [r3, #0]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	4408      	add	r0, r1
 800c8d6:	6010      	str	r0, [r2, #0]
 800c8d8:	6053      	str	r3, [r2, #4]
 800c8da:	e7da      	b.n	800c892 <_free_r+0x22>
 800c8dc:	d902      	bls.n	800c8e4 <_free_r+0x74>
 800c8de:	230c      	movs	r3, #12
 800c8e0:	602b      	str	r3, [r5, #0]
 800c8e2:	e7d6      	b.n	800c892 <_free_r+0x22>
 800c8e4:	6820      	ldr	r0, [r4, #0]
 800c8e6:	1821      	adds	r1, r4, r0
 800c8e8:	428b      	cmp	r3, r1
 800c8ea:	bf01      	itttt	eq
 800c8ec:	6819      	ldreq	r1, [r3, #0]
 800c8ee:	685b      	ldreq	r3, [r3, #4]
 800c8f0:	1809      	addeq	r1, r1, r0
 800c8f2:	6021      	streq	r1, [r4, #0]
 800c8f4:	6063      	str	r3, [r4, #4]
 800c8f6:	6054      	str	r4, [r2, #4]
 800c8f8:	e7cb      	b.n	800c892 <_free_r+0x22>
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	20000600 	.word	0x20000600

0800c900 <rshift>:
 800c900:	6903      	ldr	r3, [r0, #16]
 800c902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c906:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c90a:	f100 0414 	add.w	r4, r0, #20
 800c90e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c912:	dd46      	ble.n	800c9a2 <rshift+0xa2>
 800c914:	f011 011f 	ands.w	r1, r1, #31
 800c918:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c91c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c920:	d10c      	bne.n	800c93c <rshift+0x3c>
 800c922:	4629      	mov	r1, r5
 800c924:	f100 0710 	add.w	r7, r0, #16
 800c928:	42b1      	cmp	r1, r6
 800c92a:	d335      	bcc.n	800c998 <rshift+0x98>
 800c92c:	1a9b      	subs	r3, r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	1eea      	subs	r2, r5, #3
 800c932:	4296      	cmp	r6, r2
 800c934:	bf38      	it	cc
 800c936:	2300      	movcc	r3, #0
 800c938:	4423      	add	r3, r4
 800c93a:	e015      	b.n	800c968 <rshift+0x68>
 800c93c:	46a1      	mov	r9, r4
 800c93e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c942:	f1c1 0820 	rsb	r8, r1, #32
 800c946:	40cf      	lsrs	r7, r1
 800c948:	f105 0e04 	add.w	lr, r5, #4
 800c94c:	4576      	cmp	r6, lr
 800c94e:	46f4      	mov	ip, lr
 800c950:	d816      	bhi.n	800c980 <rshift+0x80>
 800c952:	1a9a      	subs	r2, r3, r2
 800c954:	0092      	lsls	r2, r2, #2
 800c956:	3a04      	subs	r2, #4
 800c958:	3501      	adds	r5, #1
 800c95a:	42ae      	cmp	r6, r5
 800c95c:	bf38      	it	cc
 800c95e:	2200      	movcc	r2, #0
 800c960:	18a3      	adds	r3, r4, r2
 800c962:	50a7      	str	r7, [r4, r2]
 800c964:	b107      	cbz	r7, 800c968 <rshift+0x68>
 800c966:	3304      	adds	r3, #4
 800c968:	42a3      	cmp	r3, r4
 800c96a:	eba3 0204 	sub.w	r2, r3, r4
 800c96e:	bf08      	it	eq
 800c970:	2300      	moveq	r3, #0
 800c972:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c976:	6102      	str	r2, [r0, #16]
 800c978:	bf08      	it	eq
 800c97a:	6143      	streq	r3, [r0, #20]
 800c97c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c980:	f8dc c000 	ldr.w	ip, [ip]
 800c984:	fa0c fc08 	lsl.w	ip, ip, r8
 800c988:	ea4c 0707 	orr.w	r7, ip, r7
 800c98c:	f849 7b04 	str.w	r7, [r9], #4
 800c990:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c994:	40cf      	lsrs	r7, r1
 800c996:	e7d9      	b.n	800c94c <rshift+0x4c>
 800c998:	f851 cb04 	ldr.w	ip, [r1], #4
 800c99c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c9a0:	e7c2      	b.n	800c928 <rshift+0x28>
 800c9a2:	4623      	mov	r3, r4
 800c9a4:	e7e0      	b.n	800c968 <rshift+0x68>

0800c9a6 <__hexdig_fun>:
 800c9a6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c9aa:	2b09      	cmp	r3, #9
 800c9ac:	d802      	bhi.n	800c9b4 <__hexdig_fun+0xe>
 800c9ae:	3820      	subs	r0, #32
 800c9b0:	b2c0      	uxtb	r0, r0
 800c9b2:	4770      	bx	lr
 800c9b4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c9b8:	2b05      	cmp	r3, #5
 800c9ba:	d801      	bhi.n	800c9c0 <__hexdig_fun+0x1a>
 800c9bc:	3847      	subs	r0, #71	@ 0x47
 800c9be:	e7f7      	b.n	800c9b0 <__hexdig_fun+0xa>
 800c9c0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c9c4:	2b05      	cmp	r3, #5
 800c9c6:	d801      	bhi.n	800c9cc <__hexdig_fun+0x26>
 800c9c8:	3827      	subs	r0, #39	@ 0x27
 800c9ca:	e7f1      	b.n	800c9b0 <__hexdig_fun+0xa>
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	4770      	bx	lr

0800c9d0 <__gethex>:
 800c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d4:	468a      	mov	sl, r1
 800c9d6:	4690      	mov	r8, r2
 800c9d8:	b085      	sub	sp, #20
 800c9da:	9302      	str	r3, [sp, #8]
 800c9dc:	680b      	ldr	r3, [r1, #0]
 800c9de:	9001      	str	r0, [sp, #4]
 800c9e0:	1c9c      	adds	r4, r3, #2
 800c9e2:	46a1      	mov	r9, r4
 800c9e4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c9e8:	2830      	cmp	r0, #48	@ 0x30
 800c9ea:	d0fa      	beq.n	800c9e2 <__gethex+0x12>
 800c9ec:	eba9 0303 	sub.w	r3, r9, r3
 800c9f0:	f1a3 0b02 	sub.w	fp, r3, #2
 800c9f4:	f7ff ffd7 	bl	800c9a6 <__hexdig_fun>
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d168      	bne.n	800cad0 <__gethex+0x100>
 800c9fe:	2201      	movs	r2, #1
 800ca00:	4648      	mov	r0, r9
 800ca02:	499f      	ldr	r1, [pc, #636]	@ (800cc80 <__gethex+0x2b0>)
 800ca04:	f7ff f80a 	bl	800ba1c <strncmp>
 800ca08:	4607      	mov	r7, r0
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	d167      	bne.n	800cade <__gethex+0x10e>
 800ca0e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ca12:	4626      	mov	r6, r4
 800ca14:	f7ff ffc7 	bl	800c9a6 <__hexdig_fun>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d062      	beq.n	800cae2 <__gethex+0x112>
 800ca1c:	4623      	mov	r3, r4
 800ca1e:	7818      	ldrb	r0, [r3, #0]
 800ca20:	4699      	mov	r9, r3
 800ca22:	2830      	cmp	r0, #48	@ 0x30
 800ca24:	f103 0301 	add.w	r3, r3, #1
 800ca28:	d0f9      	beq.n	800ca1e <__gethex+0x4e>
 800ca2a:	f7ff ffbc 	bl	800c9a6 <__hexdig_fun>
 800ca2e:	fab0 f580 	clz	r5, r0
 800ca32:	f04f 0b01 	mov.w	fp, #1
 800ca36:	096d      	lsrs	r5, r5, #5
 800ca38:	464a      	mov	r2, r9
 800ca3a:	4616      	mov	r6, r2
 800ca3c:	7830      	ldrb	r0, [r6, #0]
 800ca3e:	3201      	adds	r2, #1
 800ca40:	f7ff ffb1 	bl	800c9a6 <__hexdig_fun>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d1f8      	bne.n	800ca3a <__gethex+0x6a>
 800ca48:	2201      	movs	r2, #1
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	498c      	ldr	r1, [pc, #560]	@ (800cc80 <__gethex+0x2b0>)
 800ca4e:	f7fe ffe5 	bl	800ba1c <strncmp>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	d13f      	bne.n	800cad6 <__gethex+0x106>
 800ca56:	b944      	cbnz	r4, 800ca6a <__gethex+0x9a>
 800ca58:	1c74      	adds	r4, r6, #1
 800ca5a:	4622      	mov	r2, r4
 800ca5c:	4616      	mov	r6, r2
 800ca5e:	7830      	ldrb	r0, [r6, #0]
 800ca60:	3201      	adds	r2, #1
 800ca62:	f7ff ffa0 	bl	800c9a6 <__hexdig_fun>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d1f8      	bne.n	800ca5c <__gethex+0x8c>
 800ca6a:	1ba4      	subs	r4, r4, r6
 800ca6c:	00a7      	lsls	r7, r4, #2
 800ca6e:	7833      	ldrb	r3, [r6, #0]
 800ca70:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ca74:	2b50      	cmp	r3, #80	@ 0x50
 800ca76:	d13e      	bne.n	800caf6 <__gethex+0x126>
 800ca78:	7873      	ldrb	r3, [r6, #1]
 800ca7a:	2b2b      	cmp	r3, #43	@ 0x2b
 800ca7c:	d033      	beq.n	800cae6 <__gethex+0x116>
 800ca7e:	2b2d      	cmp	r3, #45	@ 0x2d
 800ca80:	d034      	beq.n	800caec <__gethex+0x11c>
 800ca82:	2400      	movs	r4, #0
 800ca84:	1c71      	adds	r1, r6, #1
 800ca86:	7808      	ldrb	r0, [r1, #0]
 800ca88:	f7ff ff8d 	bl	800c9a6 <__hexdig_fun>
 800ca8c:	1e43      	subs	r3, r0, #1
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	2b18      	cmp	r3, #24
 800ca92:	d830      	bhi.n	800caf6 <__gethex+0x126>
 800ca94:	f1a0 0210 	sub.w	r2, r0, #16
 800ca98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca9c:	f7ff ff83 	bl	800c9a6 <__hexdig_fun>
 800caa0:	f100 3cff 	add.w	ip, r0, #4294967295
 800caa4:	fa5f fc8c 	uxtb.w	ip, ip
 800caa8:	f1bc 0f18 	cmp.w	ip, #24
 800caac:	f04f 030a 	mov.w	r3, #10
 800cab0:	d91e      	bls.n	800caf0 <__gethex+0x120>
 800cab2:	b104      	cbz	r4, 800cab6 <__gethex+0xe6>
 800cab4:	4252      	negs	r2, r2
 800cab6:	4417      	add	r7, r2
 800cab8:	f8ca 1000 	str.w	r1, [sl]
 800cabc:	b1ed      	cbz	r5, 800cafa <__gethex+0x12a>
 800cabe:	f1bb 0f00 	cmp.w	fp, #0
 800cac2:	bf0c      	ite	eq
 800cac4:	2506      	moveq	r5, #6
 800cac6:	2500      	movne	r5, #0
 800cac8:	4628      	mov	r0, r5
 800caca:	b005      	add	sp, #20
 800cacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad0:	2500      	movs	r5, #0
 800cad2:	462c      	mov	r4, r5
 800cad4:	e7b0      	b.n	800ca38 <__gethex+0x68>
 800cad6:	2c00      	cmp	r4, #0
 800cad8:	d1c7      	bne.n	800ca6a <__gethex+0x9a>
 800cada:	4627      	mov	r7, r4
 800cadc:	e7c7      	b.n	800ca6e <__gethex+0x9e>
 800cade:	464e      	mov	r6, r9
 800cae0:	462f      	mov	r7, r5
 800cae2:	2501      	movs	r5, #1
 800cae4:	e7c3      	b.n	800ca6e <__gethex+0x9e>
 800cae6:	2400      	movs	r4, #0
 800cae8:	1cb1      	adds	r1, r6, #2
 800caea:	e7cc      	b.n	800ca86 <__gethex+0xb6>
 800caec:	2401      	movs	r4, #1
 800caee:	e7fb      	b.n	800cae8 <__gethex+0x118>
 800caf0:	fb03 0002 	mla	r0, r3, r2, r0
 800caf4:	e7ce      	b.n	800ca94 <__gethex+0xc4>
 800caf6:	4631      	mov	r1, r6
 800caf8:	e7de      	b.n	800cab8 <__gethex+0xe8>
 800cafa:	4629      	mov	r1, r5
 800cafc:	eba6 0309 	sub.w	r3, r6, r9
 800cb00:	3b01      	subs	r3, #1
 800cb02:	2b07      	cmp	r3, #7
 800cb04:	dc0a      	bgt.n	800cb1c <__gethex+0x14c>
 800cb06:	9801      	ldr	r0, [sp, #4]
 800cb08:	f000 fa46 	bl	800cf98 <_Balloc>
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	b940      	cbnz	r0, 800cb22 <__gethex+0x152>
 800cb10:	4602      	mov	r2, r0
 800cb12:	21e4      	movs	r1, #228	@ 0xe4
 800cb14:	4b5b      	ldr	r3, [pc, #364]	@ (800cc84 <__gethex+0x2b4>)
 800cb16:	485c      	ldr	r0, [pc, #368]	@ (800cc88 <__gethex+0x2b8>)
 800cb18:	f001 fb00 	bl	800e11c <__assert_func>
 800cb1c:	3101      	adds	r1, #1
 800cb1e:	105b      	asrs	r3, r3, #1
 800cb20:	e7ef      	b.n	800cb02 <__gethex+0x132>
 800cb22:	2300      	movs	r3, #0
 800cb24:	f100 0a14 	add.w	sl, r0, #20
 800cb28:	4655      	mov	r5, sl
 800cb2a:	469b      	mov	fp, r3
 800cb2c:	45b1      	cmp	r9, r6
 800cb2e:	d337      	bcc.n	800cba0 <__gethex+0x1d0>
 800cb30:	f845 bb04 	str.w	fp, [r5], #4
 800cb34:	eba5 050a 	sub.w	r5, r5, sl
 800cb38:	10ad      	asrs	r5, r5, #2
 800cb3a:	6125      	str	r5, [r4, #16]
 800cb3c:	4658      	mov	r0, fp
 800cb3e:	f000 fb1d 	bl	800d17c <__hi0bits>
 800cb42:	016d      	lsls	r5, r5, #5
 800cb44:	f8d8 6000 	ldr.w	r6, [r8]
 800cb48:	1a2d      	subs	r5, r5, r0
 800cb4a:	42b5      	cmp	r5, r6
 800cb4c:	dd54      	ble.n	800cbf8 <__gethex+0x228>
 800cb4e:	1bad      	subs	r5, r5, r6
 800cb50:	4629      	mov	r1, r5
 800cb52:	4620      	mov	r0, r4
 800cb54:	f000 fea5 	bl	800d8a2 <__any_on>
 800cb58:	4681      	mov	r9, r0
 800cb5a:	b178      	cbz	r0, 800cb7c <__gethex+0x1ac>
 800cb5c:	f04f 0901 	mov.w	r9, #1
 800cb60:	1e6b      	subs	r3, r5, #1
 800cb62:	1159      	asrs	r1, r3, #5
 800cb64:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cb68:	f003 021f 	and.w	r2, r3, #31
 800cb6c:	fa09 f202 	lsl.w	r2, r9, r2
 800cb70:	420a      	tst	r2, r1
 800cb72:	d003      	beq.n	800cb7c <__gethex+0x1ac>
 800cb74:	454b      	cmp	r3, r9
 800cb76:	dc36      	bgt.n	800cbe6 <__gethex+0x216>
 800cb78:	f04f 0902 	mov.w	r9, #2
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f7ff febe 	bl	800c900 <rshift>
 800cb84:	442f      	add	r7, r5
 800cb86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb8a:	42bb      	cmp	r3, r7
 800cb8c:	da42      	bge.n	800cc14 <__gethex+0x244>
 800cb8e:	4621      	mov	r1, r4
 800cb90:	9801      	ldr	r0, [sp, #4]
 800cb92:	f000 fa41 	bl	800d018 <_Bfree>
 800cb96:	2300      	movs	r3, #0
 800cb98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb9a:	25a3      	movs	r5, #163	@ 0xa3
 800cb9c:	6013      	str	r3, [r2, #0]
 800cb9e:	e793      	b.n	800cac8 <__gethex+0xf8>
 800cba0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cba4:	2a2e      	cmp	r2, #46	@ 0x2e
 800cba6:	d012      	beq.n	800cbce <__gethex+0x1fe>
 800cba8:	2b20      	cmp	r3, #32
 800cbaa:	d104      	bne.n	800cbb6 <__gethex+0x1e6>
 800cbac:	f845 bb04 	str.w	fp, [r5], #4
 800cbb0:	f04f 0b00 	mov.w	fp, #0
 800cbb4:	465b      	mov	r3, fp
 800cbb6:	7830      	ldrb	r0, [r6, #0]
 800cbb8:	9303      	str	r3, [sp, #12]
 800cbba:	f7ff fef4 	bl	800c9a6 <__hexdig_fun>
 800cbbe:	9b03      	ldr	r3, [sp, #12]
 800cbc0:	f000 000f 	and.w	r0, r0, #15
 800cbc4:	4098      	lsls	r0, r3
 800cbc6:	ea4b 0b00 	orr.w	fp, fp, r0
 800cbca:	3304      	adds	r3, #4
 800cbcc:	e7ae      	b.n	800cb2c <__gethex+0x15c>
 800cbce:	45b1      	cmp	r9, r6
 800cbd0:	d8ea      	bhi.n	800cba8 <__gethex+0x1d8>
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	492a      	ldr	r1, [pc, #168]	@ (800cc80 <__gethex+0x2b0>)
 800cbd8:	9303      	str	r3, [sp, #12]
 800cbda:	f7fe ff1f 	bl	800ba1c <strncmp>
 800cbde:	9b03      	ldr	r3, [sp, #12]
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d1e1      	bne.n	800cba8 <__gethex+0x1d8>
 800cbe4:	e7a2      	b.n	800cb2c <__gethex+0x15c>
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	1ea9      	subs	r1, r5, #2
 800cbea:	f000 fe5a 	bl	800d8a2 <__any_on>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d0c2      	beq.n	800cb78 <__gethex+0x1a8>
 800cbf2:	f04f 0903 	mov.w	r9, #3
 800cbf6:	e7c1      	b.n	800cb7c <__gethex+0x1ac>
 800cbf8:	da09      	bge.n	800cc0e <__gethex+0x23e>
 800cbfa:	1b75      	subs	r5, r6, r5
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	462a      	mov	r2, r5
 800cc00:	9801      	ldr	r0, [sp, #4]
 800cc02:	f000 fc1f 	bl	800d444 <__lshift>
 800cc06:	4604      	mov	r4, r0
 800cc08:	1b7f      	subs	r7, r7, r5
 800cc0a:	f100 0a14 	add.w	sl, r0, #20
 800cc0e:	f04f 0900 	mov.w	r9, #0
 800cc12:	e7b8      	b.n	800cb86 <__gethex+0x1b6>
 800cc14:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cc18:	42bd      	cmp	r5, r7
 800cc1a:	dd6f      	ble.n	800ccfc <__gethex+0x32c>
 800cc1c:	1bed      	subs	r5, r5, r7
 800cc1e:	42ae      	cmp	r6, r5
 800cc20:	dc34      	bgt.n	800cc8c <__gethex+0x2bc>
 800cc22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d022      	beq.n	800cc70 <__gethex+0x2a0>
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	d024      	beq.n	800cc78 <__gethex+0x2a8>
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d115      	bne.n	800cc5e <__gethex+0x28e>
 800cc32:	42ae      	cmp	r6, r5
 800cc34:	d113      	bne.n	800cc5e <__gethex+0x28e>
 800cc36:	2e01      	cmp	r6, #1
 800cc38:	d10b      	bne.n	800cc52 <__gethex+0x282>
 800cc3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc3e:	9a02      	ldr	r2, [sp, #8]
 800cc40:	2562      	movs	r5, #98	@ 0x62
 800cc42:	6013      	str	r3, [r2, #0]
 800cc44:	2301      	movs	r3, #1
 800cc46:	6123      	str	r3, [r4, #16]
 800cc48:	f8ca 3000 	str.w	r3, [sl]
 800cc4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc4e:	601c      	str	r4, [r3, #0]
 800cc50:	e73a      	b.n	800cac8 <__gethex+0xf8>
 800cc52:	4620      	mov	r0, r4
 800cc54:	1e71      	subs	r1, r6, #1
 800cc56:	f000 fe24 	bl	800d8a2 <__any_on>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d1ed      	bne.n	800cc3a <__gethex+0x26a>
 800cc5e:	4621      	mov	r1, r4
 800cc60:	9801      	ldr	r0, [sp, #4]
 800cc62:	f000 f9d9 	bl	800d018 <_Bfree>
 800cc66:	2300      	movs	r3, #0
 800cc68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc6a:	2550      	movs	r5, #80	@ 0x50
 800cc6c:	6013      	str	r3, [r2, #0]
 800cc6e:	e72b      	b.n	800cac8 <__gethex+0xf8>
 800cc70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1f3      	bne.n	800cc5e <__gethex+0x28e>
 800cc76:	e7e0      	b.n	800cc3a <__gethex+0x26a>
 800cc78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1dd      	bne.n	800cc3a <__gethex+0x26a>
 800cc7e:	e7ee      	b.n	800cc5e <__gethex+0x28e>
 800cc80:	0800f0d6 	.word	0x0800f0d6
 800cc84:	0800f977 	.word	0x0800f977
 800cc88:	0800f988 	.word	0x0800f988
 800cc8c:	1e6f      	subs	r7, r5, #1
 800cc8e:	f1b9 0f00 	cmp.w	r9, #0
 800cc92:	d130      	bne.n	800ccf6 <__gethex+0x326>
 800cc94:	b127      	cbz	r7, 800cca0 <__gethex+0x2d0>
 800cc96:	4639      	mov	r1, r7
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f000 fe02 	bl	800d8a2 <__any_on>
 800cc9e:	4681      	mov	r9, r0
 800cca0:	2301      	movs	r3, #1
 800cca2:	4629      	mov	r1, r5
 800cca4:	1b76      	subs	r6, r6, r5
 800cca6:	2502      	movs	r5, #2
 800cca8:	117a      	asrs	r2, r7, #5
 800ccaa:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ccae:	f007 071f 	and.w	r7, r7, #31
 800ccb2:	40bb      	lsls	r3, r7
 800ccb4:	4213      	tst	r3, r2
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	bf18      	it	ne
 800ccba:	f049 0902 	orrne.w	r9, r9, #2
 800ccbe:	f7ff fe1f 	bl	800c900 <rshift>
 800ccc2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ccc6:	f1b9 0f00 	cmp.w	r9, #0
 800ccca:	d047      	beq.n	800cd5c <__gethex+0x38c>
 800cccc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d015      	beq.n	800cd00 <__gethex+0x330>
 800ccd4:	2b03      	cmp	r3, #3
 800ccd6:	d017      	beq.n	800cd08 <__gethex+0x338>
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d109      	bne.n	800ccf0 <__gethex+0x320>
 800ccdc:	f019 0f02 	tst.w	r9, #2
 800cce0:	d006      	beq.n	800ccf0 <__gethex+0x320>
 800cce2:	f8da 3000 	ldr.w	r3, [sl]
 800cce6:	ea49 0903 	orr.w	r9, r9, r3
 800ccea:	f019 0f01 	tst.w	r9, #1
 800ccee:	d10e      	bne.n	800cd0e <__gethex+0x33e>
 800ccf0:	f045 0510 	orr.w	r5, r5, #16
 800ccf4:	e032      	b.n	800cd5c <__gethex+0x38c>
 800ccf6:	f04f 0901 	mov.w	r9, #1
 800ccfa:	e7d1      	b.n	800cca0 <__gethex+0x2d0>
 800ccfc:	2501      	movs	r5, #1
 800ccfe:	e7e2      	b.n	800ccc6 <__gethex+0x2f6>
 800cd00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd02:	f1c3 0301 	rsb	r3, r3, #1
 800cd06:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d0f0      	beq.n	800ccf0 <__gethex+0x320>
 800cd0e:	f04f 0c00 	mov.w	ip, #0
 800cd12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd16:	f104 0314 	add.w	r3, r4, #20
 800cd1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cd1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cd22:	4618      	mov	r0, r3
 800cd24:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd28:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cd2c:	d01b      	beq.n	800cd66 <__gethex+0x396>
 800cd2e:	3201      	adds	r2, #1
 800cd30:	6002      	str	r2, [r0, #0]
 800cd32:	2d02      	cmp	r5, #2
 800cd34:	f104 0314 	add.w	r3, r4, #20
 800cd38:	d13c      	bne.n	800cdb4 <__gethex+0x3e4>
 800cd3a:	f8d8 2000 	ldr.w	r2, [r8]
 800cd3e:	3a01      	subs	r2, #1
 800cd40:	42b2      	cmp	r2, r6
 800cd42:	d109      	bne.n	800cd58 <__gethex+0x388>
 800cd44:	2201      	movs	r2, #1
 800cd46:	1171      	asrs	r1, r6, #5
 800cd48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd4c:	f006 061f 	and.w	r6, r6, #31
 800cd50:	fa02 f606 	lsl.w	r6, r2, r6
 800cd54:	421e      	tst	r6, r3
 800cd56:	d13a      	bne.n	800cdce <__gethex+0x3fe>
 800cd58:	f045 0520 	orr.w	r5, r5, #32
 800cd5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd5e:	601c      	str	r4, [r3, #0]
 800cd60:	9b02      	ldr	r3, [sp, #8]
 800cd62:	601f      	str	r7, [r3, #0]
 800cd64:	e6b0      	b.n	800cac8 <__gethex+0xf8>
 800cd66:	4299      	cmp	r1, r3
 800cd68:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd6c:	d8d9      	bhi.n	800cd22 <__gethex+0x352>
 800cd6e:	68a3      	ldr	r3, [r4, #8]
 800cd70:	459b      	cmp	fp, r3
 800cd72:	db17      	blt.n	800cda4 <__gethex+0x3d4>
 800cd74:	6861      	ldr	r1, [r4, #4]
 800cd76:	9801      	ldr	r0, [sp, #4]
 800cd78:	3101      	adds	r1, #1
 800cd7a:	f000 f90d 	bl	800cf98 <_Balloc>
 800cd7e:	4681      	mov	r9, r0
 800cd80:	b918      	cbnz	r0, 800cd8a <__gethex+0x3ba>
 800cd82:	4602      	mov	r2, r0
 800cd84:	2184      	movs	r1, #132	@ 0x84
 800cd86:	4b19      	ldr	r3, [pc, #100]	@ (800cdec <__gethex+0x41c>)
 800cd88:	e6c5      	b.n	800cb16 <__gethex+0x146>
 800cd8a:	6922      	ldr	r2, [r4, #16]
 800cd8c:	f104 010c 	add.w	r1, r4, #12
 800cd90:	3202      	adds	r2, #2
 800cd92:	0092      	lsls	r2, r2, #2
 800cd94:	300c      	adds	r0, #12
 800cd96:	f7fe ff06 	bl	800bba6 <memcpy>
 800cd9a:	4621      	mov	r1, r4
 800cd9c:	9801      	ldr	r0, [sp, #4]
 800cd9e:	f000 f93b 	bl	800d018 <_Bfree>
 800cda2:	464c      	mov	r4, r9
 800cda4:	6923      	ldr	r3, [r4, #16]
 800cda6:	1c5a      	adds	r2, r3, #1
 800cda8:	6122      	str	r2, [r4, #16]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cdb0:	615a      	str	r2, [r3, #20]
 800cdb2:	e7be      	b.n	800cd32 <__gethex+0x362>
 800cdb4:	6922      	ldr	r2, [r4, #16]
 800cdb6:	455a      	cmp	r2, fp
 800cdb8:	dd0b      	ble.n	800cdd2 <__gethex+0x402>
 800cdba:	2101      	movs	r1, #1
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f7ff fd9f 	bl	800c900 <rshift>
 800cdc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdc6:	3701      	adds	r7, #1
 800cdc8:	42bb      	cmp	r3, r7
 800cdca:	f6ff aee0 	blt.w	800cb8e <__gethex+0x1be>
 800cdce:	2501      	movs	r5, #1
 800cdd0:	e7c2      	b.n	800cd58 <__gethex+0x388>
 800cdd2:	f016 061f 	ands.w	r6, r6, #31
 800cdd6:	d0fa      	beq.n	800cdce <__gethex+0x3fe>
 800cdd8:	4453      	add	r3, sl
 800cdda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cdde:	f000 f9cd 	bl	800d17c <__hi0bits>
 800cde2:	f1c6 0620 	rsb	r6, r6, #32
 800cde6:	42b0      	cmp	r0, r6
 800cde8:	dbe7      	blt.n	800cdba <__gethex+0x3ea>
 800cdea:	e7f0      	b.n	800cdce <__gethex+0x3fe>
 800cdec:	0800f977 	.word	0x0800f977

0800cdf0 <L_shift>:
 800cdf0:	f1c2 0208 	rsb	r2, r2, #8
 800cdf4:	0092      	lsls	r2, r2, #2
 800cdf6:	b570      	push	{r4, r5, r6, lr}
 800cdf8:	f1c2 0620 	rsb	r6, r2, #32
 800cdfc:	6843      	ldr	r3, [r0, #4]
 800cdfe:	6804      	ldr	r4, [r0, #0]
 800ce00:	fa03 f506 	lsl.w	r5, r3, r6
 800ce04:	432c      	orrs	r4, r5
 800ce06:	40d3      	lsrs	r3, r2
 800ce08:	6004      	str	r4, [r0, #0]
 800ce0a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce0e:	4288      	cmp	r0, r1
 800ce10:	d3f4      	bcc.n	800cdfc <L_shift+0xc>
 800ce12:	bd70      	pop	{r4, r5, r6, pc}

0800ce14 <__match>:
 800ce14:	b530      	push	{r4, r5, lr}
 800ce16:	6803      	ldr	r3, [r0, #0]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce1e:	b914      	cbnz	r4, 800ce26 <__match+0x12>
 800ce20:	6003      	str	r3, [r0, #0]
 800ce22:	2001      	movs	r0, #1
 800ce24:	bd30      	pop	{r4, r5, pc}
 800ce26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce2a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ce2e:	2d19      	cmp	r5, #25
 800ce30:	bf98      	it	ls
 800ce32:	3220      	addls	r2, #32
 800ce34:	42a2      	cmp	r2, r4
 800ce36:	d0f0      	beq.n	800ce1a <__match+0x6>
 800ce38:	2000      	movs	r0, #0
 800ce3a:	e7f3      	b.n	800ce24 <__match+0x10>

0800ce3c <__hexnan>:
 800ce3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce40:	2500      	movs	r5, #0
 800ce42:	680b      	ldr	r3, [r1, #0]
 800ce44:	4682      	mov	sl, r0
 800ce46:	115e      	asrs	r6, r3, #5
 800ce48:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce4c:	f013 031f 	ands.w	r3, r3, #31
 800ce50:	bf18      	it	ne
 800ce52:	3604      	addne	r6, #4
 800ce54:	1f37      	subs	r7, r6, #4
 800ce56:	4690      	mov	r8, r2
 800ce58:	46b9      	mov	r9, r7
 800ce5a:	463c      	mov	r4, r7
 800ce5c:	46ab      	mov	fp, r5
 800ce5e:	b087      	sub	sp, #28
 800ce60:	6801      	ldr	r1, [r0, #0]
 800ce62:	9301      	str	r3, [sp, #4]
 800ce64:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce68:	9502      	str	r5, [sp, #8]
 800ce6a:	784a      	ldrb	r2, [r1, #1]
 800ce6c:	1c4b      	adds	r3, r1, #1
 800ce6e:	9303      	str	r3, [sp, #12]
 800ce70:	b342      	cbz	r2, 800cec4 <__hexnan+0x88>
 800ce72:	4610      	mov	r0, r2
 800ce74:	9105      	str	r1, [sp, #20]
 800ce76:	9204      	str	r2, [sp, #16]
 800ce78:	f7ff fd95 	bl	800c9a6 <__hexdig_fun>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d151      	bne.n	800cf24 <__hexnan+0xe8>
 800ce80:	9a04      	ldr	r2, [sp, #16]
 800ce82:	9905      	ldr	r1, [sp, #20]
 800ce84:	2a20      	cmp	r2, #32
 800ce86:	d818      	bhi.n	800ceba <__hexnan+0x7e>
 800ce88:	9b02      	ldr	r3, [sp, #8]
 800ce8a:	459b      	cmp	fp, r3
 800ce8c:	dd13      	ble.n	800ceb6 <__hexnan+0x7a>
 800ce8e:	454c      	cmp	r4, r9
 800ce90:	d206      	bcs.n	800cea0 <__hexnan+0x64>
 800ce92:	2d07      	cmp	r5, #7
 800ce94:	dc04      	bgt.n	800cea0 <__hexnan+0x64>
 800ce96:	462a      	mov	r2, r5
 800ce98:	4649      	mov	r1, r9
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f7ff ffa8 	bl	800cdf0 <L_shift>
 800cea0:	4544      	cmp	r4, r8
 800cea2:	d952      	bls.n	800cf4a <__hexnan+0x10e>
 800cea4:	2300      	movs	r3, #0
 800cea6:	f1a4 0904 	sub.w	r9, r4, #4
 800ceaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800ceae:	461d      	mov	r5, r3
 800ceb0:	464c      	mov	r4, r9
 800ceb2:	f8cd b008 	str.w	fp, [sp, #8]
 800ceb6:	9903      	ldr	r1, [sp, #12]
 800ceb8:	e7d7      	b.n	800ce6a <__hexnan+0x2e>
 800ceba:	2a29      	cmp	r2, #41	@ 0x29
 800cebc:	d157      	bne.n	800cf6e <__hexnan+0x132>
 800cebe:	3102      	adds	r1, #2
 800cec0:	f8ca 1000 	str.w	r1, [sl]
 800cec4:	f1bb 0f00 	cmp.w	fp, #0
 800cec8:	d051      	beq.n	800cf6e <__hexnan+0x132>
 800ceca:	454c      	cmp	r4, r9
 800cecc:	d206      	bcs.n	800cedc <__hexnan+0xa0>
 800cece:	2d07      	cmp	r5, #7
 800ced0:	dc04      	bgt.n	800cedc <__hexnan+0xa0>
 800ced2:	462a      	mov	r2, r5
 800ced4:	4649      	mov	r1, r9
 800ced6:	4620      	mov	r0, r4
 800ced8:	f7ff ff8a 	bl	800cdf0 <L_shift>
 800cedc:	4544      	cmp	r4, r8
 800cede:	d936      	bls.n	800cf4e <__hexnan+0x112>
 800cee0:	4623      	mov	r3, r4
 800cee2:	f1a8 0204 	sub.w	r2, r8, #4
 800cee6:	f853 1b04 	ldr.w	r1, [r3], #4
 800ceea:	429f      	cmp	r7, r3
 800ceec:	f842 1f04 	str.w	r1, [r2, #4]!
 800cef0:	d2f9      	bcs.n	800cee6 <__hexnan+0xaa>
 800cef2:	1b3b      	subs	r3, r7, r4
 800cef4:	f023 0303 	bic.w	r3, r3, #3
 800cef8:	3304      	adds	r3, #4
 800cefa:	3401      	adds	r4, #1
 800cefc:	3e03      	subs	r6, #3
 800cefe:	42b4      	cmp	r4, r6
 800cf00:	bf88      	it	hi
 800cf02:	2304      	movhi	r3, #4
 800cf04:	2200      	movs	r2, #0
 800cf06:	4443      	add	r3, r8
 800cf08:	f843 2b04 	str.w	r2, [r3], #4
 800cf0c:	429f      	cmp	r7, r3
 800cf0e:	d2fb      	bcs.n	800cf08 <__hexnan+0xcc>
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	b91b      	cbnz	r3, 800cf1c <__hexnan+0xe0>
 800cf14:	4547      	cmp	r7, r8
 800cf16:	d128      	bne.n	800cf6a <__hexnan+0x12e>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	603b      	str	r3, [r7, #0]
 800cf1c:	2005      	movs	r0, #5
 800cf1e:	b007      	add	sp, #28
 800cf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf24:	3501      	adds	r5, #1
 800cf26:	2d08      	cmp	r5, #8
 800cf28:	f10b 0b01 	add.w	fp, fp, #1
 800cf2c:	dd06      	ble.n	800cf3c <__hexnan+0x100>
 800cf2e:	4544      	cmp	r4, r8
 800cf30:	d9c1      	bls.n	800ceb6 <__hexnan+0x7a>
 800cf32:	2300      	movs	r3, #0
 800cf34:	2501      	movs	r5, #1
 800cf36:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf3a:	3c04      	subs	r4, #4
 800cf3c:	6822      	ldr	r2, [r4, #0]
 800cf3e:	f000 000f 	and.w	r0, r0, #15
 800cf42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cf46:	6020      	str	r0, [r4, #0]
 800cf48:	e7b5      	b.n	800ceb6 <__hexnan+0x7a>
 800cf4a:	2508      	movs	r5, #8
 800cf4c:	e7b3      	b.n	800ceb6 <__hexnan+0x7a>
 800cf4e:	9b01      	ldr	r3, [sp, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0dd      	beq.n	800cf10 <__hexnan+0xd4>
 800cf54:	f04f 32ff 	mov.w	r2, #4294967295
 800cf58:	f1c3 0320 	rsb	r3, r3, #32
 800cf5c:	40da      	lsrs	r2, r3
 800cf5e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cf62:	4013      	ands	r3, r2
 800cf64:	f846 3c04 	str.w	r3, [r6, #-4]
 800cf68:	e7d2      	b.n	800cf10 <__hexnan+0xd4>
 800cf6a:	3f04      	subs	r7, #4
 800cf6c:	e7d0      	b.n	800cf10 <__hexnan+0xd4>
 800cf6e:	2004      	movs	r0, #4
 800cf70:	e7d5      	b.n	800cf1e <__hexnan+0xe2>

0800cf72 <__ascii_mbtowc>:
 800cf72:	b082      	sub	sp, #8
 800cf74:	b901      	cbnz	r1, 800cf78 <__ascii_mbtowc+0x6>
 800cf76:	a901      	add	r1, sp, #4
 800cf78:	b142      	cbz	r2, 800cf8c <__ascii_mbtowc+0x1a>
 800cf7a:	b14b      	cbz	r3, 800cf90 <__ascii_mbtowc+0x1e>
 800cf7c:	7813      	ldrb	r3, [r2, #0]
 800cf7e:	600b      	str	r3, [r1, #0]
 800cf80:	7812      	ldrb	r2, [r2, #0]
 800cf82:	1e10      	subs	r0, r2, #0
 800cf84:	bf18      	it	ne
 800cf86:	2001      	movne	r0, #1
 800cf88:	b002      	add	sp, #8
 800cf8a:	4770      	bx	lr
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	e7fb      	b.n	800cf88 <__ascii_mbtowc+0x16>
 800cf90:	f06f 0001 	mvn.w	r0, #1
 800cf94:	e7f8      	b.n	800cf88 <__ascii_mbtowc+0x16>
	...

0800cf98 <_Balloc>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	69c6      	ldr	r6, [r0, #28]
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	460d      	mov	r5, r1
 800cfa0:	b976      	cbnz	r6, 800cfc0 <_Balloc+0x28>
 800cfa2:	2010      	movs	r0, #16
 800cfa4:	f7fc fb3e 	bl	8009624 <malloc>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	61e0      	str	r0, [r4, #28]
 800cfac:	b920      	cbnz	r0, 800cfb8 <_Balloc+0x20>
 800cfae:	216b      	movs	r1, #107	@ 0x6b
 800cfb0:	4b17      	ldr	r3, [pc, #92]	@ (800d010 <_Balloc+0x78>)
 800cfb2:	4818      	ldr	r0, [pc, #96]	@ (800d014 <_Balloc+0x7c>)
 800cfb4:	f001 f8b2 	bl	800e11c <__assert_func>
 800cfb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfbc:	6006      	str	r6, [r0, #0]
 800cfbe:	60c6      	str	r6, [r0, #12]
 800cfc0:	69e6      	ldr	r6, [r4, #28]
 800cfc2:	68f3      	ldr	r3, [r6, #12]
 800cfc4:	b183      	cbz	r3, 800cfe8 <_Balloc+0x50>
 800cfc6:	69e3      	ldr	r3, [r4, #28]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfce:	b9b8      	cbnz	r0, 800d000 <_Balloc+0x68>
 800cfd0:	2101      	movs	r1, #1
 800cfd2:	fa01 f605 	lsl.w	r6, r1, r5
 800cfd6:	1d72      	adds	r2, r6, #5
 800cfd8:	4620      	mov	r0, r4
 800cfda:	0092      	lsls	r2, r2, #2
 800cfdc:	f7fc fb0e 	bl	80095fc <_calloc_r>
 800cfe0:	b160      	cbz	r0, 800cffc <_Balloc+0x64>
 800cfe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cfe6:	e00e      	b.n	800d006 <_Balloc+0x6e>
 800cfe8:	2221      	movs	r2, #33	@ 0x21
 800cfea:	2104      	movs	r1, #4
 800cfec:	4620      	mov	r0, r4
 800cfee:	f7fc fb05 	bl	80095fc <_calloc_r>
 800cff2:	69e3      	ldr	r3, [r4, #28]
 800cff4:	60f0      	str	r0, [r6, #12]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1e4      	bne.n	800cfc6 <_Balloc+0x2e>
 800cffc:	2000      	movs	r0, #0
 800cffe:	bd70      	pop	{r4, r5, r6, pc}
 800d000:	6802      	ldr	r2, [r0, #0]
 800d002:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d006:	2300      	movs	r3, #0
 800d008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d00c:	e7f7      	b.n	800cffe <_Balloc+0x66>
 800d00e:	bf00      	nop
 800d010:	0800f908 	.word	0x0800f908
 800d014:	0800f9e8 	.word	0x0800f9e8

0800d018 <_Bfree>:
 800d018:	b570      	push	{r4, r5, r6, lr}
 800d01a:	69c6      	ldr	r6, [r0, #28]
 800d01c:	4605      	mov	r5, r0
 800d01e:	460c      	mov	r4, r1
 800d020:	b976      	cbnz	r6, 800d040 <_Bfree+0x28>
 800d022:	2010      	movs	r0, #16
 800d024:	f7fc fafe 	bl	8009624 <malloc>
 800d028:	4602      	mov	r2, r0
 800d02a:	61e8      	str	r0, [r5, #28]
 800d02c:	b920      	cbnz	r0, 800d038 <_Bfree+0x20>
 800d02e:	218f      	movs	r1, #143	@ 0x8f
 800d030:	4b08      	ldr	r3, [pc, #32]	@ (800d054 <_Bfree+0x3c>)
 800d032:	4809      	ldr	r0, [pc, #36]	@ (800d058 <_Bfree+0x40>)
 800d034:	f001 f872 	bl	800e11c <__assert_func>
 800d038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d03c:	6006      	str	r6, [r0, #0]
 800d03e:	60c6      	str	r6, [r0, #12]
 800d040:	b13c      	cbz	r4, 800d052 <_Bfree+0x3a>
 800d042:	69eb      	ldr	r3, [r5, #28]
 800d044:	6862      	ldr	r2, [r4, #4]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d04c:	6021      	str	r1, [r4, #0]
 800d04e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d052:	bd70      	pop	{r4, r5, r6, pc}
 800d054:	0800f908 	.word	0x0800f908
 800d058:	0800f9e8 	.word	0x0800f9e8

0800d05c <__multadd>:
 800d05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d060:	4607      	mov	r7, r0
 800d062:	460c      	mov	r4, r1
 800d064:	461e      	mov	r6, r3
 800d066:	2000      	movs	r0, #0
 800d068:	690d      	ldr	r5, [r1, #16]
 800d06a:	f101 0c14 	add.w	ip, r1, #20
 800d06e:	f8dc 3000 	ldr.w	r3, [ip]
 800d072:	3001      	adds	r0, #1
 800d074:	b299      	uxth	r1, r3
 800d076:	fb02 6101 	mla	r1, r2, r1, r6
 800d07a:	0c1e      	lsrs	r6, r3, #16
 800d07c:	0c0b      	lsrs	r3, r1, #16
 800d07e:	fb02 3306 	mla	r3, r2, r6, r3
 800d082:	b289      	uxth	r1, r1
 800d084:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d088:	4285      	cmp	r5, r0
 800d08a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d08e:	f84c 1b04 	str.w	r1, [ip], #4
 800d092:	dcec      	bgt.n	800d06e <__multadd+0x12>
 800d094:	b30e      	cbz	r6, 800d0da <__multadd+0x7e>
 800d096:	68a3      	ldr	r3, [r4, #8]
 800d098:	42ab      	cmp	r3, r5
 800d09a:	dc19      	bgt.n	800d0d0 <__multadd+0x74>
 800d09c:	6861      	ldr	r1, [r4, #4]
 800d09e:	4638      	mov	r0, r7
 800d0a0:	3101      	adds	r1, #1
 800d0a2:	f7ff ff79 	bl	800cf98 <_Balloc>
 800d0a6:	4680      	mov	r8, r0
 800d0a8:	b928      	cbnz	r0, 800d0b6 <__multadd+0x5a>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	21ba      	movs	r1, #186	@ 0xba
 800d0ae:	4b0c      	ldr	r3, [pc, #48]	@ (800d0e0 <__multadd+0x84>)
 800d0b0:	480c      	ldr	r0, [pc, #48]	@ (800d0e4 <__multadd+0x88>)
 800d0b2:	f001 f833 	bl	800e11c <__assert_func>
 800d0b6:	6922      	ldr	r2, [r4, #16]
 800d0b8:	f104 010c 	add.w	r1, r4, #12
 800d0bc:	3202      	adds	r2, #2
 800d0be:	0092      	lsls	r2, r2, #2
 800d0c0:	300c      	adds	r0, #12
 800d0c2:	f7fe fd70 	bl	800bba6 <memcpy>
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	f7ff ffa5 	bl	800d018 <_Bfree>
 800d0ce:	4644      	mov	r4, r8
 800d0d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d0d4:	3501      	adds	r5, #1
 800d0d6:	615e      	str	r6, [r3, #20]
 800d0d8:	6125      	str	r5, [r4, #16]
 800d0da:	4620      	mov	r0, r4
 800d0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e0:	0800f977 	.word	0x0800f977
 800d0e4:	0800f9e8 	.word	0x0800f9e8

0800d0e8 <__s2b>:
 800d0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0ec:	4615      	mov	r5, r2
 800d0ee:	2209      	movs	r2, #9
 800d0f0:	461f      	mov	r7, r3
 800d0f2:	3308      	adds	r3, #8
 800d0f4:	460c      	mov	r4, r1
 800d0f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0fa:	4606      	mov	r6, r0
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	2100      	movs	r1, #0
 800d100:	429a      	cmp	r2, r3
 800d102:	db09      	blt.n	800d118 <__s2b+0x30>
 800d104:	4630      	mov	r0, r6
 800d106:	f7ff ff47 	bl	800cf98 <_Balloc>
 800d10a:	b940      	cbnz	r0, 800d11e <__s2b+0x36>
 800d10c:	4602      	mov	r2, r0
 800d10e:	21d3      	movs	r1, #211	@ 0xd3
 800d110:	4b18      	ldr	r3, [pc, #96]	@ (800d174 <__s2b+0x8c>)
 800d112:	4819      	ldr	r0, [pc, #100]	@ (800d178 <__s2b+0x90>)
 800d114:	f001 f802 	bl	800e11c <__assert_func>
 800d118:	0052      	lsls	r2, r2, #1
 800d11a:	3101      	adds	r1, #1
 800d11c:	e7f0      	b.n	800d100 <__s2b+0x18>
 800d11e:	9b08      	ldr	r3, [sp, #32]
 800d120:	2d09      	cmp	r5, #9
 800d122:	6143      	str	r3, [r0, #20]
 800d124:	f04f 0301 	mov.w	r3, #1
 800d128:	6103      	str	r3, [r0, #16]
 800d12a:	dd16      	ble.n	800d15a <__s2b+0x72>
 800d12c:	f104 0909 	add.w	r9, r4, #9
 800d130:	46c8      	mov	r8, r9
 800d132:	442c      	add	r4, r5
 800d134:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d138:	4601      	mov	r1, r0
 800d13a:	220a      	movs	r2, #10
 800d13c:	4630      	mov	r0, r6
 800d13e:	3b30      	subs	r3, #48	@ 0x30
 800d140:	f7ff ff8c 	bl	800d05c <__multadd>
 800d144:	45a0      	cmp	r8, r4
 800d146:	d1f5      	bne.n	800d134 <__s2b+0x4c>
 800d148:	f1a5 0408 	sub.w	r4, r5, #8
 800d14c:	444c      	add	r4, r9
 800d14e:	1b2d      	subs	r5, r5, r4
 800d150:	1963      	adds	r3, r4, r5
 800d152:	42bb      	cmp	r3, r7
 800d154:	db04      	blt.n	800d160 <__s2b+0x78>
 800d156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d15a:	2509      	movs	r5, #9
 800d15c:	340a      	adds	r4, #10
 800d15e:	e7f6      	b.n	800d14e <__s2b+0x66>
 800d160:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d164:	4601      	mov	r1, r0
 800d166:	220a      	movs	r2, #10
 800d168:	4630      	mov	r0, r6
 800d16a:	3b30      	subs	r3, #48	@ 0x30
 800d16c:	f7ff ff76 	bl	800d05c <__multadd>
 800d170:	e7ee      	b.n	800d150 <__s2b+0x68>
 800d172:	bf00      	nop
 800d174:	0800f977 	.word	0x0800f977
 800d178:	0800f9e8 	.word	0x0800f9e8

0800d17c <__hi0bits>:
 800d17c:	4603      	mov	r3, r0
 800d17e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d182:	bf3a      	itte	cc
 800d184:	0403      	lslcc	r3, r0, #16
 800d186:	2010      	movcc	r0, #16
 800d188:	2000      	movcs	r0, #0
 800d18a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d18e:	bf3c      	itt	cc
 800d190:	021b      	lslcc	r3, r3, #8
 800d192:	3008      	addcc	r0, #8
 800d194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d198:	bf3c      	itt	cc
 800d19a:	011b      	lslcc	r3, r3, #4
 800d19c:	3004      	addcc	r0, #4
 800d19e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1a2:	bf3c      	itt	cc
 800d1a4:	009b      	lslcc	r3, r3, #2
 800d1a6:	3002      	addcc	r0, #2
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	db05      	blt.n	800d1b8 <__hi0bits+0x3c>
 800d1ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d1b0:	f100 0001 	add.w	r0, r0, #1
 800d1b4:	bf08      	it	eq
 800d1b6:	2020      	moveq	r0, #32
 800d1b8:	4770      	bx	lr

0800d1ba <__lo0bits>:
 800d1ba:	6803      	ldr	r3, [r0, #0]
 800d1bc:	4602      	mov	r2, r0
 800d1be:	f013 0007 	ands.w	r0, r3, #7
 800d1c2:	d00b      	beq.n	800d1dc <__lo0bits+0x22>
 800d1c4:	07d9      	lsls	r1, r3, #31
 800d1c6:	d421      	bmi.n	800d20c <__lo0bits+0x52>
 800d1c8:	0798      	lsls	r0, r3, #30
 800d1ca:	bf49      	itett	mi
 800d1cc:	085b      	lsrmi	r3, r3, #1
 800d1ce:	089b      	lsrpl	r3, r3, #2
 800d1d0:	2001      	movmi	r0, #1
 800d1d2:	6013      	strmi	r3, [r2, #0]
 800d1d4:	bf5c      	itt	pl
 800d1d6:	2002      	movpl	r0, #2
 800d1d8:	6013      	strpl	r3, [r2, #0]
 800d1da:	4770      	bx	lr
 800d1dc:	b299      	uxth	r1, r3
 800d1de:	b909      	cbnz	r1, 800d1e4 <__lo0bits+0x2a>
 800d1e0:	2010      	movs	r0, #16
 800d1e2:	0c1b      	lsrs	r3, r3, #16
 800d1e4:	b2d9      	uxtb	r1, r3
 800d1e6:	b909      	cbnz	r1, 800d1ec <__lo0bits+0x32>
 800d1e8:	3008      	adds	r0, #8
 800d1ea:	0a1b      	lsrs	r3, r3, #8
 800d1ec:	0719      	lsls	r1, r3, #28
 800d1ee:	bf04      	itt	eq
 800d1f0:	091b      	lsreq	r3, r3, #4
 800d1f2:	3004      	addeq	r0, #4
 800d1f4:	0799      	lsls	r1, r3, #30
 800d1f6:	bf04      	itt	eq
 800d1f8:	089b      	lsreq	r3, r3, #2
 800d1fa:	3002      	addeq	r0, #2
 800d1fc:	07d9      	lsls	r1, r3, #31
 800d1fe:	d403      	bmi.n	800d208 <__lo0bits+0x4e>
 800d200:	085b      	lsrs	r3, r3, #1
 800d202:	f100 0001 	add.w	r0, r0, #1
 800d206:	d003      	beq.n	800d210 <__lo0bits+0x56>
 800d208:	6013      	str	r3, [r2, #0]
 800d20a:	4770      	bx	lr
 800d20c:	2000      	movs	r0, #0
 800d20e:	4770      	bx	lr
 800d210:	2020      	movs	r0, #32
 800d212:	4770      	bx	lr

0800d214 <__i2b>:
 800d214:	b510      	push	{r4, lr}
 800d216:	460c      	mov	r4, r1
 800d218:	2101      	movs	r1, #1
 800d21a:	f7ff febd 	bl	800cf98 <_Balloc>
 800d21e:	4602      	mov	r2, r0
 800d220:	b928      	cbnz	r0, 800d22e <__i2b+0x1a>
 800d222:	f240 1145 	movw	r1, #325	@ 0x145
 800d226:	4b04      	ldr	r3, [pc, #16]	@ (800d238 <__i2b+0x24>)
 800d228:	4804      	ldr	r0, [pc, #16]	@ (800d23c <__i2b+0x28>)
 800d22a:	f000 ff77 	bl	800e11c <__assert_func>
 800d22e:	2301      	movs	r3, #1
 800d230:	6144      	str	r4, [r0, #20]
 800d232:	6103      	str	r3, [r0, #16]
 800d234:	bd10      	pop	{r4, pc}
 800d236:	bf00      	nop
 800d238:	0800f977 	.word	0x0800f977
 800d23c:	0800f9e8 	.word	0x0800f9e8

0800d240 <__multiply>:
 800d240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d244:	4614      	mov	r4, r2
 800d246:	690a      	ldr	r2, [r1, #16]
 800d248:	6923      	ldr	r3, [r4, #16]
 800d24a:	460f      	mov	r7, r1
 800d24c:	429a      	cmp	r2, r3
 800d24e:	bfa2      	ittt	ge
 800d250:	4623      	movge	r3, r4
 800d252:	460c      	movge	r4, r1
 800d254:	461f      	movge	r7, r3
 800d256:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d25a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d25e:	68a3      	ldr	r3, [r4, #8]
 800d260:	6861      	ldr	r1, [r4, #4]
 800d262:	eb0a 0609 	add.w	r6, sl, r9
 800d266:	42b3      	cmp	r3, r6
 800d268:	b085      	sub	sp, #20
 800d26a:	bfb8      	it	lt
 800d26c:	3101      	addlt	r1, #1
 800d26e:	f7ff fe93 	bl	800cf98 <_Balloc>
 800d272:	b930      	cbnz	r0, 800d282 <__multiply+0x42>
 800d274:	4602      	mov	r2, r0
 800d276:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d27a:	4b43      	ldr	r3, [pc, #268]	@ (800d388 <__multiply+0x148>)
 800d27c:	4843      	ldr	r0, [pc, #268]	@ (800d38c <__multiply+0x14c>)
 800d27e:	f000 ff4d 	bl	800e11c <__assert_func>
 800d282:	f100 0514 	add.w	r5, r0, #20
 800d286:	462b      	mov	r3, r5
 800d288:	2200      	movs	r2, #0
 800d28a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d28e:	4543      	cmp	r3, r8
 800d290:	d321      	bcc.n	800d2d6 <__multiply+0x96>
 800d292:	f107 0114 	add.w	r1, r7, #20
 800d296:	f104 0214 	add.w	r2, r4, #20
 800d29a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d29e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d2a2:	9302      	str	r3, [sp, #8]
 800d2a4:	1b13      	subs	r3, r2, r4
 800d2a6:	3b15      	subs	r3, #21
 800d2a8:	f023 0303 	bic.w	r3, r3, #3
 800d2ac:	3304      	adds	r3, #4
 800d2ae:	f104 0715 	add.w	r7, r4, #21
 800d2b2:	42ba      	cmp	r2, r7
 800d2b4:	bf38      	it	cc
 800d2b6:	2304      	movcc	r3, #4
 800d2b8:	9301      	str	r3, [sp, #4]
 800d2ba:	9b02      	ldr	r3, [sp, #8]
 800d2bc:	9103      	str	r1, [sp, #12]
 800d2be:	428b      	cmp	r3, r1
 800d2c0:	d80c      	bhi.n	800d2dc <__multiply+0x9c>
 800d2c2:	2e00      	cmp	r6, #0
 800d2c4:	dd03      	ble.n	800d2ce <__multiply+0x8e>
 800d2c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d05a      	beq.n	800d384 <__multiply+0x144>
 800d2ce:	6106      	str	r6, [r0, #16]
 800d2d0:	b005      	add	sp, #20
 800d2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d6:	f843 2b04 	str.w	r2, [r3], #4
 800d2da:	e7d8      	b.n	800d28e <__multiply+0x4e>
 800d2dc:	f8b1 a000 	ldrh.w	sl, [r1]
 800d2e0:	f1ba 0f00 	cmp.w	sl, #0
 800d2e4:	d023      	beq.n	800d32e <__multiply+0xee>
 800d2e6:	46a9      	mov	r9, r5
 800d2e8:	f04f 0c00 	mov.w	ip, #0
 800d2ec:	f104 0e14 	add.w	lr, r4, #20
 800d2f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2f4:	f8d9 3000 	ldr.w	r3, [r9]
 800d2f8:	fa1f fb87 	uxth.w	fp, r7
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	fb0a 330b 	mla	r3, sl, fp, r3
 800d302:	4463      	add	r3, ip
 800d304:	f8d9 c000 	ldr.w	ip, [r9]
 800d308:	0c3f      	lsrs	r7, r7, #16
 800d30a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d30e:	fb0a c707 	mla	r7, sl, r7, ip
 800d312:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d316:	b29b      	uxth	r3, r3
 800d318:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d31c:	4572      	cmp	r2, lr
 800d31e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d322:	f849 3b04 	str.w	r3, [r9], #4
 800d326:	d8e3      	bhi.n	800d2f0 <__multiply+0xb0>
 800d328:	9b01      	ldr	r3, [sp, #4]
 800d32a:	f845 c003 	str.w	ip, [r5, r3]
 800d32e:	9b03      	ldr	r3, [sp, #12]
 800d330:	3104      	adds	r1, #4
 800d332:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d336:	f1b9 0f00 	cmp.w	r9, #0
 800d33a:	d021      	beq.n	800d380 <__multiply+0x140>
 800d33c:	46ae      	mov	lr, r5
 800d33e:	f04f 0a00 	mov.w	sl, #0
 800d342:	682b      	ldr	r3, [r5, #0]
 800d344:	f104 0c14 	add.w	ip, r4, #20
 800d348:	f8bc b000 	ldrh.w	fp, [ip]
 800d34c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d350:	b29b      	uxth	r3, r3
 800d352:	fb09 770b 	mla	r7, r9, fp, r7
 800d356:	4457      	add	r7, sl
 800d358:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d35c:	f84e 3b04 	str.w	r3, [lr], #4
 800d360:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d364:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d368:	f8be 3000 	ldrh.w	r3, [lr]
 800d36c:	4562      	cmp	r2, ip
 800d36e:	fb09 330a 	mla	r3, r9, sl, r3
 800d372:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d376:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d37a:	d8e5      	bhi.n	800d348 <__multiply+0x108>
 800d37c:	9f01      	ldr	r7, [sp, #4]
 800d37e:	51eb      	str	r3, [r5, r7]
 800d380:	3504      	adds	r5, #4
 800d382:	e79a      	b.n	800d2ba <__multiply+0x7a>
 800d384:	3e01      	subs	r6, #1
 800d386:	e79c      	b.n	800d2c2 <__multiply+0x82>
 800d388:	0800f977 	.word	0x0800f977
 800d38c:	0800f9e8 	.word	0x0800f9e8

0800d390 <__pow5mult>:
 800d390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d394:	4615      	mov	r5, r2
 800d396:	f012 0203 	ands.w	r2, r2, #3
 800d39a:	4607      	mov	r7, r0
 800d39c:	460e      	mov	r6, r1
 800d39e:	d007      	beq.n	800d3b0 <__pow5mult+0x20>
 800d3a0:	4c25      	ldr	r4, [pc, #148]	@ (800d438 <__pow5mult+0xa8>)
 800d3a2:	3a01      	subs	r2, #1
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3aa:	f7ff fe57 	bl	800d05c <__multadd>
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	10ad      	asrs	r5, r5, #2
 800d3b2:	d03d      	beq.n	800d430 <__pow5mult+0xa0>
 800d3b4:	69fc      	ldr	r4, [r7, #28]
 800d3b6:	b97c      	cbnz	r4, 800d3d8 <__pow5mult+0x48>
 800d3b8:	2010      	movs	r0, #16
 800d3ba:	f7fc f933 	bl	8009624 <malloc>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	61f8      	str	r0, [r7, #28]
 800d3c2:	b928      	cbnz	r0, 800d3d0 <__pow5mult+0x40>
 800d3c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d3c8:	4b1c      	ldr	r3, [pc, #112]	@ (800d43c <__pow5mult+0xac>)
 800d3ca:	481d      	ldr	r0, [pc, #116]	@ (800d440 <__pow5mult+0xb0>)
 800d3cc:	f000 fea6 	bl	800e11c <__assert_func>
 800d3d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3d4:	6004      	str	r4, [r0, #0]
 800d3d6:	60c4      	str	r4, [r0, #12]
 800d3d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d3dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3e0:	b94c      	cbnz	r4, 800d3f6 <__pow5mult+0x66>
 800d3e2:	f240 2171 	movw	r1, #625	@ 0x271
 800d3e6:	4638      	mov	r0, r7
 800d3e8:	f7ff ff14 	bl	800d214 <__i2b>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3f4:	6003      	str	r3, [r0, #0]
 800d3f6:	f04f 0900 	mov.w	r9, #0
 800d3fa:	07eb      	lsls	r3, r5, #31
 800d3fc:	d50a      	bpl.n	800d414 <__pow5mult+0x84>
 800d3fe:	4631      	mov	r1, r6
 800d400:	4622      	mov	r2, r4
 800d402:	4638      	mov	r0, r7
 800d404:	f7ff ff1c 	bl	800d240 <__multiply>
 800d408:	4680      	mov	r8, r0
 800d40a:	4631      	mov	r1, r6
 800d40c:	4638      	mov	r0, r7
 800d40e:	f7ff fe03 	bl	800d018 <_Bfree>
 800d412:	4646      	mov	r6, r8
 800d414:	106d      	asrs	r5, r5, #1
 800d416:	d00b      	beq.n	800d430 <__pow5mult+0xa0>
 800d418:	6820      	ldr	r0, [r4, #0]
 800d41a:	b938      	cbnz	r0, 800d42c <__pow5mult+0x9c>
 800d41c:	4622      	mov	r2, r4
 800d41e:	4621      	mov	r1, r4
 800d420:	4638      	mov	r0, r7
 800d422:	f7ff ff0d 	bl	800d240 <__multiply>
 800d426:	6020      	str	r0, [r4, #0]
 800d428:	f8c0 9000 	str.w	r9, [r0]
 800d42c:	4604      	mov	r4, r0
 800d42e:	e7e4      	b.n	800d3fa <__pow5mult+0x6a>
 800d430:	4630      	mov	r0, r6
 800d432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d436:	bf00      	nop
 800d438:	0800fa44 	.word	0x0800fa44
 800d43c:	0800f908 	.word	0x0800f908
 800d440:	0800f9e8 	.word	0x0800f9e8

0800d444 <__lshift>:
 800d444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d448:	460c      	mov	r4, r1
 800d44a:	4607      	mov	r7, r0
 800d44c:	4691      	mov	r9, r2
 800d44e:	6923      	ldr	r3, [r4, #16]
 800d450:	6849      	ldr	r1, [r1, #4]
 800d452:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d456:	68a3      	ldr	r3, [r4, #8]
 800d458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d45c:	f108 0601 	add.w	r6, r8, #1
 800d460:	42b3      	cmp	r3, r6
 800d462:	db0b      	blt.n	800d47c <__lshift+0x38>
 800d464:	4638      	mov	r0, r7
 800d466:	f7ff fd97 	bl	800cf98 <_Balloc>
 800d46a:	4605      	mov	r5, r0
 800d46c:	b948      	cbnz	r0, 800d482 <__lshift+0x3e>
 800d46e:	4602      	mov	r2, r0
 800d470:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d474:	4b27      	ldr	r3, [pc, #156]	@ (800d514 <__lshift+0xd0>)
 800d476:	4828      	ldr	r0, [pc, #160]	@ (800d518 <__lshift+0xd4>)
 800d478:	f000 fe50 	bl	800e11c <__assert_func>
 800d47c:	3101      	adds	r1, #1
 800d47e:	005b      	lsls	r3, r3, #1
 800d480:	e7ee      	b.n	800d460 <__lshift+0x1c>
 800d482:	2300      	movs	r3, #0
 800d484:	f100 0114 	add.w	r1, r0, #20
 800d488:	f100 0210 	add.w	r2, r0, #16
 800d48c:	4618      	mov	r0, r3
 800d48e:	4553      	cmp	r3, sl
 800d490:	db33      	blt.n	800d4fa <__lshift+0xb6>
 800d492:	6920      	ldr	r0, [r4, #16]
 800d494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d498:	f104 0314 	add.w	r3, r4, #20
 800d49c:	f019 091f 	ands.w	r9, r9, #31
 800d4a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4a8:	d02b      	beq.n	800d502 <__lshift+0xbe>
 800d4aa:	468a      	mov	sl, r1
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f1c9 0e20 	rsb	lr, r9, #32
 800d4b2:	6818      	ldr	r0, [r3, #0]
 800d4b4:	fa00 f009 	lsl.w	r0, r0, r9
 800d4b8:	4310      	orrs	r0, r2
 800d4ba:	f84a 0b04 	str.w	r0, [sl], #4
 800d4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4c2:	459c      	cmp	ip, r3
 800d4c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4c8:	d8f3      	bhi.n	800d4b2 <__lshift+0x6e>
 800d4ca:	ebac 0304 	sub.w	r3, ip, r4
 800d4ce:	3b15      	subs	r3, #21
 800d4d0:	f023 0303 	bic.w	r3, r3, #3
 800d4d4:	3304      	adds	r3, #4
 800d4d6:	f104 0015 	add.w	r0, r4, #21
 800d4da:	4584      	cmp	ip, r0
 800d4dc:	bf38      	it	cc
 800d4de:	2304      	movcc	r3, #4
 800d4e0:	50ca      	str	r2, [r1, r3]
 800d4e2:	b10a      	cbz	r2, 800d4e8 <__lshift+0xa4>
 800d4e4:	f108 0602 	add.w	r6, r8, #2
 800d4e8:	3e01      	subs	r6, #1
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	612e      	str	r6, [r5, #16]
 800d4f0:	f7ff fd92 	bl	800d018 <_Bfree>
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4fe:	3301      	adds	r3, #1
 800d500:	e7c5      	b.n	800d48e <__lshift+0x4a>
 800d502:	3904      	subs	r1, #4
 800d504:	f853 2b04 	ldr.w	r2, [r3], #4
 800d508:	459c      	cmp	ip, r3
 800d50a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d50e:	d8f9      	bhi.n	800d504 <__lshift+0xc0>
 800d510:	e7ea      	b.n	800d4e8 <__lshift+0xa4>
 800d512:	bf00      	nop
 800d514:	0800f977 	.word	0x0800f977
 800d518:	0800f9e8 	.word	0x0800f9e8

0800d51c <__mcmp>:
 800d51c:	4603      	mov	r3, r0
 800d51e:	690a      	ldr	r2, [r1, #16]
 800d520:	6900      	ldr	r0, [r0, #16]
 800d522:	b530      	push	{r4, r5, lr}
 800d524:	1a80      	subs	r0, r0, r2
 800d526:	d10e      	bne.n	800d546 <__mcmp+0x2a>
 800d528:	3314      	adds	r3, #20
 800d52a:	3114      	adds	r1, #20
 800d52c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d530:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d534:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d538:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d53c:	4295      	cmp	r5, r2
 800d53e:	d003      	beq.n	800d548 <__mcmp+0x2c>
 800d540:	d205      	bcs.n	800d54e <__mcmp+0x32>
 800d542:	f04f 30ff 	mov.w	r0, #4294967295
 800d546:	bd30      	pop	{r4, r5, pc}
 800d548:	42a3      	cmp	r3, r4
 800d54a:	d3f3      	bcc.n	800d534 <__mcmp+0x18>
 800d54c:	e7fb      	b.n	800d546 <__mcmp+0x2a>
 800d54e:	2001      	movs	r0, #1
 800d550:	e7f9      	b.n	800d546 <__mcmp+0x2a>
	...

0800d554 <__mdiff>:
 800d554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d558:	4689      	mov	r9, r1
 800d55a:	4606      	mov	r6, r0
 800d55c:	4611      	mov	r1, r2
 800d55e:	4648      	mov	r0, r9
 800d560:	4614      	mov	r4, r2
 800d562:	f7ff ffdb 	bl	800d51c <__mcmp>
 800d566:	1e05      	subs	r5, r0, #0
 800d568:	d112      	bne.n	800d590 <__mdiff+0x3c>
 800d56a:	4629      	mov	r1, r5
 800d56c:	4630      	mov	r0, r6
 800d56e:	f7ff fd13 	bl	800cf98 <_Balloc>
 800d572:	4602      	mov	r2, r0
 800d574:	b928      	cbnz	r0, 800d582 <__mdiff+0x2e>
 800d576:	f240 2137 	movw	r1, #567	@ 0x237
 800d57a:	4b3e      	ldr	r3, [pc, #248]	@ (800d674 <__mdiff+0x120>)
 800d57c:	483e      	ldr	r0, [pc, #248]	@ (800d678 <__mdiff+0x124>)
 800d57e:	f000 fdcd 	bl	800e11c <__assert_func>
 800d582:	2301      	movs	r3, #1
 800d584:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d588:	4610      	mov	r0, r2
 800d58a:	b003      	add	sp, #12
 800d58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d590:	bfbc      	itt	lt
 800d592:	464b      	movlt	r3, r9
 800d594:	46a1      	movlt	r9, r4
 800d596:	4630      	mov	r0, r6
 800d598:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d59c:	bfba      	itte	lt
 800d59e:	461c      	movlt	r4, r3
 800d5a0:	2501      	movlt	r5, #1
 800d5a2:	2500      	movge	r5, #0
 800d5a4:	f7ff fcf8 	bl	800cf98 <_Balloc>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	b918      	cbnz	r0, 800d5b4 <__mdiff+0x60>
 800d5ac:	f240 2145 	movw	r1, #581	@ 0x245
 800d5b0:	4b30      	ldr	r3, [pc, #192]	@ (800d674 <__mdiff+0x120>)
 800d5b2:	e7e3      	b.n	800d57c <__mdiff+0x28>
 800d5b4:	f100 0b14 	add.w	fp, r0, #20
 800d5b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d5bc:	f109 0310 	add.w	r3, r9, #16
 800d5c0:	60c5      	str	r5, [r0, #12]
 800d5c2:	f04f 0c00 	mov.w	ip, #0
 800d5c6:	f109 0514 	add.w	r5, r9, #20
 800d5ca:	46d9      	mov	r9, fp
 800d5cc:	6926      	ldr	r6, [r4, #16]
 800d5ce:	f104 0e14 	add.w	lr, r4, #20
 800d5d2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d5d6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d5da:	9301      	str	r3, [sp, #4]
 800d5dc:	9b01      	ldr	r3, [sp, #4]
 800d5de:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d5e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d5e6:	b281      	uxth	r1, r0
 800d5e8:	9301      	str	r3, [sp, #4]
 800d5ea:	fa1f f38a 	uxth.w	r3, sl
 800d5ee:	1a5b      	subs	r3, r3, r1
 800d5f0:	0c00      	lsrs	r0, r0, #16
 800d5f2:	4463      	add	r3, ip
 800d5f4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d5f8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d602:	4576      	cmp	r6, lr
 800d604:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d608:	f849 3b04 	str.w	r3, [r9], #4
 800d60c:	d8e6      	bhi.n	800d5dc <__mdiff+0x88>
 800d60e:	1b33      	subs	r3, r6, r4
 800d610:	3b15      	subs	r3, #21
 800d612:	f023 0303 	bic.w	r3, r3, #3
 800d616:	3415      	adds	r4, #21
 800d618:	3304      	adds	r3, #4
 800d61a:	42a6      	cmp	r6, r4
 800d61c:	bf38      	it	cc
 800d61e:	2304      	movcc	r3, #4
 800d620:	441d      	add	r5, r3
 800d622:	445b      	add	r3, fp
 800d624:	461e      	mov	r6, r3
 800d626:	462c      	mov	r4, r5
 800d628:	4544      	cmp	r4, r8
 800d62a:	d30e      	bcc.n	800d64a <__mdiff+0xf6>
 800d62c:	f108 0103 	add.w	r1, r8, #3
 800d630:	1b49      	subs	r1, r1, r5
 800d632:	f021 0103 	bic.w	r1, r1, #3
 800d636:	3d03      	subs	r5, #3
 800d638:	45a8      	cmp	r8, r5
 800d63a:	bf38      	it	cc
 800d63c:	2100      	movcc	r1, #0
 800d63e:	440b      	add	r3, r1
 800d640:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d644:	b199      	cbz	r1, 800d66e <__mdiff+0x11a>
 800d646:	6117      	str	r7, [r2, #16]
 800d648:	e79e      	b.n	800d588 <__mdiff+0x34>
 800d64a:	46e6      	mov	lr, ip
 800d64c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d650:	fa1f fc81 	uxth.w	ip, r1
 800d654:	44f4      	add	ip, lr
 800d656:	0c08      	lsrs	r0, r1, #16
 800d658:	4471      	add	r1, lr
 800d65a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d65e:	b289      	uxth	r1, r1
 800d660:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d664:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d668:	f846 1b04 	str.w	r1, [r6], #4
 800d66c:	e7dc      	b.n	800d628 <__mdiff+0xd4>
 800d66e:	3f01      	subs	r7, #1
 800d670:	e7e6      	b.n	800d640 <__mdiff+0xec>
 800d672:	bf00      	nop
 800d674:	0800f977 	.word	0x0800f977
 800d678:	0800f9e8 	.word	0x0800f9e8

0800d67c <__ulp>:
 800d67c:	4b0e      	ldr	r3, [pc, #56]	@ (800d6b8 <__ulp+0x3c>)
 800d67e:	400b      	ands	r3, r1
 800d680:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d684:	2b00      	cmp	r3, #0
 800d686:	dc08      	bgt.n	800d69a <__ulp+0x1e>
 800d688:	425b      	negs	r3, r3
 800d68a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d68e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d692:	da04      	bge.n	800d69e <__ulp+0x22>
 800d694:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d698:	4113      	asrs	r3, r2
 800d69a:	2200      	movs	r2, #0
 800d69c:	e008      	b.n	800d6b0 <__ulp+0x34>
 800d69e:	f1a2 0314 	sub.w	r3, r2, #20
 800d6a2:	2b1e      	cmp	r3, #30
 800d6a4:	bfd6      	itet	le
 800d6a6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d6aa:	2201      	movgt	r2, #1
 800d6ac:	40da      	lsrle	r2, r3
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	4610      	mov	r0, r2
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	7ff00000 	.word	0x7ff00000

0800d6bc <__b2d>:
 800d6bc:	6902      	ldr	r2, [r0, #16]
 800d6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c0:	f100 0614 	add.w	r6, r0, #20
 800d6c4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d6c8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d6cc:	4f1e      	ldr	r7, [pc, #120]	@ (800d748 <__b2d+0x8c>)
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f7ff fd54 	bl	800d17c <__hi0bits>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	f1c0 0020 	rsb	r0, r0, #32
 800d6da:	2b0a      	cmp	r3, #10
 800d6dc:	f1a2 0504 	sub.w	r5, r2, #4
 800d6e0:	6008      	str	r0, [r1, #0]
 800d6e2:	dc12      	bgt.n	800d70a <__b2d+0x4e>
 800d6e4:	42ae      	cmp	r6, r5
 800d6e6:	bf2c      	ite	cs
 800d6e8:	2200      	movcs	r2, #0
 800d6ea:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d6ee:	f1c3 0c0b 	rsb	ip, r3, #11
 800d6f2:	3315      	adds	r3, #21
 800d6f4:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d6f8:	fa04 f303 	lsl.w	r3, r4, r3
 800d6fc:	fa22 f20c 	lsr.w	r2, r2, ip
 800d700:	ea4e 0107 	orr.w	r1, lr, r7
 800d704:	431a      	orrs	r2, r3
 800d706:	4610      	mov	r0, r2
 800d708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d70a:	42ae      	cmp	r6, r5
 800d70c:	bf36      	itet	cc
 800d70e:	f1a2 0508 	subcc.w	r5, r2, #8
 800d712:	2200      	movcs	r2, #0
 800d714:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d718:	3b0b      	subs	r3, #11
 800d71a:	d012      	beq.n	800d742 <__b2d+0x86>
 800d71c:	f1c3 0720 	rsb	r7, r3, #32
 800d720:	fa22 f107 	lsr.w	r1, r2, r7
 800d724:	409c      	lsls	r4, r3
 800d726:	430c      	orrs	r4, r1
 800d728:	42b5      	cmp	r5, r6
 800d72a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d72e:	bf94      	ite	ls
 800d730:	2400      	movls	r4, #0
 800d732:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d736:	409a      	lsls	r2, r3
 800d738:	40fc      	lsrs	r4, r7
 800d73a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d73e:	4322      	orrs	r2, r4
 800d740:	e7e1      	b.n	800d706 <__b2d+0x4a>
 800d742:	ea44 0107 	orr.w	r1, r4, r7
 800d746:	e7de      	b.n	800d706 <__b2d+0x4a>
 800d748:	3ff00000 	.word	0x3ff00000

0800d74c <__d2b>:
 800d74c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d750:	2101      	movs	r1, #1
 800d752:	4690      	mov	r8, r2
 800d754:	4699      	mov	r9, r3
 800d756:	9e08      	ldr	r6, [sp, #32]
 800d758:	f7ff fc1e 	bl	800cf98 <_Balloc>
 800d75c:	4604      	mov	r4, r0
 800d75e:	b930      	cbnz	r0, 800d76e <__d2b+0x22>
 800d760:	4602      	mov	r2, r0
 800d762:	f240 310f 	movw	r1, #783	@ 0x30f
 800d766:	4b23      	ldr	r3, [pc, #140]	@ (800d7f4 <__d2b+0xa8>)
 800d768:	4823      	ldr	r0, [pc, #140]	@ (800d7f8 <__d2b+0xac>)
 800d76a:	f000 fcd7 	bl	800e11c <__assert_func>
 800d76e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d772:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d776:	b10d      	cbz	r5, 800d77c <__d2b+0x30>
 800d778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d77c:	9301      	str	r3, [sp, #4]
 800d77e:	f1b8 0300 	subs.w	r3, r8, #0
 800d782:	d024      	beq.n	800d7ce <__d2b+0x82>
 800d784:	4668      	mov	r0, sp
 800d786:	9300      	str	r3, [sp, #0]
 800d788:	f7ff fd17 	bl	800d1ba <__lo0bits>
 800d78c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d790:	b1d8      	cbz	r0, 800d7ca <__d2b+0x7e>
 800d792:	f1c0 0320 	rsb	r3, r0, #32
 800d796:	fa02 f303 	lsl.w	r3, r2, r3
 800d79a:	430b      	orrs	r3, r1
 800d79c:	40c2      	lsrs	r2, r0
 800d79e:	6163      	str	r3, [r4, #20]
 800d7a0:	9201      	str	r2, [sp, #4]
 800d7a2:	9b01      	ldr	r3, [sp, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	bf0c      	ite	eq
 800d7a8:	2201      	moveq	r2, #1
 800d7aa:	2202      	movne	r2, #2
 800d7ac:	61a3      	str	r3, [r4, #24]
 800d7ae:	6122      	str	r2, [r4, #16]
 800d7b0:	b1ad      	cbz	r5, 800d7de <__d2b+0x92>
 800d7b2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d7b6:	4405      	add	r5, r0
 800d7b8:	6035      	str	r5, [r6, #0]
 800d7ba:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d7be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7c0:	6018      	str	r0, [r3, #0]
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	b002      	add	sp, #8
 800d7c6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d7ca:	6161      	str	r1, [r4, #20]
 800d7cc:	e7e9      	b.n	800d7a2 <__d2b+0x56>
 800d7ce:	a801      	add	r0, sp, #4
 800d7d0:	f7ff fcf3 	bl	800d1ba <__lo0bits>
 800d7d4:	9b01      	ldr	r3, [sp, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	6163      	str	r3, [r4, #20]
 800d7da:	3020      	adds	r0, #32
 800d7dc:	e7e7      	b.n	800d7ae <__d2b+0x62>
 800d7de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d7e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7e6:	6030      	str	r0, [r6, #0]
 800d7e8:	6918      	ldr	r0, [r3, #16]
 800d7ea:	f7ff fcc7 	bl	800d17c <__hi0bits>
 800d7ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7f2:	e7e4      	b.n	800d7be <__d2b+0x72>
 800d7f4:	0800f977 	.word	0x0800f977
 800d7f8:	0800f9e8 	.word	0x0800f9e8

0800d7fc <__ratio>:
 800d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d800:	b085      	sub	sp, #20
 800d802:	e9cd 1000 	strd	r1, r0, [sp]
 800d806:	a902      	add	r1, sp, #8
 800d808:	f7ff ff58 	bl	800d6bc <__b2d>
 800d80c:	468b      	mov	fp, r1
 800d80e:	4606      	mov	r6, r0
 800d810:	460f      	mov	r7, r1
 800d812:	9800      	ldr	r0, [sp, #0]
 800d814:	a903      	add	r1, sp, #12
 800d816:	f7ff ff51 	bl	800d6bc <__b2d>
 800d81a:	460d      	mov	r5, r1
 800d81c:	9b01      	ldr	r3, [sp, #4]
 800d81e:	4689      	mov	r9, r1
 800d820:	6919      	ldr	r1, [r3, #16]
 800d822:	9b00      	ldr	r3, [sp, #0]
 800d824:	4604      	mov	r4, r0
 800d826:	691b      	ldr	r3, [r3, #16]
 800d828:	4630      	mov	r0, r6
 800d82a:	1ac9      	subs	r1, r1, r3
 800d82c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d830:	1a9b      	subs	r3, r3, r2
 800d832:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d836:	2b00      	cmp	r3, #0
 800d838:	bfcd      	iteet	gt
 800d83a:	463a      	movgt	r2, r7
 800d83c:	462a      	movle	r2, r5
 800d83e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d842:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d846:	bfd8      	it	le
 800d848:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d84c:	464b      	mov	r3, r9
 800d84e:	4622      	mov	r2, r4
 800d850:	4659      	mov	r1, fp
 800d852:	f7f2 ff83 	bl	800075c <__aeabi_ddiv>
 800d856:	b005      	add	sp, #20
 800d858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d85c <__copybits>:
 800d85c:	3901      	subs	r1, #1
 800d85e:	b570      	push	{r4, r5, r6, lr}
 800d860:	1149      	asrs	r1, r1, #5
 800d862:	6914      	ldr	r4, [r2, #16]
 800d864:	3101      	adds	r1, #1
 800d866:	f102 0314 	add.w	r3, r2, #20
 800d86a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d86e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d872:	1f05      	subs	r5, r0, #4
 800d874:	42a3      	cmp	r3, r4
 800d876:	d30c      	bcc.n	800d892 <__copybits+0x36>
 800d878:	1aa3      	subs	r3, r4, r2
 800d87a:	3b11      	subs	r3, #17
 800d87c:	f023 0303 	bic.w	r3, r3, #3
 800d880:	3211      	adds	r2, #17
 800d882:	42a2      	cmp	r2, r4
 800d884:	bf88      	it	hi
 800d886:	2300      	movhi	r3, #0
 800d888:	4418      	add	r0, r3
 800d88a:	2300      	movs	r3, #0
 800d88c:	4288      	cmp	r0, r1
 800d88e:	d305      	bcc.n	800d89c <__copybits+0x40>
 800d890:	bd70      	pop	{r4, r5, r6, pc}
 800d892:	f853 6b04 	ldr.w	r6, [r3], #4
 800d896:	f845 6f04 	str.w	r6, [r5, #4]!
 800d89a:	e7eb      	b.n	800d874 <__copybits+0x18>
 800d89c:	f840 3b04 	str.w	r3, [r0], #4
 800d8a0:	e7f4      	b.n	800d88c <__copybits+0x30>

0800d8a2 <__any_on>:
 800d8a2:	f100 0214 	add.w	r2, r0, #20
 800d8a6:	6900      	ldr	r0, [r0, #16]
 800d8a8:	114b      	asrs	r3, r1, #5
 800d8aa:	4298      	cmp	r0, r3
 800d8ac:	b510      	push	{r4, lr}
 800d8ae:	db11      	blt.n	800d8d4 <__any_on+0x32>
 800d8b0:	dd0a      	ble.n	800d8c8 <__any_on+0x26>
 800d8b2:	f011 011f 	ands.w	r1, r1, #31
 800d8b6:	d007      	beq.n	800d8c8 <__any_on+0x26>
 800d8b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8bc:	fa24 f001 	lsr.w	r0, r4, r1
 800d8c0:	fa00 f101 	lsl.w	r1, r0, r1
 800d8c4:	428c      	cmp	r4, r1
 800d8c6:	d10b      	bne.n	800d8e0 <__any_on+0x3e>
 800d8c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d803      	bhi.n	800d8d8 <__any_on+0x36>
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	bd10      	pop	{r4, pc}
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	e7f7      	b.n	800d8c8 <__any_on+0x26>
 800d8d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d8dc:	2900      	cmp	r1, #0
 800d8de:	d0f5      	beq.n	800d8cc <__any_on+0x2a>
 800d8e0:	2001      	movs	r0, #1
 800d8e2:	e7f6      	b.n	800d8d2 <__any_on+0x30>

0800d8e4 <_malloc_usable_size_r>:
 800d8e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8e8:	1f18      	subs	r0, r3, #4
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	bfbc      	itt	lt
 800d8ee:	580b      	ldrlt	r3, [r1, r0]
 800d8f0:	18c0      	addlt	r0, r0, r3
 800d8f2:	4770      	bx	lr

0800d8f4 <__ascii_wctomb>:
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	4608      	mov	r0, r1
 800d8f8:	b141      	cbz	r1, 800d90c <__ascii_wctomb+0x18>
 800d8fa:	2aff      	cmp	r2, #255	@ 0xff
 800d8fc:	d904      	bls.n	800d908 <__ascii_wctomb+0x14>
 800d8fe:	228a      	movs	r2, #138	@ 0x8a
 800d900:	f04f 30ff 	mov.w	r0, #4294967295
 800d904:	601a      	str	r2, [r3, #0]
 800d906:	4770      	bx	lr
 800d908:	2001      	movs	r0, #1
 800d90a:	700a      	strb	r2, [r1, #0]
 800d90c:	4770      	bx	lr

0800d90e <__ssputs_r>:
 800d90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d912:	461f      	mov	r7, r3
 800d914:	688e      	ldr	r6, [r1, #8]
 800d916:	4682      	mov	sl, r0
 800d918:	42be      	cmp	r6, r7
 800d91a:	460c      	mov	r4, r1
 800d91c:	4690      	mov	r8, r2
 800d91e:	680b      	ldr	r3, [r1, #0]
 800d920:	d82d      	bhi.n	800d97e <__ssputs_r+0x70>
 800d922:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d926:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d92a:	d026      	beq.n	800d97a <__ssputs_r+0x6c>
 800d92c:	6965      	ldr	r5, [r4, #20]
 800d92e:	6909      	ldr	r1, [r1, #16]
 800d930:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d934:	eba3 0901 	sub.w	r9, r3, r1
 800d938:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d93c:	1c7b      	adds	r3, r7, #1
 800d93e:	444b      	add	r3, r9
 800d940:	106d      	asrs	r5, r5, #1
 800d942:	429d      	cmp	r5, r3
 800d944:	bf38      	it	cc
 800d946:	461d      	movcc	r5, r3
 800d948:	0553      	lsls	r3, r2, #21
 800d94a:	d527      	bpl.n	800d99c <__ssputs_r+0x8e>
 800d94c:	4629      	mov	r1, r5
 800d94e:	f7fb fe9b 	bl	8009688 <_malloc_r>
 800d952:	4606      	mov	r6, r0
 800d954:	b360      	cbz	r0, 800d9b0 <__ssputs_r+0xa2>
 800d956:	464a      	mov	r2, r9
 800d958:	6921      	ldr	r1, [r4, #16]
 800d95a:	f7fe f924 	bl	800bba6 <memcpy>
 800d95e:	89a3      	ldrh	r3, [r4, #12]
 800d960:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d968:	81a3      	strh	r3, [r4, #12]
 800d96a:	6126      	str	r6, [r4, #16]
 800d96c:	444e      	add	r6, r9
 800d96e:	6026      	str	r6, [r4, #0]
 800d970:	463e      	mov	r6, r7
 800d972:	6165      	str	r5, [r4, #20]
 800d974:	eba5 0509 	sub.w	r5, r5, r9
 800d978:	60a5      	str	r5, [r4, #8]
 800d97a:	42be      	cmp	r6, r7
 800d97c:	d900      	bls.n	800d980 <__ssputs_r+0x72>
 800d97e:	463e      	mov	r6, r7
 800d980:	4632      	mov	r2, r6
 800d982:	4641      	mov	r1, r8
 800d984:	6820      	ldr	r0, [r4, #0]
 800d986:	f000 fb8c 	bl	800e0a2 <memmove>
 800d98a:	2000      	movs	r0, #0
 800d98c:	68a3      	ldr	r3, [r4, #8]
 800d98e:	1b9b      	subs	r3, r3, r6
 800d990:	60a3      	str	r3, [r4, #8]
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	4433      	add	r3, r6
 800d996:	6023      	str	r3, [r4, #0]
 800d998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d99c:	462a      	mov	r2, r5
 800d99e:	f7fb ff07 	bl	80097b0 <_realloc_r>
 800d9a2:	4606      	mov	r6, r0
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	d1e0      	bne.n	800d96a <__ssputs_r+0x5c>
 800d9a8:	4650      	mov	r0, sl
 800d9aa:	6921      	ldr	r1, [r4, #16]
 800d9ac:	f7fe ff60 	bl	800c870 <_free_r>
 800d9b0:	230c      	movs	r3, #12
 800d9b2:	f8ca 3000 	str.w	r3, [sl]
 800d9b6:	89a3      	ldrh	r3, [r4, #12]
 800d9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9c0:	81a3      	strh	r3, [r4, #12]
 800d9c2:	e7e9      	b.n	800d998 <__ssputs_r+0x8a>

0800d9c4 <_svfiprintf_r>:
 800d9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c8:	4698      	mov	r8, r3
 800d9ca:	898b      	ldrh	r3, [r1, #12]
 800d9cc:	4607      	mov	r7, r0
 800d9ce:	061b      	lsls	r3, r3, #24
 800d9d0:	460d      	mov	r5, r1
 800d9d2:	4614      	mov	r4, r2
 800d9d4:	b09d      	sub	sp, #116	@ 0x74
 800d9d6:	d510      	bpl.n	800d9fa <_svfiprintf_r+0x36>
 800d9d8:	690b      	ldr	r3, [r1, #16]
 800d9da:	b973      	cbnz	r3, 800d9fa <_svfiprintf_r+0x36>
 800d9dc:	2140      	movs	r1, #64	@ 0x40
 800d9de:	f7fb fe53 	bl	8009688 <_malloc_r>
 800d9e2:	6028      	str	r0, [r5, #0]
 800d9e4:	6128      	str	r0, [r5, #16]
 800d9e6:	b930      	cbnz	r0, 800d9f6 <_svfiprintf_r+0x32>
 800d9e8:	230c      	movs	r3, #12
 800d9ea:	603b      	str	r3, [r7, #0]
 800d9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f0:	b01d      	add	sp, #116	@ 0x74
 800d9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f6:	2340      	movs	r3, #64	@ 0x40
 800d9f8:	616b      	str	r3, [r5, #20]
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9fe:	2320      	movs	r3, #32
 800da00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da04:	2330      	movs	r3, #48	@ 0x30
 800da06:	f04f 0901 	mov.w	r9, #1
 800da0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800da0e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800dba8 <_svfiprintf_r+0x1e4>
 800da12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da16:	4623      	mov	r3, r4
 800da18:	469a      	mov	sl, r3
 800da1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da1e:	b10a      	cbz	r2, 800da24 <_svfiprintf_r+0x60>
 800da20:	2a25      	cmp	r2, #37	@ 0x25
 800da22:	d1f9      	bne.n	800da18 <_svfiprintf_r+0x54>
 800da24:	ebba 0b04 	subs.w	fp, sl, r4
 800da28:	d00b      	beq.n	800da42 <_svfiprintf_r+0x7e>
 800da2a:	465b      	mov	r3, fp
 800da2c:	4622      	mov	r2, r4
 800da2e:	4629      	mov	r1, r5
 800da30:	4638      	mov	r0, r7
 800da32:	f7ff ff6c 	bl	800d90e <__ssputs_r>
 800da36:	3001      	adds	r0, #1
 800da38:	f000 80a7 	beq.w	800db8a <_svfiprintf_r+0x1c6>
 800da3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da3e:	445a      	add	r2, fp
 800da40:	9209      	str	r2, [sp, #36]	@ 0x24
 800da42:	f89a 3000 	ldrb.w	r3, [sl]
 800da46:	2b00      	cmp	r3, #0
 800da48:	f000 809f 	beq.w	800db8a <_svfiprintf_r+0x1c6>
 800da4c:	2300      	movs	r3, #0
 800da4e:	f04f 32ff 	mov.w	r2, #4294967295
 800da52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da56:	f10a 0a01 	add.w	sl, sl, #1
 800da5a:	9304      	str	r3, [sp, #16]
 800da5c:	9307      	str	r3, [sp, #28]
 800da5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da62:	931a      	str	r3, [sp, #104]	@ 0x68
 800da64:	4654      	mov	r4, sl
 800da66:	2205      	movs	r2, #5
 800da68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da6c:	484e      	ldr	r0, [pc, #312]	@ (800dba8 <_svfiprintf_r+0x1e4>)
 800da6e:	f7fe f88c 	bl	800bb8a <memchr>
 800da72:	9a04      	ldr	r2, [sp, #16]
 800da74:	b9d8      	cbnz	r0, 800daae <_svfiprintf_r+0xea>
 800da76:	06d0      	lsls	r0, r2, #27
 800da78:	bf44      	itt	mi
 800da7a:	2320      	movmi	r3, #32
 800da7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da80:	0711      	lsls	r1, r2, #28
 800da82:	bf44      	itt	mi
 800da84:	232b      	movmi	r3, #43	@ 0x2b
 800da86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da8a:	f89a 3000 	ldrb.w	r3, [sl]
 800da8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800da90:	d015      	beq.n	800dabe <_svfiprintf_r+0xfa>
 800da92:	4654      	mov	r4, sl
 800da94:	2000      	movs	r0, #0
 800da96:	f04f 0c0a 	mov.w	ip, #10
 800da9a:	9a07      	ldr	r2, [sp, #28]
 800da9c:	4621      	mov	r1, r4
 800da9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daa2:	3b30      	subs	r3, #48	@ 0x30
 800daa4:	2b09      	cmp	r3, #9
 800daa6:	d94b      	bls.n	800db40 <_svfiprintf_r+0x17c>
 800daa8:	b1b0      	cbz	r0, 800dad8 <_svfiprintf_r+0x114>
 800daaa:	9207      	str	r2, [sp, #28]
 800daac:	e014      	b.n	800dad8 <_svfiprintf_r+0x114>
 800daae:	eba0 0308 	sub.w	r3, r0, r8
 800dab2:	fa09 f303 	lsl.w	r3, r9, r3
 800dab6:	4313      	orrs	r3, r2
 800dab8:	46a2      	mov	sl, r4
 800daba:	9304      	str	r3, [sp, #16]
 800dabc:	e7d2      	b.n	800da64 <_svfiprintf_r+0xa0>
 800dabe:	9b03      	ldr	r3, [sp, #12]
 800dac0:	1d19      	adds	r1, r3, #4
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	9103      	str	r1, [sp, #12]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	bfbb      	ittet	lt
 800daca:	425b      	neglt	r3, r3
 800dacc:	f042 0202 	orrlt.w	r2, r2, #2
 800dad0:	9307      	strge	r3, [sp, #28]
 800dad2:	9307      	strlt	r3, [sp, #28]
 800dad4:	bfb8      	it	lt
 800dad6:	9204      	strlt	r2, [sp, #16]
 800dad8:	7823      	ldrb	r3, [r4, #0]
 800dada:	2b2e      	cmp	r3, #46	@ 0x2e
 800dadc:	d10a      	bne.n	800daf4 <_svfiprintf_r+0x130>
 800dade:	7863      	ldrb	r3, [r4, #1]
 800dae0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dae2:	d132      	bne.n	800db4a <_svfiprintf_r+0x186>
 800dae4:	9b03      	ldr	r3, [sp, #12]
 800dae6:	3402      	adds	r4, #2
 800dae8:	1d1a      	adds	r2, r3, #4
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	9203      	str	r2, [sp, #12]
 800daee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800daf2:	9305      	str	r3, [sp, #20]
 800daf4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800dbac <_svfiprintf_r+0x1e8>
 800daf8:	2203      	movs	r2, #3
 800dafa:	4650      	mov	r0, sl
 800dafc:	7821      	ldrb	r1, [r4, #0]
 800dafe:	f7fe f844 	bl	800bb8a <memchr>
 800db02:	b138      	cbz	r0, 800db14 <_svfiprintf_r+0x150>
 800db04:	2240      	movs	r2, #64	@ 0x40
 800db06:	9b04      	ldr	r3, [sp, #16]
 800db08:	eba0 000a 	sub.w	r0, r0, sl
 800db0c:	4082      	lsls	r2, r0
 800db0e:	4313      	orrs	r3, r2
 800db10:	3401      	adds	r4, #1
 800db12:	9304      	str	r3, [sp, #16]
 800db14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db18:	2206      	movs	r2, #6
 800db1a:	4825      	ldr	r0, [pc, #148]	@ (800dbb0 <_svfiprintf_r+0x1ec>)
 800db1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db20:	f7fe f833 	bl	800bb8a <memchr>
 800db24:	2800      	cmp	r0, #0
 800db26:	d036      	beq.n	800db96 <_svfiprintf_r+0x1d2>
 800db28:	4b22      	ldr	r3, [pc, #136]	@ (800dbb4 <_svfiprintf_r+0x1f0>)
 800db2a:	bb1b      	cbnz	r3, 800db74 <_svfiprintf_r+0x1b0>
 800db2c:	9b03      	ldr	r3, [sp, #12]
 800db2e:	3307      	adds	r3, #7
 800db30:	f023 0307 	bic.w	r3, r3, #7
 800db34:	3308      	adds	r3, #8
 800db36:	9303      	str	r3, [sp, #12]
 800db38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db3a:	4433      	add	r3, r6
 800db3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db3e:	e76a      	b.n	800da16 <_svfiprintf_r+0x52>
 800db40:	460c      	mov	r4, r1
 800db42:	2001      	movs	r0, #1
 800db44:	fb0c 3202 	mla	r2, ip, r2, r3
 800db48:	e7a8      	b.n	800da9c <_svfiprintf_r+0xd8>
 800db4a:	2300      	movs	r3, #0
 800db4c:	f04f 0c0a 	mov.w	ip, #10
 800db50:	4619      	mov	r1, r3
 800db52:	3401      	adds	r4, #1
 800db54:	9305      	str	r3, [sp, #20]
 800db56:	4620      	mov	r0, r4
 800db58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db5c:	3a30      	subs	r2, #48	@ 0x30
 800db5e:	2a09      	cmp	r2, #9
 800db60:	d903      	bls.n	800db6a <_svfiprintf_r+0x1a6>
 800db62:	2b00      	cmp	r3, #0
 800db64:	d0c6      	beq.n	800daf4 <_svfiprintf_r+0x130>
 800db66:	9105      	str	r1, [sp, #20]
 800db68:	e7c4      	b.n	800daf4 <_svfiprintf_r+0x130>
 800db6a:	4604      	mov	r4, r0
 800db6c:	2301      	movs	r3, #1
 800db6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800db72:	e7f0      	b.n	800db56 <_svfiprintf_r+0x192>
 800db74:	ab03      	add	r3, sp, #12
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	462a      	mov	r2, r5
 800db7a:	4638      	mov	r0, r7
 800db7c:	4b0e      	ldr	r3, [pc, #56]	@ (800dbb8 <_svfiprintf_r+0x1f4>)
 800db7e:	a904      	add	r1, sp, #16
 800db80:	f7fc fef0 	bl	800a964 <_printf_float>
 800db84:	1c42      	adds	r2, r0, #1
 800db86:	4606      	mov	r6, r0
 800db88:	d1d6      	bne.n	800db38 <_svfiprintf_r+0x174>
 800db8a:	89ab      	ldrh	r3, [r5, #12]
 800db8c:	065b      	lsls	r3, r3, #25
 800db8e:	f53f af2d 	bmi.w	800d9ec <_svfiprintf_r+0x28>
 800db92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db94:	e72c      	b.n	800d9f0 <_svfiprintf_r+0x2c>
 800db96:	ab03      	add	r3, sp, #12
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	462a      	mov	r2, r5
 800db9c:	4638      	mov	r0, r7
 800db9e:	4b06      	ldr	r3, [pc, #24]	@ (800dbb8 <_svfiprintf_r+0x1f4>)
 800dba0:	a904      	add	r1, sp, #16
 800dba2:	f7fd f97d 	bl	800aea0 <_printf_i>
 800dba6:	e7ed      	b.n	800db84 <_svfiprintf_r+0x1c0>
 800dba8:	0800fb40 	.word	0x0800fb40
 800dbac:	0800fb46 	.word	0x0800fb46
 800dbb0:	0800fb4a 	.word	0x0800fb4a
 800dbb4:	0800a965 	.word	0x0800a965
 800dbb8:	0800d90f 	.word	0x0800d90f

0800dbbc <__sfputc_r>:
 800dbbc:	6893      	ldr	r3, [r2, #8]
 800dbbe:	b410      	push	{r4}
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	6093      	str	r3, [r2, #8]
 800dbc6:	da07      	bge.n	800dbd8 <__sfputc_r+0x1c>
 800dbc8:	6994      	ldr	r4, [r2, #24]
 800dbca:	42a3      	cmp	r3, r4
 800dbcc:	db01      	blt.n	800dbd2 <__sfputc_r+0x16>
 800dbce:	290a      	cmp	r1, #10
 800dbd0:	d102      	bne.n	800dbd8 <__sfputc_r+0x1c>
 800dbd2:	bc10      	pop	{r4}
 800dbd4:	f7fd bc91 	b.w	800b4fa <__swbuf_r>
 800dbd8:	6813      	ldr	r3, [r2, #0]
 800dbda:	1c58      	adds	r0, r3, #1
 800dbdc:	6010      	str	r0, [r2, #0]
 800dbde:	7019      	strb	r1, [r3, #0]
 800dbe0:	4608      	mov	r0, r1
 800dbe2:	bc10      	pop	{r4}
 800dbe4:	4770      	bx	lr

0800dbe6 <__sfputs_r>:
 800dbe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe8:	4606      	mov	r6, r0
 800dbea:	460f      	mov	r7, r1
 800dbec:	4614      	mov	r4, r2
 800dbee:	18d5      	adds	r5, r2, r3
 800dbf0:	42ac      	cmp	r4, r5
 800dbf2:	d101      	bne.n	800dbf8 <__sfputs_r+0x12>
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	e007      	b.n	800dc08 <__sfputs_r+0x22>
 800dbf8:	463a      	mov	r2, r7
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc00:	f7ff ffdc 	bl	800dbbc <__sfputc_r>
 800dc04:	1c43      	adds	r3, r0, #1
 800dc06:	d1f3      	bne.n	800dbf0 <__sfputs_r+0xa>
 800dc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc0c <_vfiprintf_r>:
 800dc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc10:	460d      	mov	r5, r1
 800dc12:	4614      	mov	r4, r2
 800dc14:	4698      	mov	r8, r3
 800dc16:	4606      	mov	r6, r0
 800dc18:	b09d      	sub	sp, #116	@ 0x74
 800dc1a:	b118      	cbz	r0, 800dc24 <_vfiprintf_r+0x18>
 800dc1c:	6a03      	ldr	r3, [r0, #32]
 800dc1e:	b90b      	cbnz	r3, 800dc24 <_vfiprintf_r+0x18>
 800dc20:	f7fd faea 	bl	800b1f8 <__sinit>
 800dc24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc26:	07d9      	lsls	r1, r3, #31
 800dc28:	d405      	bmi.n	800dc36 <_vfiprintf_r+0x2a>
 800dc2a:	89ab      	ldrh	r3, [r5, #12]
 800dc2c:	059a      	lsls	r2, r3, #22
 800dc2e:	d402      	bmi.n	800dc36 <_vfiprintf_r+0x2a>
 800dc30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc32:	f7fd ffa0 	bl	800bb76 <__retarget_lock_acquire_recursive>
 800dc36:	89ab      	ldrh	r3, [r5, #12]
 800dc38:	071b      	lsls	r3, r3, #28
 800dc3a:	d501      	bpl.n	800dc40 <_vfiprintf_r+0x34>
 800dc3c:	692b      	ldr	r3, [r5, #16]
 800dc3e:	b99b      	cbnz	r3, 800dc68 <_vfiprintf_r+0x5c>
 800dc40:	4629      	mov	r1, r5
 800dc42:	4630      	mov	r0, r6
 800dc44:	f7fd fc98 	bl	800b578 <__swsetup_r>
 800dc48:	b170      	cbz	r0, 800dc68 <_vfiprintf_r+0x5c>
 800dc4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc4c:	07dc      	lsls	r4, r3, #31
 800dc4e:	d504      	bpl.n	800dc5a <_vfiprintf_r+0x4e>
 800dc50:	f04f 30ff 	mov.w	r0, #4294967295
 800dc54:	b01d      	add	sp, #116	@ 0x74
 800dc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5a:	89ab      	ldrh	r3, [r5, #12]
 800dc5c:	0598      	lsls	r0, r3, #22
 800dc5e:	d4f7      	bmi.n	800dc50 <_vfiprintf_r+0x44>
 800dc60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc62:	f7fd ff89 	bl	800bb78 <__retarget_lock_release_recursive>
 800dc66:	e7f3      	b.n	800dc50 <_vfiprintf_r+0x44>
 800dc68:	2300      	movs	r3, #0
 800dc6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc6c:	2320      	movs	r3, #32
 800dc6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc72:	2330      	movs	r3, #48	@ 0x30
 800dc74:	f04f 0901 	mov.w	r9, #1
 800dc78:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc7c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800de28 <_vfiprintf_r+0x21c>
 800dc80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc84:	4623      	mov	r3, r4
 800dc86:	469a      	mov	sl, r3
 800dc88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc8c:	b10a      	cbz	r2, 800dc92 <_vfiprintf_r+0x86>
 800dc8e:	2a25      	cmp	r2, #37	@ 0x25
 800dc90:	d1f9      	bne.n	800dc86 <_vfiprintf_r+0x7a>
 800dc92:	ebba 0b04 	subs.w	fp, sl, r4
 800dc96:	d00b      	beq.n	800dcb0 <_vfiprintf_r+0xa4>
 800dc98:	465b      	mov	r3, fp
 800dc9a:	4622      	mov	r2, r4
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	4630      	mov	r0, r6
 800dca0:	f7ff ffa1 	bl	800dbe6 <__sfputs_r>
 800dca4:	3001      	adds	r0, #1
 800dca6:	f000 80a7 	beq.w	800ddf8 <_vfiprintf_r+0x1ec>
 800dcaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcac:	445a      	add	r2, fp
 800dcae:	9209      	str	r2, [sp, #36]	@ 0x24
 800dcb0:	f89a 3000 	ldrb.w	r3, [sl]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f000 809f 	beq.w	800ddf8 <_vfiprintf_r+0x1ec>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f04f 32ff 	mov.w	r2, #4294967295
 800dcc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcc4:	f10a 0a01 	add.w	sl, sl, #1
 800dcc8:	9304      	str	r3, [sp, #16]
 800dcca:	9307      	str	r3, [sp, #28]
 800dccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dcd0:	931a      	str	r3, [sp, #104]	@ 0x68
 800dcd2:	4654      	mov	r4, sl
 800dcd4:	2205      	movs	r2, #5
 800dcd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcda:	4853      	ldr	r0, [pc, #332]	@ (800de28 <_vfiprintf_r+0x21c>)
 800dcdc:	f7fd ff55 	bl	800bb8a <memchr>
 800dce0:	9a04      	ldr	r2, [sp, #16]
 800dce2:	b9d8      	cbnz	r0, 800dd1c <_vfiprintf_r+0x110>
 800dce4:	06d1      	lsls	r1, r2, #27
 800dce6:	bf44      	itt	mi
 800dce8:	2320      	movmi	r3, #32
 800dcea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcee:	0713      	lsls	r3, r2, #28
 800dcf0:	bf44      	itt	mi
 800dcf2:	232b      	movmi	r3, #43	@ 0x2b
 800dcf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcf8:	f89a 3000 	ldrb.w	r3, [sl]
 800dcfc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcfe:	d015      	beq.n	800dd2c <_vfiprintf_r+0x120>
 800dd00:	4654      	mov	r4, sl
 800dd02:	2000      	movs	r0, #0
 800dd04:	f04f 0c0a 	mov.w	ip, #10
 800dd08:	9a07      	ldr	r2, [sp, #28]
 800dd0a:	4621      	mov	r1, r4
 800dd0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd10:	3b30      	subs	r3, #48	@ 0x30
 800dd12:	2b09      	cmp	r3, #9
 800dd14:	d94b      	bls.n	800ddae <_vfiprintf_r+0x1a2>
 800dd16:	b1b0      	cbz	r0, 800dd46 <_vfiprintf_r+0x13a>
 800dd18:	9207      	str	r2, [sp, #28]
 800dd1a:	e014      	b.n	800dd46 <_vfiprintf_r+0x13a>
 800dd1c:	eba0 0308 	sub.w	r3, r0, r8
 800dd20:	fa09 f303 	lsl.w	r3, r9, r3
 800dd24:	4313      	orrs	r3, r2
 800dd26:	46a2      	mov	sl, r4
 800dd28:	9304      	str	r3, [sp, #16]
 800dd2a:	e7d2      	b.n	800dcd2 <_vfiprintf_r+0xc6>
 800dd2c:	9b03      	ldr	r3, [sp, #12]
 800dd2e:	1d19      	adds	r1, r3, #4
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	9103      	str	r1, [sp, #12]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	bfbb      	ittet	lt
 800dd38:	425b      	neglt	r3, r3
 800dd3a:	f042 0202 	orrlt.w	r2, r2, #2
 800dd3e:	9307      	strge	r3, [sp, #28]
 800dd40:	9307      	strlt	r3, [sp, #28]
 800dd42:	bfb8      	it	lt
 800dd44:	9204      	strlt	r2, [sp, #16]
 800dd46:	7823      	ldrb	r3, [r4, #0]
 800dd48:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd4a:	d10a      	bne.n	800dd62 <_vfiprintf_r+0x156>
 800dd4c:	7863      	ldrb	r3, [r4, #1]
 800dd4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd50:	d132      	bne.n	800ddb8 <_vfiprintf_r+0x1ac>
 800dd52:	9b03      	ldr	r3, [sp, #12]
 800dd54:	3402      	adds	r4, #2
 800dd56:	1d1a      	adds	r2, r3, #4
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	9203      	str	r2, [sp, #12]
 800dd5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd60:	9305      	str	r3, [sp, #20]
 800dd62:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800de2c <_vfiprintf_r+0x220>
 800dd66:	2203      	movs	r2, #3
 800dd68:	4650      	mov	r0, sl
 800dd6a:	7821      	ldrb	r1, [r4, #0]
 800dd6c:	f7fd ff0d 	bl	800bb8a <memchr>
 800dd70:	b138      	cbz	r0, 800dd82 <_vfiprintf_r+0x176>
 800dd72:	2240      	movs	r2, #64	@ 0x40
 800dd74:	9b04      	ldr	r3, [sp, #16]
 800dd76:	eba0 000a 	sub.w	r0, r0, sl
 800dd7a:	4082      	lsls	r2, r0
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	3401      	adds	r4, #1
 800dd80:	9304      	str	r3, [sp, #16]
 800dd82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd86:	2206      	movs	r2, #6
 800dd88:	4829      	ldr	r0, [pc, #164]	@ (800de30 <_vfiprintf_r+0x224>)
 800dd8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd8e:	f7fd fefc 	bl	800bb8a <memchr>
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d03f      	beq.n	800de16 <_vfiprintf_r+0x20a>
 800dd96:	4b27      	ldr	r3, [pc, #156]	@ (800de34 <_vfiprintf_r+0x228>)
 800dd98:	bb1b      	cbnz	r3, 800dde2 <_vfiprintf_r+0x1d6>
 800dd9a:	9b03      	ldr	r3, [sp, #12]
 800dd9c:	3307      	adds	r3, #7
 800dd9e:	f023 0307 	bic.w	r3, r3, #7
 800dda2:	3308      	adds	r3, #8
 800dda4:	9303      	str	r3, [sp, #12]
 800dda6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dda8:	443b      	add	r3, r7
 800ddaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddac:	e76a      	b.n	800dc84 <_vfiprintf_r+0x78>
 800ddae:	460c      	mov	r4, r1
 800ddb0:	2001      	movs	r0, #1
 800ddb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddb6:	e7a8      	b.n	800dd0a <_vfiprintf_r+0xfe>
 800ddb8:	2300      	movs	r3, #0
 800ddba:	f04f 0c0a 	mov.w	ip, #10
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	3401      	adds	r4, #1
 800ddc2:	9305      	str	r3, [sp, #20]
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddca:	3a30      	subs	r2, #48	@ 0x30
 800ddcc:	2a09      	cmp	r2, #9
 800ddce:	d903      	bls.n	800ddd8 <_vfiprintf_r+0x1cc>
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d0c6      	beq.n	800dd62 <_vfiprintf_r+0x156>
 800ddd4:	9105      	str	r1, [sp, #20]
 800ddd6:	e7c4      	b.n	800dd62 <_vfiprintf_r+0x156>
 800ddd8:	4604      	mov	r4, r0
 800ddda:	2301      	movs	r3, #1
 800dddc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dde0:	e7f0      	b.n	800ddc4 <_vfiprintf_r+0x1b8>
 800dde2:	ab03      	add	r3, sp, #12
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	462a      	mov	r2, r5
 800dde8:	4630      	mov	r0, r6
 800ddea:	4b13      	ldr	r3, [pc, #76]	@ (800de38 <_vfiprintf_r+0x22c>)
 800ddec:	a904      	add	r1, sp, #16
 800ddee:	f7fc fdb9 	bl	800a964 <_printf_float>
 800ddf2:	4607      	mov	r7, r0
 800ddf4:	1c78      	adds	r0, r7, #1
 800ddf6:	d1d6      	bne.n	800dda6 <_vfiprintf_r+0x19a>
 800ddf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddfa:	07d9      	lsls	r1, r3, #31
 800ddfc:	d405      	bmi.n	800de0a <_vfiprintf_r+0x1fe>
 800ddfe:	89ab      	ldrh	r3, [r5, #12]
 800de00:	059a      	lsls	r2, r3, #22
 800de02:	d402      	bmi.n	800de0a <_vfiprintf_r+0x1fe>
 800de04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de06:	f7fd feb7 	bl	800bb78 <__retarget_lock_release_recursive>
 800de0a:	89ab      	ldrh	r3, [r5, #12]
 800de0c:	065b      	lsls	r3, r3, #25
 800de0e:	f53f af1f 	bmi.w	800dc50 <_vfiprintf_r+0x44>
 800de12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de14:	e71e      	b.n	800dc54 <_vfiprintf_r+0x48>
 800de16:	ab03      	add	r3, sp, #12
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	462a      	mov	r2, r5
 800de1c:	4630      	mov	r0, r6
 800de1e:	4b06      	ldr	r3, [pc, #24]	@ (800de38 <_vfiprintf_r+0x22c>)
 800de20:	a904      	add	r1, sp, #16
 800de22:	f7fd f83d 	bl	800aea0 <_printf_i>
 800de26:	e7e4      	b.n	800ddf2 <_vfiprintf_r+0x1e6>
 800de28:	0800fb40 	.word	0x0800fb40
 800de2c:	0800fb46 	.word	0x0800fb46
 800de30:	0800fb4a 	.word	0x0800fb4a
 800de34:	0800a965 	.word	0x0800a965
 800de38:	0800dbe7 	.word	0x0800dbe7

0800de3c <__sflush_r>:
 800de3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de42:	0716      	lsls	r6, r2, #28
 800de44:	4605      	mov	r5, r0
 800de46:	460c      	mov	r4, r1
 800de48:	d454      	bmi.n	800def4 <__sflush_r+0xb8>
 800de4a:	684b      	ldr	r3, [r1, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	dc02      	bgt.n	800de56 <__sflush_r+0x1a>
 800de50:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800de52:	2b00      	cmp	r3, #0
 800de54:	dd48      	ble.n	800dee8 <__sflush_r+0xac>
 800de56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de58:	2e00      	cmp	r6, #0
 800de5a:	d045      	beq.n	800dee8 <__sflush_r+0xac>
 800de5c:	2300      	movs	r3, #0
 800de5e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800de62:	682f      	ldr	r7, [r5, #0]
 800de64:	6a21      	ldr	r1, [r4, #32]
 800de66:	602b      	str	r3, [r5, #0]
 800de68:	d030      	beq.n	800decc <__sflush_r+0x90>
 800de6a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800de6c:	89a3      	ldrh	r3, [r4, #12]
 800de6e:	0759      	lsls	r1, r3, #29
 800de70:	d505      	bpl.n	800de7e <__sflush_r+0x42>
 800de72:	6863      	ldr	r3, [r4, #4]
 800de74:	1ad2      	subs	r2, r2, r3
 800de76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de78:	b10b      	cbz	r3, 800de7e <__sflush_r+0x42>
 800de7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de7c:	1ad2      	subs	r2, r2, r3
 800de7e:	2300      	movs	r3, #0
 800de80:	4628      	mov	r0, r5
 800de82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de84:	6a21      	ldr	r1, [r4, #32]
 800de86:	47b0      	blx	r6
 800de88:	1c43      	adds	r3, r0, #1
 800de8a:	89a3      	ldrh	r3, [r4, #12]
 800de8c:	d106      	bne.n	800de9c <__sflush_r+0x60>
 800de8e:	6829      	ldr	r1, [r5, #0]
 800de90:	291d      	cmp	r1, #29
 800de92:	d82b      	bhi.n	800deec <__sflush_r+0xb0>
 800de94:	4a28      	ldr	r2, [pc, #160]	@ (800df38 <__sflush_r+0xfc>)
 800de96:	410a      	asrs	r2, r1
 800de98:	07d6      	lsls	r6, r2, #31
 800de9a:	d427      	bmi.n	800deec <__sflush_r+0xb0>
 800de9c:	2200      	movs	r2, #0
 800de9e:	6062      	str	r2, [r4, #4]
 800dea0:	6922      	ldr	r2, [r4, #16]
 800dea2:	04d9      	lsls	r1, r3, #19
 800dea4:	6022      	str	r2, [r4, #0]
 800dea6:	d504      	bpl.n	800deb2 <__sflush_r+0x76>
 800dea8:	1c42      	adds	r2, r0, #1
 800deaa:	d101      	bne.n	800deb0 <__sflush_r+0x74>
 800deac:	682b      	ldr	r3, [r5, #0]
 800deae:	b903      	cbnz	r3, 800deb2 <__sflush_r+0x76>
 800deb0:	6560      	str	r0, [r4, #84]	@ 0x54
 800deb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800deb4:	602f      	str	r7, [r5, #0]
 800deb6:	b1b9      	cbz	r1, 800dee8 <__sflush_r+0xac>
 800deb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800debc:	4299      	cmp	r1, r3
 800debe:	d002      	beq.n	800dec6 <__sflush_r+0x8a>
 800dec0:	4628      	mov	r0, r5
 800dec2:	f7fe fcd5 	bl	800c870 <_free_r>
 800dec6:	2300      	movs	r3, #0
 800dec8:	6363      	str	r3, [r4, #52]	@ 0x34
 800deca:	e00d      	b.n	800dee8 <__sflush_r+0xac>
 800decc:	2301      	movs	r3, #1
 800dece:	4628      	mov	r0, r5
 800ded0:	47b0      	blx	r6
 800ded2:	4602      	mov	r2, r0
 800ded4:	1c50      	adds	r0, r2, #1
 800ded6:	d1c9      	bne.n	800de6c <__sflush_r+0x30>
 800ded8:	682b      	ldr	r3, [r5, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d0c6      	beq.n	800de6c <__sflush_r+0x30>
 800dede:	2b1d      	cmp	r3, #29
 800dee0:	d001      	beq.n	800dee6 <__sflush_r+0xaa>
 800dee2:	2b16      	cmp	r3, #22
 800dee4:	d11d      	bne.n	800df22 <__sflush_r+0xe6>
 800dee6:	602f      	str	r7, [r5, #0]
 800dee8:	2000      	movs	r0, #0
 800deea:	e021      	b.n	800df30 <__sflush_r+0xf4>
 800deec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800def0:	b21b      	sxth	r3, r3
 800def2:	e01a      	b.n	800df2a <__sflush_r+0xee>
 800def4:	690f      	ldr	r7, [r1, #16]
 800def6:	2f00      	cmp	r7, #0
 800def8:	d0f6      	beq.n	800dee8 <__sflush_r+0xac>
 800defa:	0793      	lsls	r3, r2, #30
 800defc:	bf18      	it	ne
 800defe:	2300      	movne	r3, #0
 800df00:	680e      	ldr	r6, [r1, #0]
 800df02:	bf08      	it	eq
 800df04:	694b      	ldreq	r3, [r1, #20]
 800df06:	1bf6      	subs	r6, r6, r7
 800df08:	600f      	str	r7, [r1, #0]
 800df0a:	608b      	str	r3, [r1, #8]
 800df0c:	2e00      	cmp	r6, #0
 800df0e:	ddeb      	ble.n	800dee8 <__sflush_r+0xac>
 800df10:	4633      	mov	r3, r6
 800df12:	463a      	mov	r2, r7
 800df14:	4628      	mov	r0, r5
 800df16:	6a21      	ldr	r1, [r4, #32]
 800df18:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800df1c:	47e0      	blx	ip
 800df1e:	2800      	cmp	r0, #0
 800df20:	dc07      	bgt.n	800df32 <__sflush_r+0xf6>
 800df22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df2a:	f04f 30ff 	mov.w	r0, #4294967295
 800df2e:	81a3      	strh	r3, [r4, #12]
 800df30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df32:	4407      	add	r7, r0
 800df34:	1a36      	subs	r6, r6, r0
 800df36:	e7e9      	b.n	800df0c <__sflush_r+0xd0>
 800df38:	dfbffffe 	.word	0xdfbffffe

0800df3c <_fflush_r>:
 800df3c:	b538      	push	{r3, r4, r5, lr}
 800df3e:	690b      	ldr	r3, [r1, #16]
 800df40:	4605      	mov	r5, r0
 800df42:	460c      	mov	r4, r1
 800df44:	b913      	cbnz	r3, 800df4c <_fflush_r+0x10>
 800df46:	2500      	movs	r5, #0
 800df48:	4628      	mov	r0, r5
 800df4a:	bd38      	pop	{r3, r4, r5, pc}
 800df4c:	b118      	cbz	r0, 800df56 <_fflush_r+0x1a>
 800df4e:	6a03      	ldr	r3, [r0, #32]
 800df50:	b90b      	cbnz	r3, 800df56 <_fflush_r+0x1a>
 800df52:	f7fd f951 	bl	800b1f8 <__sinit>
 800df56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d0f3      	beq.n	800df46 <_fflush_r+0xa>
 800df5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df60:	07d0      	lsls	r0, r2, #31
 800df62:	d404      	bmi.n	800df6e <_fflush_r+0x32>
 800df64:	0599      	lsls	r1, r3, #22
 800df66:	d402      	bmi.n	800df6e <_fflush_r+0x32>
 800df68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df6a:	f7fd fe04 	bl	800bb76 <__retarget_lock_acquire_recursive>
 800df6e:	4628      	mov	r0, r5
 800df70:	4621      	mov	r1, r4
 800df72:	f7ff ff63 	bl	800de3c <__sflush_r>
 800df76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df78:	4605      	mov	r5, r0
 800df7a:	07da      	lsls	r2, r3, #31
 800df7c:	d4e4      	bmi.n	800df48 <_fflush_r+0xc>
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	059b      	lsls	r3, r3, #22
 800df82:	d4e1      	bmi.n	800df48 <_fflush_r+0xc>
 800df84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df86:	f7fd fdf7 	bl	800bb78 <__retarget_lock_release_recursive>
 800df8a:	e7dd      	b.n	800df48 <_fflush_r+0xc>

0800df8c <fileno>:
 800df8c:	b538      	push	{r3, r4, r5, lr}
 800df8e:	4d13      	ldr	r5, [pc, #76]	@ (800dfdc <fileno+0x50>)
 800df90:	4604      	mov	r4, r0
 800df92:	6828      	ldr	r0, [r5, #0]
 800df94:	b118      	cbz	r0, 800df9e <fileno+0x12>
 800df96:	6a03      	ldr	r3, [r0, #32]
 800df98:	b90b      	cbnz	r3, 800df9e <fileno+0x12>
 800df9a:	f7fd f92d 	bl	800b1f8 <__sinit>
 800df9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dfa0:	07d8      	lsls	r0, r3, #31
 800dfa2:	d405      	bmi.n	800dfb0 <fileno+0x24>
 800dfa4:	89a3      	ldrh	r3, [r4, #12]
 800dfa6:	0599      	lsls	r1, r3, #22
 800dfa8:	d402      	bmi.n	800dfb0 <fileno+0x24>
 800dfaa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfac:	f7fd fde3 	bl	800bb76 <__retarget_lock_acquire_recursive>
 800dfb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfb4:	b15b      	cbz	r3, 800dfce <fileno+0x42>
 800dfb6:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800dfba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfbc:	07d2      	lsls	r2, r2, #31
 800dfbe:	d404      	bmi.n	800dfca <fileno+0x3e>
 800dfc0:	059b      	lsls	r3, r3, #22
 800dfc2:	d402      	bmi.n	800dfca <fileno+0x3e>
 800dfc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfc6:	f7fd fdd7 	bl	800bb78 <__retarget_lock_release_recursive>
 800dfca:	4628      	mov	r0, r5
 800dfcc:	bd38      	pop	{r3, r4, r5, pc}
 800dfce:	2109      	movs	r1, #9
 800dfd0:	682a      	ldr	r2, [r5, #0]
 800dfd2:	f04f 35ff 	mov.w	r5, #4294967295
 800dfd6:	6011      	str	r1, [r2, #0]
 800dfd8:	e7ef      	b.n	800dfba <fileno+0x2e>
 800dfda:	bf00      	nop
 800dfdc:	200001a0 	.word	0x200001a0

0800dfe0 <__swhatbuf_r>:
 800dfe0:	b570      	push	{r4, r5, r6, lr}
 800dfe2:	460c      	mov	r4, r1
 800dfe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfe8:	4615      	mov	r5, r2
 800dfea:	2900      	cmp	r1, #0
 800dfec:	461e      	mov	r6, r3
 800dfee:	b096      	sub	sp, #88	@ 0x58
 800dff0:	da0c      	bge.n	800e00c <__swhatbuf_r+0x2c>
 800dff2:	89a3      	ldrh	r3, [r4, #12]
 800dff4:	2100      	movs	r1, #0
 800dff6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dffa:	bf14      	ite	ne
 800dffc:	2340      	movne	r3, #64	@ 0x40
 800dffe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e002:	2000      	movs	r0, #0
 800e004:	6031      	str	r1, [r6, #0]
 800e006:	602b      	str	r3, [r5, #0]
 800e008:	b016      	add	sp, #88	@ 0x58
 800e00a:	bd70      	pop	{r4, r5, r6, pc}
 800e00c:	466a      	mov	r2, sp
 800e00e:	f000 f863 	bl	800e0d8 <_fstat_r>
 800e012:	2800      	cmp	r0, #0
 800e014:	dbed      	blt.n	800dff2 <__swhatbuf_r+0x12>
 800e016:	9901      	ldr	r1, [sp, #4]
 800e018:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e01c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e020:	4259      	negs	r1, r3
 800e022:	4159      	adcs	r1, r3
 800e024:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e028:	e7eb      	b.n	800e002 <__swhatbuf_r+0x22>

0800e02a <__smakebuf_r>:
 800e02a:	898b      	ldrh	r3, [r1, #12]
 800e02c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e02e:	079d      	lsls	r5, r3, #30
 800e030:	4606      	mov	r6, r0
 800e032:	460c      	mov	r4, r1
 800e034:	d507      	bpl.n	800e046 <__smakebuf_r+0x1c>
 800e036:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e03a:	6023      	str	r3, [r4, #0]
 800e03c:	6123      	str	r3, [r4, #16]
 800e03e:	2301      	movs	r3, #1
 800e040:	6163      	str	r3, [r4, #20]
 800e042:	b003      	add	sp, #12
 800e044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e046:	466a      	mov	r2, sp
 800e048:	ab01      	add	r3, sp, #4
 800e04a:	f7ff ffc9 	bl	800dfe0 <__swhatbuf_r>
 800e04e:	9f00      	ldr	r7, [sp, #0]
 800e050:	4605      	mov	r5, r0
 800e052:	4639      	mov	r1, r7
 800e054:	4630      	mov	r0, r6
 800e056:	f7fb fb17 	bl	8009688 <_malloc_r>
 800e05a:	b948      	cbnz	r0, 800e070 <__smakebuf_r+0x46>
 800e05c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e060:	059a      	lsls	r2, r3, #22
 800e062:	d4ee      	bmi.n	800e042 <__smakebuf_r+0x18>
 800e064:	f023 0303 	bic.w	r3, r3, #3
 800e068:	f043 0302 	orr.w	r3, r3, #2
 800e06c:	81a3      	strh	r3, [r4, #12]
 800e06e:	e7e2      	b.n	800e036 <__smakebuf_r+0xc>
 800e070:	89a3      	ldrh	r3, [r4, #12]
 800e072:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e07a:	81a3      	strh	r3, [r4, #12]
 800e07c:	9b01      	ldr	r3, [sp, #4]
 800e07e:	6020      	str	r0, [r4, #0]
 800e080:	b15b      	cbz	r3, 800e09a <__smakebuf_r+0x70>
 800e082:	4630      	mov	r0, r6
 800e084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e088:	f000 f838 	bl	800e0fc <_isatty_r>
 800e08c:	b128      	cbz	r0, 800e09a <__smakebuf_r+0x70>
 800e08e:	89a3      	ldrh	r3, [r4, #12]
 800e090:	f023 0303 	bic.w	r3, r3, #3
 800e094:	f043 0301 	orr.w	r3, r3, #1
 800e098:	81a3      	strh	r3, [r4, #12]
 800e09a:	89a3      	ldrh	r3, [r4, #12]
 800e09c:	431d      	orrs	r5, r3
 800e09e:	81a5      	strh	r5, [r4, #12]
 800e0a0:	e7cf      	b.n	800e042 <__smakebuf_r+0x18>

0800e0a2 <memmove>:
 800e0a2:	4288      	cmp	r0, r1
 800e0a4:	b510      	push	{r4, lr}
 800e0a6:	eb01 0402 	add.w	r4, r1, r2
 800e0aa:	d902      	bls.n	800e0b2 <memmove+0x10>
 800e0ac:	4284      	cmp	r4, r0
 800e0ae:	4623      	mov	r3, r4
 800e0b0:	d807      	bhi.n	800e0c2 <memmove+0x20>
 800e0b2:	1e43      	subs	r3, r0, #1
 800e0b4:	42a1      	cmp	r1, r4
 800e0b6:	d008      	beq.n	800e0ca <memmove+0x28>
 800e0b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0c0:	e7f8      	b.n	800e0b4 <memmove+0x12>
 800e0c2:	4601      	mov	r1, r0
 800e0c4:	4402      	add	r2, r0
 800e0c6:	428a      	cmp	r2, r1
 800e0c8:	d100      	bne.n	800e0cc <memmove+0x2a>
 800e0ca:	bd10      	pop	{r4, pc}
 800e0cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0d4:	e7f7      	b.n	800e0c6 <memmove+0x24>
	...

0800e0d8 <_fstat_r>:
 800e0d8:	b538      	push	{r3, r4, r5, lr}
 800e0da:	2300      	movs	r3, #0
 800e0dc:	4d06      	ldr	r5, [pc, #24]	@ (800e0f8 <_fstat_r+0x20>)
 800e0de:	4604      	mov	r4, r0
 800e0e0:	4608      	mov	r0, r1
 800e0e2:	4611      	mov	r1, r2
 800e0e4:	602b      	str	r3, [r5, #0]
 800e0e6:	f7f4 ffbb 	bl	8003060 <_fstat>
 800e0ea:	1c43      	adds	r3, r0, #1
 800e0ec:	d102      	bne.n	800e0f4 <_fstat_r+0x1c>
 800e0ee:	682b      	ldr	r3, [r5, #0]
 800e0f0:	b103      	cbz	r3, 800e0f4 <_fstat_r+0x1c>
 800e0f2:	6023      	str	r3, [r4, #0]
 800e0f4:	bd38      	pop	{r3, r4, r5, pc}
 800e0f6:	bf00      	nop
 800e0f8:	20000740 	.word	0x20000740

0800e0fc <_isatty_r>:
 800e0fc:	b538      	push	{r3, r4, r5, lr}
 800e0fe:	2300      	movs	r3, #0
 800e100:	4d05      	ldr	r5, [pc, #20]	@ (800e118 <_isatty_r+0x1c>)
 800e102:	4604      	mov	r4, r0
 800e104:	4608      	mov	r0, r1
 800e106:	602b      	str	r3, [r5, #0]
 800e108:	f7f4 ffb9 	bl	800307e <_isatty>
 800e10c:	1c43      	adds	r3, r0, #1
 800e10e:	d102      	bne.n	800e116 <_isatty_r+0x1a>
 800e110:	682b      	ldr	r3, [r5, #0]
 800e112:	b103      	cbz	r3, 800e116 <_isatty_r+0x1a>
 800e114:	6023      	str	r3, [r4, #0]
 800e116:	bd38      	pop	{r3, r4, r5, pc}
 800e118:	20000740 	.word	0x20000740

0800e11c <__assert_func>:
 800e11c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e11e:	4614      	mov	r4, r2
 800e120:	461a      	mov	r2, r3
 800e122:	4b09      	ldr	r3, [pc, #36]	@ (800e148 <__assert_func+0x2c>)
 800e124:	4605      	mov	r5, r0
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	68d8      	ldr	r0, [r3, #12]
 800e12a:	b954      	cbnz	r4, 800e142 <__assert_func+0x26>
 800e12c:	4b07      	ldr	r3, [pc, #28]	@ (800e14c <__assert_func+0x30>)
 800e12e:	461c      	mov	r4, r3
 800e130:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e134:	9100      	str	r1, [sp, #0]
 800e136:	462b      	mov	r3, r5
 800e138:	4905      	ldr	r1, [pc, #20]	@ (800e150 <__assert_func+0x34>)
 800e13a:	f000 f80d 	bl	800e158 <fiprintf>
 800e13e:	f000 f81d 	bl	800e17c <abort>
 800e142:	4b04      	ldr	r3, [pc, #16]	@ (800e154 <__assert_func+0x38>)
 800e144:	e7f4      	b.n	800e130 <__assert_func+0x14>
 800e146:	bf00      	nop
 800e148:	200001a0 	.word	0x200001a0
 800e14c:	0800fb8c 	.word	0x0800fb8c
 800e150:	0800fb5e 	.word	0x0800fb5e
 800e154:	0800fb51 	.word	0x0800fb51

0800e158 <fiprintf>:
 800e158:	b40e      	push	{r1, r2, r3}
 800e15a:	b503      	push	{r0, r1, lr}
 800e15c:	4601      	mov	r1, r0
 800e15e:	ab03      	add	r3, sp, #12
 800e160:	4805      	ldr	r0, [pc, #20]	@ (800e178 <fiprintf+0x20>)
 800e162:	f853 2b04 	ldr.w	r2, [r3], #4
 800e166:	6800      	ldr	r0, [r0, #0]
 800e168:	9301      	str	r3, [sp, #4]
 800e16a:	f7ff fd4f 	bl	800dc0c <_vfiprintf_r>
 800e16e:	b002      	add	sp, #8
 800e170:	f85d eb04 	ldr.w	lr, [sp], #4
 800e174:	b003      	add	sp, #12
 800e176:	4770      	bx	lr
 800e178:	200001a0 	.word	0x200001a0

0800e17c <abort>:
 800e17c:	2006      	movs	r0, #6
 800e17e:	b508      	push	{r3, lr}
 800e180:	f000 f82c 	bl	800e1dc <raise>
 800e184:	2001      	movs	r0, #1
 800e186:	f7f4 ff1c 	bl	8002fc2 <_exit>

0800e18a <_raise_r>:
 800e18a:	291f      	cmp	r1, #31
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	4605      	mov	r5, r0
 800e190:	460c      	mov	r4, r1
 800e192:	d904      	bls.n	800e19e <_raise_r+0x14>
 800e194:	2316      	movs	r3, #22
 800e196:	6003      	str	r3, [r0, #0]
 800e198:	f04f 30ff 	mov.w	r0, #4294967295
 800e19c:	bd38      	pop	{r3, r4, r5, pc}
 800e19e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e1a0:	b112      	cbz	r2, 800e1a8 <_raise_r+0x1e>
 800e1a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1a6:	b94b      	cbnz	r3, 800e1bc <_raise_r+0x32>
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	f000 f831 	bl	800e210 <_getpid_r>
 800e1ae:	4622      	mov	r2, r4
 800e1b0:	4601      	mov	r1, r0
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1b8:	f000 b818 	b.w	800e1ec <_kill_r>
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d00a      	beq.n	800e1d6 <_raise_r+0x4c>
 800e1c0:	1c59      	adds	r1, r3, #1
 800e1c2:	d103      	bne.n	800e1cc <_raise_r+0x42>
 800e1c4:	2316      	movs	r3, #22
 800e1c6:	6003      	str	r3, [r0, #0]
 800e1c8:	2001      	movs	r0, #1
 800e1ca:	e7e7      	b.n	800e19c <_raise_r+0x12>
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e1d4:	4798      	blx	r3
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	e7e0      	b.n	800e19c <_raise_r+0x12>
	...

0800e1dc <raise>:
 800e1dc:	4b02      	ldr	r3, [pc, #8]	@ (800e1e8 <raise+0xc>)
 800e1de:	4601      	mov	r1, r0
 800e1e0:	6818      	ldr	r0, [r3, #0]
 800e1e2:	f7ff bfd2 	b.w	800e18a <_raise_r>
 800e1e6:	bf00      	nop
 800e1e8:	200001a0 	.word	0x200001a0

0800e1ec <_kill_r>:
 800e1ec:	b538      	push	{r3, r4, r5, lr}
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	4d06      	ldr	r5, [pc, #24]	@ (800e20c <_kill_r+0x20>)
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	4608      	mov	r0, r1
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	602b      	str	r3, [r5, #0]
 800e1fa:	f7f4 fed2 	bl	8002fa2 <_kill>
 800e1fe:	1c43      	adds	r3, r0, #1
 800e200:	d102      	bne.n	800e208 <_kill_r+0x1c>
 800e202:	682b      	ldr	r3, [r5, #0]
 800e204:	b103      	cbz	r3, 800e208 <_kill_r+0x1c>
 800e206:	6023      	str	r3, [r4, #0]
 800e208:	bd38      	pop	{r3, r4, r5, pc}
 800e20a:	bf00      	nop
 800e20c:	20000740 	.word	0x20000740

0800e210 <_getpid_r>:
 800e210:	f7f4 bec0 	b.w	8002f94 <_getpid>

0800e214 <sinf>:
 800e214:	b507      	push	{r0, r1, r2, lr}
 800e216:	4a1b      	ldr	r2, [pc, #108]	@ (800e284 <sinf+0x70>)
 800e218:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e21c:	4293      	cmp	r3, r2
 800e21e:	4601      	mov	r1, r0
 800e220:	d806      	bhi.n	800e230 <sinf+0x1c>
 800e222:	2200      	movs	r2, #0
 800e224:	2100      	movs	r1, #0
 800e226:	b003      	add	sp, #12
 800e228:	f85d eb04 	ldr.w	lr, [sp], #4
 800e22c:	f000 b8f2 	b.w	800e414 <__kernel_sinf>
 800e230:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e234:	d304      	bcc.n	800e240 <sinf+0x2c>
 800e236:	f7f2 fcb3 	bl	8000ba0 <__aeabi_fsub>
 800e23a:	b003      	add	sp, #12
 800e23c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e240:	4669      	mov	r1, sp
 800e242:	f000 f95d 	bl	800e500 <__ieee754_rem_pio2f>
 800e246:	f000 0003 	and.w	r0, r0, #3
 800e24a:	2801      	cmp	r0, #1
 800e24c:	d008      	beq.n	800e260 <sinf+0x4c>
 800e24e:	2802      	cmp	r0, #2
 800e250:	d00b      	beq.n	800e26a <sinf+0x56>
 800e252:	b990      	cbnz	r0, 800e27a <sinf+0x66>
 800e254:	2201      	movs	r2, #1
 800e256:	9901      	ldr	r1, [sp, #4]
 800e258:	9800      	ldr	r0, [sp, #0]
 800e25a:	f000 f8db 	bl	800e414 <__kernel_sinf>
 800e25e:	e7ec      	b.n	800e23a <sinf+0x26>
 800e260:	9901      	ldr	r1, [sp, #4]
 800e262:	9800      	ldr	r0, [sp, #0]
 800e264:	f000 f856 	bl	800e314 <__kernel_cosf>
 800e268:	e7e7      	b.n	800e23a <sinf+0x26>
 800e26a:	2201      	movs	r2, #1
 800e26c:	9901      	ldr	r1, [sp, #4]
 800e26e:	9800      	ldr	r0, [sp, #0]
 800e270:	f000 f8d0 	bl	800e414 <__kernel_sinf>
 800e274:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e278:	e7df      	b.n	800e23a <sinf+0x26>
 800e27a:	9901      	ldr	r1, [sp, #4]
 800e27c:	9800      	ldr	r0, [sp, #0]
 800e27e:	f000 f849 	bl	800e314 <__kernel_cosf>
 800e282:	e7f7      	b.n	800e274 <sinf+0x60>
 800e284:	3f490fd8 	.word	0x3f490fd8

0800e288 <round>:
 800e288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e28e:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800e292:	2a13      	cmp	r2, #19
 800e294:	4604      	mov	r4, r0
 800e296:	460d      	mov	r5, r1
 800e298:	460b      	mov	r3, r1
 800e29a:	dc1a      	bgt.n	800e2d2 <round+0x4a>
 800e29c:	2a00      	cmp	r2, #0
 800e29e:	da0b      	bge.n	800e2b8 <round+0x30>
 800e2a0:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800e2a4:	3201      	adds	r2, #1
 800e2a6:	bf04      	itt	eq
 800e2a8:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800e2ac:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	461d      	mov	r5, r3
 800e2b4:	4614      	mov	r4, r2
 800e2b6:	e016      	b.n	800e2e6 <round+0x5e>
 800e2b8:	4815      	ldr	r0, [pc, #84]	@ (800e310 <round+0x88>)
 800e2ba:	4110      	asrs	r0, r2
 800e2bc:	4001      	ands	r1, r0
 800e2be:	4321      	orrs	r1, r4
 800e2c0:	d011      	beq.n	800e2e6 <round+0x5e>
 800e2c2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800e2c6:	fa41 f202 	asr.w	r2, r1, r2
 800e2ca:	4413      	add	r3, r2
 800e2cc:	ea23 0300 	bic.w	r3, r3, r0
 800e2d0:	e7ee      	b.n	800e2b0 <round+0x28>
 800e2d2:	2a33      	cmp	r2, #51	@ 0x33
 800e2d4:	dd0a      	ble.n	800e2ec <round+0x64>
 800e2d6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800e2da:	d104      	bne.n	800e2e6 <round+0x5e>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	f7f1 ff5d 	bl	800019c <__adddf3>
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	460d      	mov	r5, r1
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	4629      	mov	r1, r5
 800e2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800e2f4:	40f8      	lsrs	r0, r7
 800e2f6:	4220      	tst	r0, r4
 800e2f8:	d0f5      	beq.n	800e2e6 <round+0x5e>
 800e2fa:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800e2fe:	2201      	movs	r2, #1
 800e300:	408a      	lsls	r2, r1
 800e302:	1912      	adds	r2, r2, r4
 800e304:	bf28      	it	cs
 800e306:	3301      	addcs	r3, #1
 800e308:	ea22 0200 	bic.w	r2, r2, r0
 800e30c:	e7d1      	b.n	800e2b2 <round+0x2a>
 800e30e:	bf00      	nop
 800e310:	000fffff 	.word	0x000fffff

0800e314 <__kernel_cosf>:
 800e314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e318:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800e31c:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800e320:	4606      	mov	r6, r0
 800e322:	4688      	mov	r8, r1
 800e324:	d203      	bcs.n	800e32e <__kernel_cosf+0x1a>
 800e326:	f7f2 ff0b 	bl	8001140 <__aeabi_f2iz>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	d05c      	beq.n	800e3e8 <__kernel_cosf+0xd4>
 800e32e:	4631      	mov	r1, r6
 800e330:	4630      	mov	r0, r6
 800e332:	f7f2 fd3f 	bl	8000db4 <__aeabi_fmul>
 800e336:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e33a:	4604      	mov	r4, r0
 800e33c:	f7f2 fd3a 	bl	8000db4 <__aeabi_fmul>
 800e340:	492b      	ldr	r1, [pc, #172]	@ (800e3f0 <__kernel_cosf+0xdc>)
 800e342:	4607      	mov	r7, r0
 800e344:	4620      	mov	r0, r4
 800e346:	f7f2 fd35 	bl	8000db4 <__aeabi_fmul>
 800e34a:	492a      	ldr	r1, [pc, #168]	@ (800e3f4 <__kernel_cosf+0xe0>)
 800e34c:	f7f2 fc2a 	bl	8000ba4 <__addsf3>
 800e350:	4621      	mov	r1, r4
 800e352:	f7f2 fd2f 	bl	8000db4 <__aeabi_fmul>
 800e356:	4928      	ldr	r1, [pc, #160]	@ (800e3f8 <__kernel_cosf+0xe4>)
 800e358:	f7f2 fc22 	bl	8000ba0 <__aeabi_fsub>
 800e35c:	4621      	mov	r1, r4
 800e35e:	f7f2 fd29 	bl	8000db4 <__aeabi_fmul>
 800e362:	4926      	ldr	r1, [pc, #152]	@ (800e3fc <__kernel_cosf+0xe8>)
 800e364:	f7f2 fc1e 	bl	8000ba4 <__addsf3>
 800e368:	4621      	mov	r1, r4
 800e36a:	f7f2 fd23 	bl	8000db4 <__aeabi_fmul>
 800e36e:	4924      	ldr	r1, [pc, #144]	@ (800e400 <__kernel_cosf+0xec>)
 800e370:	f7f2 fc16 	bl	8000ba0 <__aeabi_fsub>
 800e374:	4621      	mov	r1, r4
 800e376:	f7f2 fd1d 	bl	8000db4 <__aeabi_fmul>
 800e37a:	4922      	ldr	r1, [pc, #136]	@ (800e404 <__kernel_cosf+0xf0>)
 800e37c:	f7f2 fc12 	bl	8000ba4 <__addsf3>
 800e380:	4621      	mov	r1, r4
 800e382:	f7f2 fd17 	bl	8000db4 <__aeabi_fmul>
 800e386:	4621      	mov	r1, r4
 800e388:	f7f2 fd14 	bl	8000db4 <__aeabi_fmul>
 800e38c:	4641      	mov	r1, r8
 800e38e:	4604      	mov	r4, r0
 800e390:	4630      	mov	r0, r6
 800e392:	f7f2 fd0f 	bl	8000db4 <__aeabi_fmul>
 800e396:	4601      	mov	r1, r0
 800e398:	4620      	mov	r0, r4
 800e39a:	f7f2 fc01 	bl	8000ba0 <__aeabi_fsub>
 800e39e:	4b1a      	ldr	r3, [pc, #104]	@ (800e408 <__kernel_cosf+0xf4>)
 800e3a0:	4604      	mov	r4, r0
 800e3a2:	429d      	cmp	r5, r3
 800e3a4:	d80a      	bhi.n	800e3bc <__kernel_cosf+0xa8>
 800e3a6:	4601      	mov	r1, r0
 800e3a8:	4638      	mov	r0, r7
 800e3aa:	f7f2 fbf9 	bl	8000ba0 <__aeabi_fsub>
 800e3ae:	4601      	mov	r1, r0
 800e3b0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e3b4:	f7f2 fbf4 	bl	8000ba0 <__aeabi_fsub>
 800e3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3bc:	4b13      	ldr	r3, [pc, #76]	@ (800e40c <__kernel_cosf+0xf8>)
 800e3be:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e3c2:	429d      	cmp	r5, r3
 800e3c4:	bf8c      	ite	hi
 800e3c6:	4d12      	ldrhi	r5, [pc, #72]	@ (800e410 <__kernel_cosf+0xfc>)
 800e3c8:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 800e3cc:	4629      	mov	r1, r5
 800e3ce:	f7f2 fbe7 	bl	8000ba0 <__aeabi_fsub>
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	4606      	mov	r6, r0
 800e3d6:	4638      	mov	r0, r7
 800e3d8:	f7f2 fbe2 	bl	8000ba0 <__aeabi_fsub>
 800e3dc:	4621      	mov	r1, r4
 800e3de:	f7f2 fbdf 	bl	8000ba0 <__aeabi_fsub>
 800e3e2:	4601      	mov	r1, r0
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	e7e5      	b.n	800e3b4 <__kernel_cosf+0xa0>
 800e3e8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e3ec:	e7e4      	b.n	800e3b8 <__kernel_cosf+0xa4>
 800e3ee:	bf00      	nop
 800e3f0:	ad47d74e 	.word	0xad47d74e
 800e3f4:	310f74f6 	.word	0x310f74f6
 800e3f8:	3493f27c 	.word	0x3493f27c
 800e3fc:	37d00d01 	.word	0x37d00d01
 800e400:	3ab60b61 	.word	0x3ab60b61
 800e404:	3d2aaaab 	.word	0x3d2aaaab
 800e408:	3e999999 	.word	0x3e999999
 800e40c:	3f480000 	.word	0x3f480000
 800e410:	3e900000 	.word	0x3e900000

0800e414 <__kernel_sinf>:
 800e414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e418:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e41c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e420:	4604      	mov	r4, r0
 800e422:	460f      	mov	r7, r1
 800e424:	4691      	mov	r9, r2
 800e426:	d203      	bcs.n	800e430 <__kernel_sinf+0x1c>
 800e428:	f7f2 fe8a 	bl	8001140 <__aeabi_f2iz>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d035      	beq.n	800e49c <__kernel_sinf+0x88>
 800e430:	4621      	mov	r1, r4
 800e432:	4620      	mov	r0, r4
 800e434:	f7f2 fcbe 	bl	8000db4 <__aeabi_fmul>
 800e438:	4605      	mov	r5, r0
 800e43a:	4601      	mov	r1, r0
 800e43c:	4620      	mov	r0, r4
 800e43e:	f7f2 fcb9 	bl	8000db4 <__aeabi_fmul>
 800e442:	4929      	ldr	r1, [pc, #164]	@ (800e4e8 <__kernel_sinf+0xd4>)
 800e444:	4606      	mov	r6, r0
 800e446:	4628      	mov	r0, r5
 800e448:	f7f2 fcb4 	bl	8000db4 <__aeabi_fmul>
 800e44c:	4927      	ldr	r1, [pc, #156]	@ (800e4ec <__kernel_sinf+0xd8>)
 800e44e:	f7f2 fba7 	bl	8000ba0 <__aeabi_fsub>
 800e452:	4629      	mov	r1, r5
 800e454:	f7f2 fcae 	bl	8000db4 <__aeabi_fmul>
 800e458:	4925      	ldr	r1, [pc, #148]	@ (800e4f0 <__kernel_sinf+0xdc>)
 800e45a:	f7f2 fba3 	bl	8000ba4 <__addsf3>
 800e45e:	4629      	mov	r1, r5
 800e460:	f7f2 fca8 	bl	8000db4 <__aeabi_fmul>
 800e464:	4923      	ldr	r1, [pc, #140]	@ (800e4f4 <__kernel_sinf+0xe0>)
 800e466:	f7f2 fb9b 	bl	8000ba0 <__aeabi_fsub>
 800e46a:	4629      	mov	r1, r5
 800e46c:	f7f2 fca2 	bl	8000db4 <__aeabi_fmul>
 800e470:	4921      	ldr	r1, [pc, #132]	@ (800e4f8 <__kernel_sinf+0xe4>)
 800e472:	f7f2 fb97 	bl	8000ba4 <__addsf3>
 800e476:	4680      	mov	r8, r0
 800e478:	f1b9 0f00 	cmp.w	r9, #0
 800e47c:	d111      	bne.n	800e4a2 <__kernel_sinf+0x8e>
 800e47e:	4601      	mov	r1, r0
 800e480:	4628      	mov	r0, r5
 800e482:	f7f2 fc97 	bl	8000db4 <__aeabi_fmul>
 800e486:	491d      	ldr	r1, [pc, #116]	@ (800e4fc <__kernel_sinf+0xe8>)
 800e488:	f7f2 fb8a 	bl	8000ba0 <__aeabi_fsub>
 800e48c:	4631      	mov	r1, r6
 800e48e:	f7f2 fc91 	bl	8000db4 <__aeabi_fmul>
 800e492:	4601      	mov	r1, r0
 800e494:	4620      	mov	r0, r4
 800e496:	f7f2 fb85 	bl	8000ba4 <__addsf3>
 800e49a:	4604      	mov	r4, r0
 800e49c:	4620      	mov	r0, r4
 800e49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4a2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e4a6:	4638      	mov	r0, r7
 800e4a8:	f7f2 fc84 	bl	8000db4 <__aeabi_fmul>
 800e4ac:	4641      	mov	r1, r8
 800e4ae:	4681      	mov	r9, r0
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f7f2 fc7f 	bl	8000db4 <__aeabi_fmul>
 800e4b6:	4601      	mov	r1, r0
 800e4b8:	4648      	mov	r0, r9
 800e4ba:	f7f2 fb71 	bl	8000ba0 <__aeabi_fsub>
 800e4be:	4629      	mov	r1, r5
 800e4c0:	f7f2 fc78 	bl	8000db4 <__aeabi_fmul>
 800e4c4:	4639      	mov	r1, r7
 800e4c6:	f7f2 fb6b 	bl	8000ba0 <__aeabi_fsub>
 800e4ca:	490c      	ldr	r1, [pc, #48]	@ (800e4fc <__kernel_sinf+0xe8>)
 800e4cc:	4605      	mov	r5, r0
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	f7f2 fc70 	bl	8000db4 <__aeabi_fmul>
 800e4d4:	4601      	mov	r1, r0
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	f7f2 fb64 	bl	8000ba4 <__addsf3>
 800e4dc:	4601      	mov	r1, r0
 800e4de:	4620      	mov	r0, r4
 800e4e0:	f7f2 fb5e 	bl	8000ba0 <__aeabi_fsub>
 800e4e4:	e7d9      	b.n	800e49a <__kernel_sinf+0x86>
 800e4e6:	bf00      	nop
 800e4e8:	2f2ec9d3 	.word	0x2f2ec9d3
 800e4ec:	32d72f34 	.word	0x32d72f34
 800e4f0:	3638ef1b 	.word	0x3638ef1b
 800e4f4:	39500d01 	.word	0x39500d01
 800e4f8:	3c088889 	.word	0x3c088889
 800e4fc:	3e2aaaab 	.word	0x3e2aaaab

0800e500 <__ieee754_rem_pio2f>:
 800e500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	4aa4      	ldr	r2, [pc, #656]	@ (800e798 <__ieee754_rem_pio2f+0x298>)
 800e506:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800e50a:	4590      	cmp	r8, r2
 800e50c:	460c      	mov	r4, r1
 800e50e:	4682      	mov	sl, r0
 800e510:	b087      	sub	sp, #28
 800e512:	d804      	bhi.n	800e51e <__ieee754_rem_pio2f+0x1e>
 800e514:	2300      	movs	r3, #0
 800e516:	6008      	str	r0, [r1, #0]
 800e518:	604b      	str	r3, [r1, #4]
 800e51a:	2500      	movs	r5, #0
 800e51c:	e01d      	b.n	800e55a <__ieee754_rem_pio2f+0x5a>
 800e51e:	4a9f      	ldr	r2, [pc, #636]	@ (800e79c <__ieee754_rem_pio2f+0x29c>)
 800e520:	4590      	cmp	r8, r2
 800e522:	d84f      	bhi.n	800e5c4 <__ieee754_rem_pio2f+0xc4>
 800e524:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800e528:	2800      	cmp	r0, #0
 800e52a:	499d      	ldr	r1, [pc, #628]	@ (800e7a0 <__ieee754_rem_pio2f+0x2a0>)
 800e52c:	4f9d      	ldr	r7, [pc, #628]	@ (800e7a4 <__ieee754_rem_pio2f+0x2a4>)
 800e52e:	f025 050f 	bic.w	r5, r5, #15
 800e532:	dd24      	ble.n	800e57e <__ieee754_rem_pio2f+0x7e>
 800e534:	f7f2 fb34 	bl	8000ba0 <__aeabi_fsub>
 800e538:	42bd      	cmp	r5, r7
 800e53a:	4606      	mov	r6, r0
 800e53c:	d011      	beq.n	800e562 <__ieee754_rem_pio2f+0x62>
 800e53e:	499a      	ldr	r1, [pc, #616]	@ (800e7a8 <__ieee754_rem_pio2f+0x2a8>)
 800e540:	f7f2 fb2e 	bl	8000ba0 <__aeabi_fsub>
 800e544:	4601      	mov	r1, r0
 800e546:	4605      	mov	r5, r0
 800e548:	4630      	mov	r0, r6
 800e54a:	f7f2 fb29 	bl	8000ba0 <__aeabi_fsub>
 800e54e:	4996      	ldr	r1, [pc, #600]	@ (800e7a8 <__ieee754_rem_pio2f+0x2a8>)
 800e550:	f7f2 fb26 	bl	8000ba0 <__aeabi_fsub>
 800e554:	6025      	str	r5, [r4, #0]
 800e556:	2501      	movs	r5, #1
 800e558:	6060      	str	r0, [r4, #4]
 800e55a:	4628      	mov	r0, r5
 800e55c:	b007      	add	sp, #28
 800e55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e562:	4992      	ldr	r1, [pc, #584]	@ (800e7ac <__ieee754_rem_pio2f+0x2ac>)
 800e564:	f7f2 fb1c 	bl	8000ba0 <__aeabi_fsub>
 800e568:	4991      	ldr	r1, [pc, #580]	@ (800e7b0 <__ieee754_rem_pio2f+0x2b0>)
 800e56a:	4606      	mov	r6, r0
 800e56c:	f7f2 fb18 	bl	8000ba0 <__aeabi_fsub>
 800e570:	4601      	mov	r1, r0
 800e572:	4605      	mov	r5, r0
 800e574:	4630      	mov	r0, r6
 800e576:	f7f2 fb13 	bl	8000ba0 <__aeabi_fsub>
 800e57a:	498d      	ldr	r1, [pc, #564]	@ (800e7b0 <__ieee754_rem_pio2f+0x2b0>)
 800e57c:	e7e8      	b.n	800e550 <__ieee754_rem_pio2f+0x50>
 800e57e:	f7f2 fb11 	bl	8000ba4 <__addsf3>
 800e582:	42bd      	cmp	r5, r7
 800e584:	4606      	mov	r6, r0
 800e586:	d00f      	beq.n	800e5a8 <__ieee754_rem_pio2f+0xa8>
 800e588:	4987      	ldr	r1, [pc, #540]	@ (800e7a8 <__ieee754_rem_pio2f+0x2a8>)
 800e58a:	f7f2 fb0b 	bl	8000ba4 <__addsf3>
 800e58e:	4601      	mov	r1, r0
 800e590:	4605      	mov	r5, r0
 800e592:	4630      	mov	r0, r6
 800e594:	f7f2 fb04 	bl	8000ba0 <__aeabi_fsub>
 800e598:	4983      	ldr	r1, [pc, #524]	@ (800e7a8 <__ieee754_rem_pio2f+0x2a8>)
 800e59a:	f7f2 fb03 	bl	8000ba4 <__addsf3>
 800e59e:	6025      	str	r5, [r4, #0]
 800e5a0:	6060      	str	r0, [r4, #4]
 800e5a2:	f04f 35ff 	mov.w	r5, #4294967295
 800e5a6:	e7d8      	b.n	800e55a <__ieee754_rem_pio2f+0x5a>
 800e5a8:	4980      	ldr	r1, [pc, #512]	@ (800e7ac <__ieee754_rem_pio2f+0x2ac>)
 800e5aa:	f7f2 fafb 	bl	8000ba4 <__addsf3>
 800e5ae:	4980      	ldr	r1, [pc, #512]	@ (800e7b0 <__ieee754_rem_pio2f+0x2b0>)
 800e5b0:	4606      	mov	r6, r0
 800e5b2:	f7f2 faf7 	bl	8000ba4 <__addsf3>
 800e5b6:	4601      	mov	r1, r0
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	f7f2 faf0 	bl	8000ba0 <__aeabi_fsub>
 800e5c0:	497b      	ldr	r1, [pc, #492]	@ (800e7b0 <__ieee754_rem_pio2f+0x2b0>)
 800e5c2:	e7ea      	b.n	800e59a <__ieee754_rem_pio2f+0x9a>
 800e5c4:	4a7b      	ldr	r2, [pc, #492]	@ (800e7b4 <__ieee754_rem_pio2f+0x2b4>)
 800e5c6:	4590      	cmp	r8, r2
 800e5c8:	f200 8095 	bhi.w	800e6f6 <__ieee754_rem_pio2f+0x1f6>
 800e5cc:	f000 f8fe 	bl	800e7cc <fabsf>
 800e5d0:	4979      	ldr	r1, [pc, #484]	@ (800e7b8 <__ieee754_rem_pio2f+0x2b8>)
 800e5d2:	4606      	mov	r6, r0
 800e5d4:	f7f2 fbee 	bl	8000db4 <__aeabi_fmul>
 800e5d8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e5dc:	f7f2 fae2 	bl	8000ba4 <__addsf3>
 800e5e0:	f7f2 fdae 	bl	8001140 <__aeabi_f2iz>
 800e5e4:	4605      	mov	r5, r0
 800e5e6:	f7f2 fb91 	bl	8000d0c <__aeabi_i2f>
 800e5ea:	496d      	ldr	r1, [pc, #436]	@ (800e7a0 <__ieee754_rem_pio2f+0x2a0>)
 800e5ec:	4681      	mov	r9, r0
 800e5ee:	f7f2 fbe1 	bl	8000db4 <__aeabi_fmul>
 800e5f2:	4601      	mov	r1, r0
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	f7f2 fad3 	bl	8000ba0 <__aeabi_fsub>
 800e5fa:	496b      	ldr	r1, [pc, #428]	@ (800e7a8 <__ieee754_rem_pio2f+0x2a8>)
 800e5fc:	4607      	mov	r7, r0
 800e5fe:	4648      	mov	r0, r9
 800e600:	f7f2 fbd8 	bl	8000db4 <__aeabi_fmul>
 800e604:	2d1f      	cmp	r5, #31
 800e606:	4606      	mov	r6, r0
 800e608:	dc0e      	bgt.n	800e628 <__ieee754_rem_pio2f+0x128>
 800e60a:	4a6c      	ldr	r2, [pc, #432]	@ (800e7bc <__ieee754_rem_pio2f+0x2bc>)
 800e60c:	1e69      	subs	r1, r5, #1
 800e60e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e612:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800e616:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d004      	beq.n	800e628 <__ieee754_rem_pio2f+0x128>
 800e61e:	4631      	mov	r1, r6
 800e620:	4638      	mov	r0, r7
 800e622:	f7f2 fabd 	bl	8000ba0 <__aeabi_fsub>
 800e626:	e00b      	b.n	800e640 <__ieee754_rem_pio2f+0x140>
 800e628:	4631      	mov	r1, r6
 800e62a:	4638      	mov	r0, r7
 800e62c:	f7f2 fab8 	bl	8000ba0 <__aeabi_fsub>
 800e630:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e634:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800e638:	2b08      	cmp	r3, #8
 800e63a:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800e63e:	dc01      	bgt.n	800e644 <__ieee754_rem_pio2f+0x144>
 800e640:	6020      	str	r0, [r4, #0]
 800e642:	e026      	b.n	800e692 <__ieee754_rem_pio2f+0x192>
 800e644:	4959      	ldr	r1, [pc, #356]	@ (800e7ac <__ieee754_rem_pio2f+0x2ac>)
 800e646:	4648      	mov	r0, r9
 800e648:	f7f2 fbb4 	bl	8000db4 <__aeabi_fmul>
 800e64c:	4606      	mov	r6, r0
 800e64e:	4601      	mov	r1, r0
 800e650:	4638      	mov	r0, r7
 800e652:	f7f2 faa5 	bl	8000ba0 <__aeabi_fsub>
 800e656:	4601      	mov	r1, r0
 800e658:	4680      	mov	r8, r0
 800e65a:	4638      	mov	r0, r7
 800e65c:	f7f2 faa0 	bl	8000ba0 <__aeabi_fsub>
 800e660:	4631      	mov	r1, r6
 800e662:	f7f2 fa9d 	bl	8000ba0 <__aeabi_fsub>
 800e666:	4606      	mov	r6, r0
 800e668:	4951      	ldr	r1, [pc, #324]	@ (800e7b0 <__ieee754_rem_pio2f+0x2b0>)
 800e66a:	4648      	mov	r0, r9
 800e66c:	f7f2 fba2 	bl	8000db4 <__aeabi_fmul>
 800e670:	4631      	mov	r1, r6
 800e672:	f7f2 fa95 	bl	8000ba0 <__aeabi_fsub>
 800e676:	4601      	mov	r1, r0
 800e678:	4606      	mov	r6, r0
 800e67a:	4640      	mov	r0, r8
 800e67c:	f7f2 fa90 	bl	8000ba0 <__aeabi_fsub>
 800e680:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e684:	ebab 0b03 	sub.w	fp, fp, r3
 800e688:	f1bb 0f19 	cmp.w	fp, #25
 800e68c:	dc18      	bgt.n	800e6c0 <__ieee754_rem_pio2f+0x1c0>
 800e68e:	4647      	mov	r7, r8
 800e690:	6020      	str	r0, [r4, #0]
 800e692:	f8d4 8000 	ldr.w	r8, [r4]
 800e696:	4638      	mov	r0, r7
 800e698:	4641      	mov	r1, r8
 800e69a:	f7f2 fa81 	bl	8000ba0 <__aeabi_fsub>
 800e69e:	4631      	mov	r1, r6
 800e6a0:	f7f2 fa7e 	bl	8000ba0 <__aeabi_fsub>
 800e6a4:	f1ba 0f00 	cmp.w	sl, #0
 800e6a8:	6060      	str	r0, [r4, #4]
 800e6aa:	f6bf af56 	bge.w	800e55a <__ieee754_rem_pio2f+0x5a>
 800e6ae:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800e6b2:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e6b6:	f8c4 8000 	str.w	r8, [r4]
 800e6ba:	6060      	str	r0, [r4, #4]
 800e6bc:	426d      	negs	r5, r5
 800e6be:	e74c      	b.n	800e55a <__ieee754_rem_pio2f+0x5a>
 800e6c0:	493f      	ldr	r1, [pc, #252]	@ (800e7c0 <__ieee754_rem_pio2f+0x2c0>)
 800e6c2:	4648      	mov	r0, r9
 800e6c4:	f7f2 fb76 	bl	8000db4 <__aeabi_fmul>
 800e6c8:	4606      	mov	r6, r0
 800e6ca:	4601      	mov	r1, r0
 800e6cc:	4640      	mov	r0, r8
 800e6ce:	f7f2 fa67 	bl	8000ba0 <__aeabi_fsub>
 800e6d2:	4601      	mov	r1, r0
 800e6d4:	4607      	mov	r7, r0
 800e6d6:	4640      	mov	r0, r8
 800e6d8:	f7f2 fa62 	bl	8000ba0 <__aeabi_fsub>
 800e6dc:	4631      	mov	r1, r6
 800e6de:	f7f2 fa5f 	bl	8000ba0 <__aeabi_fsub>
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	4937      	ldr	r1, [pc, #220]	@ (800e7c4 <__ieee754_rem_pio2f+0x2c4>)
 800e6e6:	4648      	mov	r0, r9
 800e6e8:	f7f2 fb64 	bl	8000db4 <__aeabi_fmul>
 800e6ec:	4631      	mov	r1, r6
 800e6ee:	f7f2 fa57 	bl	8000ba0 <__aeabi_fsub>
 800e6f2:	4606      	mov	r6, r0
 800e6f4:	e793      	b.n	800e61e <__ieee754_rem_pio2f+0x11e>
 800e6f6:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e6fa:	d305      	bcc.n	800e708 <__ieee754_rem_pio2f+0x208>
 800e6fc:	4601      	mov	r1, r0
 800e6fe:	f7f2 fa4f 	bl	8000ba0 <__aeabi_fsub>
 800e702:	6060      	str	r0, [r4, #4]
 800e704:	6020      	str	r0, [r4, #0]
 800e706:	e708      	b.n	800e51a <__ieee754_rem_pio2f+0x1a>
 800e708:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800e70c:	3e86      	subs	r6, #134	@ 0x86
 800e70e:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800e712:	4640      	mov	r0, r8
 800e714:	f7f2 fd14 	bl	8001140 <__aeabi_f2iz>
 800e718:	f7f2 faf8 	bl	8000d0c <__aeabi_i2f>
 800e71c:	4601      	mov	r1, r0
 800e71e:	9003      	str	r0, [sp, #12]
 800e720:	4640      	mov	r0, r8
 800e722:	f7f2 fa3d 	bl	8000ba0 <__aeabi_fsub>
 800e726:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800e72a:	f7f2 fb43 	bl	8000db4 <__aeabi_fmul>
 800e72e:	4607      	mov	r7, r0
 800e730:	f7f2 fd06 	bl	8001140 <__aeabi_f2iz>
 800e734:	f7f2 faea 	bl	8000d0c <__aeabi_i2f>
 800e738:	4601      	mov	r1, r0
 800e73a:	9004      	str	r0, [sp, #16]
 800e73c:	4605      	mov	r5, r0
 800e73e:	4638      	mov	r0, r7
 800e740:	f7f2 fa2e 	bl	8000ba0 <__aeabi_fsub>
 800e744:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800e748:	f7f2 fb34 	bl	8000db4 <__aeabi_fmul>
 800e74c:	2100      	movs	r1, #0
 800e74e:	9005      	str	r0, [sp, #20]
 800e750:	f7f2 fcc4 	bl	80010dc <__aeabi_fcmpeq>
 800e754:	b1f0      	cbz	r0, 800e794 <__ieee754_rem_pio2f+0x294>
 800e756:	2100      	movs	r1, #0
 800e758:	4628      	mov	r0, r5
 800e75a:	f7f2 fcbf 	bl	80010dc <__aeabi_fcmpeq>
 800e75e:	2800      	cmp	r0, #0
 800e760:	bf14      	ite	ne
 800e762:	2301      	movne	r3, #1
 800e764:	2302      	moveq	r3, #2
 800e766:	4a18      	ldr	r2, [pc, #96]	@ (800e7c8 <__ieee754_rem_pio2f+0x2c8>)
 800e768:	4621      	mov	r1, r4
 800e76a:	9201      	str	r2, [sp, #4]
 800e76c:	2202      	movs	r2, #2
 800e76e:	a803      	add	r0, sp, #12
 800e770:	9200      	str	r2, [sp, #0]
 800e772:	4632      	mov	r2, r6
 800e774:	f000 f82e 	bl	800e7d4 <__kernel_rem_pio2f>
 800e778:	f1ba 0f00 	cmp.w	sl, #0
 800e77c:	4605      	mov	r5, r0
 800e77e:	f6bf aeec 	bge.w	800e55a <__ieee754_rem_pio2f+0x5a>
 800e782:	6823      	ldr	r3, [r4, #0]
 800e784:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e788:	6023      	str	r3, [r4, #0]
 800e78a:	6863      	ldr	r3, [r4, #4]
 800e78c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e790:	6063      	str	r3, [r4, #4]
 800e792:	e793      	b.n	800e6bc <__ieee754_rem_pio2f+0x1bc>
 800e794:	2303      	movs	r3, #3
 800e796:	e7e6      	b.n	800e766 <__ieee754_rem_pio2f+0x266>
 800e798:	3f490fd8 	.word	0x3f490fd8
 800e79c:	4016cbe3 	.word	0x4016cbe3
 800e7a0:	3fc90f80 	.word	0x3fc90f80
 800e7a4:	3fc90fd0 	.word	0x3fc90fd0
 800e7a8:	37354443 	.word	0x37354443
 800e7ac:	37354400 	.word	0x37354400
 800e7b0:	2e85a308 	.word	0x2e85a308
 800e7b4:	43490f80 	.word	0x43490f80
 800e7b8:	3f22f984 	.word	0x3f22f984
 800e7bc:	0800fb90 	.word	0x0800fb90
 800e7c0:	2e85a300 	.word	0x2e85a300
 800e7c4:	248d3132 	.word	0x248d3132
 800e7c8:	0800fc10 	.word	0x0800fc10

0800e7cc <fabsf>:
 800e7cc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e7d0:	4770      	bx	lr
	...

0800e7d4 <__kernel_rem_pio2f>:
 800e7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d8:	b0db      	sub	sp, #364	@ 0x16c
 800e7da:	9202      	str	r2, [sp, #8]
 800e7dc:	9304      	str	r3, [sp, #16]
 800e7de:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800e7e0:	4bad      	ldr	r3, [pc, #692]	@ (800ea98 <__kernel_rem_pio2f+0x2c4>)
 800e7e2:	9005      	str	r0, [sp, #20]
 800e7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7e8:	9100      	str	r1, [sp, #0]
 800e7ea:	9301      	str	r3, [sp, #4]
 800e7ec:	9b04      	ldr	r3, [sp, #16]
 800e7ee:	3b01      	subs	r3, #1
 800e7f0:	9303      	str	r3, [sp, #12]
 800e7f2:	9b02      	ldr	r3, [sp, #8]
 800e7f4:	1d1a      	adds	r2, r3, #4
 800e7f6:	f2c0 8099 	blt.w	800e92c <__kernel_rem_pio2f+0x158>
 800e7fa:	1edc      	subs	r4, r3, #3
 800e7fc:	bf48      	it	mi
 800e7fe:	1d1c      	addmi	r4, r3, #4
 800e800:	10e4      	asrs	r4, r4, #3
 800e802:	2500      	movs	r5, #0
 800e804:	f04f 0b00 	mov.w	fp, #0
 800e808:	1c67      	adds	r7, r4, #1
 800e80a:	00fb      	lsls	r3, r7, #3
 800e80c:	9306      	str	r3, [sp, #24]
 800e80e:	9b02      	ldr	r3, [sp, #8]
 800e810:	9a03      	ldr	r2, [sp, #12]
 800e812:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800e816:	9b01      	ldr	r3, [sp, #4]
 800e818:	eba4 0802 	sub.w	r8, r4, r2
 800e81c:	eb03 0902 	add.w	r9, r3, r2
 800e820:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800e822:	ae1e      	add	r6, sp, #120	@ 0x78
 800e824:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800e828:	454d      	cmp	r5, r9
 800e82a:	f340 8081 	ble.w	800e930 <__kernel_rem_pio2f+0x15c>
 800e82e:	9a04      	ldr	r2, [sp, #16]
 800e830:	ab1e      	add	r3, sp, #120	@ 0x78
 800e832:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800e836:	f04f 0900 	mov.w	r9, #0
 800e83a:	2300      	movs	r3, #0
 800e83c:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 800e840:	9a01      	ldr	r2, [sp, #4]
 800e842:	4591      	cmp	r9, r2
 800e844:	f340 809c 	ble.w	800e980 <__kernel_rem_pio2f+0x1ac>
 800e848:	4613      	mov	r3, r2
 800e84a:	aa0a      	add	r2, sp, #40	@ 0x28
 800e84c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e850:	9308      	str	r3, [sp, #32]
 800e852:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800e854:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e858:	9c01      	ldr	r4, [sp, #4]
 800e85a:	9307      	str	r3, [sp, #28]
 800e85c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800e860:	4646      	mov	r6, r8
 800e862:	4625      	mov	r5, r4
 800e864:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800e868:	ab5a      	add	r3, sp, #360	@ 0x168
 800e86a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e86e:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800e872:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800e876:	2d00      	cmp	r5, #0
 800e878:	f300 8087 	bgt.w	800e98a <__kernel_rem_pio2f+0x1b6>
 800e87c:	4639      	mov	r1, r7
 800e87e:	4658      	mov	r0, fp
 800e880:	f000 fa48 	bl	800ed14 <scalbnf>
 800e884:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800e888:	4605      	mov	r5, r0
 800e88a:	f7f2 fa93 	bl	8000db4 <__aeabi_fmul>
 800e88e:	f000 fa8d 	bl	800edac <floorf>
 800e892:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800e896:	f7f2 fa8d 	bl	8000db4 <__aeabi_fmul>
 800e89a:	4601      	mov	r1, r0
 800e89c:	4628      	mov	r0, r5
 800e89e:	f7f2 f97f 	bl	8000ba0 <__aeabi_fsub>
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	f7f2 fc4c 	bl	8001140 <__aeabi_f2iz>
 800e8a8:	4606      	mov	r6, r0
 800e8aa:	f7f2 fa2f 	bl	8000d0c <__aeabi_i2f>
 800e8ae:	4601      	mov	r1, r0
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	f7f2 f975 	bl	8000ba0 <__aeabi_fsub>
 800e8b6:	2f00      	cmp	r7, #0
 800e8b8:	4681      	mov	r9, r0
 800e8ba:	f340 8083 	ble.w	800e9c4 <__kernel_rem_pio2f+0x1f0>
 800e8be:	1e62      	subs	r2, r4, #1
 800e8c0:	ab0a      	add	r3, sp, #40	@ 0x28
 800e8c2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e8c6:	f1c7 0108 	rsb	r1, r7, #8
 800e8ca:	fa45 f301 	asr.w	r3, r5, r1
 800e8ce:	441e      	add	r6, r3
 800e8d0:	408b      	lsls	r3, r1
 800e8d2:	1aed      	subs	r5, r5, r3
 800e8d4:	ab0a      	add	r3, sp, #40	@ 0x28
 800e8d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e8da:	f1c7 0307 	rsb	r3, r7, #7
 800e8de:	411d      	asrs	r5, r3
 800e8e0:	2d00      	cmp	r5, #0
 800e8e2:	dd7c      	ble.n	800e9de <__kernel_rem_pio2f+0x20a>
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	4692      	mov	sl, r2
 800e8e8:	3601      	adds	r6, #1
 800e8ea:	4294      	cmp	r4, r2
 800e8ec:	f300 80ac 	bgt.w	800ea48 <__kernel_rem_pio2f+0x274>
 800e8f0:	2f00      	cmp	r7, #0
 800e8f2:	dd05      	ble.n	800e900 <__kernel_rem_pio2f+0x12c>
 800e8f4:	2f01      	cmp	r7, #1
 800e8f6:	f000 80b8 	beq.w	800ea6a <__kernel_rem_pio2f+0x296>
 800e8fa:	2f02      	cmp	r7, #2
 800e8fc:	f000 80bf 	beq.w	800ea7e <__kernel_rem_pio2f+0x2aa>
 800e900:	2d02      	cmp	r5, #2
 800e902:	d16c      	bne.n	800e9de <__kernel_rem_pio2f+0x20a>
 800e904:	4649      	mov	r1, r9
 800e906:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e90a:	f7f2 f949 	bl	8000ba0 <__aeabi_fsub>
 800e90e:	4681      	mov	r9, r0
 800e910:	f1ba 0f00 	cmp.w	sl, #0
 800e914:	d063      	beq.n	800e9de <__kernel_rem_pio2f+0x20a>
 800e916:	4639      	mov	r1, r7
 800e918:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e91c:	f000 f9fa 	bl	800ed14 <scalbnf>
 800e920:	4601      	mov	r1, r0
 800e922:	4648      	mov	r0, r9
 800e924:	f7f2 f93c 	bl	8000ba0 <__aeabi_fsub>
 800e928:	4681      	mov	r9, r0
 800e92a:	e058      	b.n	800e9de <__kernel_rem_pio2f+0x20a>
 800e92c:	2400      	movs	r4, #0
 800e92e:	e768      	b.n	800e802 <__kernel_rem_pio2f+0x2e>
 800e930:	eb18 0f05 	cmn.w	r8, r5
 800e934:	d407      	bmi.n	800e946 <__kernel_rem_pio2f+0x172>
 800e936:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800e93a:	f7f2 f9e7 	bl	8000d0c <__aeabi_i2f>
 800e93e:	f846 0b04 	str.w	r0, [r6], #4
 800e942:	3501      	adds	r5, #1
 800e944:	e770      	b.n	800e828 <__kernel_rem_pio2f+0x54>
 800e946:	4658      	mov	r0, fp
 800e948:	e7f9      	b.n	800e93e <__kernel_rem_pio2f+0x16a>
 800e94a:	9307      	str	r3, [sp, #28]
 800e94c:	9b05      	ldr	r3, [sp, #20]
 800e94e:	f8da 1000 	ldr.w	r1, [sl]
 800e952:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e956:	f7f2 fa2d 	bl	8000db4 <__aeabi_fmul>
 800e95a:	4601      	mov	r1, r0
 800e95c:	4630      	mov	r0, r6
 800e95e:	f7f2 f921 	bl	8000ba4 <__addsf3>
 800e962:	4606      	mov	r6, r0
 800e964:	9b07      	ldr	r3, [sp, #28]
 800e966:	f108 0801 	add.w	r8, r8, #1
 800e96a:	9a03      	ldr	r2, [sp, #12]
 800e96c:	f1aa 0a04 	sub.w	sl, sl, #4
 800e970:	4590      	cmp	r8, r2
 800e972:	ddea      	ble.n	800e94a <__kernel_rem_pio2f+0x176>
 800e974:	f84b 6b04 	str.w	r6, [fp], #4
 800e978:	f109 0901 	add.w	r9, r9, #1
 800e97c:	3504      	adds	r5, #4
 800e97e:	e75f      	b.n	800e840 <__kernel_rem_pio2f+0x6c>
 800e980:	46aa      	mov	sl, r5
 800e982:	461e      	mov	r6, r3
 800e984:	f04f 0800 	mov.w	r8, #0
 800e988:	e7ef      	b.n	800e96a <__kernel_rem_pio2f+0x196>
 800e98a:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800e98e:	4658      	mov	r0, fp
 800e990:	f7f2 fa10 	bl	8000db4 <__aeabi_fmul>
 800e994:	f7f2 fbd4 	bl	8001140 <__aeabi_f2iz>
 800e998:	f7f2 f9b8 	bl	8000d0c <__aeabi_i2f>
 800e99c:	4649      	mov	r1, r9
 800e99e:	9009      	str	r0, [sp, #36]	@ 0x24
 800e9a0:	f7f2 fa08 	bl	8000db4 <__aeabi_fmul>
 800e9a4:	4601      	mov	r1, r0
 800e9a6:	4658      	mov	r0, fp
 800e9a8:	f7f2 f8fa 	bl	8000ba0 <__aeabi_fsub>
 800e9ac:	f7f2 fbc8 	bl	8001140 <__aeabi_f2iz>
 800e9b0:	3d01      	subs	r5, #1
 800e9b2:	f846 0b04 	str.w	r0, [r6], #4
 800e9b6:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800e9ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9bc:	f7f2 f8f2 	bl	8000ba4 <__addsf3>
 800e9c0:	4683      	mov	fp, r0
 800e9c2:	e758      	b.n	800e876 <__kernel_rem_pio2f+0xa2>
 800e9c4:	d105      	bne.n	800e9d2 <__kernel_rem_pio2f+0x1fe>
 800e9c6:	1e63      	subs	r3, r4, #1
 800e9c8:	aa0a      	add	r2, sp, #40	@ 0x28
 800e9ca:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800e9ce:	11ed      	asrs	r5, r5, #7
 800e9d0:	e786      	b.n	800e8e0 <__kernel_rem_pio2f+0x10c>
 800e9d2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e9d6:	f7f2 fb9f 	bl	8001118 <__aeabi_fcmpge>
 800e9da:	4605      	mov	r5, r0
 800e9dc:	bb90      	cbnz	r0, 800ea44 <__kernel_rem_pio2f+0x270>
 800e9de:	2100      	movs	r1, #0
 800e9e0:	4648      	mov	r0, r9
 800e9e2:	f7f2 fb7b 	bl	80010dc <__aeabi_fcmpeq>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	f000 8090 	beq.w	800eb0c <__kernel_rem_pio2f+0x338>
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	1e63      	subs	r3, r4, #1
 800e9f0:	9901      	ldr	r1, [sp, #4]
 800e9f2:	428b      	cmp	r3, r1
 800e9f4:	da4a      	bge.n	800ea8c <__kernel_rem_pio2f+0x2b8>
 800e9f6:	2a00      	cmp	r2, #0
 800e9f8:	d076      	beq.n	800eae8 <__kernel_rem_pio2f+0x314>
 800e9fa:	3c01      	subs	r4, #1
 800e9fc:	ab0a      	add	r3, sp, #40	@ 0x28
 800e9fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ea02:	3f08      	subs	r7, #8
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d0f8      	beq.n	800e9fa <__kernel_rem_pio2f+0x226>
 800ea08:	4639      	mov	r1, r7
 800ea0a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ea0e:	f000 f981 	bl	800ed14 <scalbnf>
 800ea12:	46a2      	mov	sl, r4
 800ea14:	4607      	mov	r7, r0
 800ea16:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800ea1a:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800ea1e:	f1ba 0f00 	cmp.w	sl, #0
 800ea22:	f280 80a1 	bge.w	800eb68 <__kernel_rem_pio2f+0x394>
 800ea26:	4627      	mov	r7, r4
 800ea28:	2200      	movs	r2, #0
 800ea2a:	2f00      	cmp	r7, #0
 800ea2c:	f2c0 80cb 	blt.w	800ebc6 <__kernel_rem_pio2f+0x3f2>
 800ea30:	a946      	add	r1, sp, #280	@ 0x118
 800ea32:	4690      	mov	r8, r2
 800ea34:	f04f 0a00 	mov.w	sl, #0
 800ea38:	4b18      	ldr	r3, [pc, #96]	@ (800ea9c <__kernel_rem_pio2f+0x2c8>)
 800ea3a:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800ea3e:	eba4 0907 	sub.w	r9, r4, r7
 800ea42:	e0b4      	b.n	800ebae <__kernel_rem_pio2f+0x3da>
 800ea44:	2502      	movs	r5, #2
 800ea46:	e74d      	b.n	800e8e4 <__kernel_rem_pio2f+0x110>
 800ea48:	f858 3b04 	ldr.w	r3, [r8], #4
 800ea4c:	f1ba 0f00 	cmp.w	sl, #0
 800ea50:	d108      	bne.n	800ea64 <__kernel_rem_pio2f+0x290>
 800ea52:	b123      	cbz	r3, 800ea5e <__kernel_rem_pio2f+0x28a>
 800ea54:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800ea58:	f848 3c04 	str.w	r3, [r8, #-4]
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	469a      	mov	sl, r3
 800ea60:	3201      	adds	r2, #1
 800ea62:	e742      	b.n	800e8ea <__kernel_rem_pio2f+0x116>
 800ea64:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800ea68:	e7f6      	b.n	800ea58 <__kernel_rem_pio2f+0x284>
 800ea6a:	1e62      	subs	r2, r4, #1
 800ea6c:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea76:	a90a      	add	r1, sp, #40	@ 0x28
 800ea78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ea7c:	e740      	b.n	800e900 <__kernel_rem_pio2f+0x12c>
 800ea7e:	1e62      	subs	r2, r4, #1
 800ea80:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ea8a:	e7f4      	b.n	800ea76 <__kernel_rem_pio2f+0x2a2>
 800ea8c:	a90a      	add	r1, sp, #40	@ 0x28
 800ea8e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ea92:	3b01      	subs	r3, #1
 800ea94:	430a      	orrs	r2, r1
 800ea96:	e7ab      	b.n	800e9f0 <__kernel_rem_pio2f+0x21c>
 800ea98:	0800ff54 	.word	0x0800ff54
 800ea9c:	0800ff28 	.word	0x0800ff28
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800eaa6:	2900      	cmp	r1, #0
 800eaa8:	d0fa      	beq.n	800eaa0 <__kernel_rem_pio2f+0x2cc>
 800eaaa:	9a04      	ldr	r2, [sp, #16]
 800eaac:	a91e      	add	r1, sp, #120	@ 0x78
 800eaae:	18a2      	adds	r2, r4, r2
 800eab0:	1c66      	adds	r6, r4, #1
 800eab2:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800eab6:	441c      	add	r4, r3
 800eab8:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800eabc:	42b4      	cmp	r4, r6
 800eabe:	f6ff aecd 	blt.w	800e85c <__kernel_rem_pio2f+0x88>
 800eac2:	9b07      	ldr	r3, [sp, #28]
 800eac4:	46ab      	mov	fp, r5
 800eac6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800eaca:	f7f2 f91f 	bl	8000d0c <__aeabi_i2f>
 800eace:	f04f 0a00 	mov.w	sl, #0
 800ead2:	f04f 0800 	mov.w	r8, #0
 800ead6:	6028      	str	r0, [r5, #0]
 800ead8:	9b03      	ldr	r3, [sp, #12]
 800eada:	459a      	cmp	sl, r3
 800eadc:	dd07      	ble.n	800eaee <__kernel_rem_pio2f+0x31a>
 800eade:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800eae2:	3504      	adds	r5, #4
 800eae4:	3601      	adds	r6, #1
 800eae6:	e7e9      	b.n	800eabc <__kernel_rem_pio2f+0x2e8>
 800eae8:	2301      	movs	r3, #1
 800eaea:	9a08      	ldr	r2, [sp, #32]
 800eaec:	e7d9      	b.n	800eaa2 <__kernel_rem_pio2f+0x2ce>
 800eaee:	9b05      	ldr	r3, [sp, #20]
 800eaf0:	f85b 0904 	ldr.w	r0, [fp], #-4
 800eaf4:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800eaf8:	f7f2 f95c 	bl	8000db4 <__aeabi_fmul>
 800eafc:	4601      	mov	r1, r0
 800eafe:	4640      	mov	r0, r8
 800eb00:	f7f2 f850 	bl	8000ba4 <__addsf3>
 800eb04:	f10a 0a01 	add.w	sl, sl, #1
 800eb08:	4680      	mov	r8, r0
 800eb0a:	e7e5      	b.n	800ead8 <__kernel_rem_pio2f+0x304>
 800eb0c:	9b06      	ldr	r3, [sp, #24]
 800eb0e:	9a02      	ldr	r2, [sp, #8]
 800eb10:	4648      	mov	r0, r9
 800eb12:	1a99      	subs	r1, r3, r2
 800eb14:	f000 f8fe 	bl	800ed14 <scalbnf>
 800eb18:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800eb1c:	4680      	mov	r8, r0
 800eb1e:	f7f2 fafb 	bl	8001118 <__aeabi_fcmpge>
 800eb22:	b1f8      	cbz	r0, 800eb64 <__kernel_rem_pio2f+0x390>
 800eb24:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800eb28:	4640      	mov	r0, r8
 800eb2a:	f7f2 f943 	bl	8000db4 <__aeabi_fmul>
 800eb2e:	f7f2 fb07 	bl	8001140 <__aeabi_f2iz>
 800eb32:	f7f2 f8eb 	bl	8000d0c <__aeabi_i2f>
 800eb36:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800eb3a:	4681      	mov	r9, r0
 800eb3c:	f7f2 f93a 	bl	8000db4 <__aeabi_fmul>
 800eb40:	4601      	mov	r1, r0
 800eb42:	4640      	mov	r0, r8
 800eb44:	f7f2 f82c 	bl	8000ba0 <__aeabi_fsub>
 800eb48:	f7f2 fafa 	bl	8001140 <__aeabi_f2iz>
 800eb4c:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eb52:	4648      	mov	r0, r9
 800eb54:	3401      	adds	r4, #1
 800eb56:	3708      	adds	r7, #8
 800eb58:	f7f2 faf2 	bl	8001140 <__aeabi_f2iz>
 800eb5c:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb5e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eb62:	e751      	b.n	800ea08 <__kernel_rem_pio2f+0x234>
 800eb64:	4640      	mov	r0, r8
 800eb66:	e7f7      	b.n	800eb58 <__kernel_rem_pio2f+0x384>
 800eb68:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb6a:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800eb6e:	f7f2 f8cd 	bl	8000d0c <__aeabi_i2f>
 800eb72:	4639      	mov	r1, r7
 800eb74:	f7f2 f91e 	bl	8000db4 <__aeabi_fmul>
 800eb78:	4649      	mov	r1, r9
 800eb7a:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800eb7e:	4638      	mov	r0, r7
 800eb80:	f7f2 f918 	bl	8000db4 <__aeabi_fmul>
 800eb84:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb88:	4607      	mov	r7, r0
 800eb8a:	e748      	b.n	800ea1e <__kernel_rem_pio2f+0x24a>
 800eb8c:	f853 0b04 	ldr.w	r0, [r3], #4
 800eb90:	f85b 1b04 	ldr.w	r1, [fp], #4
 800eb94:	9203      	str	r2, [sp, #12]
 800eb96:	9302      	str	r3, [sp, #8]
 800eb98:	f7f2 f90c 	bl	8000db4 <__aeabi_fmul>
 800eb9c:	4601      	mov	r1, r0
 800eb9e:	4640      	mov	r0, r8
 800eba0:	f7f2 f800 	bl	8000ba4 <__addsf3>
 800eba4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800eba8:	4680      	mov	r8, r0
 800ebaa:	f10a 0a01 	add.w	sl, sl, #1
 800ebae:	9901      	ldr	r1, [sp, #4]
 800ebb0:	458a      	cmp	sl, r1
 800ebb2:	dc01      	bgt.n	800ebb8 <__kernel_rem_pio2f+0x3e4>
 800ebb4:	45d1      	cmp	r9, sl
 800ebb6:	dae9      	bge.n	800eb8c <__kernel_rem_pio2f+0x3b8>
 800ebb8:	ab5a      	add	r3, sp, #360	@ 0x168
 800ebba:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800ebbe:	f849 8ca0 	str.w	r8, [r9, #-160]
 800ebc2:	3f01      	subs	r7, #1
 800ebc4:	e731      	b.n	800ea2a <__kernel_rem_pio2f+0x256>
 800ebc6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ebc8:	2b02      	cmp	r3, #2
 800ebca:	dc07      	bgt.n	800ebdc <__kernel_rem_pio2f+0x408>
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	dc4e      	bgt.n	800ec6e <__kernel_rem_pio2f+0x49a>
 800ebd0:	d02e      	beq.n	800ec30 <__kernel_rem_pio2f+0x45c>
 800ebd2:	f006 0007 	and.w	r0, r6, #7
 800ebd6:	b05b      	add	sp, #364	@ 0x16c
 800ebd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebdc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ebde:	2b03      	cmp	r3, #3
 800ebe0:	d1f7      	bne.n	800ebd2 <__kernel_rem_pio2f+0x3fe>
 800ebe2:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800ebe6:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800ebea:	46b8      	mov	r8, r7
 800ebec:	46a2      	mov	sl, r4
 800ebee:	f1ba 0f00 	cmp.w	sl, #0
 800ebf2:	dc49      	bgt.n	800ec88 <__kernel_rem_pio2f+0x4b4>
 800ebf4:	46a1      	mov	r9, r4
 800ebf6:	f1b9 0f01 	cmp.w	r9, #1
 800ebfa:	dc60      	bgt.n	800ecbe <__kernel_rem_pio2f+0x4ea>
 800ebfc:	2000      	movs	r0, #0
 800ebfe:	2c01      	cmp	r4, #1
 800ec00:	dc76      	bgt.n	800ecf0 <__kernel_rem_pio2f+0x51c>
 800ec02:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800ec04:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800ec06:	2d00      	cmp	r5, #0
 800ec08:	d178      	bne.n	800ecfc <__kernel_rem_pio2f+0x528>
 800ec0a:	9900      	ldr	r1, [sp, #0]
 800ec0c:	600a      	str	r2, [r1, #0]
 800ec0e:	460a      	mov	r2, r1
 800ec10:	604b      	str	r3, [r1, #4]
 800ec12:	6090      	str	r0, [r2, #8]
 800ec14:	e7dd      	b.n	800ebd2 <__kernel_rem_pio2f+0x3fe>
 800ec16:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800ec1a:	f7f1 ffc3 	bl	8000ba4 <__addsf3>
 800ec1e:	3c01      	subs	r4, #1
 800ec20:	2c00      	cmp	r4, #0
 800ec22:	daf8      	bge.n	800ec16 <__kernel_rem_pio2f+0x442>
 800ec24:	b10d      	cbz	r5, 800ec2a <__kernel_rem_pio2f+0x456>
 800ec26:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800ec2a:	9b00      	ldr	r3, [sp, #0]
 800ec2c:	6018      	str	r0, [r3, #0]
 800ec2e:	e7d0      	b.n	800ebd2 <__kernel_rem_pio2f+0x3fe>
 800ec30:	2000      	movs	r0, #0
 800ec32:	af32      	add	r7, sp, #200	@ 0xc8
 800ec34:	e7f4      	b.n	800ec20 <__kernel_rem_pio2f+0x44c>
 800ec36:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800ec3a:	f7f1 ffb3 	bl	8000ba4 <__addsf3>
 800ec3e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec42:	f1b8 0f00 	cmp.w	r8, #0
 800ec46:	daf6      	bge.n	800ec36 <__kernel_rem_pio2f+0x462>
 800ec48:	b1ad      	cbz	r5, 800ec76 <__kernel_rem_pio2f+0x4a2>
 800ec4a:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800ec4e:	9a00      	ldr	r2, [sp, #0]
 800ec50:	4601      	mov	r1, r0
 800ec52:	6013      	str	r3, [r2, #0]
 800ec54:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800ec56:	f7f1 ffa3 	bl	8000ba0 <__aeabi_fsub>
 800ec5a:	f04f 0801 	mov.w	r8, #1
 800ec5e:	4544      	cmp	r4, r8
 800ec60:	da0b      	bge.n	800ec7a <__kernel_rem_pio2f+0x4a6>
 800ec62:	b10d      	cbz	r5, 800ec68 <__kernel_rem_pio2f+0x494>
 800ec64:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800ec68:	9b00      	ldr	r3, [sp, #0]
 800ec6a:	6058      	str	r0, [r3, #4]
 800ec6c:	e7b1      	b.n	800ebd2 <__kernel_rem_pio2f+0x3fe>
 800ec6e:	46a0      	mov	r8, r4
 800ec70:	2000      	movs	r0, #0
 800ec72:	af32      	add	r7, sp, #200	@ 0xc8
 800ec74:	e7e5      	b.n	800ec42 <__kernel_rem_pio2f+0x46e>
 800ec76:	4603      	mov	r3, r0
 800ec78:	e7e9      	b.n	800ec4e <__kernel_rem_pio2f+0x47a>
 800ec7a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ec7e:	f7f1 ff91 	bl	8000ba4 <__addsf3>
 800ec82:	f108 0801 	add.w	r8, r8, #1
 800ec86:	e7ea      	b.n	800ec5e <__kernel_rem_pio2f+0x48a>
 800ec88:	f8d8 3000 	ldr.w	r3, [r8]
 800ec8c:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800ec90:	4619      	mov	r1, r3
 800ec92:	4610      	mov	r0, r2
 800ec94:	9302      	str	r3, [sp, #8]
 800ec96:	9201      	str	r2, [sp, #4]
 800ec98:	f7f1 ff84 	bl	8000ba4 <__addsf3>
 800ec9c:	9a01      	ldr	r2, [sp, #4]
 800ec9e:	4601      	mov	r1, r0
 800eca0:	4681      	mov	r9, r0
 800eca2:	4610      	mov	r0, r2
 800eca4:	f7f1 ff7c 	bl	8000ba0 <__aeabi_fsub>
 800eca8:	9b02      	ldr	r3, [sp, #8]
 800ecaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecae:	4619      	mov	r1, r3
 800ecb0:	f7f1 ff78 	bl	8000ba4 <__addsf3>
 800ecb4:	f848 0904 	str.w	r0, [r8], #-4
 800ecb8:	f8c8 9000 	str.w	r9, [r8]
 800ecbc:	e797      	b.n	800ebee <__kernel_rem_pio2f+0x41a>
 800ecbe:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800ecc2:	f8d7 a000 	ldr.w	sl, [r7]
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	4651      	mov	r1, sl
 800ecca:	9301      	str	r3, [sp, #4]
 800eccc:	f7f1 ff6a 	bl	8000ba4 <__addsf3>
 800ecd0:	9b01      	ldr	r3, [sp, #4]
 800ecd2:	4601      	mov	r1, r0
 800ecd4:	4680      	mov	r8, r0
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7f1 ff62 	bl	8000ba0 <__aeabi_fsub>
 800ecdc:	4651      	mov	r1, sl
 800ecde:	f7f1 ff61 	bl	8000ba4 <__addsf3>
 800ece2:	f847 0904 	str.w	r0, [r7], #-4
 800ece6:	f109 39ff 	add.w	r9, r9, #4294967295
 800ecea:	f8c7 8000 	str.w	r8, [r7]
 800ecee:	e782      	b.n	800ebf6 <__kernel_rem_pio2f+0x422>
 800ecf0:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800ecf4:	f7f1 ff56 	bl	8000ba4 <__addsf3>
 800ecf8:	3c01      	subs	r4, #1
 800ecfa:	e780      	b.n	800ebfe <__kernel_rem_pio2f+0x42a>
 800ecfc:	9900      	ldr	r1, [sp, #0]
 800ecfe:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800ed02:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ed06:	600a      	str	r2, [r1, #0]
 800ed08:	604b      	str	r3, [r1, #4]
 800ed0a:	460a      	mov	r2, r1
 800ed0c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800ed10:	e77f      	b.n	800ec12 <__kernel_rem_pio2f+0x43e>
 800ed12:	bf00      	nop

0800ed14 <scalbnf>:
 800ed14:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800ed18:	b538      	push	{r3, r4, r5, lr}
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	460d      	mov	r5, r1
 800ed1e:	4604      	mov	r4, r0
 800ed20:	d02e      	beq.n	800ed80 <scalbnf+0x6c>
 800ed22:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ed26:	d304      	bcc.n	800ed32 <scalbnf+0x1e>
 800ed28:	4601      	mov	r1, r0
 800ed2a:	f7f1 ff3b 	bl	8000ba4 <__addsf3>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	e026      	b.n	800ed80 <scalbnf+0x6c>
 800ed32:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800ed36:	d118      	bne.n	800ed6a <scalbnf+0x56>
 800ed38:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800ed3c:	f7f2 f83a 	bl	8000db4 <__aeabi_fmul>
 800ed40:	4a17      	ldr	r2, [pc, #92]	@ (800eda0 <scalbnf+0x8c>)
 800ed42:	4603      	mov	r3, r0
 800ed44:	4295      	cmp	r5, r2
 800ed46:	db0c      	blt.n	800ed62 <scalbnf+0x4e>
 800ed48:	4604      	mov	r4, r0
 800ed4a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ed4e:	3a19      	subs	r2, #25
 800ed50:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ed54:	428d      	cmp	r5, r1
 800ed56:	dd0a      	ble.n	800ed6e <scalbnf+0x5a>
 800ed58:	4912      	ldr	r1, [pc, #72]	@ (800eda4 <scalbnf+0x90>)
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f361 001e 	bfi	r0, r1, #0, #31
 800ed60:	e000      	b.n	800ed64 <scalbnf+0x50>
 800ed62:	4911      	ldr	r1, [pc, #68]	@ (800eda8 <scalbnf+0x94>)
 800ed64:	f7f2 f826 	bl	8000db4 <__aeabi_fmul>
 800ed68:	e7e1      	b.n	800ed2e <scalbnf+0x1a>
 800ed6a:	0dd2      	lsrs	r2, r2, #23
 800ed6c:	e7f0      	b.n	800ed50 <scalbnf+0x3c>
 800ed6e:	1951      	adds	r1, r2, r5
 800ed70:	29fe      	cmp	r1, #254	@ 0xfe
 800ed72:	dcf1      	bgt.n	800ed58 <scalbnf+0x44>
 800ed74:	2900      	cmp	r1, #0
 800ed76:	dd05      	ble.n	800ed84 <scalbnf+0x70>
 800ed78:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800ed7c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800ed80:	4618      	mov	r0, r3
 800ed82:	bd38      	pop	{r3, r4, r5, pc}
 800ed84:	f111 0f16 	cmn.w	r1, #22
 800ed88:	da01      	bge.n	800ed8e <scalbnf+0x7a>
 800ed8a:	4907      	ldr	r1, [pc, #28]	@ (800eda8 <scalbnf+0x94>)
 800ed8c:	e7e5      	b.n	800ed5a <scalbnf+0x46>
 800ed8e:	f101 0019 	add.w	r0, r1, #25
 800ed92:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800ed96:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800ed9a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800ed9e:	e7e1      	b.n	800ed64 <scalbnf+0x50>
 800eda0:	ffff3cb0 	.word	0xffff3cb0
 800eda4:	7149f2ca 	.word	0x7149f2ca
 800eda8:	0da24260 	.word	0x0da24260

0800edac <floorf>:
 800edac:	b570      	push	{r4, r5, r6, lr}
 800edae:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800edb2:	3d7f      	subs	r5, #127	@ 0x7f
 800edb4:	2d16      	cmp	r5, #22
 800edb6:	4601      	mov	r1, r0
 800edb8:	4604      	mov	r4, r0
 800edba:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800edbe:	dc26      	bgt.n	800ee0e <floorf+0x62>
 800edc0:	2d00      	cmp	r5, #0
 800edc2:	da0f      	bge.n	800ede4 <floorf+0x38>
 800edc4:	4917      	ldr	r1, [pc, #92]	@ (800ee24 <floorf+0x78>)
 800edc6:	f7f1 feed 	bl	8000ba4 <__addsf3>
 800edca:	2100      	movs	r1, #0
 800edcc:	f7f2 f9ae 	bl	800112c <__aeabi_fcmpgt>
 800edd0:	b130      	cbz	r0, 800ede0 <floorf+0x34>
 800edd2:	2c00      	cmp	r4, #0
 800edd4:	da23      	bge.n	800ee1e <floorf+0x72>
 800edd6:	2e00      	cmp	r6, #0
 800edd8:	4c13      	ldr	r4, [pc, #76]	@ (800ee28 <floorf+0x7c>)
 800edda:	bf08      	it	eq
 800eddc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ede0:	4621      	mov	r1, r4
 800ede2:	e01a      	b.n	800ee1a <floorf+0x6e>
 800ede4:	4e11      	ldr	r6, [pc, #68]	@ (800ee2c <floorf+0x80>)
 800ede6:	412e      	asrs	r6, r5
 800ede8:	4230      	tst	r0, r6
 800edea:	d016      	beq.n	800ee1a <floorf+0x6e>
 800edec:	490d      	ldr	r1, [pc, #52]	@ (800ee24 <floorf+0x78>)
 800edee:	f7f1 fed9 	bl	8000ba4 <__addsf3>
 800edf2:	2100      	movs	r1, #0
 800edf4:	f7f2 f99a 	bl	800112c <__aeabi_fcmpgt>
 800edf8:	2800      	cmp	r0, #0
 800edfa:	d0f1      	beq.n	800ede0 <floorf+0x34>
 800edfc:	2c00      	cmp	r4, #0
 800edfe:	bfbe      	ittt	lt
 800ee00:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800ee04:	412b      	asrlt	r3, r5
 800ee06:	18e4      	addlt	r4, r4, r3
 800ee08:	ea24 0406 	bic.w	r4, r4, r6
 800ee0c:	e7e8      	b.n	800ede0 <floorf+0x34>
 800ee0e:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800ee12:	d302      	bcc.n	800ee1a <floorf+0x6e>
 800ee14:	f7f1 fec6 	bl	8000ba4 <__addsf3>
 800ee18:	4601      	mov	r1, r0
 800ee1a:	4608      	mov	r0, r1
 800ee1c:	bd70      	pop	{r4, r5, r6, pc}
 800ee1e:	2400      	movs	r4, #0
 800ee20:	e7de      	b.n	800ede0 <floorf+0x34>
 800ee22:	bf00      	nop
 800ee24:	7149f2ca 	.word	0x7149f2ca
 800ee28:	bf800000 	.word	0xbf800000
 800ee2c:	007fffff 	.word	0x007fffff

0800ee30 <_init>:
 800ee30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee32:	bf00      	nop
 800ee34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee36:	bc08      	pop	{r3}
 800ee38:	469e      	mov	lr, r3
 800ee3a:	4770      	bx	lr

0800ee3c <_fini>:
 800ee3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee3e:	bf00      	nop
 800ee40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee42:	bc08      	pop	{r3}
 800ee44:	469e      	mov	lr, r3
 800ee46:	4770      	bx	lr
