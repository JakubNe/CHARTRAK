
CHARTRAK2v3_controllerRETARGETED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b214  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  0800b328  0800b328  0000c328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb48  0800bb48  0000d1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb48  0800bb48  0000cb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb50  0800bb50  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb50  0800bb50  0000cb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb54  0800bb54  0000cb54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800bb58  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  200001f0  0800bd48  0000d1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  0800bd48  0000d694  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017376  00000000  00000000  0000d219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a2c  00000000  00000000  0002458f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00027fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001077  00000000  00000000  000294e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c55f  00000000  00000000  0002a557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d43a  00000000  00000000  00046ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096b1e  00000000  00000000  00063ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000faa0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ddc  00000000  00000000  000faa54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00101830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b30c 	.word	0x0800b30c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800b30c 	.word	0x0800b30c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_ldivmod>:
 800115c:	b97b      	cbnz	r3, 800117e <__aeabi_ldivmod+0x22>
 800115e:	b972      	cbnz	r2, 800117e <__aeabi_ldivmod+0x22>
 8001160:	2900      	cmp	r1, #0
 8001162:	bfbe      	ittt	lt
 8001164:	2000      	movlt	r0, #0
 8001166:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800116a:	e006      	blt.n	800117a <__aeabi_ldivmod+0x1e>
 800116c:	bf08      	it	eq
 800116e:	2800      	cmpeq	r0, #0
 8001170:	bf1c      	itt	ne
 8001172:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8001176:	f04f 30ff 	movne.w	r0, #4294967295
 800117a:	f000 b99b 	b.w	80014b4 <__aeabi_idiv0>
 800117e:	f1ad 0c08 	sub.w	ip, sp, #8
 8001182:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001186:	2900      	cmp	r1, #0
 8001188:	db09      	blt.n	800119e <__aeabi_ldivmod+0x42>
 800118a:	2b00      	cmp	r3, #0
 800118c:	db1a      	blt.n	80011c4 <__aeabi_ldivmod+0x68>
 800118e:	f000 f835 	bl	80011fc <__udivmoddi4>
 8001192:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001196:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800119a:	b004      	add	sp, #16
 800119c:	4770      	bx	lr
 800119e:	4240      	negs	r0, r0
 80011a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db1b      	blt.n	80011e0 <__aeabi_ldivmod+0x84>
 80011a8:	f000 f828 	bl	80011fc <__udivmoddi4>
 80011ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b4:	b004      	add	sp, #16
 80011b6:	4240      	negs	r0, r0
 80011b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011bc:	4252      	negs	r2, r2
 80011be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011c2:	4770      	bx	lr
 80011c4:	4252      	negs	r2, r2
 80011c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ca:	f000 f817 	bl	80011fc <__udivmoddi4>
 80011ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011d6:	b004      	add	sp, #16
 80011d8:	4240      	negs	r0, r0
 80011da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011de:	4770      	bx	lr
 80011e0:	4252      	negs	r2, r2
 80011e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011e6:	f000 f809 	bl	80011fc <__udivmoddi4>
 80011ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f2:	b004      	add	sp, #16
 80011f4:	4252      	negs	r2, r2
 80011f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011fa:	4770      	bx	lr

080011fc <__udivmoddi4>:
 80011fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001200:	9d08      	ldr	r5, [sp, #32]
 8001202:	460c      	mov	r4, r1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d14e      	bne.n	80012a6 <__udivmoddi4+0xaa>
 8001208:	4694      	mov	ip, r2
 800120a:	458c      	cmp	ip, r1
 800120c:	4686      	mov	lr, r0
 800120e:	fab2 f282 	clz	r2, r2
 8001212:	d962      	bls.n	80012da <__udivmoddi4+0xde>
 8001214:	b14a      	cbz	r2, 800122a <__udivmoddi4+0x2e>
 8001216:	f1c2 0320 	rsb	r3, r2, #32
 800121a:	4091      	lsls	r1, r2
 800121c:	fa20 f303 	lsr.w	r3, r0, r3
 8001220:	fa0c fc02 	lsl.w	ip, ip, r2
 8001224:	4319      	orrs	r1, r3
 8001226:	fa00 fe02 	lsl.w	lr, r0, r2
 800122a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800122e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001232:	fb07 1114 	mls	r1, r7, r4, r1
 8001236:	fa1f f68c 	uxth.w	r6, ip
 800123a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800123e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001242:	fb04 f106 	mul.w	r1, r4, r6
 8001246:	4299      	cmp	r1, r3
 8001248:	d90a      	bls.n	8001260 <__udivmoddi4+0x64>
 800124a:	eb1c 0303 	adds.w	r3, ip, r3
 800124e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001252:	f080 8110 	bcs.w	8001476 <__udivmoddi4+0x27a>
 8001256:	4299      	cmp	r1, r3
 8001258:	f240 810d 	bls.w	8001476 <__udivmoddi4+0x27a>
 800125c:	3c02      	subs	r4, #2
 800125e:	4463      	add	r3, ip
 8001260:	1a59      	subs	r1, r3, r1
 8001262:	fbb1 f0f7 	udiv	r0, r1, r7
 8001266:	fb07 1110 	mls	r1, r7, r0, r1
 800126a:	fb00 f606 	mul.w	r6, r0, r6
 800126e:	fa1f f38e 	uxth.w	r3, lr
 8001272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001276:	429e      	cmp	r6, r3
 8001278:	d90a      	bls.n	8001290 <__udivmoddi4+0x94>
 800127a:	eb1c 0303 	adds.w	r3, ip, r3
 800127e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001282:	f080 80fa 	bcs.w	800147a <__udivmoddi4+0x27e>
 8001286:	429e      	cmp	r6, r3
 8001288:	f240 80f7 	bls.w	800147a <__udivmoddi4+0x27e>
 800128c:	4463      	add	r3, ip
 800128e:	3802      	subs	r0, #2
 8001290:	2100      	movs	r1, #0
 8001292:	1b9b      	subs	r3, r3, r6
 8001294:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001298:	b11d      	cbz	r5, 80012a2 <__udivmoddi4+0xa6>
 800129a:	40d3      	lsrs	r3, r2
 800129c:	2200      	movs	r2, #0
 800129e:	e9c5 3200 	strd	r3, r2, [r5]
 80012a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a6:	428b      	cmp	r3, r1
 80012a8:	d905      	bls.n	80012b6 <__udivmoddi4+0xba>
 80012aa:	b10d      	cbz	r5, 80012b0 <__udivmoddi4+0xb4>
 80012ac:	e9c5 0100 	strd	r0, r1, [r5]
 80012b0:	2100      	movs	r1, #0
 80012b2:	4608      	mov	r0, r1
 80012b4:	e7f5      	b.n	80012a2 <__udivmoddi4+0xa6>
 80012b6:	fab3 f183 	clz	r1, r3
 80012ba:	2900      	cmp	r1, #0
 80012bc:	d146      	bne.n	800134c <__udivmoddi4+0x150>
 80012be:	42a3      	cmp	r3, r4
 80012c0:	d302      	bcc.n	80012c8 <__udivmoddi4+0xcc>
 80012c2:	4290      	cmp	r0, r2
 80012c4:	f0c0 80ee 	bcc.w	80014a4 <__udivmoddi4+0x2a8>
 80012c8:	1a86      	subs	r6, r0, r2
 80012ca:	eb64 0303 	sbc.w	r3, r4, r3
 80012ce:	2001      	movs	r0, #1
 80012d0:	2d00      	cmp	r5, #0
 80012d2:	d0e6      	beq.n	80012a2 <__udivmoddi4+0xa6>
 80012d4:	e9c5 6300 	strd	r6, r3, [r5]
 80012d8:	e7e3      	b.n	80012a2 <__udivmoddi4+0xa6>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	f040 808f 	bne.w	80013fe <__udivmoddi4+0x202>
 80012e0:	eba1 040c 	sub.w	r4, r1, ip
 80012e4:	2101      	movs	r1, #1
 80012e6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012ea:	fa1f f78c 	uxth.w	r7, ip
 80012ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80012f2:	fb08 4416 	mls	r4, r8, r6, r4
 80012f6:	fb07 f006 	mul.w	r0, r7, r6
 80012fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001302:	4298      	cmp	r0, r3
 8001304:	d908      	bls.n	8001318 <__udivmoddi4+0x11c>
 8001306:	eb1c 0303 	adds.w	r3, ip, r3
 800130a:	f106 34ff 	add.w	r4, r6, #4294967295
 800130e:	d202      	bcs.n	8001316 <__udivmoddi4+0x11a>
 8001310:	4298      	cmp	r0, r3
 8001312:	f200 80cb 	bhi.w	80014ac <__udivmoddi4+0x2b0>
 8001316:	4626      	mov	r6, r4
 8001318:	1a1c      	subs	r4, r3, r0
 800131a:	fbb4 f0f8 	udiv	r0, r4, r8
 800131e:	fb08 4410 	mls	r4, r8, r0, r4
 8001322:	fb00 f707 	mul.w	r7, r0, r7
 8001326:	fa1f f38e 	uxth.w	r3, lr
 800132a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800132e:	429f      	cmp	r7, r3
 8001330:	d908      	bls.n	8001344 <__udivmoddi4+0x148>
 8001332:	eb1c 0303 	adds.w	r3, ip, r3
 8001336:	f100 34ff 	add.w	r4, r0, #4294967295
 800133a:	d202      	bcs.n	8001342 <__udivmoddi4+0x146>
 800133c:	429f      	cmp	r7, r3
 800133e:	f200 80ae 	bhi.w	800149e <__udivmoddi4+0x2a2>
 8001342:	4620      	mov	r0, r4
 8001344:	1bdb      	subs	r3, r3, r7
 8001346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800134a:	e7a5      	b.n	8001298 <__udivmoddi4+0x9c>
 800134c:	f1c1 0720 	rsb	r7, r1, #32
 8001350:	408b      	lsls	r3, r1
 8001352:	fa22 fc07 	lsr.w	ip, r2, r7
 8001356:	ea4c 0c03 	orr.w	ip, ip, r3
 800135a:	fa24 f607 	lsr.w	r6, r4, r7
 800135e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001362:	fbb6 f8f9 	udiv	r8, r6, r9
 8001366:	fa1f fe8c 	uxth.w	lr, ip
 800136a:	fb09 6618 	mls	r6, r9, r8, r6
 800136e:	fa20 f307 	lsr.w	r3, r0, r7
 8001372:	408c      	lsls	r4, r1
 8001374:	fa00 fa01 	lsl.w	sl, r0, r1
 8001378:	fb08 f00e 	mul.w	r0, r8, lr
 800137c:	431c      	orrs	r4, r3
 800137e:	0c23      	lsrs	r3, r4, #16
 8001380:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001384:	4298      	cmp	r0, r3
 8001386:	fa02 f201 	lsl.w	r2, r2, r1
 800138a:	d90a      	bls.n	80013a2 <__udivmoddi4+0x1a6>
 800138c:	eb1c 0303 	adds.w	r3, ip, r3
 8001390:	f108 36ff 	add.w	r6, r8, #4294967295
 8001394:	f080 8081 	bcs.w	800149a <__udivmoddi4+0x29e>
 8001398:	4298      	cmp	r0, r3
 800139a:	d97e      	bls.n	800149a <__udivmoddi4+0x29e>
 800139c:	f1a8 0802 	sub.w	r8, r8, #2
 80013a0:	4463      	add	r3, ip
 80013a2:	1a1e      	subs	r6, r3, r0
 80013a4:	fbb6 f3f9 	udiv	r3, r6, r9
 80013a8:	fb09 6613 	mls	r6, r9, r3, r6
 80013ac:	fb03 fe0e 	mul.w	lr, r3, lr
 80013b0:	b2a4      	uxth	r4, r4
 80013b2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80013b6:	45a6      	cmp	lr, r4
 80013b8:	d908      	bls.n	80013cc <__udivmoddi4+0x1d0>
 80013ba:	eb1c 0404 	adds.w	r4, ip, r4
 80013be:	f103 30ff 	add.w	r0, r3, #4294967295
 80013c2:	d266      	bcs.n	8001492 <__udivmoddi4+0x296>
 80013c4:	45a6      	cmp	lr, r4
 80013c6:	d964      	bls.n	8001492 <__udivmoddi4+0x296>
 80013c8:	3b02      	subs	r3, #2
 80013ca:	4464      	add	r4, ip
 80013cc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013d0:	fba0 8302 	umull	r8, r3, r0, r2
 80013d4:	eba4 040e 	sub.w	r4, r4, lr
 80013d8:	429c      	cmp	r4, r3
 80013da:	46c6      	mov	lr, r8
 80013dc:	461e      	mov	r6, r3
 80013de:	d350      	bcc.n	8001482 <__udivmoddi4+0x286>
 80013e0:	d04d      	beq.n	800147e <__udivmoddi4+0x282>
 80013e2:	b155      	cbz	r5, 80013fa <__udivmoddi4+0x1fe>
 80013e4:	ebba 030e 	subs.w	r3, sl, lr
 80013e8:	eb64 0406 	sbc.w	r4, r4, r6
 80013ec:	fa04 f707 	lsl.w	r7, r4, r7
 80013f0:	40cb      	lsrs	r3, r1
 80013f2:	431f      	orrs	r7, r3
 80013f4:	40cc      	lsrs	r4, r1
 80013f6:	e9c5 7400 	strd	r7, r4, [r5]
 80013fa:	2100      	movs	r1, #0
 80013fc:	e751      	b.n	80012a2 <__udivmoddi4+0xa6>
 80013fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8001402:	f1c2 0320 	rsb	r3, r2, #32
 8001406:	40d9      	lsrs	r1, r3
 8001408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800140c:	fa20 f303 	lsr.w	r3, r0, r3
 8001410:	fa00 fe02 	lsl.w	lr, r0, r2
 8001414:	fbb1 f0f8 	udiv	r0, r1, r8
 8001418:	fb08 1110 	mls	r1, r8, r0, r1
 800141c:	4094      	lsls	r4, r2
 800141e:	431c      	orrs	r4, r3
 8001420:	fa1f f78c 	uxth.w	r7, ip
 8001424:	0c23      	lsrs	r3, r4, #16
 8001426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800142a:	fb00 f107 	mul.w	r1, r0, r7
 800142e:	4299      	cmp	r1, r3
 8001430:	d908      	bls.n	8001444 <__udivmoddi4+0x248>
 8001432:	eb1c 0303 	adds.w	r3, ip, r3
 8001436:	f100 36ff 	add.w	r6, r0, #4294967295
 800143a:	d22c      	bcs.n	8001496 <__udivmoddi4+0x29a>
 800143c:	4299      	cmp	r1, r3
 800143e:	d92a      	bls.n	8001496 <__udivmoddi4+0x29a>
 8001440:	3802      	subs	r0, #2
 8001442:	4463      	add	r3, ip
 8001444:	1a5b      	subs	r3, r3, r1
 8001446:	fbb3 f1f8 	udiv	r1, r3, r8
 800144a:	fb08 3311 	mls	r3, r8, r1, r3
 800144e:	b2a4      	uxth	r4, r4
 8001450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001454:	fb01 f307 	mul.w	r3, r1, r7
 8001458:	42a3      	cmp	r3, r4
 800145a:	d908      	bls.n	800146e <__udivmoddi4+0x272>
 800145c:	eb1c 0404 	adds.w	r4, ip, r4
 8001460:	f101 36ff 	add.w	r6, r1, #4294967295
 8001464:	d213      	bcs.n	800148e <__udivmoddi4+0x292>
 8001466:	42a3      	cmp	r3, r4
 8001468:	d911      	bls.n	800148e <__udivmoddi4+0x292>
 800146a:	3902      	subs	r1, #2
 800146c:	4464      	add	r4, ip
 800146e:	1ae4      	subs	r4, r4, r3
 8001470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001474:	e73b      	b.n	80012ee <__udivmoddi4+0xf2>
 8001476:	4604      	mov	r4, r0
 8001478:	e6f2      	b.n	8001260 <__udivmoddi4+0x64>
 800147a:	4608      	mov	r0, r1
 800147c:	e708      	b.n	8001290 <__udivmoddi4+0x94>
 800147e:	45c2      	cmp	sl, r8
 8001480:	d2af      	bcs.n	80013e2 <__udivmoddi4+0x1e6>
 8001482:	ebb8 0e02 	subs.w	lr, r8, r2
 8001486:	eb63 060c 	sbc.w	r6, r3, ip
 800148a:	3801      	subs	r0, #1
 800148c:	e7a9      	b.n	80013e2 <__udivmoddi4+0x1e6>
 800148e:	4631      	mov	r1, r6
 8001490:	e7ed      	b.n	800146e <__udivmoddi4+0x272>
 8001492:	4603      	mov	r3, r0
 8001494:	e79a      	b.n	80013cc <__udivmoddi4+0x1d0>
 8001496:	4630      	mov	r0, r6
 8001498:	e7d4      	b.n	8001444 <__udivmoddi4+0x248>
 800149a:	46b0      	mov	r8, r6
 800149c:	e781      	b.n	80013a2 <__udivmoddi4+0x1a6>
 800149e:	4463      	add	r3, ip
 80014a0:	3802      	subs	r0, #2
 80014a2:	e74f      	b.n	8001344 <__udivmoddi4+0x148>
 80014a4:	4606      	mov	r6, r0
 80014a6:	4623      	mov	r3, r4
 80014a8:	4608      	mov	r0, r1
 80014aa:	e711      	b.n	80012d0 <__udivmoddi4+0xd4>
 80014ac:	3e02      	subs	r6, #2
 80014ae:	4463      	add	r3, ip
 80014b0:	e732      	b.n	8001318 <__udivmoddi4+0x11c>
 80014b2:	bf00      	nop

080014b4 <__aeabi_idiv0>:
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop

080014b8 <HFDAC_SET_ALL>:
	DACREF((HFDAC->maxAmplitude)*2/6.4);	// setting DAC Voltage reference
	HFDAC->relativeDACcodeCoef = 2047/(HFDAC->maxAmplitude); // multiply any number from -1 to 1 and you will get direct code for DAC
}

void HFDAC_SET_ALL(HFDAC_struct* HFDAC)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
	...

080014cc <HFDAC_DIRECT_DATA>:
{
	HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, mode);
}

void HFDAC_DIRECT_DATA(HFDAC_struct* HFDAC, float value)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
	uint8_t byte[4];

	int16_t data = value * HFDAC->relativeDACcodeCoef;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	6839      	ldr	r1, [r7, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fc51 	bl	8000d84 <__aeabi_fmul>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe13 	bl	8001110 <__aeabi_f2iz>
 80014ea:	4603      	mov	r3, r0
 80014ec:	81fb      	strh	r3, [r7, #14]

	byte[0] = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)((data>>8)&0x000f);
 80014f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f6:	121b      	asrs	r3, r3, #8
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f003 030f 	and.w	r3, r3, #15
 8001500:	b2db      	uxtb	r3, r3
 8001502:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)(data&0x00ff);
 8001504:	89fb      	ldrh	r3, [r7, #14]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)DAC_DIRECTDATA;
 800150a:	2304      	movs	r3, #4
 800150c:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 800150e:	f107 0108 	add.w	r1, r7, #8
 8001512:	2364      	movs	r3, #100	@ 0x64
 8001514:	2204      	movs	r2, #4
 8001516:	480b      	ldr	r0, [pc, #44]	@ (8001544 <HFDAC_DIRECT_DATA+0x78>)
 8001518:	f002 fe4e 	bl	80041b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2110      	movs	r1, #16
 8001520:	4809      	ldr	r0, [pc, #36]	@ (8001548 <HFDAC_DIRECT_DATA+0x7c>)
 8001522:	f001 fc3a 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8001526:	2201      	movs	r2, #1
 8001528:	2110      	movs	r1, #16
 800152a:	4807      	ldr	r0, [pc, #28]	@ (8001548 <HFDAC_DIRECT_DATA+0x7c>)
 800152c:	f001 fc35 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2110      	movs	r1, #16
 8001534:	4804      	ldr	r0, [pc, #16]	@ (8001548 <HFDAC_DIRECT_DATA+0x7c>)
 8001536:	f001 fc30 	bl	8002d9a <HAL_GPIO_WritePin>
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000290 	.word	0x20000290
 8001548:	40010800 	.word	0x40010800
 800154c:	00000000 	.word	0x00000000

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b0a2      	sub	sp, #136	@ 0x88
 8001554:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001556:	f000 fe2d 	bl	80021b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155a:	f000 f92b 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155e:	f000 fa9f 	bl	8001aa0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001562:	f000 f983 	bl	800186c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001566:	f000 f9bf 	bl	80018e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 800156a:	f000 f9eb 	bl	8001944 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800156e:	f000 fa6d 	bl	8001a4c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001572:	f000 fa1d 	bl	80019b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  	//GPIO SETUP
    HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800157c:	4876      	ldr	r0, [pc, #472]	@ (8001758 <main+0x208>)
 800157e:	f001 fc0c 	bl	8002d9a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8001582:	2201      	movs	r2, #1
 8001584:	2110      	movs	r1, #16
 8001586:	4875      	ldr	r0, [pc, #468]	@ (800175c <main+0x20c>)
 8001588:	f001 fc07 	bl	8002d9a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001592:	4871      	ldr	r0, [pc, #452]	@ (8001758 <main+0x208>)
 8001594:	f001 fc01 	bl	8002d9a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2120      	movs	r1, #32
 800159c:	4870      	ldr	r0, [pc, #448]	@ (8001760 <main+0x210>)
 800159e:	f001 fbfc 	bl	8002d9a <HAL_GPIO_WritePin>

    // ADC board expander setup
    TCA_Init(0b0100001, hi2c1);
 80015a2:	4c70      	ldr	r4, [pc, #448]	@ (8001764 <main+0x214>)
 80015a4:	4668      	mov	r0, sp
 80015a6:	f104 030c 	add.w	r3, r4, #12
 80015aa:	2248      	movs	r2, #72	@ 0x48
 80015ac:	4619      	mov	r1, r3
 80015ae:	f007 f962 	bl	8008876 <memcpy>
 80015b2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80015b6:	2021      	movs	r0, #33	@ 0x21
 80015b8:	f006 f852 	bl	8007660 <TCA_Init>

    TCA_PinMode(P07, 0);
 80015bc:	2100      	movs	r1, #0
 80015be:	2007      	movs	r0, #7
 80015c0:	f006 f874 	bl	80076ac <TCA_PinMode>
    TCA_PinMode(P11, 0);
 80015c4:	2100      	movs	r1, #0
 80015c6:	2009      	movs	r0, #9
 80015c8:	f006 f870 	bl	80076ac <TCA_PinMode>
    TCA_PinMode(P12, 0);
 80015cc:	2100      	movs	r1, #0
 80015ce:	200a      	movs	r0, #10
 80015d0:	f006 f86c 	bl	80076ac <TCA_PinMode>

    TCA_WritePin(P07, 1);
 80015d4:	2101      	movs	r1, #1
 80015d6:	2007      	movs	r0, #7
 80015d8:	f006 f8c0 	bl	800775c <TCA_WritePin>
    TCA_WritePin(P11, 0);
 80015dc:	2100      	movs	r1, #0
 80015de:	2009      	movs	r0, #9
 80015e0:	f006 f8bc 	bl	800775c <TCA_WritePin>
    TCA_WritePin(P12, 0);
 80015e4:	2100      	movs	r1, #0
 80015e6:	200a      	movs	r0, #10
 80015e8:	f006 f8b8 	bl	800775c <TCA_WritePin>

    // High-speed DAC setup
    DACREF(0.0);
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	f005 fa76 	bl	8006ae0 <DACREF>
    DACOFFS(0.0);
 80015f4:	f04f 0000 	mov.w	r0, #0
 80015f8:	f005 fad2 	bl	8006ba0 <DACOFFS>

    // High-speed ADC setup
    ADCREF(1.2);
 80015fc:	485a      	ldr	r0, [pc, #360]	@ (8001768 <main+0x218>)
 80015fe:	f005 fb37 	bl	8006c70 <ADCREF>
    ADCOFFS(0.0);
 8001602:	f04f 0000 	mov.w	r0, #0
 8001606:	f005 fb8f 	bl	8006d28 <ADCOFFS>

    // RS485 receive interrupt setup
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 800160a:	227d      	movs	r2, #125	@ 0x7d
 800160c:	4957      	ldr	r1, [pc, #348]	@ (800176c <main+0x21c>)
 800160e:	4858      	ldr	r0, [pc, #352]	@ (8001770 <main+0x220>)
 8001610:	f003 ff53 	bl	80054ba <HAL_UARTEx_ReceiveToIdle_IT>
    //HAL_TIM_Base_Start_IT(&htim4);

    //SCPI setup
    Function Lolafunctions[] = { {.name = "FID", .run = SCPIC_FID},
 8001614:	4b57      	ldr	r3, [pc, #348]	@ (8001774 <main+0x224>)
 8001616:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800161a:	461d      	mov	r5, r3
 800161c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001620:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001624:	e884 0003 	stmia.w	r4, {r0, r1}
    							 {.name = "CFS", .run = SCPIC_CFS},
								 {.name = "INIT", .run = SCPIC_INIT}	};

    Class Lolaclass = { .name = "LOLA", .functions = Lolafunctions, .functionsLength = 3 };
 8001628:	4b53      	ldr	r3, [pc, #332]	@ (8001778 <main+0x228>)
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001630:	623b      	str	r3, [r7, #32]
 8001632:	2303      	movs	r3, #3
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
    addClass(&Lolaclass, 0);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f005 ffb7 	bl	80075b0 <addClass>

    Function DVMfunctions[] = { {.name = "RAW", .run = SCPIC_DVM_RAW},
 8001642:	4b4e      	ldr	r3, [pc, #312]	@ (800177c <main+0x22c>)
 8001644:	f107 040c 	add.w	r4, r7, #12
 8001648:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800164a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    							{.name = "VAL", .run = SCPIC_DVM_VAL}	};

    Class DVMclass = { .name = "DVM", .functions = DVMfunctions, .functionsLength = 1 };
 800164e:	4b4c      	ldr	r3, [pc, #304]	@ (8001780 <main+0x230>)
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	2301      	movs	r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
    addClass(&DVMclass, 0);
 800165c:	463b      	mov	r3, r7
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f005 ffa5 	bl	80075b0 <addClass>

    //SPARTAN3 SETUP
    LOLA1.Config = JTAG;
 8001666:	4b47      	ldr	r3, [pc, #284]	@ (8001784 <main+0x234>)
 8001668:	2206      	movs	r2, #6
 800166a:	705a      	strb	r2, [r3, #1]
    LOLA1.Trials = 100;
 800166c:	4b45      	ldr	r3, [pc, #276]	@ (8001784 <main+0x234>)
 800166e:	2264      	movs	r2, #100	@ 0x64
 8001670:	805a      	strh	r2, [r3, #2]
    LOLA1.compatibleFirmwareID = 0xF103;
 8001672:	4b44      	ldr	r3, [pc, #272]	@ (8001784 <main+0x234>)
 8001674:	f24f 1203 	movw	r2, #61699	@ 0xf103
 8001678:	809a      	strh	r2, [r3, #4]

    //High frequency DAC setup
    HFDAC1.maxAmplitude = 6;
 800167a:	4b43      	ldr	r3, [pc, #268]	@ (8001788 <main+0x238>)
 800167c:	4a43      	ldr	r2, [pc, #268]	@ (800178c <main+0x23c>)
 800167e:	605a      	str	r2, [r3, #4]
    HFDAC1.mode = Voltage_output;
 8001680:	4b41      	ldr	r3, [pc, #260]	@ (8001788 <main+0x238>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
    HFDAC1.offset = 0;
 8001686:	4b40      	ldr	r3, [pc, #256]	@ (8001788 <main+0x238>)
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	609a      	str	r2, [r3, #8]

    //Hight Frequency ADC setup
    HFADC1.ADCref = 2.5;
 800168e:	4b40      	ldr	r3, [pc, #256]	@ (8001790 <main+0x240>)
 8001690:	4a40      	ldr	r2, [pc, #256]	@ (8001794 <main+0x244>)
 8001692:	609a      	str	r2, [r3, #8]
    HFADC1.OUT_MEASURING_OFFSET = 0;
 8001694:	4b3e      	ldr	r3, [pc, #248]	@ (8001790 <main+0x240>)
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
    HFADC1.source = OUT;
 800169c:	4b3c      	ldr	r3, [pc, #240]	@ (8001790 <main+0x240>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
    HFADC1.UIO_channel = 0;
 80016a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001790 <main+0x240>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	709a      	strb	r2, [r3, #2]
    HFADC1.mode = Voltage_input;
 80016a8:	4b39      	ldr	r3, [pc, #228]	@ (8001790 <main+0x240>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	705a      	strb	r2, [r3, #1]
    /*RS485_Transmit("awaiting FPGA config\r\n");
    LOLA_Init(LOLA1);
    RS485_Transmit("FPGA config done\r\n");*/

    //CharTrak setup
    CHT1.characteristic = Open;
 80016ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001798 <main+0x248>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
    CHT1.Upp = 0;
 80016b4:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <main+0x248>)
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]

    // Arbitrary waveform generator setup
    AWG1.waveform = Square;
 80016bc:	4b37      	ldr	r3, [pc, #220]	@ (800179c <main+0x24c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
    AWG1.Uavg = 0.0;
 80016c2:	4b36      	ldr	r3, [pc, #216]	@ (800179c <main+0x24c>)
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	605a      	str	r2, [r3, #4]
    AWG1.Uamp = 2.0;
 80016ca:	4b34      	ldr	r3, [pc, #208]	@ (800179c <main+0x24c>)
 80016cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016d0:	609a      	str	r2, [r3, #8]
    AWG1.DutyCycle = 20.0;
 80016d2:	4b32      	ldr	r3, [pc, #200]	@ (800179c <main+0x24c>)
 80016d4:	4a32      	ldr	r2, [pc, #200]	@ (80017a0 <main+0x250>)
 80016d6:	60da      	str	r2, [r3, #12]
    AWG1.Freq = 10000.0;
 80016d8:	4930      	ldr	r1, [pc, #192]	@ (800179c <main+0x24c>)
 80016da:	a31b      	add	r3, pc, #108	@ (adr r3, 8001748 <main+0x1f8>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	e9c1 2304 	strd	r2, r3, [r1, #16]

    // Noise generator setup
    NOISE1.Enable = 0;
 80016e4:	4b2f      	ldr	r3, [pc, #188]	@ (80017a4 <main+0x254>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
    NOISE1.Freq = 10000.0;
 80016ea:	4b2e      	ldr	r3, [pc, #184]	@ (80017a4 <main+0x254>)
 80016ec:	4a2e      	ldr	r2, [pc, #184]	@ (80017a8 <main+0x258>)
 80016ee:	609a      	str	r2, [r3, #8]
    NOISE1.Uamp = 1.0;
 80016f0:	4b2c      	ldr	r3, [pc, #176]	@ (80017a4 <main+0x254>)
 80016f2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80016f6:	605a      	str	r2, [r3, #4]
    NOISE1.Seed = 0x800f000f000f0001;
 80016f8:	492a      	ldr	r1, [pc, #168]	@ (80017a4 <main+0x254>)
 80016fa:	a315      	add	r3, pc, #84	@ (adr r3, 8001750 <main+0x200>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	e9c1 2304 	strd	r2, r3, [r1, #16]

    HFDAC_SET_ALL(&HFDAC1);
 8001704:	4820      	ldr	r0, [pc, #128]	@ (8001788 <main+0x238>)
 8001706:	f7ff fed7 	bl	80014b8 <HFDAC_SET_ALL>
    HFADC_SET_ALL(&HFADC1);
 800170a:	4821      	ldr	r0, [pc, #132]	@ (8001790 <main+0x240>)
 800170c:	f004 fffc 	bl	8006708 <HFADC_SET_ALL>

    HFDAC_DIRECT_DATA(&HFDAC1, 0);
 8001710:	f04f 0100 	mov.w	r1, #0
 8001714:	481c      	ldr	r0, [pc, #112]	@ (8001788 <main+0x238>)
 8001716:	f7ff fed9 	bl	80014cc <HFDAC_DIRECT_DATA>
    AWG_Load_Waveform(&AWG1, &HFDAC1);
 800171a:	491b      	ldr	r1, [pc, #108]	@ (8001788 <main+0x238>)
 800171c:	481f      	ldr	r0, [pc, #124]	@ (800179c <main+0x24c>)
 800171e:	f004 fca7 	bl	8006070 <AWG_Load_Waveform>
	 /*int16_t DVM = DVM_GET_FILTERED_DATA_RAW(50);
	 sprintf(TXbuff, "%d\r\n", DVM);
	 RS485_Transmit(TXbuff);
	 HAL_Delay(10);*/

	 if(RS485dataReady)	//EXECUTE command
 8001722:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <main+0x25c>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0fb      	beq.n	8001722 <main+0x1d2>
	 {
		 RS485dataReady = 0;
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <main+0x25c>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
		 SCPI_EXECUTE();
 8001730:	f005 fcc8 	bl	80070c4 <SCPI_EXECUTE>
		 RS485_Transmit(TXbuff);
 8001734:	481e      	ldr	r0, [pc, #120]	@ (80017b0 <main+0x260>)
 8001736:	f005 fb5f 	bl	8006df8 <RS485_Transmit>
		 HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 800173a:	227d      	movs	r2, #125	@ 0x7d
 800173c:	490b      	ldr	r1, [pc, #44]	@ (800176c <main+0x21c>)
 800173e:	480c      	ldr	r0, [pc, #48]	@ (8001770 <main+0x220>)
 8001740:	f003 febb 	bl	80054ba <HAL_UARTEx_ReceiveToIdle_IT>
	 if(RS485dataReady)	//EXECUTE command
 8001744:	e7ed      	b.n	8001722 <main+0x1d2>
 8001746:	bf00      	nop
 8001748:	00000000 	.word	0x00000000
 800174c:	40c38800 	.word	0x40c38800
 8001750:	000f0001 	.word	0x000f0001
 8001754:	800f000f 	.word	0x800f000f
 8001758:	40011000 	.word	0x40011000
 800175c:	40010800 	.word	0x40010800
 8001760:	40010c00 	.word	0x40010c00
 8001764:	2000023c 	.word	0x2000023c
 8001768:	3f99999a 	.word	0x3f99999a
 800176c:	20000468 	.word	0x20000468
 8001770:	20000330 	.word	0x20000330
 8001774:	0800b344 	.word	0x0800b344
 8001778:	0800b328 	.word	0x0800b328
 800177c:	0800b364 	.word	0x0800b364
 8001780:	0800b330 	.word	0x0800b330
 8001784:	200003b0 	.word	0x200003b0
 8001788:	200003c4 	.word	0x200003c4
 800178c:	40c00000 	.word	0x40c00000
 8001790:	200003b8 	.word	0x200003b8
 8001794:	40200000 	.word	0x40200000
 8001798:	200003a8 	.word	0x200003a8
 800179c:	20000378 	.word	0x20000378
 80017a0:	41a00000 	.word	0x41a00000
 80017a4:	20000390 	.word	0x20000390
 80017a8:	461c4000 	.word	0x461c4000
 80017ac:	200003d4 	.word	0x200003d4
 80017b0:	200003e8 	.word	0x200003e8

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b094      	sub	sp, #80	@ 0x50
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017be:	2228      	movs	r2, #40	@ 0x28
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f006 ff8d 	bl	80086e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f2:	2301      	movs	r3, #1
 80017f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f6:	2302      	movs	r3, #2
 80017f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001800:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001806:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800180a:	4618      	mov	r0, r3
 800180c:	f001 ff8a 	bl	8003724 <HAL_RCC_OscConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001816:	f000 fa08 	bl	8001c2a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181a:	230f      	movs	r3, #15
 800181c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800182a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2101      	movs	r1, #1
 8001836:	4618      	mov	r0, r3
 8001838:	f002 f9f6 	bl	8003c28 <HAL_RCC_ClockConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001842:	f000 f9f2 	bl	8001c2a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001846:	2302      	movs	r3, #2
 8001848:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800184a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800184e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fb76 	bl	8003f44 <HAL_RCCEx_PeriphCLKConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800185e:	f000 f9e4 	bl	8001c2a <Error_Handler>
  }
}
 8001862:	bf00      	nop
 8001864:	3750      	adds	r7, #80	@ 0x50
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800187c:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <MX_ADC1_Init+0x74>)
 800187e:	4a19      	ldr	r2, [pc, #100]	@ (80018e4 <MX_ADC1_Init+0x78>)
 8001880:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001882:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <MX_ADC1_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001888:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <MX_ADC1_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800188e:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <MX_ADC1_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <MX_ADC1_Init+0x74>)
 8001896:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800189a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800189c:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <MX_ADC1_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <MX_ADC1_Init+0x74>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018a8:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <MX_ADC1_Init+0x74>)
 80018aa:	f000 fd09 	bl	80022c0 <HAL_ADC_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80018b4:	f000 f9b9 	bl	8001c2a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018bc:	2301      	movs	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_ADC1_Init+0x74>)
 80018ca:	f000 fdd1 	bl	8002470 <HAL_ADC_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80018d4:	f000 f9a9 	bl	8001c2a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	2000020c 	.word	0x2000020c
 80018e4:	40012400 	.word	0x40012400

080018e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <MX_I2C1_Init+0x50>)
 80018ee:	4a13      	ldr	r2, [pc, #76]	@ (800193c <MX_I2C1_Init+0x54>)
 80018f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <MX_I2C1_Init+0x50>)
 80018f4:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <MX_I2C1_Init+0x58>)
 80018f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <MX_I2C1_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <MX_I2C1_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <MX_I2C1_Init+0x50>)
 8001906:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800190a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800190c:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001918:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <MX_I2C1_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <MX_I2C1_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	@ (8001938 <MX_I2C1_Init+0x50>)
 8001926:	f001 fa51 	bl	8002dcc <HAL_I2C_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001930:	f000 f97b 	bl	8001c2a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	2000023c 	.word	0x2000023c
 800193c:	40005400 	.word	0x40005400
 8001940:	000186a0 	.word	0x000186a0

08001944 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001948:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <MX_SPI1_Init+0x64>)
 800194a:	4a18      	ldr	r2, [pc, #96]	@ (80019ac <MX_SPI1_Init+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800194e:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <MX_SPI1_Init+0x64>)
 8001950:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001956:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <MX_SPI1_Init+0x64>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <MX_SPI1_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <MX_SPI1_Init+0x64>)
 8001964:	2202      	movs	r2, #2
 8001966:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <MX_SPI1_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <MX_SPI1_Init+0x64>)
 8001970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001974:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001976:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <MX_SPI1_Init+0x64>)
 8001978:	2228      	movs	r2, #40	@ 0x28
 800197a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800197c:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <MX_SPI1_Init+0x64>)
 800197e:	2200      	movs	r2, #0
 8001980:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <MX_SPI1_Init+0x64>)
 8001984:	2200      	movs	r2, #0
 8001986:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001988:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <MX_SPI1_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <MX_SPI1_Init+0x64>)
 8001990:	220a      	movs	r2, #10
 8001992:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	@ (80019a8 <MX_SPI1_Init+0x64>)
 8001996:	f002 fb8b 	bl	80040b0 <HAL_SPI_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019a0:	f000 f943 	bl	8001c2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000290 	.word	0x20000290
 80019ac:	40013000 	.word	0x40013000

080019b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c4:	463b      	mov	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <MX_TIM4_Init+0x94>)
 80019ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001a48 <MX_TIM4_Init+0x98>)
 80019d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <MX_TIM4_Init+0x94>)
 80019d4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80019d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019da:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <MX_TIM4_Init+0x94>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50-1;
 80019e0:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <MX_TIM4_Init+0x94>)
 80019e2:	2231      	movs	r2, #49	@ 0x31
 80019e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e6:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <MX_TIM4_Init+0x94>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ec:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <MX_TIM4_Init+0x94>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019f2:	4814      	ldr	r0, [pc, #80]	@ (8001a44 <MX_TIM4_Init+0x94>)
 80019f4:	f003 f8e4 	bl	8004bc0 <HAL_TIM_Base_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80019fe:	f000 f914 	bl	8001c2a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480d      	ldr	r0, [pc, #52]	@ (8001a44 <MX_TIM4_Init+0x94>)
 8001a10:	f003 fa2d 	bl	8004e6e <HAL_TIM_ConfigClockSource>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001a1a:	f000 f906 	bl	8001c2a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	@ (8001a44 <MX_TIM4_Init+0x94>)
 8001a2c:	f003 fc02 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001a36:	f000 f8f8 	bl	8001c2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200002e8 	.word	0x200002e8
 8001a48:	40000800 	.word	0x40000800

08001a4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <MX_USART1_UART_Init+0x4c>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	@ (8001a9c <MX_USART1_UART_Init+0x50>)
 8001a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <MX_USART1_UART_Init+0x4c>)
 8001a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a98 <MX_USART1_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <MX_USART1_UART_Init+0x4c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <MX_USART1_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a70:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <MX_USART1_UART_Init+0x4c>)
 8001a72:	220c      	movs	r2, #12
 8001a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a76:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <MX_USART1_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <MX_USART1_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a82:	4805      	ldr	r0, [pc, #20]	@ (8001a98 <MX_USART1_UART_Init+0x4c>)
 8001a84:	f003 fc46 	bl	8005314 <HAL_UART_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a8e:	f000 f8cc 	bl	8001c2a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000330 	.word	0x20000330
 8001a9c:	40013800 	.word	0x40013800

08001aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa6:	f107 0310 	add.w	r3, r7, #16
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8001be4 <MX_GPIO_Init+0x144>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a4a      	ldr	r2, [pc, #296]	@ (8001be4 <MX_GPIO_Init+0x144>)
 8001aba:	f043 0310 	orr.w	r3, r3, #16
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b48      	ldr	r3, [pc, #288]	@ (8001be4 <MX_GPIO_Init+0x144>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001acc:	4b45      	ldr	r3, [pc, #276]	@ (8001be4 <MX_GPIO_Init+0x144>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a44      	ldr	r2, [pc, #272]	@ (8001be4 <MX_GPIO_Init+0x144>)
 8001ad2:	f043 0320 	orr.w	r3, r3, #32
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b42      	ldr	r3, [pc, #264]	@ (8001be4 <MX_GPIO_Init+0x144>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8001be4 <MX_GPIO_Init+0x144>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a3e      	ldr	r2, [pc, #248]	@ (8001be4 <MX_GPIO_Init+0x144>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b3c      	ldr	r3, [pc, #240]	@ (8001be4 <MX_GPIO_Init+0x144>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afc:	4b39      	ldr	r3, [pc, #228]	@ (8001be4 <MX_GPIO_Init+0x144>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a38      	ldr	r2, [pc, #224]	@ (8001be4 <MX_GPIO_Init+0x144>)
 8001b02:	f043 0308 	orr.w	r3, r3, #8
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b36      	ldr	r3, [pc, #216]	@ (8001be4 <MX_GPIO_Init+0x144>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_DACS_Pin|LDAC_Pin, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001b1a:	4833      	ldr	r0, [pc, #204]	@ (8001be8 <MX_GPIO_Init+0x148>)
 8001b1c:	f001 f93d 	bl	8002d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	211e      	movs	r1, #30
 8001b24:	4831      	ldr	r0, [pc, #196]	@ (8001bec <MX_GPIO_Init+0x14c>)
 8001b26:	f001 f938 	bl	8002d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f24f 4127 	movw	r1, #62503	@ 0xf427
 8001b30:	482f      	ldr	r0, [pc, #188]	@ (8001bf0 <MX_GPIO_Init+0x150>)
 8001b32:	f001 f932 	bl	8002d9a <HAL_GPIO_WritePin>
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SPI1_DACS_Pin LDAC_Pin */
  GPIO_InitStruct.Pin = SPI1_DACS_Pin|LDAC_Pin;
 8001b36:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4826      	ldr	r0, [pc, #152]	@ (8001be8 <MX_GPIO_Init+0x148>)
 8001b50:	f000 ff88 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : VselC0_Pin VselC1_Pin PROGB_Pin SPI1_FPGAS_Pin */
  GPIO_InitStruct.Pin = VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin;
 8001b54:	231e      	movs	r3, #30
 8001b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4820      	ldr	r0, [pc, #128]	@ (8001bec <MX_GPIO_Init+0x14c>)
 8001b6c:	f000 ff7a 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : VselB1_Pin VselB0_Pin VselA1_Pin VselA0_Pin
                           MODE_Pin M2_Pin M1_Pin M0_Pin
                           DIR_Pin */
  GPIO_InitStruct.Pin = VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 8001b70:	f24f 4327 	movw	r3, #62503	@ 0xf427
 8001b74:	613b      	str	r3, [r7, #16]
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	4619      	mov	r1, r3
 8001b88:	4819      	ldr	r0, [pc, #100]	@ (8001bf0 <MX_GPIO_Init+0x150>)
 8001b8a:	f000 ff6b 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FPGA_IRQ_Pin USB_detect_Pin */
  GPIO_InitStruct.Pin = FPGA_IRQ_Pin|USB_detect_Pin;
 8001b8e:	f640 0308 	movw	r3, #2056	@ 0x808
 8001b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b94:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <MX_GPIO_Init+0x154>)
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4813      	ldr	r0, [pc, #76]	@ (8001bf0 <MX_GPIO_Init+0x150>)
 8001ba4:	f000 ff5e 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DONE_Pin INITB_Pin */
  GPIO_InitStruct.Pin = DONE_Pin|INITB_Pin;
 8001ba8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480b      	ldr	r0, [pc, #44]	@ (8001bec <MX_GPIO_Init+0x14c>)
 8001bbe:	f000 ff51 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_IRQ_Pin */
  GPIO_InitStruct.Pin = UI_IRQ_Pin;
 8001bc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <MX_GPIO_Init+0x154>)
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UI_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_GPIO_Init+0x14c>)
 8001bd8:	f000 ff44 	bl	8002a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bdc:	bf00      	nop
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40011000 	.word	0x40011000
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40010c00 	.word	0x40010c00
 8001bf4:	10110000 	.word	0x10110000

08001bf8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
	RS485dataReady = 1;
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_UARTEx_RxEventCallback+0x1c>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	200003d4 	.word	0x200003d4

08001c18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2e:	b672      	cpsid	i
}
 8001c30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c32:	bf00      	nop
 8001c34:	e7fd      	b.n	8001c32 <Error_Handler+0x8>
	...

08001c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_MspInit+0x5c>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	4a14      	ldr	r2, [pc, #80]	@ (8001c94 <HAL_MspInit+0x5c>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6193      	str	r3, [r2, #24]
 8001c4a:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_MspInit+0x5c>)
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <HAL_MspInit+0x5c>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c94 <HAL_MspInit+0x5c>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	61d3      	str	r3, [r2, #28]
 8001c62:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <HAL_MspInit+0x5c>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <HAL_MspInit+0x60>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <HAL_MspInit+0x60>)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010000 	.word	0x40010000

08001c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a14      	ldr	r2, [pc, #80]	@ (8001d08 <HAL_ADC_MspInit+0x6c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d121      	bne.n	8001d00 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <HAL_ADC_MspInit+0x70>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <HAL_ADC_MspInit+0x70>)
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <HAL_ADC_MspInit+0x70>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <HAL_ADC_MspInit+0x70>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <HAL_ADC_MspInit+0x70>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_ADC_MspInit+0x70>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Ain_Pin;
 8001cec:	2301      	movs	r3, #1
 8001cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Ain_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <HAL_ADC_MspInit+0x74>)
 8001cfc:	f000 feb2 	bl	8002a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40012400 	.word	0x40012400
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010800 	.word	0x40010800

08001d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	@ 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <HAL_I2C_MspInit+0x90>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d132      	bne.n	8001d9a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d34:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <HAL_I2C_MspInit+0x94>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a1b      	ldr	r2, [pc, #108]	@ (8001da8 <HAL_I2C_MspInit+0x94>)
 8001d3a:	f043 0308 	orr.w	r3, r3, #8
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_I2C_MspInit+0x94>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d4c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d52:	2312      	movs	r3, #18
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4812      	ldr	r0, [pc, #72]	@ (8001dac <HAL_I2C_MspInit+0x98>)
 8001d62:	f000 fe7f 	bl	8002a64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001d66:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_I2C_MspInit+0x9c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001db0 <HAL_I2C_MspInit+0x9c>)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d82:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <HAL_I2C_MspInit+0x94>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4a08      	ldr	r2, [pc, #32]	@ (8001da8 <HAL_I2C_MspInit+0x94>)
 8001d88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d8c:	61d3      	str	r3, [r2, #28]
 8001d8e:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <HAL_I2C_MspInit+0x94>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	@ 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40005400 	.word	0x40005400
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010c00 	.word	0x40010c00
 8001db0:	40010000 	.word	0x40010000

08001db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1b      	ldr	r2, [pc, #108]	@ (8001e3c <HAL_SPI_MspInit+0x88>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d12f      	bne.n	8001e34 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <HAL_SPI_MspInit+0x8c>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	@ (8001e40 <HAL_SPI_MspInit+0x8c>)
 8001dda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <HAL_SPI_MspInit+0x8c>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dec:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <HAL_SPI_MspInit+0x8c>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a13      	ldr	r2, [pc, #76]	@ (8001e40 <HAL_SPI_MspInit+0x8c>)
 8001df2:	f043 0304 	orr.w	r3, r3, #4
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <HAL_SPI_MspInit+0x8c>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e04:	23a0      	movs	r3, #160	@ 0xa0
 8001e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	4619      	mov	r1, r3
 8001e16:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <HAL_SPI_MspInit+0x90>)
 8001e18:	f000 fe24 	bl	8002a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e1c:	2340      	movs	r3, #64	@ 0x40
 8001e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4805      	ldr	r0, [pc, #20]	@ (8001e44 <HAL_SPI_MspInit+0x90>)
 8001e30:	f000 fe18 	bl	8002a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40013000 	.word	0x40013000
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010800 	.word	0x40010800

08001e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	@ (8001e8c <HAL_TIM_Base_MspInit+0x44>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d113      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <HAL_TIM_Base_MspInit+0x48>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e90 <HAL_TIM_Base_MspInit+0x48>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <HAL_TIM_Base_MspInit+0x48>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	201e      	movs	r0, #30
 8001e78:	f000 fd0b 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e7c:	201e      	movs	r0, #30
 8001e7e:	f000 fd24 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	40021000 	.word	0x40021000

08001e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	@ 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a26      	ldr	r2, [pc, #152]	@ (8001f48 <HAL_UART_MspInit+0xb4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d145      	bne.n	8001f40 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb4:	4b25      	ldr	r3, [pc, #148]	@ (8001f4c <HAL_UART_MspInit+0xb8>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a24      	ldr	r2, [pc, #144]	@ (8001f4c <HAL_UART_MspInit+0xb8>)
 8001eba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <HAL_UART_MspInit+0xb8>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <HAL_UART_MspInit+0xb8>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f4c <HAL_UART_MspInit+0xb8>)
 8001ed2:	f043 0308 	orr.w	r3, r3, #8
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <HAL_UART_MspInit+0xb8>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ee4:	2340      	movs	r3, #64	@ 0x40
 8001ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4816      	ldr	r0, [pc, #88]	@ (8001f50 <HAL_UART_MspInit+0xbc>)
 8001ef8:	f000 fdb4 	bl	8002a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4810      	ldr	r0, [pc, #64]	@ (8001f50 <HAL_UART_MspInit+0xbc>)
 8001f10:	f000 fda8 	bl	8002a64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <HAL_UART_MspInit+0xc0>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <HAL_UART_MspInit+0xc0>)
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2101      	movs	r1, #1
 8001f34:	2025      	movs	r0, #37	@ 0x25
 8001f36:	f000 fcac 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f3a:	2025      	movs	r0, #37	@ 0x25
 8001f3c:	f000 fcc5 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	@ 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40013800 	.word	0x40013800
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010c00 	.word	0x40010c00
 8001f54:	40010000 	.word	0x40010000

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <NMI_Handler+0x4>

08001f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <HardFault_Handler+0x4>

08001f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <MemManage_Handler+0x4>

08001f70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa8:	f000 f94a 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <TIM4_IRQHandler+0x10>)
 8001fb6:	f002 fe52 	bl	8004c5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200002e8 	.word	0x200002e8

08001fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fc8:	4802      	ldr	r0, [pc, #8]	@ (8001fd4 <USART1_IRQHandler+0x10>)
 8001fca:	f003 fad3 	bl	8005574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000330 	.word	0x20000330

08001fd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return 1;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <_kill>:

int _kill(int pid, int sig)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ff0:	f006 fbfe 	bl	80087f0 <__errno>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2216      	movs	r2, #22
 8001ff8:	601a      	str	r2, [r3, #0]
  return -1;
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <_exit>:

void _exit (int status)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800200e:	f04f 31ff 	mov.w	r1, #4294967295
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ffe7 	bl	8001fe6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <_exit+0x12>

0800201c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	e00a      	b.n	8002044 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800202e:	f3af 8000 	nop.w
 8002032:	4601      	mov	r1, r0
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	60ba      	str	r2, [r7, #8]
 800203a:	b2ca      	uxtb	r2, r1
 800203c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbf0      	blt.n	800202e <_read+0x12>
  }

  return len;
 800204c:	687b      	ldr	r3, [r7, #4]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e009      	b.n	800207c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	60ba      	str	r2, [r7, #8]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	dbf1      	blt.n	8002068 <_write+0x12>
  }
  return len;
 8002084:	687b      	ldr	r3, [r7, #4]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_close>:

int _close(int file)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020b4:	605a      	str	r2, [r3, #4]
  return 0;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <_isatty>:

int _isatty(int file)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
	...

080020f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4a14      	ldr	r2, [pc, #80]	@ (800214c <_sbrk+0x5c>)
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <_sbrk+0x60>)
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <_sbrk+0x64>)
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <_sbrk+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d207      	bcs.n	8002130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002120:	f006 fb66 	bl	80087f0 <__errno>
 8002124:	4603      	mov	r3, r0
 8002126:	220c      	movs	r2, #12
 8002128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	e009      	b.n	8002144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	4a05      	ldr	r2, [pc, #20]	@ (8002154 <_sbrk+0x64>)
 8002140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20005000 	.word	0x20005000
 8002150:	00000400 	.word	0x00000400
 8002154:	200003d8 	.word	0x200003d8
 8002158:	20000698 	.word	0x20000698

0800215c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002168:	f7ff fff8 	bl	800215c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800216c:	480b      	ldr	r0, [pc, #44]	@ (800219c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800216e:	490c      	ldr	r1, [pc, #48]	@ (80021a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002170:	4a0c      	ldr	r2, [pc, #48]	@ (80021a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002174:	e002      	b.n	800217c <LoopCopyDataInit>

08002176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217a:	3304      	adds	r3, #4

0800217c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800217c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002180:	d3f9      	bcc.n	8002176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002182:	4a09      	ldr	r2, [pc, #36]	@ (80021a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002184:	4c09      	ldr	r4, [pc, #36]	@ (80021ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002188:	e001      	b.n	800218e <LoopFillZerobss>

0800218a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800218c:	3204      	adds	r2, #4

0800218e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002190:	d3fb      	bcc.n	800218a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002192:	f006 fb33 	bl	80087fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002196:	f7ff f9db 	bl	8001550 <main>
  bx lr
 800219a:	4770      	bx	lr
  ldr r0, =_sdata
 800219c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80021a4:	0800bb58 	.word	0x0800bb58
  ldr r2, =_sbss
 80021a8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80021ac:	20000694 	.word	0x20000694

080021b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b0:	e7fe      	b.n	80021b0 <ADC1_2_IRQHandler>
	...

080021b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <HAL_Init+0x28>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <HAL_Init+0x28>)
 80021be:	f043 0310 	orr.w	r3, r3, #16
 80021c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c4:	2003      	movs	r0, #3
 80021c6:	f000 fb59 	bl	800287c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ca:	200f      	movs	r0, #15
 80021cc:	f000 f808 	bl	80021e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d0:	f7ff fd32 	bl	8001c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_InitTick+0x54>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_InitTick+0x58>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fb71 	bl	80028e6 <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e00e      	b.n	800222c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d80a      	bhi.n	800222a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002214:	2200      	movs	r2, #0
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f000 fb39 	bl	8002892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002220:	4a06      	ldr	r2, [pc, #24]	@ (800223c <HAL_InitTick+0x5c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000000 	.word	0x20000000
 8002238:	20000008 	.word	0x20000008
 800223c:	20000004 	.word	0x20000004

08002240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HAL_IncTick+0x1c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <HAL_IncTick+0x20>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a03      	ldr	r2, [pc, #12]	@ (8002260 <HAL_IncTick+0x20>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	20000008 	.word	0x20000008
 8002260:	200003dc 	.word	0x200003dc

08002264 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return uwTick;
 8002268:	4b02      	ldr	r3, [pc, #8]	@ (8002274 <HAL_GetTick+0x10>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	200003dc 	.word	0x200003dc

08002278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002280:	f7ff fff0 	bl	8002264 <HAL_GetTick>
 8002284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d005      	beq.n	800229e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <HAL_Delay+0x44>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800229e:	bf00      	nop
 80022a0:	f7ff ffe0 	bl	8002264 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d8f7      	bhi.n	80022a0 <HAL_Delay+0x28>
  {
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000008 	.word	0x20000008

080022c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0be      	b.n	8002460 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff fccc 	bl	8001c9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f9ab 	bl	8002660 <ADC_ConversionStop_Disable>
 800230a:	4603      	mov	r3, r0
 800230c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 8099 	bne.w	800244e <HAL_ADC_Init+0x18e>
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 8095 	bne.w	800244e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002328:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800232c:	f023 0302 	bic.w	r3, r3, #2
 8002330:	f043 0202 	orr.w	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002340:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7b1b      	ldrb	r3, [r3, #12]
 8002346:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002348:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	4313      	orrs	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002358:	d003      	beq.n	8002362 <HAL_ADC_Init+0xa2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d102      	bne.n	8002368 <HAL_ADC_Init+0xa8>
 8002362:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002366:	e000      	b.n	800236a <HAL_ADC_Init+0xaa>
 8002368:	2300      	movs	r3, #0
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7d1b      	ldrb	r3, [r3, #20]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d119      	bne.n	80023ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7b1b      	ldrb	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	3b01      	subs	r3, #1
 8002386:	035a      	lsls	r2, r3, #13
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	e00b      	b.n	80023ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	430a      	orrs	r2, r1
 80023be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	4b28      	ldr	r3, [pc, #160]	@ (8002468 <HAL_ADC_Init+0x1a8>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023dc:	d003      	beq.n	80023e6 <HAL_ADC_Init+0x126>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d104      	bne.n	80023f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	430a      	orrs	r2, r1
 8002402:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	4b18      	ldr	r3, [pc, #96]	@ (800246c <HAL_ADC_Init+0x1ac>)
 800240c:	4013      	ands	r3, r2
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	429a      	cmp	r2, r3
 8002412:	d10b      	bne.n	800242c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	f023 0303 	bic.w	r3, r3, #3
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800242a:	e018      	b.n	800245e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	f023 0312 	bic.w	r3, r3, #18
 8002434:	f043 0210 	orr.w	r2, r3, #16
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002440:	f043 0201 	orr.w	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800244c:	e007      	b.n	800245e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002452:	f043 0210 	orr.w	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800245e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	ffe1f7fd 	.word	0xffe1f7fd
 800246c:	ff1f0efe 	.word	0xff1f0efe

08002470 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x20>
 800248c:	2302      	movs	r3, #2
 800248e:	e0dc      	b.n	800264a <HAL_ADC_ConfigChannel+0x1da>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b06      	cmp	r3, #6
 800249e:	d81c      	bhi.n	80024da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b05      	subs	r3, #5
 80024b2:	221f      	movs	r2, #31
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4019      	ands	r1, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	3b05      	subs	r3, #5
 80024cc:	fa00 f203 	lsl.w	r2, r0, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80024d8:	e03c      	b.n	8002554 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d81c      	bhi.n	800251c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b23      	subs	r3, #35	@ 0x23
 80024f4:	221f      	movs	r2, #31
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	4019      	ands	r1, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3b23      	subs	r3, #35	@ 0x23
 800250e:	fa00 f203 	lsl.w	r2, r0, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	631a      	str	r2, [r3, #48]	@ 0x30
 800251a:	e01b      	b.n	8002554 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	3b41      	subs	r3, #65	@ 0x41
 800252e:	221f      	movs	r2, #31
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	4019      	ands	r1, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	3b41      	subs	r3, #65	@ 0x41
 8002548:	fa00 f203 	lsl.w	r2, r0, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b09      	cmp	r3, #9
 800255a:	d91c      	bls.n	8002596 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68d9      	ldr	r1, [r3, #12]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	3b1e      	subs	r3, #30
 800256e:	2207      	movs	r2, #7
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	4019      	ands	r1, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6898      	ldr	r0, [r3, #8]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	3b1e      	subs	r3, #30
 8002588:	fa00 f203 	lsl.w	r2, r0, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	e019      	b.n	80025ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6919      	ldr	r1, [r3, #16]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	2207      	movs	r2, #7
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	4019      	ands	r1, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6898      	ldr	r0, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	fa00 f203 	lsl.w	r2, r0, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b10      	cmp	r3, #16
 80025d0:	d003      	beq.n	80025da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025d6:	2b11      	cmp	r3, #17
 80025d8:	d132      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1d      	ldr	r2, [pc, #116]	@ (8002654 <HAL_ADC_ConfigChannel+0x1e4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d125      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d126      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002600:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b10      	cmp	r3, #16
 8002608:	d11a      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800260a:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <HAL_ADC_ConfigChannel+0x1e8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a13      	ldr	r2, [pc, #76]	@ (800265c <HAL_ADC_ConfigChannel+0x1ec>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	0c9a      	lsrs	r2, r3, #18
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002620:	e002      	b.n	8002628 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3b01      	subs	r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f9      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x1b2>
 800262e:	e007      	b.n	8002640 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	40012400 	.word	0x40012400
 8002658:	20000000 	.word	0x20000000
 800265c:	431bde83 	.word	0x431bde83

08002660 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b01      	cmp	r3, #1
 8002678:	d12e      	bne.n	80026d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800268a:	f7ff fdeb 	bl	8002264 <HAL_GetTick>
 800268e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002690:	e01b      	b.n	80026ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002692:	f7ff fde7 	bl	8002264 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d914      	bls.n	80026ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10d      	bne.n	80026ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	f043 0210 	orr.w	r2, r3, #16
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e007      	b.n	80026da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d0dc      	beq.n	8002692 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	@ (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4906      	ldr	r1, [pc, #24]	@ (800277c <__NVIC_EnableIRQ+0x34>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	@ (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	@ (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	@ 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
         );
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	@ 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002848:	d301      	bcc.n	800284e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284a:	2301      	movs	r3, #1
 800284c:	e00f      	b.n	800286e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284e:	4a0a      	ldr	r2, [pc, #40]	@ (8002878 <SysTick_Config+0x40>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002856:	210f      	movs	r1, #15
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f7ff ff90 	bl	8002780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002860:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <SysTick_Config+0x40>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002866:	4b04      	ldr	r3, [pc, #16]	@ (8002878 <SysTick_Config+0x40>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff2d 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a4:	f7ff ff42 	bl	800272c <__NVIC_GetPriorityGrouping>
 80028a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff ff90 	bl	80027d4 <NVIC_EncodePriority>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff5f 	bl	8002780 <__NVIC_SetPriority>
}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff35 	bl	8002748 <__NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ffa2 	bl	8002838 <SysTick_Config>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d008      	beq.n	8002928 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2204      	movs	r2, #4
 800291a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e020      	b.n	800296a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 020e 	bic.w	r2, r2, #14
 8002936:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002950:	2101      	movs	r1, #1
 8002952:	fa01 f202 	lsl.w	r2, r1, r2
 8002956:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d005      	beq.n	8002998 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2204      	movs	r2, #4
 8002990:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e051      	b.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 020e 	bic.w	r2, r2, #14
 80029a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a22      	ldr	r2, [pc, #136]	@ (8002a48 <HAL_DMA_Abort_IT+0xd4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d029      	beq.n	8002a16 <HAL_DMA_Abort_IT+0xa2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a21      	ldr	r2, [pc, #132]	@ (8002a4c <HAL_DMA_Abort_IT+0xd8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d022      	beq.n	8002a12 <HAL_DMA_Abort_IT+0x9e>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a50 <HAL_DMA_Abort_IT+0xdc>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01a      	beq.n	8002a0c <HAL_DMA_Abort_IT+0x98>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1e      	ldr	r2, [pc, #120]	@ (8002a54 <HAL_DMA_Abort_IT+0xe0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d012      	beq.n	8002a06 <HAL_DMA_Abort_IT+0x92>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a58 <HAL_DMA_Abort_IT+0xe4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00a      	beq.n	8002a00 <HAL_DMA_Abort_IT+0x8c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1b      	ldr	r2, [pc, #108]	@ (8002a5c <HAL_DMA_Abort_IT+0xe8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d102      	bne.n	80029fa <HAL_DMA_Abort_IT+0x86>
 80029f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029f8:	e00e      	b.n	8002a18 <HAL_DMA_Abort_IT+0xa4>
 80029fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029fe:	e00b      	b.n	8002a18 <HAL_DMA_Abort_IT+0xa4>
 8002a00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a04:	e008      	b.n	8002a18 <HAL_DMA_Abort_IT+0xa4>
 8002a06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a0a:	e005      	b.n	8002a18 <HAL_DMA_Abort_IT+0xa4>
 8002a0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a10:	e002      	b.n	8002a18 <HAL_DMA_Abort_IT+0xa4>
 8002a12:	2310      	movs	r3, #16
 8002a14:	e000      	b.n	8002a18 <HAL_DMA_Abort_IT+0xa4>
 8002a16:	2301      	movs	r3, #1
 8002a18:	4a11      	ldr	r2, [pc, #68]	@ (8002a60 <HAL_DMA_Abort_IT+0xec>)
 8002a1a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
    } 
  }
  return status;
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40020008 	.word	0x40020008
 8002a4c:	4002001c 	.word	0x4002001c
 8002a50:	40020030 	.word	0x40020030
 8002a54:	40020044 	.word	0x40020044
 8002a58:	40020058 	.word	0x40020058
 8002a5c:	4002006c 	.word	0x4002006c
 8002a60:	40020000 	.word	0x40020000

08002a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b08b      	sub	sp, #44	@ 0x2c
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a72:	2300      	movs	r3, #0
 8002a74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a76:	e169      	b.n	8002d4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	f040 8158 	bne.w	8002d46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4a9a      	ldr	r2, [pc, #616]	@ (8002d04 <HAL_GPIO_Init+0x2a0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d05e      	beq.n	8002b5e <HAL_GPIO_Init+0xfa>
 8002aa0:	4a98      	ldr	r2, [pc, #608]	@ (8002d04 <HAL_GPIO_Init+0x2a0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d875      	bhi.n	8002b92 <HAL_GPIO_Init+0x12e>
 8002aa6:	4a98      	ldr	r2, [pc, #608]	@ (8002d08 <HAL_GPIO_Init+0x2a4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d058      	beq.n	8002b5e <HAL_GPIO_Init+0xfa>
 8002aac:	4a96      	ldr	r2, [pc, #600]	@ (8002d08 <HAL_GPIO_Init+0x2a4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d86f      	bhi.n	8002b92 <HAL_GPIO_Init+0x12e>
 8002ab2:	4a96      	ldr	r2, [pc, #600]	@ (8002d0c <HAL_GPIO_Init+0x2a8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d052      	beq.n	8002b5e <HAL_GPIO_Init+0xfa>
 8002ab8:	4a94      	ldr	r2, [pc, #592]	@ (8002d0c <HAL_GPIO_Init+0x2a8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d869      	bhi.n	8002b92 <HAL_GPIO_Init+0x12e>
 8002abe:	4a94      	ldr	r2, [pc, #592]	@ (8002d10 <HAL_GPIO_Init+0x2ac>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d04c      	beq.n	8002b5e <HAL_GPIO_Init+0xfa>
 8002ac4:	4a92      	ldr	r2, [pc, #584]	@ (8002d10 <HAL_GPIO_Init+0x2ac>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d863      	bhi.n	8002b92 <HAL_GPIO_Init+0x12e>
 8002aca:	4a92      	ldr	r2, [pc, #584]	@ (8002d14 <HAL_GPIO_Init+0x2b0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d046      	beq.n	8002b5e <HAL_GPIO_Init+0xfa>
 8002ad0:	4a90      	ldr	r2, [pc, #576]	@ (8002d14 <HAL_GPIO_Init+0x2b0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d85d      	bhi.n	8002b92 <HAL_GPIO_Init+0x12e>
 8002ad6:	2b12      	cmp	r3, #18
 8002ad8:	d82a      	bhi.n	8002b30 <HAL_GPIO_Init+0xcc>
 8002ada:	2b12      	cmp	r3, #18
 8002adc:	d859      	bhi.n	8002b92 <HAL_GPIO_Init+0x12e>
 8002ade:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae4 <HAL_GPIO_Init+0x80>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002b5f 	.word	0x08002b5f
 8002ae8:	08002b39 	.word	0x08002b39
 8002aec:	08002b4b 	.word	0x08002b4b
 8002af0:	08002b8d 	.word	0x08002b8d
 8002af4:	08002b93 	.word	0x08002b93
 8002af8:	08002b93 	.word	0x08002b93
 8002afc:	08002b93 	.word	0x08002b93
 8002b00:	08002b93 	.word	0x08002b93
 8002b04:	08002b93 	.word	0x08002b93
 8002b08:	08002b93 	.word	0x08002b93
 8002b0c:	08002b93 	.word	0x08002b93
 8002b10:	08002b93 	.word	0x08002b93
 8002b14:	08002b93 	.word	0x08002b93
 8002b18:	08002b93 	.word	0x08002b93
 8002b1c:	08002b93 	.word	0x08002b93
 8002b20:	08002b93 	.word	0x08002b93
 8002b24:	08002b93 	.word	0x08002b93
 8002b28:	08002b41 	.word	0x08002b41
 8002b2c:	08002b55 	.word	0x08002b55
 8002b30:	4a79      	ldr	r2, [pc, #484]	@ (8002d18 <HAL_GPIO_Init+0x2b4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b36:	e02c      	b.n	8002b92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	623b      	str	r3, [r7, #32]
          break;
 8002b3e:	e029      	b.n	8002b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	3304      	adds	r3, #4
 8002b46:	623b      	str	r3, [r7, #32]
          break;
 8002b48:	e024      	b.n	8002b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	3308      	adds	r3, #8
 8002b50:	623b      	str	r3, [r7, #32]
          break;
 8002b52:	e01f      	b.n	8002b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	330c      	adds	r3, #12
 8002b5a:	623b      	str	r3, [r7, #32]
          break;
 8002b5c:	e01a      	b.n	8002b94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d102      	bne.n	8002b6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b66:	2304      	movs	r3, #4
 8002b68:	623b      	str	r3, [r7, #32]
          break;
 8002b6a:	e013      	b.n	8002b94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b74:	2308      	movs	r3, #8
 8002b76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	611a      	str	r2, [r3, #16]
          break;
 8002b7e:	e009      	b.n	8002b94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b80:	2308      	movs	r3, #8
 8002b82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	615a      	str	r2, [r3, #20]
          break;
 8002b8a:	e003      	b.n	8002b94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	623b      	str	r3, [r7, #32]
          break;
 8002b90:	e000      	b.n	8002b94 <HAL_GPIO_Init+0x130>
          break;
 8002b92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2bff      	cmp	r3, #255	@ 0xff
 8002b98:	d801      	bhi.n	8002b9e <HAL_GPIO_Init+0x13a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	e001      	b.n	8002ba2 <HAL_GPIO_Init+0x13e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2bff      	cmp	r3, #255	@ 0xff
 8002ba8:	d802      	bhi.n	8002bb0 <HAL_GPIO_Init+0x14c>
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	e002      	b.n	8002bb6 <HAL_GPIO_Init+0x152>
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	3b08      	subs	r3, #8
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	210f      	movs	r1, #15
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	6a39      	ldr	r1, [r7, #32]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 80b1 	beq.w	8002d46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002be4:	4b4d      	ldr	r3, [pc, #308]	@ (8002d1c <HAL_GPIO_Init+0x2b8>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	4a4c      	ldr	r2, [pc, #304]	@ (8002d1c <HAL_GPIO_Init+0x2b8>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6193      	str	r3, [r2, #24]
 8002bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8002d1c <HAL_GPIO_Init+0x2b8>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bfc:	4a48      	ldr	r2, [pc, #288]	@ (8002d20 <HAL_GPIO_Init+0x2bc>)
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	3302      	adds	r3, #2
 8002c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a40      	ldr	r2, [pc, #256]	@ (8002d24 <HAL_GPIO_Init+0x2c0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d013      	beq.n	8002c50 <HAL_GPIO_Init+0x1ec>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d28 <HAL_GPIO_Init+0x2c4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00d      	beq.n	8002c4c <HAL_GPIO_Init+0x1e8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a3e      	ldr	r2, [pc, #248]	@ (8002d2c <HAL_GPIO_Init+0x2c8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <HAL_GPIO_Init+0x1e4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d30 <HAL_GPIO_Init+0x2cc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_GPIO_Init+0x1e0>
 8002c40:	2303      	movs	r3, #3
 8002c42:	e006      	b.n	8002c52 <HAL_GPIO_Init+0x1ee>
 8002c44:	2304      	movs	r3, #4
 8002c46:	e004      	b.n	8002c52 <HAL_GPIO_Init+0x1ee>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e002      	b.n	8002c52 <HAL_GPIO_Init+0x1ee>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_GPIO_Init+0x1ee>
 8002c50:	2300      	movs	r3, #0
 8002c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c54:	f002 0203 	and.w	r2, r2, #3
 8002c58:	0092      	lsls	r2, r2, #2
 8002c5a:	4093      	lsls	r3, r2
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c62:	492f      	ldr	r1, [pc, #188]	@ (8002d20 <HAL_GPIO_Init+0x2bc>)
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	492c      	ldr	r1, [pc, #176]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	4928      	ldr	r1, [pc, #160]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ca4:	4b23      	ldr	r3, [pc, #140]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	4922      	ldr	r1, [pc, #136]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60cb      	str	r3, [r1, #12]
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cb2:	4b20      	ldr	r3, [pc, #128]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	491e      	ldr	r1, [pc, #120]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d006      	beq.n	8002cda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ccc:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4918      	ldr	r1, [pc, #96]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cda:	4b16      	ldr	r3, [pc, #88]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	4914      	ldr	r1, [pc, #80]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d021      	beq.n	8002d38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	490e      	ldr	r1, [pc, #56]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]
 8002d00:	e021      	b.n	8002d46 <HAL_GPIO_Init+0x2e2>
 8002d02:	bf00      	nop
 8002d04:	10320000 	.word	0x10320000
 8002d08:	10310000 	.word	0x10310000
 8002d0c:	10220000 	.word	0x10220000
 8002d10:	10210000 	.word	0x10210000
 8002d14:	10120000 	.word	0x10120000
 8002d18:	10110000 	.word	0x10110000
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40010000 	.word	0x40010000
 8002d24:	40010800 	.word	0x40010800
 8002d28:	40010c00 	.word	0x40010c00
 8002d2c:	40011000 	.word	0x40011000
 8002d30:	40011400 	.word	0x40011400
 8002d34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <HAL_GPIO_Init+0x304>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	4909      	ldr	r1, [pc, #36]	@ (8002d68 <HAL_GPIO_Init+0x304>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	3301      	adds	r3, #1
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f47f ae8e 	bne.w	8002a78 <HAL_GPIO_Init+0x14>
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	372c      	adds	r7, #44	@ 0x2c
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr
 8002d68:	40010400 	.word	0x40010400

08002d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	887b      	ldrh	r3, [r7, #2]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	e001      	b.n	8002d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	807b      	strh	r3, [r7, #2]
 8002da6:	4613      	mov	r3, r2
 8002da8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002daa:	787b      	ldrb	r3, [r7, #1]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002db0:	887a      	ldrh	r2, [r7, #2]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002db6:	e003      	b.n	8002dc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	041a      	lsls	r2, r3, #16
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	611a      	str	r2, [r3, #16]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e12b      	b.n	8003036 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe ff8e 	bl	8001d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2224      	movs	r2, #36	@ 0x24
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e30:	f001 f842 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 8002e34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a81      	ldr	r2, [pc, #516]	@ (8003040 <HAL_I2C_Init+0x274>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d807      	bhi.n	8002e50 <HAL_I2C_Init+0x84>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a80      	ldr	r2, [pc, #512]	@ (8003044 <HAL_I2C_Init+0x278>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	bf94      	ite	ls
 8002e48:	2301      	movls	r3, #1
 8002e4a:	2300      	movhi	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e006      	b.n	8002e5e <HAL_I2C_Init+0x92>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a7d      	ldr	r2, [pc, #500]	@ (8003048 <HAL_I2C_Init+0x27c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bf94      	ite	ls
 8002e58:	2301      	movls	r3, #1
 8002e5a:	2300      	movhi	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0e7      	b.n	8003036 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a78      	ldr	r2, [pc, #480]	@ (800304c <HAL_I2C_Init+0x280>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	0c9b      	lsrs	r3, r3, #18
 8002e70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a6a      	ldr	r2, [pc, #424]	@ (8003040 <HAL_I2C_Init+0x274>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d802      	bhi.n	8002ea0 <HAL_I2C_Init+0xd4>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	e009      	b.n	8002eb4 <HAL_I2C_Init+0xe8>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	4a69      	ldr	r2, [pc, #420]	@ (8003050 <HAL_I2C_Init+0x284>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ec6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	495c      	ldr	r1, [pc, #368]	@ (8003040 <HAL_I2C_Init+0x274>)
 8002ed0:	428b      	cmp	r3, r1
 8002ed2:	d819      	bhi.n	8002f08 <HAL_I2C_Init+0x13c>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e59      	subs	r1, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee2:	1c59      	adds	r1, r3, #1
 8002ee4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ee8:	400b      	ands	r3, r1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_I2C_Init+0x138>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1e59      	subs	r1, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f02:	e051      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f04:	2304      	movs	r3, #4
 8002f06:	e04f      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d111      	bne.n	8002f34 <HAL_I2C_Init+0x168>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1e58      	subs	r0, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	440b      	add	r3, r1
 8002f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e012      	b.n	8002f5a <HAL_I2C_Init+0x18e>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1e58      	subs	r0, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	0099      	lsls	r1, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Init+0x196>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e022      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10e      	bne.n	8002f88 <HAL_I2C_Init+0x1bc>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1e58      	subs	r0, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	440b      	add	r3, r1
 8002f78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f86:	e00f      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e58      	subs	r0, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	0099      	lsls	r1, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	6809      	ldr	r1, [r1, #0]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6911      	ldr	r1, [r2, #16]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68d2      	ldr	r2, [r2, #12]
 8002fe2:	4311      	orrs	r1, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	000186a0 	.word	0x000186a0
 8003044:	001e847f 	.word	0x001e847f
 8003048:	003d08ff 	.word	0x003d08ff
 800304c:	431bde83 	.word	0x431bde83
 8003050:	10624dd3 	.word	0x10624dd3

08003054 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	4608      	mov	r0, r1
 800305e:	4611      	mov	r1, r2
 8003060:	461a      	mov	r2, r3
 8003062:	4603      	mov	r3, r0
 8003064:	817b      	strh	r3, [r7, #10]
 8003066:	460b      	mov	r3, r1
 8003068:	813b      	strh	r3, [r7, #8]
 800306a:	4613      	mov	r3, r2
 800306c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800306e:	f7ff f8f9 	bl	8002264 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b20      	cmp	r3, #32
 800307e:	f040 80d9 	bne.w	8003234 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	2319      	movs	r3, #25
 8003088:	2201      	movs	r2, #1
 800308a:	496d      	ldr	r1, [pc, #436]	@ (8003240 <HAL_I2C_Mem_Write+0x1ec>)
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f971 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
 800309a:	e0cc      	b.n	8003236 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_I2C_Mem_Write+0x56>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0c5      	b.n	8003236 <HAL_I2C_Mem_Write+0x1e2>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d007      	beq.n	80030d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2221      	movs	r2, #33	@ 0x21
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2240      	movs	r2, #64	@ 0x40
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a3a      	ldr	r2, [r7, #32]
 80030fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003100:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4a4d      	ldr	r2, [pc, #308]	@ (8003244 <HAL_I2C_Mem_Write+0x1f0>)
 8003110:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003112:	88f8      	ldrh	r0, [r7, #6]
 8003114:	893a      	ldrh	r2, [r7, #8]
 8003116:	8979      	ldrh	r1, [r7, #10]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	4603      	mov	r3, r0
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f890 	bl	8003248 <I2C_RequestMemoryWrite>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d052      	beq.n	80031d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e081      	b.n	8003236 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fa36 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00d      	beq.n	800315e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	2b04      	cmp	r3, #4
 8003148:	d107      	bne.n	800315a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003158:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e06b      	b.n	8003236 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	781a      	ldrb	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b04      	cmp	r3, #4
 800319a:	d11b      	bne.n	80031d4 <HAL_I2C_Mem_Write+0x180>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d017      	beq.n	80031d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	781a      	ldrb	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1aa      	bne.n	8003132 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fa29 	bl	8003638 <I2C_WaitOnBTFFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00d      	beq.n	8003208 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d107      	bne.n	8003204 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003202:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e016      	b.n	8003236 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	00100002 	.word	0x00100002
 8003244:	ffff0000 	.word	0xffff0000

08003248 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	4603      	mov	r3, r0
 8003258:	817b      	strh	r3, [r7, #10]
 800325a:	460b      	mov	r3, r1
 800325c:	813b      	strh	r3, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003270:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	2200      	movs	r2, #0
 800327a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f878 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003298:	d103      	bne.n	80032a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e05f      	b.n	8003366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032a6:	897b      	ldrh	r3, [r7, #10]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	6a3a      	ldr	r2, [r7, #32]
 80032ba:	492d      	ldr	r1, [pc, #180]	@ (8003370 <I2C_RequestMemoryWrite+0x128>)
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f8d3 	bl	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e04c      	b.n	8003366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e4:	6a39      	ldr	r1, [r7, #32]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f95e 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00d      	beq.n	800330e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d107      	bne.n	800330a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003308:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e02b      	b.n	8003366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003314:	893b      	ldrh	r3, [r7, #8]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	611a      	str	r2, [r3, #16]
 800331e:	e021      	b.n	8003364 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003320:	893b      	ldrh	r3, [r7, #8]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	b29b      	uxth	r3, r3
 8003326:	b2da      	uxtb	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800332e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003330:	6a39      	ldr	r1, [r7, #32]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f938 	bl	80035a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	2b04      	cmp	r3, #4
 8003344:	d107      	bne.n	8003356 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003354:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e005      	b.n	8003366 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800335a:	893b      	ldrh	r3, [r7, #8]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	00010002 	.word	0x00010002

08003374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003384:	e048      	b.n	8003418 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d044      	beq.n	8003418 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	f7fe ff69 	bl	8002264 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d139      	bne.n	8003418 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d10d      	bne.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	43da      	mvns	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4013      	ands	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	e00c      	b.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	43da      	mvns	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4013      	ands	r3, r2
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d116      	bne.n	8003418 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e023      	b.n	8003460 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	0c1b      	lsrs	r3, r3, #16
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d10d      	bne.n	800343e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	43da      	mvns	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4013      	ands	r3, r2
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	e00c      	b.n	8003458 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	43da      	mvns	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4013      	ands	r3, r2
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	429a      	cmp	r2, r3
 800345c:	d093      	beq.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003476:	e071      	b.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003486:	d123      	bne.n	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003496:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	f043 0204 	orr.w	r2, r3, #4
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e067      	b.n	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d6:	d041      	beq.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d8:	f7fe fec4 	bl	8002264 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d302      	bcc.n	80034ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d136      	bne.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d10c      	bne.n	8003512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	43da      	mvns	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4013      	ands	r3, r2
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	e00b      	b.n	800352a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	43da      	mvns	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4013      	ands	r3, r2
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e021      	b.n	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	0c1b      	lsrs	r3, r3, #16
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10c      	bne.n	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	43da      	mvns	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4013      	ands	r3, r2
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	e00b      	b.n	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	43da      	mvns	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4013      	ands	r3, r2
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	bf14      	ite	ne
 8003592:	2301      	movne	r3, #1
 8003594:	2300      	moveq	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	f47f af6d 	bne.w	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b4:	e034      	b.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f886 	bl	80036c8 <I2C_IsAcknowledgeFailed>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e034      	b.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d028      	beq.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7fe fe49 	bl	8002264 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11d      	bne.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ee:	2b80      	cmp	r3, #128	@ 0x80
 80035f0:	d016      	beq.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362a:	2b80      	cmp	r3, #128	@ 0x80
 800362c:	d1c3      	bne.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003644:	e034      	b.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f83e 	bl	80036c8 <I2C_IsAcknowledgeFailed>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e034      	b.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d028      	beq.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365e:	f7fe fe01 	bl	8002264 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	d302      	bcc.n	8003674 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d11d      	bne.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b04      	cmp	r3, #4
 8003680:	d016      	beq.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	f043 0220 	orr.w	r2, r3, #32
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e007      	b.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d1c3      	bne.n	8003646 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036de:	d11b      	bne.n	8003718 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	f043 0204 	orr.w	r2, r3, #4
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e272      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8087 	beq.w	8003852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003744:	4b92      	ldr	r3, [pc, #584]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b04      	cmp	r3, #4
 800374e:	d00c      	beq.n	800376a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003750:	4b8f      	ldr	r3, [pc, #572]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b08      	cmp	r3, #8
 800375a:	d112      	bne.n	8003782 <HAL_RCC_OscConfig+0x5e>
 800375c:	4b8c      	ldr	r3, [pc, #560]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003768:	d10b      	bne.n	8003782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376a:	4b89      	ldr	r3, [pc, #548]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d06c      	beq.n	8003850 <HAL_RCC_OscConfig+0x12c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d168      	bne.n	8003850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e24c      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x76>
 800378c:	4b80      	ldr	r3, [pc, #512]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a7f      	ldr	r2, [pc, #508]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	e02e      	b.n	80037f8 <HAL_RCC_OscConfig+0xd4>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x98>
 80037a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a7a      	ldr	r2, [pc, #488]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b78      	ldr	r3, [pc, #480]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a77      	ldr	r2, [pc, #476]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e01d      	b.n	80037f8 <HAL_RCC_OscConfig+0xd4>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0xbc>
 80037c6:	4b72      	ldr	r3, [pc, #456]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a71      	ldr	r2, [pc, #452]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0xd4>
 80037e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b68      	ldr	r3, [pc, #416]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a67      	ldr	r2, [pc, #412]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fe fd30 	bl	8002264 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7fe fd2c 	bl	8002264 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	@ 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e200      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b5d      	ldr	r3, [pc, #372]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0xe4>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fe fd1c 	bl	8002264 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7fe fd18 	bl	8002264 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	@ 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e1ec      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	4b53      	ldr	r3, [pc, #332]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x10c>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d063      	beq.n	8003926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800385e:	4b4c      	ldr	r3, [pc, #304]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800386a:	4b49      	ldr	r3, [pc, #292]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b08      	cmp	r3, #8
 8003874:	d11c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x18c>
 8003876:	4b46      	ldr	r3, [pc, #280]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d116      	bne.n	80038b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003882:	4b43      	ldr	r3, [pc, #268]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_RCC_OscConfig+0x176>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e1c0      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b3d      	ldr	r3, [pc, #244]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4939      	ldr	r1, [pc, #228]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	e03a      	b.n	8003926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b8:	4b36      	ldr	r3, [pc, #216]	@ (8003994 <HAL_RCC_OscConfig+0x270>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038be:	f7fe fcd1 	bl	8002264 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c6:	f7fe fccd 	bl	8002264 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e1a1      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4927      	ldr	r1, [pc, #156]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	600b      	str	r3, [r1, #0]
 80038f8:	e015      	b.n	8003926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fa:	4b26      	ldr	r3, [pc, #152]	@ (8003994 <HAL_RCC_OscConfig+0x270>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fe fcb0 	bl	8002264 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003908:	f7fe fcac 	bl	8002264 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e180      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391a:	4b1d      	ldr	r3, [pc, #116]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d03a      	beq.n	80039a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d019      	beq.n	800396e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393a:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <HAL_RCC_OscConfig+0x274>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003940:	f7fe fc90 	bl	8002264 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003948:	f7fe fc8c 	bl	8002264 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e160      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395a:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <HAL_RCC_OscConfig+0x26c>)
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003966:	2001      	movs	r0, #1
 8003968:	f000 face 	bl	8003f08 <RCC_Delay>
 800396c:	e01c      	b.n	80039a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396e:	4b0a      	ldr	r3, [pc, #40]	@ (8003998 <HAL_RCC_OscConfig+0x274>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003974:	f7fe fc76 	bl	8002264 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800397a:	e00f      	b.n	800399c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397c:	f7fe fc72 	bl	8002264 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d908      	bls.n	800399c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e146      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	42420000 	.word	0x42420000
 8003998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399c:	4b92      	ldr	r3, [pc, #584]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e9      	bne.n	800397c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80a6 	beq.w	8003b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ba:	4b8b      	ldr	r3, [pc, #556]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c6:	4b88      	ldr	r3, [pc, #544]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	4a87      	ldr	r2, [pc, #540]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d0:	61d3      	str	r3, [r2, #28]
 80039d2:	4b85      	ldr	r3, [pc, #532]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	4b82      	ldr	r3, [pc, #520]	@ (8003bec <HAL_RCC_OscConfig+0x4c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d118      	bne.n	8003a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ee:	4b7f      	ldr	r3, [pc, #508]	@ (8003bec <HAL_RCC_OscConfig+0x4c8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a7e      	ldr	r2, [pc, #504]	@ (8003bec <HAL_RCC_OscConfig+0x4c8>)
 80039f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fa:	f7fe fc33 	bl	8002264 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a02:	f7fe fc2f 	bl	8002264 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b64      	cmp	r3, #100	@ 0x64
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e103      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	4b75      	ldr	r3, [pc, #468]	@ (8003bec <HAL_RCC_OscConfig+0x4c8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x312>
 8003a28:	4b6f      	ldr	r3, [pc, #444]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6213      	str	r3, [r2, #32]
 8003a34:	e02d      	b.n	8003a92 <HAL_RCC_OscConfig+0x36e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x334>
 8003a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	4a69      	ldr	r2, [pc, #420]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6213      	str	r3, [r2, #32]
 8003a4a:	4b67      	ldr	r3, [pc, #412]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4a66      	ldr	r2, [pc, #408]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	6213      	str	r3, [r2, #32]
 8003a56:	e01c      	b.n	8003a92 <HAL_RCC_OscConfig+0x36e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d10c      	bne.n	8003a7a <HAL_RCC_OscConfig+0x356>
 8003a60:	4b61      	ldr	r3, [pc, #388]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4a60      	ldr	r2, [pc, #384]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	f043 0304 	orr.w	r3, r3, #4
 8003a6a:	6213      	str	r3, [r2, #32]
 8003a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4a5d      	ldr	r2, [pc, #372]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6213      	str	r3, [r2, #32]
 8003a78:	e00b      	b.n	8003a92 <HAL_RCC_OscConfig+0x36e>
 8003a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	4a5a      	ldr	r2, [pc, #360]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	6213      	str	r3, [r2, #32]
 8003a86:	4b58      	ldr	r3, [pc, #352]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4a57      	ldr	r2, [pc, #348]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	f023 0304 	bic.w	r3, r3, #4
 8003a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d015      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe fbe3 	bl	8002264 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fe fbdf 	bl	8002264 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e0b1      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ee      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x37e>
 8003ac4:	e014      	b.n	8003af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7fe fbcd 	bl	8002264 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fe fbc9 	bl	8002264 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e09b      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae4:	4b40      	ldr	r3, [pc, #256]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ee      	bne.n	8003ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d105      	bne.n	8003b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af6:	4b3c      	ldr	r3, [pc, #240]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	4a3b      	ldr	r2, [pc, #236]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8087 	beq.w	8003c1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b0c:	4b36      	ldr	r3, [pc, #216]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d061      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d146      	bne.n	8003bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b20:	4b33      	ldr	r3, [pc, #204]	@ (8003bf0 <HAL_RCC_OscConfig+0x4cc>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fe fb9d 	bl	8002264 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2e:	f7fe fb99 	bl	8002264 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e06d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b40:	4b29      	ldr	r3, [pc, #164]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b54:	d108      	bne.n	8003b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b56:	4b24      	ldr	r3, [pc, #144]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	4921      	ldr	r1, [pc, #132]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b68:	4b1f      	ldr	r3, [pc, #124]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a19      	ldr	r1, [r3, #32]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	491b      	ldr	r1, [pc, #108]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b80:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf0 <HAL_RCC_OscConfig+0x4cc>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b86:	f7fe fb6d 	bl	8002264 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7fe fb69 	bl	8002264 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e03d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ba0:	4b11      	ldr	r3, [pc, #68]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x46a>
 8003bac:	e035      	b.n	8003c1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bae:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <HAL_RCC_OscConfig+0x4cc>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fb56 	bl	8002264 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fe fb52 	bl	8002264 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e026      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bce:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x498>
 8003bda:	e01e      	b.n	8003c1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e019      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000

08003c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0d0      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d910      	bls.n	8003c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b67      	ldr	r3, [pc, #412]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 0207 	bic.w	r2, r3, #7
 8003c52:	4965      	ldr	r1, [pc, #404]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b63      	ldr	r3, [pc, #396]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0b8      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d020      	beq.n	8003cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c84:	4b59      	ldr	r3, [pc, #356]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4a58      	ldr	r2, [pc, #352]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c9c:	4b53      	ldr	r3, [pc, #332]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4a52      	ldr	r2, [pc, #328]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca8:	4b50      	ldr	r3, [pc, #320]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	494d      	ldr	r1, [pc, #308]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d040      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	4b47      	ldr	r3, [pc, #284]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d115      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07f      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce6:	4b41      	ldr	r3, [pc, #260]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e073      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e06b      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d06:	4b39      	ldr	r3, [pc, #228]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4936      	ldr	r1, [pc, #216]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d18:	f7fe faa4 	bl	8002264 <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d20:	f7fe faa0 	bl	8002264 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e053      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	4b2d      	ldr	r3, [pc, #180]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 020c 	and.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d1eb      	bne.n	8003d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d48:	4b27      	ldr	r3, [pc, #156]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d210      	bcs.n	8003d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b24      	ldr	r3, [pc, #144]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 0207 	bic.w	r2, r3, #7
 8003d5e:	4922      	ldr	r1, [pc, #136]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	4b20      	ldr	r3, [pc, #128]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e032      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d84:	4b19      	ldr	r3, [pc, #100]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4916      	ldr	r1, [pc, #88]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003da2:	4b12      	ldr	r3, [pc, #72]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	490e      	ldr	r1, [pc, #56]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003db6:	f000 f821 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	490a      	ldr	r1, [pc, #40]	@ (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc8:	5ccb      	ldrb	r3, [r1, r3]
 8003dca:	fa22 f303 	lsr.w	r3, r2, r3
 8003dce:	4a09      	ldr	r2, [pc, #36]	@ (8003df4 <HAL_RCC_ClockConfig+0x1cc>)
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dd2:	4b09      	ldr	r3, [pc, #36]	@ (8003df8 <HAL_RCC_ClockConfig+0x1d0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe fa02 	bl	80021e0 <HAL_InitTick>

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40022000 	.word	0x40022000
 8003dec:	40021000 	.word	0x40021000
 8003df0:	0800b3d8 	.word	0x0800b3d8
 8003df4:	20000000 	.word	0x20000000
 8003df8:	20000004 	.word	0x20000004

08003dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e16:	4b1e      	ldr	r3, [pc, #120]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d002      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x30>
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0x36>
 8003e2a:	e027      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e2c:	4b19      	ldr	r3, [pc, #100]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e2e:	613b      	str	r3, [r7, #16]
      break;
 8003e30:	e027      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	0c9b      	lsrs	r3, r3, #18
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	4a17      	ldr	r2, [pc, #92]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e3c:	5cd3      	ldrb	r3, [r2, r3]
 8003e3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d010      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e4a:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	0c5b      	lsrs	r3, r3, #17
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	4a11      	ldr	r2, [pc, #68]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e56:	5cd3      	ldrb	r3, [r2, r3]
 8003e58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e5e:	fb03 f202 	mul.w	r2, r3, r2
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	e004      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	613b      	str	r3, [r7, #16]
      break;
 8003e7a:	e002      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e7e:	613b      	str	r3, [r7, #16]
      break;
 8003e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e82:	693b      	ldr	r3, [r7, #16]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	007a1200 	.word	0x007a1200
 8003e98:	0800b3f0 	.word	0x0800b3f0
 8003e9c:	0800b400 	.word	0x0800b400
 8003ea0:	003d0900 	.word	0x003d0900

08003ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea8:	4b02      	ldr	r3, [pc, #8]	@ (8003eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	20000000 	.word	0x20000000

08003eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ebc:	f7ff fff2 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4903      	ldr	r1, [pc, #12]	@ (8003edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	0800b3e8 	.word	0x0800b3e8

08003ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ee4:	f7ff ffde 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	0adb      	lsrs	r3, r3, #11
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	4903      	ldr	r1, [pc, #12]	@ (8003f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef6:	5ccb      	ldrb	r3, [r1, r3]
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000
 8003f04:	0800b3e8 	.word	0x0800b3e8

08003f08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f10:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <RCC_Delay+0x34>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0a      	ldr	r2, [pc, #40]	@ (8003f40 <RCC_Delay+0x38>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	0a5b      	lsrs	r3, r3, #9
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f24:	bf00      	nop
  }
  while (Delay --);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1e5a      	subs	r2, r3, #1
 8003f2a:	60fa      	str	r2, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f9      	bne.n	8003f24 <RCC_Delay+0x1c>
}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	20000000 	.word	0x20000000
 8003f40:	10624dd3 	.word	0x10624dd3

08003f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d07d      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f60:	2300      	movs	r3, #0
 8003f62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f64:	4b4f      	ldr	r3, [pc, #316]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10d      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f70:	4b4c      	ldr	r3, [pc, #304]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	4a4b      	ldr	r2, [pc, #300]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f7a:	61d3      	str	r3, [r2, #28]
 8003f7c:	4b49      	ldr	r3, [pc, #292]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8c:	4b46      	ldr	r3, [pc, #280]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d118      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f98:	4b43      	ldr	r3, [pc, #268]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a42      	ldr	r2, [pc, #264]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa4:	f7fe f95e 	bl	8002264 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003faa:	e008      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fac:	f7fe f95a 	bl	8002264 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	@ 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e06d      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbe:	4b3a      	ldr	r3, [pc, #232]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fca:	4b36      	ldr	r3, [pc, #216]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d02e      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d027      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ffe:	4a29      	ldr	r2, [pc, #164]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d014      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400e:	f7fe f929 	bl	8002264 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004014:	e00a      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004016:	f7fe f925 	bl	8002264 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e036      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402c:	4b1d      	ldr	r3, [pc, #116]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ee      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004038:	4b1a      	ldr	r3, [pc, #104]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4917      	ldr	r1, [pc, #92]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004046:	4313      	orrs	r3, r2
 8004048:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d105      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004050:	4b14      	ldr	r3, [pc, #80]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	4a13      	ldr	r2, [pc, #76]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800405a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004068:	4b0e      	ldr	r3, [pc, #56]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	490b      	ldr	r1, [pc, #44]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	4313      	orrs	r3, r2
 8004078:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004086:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	4904      	ldr	r1, [pc, #16]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40007000 	.word	0x40007000
 80040ac:	42420440 	.word	0x42420440

080040b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e076      	b.n	80041b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d108      	bne.n	80040dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040d2:	d009      	beq.n	80040e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	61da      	str	r2, [r3, #28]
 80040da:	e005      	b.n	80040e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fd fe56 	bl	8001db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800411e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416c:	ea42 0103 	orr.w	r1, r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	0c1a      	lsrs	r2, r3, #16
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f002 0204 	and.w	r2, r2, #4
 800418e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	69da      	ldr	r2, [r3, #28]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800419e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_SPI_Transmit+0x22>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e12d      	b.n	8004436 <HAL_SPI_Transmit+0x27e>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041e2:	f7fe f83f 	bl	8002264 <HAL_GetTick>
 80041e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041e8:	88fb      	ldrh	r3, [r7, #6]
 80041ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d002      	beq.n	80041fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
 80041fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041fc:	e116      	b.n	800442c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_SPI_Transmit+0x52>
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800420e:	e10d      	b.n	800442c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2203      	movs	r2, #3
 8004214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	88fa      	ldrh	r2, [r7, #6]
 800422e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004256:	d10f      	bne.n	8004278 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004266:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004276:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004282:	2b40      	cmp	r3, #64	@ 0x40
 8004284:	d007      	beq.n	8004296 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004294:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800429e:	d14f      	bne.n	8004340 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_SPI_Transmit+0xf6>
 80042a8:	8afb      	ldrh	r3, [r7, #22]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d142      	bne.n	8004334 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b2:	881a      	ldrh	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	1c9a      	adds	r2, r3, #2
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042d2:	e02f      	b.n	8004334 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d112      	bne.n	8004308 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e6:	881a      	ldrh	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f2:	1c9a      	adds	r2, r3, #2
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004306:	e015      	b.n	8004334 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004308:	f7fd ffac 	bl	8002264 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d803      	bhi.n	8004320 <HAL_SPI_Transmit+0x168>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d102      	bne.n	8004326 <HAL_SPI_Transmit+0x16e>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004332:	e07b      	b.n	800442c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ca      	bne.n	80042d4 <HAL_SPI_Transmit+0x11c>
 800433e:	e050      	b.n	80043e2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_SPI_Transmit+0x196>
 8004348:	8afb      	ldrh	r3, [r7, #22]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d144      	bne.n	80043d8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	7812      	ldrb	r2, [r2, #0]
 800435a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004374:	e030      	b.n	80043d8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b02      	cmp	r3, #2
 8004382:	d113      	bne.n	80043ac <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	7812      	ldrb	r2, [r2, #0]
 8004390:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80043aa:	e015      	b.n	80043d8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ac:	f7fd ff5a 	bl	8002264 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d803      	bhi.n	80043c4 <HAL_SPI_Transmit+0x20c>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d102      	bne.n	80043ca <HAL_SPI_Transmit+0x212>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80043d6:	e029      	b.n	800442c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1c9      	bne.n	8004376 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	6839      	ldr	r1, [r7, #0]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fbcc 	bl	8004b84 <SPI_EndRxTxTransaction>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e003      	b.n	800442c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004434:	7ffb      	ldrb	r3, [r7, #31]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b088      	sub	sp, #32
 8004442:	af02      	add	r7, sp, #8
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	d002      	beq.n	8004464 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800445e:	2302      	movs	r3, #2
 8004460:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004462:	e0fb      	b.n	800465c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800446c:	d112      	bne.n	8004494 <HAL_SPI_Receive+0x56>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10e      	bne.n	8004494 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2204      	movs	r2, #4
 800447a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	4613      	mov	r3, r2
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f8ef 	bl	800466e <HAL_SPI_TransmitReceive>
 8004490:	4603      	mov	r3, r0
 8004492:	e0e8      	b.n	8004666 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_SPI_Receive+0x64>
 800449e:	2302      	movs	r3, #2
 80044a0:	e0e1      	b.n	8004666 <HAL_SPI_Receive+0x228>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044aa:	f7fd fedb 	bl	8002264 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_SPI_Receive+0x7e>
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044c0:	e0cc      	b.n	800465c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2204      	movs	r2, #4
 80044c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	88fa      	ldrh	r2, [r7, #6]
 80044da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004508:	d10f      	bne.n	800452a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004518:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004528:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004534:	2b40      	cmp	r3, #64	@ 0x40
 8004536:	d007      	beq.n	8004548 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004546:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d16a      	bne.n	8004626 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004550:	e032      	b.n	80045b8 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d115      	bne.n	800458c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f103 020c 	add.w	r2, r3, #12
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	7812      	ldrb	r2, [r2, #0]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800458a:	e015      	b.n	80045b8 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800458c:	f7fd fe6a 	bl	8002264 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d803      	bhi.n	80045a4 <HAL_SPI_Receive+0x166>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a2:	d102      	bne.n	80045aa <HAL_SPI_Receive+0x16c>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80045b6:	e051      	b.n	800465c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1c7      	bne.n	8004552 <HAL_SPI_Receive+0x114>
 80045c2:	e035      	b.n	8004630 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d113      	bne.n	80045fa <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045dc:	b292      	uxth	r2, r2
 80045de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e4:	1c9a      	adds	r2, r3, #2
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045f8:	e015      	b.n	8004626 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045fa:	f7fd fe33 	bl	8002264 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d803      	bhi.n	8004612 <HAL_SPI_Receive+0x1d4>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d102      	bne.n	8004618 <HAL_SPI_Receive+0x1da>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d106      	bne.n	8004626 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004624:	e01a      	b.n	800465c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1c9      	bne.n	80045c4 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	6839      	ldr	r1, [r7, #0]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 fa53 	bl	8004ae0 <SPI_EndRxTransaction>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	75fb      	strb	r3, [r7, #23]
 8004652:	e003      	b.n	800465c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004664:	7dfb      	ldrb	r3, [r7, #23]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b08c      	sub	sp, #48	@ 0x30
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800467c:	2301      	movs	r3, #1
 800467e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_SPI_TransmitReceive+0x26>
 8004690:	2302      	movs	r3, #2
 8004692:	e198      	b.n	80049c6 <HAL_SPI_TransmitReceive+0x358>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800469c:	f7fd fde2 	bl	8002264 <HAL_GetTick>
 80046a0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046b2:	887b      	ldrh	r3, [r7, #2]
 80046b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d00f      	beq.n	80046de <HAL_SPI_TransmitReceive+0x70>
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046c4:	d107      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d103      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x68>
 80046ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d003      	beq.n	80046de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
 80046d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80046dc:	e16d      	b.n	80049ba <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_SPI_TransmitReceive+0x82>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_TransmitReceive+0x82>
 80046ea:	887b      	ldrh	r3, [r7, #2]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80046f6:	e160      	b.n	80049ba <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b04      	cmp	r3, #4
 8004702:	d003      	beq.n	800470c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2205      	movs	r2, #5
 8004708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	887a      	ldrh	r2, [r7, #2]
 800471c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	887a      	ldrh	r2, [r7, #2]
 8004722:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	887a      	ldrh	r2, [r7, #2]
 800472e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474c:	2b40      	cmp	r3, #64	@ 0x40
 800474e:	d007      	beq.n	8004760 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800475e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004768:	d17c      	bne.n	8004864 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_SPI_TransmitReceive+0x10a>
 8004772:	8b7b      	ldrh	r3, [r7, #26]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d16a      	bne.n	800484e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004788:	1c9a      	adds	r2, r3, #2
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800479c:	e057      	b.n	800484e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d11b      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x176>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d016      	beq.n	80047e4 <HAL_SPI_TransmitReceive+0x176>
 80047b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d113      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	881a      	ldrh	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047cc:	1c9a      	adds	r2, r3, #2
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d119      	bne.n	8004826 <HAL_SPI_TransmitReceive+0x1b8>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d014      	beq.n	8004826 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	b292      	uxth	r2, r2
 8004808:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480e:	1c9a      	adds	r2, r3, #2
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004822:	2301      	movs	r3, #1
 8004824:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004826:	f7fd fd1d 	bl	8002264 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004832:	429a      	cmp	r2, r3
 8004834:	d80b      	bhi.n	800484e <HAL_SPI_TransmitReceive+0x1e0>
 8004836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d007      	beq.n	800484e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800484c:	e0b5      	b.n	80049ba <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1a2      	bne.n	800479e <HAL_SPI_TransmitReceive+0x130>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d19d      	bne.n	800479e <HAL_SPI_TransmitReceive+0x130>
 8004862:	e080      	b.n	8004966 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_SPI_TransmitReceive+0x204>
 800486c:	8b7b      	ldrh	r3, [r7, #26]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d16f      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	7812      	ldrb	r2, [r2, #0]
 800487e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004898:	e05b      	b.n	8004952 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d11c      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x274>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d017      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x274>
 80048b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d114      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	330c      	adds	r3, #12
 80048c2:	7812      	ldrb	r2, [r2, #0]
 80048c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d119      	bne.n	8004924 <HAL_SPI_TransmitReceive+0x2b6>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d014      	beq.n	8004924 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004920:	2301      	movs	r3, #1
 8004922:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004924:	f7fd fc9e 	bl	8002264 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004930:	429a      	cmp	r2, r3
 8004932:	d803      	bhi.n	800493c <HAL_SPI_TransmitReceive+0x2ce>
 8004934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d102      	bne.n	8004942 <HAL_SPI_TransmitReceive+0x2d4>
 800493c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493e:	2b00      	cmp	r3, #0
 8004940:	d107      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004950:	e033      	b.n	80049ba <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d19e      	bne.n	800489a <HAL_SPI_TransmitReceive+0x22c>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d199      	bne.n	800489a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004968:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f90a 	bl	8004b84 <SPI_EndRxTxTransaction>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d006      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004982:	e01a      	b.n	80049ba <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049b0:	e003      	b.n	80049ba <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80049c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3730      	adds	r7, #48	@ 0x30
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	4613      	mov	r3, r2
 80049de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049e0:	f7fd fc40 	bl	8002264 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	4413      	add	r3, r2
 80049ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049f0:	f7fd fc38 	bl	8002264 <HAL_GetTick>
 80049f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049f6:	4b39      	ldr	r3, [pc, #228]	@ (8004adc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	015b      	lsls	r3, r3, #5
 80049fc:	0d1b      	lsrs	r3, r3, #20
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	fb02 f303 	mul.w	r3, r2, r3
 8004a04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a06:	e054      	b.n	8004ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d050      	beq.n	8004ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a10:	f7fd fc28 	bl	8002264 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d902      	bls.n	8004a26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d13d      	bne.n	8004aa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a3e:	d111      	bne.n	8004a64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a48:	d004      	beq.n	8004a54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a52:	d107      	bne.n	8004a64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a6c:	d10f      	bne.n	8004a8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e017      	b.n	8004ad2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4013      	ands	r3, r2
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2301      	moveq	r3, #1
 8004ac4:	2300      	movne	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d19b      	bne.n	8004a08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3720      	adds	r7, #32
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000000 	.word	0x20000000

08004ae0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004af4:	d111      	bne.n	8004b1a <SPI_EndRxTransaction+0x3a>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004afe:	d004      	beq.n	8004b0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b08:	d107      	bne.n	8004b1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b18:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b22:	d117      	bne.n	8004b54 <SPI_EndRxTransaction+0x74>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b2c:	d112      	bne.n	8004b54 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2101      	movs	r1, #1
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7ff ff49 	bl	80049d0 <SPI_WaitFlagStateUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01a      	beq.n	8004b7a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e013      	b.n	8004b7c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2180      	movs	r1, #128	@ 0x80
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff ff36 	bl	80049d0 <SPI_WaitFlagStateUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6e:	f043 0220 	orr.w	r2, r3, #32
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e000      	b.n	8004b7c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2200      	movs	r2, #0
 8004b98:	2180      	movs	r1, #128	@ 0x80
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7ff ff18 	bl	80049d0 <SPI_WaitFlagStateUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d007      	beq.n	8004bb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004baa:	f043 0220 	orr.w	r2, r3, #32
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e000      	b.n	8004bb8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e041      	b.n	8004c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fd f92e 	bl	8001e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f000 fa20 	bl	8005044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d122      	bne.n	8004cba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d11b      	bne.n	8004cba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f06f 0202 	mvn.w	r2, #2
 8004c8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f9b4 	bl	800500e <HAL_TIM_IC_CaptureCallback>
 8004ca6:	e005      	b.n	8004cb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f9a7 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f9b6 	bl	8005020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d122      	bne.n	8004d0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d11b      	bne.n	8004d0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f06f 0204 	mvn.w	r2, #4
 8004cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f98a 	bl	800500e <HAL_TIM_IC_CaptureCallback>
 8004cfa:	e005      	b.n	8004d08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f97d 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f98c 	bl	8005020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d122      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d11b      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0208 	mvn.w	r2, #8
 8004d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2204      	movs	r2, #4
 8004d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f960 	bl	800500e <HAL_TIM_IC_CaptureCallback>
 8004d4e:	e005      	b.n	8004d5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f953 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f962 	bl	8005020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d122      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b10      	cmp	r3, #16
 8004d7c:	d11b      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f06f 0210 	mvn.w	r2, #16
 8004d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f936 	bl	800500e <HAL_TIM_IC_CaptureCallback>
 8004da2:	e005      	b.n	8004db0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f929 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f938 	bl	8005020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d10e      	bne.n	8004de2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d107      	bne.n	8004de2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f06f 0201 	mvn.w	r2, #1
 8004dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7fc ff1b 	bl	8001c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dec:	2b80      	cmp	r3, #128	@ 0x80
 8004dee:	d10e      	bne.n	8004e0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfa:	2b80      	cmp	r3, #128	@ 0x80
 8004dfc:	d107      	bne.n	8004e0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fa7a 	bl	8005302 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e18:	2b40      	cmp	r3, #64	@ 0x40
 8004e1a:	d10e      	bne.n	8004e3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e26:	2b40      	cmp	r3, #64	@ 0x40
 8004e28:	d107      	bne.n	8004e3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f8fc 	bl	8005032 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d10e      	bne.n	8004e66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d107      	bne.n	8004e66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f06f 0220 	mvn.w	r2, #32
 8004e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fa45 	bl	80052f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_ConfigClockSource+0x1c>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e0b4      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x186>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ea8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eb0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec2:	d03e      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0xd4>
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec8:	f200 8087 	bhi.w	8004fda <HAL_TIM_ConfigClockSource+0x16c>
 8004ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed0:	f000 8086 	beq.w	8004fe0 <HAL_TIM_ConfigClockSource+0x172>
 8004ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed8:	d87f      	bhi.n	8004fda <HAL_TIM_ConfigClockSource+0x16c>
 8004eda:	2b70      	cmp	r3, #112	@ 0x70
 8004edc:	d01a      	beq.n	8004f14 <HAL_TIM_ConfigClockSource+0xa6>
 8004ede:	2b70      	cmp	r3, #112	@ 0x70
 8004ee0:	d87b      	bhi.n	8004fda <HAL_TIM_ConfigClockSource+0x16c>
 8004ee2:	2b60      	cmp	r3, #96	@ 0x60
 8004ee4:	d050      	beq.n	8004f88 <HAL_TIM_ConfigClockSource+0x11a>
 8004ee6:	2b60      	cmp	r3, #96	@ 0x60
 8004ee8:	d877      	bhi.n	8004fda <HAL_TIM_ConfigClockSource+0x16c>
 8004eea:	2b50      	cmp	r3, #80	@ 0x50
 8004eec:	d03c      	beq.n	8004f68 <HAL_TIM_ConfigClockSource+0xfa>
 8004eee:	2b50      	cmp	r3, #80	@ 0x50
 8004ef0:	d873      	bhi.n	8004fda <HAL_TIM_ConfigClockSource+0x16c>
 8004ef2:	2b40      	cmp	r3, #64	@ 0x40
 8004ef4:	d058      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0x13a>
 8004ef6:	2b40      	cmp	r3, #64	@ 0x40
 8004ef8:	d86f      	bhi.n	8004fda <HAL_TIM_ConfigClockSource+0x16c>
 8004efa:	2b30      	cmp	r3, #48	@ 0x30
 8004efc:	d064      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0x15a>
 8004efe:	2b30      	cmp	r3, #48	@ 0x30
 8004f00:	d86b      	bhi.n	8004fda <HAL_TIM_ConfigClockSource+0x16c>
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d060      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0x15a>
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d867      	bhi.n	8004fda <HAL_TIM_ConfigClockSource+0x16c>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d05c      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0x15a>
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d05a      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0x15a>
 8004f12:	e062      	b.n	8004fda <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f24:	f000 f967 	bl	80051f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	609a      	str	r2, [r3, #8]
      break;
 8004f40:	e04f      	b.n	8004fe2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f52:	f000 f950 	bl	80051f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f64:	609a      	str	r2, [r3, #8]
      break;
 8004f66:	e03c      	b.n	8004fe2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f74:	461a      	mov	r2, r3
 8004f76:	f000 f8c7 	bl	8005108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2150      	movs	r1, #80	@ 0x50
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 f91e 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004f86:	e02c      	b.n	8004fe2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f94:	461a      	mov	r2, r3
 8004f96:	f000 f8e5 	bl	8005164 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2160      	movs	r1, #96	@ 0x60
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 f90e 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004fa6:	e01c      	b.n	8004fe2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f000 f8a7 	bl	8005108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2140      	movs	r1, #64	@ 0x40
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f8fe 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004fc6:	e00c      	b.n	8004fe2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	f000 f8f5 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004fd8:	e003      	b.n	8004fe2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8004fde:	e000      	b.n	8004fe2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fe0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr

0800500e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a29      	ldr	r2, [pc, #164]	@ (80050fc <TIM_Base_SetConfig+0xb8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00b      	beq.n	8005074 <TIM_Base_SetConfig+0x30>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005062:	d007      	beq.n	8005074 <TIM_Base_SetConfig+0x30>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a26      	ldr	r2, [pc, #152]	@ (8005100 <TIM_Base_SetConfig+0xbc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_Base_SetConfig+0x30>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a25      	ldr	r2, [pc, #148]	@ (8005104 <TIM_Base_SetConfig+0xc0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d108      	bne.n	8005086 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a1c      	ldr	r2, [pc, #112]	@ (80050fc <TIM_Base_SetConfig+0xb8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00b      	beq.n	80050a6 <TIM_Base_SetConfig+0x62>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005094:	d007      	beq.n	80050a6 <TIM_Base_SetConfig+0x62>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a19      	ldr	r2, [pc, #100]	@ (8005100 <TIM_Base_SetConfig+0xbc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d003      	beq.n	80050a6 <TIM_Base_SetConfig+0x62>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a18      	ldr	r2, [pc, #96]	@ (8005104 <TIM_Base_SetConfig+0xc0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d108      	bne.n	80050b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a07      	ldr	r2, [pc, #28]	@ (80050fc <TIM_Base_SetConfig+0xb8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d103      	bne.n	80050ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	615a      	str	r2, [r3, #20]
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40000400 	.word	0x40000400
 8005104:	40000800 	.word	0x40000800

08005108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 0201 	bic.w	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 030a 	bic.w	r3, r3, #10
 8005144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0210 	bic.w	r2, r3, #16
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800518e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	031b      	lsls	r3, r3, #12
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr

080051c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	f043 0307 	orr.w	r3, r3, #7
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	609a      	str	r2, [r3, #8]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b087      	sub	sp, #28
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005210:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	021a      	lsls	r2, r3, #8
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	431a      	orrs	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4313      	orrs	r3, r2
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	609a      	str	r2, [r3, #8]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005248:	2302      	movs	r3, #2
 800524a:	e046      	b.n	80052da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a16      	ldr	r2, [pc, #88]	@ (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00e      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005298:	d009      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a12      	ldr	r2, [pc, #72]	@ (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a10      	ldr	r2, [pc, #64]	@ (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d10c      	bne.n	80052c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800

080052f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr

08005302 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr

08005314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e042      	b.n	80053ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fc fdaa 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	@ 0x24
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fdfb 	bl	8005f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800536c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800537c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800538c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	@ 0x28
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4613      	mov	r3, r2
 80053c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d16d      	bne.n	80054b0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_UART_Transmit+0x2c>
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e066      	b.n	80054b2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2221      	movs	r2, #33	@ 0x21
 80053ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053f2:	f7fc ff37 	bl	8002264 <HAL_GetTick>
 80053f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800540c:	d108      	bne.n	8005420 <HAL_UART_Transmit+0x6c>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d104      	bne.n	8005420 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005416:	2300      	movs	r3, #0
 8005418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	e003      	b.n	8005428 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005424:	2300      	movs	r3, #0
 8005426:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005428:	e02a      	b.n	8005480 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2200      	movs	r2, #0
 8005432:	2180      	movs	r1, #128	@ 0x80
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fb4a 	bl	8005ace <UART_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e036      	b.n	80054b2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10b      	bne.n	8005462 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005458:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	3302      	adds	r3, #2
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	e007      	b.n	8005472 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	781a      	ldrb	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	3301      	adds	r3, #1
 8005470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1cf      	bne.n	800542a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2200      	movs	r2, #0
 8005492:	2140      	movs	r1, #64	@ 0x40
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 fb1a 	bl	8005ace <UART_WaitOnFlagUntilTimeout>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e006      	b.n	80054b2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	e000      	b.n	80054b2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80054b0:	2302      	movs	r3, #2
  }
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3720      	adds	r7, #32
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b08c      	sub	sp, #48	@ 0x30
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	4613      	mov	r3, r2
 80054c6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d14a      	bne.n	800556a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80054da:	88fb      	ldrh	r3, [r7, #6]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e043      	b.n	800556c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	461a      	mov	r2, r3
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fb57 	bl	8005baa <UART_Start_Receive_IT>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005502:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005506:	2b00      	cmp	r3, #0
 8005508:	d12c      	bne.n	8005564 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550e:	2b01      	cmp	r3, #1
 8005510:	d125      	bne.n	800555e <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005512:	2300      	movs	r3, #0
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	330c      	adds	r3, #12
 800552e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	617b      	str	r3, [r7, #20]
   return(result);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f043 0310 	orr.w	r3, r3, #16
 800553e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005548:	627a      	str	r2, [r7, #36]	@ 0x24
 800554a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6a39      	ldr	r1, [r7, #32]
 800554e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	61fb      	str	r3, [r7, #28]
   return(result);
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800555c:	e002      	b.n	8005564 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005564:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005568:	e000      	b.n	800556c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800556a:	2302      	movs	r3, #2
  }
}
 800556c:	4618      	mov	r0, r3
 800556e:	3730      	adds	r7, #48	@ 0x30
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b0ba      	sub	sp, #232	@ 0xe8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800559a:	2300      	movs	r3, #0
 800559c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80055b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <HAL_UART_IRQHandler+0x66>
 80055c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fbff 	bl	8005dd6 <UART_Receive_IT>
      return;
 80055d8:	e25b      	b.n	8005a92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 80de 	beq.w	80057a0 <HAL_UART_IRQHandler+0x22c>
 80055e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d106      	bne.n	80055fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 80d1 	beq.w	80057a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00b      	beq.n	8005622 <HAL_UART_IRQHandler+0xae>
 800560a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800560e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <HAL_UART_IRQHandler+0xd2>
 800562e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563e:	f043 0202 	orr.w	r2, r3, #2
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <HAL_UART_IRQHandler+0xf6>
 8005652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005662:	f043 0204 	orr.w	r2, r3, #4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800566a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d011      	beq.n	800569a <HAL_UART_IRQHandler+0x126>
 8005676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d105      	bne.n	800568e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005692:	f043 0208 	orr.w	r2, r3, #8
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 81f2 	beq.w	8005a88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_UART_IRQHandler+0x14e>
 80056b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fb8a 	bl	8005dd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	bf14      	ite	ne
 80056d0:	2301      	movne	r3, #1
 80056d2:	2300      	moveq	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <HAL_UART_IRQHandler+0x17a>
 80056e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d04f      	beq.n	800578e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fa94 	bl	8005c1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d041      	beq.n	8005786 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3314      	adds	r3, #20
 8005708:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005718:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800571c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3314      	adds	r3, #20
 800572a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800572e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005732:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800573a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005746:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1d9      	bne.n	8005702 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d013      	beq.n	800577e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575a:	4a7e      	ldr	r2, [pc, #504]	@ (8005954 <HAL_UART_IRQHandler+0x3e0>)
 800575c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005762:	4618      	mov	r0, r3
 8005764:	f7fd f906 	bl	8002974 <HAL_DMA_Abort_IT>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d016      	beq.n	800579c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005778:	4610      	mov	r0, r2
 800577a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577c:	e00e      	b.n	800579c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f99c 	bl	8005abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005784:	e00a      	b.n	800579c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f998 	bl	8005abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578c:	e006      	b.n	800579c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f994 	bl	8005abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800579a:	e175      	b.n	8005a88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579c:	bf00      	nop
    return;
 800579e:	e173      	b.n	8005a88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	f040 814f 	bne.w	8005a48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 8148 	beq.w	8005a48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8141 	beq.w	8005a48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057c6:	2300      	movs	r3, #0
 80057c8:	60bb      	str	r3, [r7, #8]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	60bb      	str	r3, [r7, #8]
 80057da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 80b6 	beq.w	8005958 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 8145 	beq.w	8005a8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005806:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800580a:	429a      	cmp	r2, r3
 800580c:	f080 813e 	bcs.w	8005a8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005816:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	2b20      	cmp	r3, #32
 8005820:	f000 8088 	beq.w	8005934 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800583a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800583e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005842:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	330c      	adds	r3, #12
 800584c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005850:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005854:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800585c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005868:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1d9      	bne.n	8005824 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3314      	adds	r3, #20
 8005876:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005880:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005882:	f023 0301 	bic.w	r3, r3, #1
 8005886:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005894:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005898:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800589c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e1      	bne.n	8005870 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3314      	adds	r3, #20
 80058b2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80058bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3314      	adds	r3, #20
 80058cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80058d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80058d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80058d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80058de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e3      	bne.n	80058ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	330c      	adds	r3, #12
 80058f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005904:	f023 0310 	bic.w	r3, r3, #16
 8005908:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005916:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005918:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800591c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e3      	bne.n	80058f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592e:	4618      	mov	r0, r3
 8005930:	f7fc ffe5 	bl	80028fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005942:	b29b      	uxth	r3, r3
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	b29b      	uxth	r3, r3
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fc f954 	bl	8001bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005950:	e09c      	b.n	8005a8c <HAL_UART_IRQHandler+0x518>
 8005952:	bf00      	nop
 8005954:	08005ce1 	.word	0x08005ce1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005960:	b29b      	uxth	r3, r3
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 808e 	beq.w	8005a90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8089 	beq.w	8005a90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800598e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005994:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	330c      	adds	r3, #12
 800599e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80059a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80059a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e3      	bne.n	800597e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3314      	adds	r3, #20
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	623b      	str	r3, [r7, #32]
   return(result);
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3314      	adds	r3, #20
 80059d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80059da:	633a      	str	r2, [r7, #48]	@ 0x30
 80059dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e3      	bne.n	80059b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0310 	bic.w	r3, r3, #16
 8005a12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a20:	61fa      	str	r2, [r7, #28]
 8005a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	69b9      	ldr	r1, [r7, #24]
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e3      	bne.n	80059fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fc f8d9 	bl	8001bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a46:	e023      	b.n	8005a90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <HAL_UART_IRQHandler+0x4f4>
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f951 	bl	8005d08 <UART_Transmit_IT>
    return;
 8005a66:	e014      	b.n	8005a92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00e      	beq.n	8005a92 <HAL_UART_IRQHandler+0x51e>
 8005a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f990 	bl	8005da6 <UART_EndTransmit_IT>
    return;
 8005a86:	e004      	b.n	8005a92 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a88:	bf00      	nop
 8005a8a:	e002      	b.n	8005a92 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a8c:	bf00      	nop
 8005a8e:	e000      	b.n	8005a92 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a90:	bf00      	nop
  }
}
 8005a92:	37e8      	adds	r7, #232	@ 0xe8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr

08005aaa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr

08005abc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr

08005ace <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b090      	sub	sp, #64	@ 0x40
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	4613      	mov	r3, r2
 8005adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ade:	e050      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d04c      	beq.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <UART_WaitOnFlagUntilTimeout+0x30>
 8005aee:	f7fc fbb9 	bl	8002264 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d241      	bcs.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b1e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005b20:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e5      	bne.n	8005afe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3314      	adds	r3, #20
 8005b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	613b      	str	r3, [r7, #16]
   return(result);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3314      	adds	r3, #20
 8005b50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b52:	623a      	str	r2, [r7, #32]
 8005b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	69f9      	ldr	r1, [r7, #28]
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e5      	bne.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e00f      	b.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	bf0c      	ite	eq
 8005b92:	2301      	moveq	r3, #1
 8005b94:	2300      	movne	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d09f      	beq.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3740      	adds	r7, #64	@ 0x40
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b085      	sub	sp, #20
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	88fa      	ldrh	r2, [r7, #6]
 8005bc2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	88fa      	ldrh	r2, [r7, #6]
 8005bc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2222      	movs	r2, #34	@ 0x22
 8005bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d007      	beq.n	8005bf0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0220 	orr.w	r2, r2, #32
 8005c0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b095      	sub	sp, #84	@ 0x54
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	330c      	adds	r3, #12
 8005c2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c44:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3314      	adds	r3, #20
 8005c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f023 0301 	bic.w	r3, r3, #1
 8005c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3314      	adds	r3, #20
 8005c76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e5      	bne.n	8005c58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d119      	bne.n	8005cc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f023 0310 	bic.w	r3, r3, #16
 8005caa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cb4:	61ba      	str	r2, [r7, #24]
 8005cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6979      	ldr	r1, [r7, #20]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e5      	bne.n	8005c94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005cd6:	bf00      	nop
 8005cd8:	3754      	adds	r7, #84	@ 0x54
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr

08005ce0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f7ff fede 	bl	8005abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d00:	bf00      	nop
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b21      	cmp	r3, #33	@ 0x21
 8005d1a:	d13e      	bne.n	8005d9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d24:	d114      	bne.n	8005d50 <UART_Transmit_IT+0x48>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d110      	bne.n	8005d50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	1c9a      	adds	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	621a      	str	r2, [r3, #32]
 8005d4e:	e008      	b.n	8005d62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	1c59      	adds	r1, r3, #1
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6211      	str	r1, [r2, #32]
 8005d5a:	781a      	ldrb	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10f      	bne.n	8005d96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	e000      	b.n	8005d9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d9a:	2302      	movs	r3, #2
  }
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fe66 	bl	8005a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b08c      	sub	sp, #48	@ 0x30
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b22      	cmp	r3, #34	@ 0x22
 8005de8:	f040 80ae 	bne.w	8005f48 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005df4:	d117      	bne.n	8005e26 <UART_Receive_IT+0x50>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d113      	bne.n	8005e26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e06:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1e:	1c9a      	adds	r2, r3, #2
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e24:	e026      	b.n	8005e74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e38:	d007      	beq.n	8005e4a <UART_Receive_IT+0x74>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <UART_Receive_IT+0x82>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	e008      	b.n	8005e6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	4619      	mov	r1, r3
 8005e82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d15d      	bne.n	8005f44 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0220 	bic.w	r2, r2, #32
 8005e96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ea6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695a      	ldr	r2, [r3, #20]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0201 	bic.w	r2, r2, #1
 8005eb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d135      	bne.n	8005f3a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f023 0310 	bic.w	r3, r3, #16
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef4:	623a      	str	r2, [r7, #32]
 8005ef6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	69f9      	ldr	r1, [r7, #28]
 8005efa:	6a3a      	ldr	r2, [r7, #32]
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e5      	bne.n	8005ed4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	2b10      	cmp	r3, #16
 8005f14:	d10a      	bne.n	8005f2c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f16:	2300      	movs	r3, #0
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fb fe60 	bl	8001bf8 <HAL_UARTEx_RxEventCallback>
 8005f38:	e002      	b.n	8005f40 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff fdb5 	bl	8005aaa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e002      	b.n	8005f4a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	e000      	b.n	8005f4a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f48:	2302      	movs	r3, #2
  }
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3730      	adds	r7, #48	@ 0x30
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005f8e:	f023 030c 	bic.w	r3, r3, #12
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6812      	ldr	r2, [r2, #0]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8006068 <UART_SetConfig+0x114>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d103      	bne.n	8005fc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005fbc:	f7fd ff90 	bl	8003ee0 <HAL_RCC_GetPCLK2Freq>
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	e002      	b.n	8005fca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fc4:	f7fd ff78 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 8005fc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009a      	lsls	r2, r3, #2
 8005fd4:	441a      	add	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	4a22      	ldr	r2, [pc, #136]	@ (800606c <UART_SetConfig+0x118>)
 8005fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	0119      	lsls	r1, r3, #4
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009a      	lsls	r2, r3, #2
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006000:	4b1a      	ldr	r3, [pc, #104]	@ (800606c <UART_SetConfig+0x118>)
 8006002:	fba3 0302 	umull	r0, r3, r3, r2
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	2064      	movs	r0, #100	@ 0x64
 800600a:	fb00 f303 	mul.w	r3, r0, r3
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	3332      	adds	r3, #50	@ 0x32
 8006014:	4a15      	ldr	r2, [pc, #84]	@ (800606c <UART_SetConfig+0x118>)
 8006016:	fba2 2303 	umull	r2, r3, r2, r3
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006020:	4419      	add	r1, r3
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009a      	lsls	r2, r3, #2
 800602c:	441a      	add	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	fbb2 f2f3 	udiv	r2, r2, r3
 8006038:	4b0c      	ldr	r3, [pc, #48]	@ (800606c <UART_SetConfig+0x118>)
 800603a:	fba3 0302 	umull	r0, r3, r3, r2
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	2064      	movs	r0, #100	@ 0x64
 8006042:	fb00 f303 	mul.w	r3, r0, r3
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	3332      	adds	r3, #50	@ 0x32
 800604c:	4a07      	ldr	r2, [pc, #28]	@ (800606c <UART_SetConfig+0x118>)
 800604e:	fba2 2303 	umull	r2, r3, r2, r3
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	f003 020f 	and.w	r2, r3, #15
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	440a      	add	r2, r1
 800605e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006060:	bf00      	nop
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40013800 	.word	0x40013800
 800606c:	51eb851f 	.word	0x51eb851f

08006070 <AWG_Load_Waveform>:
#include "math.h"

#define MaxDepth 2048 // max AWG samples

void AWG_Load_Waveform(AWG_setup_struct* AWG, HFDAC_struct* HFDAC)
{
 8006070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006074:	b088      	sub	sp, #32
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
	LOLA_enable_features(AWG_EN, 0); // disable AWG
 800607c:	2100      	movs	r1, #0
 800607e:	2002      	movs	r0, #2
 8006080:	f000 fc92 	bl	80069a8 <LOLA_enable_features>

	uint8_t byte[4];
	int16_t data;

	uint16_t depth = trimInt((int)round(DACmaxFreq/AWG->Freq), 1, (MaxDepth-1));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800608a:	a1ad      	add	r1, pc, #692	@ (adr r1, 8006340 <AWG_Load_Waveform+0x2d0>)
 800608c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006090:	f7fa fb4c 	bl	800072c <__aeabi_ddiv>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4610      	mov	r0, r2
 800609a:	4619      	mov	r1, r3
 800609c:	f004 fb62 	bl	800a764 <round>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4610      	mov	r0, r2
 80060a6:	4619      	mov	r1, r3
 80060a8:	f7fa fcc6 	bl	8000a38 <__aeabi_d2iz>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80060b2:	2101      	movs	r1, #1
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 fbc4 	bl	8007842 <trimInt>
 80060ba:	4603      	mov	r3, r0
 80060bc:	837b      	strh	r3, [r7, #26]


	uint16_t DepthPos = trimInt((int)round(depth*AWG->DutyCycle/100), 1, (MaxDepth-1));
 80060be:	8b7b      	ldrh	r3, [r7, #26]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fa fe0b 	bl	8000cdc <__aeabi_i2f>
 80060c6:	4602      	mov	r2, r0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f7fa fe58 	bl	8000d84 <__aeabi_fmul>
 80060d4:	4603      	mov	r3, r0
 80060d6:	499e      	ldr	r1, [pc, #632]	@ (8006350 <AWG_Load_Waveform+0x2e0>)
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fa ff07 	bl	8000eec <__aeabi_fdiv>
 80060de:	4603      	mov	r3, r0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fa f9a1 	bl	8000428 <__aeabi_f2d>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4610      	mov	r0, r2
 80060ec:	4619      	mov	r1, r3
 80060ee:	f004 fb39 	bl	800a764 <round>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4610      	mov	r0, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	f7fa fc9d 	bl	8000a38 <__aeabi_d2iz>
 80060fe:	4603      	mov	r3, r0
 8006100:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006104:	2101      	movs	r1, #1
 8006106:	4618      	mov	r0, r3
 8006108:	f001 fb9b 	bl	8007842 <trimInt>
 800610c:	4603      	mov	r3, r0
 800610e:	833b      	strh	r3, [r7, #24]
	uint16_t DepthNeg = trimInt((int)(depth-DepthPos), 1, (MaxDepth-1));
 8006110:	8b7a      	ldrh	r2, [r7, #26]
 8006112:	8b3b      	ldrh	r3, [r7, #24]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800611a:	2101      	movs	r1, #1
 800611c:	4618      	mov	r0, r3
 800611e:	f001 fb90 	bl	8007842 <trimInt>
 8006122:	4603      	mov	r3, r0
 8006124:	82fb      	strh	r3, [r7, #22]

	// setting sample count
	byte[0] = 0;
 8006126:	2300      	movs	r3, #0
 8006128:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((depth>>8)&0x00ff);
 800612a:	8b7b      	ldrh	r3, [r7, #26]
 800612c:	0a1b      	lsrs	r3, r3, #8
 800612e:	b29b      	uxth	r3, r3
 8006130:	b2db      	uxtb	r3, r3
 8006132:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(depth&0x00ff);
 8006134:	8b7b      	ldrh	r3, [r7, #26]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)AWG_MAXADRESS;
 800613a:	2306      	movs	r3, #6
 800613c:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 800613e:	f107 0108 	add.w	r1, r7, #8
 8006142:	2364      	movs	r3, #100	@ 0x64
 8006144:	2204      	movs	r2, #4
 8006146:	4883      	ldr	r0, [pc, #524]	@ (8006354 <AWG_Load_Waveform+0x2e4>)
 8006148:	f7fe f836 	bl	80041b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 800614c:	2200      	movs	r2, #0
 800614e:	2110      	movs	r1, #16
 8006150:	4881      	ldr	r0, [pc, #516]	@ (8006358 <AWG_Load_Waveform+0x2e8>)
 8006152:	f7fc fe22 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006156:	2201      	movs	r2, #1
 8006158:	2110      	movs	r1, #16
 800615a:	487f      	ldr	r0, [pc, #508]	@ (8006358 <AWG_Load_Waveform+0x2e8>)
 800615c:	f7fc fe1d 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006160:	2200      	movs	r2, #0
 8006162:	2110      	movs	r1, #16
 8006164:	487c      	ldr	r0, [pc, #496]	@ (8006358 <AWG_Load_Waveform+0x2e8>)
 8006166:	f7fc fe18 	bl	8002d9a <HAL_GPIO_WritePin>

	//Setting up clock
	uint32_t D = (uint32_t)round(MCLKfreq/(depth*AWG->Freq));
 800616a:	8b7b      	ldrh	r3, [r7, #26]
 800616c:	4618      	mov	r0, r3
 800616e:	f7fa f949 	bl	8000404 <__aeabi_i2d>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006178:	f7fa f9ae 	bl	80004d8 <__aeabi_dmul>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	a171      	add	r1, pc, #452	@ (adr r1, 8006348 <AWG_Load_Waveform+0x2d8>)
 8006182:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006186:	f7fa fad1 	bl	800072c <__aeabi_ddiv>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4610      	mov	r0, r2
 8006190:	4619      	mov	r1, r3
 8006192:	f004 fae7 	bl	800a764 <round>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4610      	mov	r0, r2
 800619c:	4619      	mov	r1, r3
 800619e:	f7fa fc73 	bl	8000a88 <__aeabi_d2uiz>
 80061a2:	4603      	mov	r3, r0
 80061a4:	613b      	str	r3, [r7, #16]

	data = D;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	83fb      	strh	r3, [r7, #30]

	byte[0] = (uint8_t)((data>>16)&0x00ff);
 80061aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80061ae:	141b      	asrs	r3, r3, #16
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((data>>8)&0x00ff);
 80061b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80061b8:	121b      	asrs	r3, r3, #8
 80061ba:	b21b      	sxth	r3, r3
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(data&0x00ff);
 80061c0:	8bfb      	ldrh	r3, [r7, #30]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)AWG_D;
 80061c6:	2302      	movs	r3, #2
 80061c8:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80061ca:	f107 0108 	add.w	r1, r7, #8
 80061ce:	2364      	movs	r3, #100	@ 0x64
 80061d0:	2204      	movs	r2, #4
 80061d2:	4860      	ldr	r0, [pc, #384]	@ (8006354 <AWG_Load_Waveform+0x2e4>)
 80061d4:	f7fd fff0 	bl	80041b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80061d8:	2201      	movs	r2, #1
 80061da:	2110      	movs	r1, #16
 80061dc:	485e      	ldr	r0, [pc, #376]	@ (8006358 <AWG_Load_Waveform+0x2e8>)
 80061de:	f7fc fddc 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80061e2:	2200      	movs	r2, #0
 80061e4:	2110      	movs	r1, #16
 80061e6:	485c      	ldr	r0, [pc, #368]	@ (8006358 <AWG_Load_Waveform+0x2e8>)
 80061e8:	f7fc fdd7 	bl	8002d9a <HAL_GPIO_WritePin>

	// loading waveform

	float relativeDACcode = AWG->Uamp * HFDAC->relativeDACcodeCoef;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4619      	mov	r1, r3
 80061f6:	4610      	mov	r0, r2
 80061f8:	f7fa fdc4 	bl	8000d84 <__aeabi_fmul>
 80061fc:	4603      	mov	r3, r0
 80061fe:	60fb      	str	r3, [r7, #12]

	for(int16_t addr = 0; addr < depth; addr++)
 8006200:	2300      	movs	r3, #0
 8006202:	83bb      	strh	r3, [r7, #28]
 8006204:	e172      	b.n	80064ec <AWG_Load_Waveform+0x47c>
	{

		switch(AWG->waveform)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b03      	cmp	r3, #3
 800620c:	f200 8139 	bhi.w	8006482 <AWG_Load_Waveform+0x412>
 8006210:	a201      	add	r2, pc, #4	@ (adr r2, 8006218 <AWG_Load_Waveform+0x1a8>)
 8006212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006216:	bf00      	nop
 8006218:	08006229 	.word	0x08006229
 800621c:	080062bf 	.word	0x080062bf
 8006220:	080063eb 	.word	0x080063eb
 8006224:	0800647d 	.word	0x0800647d
		{
			case Square: data = (int16_t)round((addr>=(depth*AWG->DutyCycle/100))*relativeDACcode-(relativeDACcode/2.0)); break;
 8006228:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800622c:	4618      	mov	r0, r3
 800622e:	f7fa fd55 	bl	8000cdc <__aeabi_i2f>
 8006232:	4604      	mov	r4, r0
 8006234:	8b7b      	ldrh	r3, [r7, #26]
 8006236:	4618      	mov	r0, r3
 8006238:	f7fa fd50 	bl	8000cdc <__aeabi_i2f>
 800623c:	4602      	mov	r2, r0
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	4619      	mov	r1, r3
 8006244:	4610      	mov	r0, r2
 8006246:	f7fa fd9d 	bl	8000d84 <__aeabi_fmul>
 800624a:	4603      	mov	r3, r0
 800624c:	4940      	ldr	r1, [pc, #256]	@ (8006350 <AWG_Load_Waveform+0x2e0>)
 800624e:	4618      	mov	r0, r3
 8006250:	f7fa fe4c 	bl	8000eec <__aeabi_fdiv>
 8006254:	4603      	mov	r3, r0
 8006256:	4619      	mov	r1, r3
 8006258:	4620      	mov	r0, r4
 800625a:	f7fa ff45 	bl	80010e8 <__aeabi_fcmpge>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <AWG_Load_Waveform+0x1fa>
 8006264:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006268:	e001      	b.n	800626e <AWG_Load_Waveform+0x1fe>
 800626a:	f04f 0300 	mov.w	r3, #0
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	4618      	mov	r0, r3
 8006272:	f7fa fd87 	bl	8000d84 <__aeabi_fmul>
 8006276:	4603      	mov	r3, r0
 8006278:	4618      	mov	r0, r3
 800627a:	f7fa f8d5 	bl	8000428 <__aeabi_f2d>
 800627e:	4604      	mov	r4, r0
 8006280:	460d      	mov	r5, r1
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f7fa f8d0 	bl	8000428 <__aeabi_f2d>
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006290:	f7fa fa4c 	bl	800072c <__aeabi_ddiv>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4620      	mov	r0, r4
 800629a:	4629      	mov	r1, r5
 800629c:	f7f9 ff64 	bl	8000168 <__aeabi_dsub>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4610      	mov	r0, r2
 80062a6:	4619      	mov	r1, r3
 80062a8:	f004 fa5c 	bl	800a764 <round>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4610      	mov	r0, r2
 80062b2:	4619      	mov	r1, r3
 80062b4:	f7fa fbc0 	bl	8000a38 <__aeabi_d2iz>
 80062b8:	4603      	mov	r3, r0
 80062ba:	83fb      	strh	r3, [r7, #30]
 80062bc:	e0e1      	b.n	8006482 <AWG_Load_Waveform+0x412>

			case Triangle:	if(addr <= DepthPos) data = (int16_t)round(relativeDACcode*addr/(DepthPos*1.0)-(relativeDACcode/2.0)); // rising edge
 80062be:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80062c2:	8b3b      	ldrh	r3, [r7, #24]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	dc49      	bgt.n	800635c <AWG_Load_Waveform+0x2ec>
 80062c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fa fd05 	bl	8000cdc <__aeabi_i2f>
 80062d2:	4603      	mov	r3, r0
 80062d4:	68f9      	ldr	r1, [r7, #12]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fa fd54 	bl	8000d84 <__aeabi_fmul>
 80062dc:	4603      	mov	r3, r0
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fa f8a2 	bl	8000428 <__aeabi_f2d>
 80062e4:	4604      	mov	r4, r0
 80062e6:	460d      	mov	r5, r1
 80062e8:	8b3b      	ldrh	r3, [r7, #24]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fa f88a 	bl	8000404 <__aeabi_i2d>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4620      	mov	r0, r4
 80062f6:	4629      	mov	r1, r5
 80062f8:	f7fa fa18 	bl	800072c <__aeabi_ddiv>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4614      	mov	r4, r2
 8006302:	461d      	mov	r5, r3
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7fa f88f 	bl	8000428 <__aeabi_f2d>
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006312:	f7fa fa0b 	bl	800072c <__aeabi_ddiv>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7f9 ff23 	bl	8000168 <__aeabi_dsub>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4610      	mov	r0, r2
 8006328:	4619      	mov	r1, r3
 800632a:	f004 fa1b 	bl	800a764 <round>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4610      	mov	r0, r2
 8006334:	4619      	mov	r1, r3
 8006336:	f7fa fb7f 	bl	8000a38 <__aeabi_d2iz>
 800633a:	4603      	mov	r3, r0
 800633c:	83fb      	strh	r3, [r7, #30]
							else data = (int16_t)round(relativeDACcode*(1-(addr-DepthPos)/(DepthNeg*1.0))-(relativeDACcode/2.0)); break; // falling edge
 800633e:	e0a0      	b.n	8006482 <AWG_Load_Waveform+0x412>
 8006340:	00000000 	.word	0x00000000
 8006344:	417312d0 	.word	0x417312d0
 8006348:	00000000 	.word	0x00000000
 800634c:	41b0b076 	.word	0x41b0b076
 8006350:	42c80000 	.word	0x42c80000
 8006354:	20000290 	.word	0x20000290
 8006358:	40010800 	.word	0x40010800
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7fa f863 	bl	8000428 <__aeabi_f2d>
 8006362:	4604      	mov	r4, r0
 8006364:	460d      	mov	r5, r1
 8006366:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800636a:	8b3b      	ldrh	r3, [r7, #24]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	4618      	mov	r0, r3
 8006370:	f7fa f848 	bl	8000404 <__aeabi_i2d>
 8006374:	4680      	mov	r8, r0
 8006376:	4689      	mov	r9, r1
 8006378:	8afb      	ldrh	r3, [r7, #22]
 800637a:	4618      	mov	r0, r3
 800637c:	f7fa f842 	bl	8000404 <__aeabi_i2d>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4640      	mov	r0, r8
 8006386:	4649      	mov	r1, r9
 8006388:	f7fa f9d0 	bl	800072c <__aeabi_ddiv>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	f04f 0000 	mov.w	r0, #0
 8006394:	4960      	ldr	r1, [pc, #384]	@ (8006518 <AWG_Load_Waveform+0x4a8>)
 8006396:	f7f9 fee7 	bl	8000168 <__aeabi_dsub>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4620      	mov	r0, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	f7fa f899 	bl	80004d8 <__aeabi_dmul>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4614      	mov	r4, r2
 80063ac:	461d      	mov	r5, r3
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7fa f83a 	bl	8000428 <__aeabi_f2d>
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063bc:	f7fa f9b6 	bl	800072c <__aeabi_ddiv>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4620      	mov	r0, r4
 80063c6:	4629      	mov	r1, r5
 80063c8:	f7f9 fece 	bl	8000168 <__aeabi_dsub>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4610      	mov	r0, r2
 80063d2:	4619      	mov	r1, r3
 80063d4:	f004 f9c6 	bl	800a764 <round>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4610      	mov	r0, r2
 80063de:	4619      	mov	r1, r3
 80063e0:	f7fa fb2a 	bl	8000a38 <__aeabi_d2iz>
 80063e4:	4603      	mov	r3, r0
 80063e6:	83fb      	strh	r3, [r7, #30]
 80063e8:	e04b      	b.n	8006482 <AWG_Load_Waveform+0x412>

			case Sine: data = (int16_t)round(relativeDACcode*(AWG->Uavg+sinf((addr*3.14159*2)/(1.0*depth)))); break;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685c      	ldr	r4, [r3, #4]
 80063ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fa f806 	bl	8000404 <__aeabi_i2d>
 80063f8:	a345      	add	r3, pc, #276	@ (adr r3, 8006510 <AWG_Load_Waveform+0x4a0>)
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f7fa f86b 	bl	80004d8 <__aeabi_dmul>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4610      	mov	r0, r2
 8006408:	4619      	mov	r1, r3
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	f7f9 fead 	bl	800016c <__adddf3>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4690      	mov	r8, r2
 8006418:	4699      	mov	r9, r3
 800641a:	8b7b      	ldrh	r3, [r7, #26]
 800641c:	4618      	mov	r0, r3
 800641e:	f7f9 fff1 	bl	8000404 <__aeabi_i2d>
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	4640      	mov	r0, r8
 8006428:	4649      	mov	r1, r9
 800642a:	f7fa f97f 	bl	800072c <__aeabi_ddiv>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4610      	mov	r0, r2
 8006434:	4619      	mov	r1, r3
 8006436:	f7fa fb47 	bl	8000ac8 <__aeabi_d2f>
 800643a:	4603      	mov	r3, r0
 800643c:	4618      	mov	r0, r3
 800643e:	f004 f957 	bl	800a6f0 <sinf>
 8006442:	4603      	mov	r3, r0
 8006444:	4619      	mov	r1, r3
 8006446:	4620      	mov	r0, r4
 8006448:	f7fa fb94 	bl	8000b74 <__addsf3>
 800644c:	4603      	mov	r3, r0
 800644e:	68f9      	ldr	r1, [r7, #12]
 8006450:	4618      	mov	r0, r3
 8006452:	f7fa fc97 	bl	8000d84 <__aeabi_fmul>
 8006456:	4603      	mov	r3, r0
 8006458:	4618      	mov	r0, r3
 800645a:	f7f9 ffe5 	bl	8000428 <__aeabi_f2d>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4610      	mov	r0, r2
 8006464:	4619      	mov	r1, r3
 8006466:	f004 f97d 	bl	800a764 <round>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4610      	mov	r0, r2
 8006470:	4619      	mov	r1, r3
 8006472:	f7fa fae1 	bl	8000a38 <__aeabi_d2iz>
 8006476:	4603      	mov	r3, r0
 8006478:	83fb      	strh	r3, [r7, #30]
 800647a:	e002      	b.n	8006482 <AWG_Load_Waveform+0x412>

			case Func: data = 0; break;
 800647c:	2300      	movs	r3, #0
 800647e:	83fb      	strh	r3, [r7, #30]
 8006480:	bf00      	nop
		}

		byte[0] = (int8_t)((addr>>4)&0x00ff);
 8006482:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006486:	111b      	asrs	r3, r3, #4
 8006488:	b21b      	sxth	r3, r3
 800648a:	b2db      	uxtb	r3, r3
 800648c:	723b      	strb	r3, [r7, #8]
		byte[1] = (int8_t)(((data>>8)&0x000f)|((addr<<4)&0x00f0));
 800648e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006492:	121b      	asrs	r3, r3, #8
 8006494:	b21b      	sxth	r3, r3
 8006496:	b25b      	sxtb	r3, r3
 8006498:	f003 030f 	and.w	r3, r3, #15
 800649c:	b25a      	sxtb	r2, r3
 800649e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	b25b      	sxtb	r3, r3
 80064a6:	f023 030f 	bic.w	r3, r3, #15
 80064aa:	b25b      	sxtb	r3, r3
 80064ac:	4313      	orrs	r3, r2
 80064ae:	b25b      	sxtb	r3, r3
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	727b      	strb	r3, [r7, #9]
		byte[2] = (int8_t)(data&0x00ff);
 80064b4:	8bfb      	ldrh	r3, [r7, #30]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	72bb      	strb	r3, [r7, #10]
		byte[3] = (int8_t)AWG_DATA;
 80064ba:	2305      	movs	r3, #5
 80064bc:	72fb      	strb	r3, [r7, #11]

		HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80064be:	f107 0108 	add.w	r1, r7, #8
 80064c2:	2364      	movs	r3, #100	@ 0x64
 80064c4:	2204      	movs	r2, #4
 80064c6:	4815      	ldr	r0, [pc, #84]	@ (800651c <AWG_Load_Waveform+0x4ac>)
 80064c8:	f7fd fe76 	bl	80041b8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80064cc:	2201      	movs	r2, #1
 80064ce:	2110      	movs	r1, #16
 80064d0:	4813      	ldr	r0, [pc, #76]	@ (8006520 <AWG_Load_Waveform+0x4b0>)
 80064d2:	f7fc fc62 	bl	8002d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80064d6:	2200      	movs	r2, #0
 80064d8:	2110      	movs	r1, #16
 80064da:	4811      	ldr	r0, [pc, #68]	@ (8006520 <AWG_Load_Waveform+0x4b0>)
 80064dc:	f7fc fc5d 	bl	8002d9a <HAL_GPIO_WritePin>
	for(int16_t addr = 0; addr < depth; addr++)
 80064e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3301      	adds	r3, #1
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	83bb      	strh	r3, [r7, #28]
 80064ec:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80064f0:	8b7b      	ldrh	r3, [r7, #26]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	f6ff ae87 	blt.w	8006206 <AWG_Load_Waveform+0x196>
	}
		LOLA_enable_features(AWG_EN, 1); // enable AWG
 80064f8:	2101      	movs	r1, #1
 80064fa:	2002      	movs	r0, #2
 80064fc:	f000 fa54 	bl	80069a8 <LOLA_enable_features>
}
 8006500:	bf00      	nop
 8006502:	3720      	adds	r7, #32
 8006504:	46bd      	mov	sp, r7
 8006506:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w
 8006510:	f01b866e 	.word	0xf01b866e
 8006514:	400921f9 	.word	0x400921f9
 8006518:	3ff00000 	.word	0x3ff00000
 800651c:	20000290 	.word	0x20000290
 8006520:	40010800 	.word	0x40010800

08006524 <DVM_GET_DATA_RAW>:
#include "board.h"
#include "trim.h"


int16_t DVM_GET_DATA_RAW()
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
	int16_t RawValue = 0; // voltage or current
 800652a:	2300      	movs	r3, #0
 800652c:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	byte[0] = (int8_t)0;
 800652e:	2300      	movs	r3, #0
 8006530:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)0;
 8006532:	2300      	movs	r3, #0
 8006534:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)0;
 8006536:	2300      	movs	r3, #0
 8006538:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)DVM_DATA;
 800653a:	2314      	movs	r3, #20
 800653c:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 800653e:	f107 0108 	add.w	r1, r7, #8
 8006542:	2364      	movs	r3, #100	@ 0x64
 8006544:	2204      	movs	r2, #4
 8006546:	4817      	ldr	r0, [pc, #92]	@ (80065a4 <DVM_GET_DATA_RAW+0x80>)
 8006548:	f7fd fe36 	bl	80041b8 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 800654c:	2200      	movs	r2, #0
 800654e:	2110      	movs	r1, #16
 8006550:	4815      	ldr	r0, [pc, #84]	@ (80065a8 <DVM_GET_DATA_RAW+0x84>)
 8006552:	f7fc fc22 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006556:	2201      	movs	r2, #1
 8006558:	2110      	movs	r1, #16
 800655a:	4813      	ldr	r0, [pc, #76]	@ (80065a8 <DVM_GET_DATA_RAW+0x84>)
 800655c:	f7fc fc1d 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006560:	2200      	movs	r2, #0
 8006562:	2110      	movs	r1, #16
 8006564:	4810      	ldr	r0, [pc, #64]	@ (80065a8 <DVM_GET_DATA_RAW+0x84>)
 8006566:	f7fc fc18 	bl	8002d9a <HAL_GPIO_WritePin>

	uint8_t rxBuffer[4];

	if (HAL_SPI_Receive(&hspi1, rxBuffer, 4, HAL_MAX_DELAY) == HAL_OK) RawValue = to_signed_12bit((int16_t)((rxBuffer[2] << 8) | rxBuffer[3]));
 800656a:	1d39      	adds	r1, r7, #4
 800656c:	f04f 33ff 	mov.w	r3, #4294967295
 8006570:	2204      	movs	r2, #4
 8006572:	480c      	ldr	r0, [pc, #48]	@ (80065a4 <DVM_GET_DATA_RAW+0x80>)
 8006574:	f7fd ff63 	bl	800443e <HAL_SPI_Receive>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10c      	bne.n	8006598 <DVM_GET_DATA_RAW+0x74>
 800657e:	79bb      	ldrb	r3, [r7, #6]
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	b21a      	sxth	r2, r3
 8006584:	79fb      	ldrb	r3, [r7, #7]
 8006586:	b21b      	sxth	r3, r3
 8006588:	4313      	orrs	r3, r2
 800658a:	b21b      	sxth	r3, r3
 800658c:	b29b      	uxth	r3, r3
 800658e:	4618      	mov	r0, r3
 8006590:	f001 f93c 	bl	800780c <to_signed_12bit>
 8006594:	4603      	mov	r3, r0
 8006596:	81fb      	strh	r3, [r7, #14]

	return RawValue;
 8006598:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000290 	.word	0x20000290
 80065a8:	40010800 	.word	0x40010800

080065ac <DVM_GET_FILTERED_DATA_RAW>:

int16_t DVM_GET_FILTERED_DATA_RAW(uint16_t NoSamples)
{
 80065ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	4603      	mov	r3, r0
 80065b6:	80fb      	strh	r3, [r7, #6]
	int64_t out = 0;
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	f04f 0300 	mov.w	r3, #0
 80065c0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	for(int i = 0; i < NoSamples; i++)
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	e011      	b.n	80065ee <DVM_GET_FILTERED_DATA_RAW+0x42>
	{
		out += DVM_GET_DATA_RAW();
 80065ca:	f7ff ffab 	bl	8006524 <DVM_GET_DATA_RAW>
 80065ce:	4603      	mov	r3, r0
 80065d0:	b21b      	sxth	r3, r3
 80065d2:	17da      	asrs	r2, r3, #31
 80065d4:	461c      	mov	r4, r3
 80065d6:	4615      	mov	r5, r2
 80065d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80065dc:	eb12 0804 	adds.w	r8, r2, r4
 80065e0:	eb43 0905 	adc.w	r9, r3, r5
 80065e4:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for(int i = 0; i < NoSamples; i++)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	dbe9      	blt.n	80065ca <DVM_GET_FILTERED_DATA_RAW+0x1e>
	}
	out /= NoSamples;
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	2200      	movs	r2, #0
 80065fa:	469a      	mov	sl, r3
 80065fc:	4693      	mov	fp, r2
 80065fe:	4652      	mov	r2, sl
 8006600:	465b      	mov	r3, fp
 8006602:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006606:	f7fa fda9 	bl	800115c <__aeabi_ldivmod>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return (int16_t)out;
 8006612:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006620 <HFADC_CONVERT_RAW2VALUE>:
#include "HFADC.h"
#include "ProgRef.h"
#include "TCA9555.h"

float HFADC_CONVERT_RAW2VALUE(HFADC_struct* HFADC, uint16_t RAW)
{
 8006620:	b5b0      	push	{r4, r5, r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	807b      	strh	r3, [r7, #2]
	float VALUE = HFADCfrontendGain * HFADC->ADCref * (RAW/(maxValOf11Bit*1.0));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	4618      	mov	r0, r3
 8006632:	f7f9 fef9 	bl	8000428 <__aeabi_f2d>
 8006636:	a330      	add	r3, pc, #192	@ (adr r3, 80066f8 <HFADC_CONVERT_RAW2VALUE+0xd8>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	f7f9 ff4c 	bl	80004d8 <__aeabi_dmul>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4614      	mov	r4, r2
 8006646:	461d      	mov	r5, r3
 8006648:	887b      	ldrh	r3, [r7, #2]
 800664a:	4618      	mov	r0, r3
 800664c:	f7f9 feda 	bl	8000404 <__aeabi_i2d>
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	4b2a      	ldr	r3, [pc, #168]	@ (8006700 <HFADC_CONVERT_RAW2VALUE+0xe0>)
 8006656:	f7fa f869 	bl	800072c <__aeabi_ddiv>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	4620      	mov	r0, r4
 8006660:	4629      	mov	r1, r5
 8006662:	f7f9 ff39 	bl	80004d8 <__aeabi_dmul>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4610      	mov	r0, r2
 800666c:	4619      	mov	r1, r3
 800666e:	f7fa fa2b 	bl	8000ac8 <__aeabi_d2f>
 8006672:	4603      	mov	r3, r0
 8006674:	60fb      	str	r3, [r7, #12]

	switch(HFADC->source)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d035      	beq.n	80066ea <HFADC_CONVERT_RAW2VALUE+0xca>
 800667e:	2b02      	cmp	r3, #2
 8006680:	dc2f      	bgt.n	80066e2 <HFADC_CONVERT_RAW2VALUE+0xc2>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HFADC_CONVERT_RAW2VALUE+0x6c>
 8006686:	2b01      	cmp	r3, #1
 8006688:	d024      	beq.n	80066d4 <HFADC_CONVERT_RAW2VALUE+0xb4>
 800668a:	e02a      	b.n	80066e2 <HFADC_CONVERT_RAW2VALUE+0xc2>
	{
		case OUT: if(HFADC->mode == Voltage_input) VALUE = VALUE*HFADCoutVoltageGain - HFADC->OUT_MEASURING_OFFSET;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	785b      	ldrb	r3, [r3, #1]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10f      	bne.n	80066b4 <HFADC_CONVERT_RAW2VALUE+0x94>
 8006694:	f04f 0100 	mov.w	r1, #0
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7fa fb73 	bl	8000d84 <__aeabi_fmul>
 800669e:	4603      	mov	r3, r0
 80066a0:	461a      	mov	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	4619      	mov	r1, r3
 80066a8:	4610      	mov	r0, r2
 80066aa:	f7fa fa61 	bl	8000b70 <__aeabi_fsub>
 80066ae:	4603      	mov	r3, r0
 80066b0:	60fb      	str	r3, [r7, #12]
				  else 						 	   VALUE = VALUE*HFADCoutCurrentGain - HFADC->OUT_MEASURING_OFFSET;
		break;
 80066b2:	e01b      	b.n	80066ec <HFADC_CONVERT_RAW2VALUE+0xcc>
				  else 						 	   VALUE = VALUE*HFADCoutCurrentGain - HFADC->OUT_MEASURING_OFFSET;
 80066b4:	f04f 0100 	mov.w	r1, #0
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7fa fb63 	bl	8000d84 <__aeabi_fmul>
 80066be:	4603      	mov	r3, r0
 80066c0:	461a      	mov	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f7fa fa51 	bl	8000b70 <__aeabi_fsub>
 80066ce:	4603      	mov	r3, r0
 80066d0:	60fb      	str	r3, [r7, #12]
		break;
 80066d2:	e00b      	b.n	80066ec <HFADC_CONVERT_RAW2VALUE+0xcc>

		case IN: VALUE *= HFADCinGain; break;
 80066d4:	490b      	ldr	r1, [pc, #44]	@ (8006704 <HFADC_CONVERT_RAW2VALUE+0xe4>)
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7fa fb54 	bl	8000d84 <__aeabi_fmul>
 80066dc:	4603      	mov	r3, r0
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	e004      	b.n	80066ec <HFADC_CONVERT_RAW2VALUE+0xcc>

		case UIO: VALUE *= HFADCuioGain; break;

		default: VALUE = 0; break;
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	e000      	b.n	80066ec <HFADC_CONVERT_RAW2VALUE+0xcc>
		case UIO: VALUE *= HFADCuioGain; break;
 80066ea:	bf00      	nop
	}

	return VALUE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bdb0      	pop	{r4, r5, r7, pc}
 80066f6:	bf00      	nop
 80066f8:	cccccccd 	.word	0xcccccccd
 80066fc:	4008cccc 	.word	0x4008cccc
 8006700:	40a00000 	.word	0x40a00000
 8006704:	423c0000 	.word	0x423c0000

08006708 <HFADC_SET_ALL>:

	return RAW;
}

void HFADC_SET_ALL(HFADC_struct* HFADC)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	HFADC_SET_REF(HFADC->ADCref);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4618      	mov	r0, r3
 8006716:	f7f9 fe87 	bl	8000428 <__aeabi_f2d>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4610      	mov	r0, r2
 8006720:	4619      	mov	r1, r3
 8006722:	f000 f809 	bl	8006738 <HFADC_SET_REF>
	HFADC_SET_UIO_SOURCE(HFADC->UIO_channel);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	789b      	ldrb	r3, [r3, #2]
 800672a:	4618      	mov	r0, r3
 800672c:	f000 f80f 	bl	800674e <HFADC_SET_UIO_SOURCE>

	return;
 8006730:	bf00      	nop
}
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HFADC_SET_REF>:

void HFADC_SET_REF(float Vref)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
	ADCREF(Vref);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fa95 	bl	8006c70 <ADCREF>
}
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <HFADC_SET_UIO_SOURCE>:
{

}

void HFADC_SET_UIO_SOURCE(uint8_t UIOsource)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	4603      	mov	r3, r0
 8006756:	71fb      	strb	r3, [r7, #7]

}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr
	...

08006764 <LOLA_CFG_SEL>:
#include "board.h"
#include "ProgRef.h"


void LOLA_CFG_SEL(InitType t)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	71fb      	strb	r3, [r7, #7]
	switch(t)
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	2b05      	cmp	r3, #5
 8006772:	f200 8081 	bhi.w	8006878 <LOLA_CFG_SEL+0x114>
 8006776:	a201      	add	r2, pc, #4	@ (adr r2, 800677c <LOLA_CFG_SEL+0x18>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	08006795 	.word	0x08006795
 8006780:	080067bb 	.word	0x080067bb
 8006784:	080067e1 	.word	0x080067e1
 8006788:	08006807 	.word	0x08006807
 800678c:	0800682d 	.word	0x0800682d
 8006790:	08006853 	.word	0x08006853
		{
			// reference: http://dangerousprototypes.com/docs/Xilinx_Spartan_3_FPGA_quick_start#Boot_configuration
			case Master_Serial:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 8006794:	2200      	movs	r2, #0
 8006796:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800679a:	4843      	ldr	r0, [pc, #268]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 800679c:	f7fc fafd 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 80067a0:	2200      	movs	r2, #0
 80067a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80067a6:	4840      	ldr	r0, [pc, #256]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 80067a8:	f7fc faf7 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 80067ac:	2200      	movs	r2, #0
 80067ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80067b2:	483d      	ldr	r0, [pc, #244]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 80067b4:	f7fc faf1 	bl	8002d9a <HAL_GPIO_WritePin>
			break;
 80067b8:	e071      	b.n	800689e <LOLA_CFG_SEL+0x13a>

			case SPI_FLASH:	// SPI FLASH
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80067ba:	2200      	movs	r2, #0
 80067bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80067c0:	4839      	ldr	r0, [pc, #228]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 80067c2:	f7fc faea 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 80067c6:	2200      	movs	r2, #0
 80067c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80067cc:	4836      	ldr	r0, [pc, #216]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 80067ce:	f7fc fae4 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 80067d2:	2201      	movs	r2, #1
 80067d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80067d8:	4833      	ldr	r0, [pc, #204]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 80067da:	f7fc fade 	bl	8002d9a <HAL_GPIO_WritePin>
			break;
 80067de:	e05e      	b.n	800689e <LOLA_CFG_SEL+0x13a>

			case BPI_Up:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80067e0:	2200      	movs	r2, #0
 80067e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80067e6:	4830      	ldr	r0, [pc, #192]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 80067e8:	f7fc fad7 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 80067ec:	2201      	movs	r2, #1
 80067ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80067f2:	482d      	ldr	r0, [pc, #180]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 80067f4:	f7fc fad1 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 80067f8:	2200      	movs	r2, #0
 80067fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80067fe:	482a      	ldr	r0, [pc, #168]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 8006800:	f7fc facb 	bl	8002d9a <HAL_GPIO_WritePin>
			break;
 8006804:	e04b      	b.n	800689e <LOLA_CFG_SEL+0x13a>

			case BPI_Down:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 8006806:	2200      	movs	r2, #0
 8006808:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800680c:	4826      	ldr	r0, [pc, #152]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 800680e:	f7fc fac4 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8006812:	2201      	movs	r2, #1
 8006814:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006818:	4823      	ldr	r0, [pc, #140]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 800681a:	f7fc fabe 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 800681e:	2201      	movs	r2, #1
 8006820:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006824:	4820      	ldr	r0, [pc, #128]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 8006826:	f7fc fab8 	bl	8002d9a <HAL_GPIO_WritePin>
			break;
 800682a:	e038      	b.n	800689e <LOLA_CFG_SEL+0x13a>

			case Slave_parallel:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 800682c:	2201      	movs	r2, #1
 800682e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006832:	481d      	ldr	r0, [pc, #116]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 8006834:	f7fc fab1 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8006838:	2201      	movs	r2, #1
 800683a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800683e:	481a      	ldr	r0, [pc, #104]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 8006840:	f7fc faab 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 8006844:	2200      	movs	r2, #0
 8006846:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800684a:	4817      	ldr	r0, [pc, #92]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 800684c:	f7fc faa5 	bl	8002d9a <HAL_GPIO_WritePin>
			break;
 8006850:	e025      	b.n	800689e <LOLA_CFG_SEL+0x13a>

			case Slave_Serial:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8006852:	2201      	movs	r2, #1
 8006854:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006858:	4813      	ldr	r0, [pc, #76]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 800685a:	f7fc fa9e 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 800685e:	2201      	movs	r2, #1
 8006860:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006864:	4810      	ldr	r0, [pc, #64]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 8006866:	f7fc fa98 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 800686a:	2201      	movs	r2, #1
 800686c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006870:	480d      	ldr	r0, [pc, #52]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 8006872:	f7fc fa92 	bl	8002d9a <HAL_GPIO_WritePin>
			break;
 8006876:	e012      	b.n	800689e <LOLA_CFG_SEL+0x13a>

			default: // JTAG on default
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8006878:	2201      	movs	r2, #1
 800687a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800687e:	480a      	ldr	r0, [pc, #40]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 8006880:	f7fc fa8b 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 8006884:	2200      	movs	r2, #0
 8006886:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800688a:	4807      	ldr	r0, [pc, #28]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 800688c:	f7fc fa85 	bl	8002d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8006890:	2201      	movs	r2, #1
 8006892:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006896:	4804      	ldr	r0, [pc, #16]	@ (80068a8 <LOLA_CFG_SEL+0x144>)
 8006898:	f7fc fa7f 	bl	8002d9a <HAL_GPIO_WritePin>
			break;
 800689c:	bf00      	nop
		}
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40010c00 	.word	0x40010c00

080068ac <LOLA_Init>:

uint8_t LOLA_Init(LOLAconfig_struct* LOLAconfig)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
	uint16_t AttemptsLeft;
	uint16_t FID = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	817b      	strh	r3, [r7, #10]
	uint16_t TrialsLeft = LOLAconfig->Trials;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	885b      	ldrh	r3, [r3, #2]
 80068bc:	81bb      	strh	r3, [r7, #12]

	LOLAconfig->Status = NO_FIRMWARE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]

	do{

		LOLA_Reset();
 80068c4:	f000 f860 	bl	8006988 <LOLA_Reset>
		HAL_Delay(200);
 80068c8:	20c8      	movs	r0, #200	@ 0xc8
 80068ca:	f7fb fcd5 	bl	8002278 <HAL_Delay>
		LOLA_CFG_SEL(LOLAconfig->Config);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	785b      	ldrb	r3, [r3, #1]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff ff46 	bl	8006764 <LOLA_CFG_SEL>

		AttemptsLeft = 20;
 80068d8:	2314      	movs	r3, #20
 80068da:	81fb      	strh	r3, [r7, #14]

		if(LOLAconfig->Config == JTAG)	// unlimited timer for manual JTAG configuration
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	785b      	ldrb	r3, [r3, #1]
 80068e0:	2b06      	cmp	r3, #6
 80068e2:	d10f      	bne.n	8006904 <LOLA_Init+0x58>
			while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin)){}
 80068e4:	bf00      	nop
 80068e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80068ea:	4826      	ldr	r0, [pc, #152]	@ (8006984 <LOLA_Init+0xd8>)
 80068ec:	f7fc fa3e 	bl	8002d6c <HAL_GPIO_ReadPin>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1f7      	bne.n	80068e6 <LOLA_Init+0x3a>
 80068f6:	e010      	b.n	800691a <LOLA_Init+0x6e>
		else
			while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin) && AttemptsLeft > 0)
			{
				AttemptsLeft--;
 80068f8:	89fb      	ldrh	r3, [r7, #14]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	81fb      	strh	r3, [r7, #14]
				HAL_Delay(100);
 80068fe:	2064      	movs	r0, #100	@ 0x64
 8006900:	f7fb fcba 	bl	8002278 <HAL_Delay>
			while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin) && AttemptsLeft > 0)
 8006904:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006908:	481e      	ldr	r0, [pc, #120]	@ (8006984 <LOLA_Init+0xd8>)
 800690a:	f7fc fa2f 	bl	8002d6c <HAL_GPIO_ReadPin>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <LOLA_Init+0x6e>
 8006914:	89fb      	ldrh	r3, [r7, #14]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1ee      	bne.n	80068f8 <LOLA_Init+0x4c>
			}

		AttemptsLeft = 20;
 800691a:	2314      	movs	r3, #20
 800691c:	81fb      	strh	r3, [r7, #14]
		LOLAconfig->Status = NO_FIRMWARE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	701a      	strb	r2, [r3, #0]

		do{
			HAL_Delay(100);
 8006924:	2064      	movs	r0, #100	@ 0x64
 8006926:	f7fb fca7 	bl	8002278 <HAL_Delay>
			FID = LOLA_GET_FIRMWAREID();
 800692a:	f000 f89b 	bl	8006a64 <LOLA_GET_FIRMWAREID>
 800692e:	4603      	mov	r3, r0
 8006930:	817b      	strh	r3, [r7, #10]

			if(LOLAconfig->compatibleFirmwareID == FID) LOLAconfig->Status = FIRMWARE_OK;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	889b      	ldrh	r3, [r3, #4]
 8006936:	897a      	ldrh	r2, [r7, #10]
 8006938:	429a      	cmp	r2, r3
 800693a:	d103      	bne.n	8006944 <LOLA_Init+0x98>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	e002      	b.n	800694a <LOLA_Init+0x9e>
			else LOLAconfig->Status = INVALID_FIRMWARE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
		}while(AttemptsLeft > 0 && LOLAconfig->Status != FIRMWARE_OK);
 800694a:	89fb      	ldrh	r3, [r7, #14]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <LOLA_Init+0xac>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d1e5      	bne.n	8006924 <LOLA_Init+0x78>

		TrialsLeft--;
 8006958:	89bb      	ldrh	r3, [r7, #12]
 800695a:	3b01      	subs	r3, #1
 800695c:	81bb      	strh	r3, [r7, #12]

	}while(TrialsLeft > 0 && LOLAconfig->Status != FIRMWARE_OK);
 800695e:	89bb      	ldrh	r3, [r7, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <LOLA_Init+0xc0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d1ab      	bne.n	80068c4 <LOLA_Init+0x18>

	if(LOLAconfig->Status == FIRMWARE_OK) return 1;	// sucesfull configuration
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d101      	bne.n	8006978 <LOLA_Init+0xcc>
 8006974:	2301      	movs	r3, #1
 8006976:	e000      	b.n	800697a <LOLA_Init+0xce>
	else return 0; // timer ran out
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40010800 	.word	0x40010800

08006988 <LOLA_Reset>:

void LOLA_Reset()
{
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 0);
 800698c:	2200      	movs	r2, #0
 800698e:	2108      	movs	r1, #8
 8006990:	4804      	ldr	r0, [pc, #16]	@ (80069a4 <LOLA_Reset+0x1c>)
 8006992:	f7fc fa02 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 1);
 8006996:	2201      	movs	r2, #1
 8006998:	2108      	movs	r1, #8
 800699a:	4802      	ldr	r0, [pc, #8]	@ (80069a4 <LOLA_Reset+0x1c>)
 800699c:	f7fc f9fd 	bl	8002d9a <HAL_GPIO_WritePin>
}
 80069a0:	bf00      	nop
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	40010800 	.word	0x40010800

080069a8 <LOLA_enable_features>:
}*/

uint16_t enablersReg = 0;

void LOLA_enable_features(LOLAfeatures LOLAfeatures1, uint8_t ENABLE)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	4603      	mov	r3, r0
 80069b0:	460a      	mov	r2, r1
 80069b2:	71fb      	strb	r3, [r7, #7]
 80069b4:	4613      	mov	r3, r2
 80069b6:	71bb      	strb	r3, [r7, #6]
	uint16_t enablersMask = 0x0001 << LOLAfeatures1;
 80069b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069bc:	2201      	movs	r2, #1
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	if((uint16_t)LOLAfeatures1 == (uint16_t)ALL_EN) 	enablersMask = 0xffff;
 80069c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d102      	bne.n	80069d8 <LOLA_enable_features+0x30>
 80069d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069d6:	81fb      	strh	r3, [r7, #14]

	if(ENABLE) 	enablersReg |= enablersMask;
 80069d8:	79bb      	ldrb	r3, [r7, #6]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <LOLA_enable_features+0x46>
 80069de:	4b1e      	ldr	r3, [pc, #120]	@ (8006a58 <LOLA_enable_features+0xb0>)
 80069e0:	881a      	ldrh	r2, [r3, #0]
 80069e2:	89fb      	ldrh	r3, [r7, #14]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a58 <LOLA_enable_features+0xb0>)
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	e00b      	b.n	8006a06 <LOLA_enable_features+0x5e>
	else 		enablersReg &= ~enablersMask;
 80069ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069f2:	43db      	mvns	r3, r3
 80069f4:	b21a      	sxth	r2, r3
 80069f6:	4b18      	ldr	r3, [pc, #96]	@ (8006a58 <LOLA_enable_features+0xb0>)
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	b21b      	sxth	r3, r3
 80069fc:	4013      	ands	r3, r2
 80069fe:	b21b      	sxth	r3, r3
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	4b15      	ldr	r3, [pc, #84]	@ (8006a58 <LOLA_enable_features+0xb0>)
 8006a04:	801a      	strh	r2, [r3, #0]

	byte[0] = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((enablersReg>>8)&0x00ff);
 8006a0a:	4b13      	ldr	r3, [pc, #76]	@ (8006a58 <LOLA_enable_features+0xb0>)
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(enablersReg&0x00ff);
 8006a16:	4b10      	ldr	r3, [pc, #64]	@ (8006a58 <LOLA_enable_features+0xb0>)
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)ENABLERS;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	72fb      	strb	r3, [r7, #11]


	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8006a22:	f107 0108 	add.w	r1, r7, #8
 8006a26:	2364      	movs	r3, #100	@ 0x64
 8006a28:	2204      	movs	r2, #4
 8006a2a:	480c      	ldr	r0, [pc, #48]	@ (8006a5c <LOLA_enable_features+0xb4>)
 8006a2c:	f7fd fbc4 	bl	80041b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006a30:	2200      	movs	r2, #0
 8006a32:	2110      	movs	r1, #16
 8006a34:	480a      	ldr	r0, [pc, #40]	@ (8006a60 <LOLA_enable_features+0xb8>)
 8006a36:	f7fc f9b0 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	2110      	movs	r1, #16
 8006a3e:	4808      	ldr	r0, [pc, #32]	@ (8006a60 <LOLA_enable_features+0xb8>)
 8006a40:	f7fc f9ab 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006a44:	2200      	movs	r2, #0
 8006a46:	2110      	movs	r1, #16
 8006a48:	4805      	ldr	r0, [pc, #20]	@ (8006a60 <LOLA_enable_features+0xb8>)
 8006a4a:	f7fc f9a6 	bl	8002d9a <HAL_GPIO_WritePin>
}
 8006a4e:	bf00      	nop
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	200003e0 	.word	0x200003e0
 8006a5c:	20000290 	.word	0x20000290
 8006a60:	40010800 	.word	0x40010800

08006a64 <LOLA_GET_FIRMWAREID>:

uint16_t LOLA_GET_FIRMWAREID()
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
	uint16_t FirmwareID = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	byte[0] = (int8_t)0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)FIRMWARE_ID;
 8006a7a:	2313      	movs	r3, #19
 8006a7c:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8006a7e:	f107 0108 	add.w	r1, r7, #8
 8006a82:	2364      	movs	r3, #100	@ 0x64
 8006a84:	2204      	movs	r2, #4
 8006a86:	4814      	ldr	r0, [pc, #80]	@ (8006ad8 <LOLA_GET_FIRMWAREID+0x74>)
 8006a88:	f7fd fb96 	bl	80041b8 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2110      	movs	r1, #16
 8006a90:	4812      	ldr	r0, [pc, #72]	@ (8006adc <LOLA_GET_FIRMWAREID+0x78>)
 8006a92:	f7fc f982 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006a96:	2201      	movs	r2, #1
 8006a98:	2110      	movs	r1, #16
 8006a9a:	4810      	ldr	r0, [pc, #64]	@ (8006adc <LOLA_GET_FIRMWAREID+0x78>)
 8006a9c:	f7fc f97d 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2110      	movs	r1, #16
 8006aa4:	480d      	ldr	r0, [pc, #52]	@ (8006adc <LOLA_GET_FIRMWAREID+0x78>)
 8006aa6:	f7fc f978 	bl	8002d9a <HAL_GPIO_WritePin>

	uint8_t rxBuffer[4];

	 // Receive 4 bytes
	if (HAL_SPI_Receive(&hspi1, rxBuffer, 4, HAL_MAX_DELAY) == HAL_OK) FirmwareID = (rxBuffer[2] << 8) | rxBuffer[3];
 8006aaa:	1d39      	adds	r1, r7, #4
 8006aac:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	4809      	ldr	r0, [pc, #36]	@ (8006ad8 <LOLA_GET_FIRMWAREID+0x74>)
 8006ab4:	f7fd fcc3 	bl	800443e <HAL_SPI_Receive>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d107      	bne.n	8006ace <LOLA_GET_FIRMWAREID+0x6a>
 8006abe:	79bb      	ldrb	r3, [r7, #6]
 8006ac0:	021b      	lsls	r3, r3, #8
 8006ac2:	b21a      	sxth	r2, r3
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	b21b      	sxth	r3, r3
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	b21b      	sxth	r3, r3
 8006acc:	81fb      	strh	r3, [r7, #14]

	return FirmwareID;
 8006ace:	89fb      	ldrh	r3, [r7, #14]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000290 	.word	0x20000290
 8006adc:	40010800 	.word	0x40010800

08006ae0 <DACREF>:
#include "trim.h"

float DACref = 0;

void DACREF(float v) // 0 <= v <= 2.5
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 8006ae8:	4a27      	ldr	r2, [pc, #156]	@ (8006b88 <DACREF+0xa8>)
 8006aea:	f04f 0100 	mov.w	r1, #0
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fec0 	bl	8007874 <trimFloat>
 8006af4:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 8006af6:	4924      	ldr	r1, [pc, #144]	@ (8006b88 <DACREF+0xa8>)
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7fa fad7 	bl	80010ac <__aeabi_fcmpeq>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d003      	beq.n	8006b0c <DACREF+0x2c>
 8006b04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b08:	81fb      	strh	r3, [r7, #14]
 8006b0a:	e018      	b.n	8006b3e <DACREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7f9 fc8b 	bl	8000428 <__aeabi_f2d>
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	4b1d      	ldr	r3, [pc, #116]	@ (8006b8c <DACREF+0xac>)
 8006b18:	f7f9 fe08 	bl	800072c <__aeabi_ddiv>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4610      	mov	r0, r2
 8006b22:	4619      	mov	r1, r3
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	4b19      	ldr	r3, [pc, #100]	@ (8006b90 <DACREF+0xb0>)
 8006b2a:	f7f9 fcd5 	bl	80004d8 <__aeabi_dmul>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4610      	mov	r0, r2
 8006b34:	4619      	mov	r1, r3
 8006b36:	f7f9 ffa7 	bl	8000a88 <__aeabi_d2uiz>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	81fb      	strh	r3, [r7, #14]

	DACref = v;
 8006b3e:	4a15      	ldr	r2, [pc, #84]	@ (8006b94 <DACREF+0xb4>)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6013      	str	r3, [r2, #0]

	uint8_t byte[3];

	byte[0] = (3<<1)|(1<<4);	//3 shifted=channel D	1 shifted=load
 8006b44:	2316      	movs	r3, #22
 8006b46:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8006b48:	89fb      	ldrh	r3, [r7, #14]
 8006b4a:	099b      	lsrs	r3, r3, #6
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8006b52:	89fb      	ldrh	r3, [r7, #14]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006b60:	480d      	ldr	r0, [pc, #52]	@ (8006b98 <DACREF+0xb8>)
 8006b62:	f7fc f91a 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8006b66:	f107 0108 	add.w	r1, r7, #8
 8006b6a:	2364      	movs	r3, #100	@ 0x64
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	480b      	ldr	r0, [pc, #44]	@ (8006b9c <DACREF+0xbc>)
 8006b70:	f7fd fb22 	bl	80041b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8006b74:	2201      	movs	r2, #1
 8006b76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006b7a:	4807      	ldr	r0, [pc, #28]	@ (8006b98 <DACREF+0xb8>)
 8006b7c:	f7fc f90d 	bl	8002d9a <HAL_GPIO_WritePin>
}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40200000 	.word	0x40200000
 8006b8c:	40040000 	.word	0x40040000
 8006b90:	40d00000 	.word	0x40d00000
 8006b94:	200003e4 	.word	0x200003e4
 8006b98:	40011000 	.word	0x40011000
 8006b9c:	20000290 	.word	0x20000290

08006ba0 <DACOFFS>:

void DACOFFS(float v) // -12.5 <= v <= 12.5
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 8006ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8006c54 <DACOFFS+0xb4>)
 8006baa:	492b      	ldr	r1, [pc, #172]	@ (8006c58 <DACOFFS+0xb8>)
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fe61 	bl	8007874 <trimFloat>
 8006bb2:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 8006bb4:	4927      	ldr	r1, [pc, #156]	@ (8006c54 <DACOFFS+0xb4>)
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fa fa78 	bl	80010ac <__aeabi_fcmpeq>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <DACOFFS+0x2a>
 8006bc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006bc6:	81fb      	strh	r3, [r7, #14]
 8006bc8:	e021      	b.n	8006c0e <DACOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7f9 fc2c 	bl	8000428 <__aeabi_f2d>
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	4b21      	ldr	r3, [pc, #132]	@ (8006c5c <DACOFFS+0xbc>)
 8006bd6:	f7f9 fac9 	bl	800016c <__adddf3>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4610      	mov	r0, r2
 8006be0:	4619      	mov	r1, r3
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	4b1e      	ldr	r3, [pc, #120]	@ (8006c60 <DACOFFS+0xc0>)
 8006be8:	f7f9 fda0 	bl	800072c <__aeabi_ddiv>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c64 <DACOFFS+0xc4>)
 8006bfa:	f7f9 fc6d 	bl	80004d8 <__aeabi_dmul>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4610      	mov	r0, r2
 8006c04:	4619      	mov	r1, r3
 8006c06:	f7f9 ff3f 	bl	8000a88 <__aeabi_d2uiz>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (2<<1)|(1<<4);	//2 shifted=channel C	1 shifted=load
 8006c0e:	2314      	movs	r3, #20
 8006c10:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8006c12:	89fb      	ldrh	r3, [r7, #14]
 8006c14:	099b      	lsrs	r3, r3, #6
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8006c1c:	89fb      	ldrh	r3, [r7, #14]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8006c24:	2200      	movs	r2, #0
 8006c26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006c2a:	480f      	ldr	r0, [pc, #60]	@ (8006c68 <DACOFFS+0xc8>)
 8006c2c:	f7fc f8b5 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8006c30:	f107 0108 	add.w	r1, r7, #8
 8006c34:	2364      	movs	r3, #100	@ 0x64
 8006c36:	2203      	movs	r2, #3
 8006c38:	480c      	ldr	r0, [pc, #48]	@ (8006c6c <DACOFFS+0xcc>)
 8006c3a:	f7fd fabd 	bl	80041b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006c44:	4808      	ldr	r0, [pc, #32]	@ (8006c68 <DACOFFS+0xc8>)
 8006c46:	f7fc f8a8 	bl	8002d9a <HAL_GPIO_WritePin>
}
 8006c4a:	bf00      	nop
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	41480000 	.word	0x41480000
 8006c58:	c1480000 	.word	0xc1480000
 8006c5c:	40290000 	.word	0x40290000
 8006c60:	40390000 	.word	0x40390000
 8006c64:	40d00000 	.word	0x40d00000
 8006c68:	40011000 	.word	0x40011000
 8006c6c:	20000290 	.word	0x20000290

08006c70 <ADCREF>:

void ADCREF(float v) // 0 <= v <= 2.5
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 8006c78:	4a26      	ldr	r2, [pc, #152]	@ (8006d14 <ADCREF+0xa4>)
 8006c7a:	f04f 0100 	mov.w	r1, #0
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fdf8 	bl	8007874 <trimFloat>
 8006c84:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 8006c86:	4923      	ldr	r1, [pc, #140]	@ (8006d14 <ADCREF+0xa4>)
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7fa fa0f 	bl	80010ac <__aeabi_fcmpeq>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <ADCREF+0x2c>
 8006c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c98:	81fb      	strh	r3, [r7, #14]
 8006c9a:	e018      	b.n	8006cce <ADCREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7f9 fbc3 	bl	8000428 <__aeabi_f2d>
 8006ca2:	f04f 0200 	mov.w	r2, #0
 8006ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8006d18 <ADCREF+0xa8>)
 8006ca8:	f7f9 fd40 	bl	800072c <__aeabi_ddiv>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	4b18      	ldr	r3, [pc, #96]	@ (8006d1c <ADCREF+0xac>)
 8006cba:	f7f9 fc0d 	bl	80004d8 <__aeabi_dmul>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	f7f9 fedf 	bl	8000a88 <__aeabi_d2uiz>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<1)|(1<<4); //1 shifted=channel B	1 shifted=load
 8006cce:	2312      	movs	r3, #18
 8006cd0:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8006cd2:	89fb      	ldrh	r3, [r7, #14]
 8006cd4:	099b      	lsrs	r3, r3, #6
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8006cdc:	89fb      	ldrh	r3, [r7, #14]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006cea:	480d      	ldr	r0, [pc, #52]	@ (8006d20 <ADCREF+0xb0>)
 8006cec:	f7fc f855 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8006cf0:	f107 0108 	add.w	r1, r7, #8
 8006cf4:	2364      	movs	r3, #100	@ 0x64
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	480a      	ldr	r0, [pc, #40]	@ (8006d24 <ADCREF+0xb4>)
 8006cfa:	f7fd fa5d 	bl	80041b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006d04:	4806      	ldr	r0, [pc, #24]	@ (8006d20 <ADCREF+0xb0>)
 8006d06:	f7fc f848 	bl	8002d9a <HAL_GPIO_WritePin>
}
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40200000 	.word	0x40200000
 8006d18:	40040000 	.word	0x40040000
 8006d1c:	40d00000 	.word	0x40d00000
 8006d20:	40011000 	.word	0x40011000
 8006d24:	20000290 	.word	0x20000290

08006d28 <ADCOFFS>:

void ADCOFFS(float v) // -12.5 <= v <= 12.5
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 8006d30:	4a2a      	ldr	r2, [pc, #168]	@ (8006ddc <ADCOFFS+0xb4>)
 8006d32:	492b      	ldr	r1, [pc, #172]	@ (8006de0 <ADCOFFS+0xb8>)
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fd9d 	bl	8007874 <trimFloat>
 8006d3a:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 8006d3c:	4927      	ldr	r1, [pc, #156]	@ (8006ddc <ADCOFFS+0xb4>)
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fa f9b4 	bl	80010ac <__aeabi_fcmpeq>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <ADCOFFS+0x2a>
 8006d4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d4e:	81fb      	strh	r3, [r7, #14]
 8006d50:	e021      	b.n	8006d96 <ADCOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7f9 fb68 	bl	8000428 <__aeabi_f2d>
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	4b21      	ldr	r3, [pc, #132]	@ (8006de4 <ADCOFFS+0xbc>)
 8006d5e:	f7f9 fa05 	bl	800016c <__adddf3>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006de8 <ADCOFFS+0xc0>)
 8006d70:	f7f9 fcdc 	bl	800072c <__aeabi_ddiv>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	4b1a      	ldr	r3, [pc, #104]	@ (8006dec <ADCOFFS+0xc4>)
 8006d82:	f7f9 fba9 	bl	80004d8 <__aeabi_dmul>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f7f9 fe7b 	bl	8000a88 <__aeabi_d2uiz>
 8006d92:	4603      	mov	r3, r0
 8006d94:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<4); //none shifted=channel A	1 shifted=load
 8006d96:	2310      	movs	r3, #16
 8006d98:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8006d9a:	89fb      	ldrh	r3, [r7, #14]
 8006d9c:	099b      	lsrs	r3, r3, #6
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8006da4:	89fb      	ldrh	r3, [r7, #14]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8006dac:	2200      	movs	r2, #0
 8006dae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006db2:	480f      	ldr	r0, [pc, #60]	@ (8006df0 <ADCOFFS+0xc8>)
 8006db4:	f7fb fff1 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8006db8:	f107 0108 	add.w	r1, r7, #8
 8006dbc:	2364      	movs	r3, #100	@ 0x64
 8006dbe:	2203      	movs	r2, #3
 8006dc0:	480c      	ldr	r0, [pc, #48]	@ (8006df4 <ADCOFFS+0xcc>)
 8006dc2:	f7fd f9f9 	bl	80041b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006dcc:	4808      	ldr	r0, [pc, #32]	@ (8006df0 <ADCOFFS+0xc8>)
 8006dce:	f7fb ffe4 	bl	8002d9a <HAL_GPIO_WritePin>
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	41480000 	.word	0x41480000
 8006de0:	c1480000 	.word	0xc1480000
 8006de4:	40290000 	.word	0x40290000
 8006de8:	40390000 	.word	0x40390000
 8006dec:	40d00000 	.word	0x40d00000
 8006df0:	40011000 	.word	0x40011000
 8006df4:	20000290 	.word	0x20000290

08006df8 <RS485_Transmit>:

char TXbuff[RS485BUFFSIZE] = {0};
char RXbuff[RS485BUFFSIZE] = {0};

void RS485_Transmit(char *message)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
	//strcat(message, "\r\n");

	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);	// Enable Driver
 8006e00:	2201      	movs	r2, #1
 8006e02:	2120      	movs	r1, #32
 8006e04:	480a      	ldr	r0, [pc, #40]	@ (8006e30 <RS485_Transmit+0x38>)
 8006e06:	f7fb ffc8 	bl	8002d9a <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, message, strlen(message), 100);	// Transmit
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7f9 f9a0 	bl	8000150 <strlen>
 8006e10:	4603      	mov	r3, r0
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	2364      	movs	r3, #100	@ 0x64
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	4806      	ldr	r0, [pc, #24]	@ (8006e34 <RS485_Transmit+0x3c>)
 8006e1a:	f7fe facb 	bl	80053b4 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);	// Disable Driver
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2120      	movs	r1, #32
 8006e22:	4803      	ldr	r0, [pc, #12]	@ (8006e30 <RS485_Transmit+0x38>)
 8006e24:	f7fb ffb9 	bl	8002d9a <HAL_GPIO_WritePin>
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	40010c00 	.word	0x40010c00
 8006e34:	20000330 	.word	0x20000330

08006e38 <SCPIC_DVM_RAW>:
 */

#include "SCPI_Commands.h"

void SCPIC_DVM_RAW(struct subword** subwords, int length)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d11c      	bne.n	8006e82 <SCPIC_DVM_RAW+0x4a>
		if(subwords[0]->type != params) return;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d119      	bne.n	8006e86 <SCPIC_DVM_RAW+0x4e>
		Subword* subword = subwords[0];
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]

		if(subword->type == params && subword->paramType == EVAL_P)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d113      	bne.n	8006e88 <SCPIC_DVM_RAW+0x50>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	7a1b      	ldrb	r3, [r3, #8]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d10f      	bne.n	8006e88 <SCPIC_DVM_RAW+0x50>
		{
			int16_t DVM = DVM_GET_FILTERED_DATA_RAW(100);
 8006e68:	2064      	movs	r0, #100	@ 0x64
 8006e6a:	f7ff fb9f 	bl	80065ac <DVM_GET_FILTERED_DATA_RAW>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	817b      	strh	r3, [r7, #10]
			sprintf(TXbuff, "%d\r\n", DVM);
 8006e72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006e76:	461a      	mov	r2, r3
 8006e78:	4905      	ldr	r1, [pc, #20]	@ (8006e90 <SCPIC_DVM_RAW+0x58>)
 8006e7a:	4806      	ldr	r0, [pc, #24]	@ (8006e94 <SCPIC_DVM_RAW+0x5c>)
 8006e7c:	f001 fbce 	bl	800861c <siprintf>
 8006e80:	e002      	b.n	8006e88 <SCPIC_DVM_RAW+0x50>
	if(length != 1) return;
 8006e82:	bf00      	nop
 8006e84:	e000      	b.n	8006e88 <SCPIC_DVM_RAW+0x50>
		if(subwords[0]->type != params) return;
 8006e86:	bf00      	nop
		}
}
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	0800b374 	.word	0x0800b374
 8006e94:	200003e8 	.word	0x200003e8

08006e98 <SCPIC_DVM_VAL>:

void SCPIC_DVM_VAL(struct subword** subwords, int length)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d12d      	bne.n	8006f04 <SCPIC_DVM_VAL+0x6c>
		if(subwords[0]->type != params) return;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d12a      	bne.n	8006f08 <SCPIC_DVM_VAL+0x70>
		Subword* subword = subwords[0];
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	613b      	str	r3, [r7, #16]

		if(subword->type == params && subword->paramType == EVAL_P)
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d124      	bne.n	8006f0a <SCPIC_DVM_VAL+0x72>
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	7a1b      	ldrb	r3, [r3, #8]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d120      	bne.n	8006f0a <SCPIC_DVM_VAL+0x72>
		{
			char unit = 'V';
 8006ec8:	2356      	movs	r3, #86	@ 0x56
 8006eca:	75fb      	strb	r3, [r7, #23]
			float DVM = HFADC_CONVERT_RAW2VALUE(&HFADC1, DVM_GET_FILTERED_DATA_RAW(100));
 8006ecc:	2064      	movs	r0, #100	@ 0x64
 8006ece:	f7ff fb6d 	bl	80065ac <DVM_GET_FILTERED_DATA_RAW>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	480d      	ldr	r0, [pc, #52]	@ (8006f10 <SCPIC_DVM_VAL+0x78>)
 8006eda:	f7ff fba1 	bl	8006620 <HFADC_CONVERT_RAW2VALUE>
 8006ede:	60f8      	str	r0, [r7, #12]
			if(HFADC1.mode == Current_input) unit = 'A';
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f10 <SCPIC_DVM_VAL+0x78>)
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <SCPIC_DVM_VAL+0x54>
 8006ee8:	2341      	movs	r3, #65	@ 0x41
 8006eea:	75fb      	strb	r3, [r7, #23]
			sprintf(TXbuff, "%f%c\r\n", DVM, unit);
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7f9 fa9b 	bl	8000428 <__aeabi_f2d>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	7df9      	ldrb	r1, [r7, #23]
 8006ef8:	9100      	str	r1, [sp, #0]
 8006efa:	4906      	ldr	r1, [pc, #24]	@ (8006f14 <SCPIC_DVM_VAL+0x7c>)
 8006efc:	4806      	ldr	r0, [pc, #24]	@ (8006f18 <SCPIC_DVM_VAL+0x80>)
 8006efe:	f001 fb8d 	bl	800861c <siprintf>
 8006f02:	e002      	b.n	8006f0a <SCPIC_DVM_VAL+0x72>
	if(length != 1) return;
 8006f04:	bf00      	nop
 8006f06:	e000      	b.n	8006f0a <SCPIC_DVM_VAL+0x72>
		if(subwords[0]->type != params) return;
 8006f08:	bf00      	nop
		}
}
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	200003b8 	.word	0x200003b8
 8006f14:	0800b37c 	.word	0x0800b37c
 8006f18:	200003e8 	.word	0x200003e8

08006f1c <SCPIC_INIT>:

void SCPIC_INIT(struct subword** subwords, int length)
{
 8006f1c:	b5b0      	push	{r4, r5, r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d139      	bne.n	8006fa0 <SCPIC_INIT+0x84>
		if(subwords[0]->type != params) return;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d136      	bne.n	8006fa4 <SCPIC_INIT+0x88>
		Subword* subword = subwords[0];
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]

		if(subword->type == params && subword->paramType == EVAL_P)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d130      	bne.n	8006fa6 <SCPIC_INIT+0x8a>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	7a1b      	ldrb	r3, [r3, #8]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d12c      	bne.n	8006fa6 <SCPIC_INIT+0x8a>
		{

			LOLA_Init(&LOLA1);
 8006f4c:	4817      	ldr	r0, [pc, #92]	@ (8006fac <SCPIC_INIT+0x90>)
 8006f4e:	f7ff fcad 	bl	80068ac <LOLA_Init>
			LOLA_enable_features(ALL_EN, 0); // disable all features
 8006f52:	2100      	movs	r1, #0
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295
 8006f58:	f7ff fd26 	bl	80069a8 <LOLA_enable_features>

			switch(LOLA1.Status)
 8006f5c:	4b13      	ldr	r3, [pc, #76]	@ (8006fac <SCPIC_INIT+0x90>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d002      	beq.n	8006f6a <SCPIC_INIT+0x4e>
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d00c      	beq.n	8006f82 <SCPIC_INIT+0x66>
 8006f68:	e012      	b.n	8006f90 <SCPIC_INIT+0x74>
			{
				case INVALID_FIRMWARE: strcpy(TXbuff, "INVALID FIRMWARE"); break;
 8006f6a:	4a11      	ldr	r2, [pc, #68]	@ (8006fb0 <SCPIC_INIT+0x94>)
 8006f6c:	4b11      	ldr	r3, [pc, #68]	@ (8006fb4 <SCPIC_INIT+0x98>)
 8006f6e:	4615      	mov	r5, r2
 8006f70:	461c      	mov	r4, r3
 8006f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f74:	6028      	str	r0, [r5, #0]
 8006f76:	6069      	str	r1, [r5, #4]
 8006f78:	60aa      	str	r2, [r5, #8]
 8006f7a:	60eb      	str	r3, [r5, #12]
 8006f7c:	7823      	ldrb	r3, [r4, #0]
 8006f7e:	742b      	strb	r3, [r5, #16]
 8006f80:	e011      	b.n	8006fa6 <SCPIC_INIT+0x8a>
				case FIRMWARE_OK: strcpy(TXbuff, "OK"); break;
 8006f82:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb0 <SCPIC_INIT+0x94>)
 8006f84:	4a0c      	ldr	r2, [pc, #48]	@ (8006fb8 <SCPIC_INIT+0x9c>)
 8006f86:	8811      	ldrh	r1, [r2, #0]
 8006f88:	7892      	ldrb	r2, [r2, #2]
 8006f8a:	8019      	strh	r1, [r3, #0]
 8006f8c:	709a      	strb	r2, [r3, #2]
 8006f8e:	e00a      	b.n	8006fa6 <SCPIC_INIT+0x8a>
				default: strcpy(TXbuff, "NO FIRMWARE"); break;
 8006f90:	4a07      	ldr	r2, [pc, #28]	@ (8006fb0 <SCPIC_INIT+0x94>)
 8006f92:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <SCPIC_INIT+0xa0>)
 8006f94:	4614      	mov	r4, r2
 8006f96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f98:	6020      	str	r0, [r4, #0]
 8006f9a:	6061      	str	r1, [r4, #4]
 8006f9c:	60a2      	str	r2, [r4, #8]
 8006f9e:	e002      	b.n	8006fa6 <SCPIC_INIT+0x8a>
	if(length != 1) return;
 8006fa0:	bf00      	nop
 8006fa2:	e000      	b.n	8006fa6 <SCPIC_INIT+0x8a>
		if(subwords[0]->type != params) return;
 8006fa4:	bf00      	nop
			}
		}
}
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bdb0      	pop	{r4, r5, r7, pc}
 8006fac:	200003b0 	.word	0x200003b0
 8006fb0:	200003e8 	.word	0x200003e8
 8006fb4:	0800b384 	.word	0x0800b384
 8006fb8:	0800b398 	.word	0x0800b398
 8006fbc:	0800b39c 	.word	0x0800b39c

08006fc0 <SCPIC_CFS>:

void SCPIC_CFS(struct subword** subwords, int length)
{
 8006fc0:	b4b0      	push	{r4, r5, r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d131      	bne.n	8007034 <SCPIC_CFS+0x74>
	if(subwords[0]->type != params) return;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d12e      	bne.n	8007038 <SCPIC_CFS+0x78>
	Subword* subword = subwords[0];
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	60fb      	str	r3, [r7, #12]

	if(subword->type == params && subword->paramType == EVAL_P)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d128      	bne.n	800703a <SCPIC_CFS+0x7a>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	7a1b      	ldrb	r3, [r3, #8]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d124      	bne.n	800703a <SCPIC_CFS+0x7a>
	{
		switch((uint8_t)LOLA1.Status)
 8006ff0:	4b14      	ldr	r3, [pc, #80]	@ (8007044 <SCPIC_CFS+0x84>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d002      	beq.n	8006ffe <SCPIC_CFS+0x3e>
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d00c      	beq.n	8007016 <SCPIC_CFS+0x56>
 8006ffc:	e012      	b.n	8007024 <SCPIC_CFS+0x64>
		{
			case INVALID_FIRMWARE: strcpy(TXbuff, "INVALID FIRMWARE"); break;
 8006ffe:	4a12      	ldr	r2, [pc, #72]	@ (8007048 <SCPIC_CFS+0x88>)
 8007000:	4b12      	ldr	r3, [pc, #72]	@ (800704c <SCPIC_CFS+0x8c>)
 8007002:	4615      	mov	r5, r2
 8007004:	461c      	mov	r4, r3
 8007006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007008:	6028      	str	r0, [r5, #0]
 800700a:	6069      	str	r1, [r5, #4]
 800700c:	60aa      	str	r2, [r5, #8]
 800700e:	60eb      	str	r3, [r5, #12]
 8007010:	7823      	ldrb	r3, [r4, #0]
 8007012:	742b      	strb	r3, [r5, #16]
 8007014:	e011      	b.n	800703a <SCPIC_CFS+0x7a>
			case FIRMWARE_OK: strcpy(TXbuff, "OK"); break;
 8007016:	4b0c      	ldr	r3, [pc, #48]	@ (8007048 <SCPIC_CFS+0x88>)
 8007018:	4a0d      	ldr	r2, [pc, #52]	@ (8007050 <SCPIC_CFS+0x90>)
 800701a:	8811      	ldrh	r1, [r2, #0]
 800701c:	7892      	ldrb	r2, [r2, #2]
 800701e:	8019      	strh	r1, [r3, #0]
 8007020:	709a      	strb	r2, [r3, #2]
 8007022:	e00a      	b.n	800703a <SCPIC_CFS+0x7a>
			default: strcpy(TXbuff, "NO FIRMWARE"); break;
 8007024:	4a08      	ldr	r2, [pc, #32]	@ (8007048 <SCPIC_CFS+0x88>)
 8007026:	4b0b      	ldr	r3, [pc, #44]	@ (8007054 <SCPIC_CFS+0x94>)
 8007028:	4614      	mov	r4, r2
 800702a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800702c:	6020      	str	r0, [r4, #0]
 800702e:	6061      	str	r1, [r4, #4]
 8007030:	60a2      	str	r2, [r4, #8]
 8007032:	e002      	b.n	800703a <SCPIC_CFS+0x7a>
	if(length != 1) return;
 8007034:	bf00      	nop
 8007036:	e000      	b.n	800703a <SCPIC_CFS+0x7a>
	if(subwords[0]->type != params) return;
 8007038:	bf00      	nop
		}
	}
}
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	bcb0      	pop	{r4, r5, r7}
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	200003b0 	.word	0x200003b0
 8007048:	200003e8 	.word	0x200003e8
 800704c:	0800b384 	.word	0x0800b384
 8007050:	0800b398 	.word	0x0800b398
 8007054:	0800b39c 	.word	0x0800b39c

08007058 <SCPIC_FID>:

void SCPIC_FID(struct subword** subwords, int length)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d120      	bne.n	80070aa <SCPIC_FID+0x52>
	if(subwords[0]->type != params) return;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d11d      	bne.n	80070ae <SCPIC_FID+0x56>
	Subword* subword = subwords[0];
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]
	strcpy(TXbuff,"OK\r\n");
 8007078:	4b0f      	ldr	r3, [pc, #60]	@ (80070b8 <SCPIC_FID+0x60>)
 800707a:	4a10      	ldr	r2, [pc, #64]	@ (80070bc <SCPIC_FID+0x64>)
 800707c:	6810      	ldr	r0, [r2, #0]
 800707e:	6018      	str	r0, [r3, #0]
 8007080:	7912      	ldrb	r2, [r2, #4]
 8007082:	711a      	strb	r2, [r3, #4]

	if(subword->type == params && subword->paramType == EVAL_P)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d111      	bne.n	80070b0 <SCPIC_FID+0x58>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	7a1b      	ldrb	r3, [r3, #8]
 8007090:	2b02      	cmp	r3, #2
 8007092:	d10d      	bne.n	80070b0 <SCPIC_FID+0x58>
	{
		uint16_t id = LOLA_GET_FIRMWAREID();
 8007094:	f7ff fce6 	bl	8006a64 <LOLA_GET_FIRMWAREID>
 8007098:	4603      	mov	r3, r0
 800709a:	817b      	strh	r3, [r7, #10]
		sprintf(TXbuff, "%x\r\n", id);
 800709c:	897b      	ldrh	r3, [r7, #10]
 800709e:	461a      	mov	r2, r3
 80070a0:	4907      	ldr	r1, [pc, #28]	@ (80070c0 <SCPIC_FID+0x68>)
 80070a2:	4805      	ldr	r0, [pc, #20]	@ (80070b8 <SCPIC_FID+0x60>)
 80070a4:	f001 faba 	bl	800861c <siprintf>
 80070a8:	e002      	b.n	80070b0 <SCPIC_FID+0x58>
	if(length != 1) return;
 80070aa:	bf00      	nop
 80070ac:	e000      	b.n	80070b0 <SCPIC_FID+0x58>
	if(subwords[0]->type != params) return;
 80070ae:	bf00      	nop

		default:

			break;
	}*/
}
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	200003e8 	.word	0x200003e8
 80070bc:	0800b3a8 	.word	0x0800b3a8
 80070c0:	0800b3b0 	.word	0x0800b3b0

080070c4 <SCPI_EXECUTE>:

#include "SCPI_Lib.h"
#include "RS485.h"

void SCPI_EXECUTE()
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
	char* formatedMessage = ReformatString(RXbuff, RS485BUFFSIZE); //tady je změna
 80070ca:	217d      	movs	r1, #125	@ 0x7d
 80070cc:	482e      	ldr	r0, [pc, #184]	@ (8007188 <SCPI_EXECUTE+0xc4>)
 80070ce:	f000 f861 	bl	8007194 <ReformatString>
 80070d2:	60b8      	str	r0, [r7, #8]

		strcpy(TXbuff, "ERR\r\n");
 80070d4:	4b2d      	ldr	r3, [pc, #180]	@ (800718c <SCPI_EXECUTE+0xc8>)
 80070d6:	4a2e      	ldr	r2, [pc, #184]	@ (8007190 <SCPI_EXECUTE+0xcc>)
 80070d8:	6810      	ldr	r0, [r2, #0]
 80070da:	6018      	str	r0, [r3, #0]
 80070dc:	8892      	ldrh	r2, [r2, #4]
 80070de:	809a      	strh	r2, [r3, #4]

		Word* word = generateWordDirect(formatedMessage);
 80070e0:	68b8      	ldr	r0, [r7, #8]
 80070e2:	f000 f949 	bl	8007378 <generateWordDirect>
 80070e6:	6078      	str	r0, [r7, #4]

		free(formatedMessage);
 80070e8:	68b8      	ldr	r0, [r7, #8]
 80070ea:	f000 fc09 	bl	8007900 <free>

		//if(word->address == RackID || word->address == 1)
		if (word != NULL) {
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d045      	beq.n	8007180 <SCPI_EXECUTE+0xbc>
			executeWord(word);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa21 	bl	800753c <executeWord>

			for (int i = word->subwordsCount - 1; i >= 0; i--)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	3b01      	subs	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	e02f      	b.n	8007164 <SCPI_EXECUTE+0xa0>
			{
				if (word->subwords[i]->paramType == OTHER_P && word->subwords[i]->otherParam != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	7a1b      	ldrb	r3, [r3, #8]
 8007112:	2b04      	cmp	r3, #4
 8007114:	d11a      	bne.n	800714c <SCPI_EXECUTE+0x88>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d011      	beq.n	800714c <SCPI_EXECUTE+0x88>
				{
					free(word->subwords[i]->otherParam);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fbe2 	bl	8007900 <free>
					word->subwords[i]->otherParam = NULL;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2200      	movs	r2, #0
 800714a:	611a      	str	r2, [r3, #16]
				}
				free(word->subwords[i]);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fbd1 	bl	8007900 <free>
			for (int i = word->subwordsCount - 1; i >= 0; i--)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3b01      	subs	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	dacc      	bge.n	8007104 <SCPI_EXECUTE+0x40>
			}
			free(word->subwords);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fbc6 	bl	8007900 <free>
			word->subwords = NULL;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	609a      	str	r2, [r3, #8]
			free(word);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fbc0 	bl	8007900 <free>
		}
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20000468 	.word	0x20000468
 800718c:	200003e8 	.word	0x200003e8
 8007190:	0800b3b8 	.word	0x0800b3b8

08007194 <ReformatString>:
//int defaultClassIndex;
int classLength = 0;
int defaultClassIndex = -1;

char* ReformatString(char* chararr, int arrMaxSize)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
	char* temp = (char*)calloc(strlen(chararr) + 1, sizeof(char));
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7f8 ffd6 	bl	8000150 <strlen>
 80071a4:	4603      	mov	r3, r0
 80071a6:	3301      	adds	r3, #1
 80071a8:	2101      	movs	r1, #1
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fb84 	bl	80078b8 <calloc>
 80071b0:	4603      	mov	r3, r0
 80071b2:	60bb      	str	r3, [r7, #8]
	strcpy(temp, chararr);
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	68b8      	ldr	r0, [r7, #8]
 80071b8:	f001 fb47 	bl	800884a <strcpy>
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e015      	b.n	80071ee <ReformatString+0x5a>
	{
		if (chararr[i] == '\r' || chararr[i] == '\n')
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	4413      	add	r3, r2
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b0d      	cmp	r3, #13
 80071cc:	d005      	beq.n	80071da <ReformatString+0x46>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	4413      	add	r3, r2
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b0a      	cmp	r3, #10
 80071d8:	d106      	bne.n	80071e8 <ReformatString+0x54>
		{
			temp[i] = '\0';
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	4413      	add	r3, r2
 80071e0:	2200      	movs	r2, #0
 80071e2:	701a      	strb	r2, [r3, #0]
			return temp;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	e00d      	b.n	8007204 <ReformatString+0x70>
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	da05      	bge.n	8007202 <ReformatString+0x6e>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	4413      	add	r3, r2
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1df      	bne.n	80071c2 <ReformatString+0x2e>
		}
	}
	return temp;
 8007202:	68bb      	ldr	r3, [r7, #8]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <generateSubwordn>:

Subword* generateSubwordn(char* subcommand, int length, Class* class)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
	Subword* final = (Subword*)malloc(sizeof(Subword));
 8007218:	2014      	movs	r0, #20
 800721a:	f000 fb69 	bl	80078f0 <malloc>
 800721e:	4603      	mov	r3, r0
 8007220:	617b      	str	r3, [r7, #20]
	final->type = params;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2201      	movs	r2, #1
 8007226:	701a      	strb	r2, [r3, #0]
	final->integerParam = 0;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2200      	movs	r2, #0
 800722c:	60da      	str	r2, [r3, #12]
	final->otherParam = NULL;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2200      	movs	r2, #0
 8007232:	611a      	str	r2, [r3, #16]
	final->paramType = 0;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2200      	movs	r2, #0
 8007238:	721a      	strb	r2, [r3, #8]

	for (int i = 0; i < class->functionsLength; i++)
 800723a:	2300      	movs	r3, #0
 800723c:	61fb      	str	r3, [r7, #28]
 800723e:	e018      	b.n	8007272 <generateSubwordn+0x66>
	{
		if (!strncmp(subcommand, class->functions[i].name, length))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	4413      	add	r3, r2
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	4619      	mov	r1, r3
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f001 fa4e 	bl	80086f2 <strncmp>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d107      	bne.n	800726c <generateSubwordn+0x60>
		{
			final->type = function;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
			final->functionIndex = i;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	605a      	str	r2, [r3, #4]
			return final;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	e04c      	b.n	8007306 <generateSubwordn+0xfa>
	for (int i = 0; i < class->functionsLength; i++)
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	3301      	adds	r3, #1
 8007270:	61fb      	str	r3, [r7, #28]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	429a      	cmp	r2, r3
 800727a:	dbe1      	blt.n	8007240 <generateSubwordn+0x34>
		}
	}

	for (int i = 0; i < paramsLength; i++)
 800727c:	2300      	movs	r3, #0
 800727e:	61bb      	str	r3, [r7, #24]
 8007280:	e014      	b.n	80072ac <generateSubwordn+0xa0>
	{
		if (!strncmp(subcommand, paramsList[i], length))
 8007282:	4a23      	ldr	r2, [pc, #140]	@ (8007310 <generateSubwordn+0x104>)
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	4619      	mov	r1, r3
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f001 fa2f 	bl	80086f2 <strncmp>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d105      	bne.n	80072a6 <generateSubwordn+0x9a>
		{
			final->paramType = (ParamTypes)i;
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	b2da      	uxtb	r2, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	721a      	strb	r2, [r3, #8]
			return final;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	e02f      	b.n	8007306 <generateSubwordn+0xfa>
	for (int i = 0; i < paramsLength; i++)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	3301      	adds	r3, #1
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	4b19      	ldr	r3, [pc, #100]	@ (8007314 <generateSubwordn+0x108>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	dbe5      	blt.n	8007282 <generateSubwordn+0x76>
		}
	}

	int n;
	if ((n = atoi(subcommand)))
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 fafa 	bl	80078b0 <atoi>
 80072bc:	6138      	str	r0, [r7, #16]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d007      	beq.n	80072d4 <generateSubwordn+0xc8>
	{
		final->paramType = INT_P;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2203      	movs	r2, #3
 80072c8:	721a      	strb	r2, [r3, #8]
		final->integerParam = n;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	60da      	str	r2, [r3, #12]
		return final;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	e018      	b.n	8007306 <generateSubwordn+0xfa>
	}

	final->paramType = OTHER_P;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2204      	movs	r2, #4
 80072d8:	721a      	strb	r2, [r3, #8]
	final->otherParam = (char*)calloc(length + 1, sizeof(char));
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	3301      	adds	r3, #1
 80072de:	2101      	movs	r1, #1
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fae9 	bl	80078b8 <calloc>
 80072e6:	4603      	mov	r3, r0
 80072e8:	461a      	mov	r2, r3
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	611a      	str	r2, [r3, #16]
	if (final->otherParam != NULL) strncpy(final->otherParam, subcommand, length);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d006      	beq.n	8007304 <generateSubwordn+0xf8>
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	68f9      	ldr	r1, [r7, #12]
 80072fe:	4618      	mov	r0, r3
 8007300:	f001 fa09 	bl	8008716 <strncpy>
	return final;
 8007304:	697b      	ldr	r3, [r7, #20]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3720      	adds	r7, #32
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	2000000c 	.word	0x2000000c
 8007314:	20000018 	.word	0x20000018

08007318 <findClassIndex>:

int findClassIndex(char* subcommand, int length)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < classLength; i++)
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	e015      	b.n	8007354 <findClassIndex+0x3c>
	{
		if (!strncmp(subcommand, classList[i].name, length))
 8007328:	4b10      	ldr	r3, [pc, #64]	@ (800736c <findClassIndex+0x54>)
 800732a:	6819      	ldr	r1, [r3, #0]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4613      	mov	r3, r2
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 f9d7 	bl	80086f2 <strncmp>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <findClassIndex+0x36>
		{
			return i;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	e009      	b.n	8007362 <findClassIndex+0x4a>
	for (int i = 0; i < classLength; i++)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3301      	adds	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	4b06      	ldr	r3, [pc, #24]	@ (8007370 <findClassIndex+0x58>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	429a      	cmp	r2, r3
 800735c:	dbe4      	blt.n	8007328 <findClassIndex+0x10>
		}
	}

	return defaultClassIndex;
 800735e:	4b05      	ldr	r3, [pc, #20]	@ (8007374 <findClassIndex+0x5c>)
 8007360:	681b      	ldr	r3, [r3, #0]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	200004e8 	.word	0x200004e8
 8007370:	200004ec 	.word	0x200004ec
 8007374:	2000001c 	.word	0x2000001c

08007378 <generateWordDirect>:

Word* generateWordDirect(char* command)
{
 8007378:	b590      	push	{r4, r7, lr}
 800737a:	b08d      	sub	sp, #52	@ 0x34
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
	Word* final = (Word*)malloc(sizeof(Word));
 8007380:	2010      	movs	r0, #16
 8007382:	f000 fab5 	bl	80078f0 <malloc>
 8007386:	4603      	mov	r3, r0
 8007388:	61bb      	str	r3, [r7, #24]
	final->address = -1;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	f04f 32ff 	mov.w	r2, #4294967295
 8007390:	601a      	str	r2, [r3, #0]
	final->subwords = NULL;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2200      	movs	r2, #0
 8007396:	609a      	str	r2, [r3, #8]
	final->subwordsCount = 0;
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2200      	movs	r2, #0
 800739c:	60da      	str	r2, [r3, #12]

	char* currSymbol = command;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int intermediateLength = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	Class* currentClass = classList;
 80073a6:	4b62      	ldr	r3, [pc, #392]	@ (8007530 <generateWordDirect+0x1b8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
	int currentClassIndex = defaultClassIndex;
 80073ac:	4b61      	ldr	r3, [pc, #388]	@ (8007534 <generateWordDirect+0x1bc>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	617b      	str	r3, [r7, #20]

	int isLast = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	623b      	str	r3, [r7, #32]
	int firstSubWord = 1;
 80073b6:	2301      	movs	r3, #1
 80073b8:	61fb      	str	r3, [r7, #28]

	while (!isLast)
 80073ba:	e0af      	b.n	800751c <generateWordDirect+0x1a4>
	{
		isLast = *currSymbol == '\0';
 80073bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	bf0c      	ite	eq
 80073c4:	2301      	moveq	r3, #1
 80073c6:	2300      	movne	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	623b      	str	r3, [r7, #32]
		switch (*currSymbol)
 80073cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80073d2:	d005      	beq.n	80073e0 <generateWordDirect+0x68>
 80073d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80073d6:	dc65      	bgt.n	80074a4 <generateWordDirect+0x12c>
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <generateWordDirect+0x68>
 80073dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80073de:	d161      	bne.n	80074a4 <generateWordDirect+0x12c>
		{
		case ':':
		case '\0':
		case '?':

			if (intermediateLength == 0) break;
 80073e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d062      	beq.n	80074ac <generateWordDirect+0x134>
			if (final->address == -1)
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d10a      	bne.n	8007406 <generateWordDirect+0x8e>
			{
				final->address = atoi(currSymbol - intermediateLength);
 80073f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f2:	425b      	negs	r3, r3
 80073f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073f6:	4413      	add	r3, r2
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 fa59 	bl	80078b0 <atoi>
 80073fe:	4602      	mov	r2, r0
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	e04b      	b.n	800749e <generateWordDirect+0x126>
			}

			else
			{
				if (firstSubWord)
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d020      	beq.n	800744e <generateWordDirect+0xd6>
				{
					int index = findClassIndex(currSymbol - intermediateLength, intermediateLength);
 800740c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740e:	425b      	negs	r3, r3
 8007410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007412:	4413      	add	r3, r2
 8007414:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff ff7e 	bl	8007318 <findClassIndex>
 800741c:	6138      	str	r0, [r7, #16]
					currentClass = &classList[index];
 800741e:	4b44      	ldr	r3, [pc, #272]	@ (8007530 <generateWordDirect+0x1b8>)
 8007420:	6819      	ldr	r1, [r3, #0]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4613      	mov	r3, r2
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	440b      	add	r3, r1
 800742e:	627b      	str	r3, [r7, #36]	@ 0x24
					final->classIndex = index;
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	605a      	str	r2, [r3, #4]
					currentClassIndex = index;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	617b      	str	r3, [r7, #20]
					firstSubWord = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	61fb      	str	r3, [r7, #28]
					if (currentClassIndex != defaultClassIndex)
 800743e:	4b3d      	ldr	r3, [pc, #244]	@ (8007534 <generateWordDirect+0x1bc>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	429a      	cmp	r2, r3
 8007446:	d002      	beq.n	800744e <generateWordDirect+0xd6>
					{
						intermediateLength = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	62bb      	str	r3, [r7, #40]	@ 0x28
						break;
 800744c:	e02f      	b.n	80074ae <generateWordDirect+0x136>
					}
				}

				final->subwordsCount++;
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	60da      	str	r2, [r3, #12]
				Subword** intermediate = (Subword*)realloc(final->subwords, final->subwordsCount * sizeof(Subword*));
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4619      	mov	r1, r3
 8007464:	4610      	mov	r0, r2
 8007466:	f000 fb01 	bl	8007a6c <realloc>
 800746a:	60f8      	str	r0, [r7, #12]
				if (intermediate != NULL)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d015      	beq.n	800749e <generateWordDirect+0x126>
				{
					final->subwords = intermediate;																				///??????
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	609a      	str	r2, [r3, #8]
					final->subwords[final->subwordsCount - 1] = generateSubwordn(currSymbol - intermediateLength, intermediateLength, currentClass);
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	425b      	negs	r3, r3
 800747c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800747e:	18d0      	adds	r0, r2, r3
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800748c:	3b01      	subs	r3, #1
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	18d4      	adds	r4, r2, r3
 8007492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007496:	f7ff feb9 	bl	800720c <generateSubwordn>
 800749a:	4603      	mov	r3, r0
 800749c:	6023      	str	r3, [r4, #0]
				}
			}

			intermediateLength = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			break;
 80074a2:	e004      	b.n	80074ae <generateWordDirect+0x136>

		default:
			intermediateLength++;
 80074a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a6:	3301      	adds	r3, #1
 80074a8:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 80074aa:	e000      	b.n	80074ae <generateWordDirect+0x136>
			if (intermediateLength == 0) break;
 80074ac:	bf00      	nop

		}

		if (*currSymbol == '?')
 80074ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80074b4:	d128      	bne.n	8007508 <generateWordDirect+0x190>
		{
			final->subwordsCount++;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	60da      	str	r2, [r3, #12]
			Subword** intermediate = (Subword*)realloc(final->subwords, final->subwordsCount * sizeof(Subword));
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	4619      	mov	r1, r3
 80074ca:	460b      	mov	r3, r1
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4619      	mov	r1, r3
 80074d4:	4610      	mov	r0, r2
 80074d6:	f000 fac9 	bl	8007a6c <realloc>
 80074da:	60b8      	str	r0, [r7, #8]
			if (intermediate != NULL)
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d012      	beq.n	8007508 <generateWordDirect+0x190>
			{
				final->subwords = intermediate;																						///??????
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	609a      	str	r2, [r3, #8]
				final->subwords[final->subwordsCount - 1] = generateSubwordn("?", 1, currentClass);
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074f4:	3b01      	subs	r3, #1
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	18d4      	adds	r4, r2, r3
 80074fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074fc:	2101      	movs	r1, #1
 80074fe:	480e      	ldr	r0, [pc, #56]	@ (8007538 <generateWordDirect+0x1c0>)
 8007500:	f7ff fe84 	bl	800720c <generateSubwordn>
 8007504:	4603      	mov	r3, r0
 8007506:	6023      	str	r3, [r4, #0]
			}
		}

		currSymbol += !isLast;
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2b00      	cmp	r3, #0
 800750c:	bf0c      	ite	eq
 800750e:	2301      	moveq	r3, #1
 8007510:	2300      	movne	r3, #0
 8007512:	b2db      	uxtb	r3, r3
 8007514:	461a      	mov	r2, r3
 8007516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007518:	4413      	add	r3, r2
 800751a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (!isLast)
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	2b00      	cmp	r3, #0
 8007520:	f43f af4c 	beq.w	80073bc <generateWordDirect+0x44>
	}

	return final;
 8007524:	69bb      	ldr	r3, [r7, #24]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3734      	adds	r7, #52	@ 0x34
 800752a:	46bd      	mov	sp, r7
 800752c:	bd90      	pop	{r4, r7, pc}
 800752e:	bf00      	nop
 8007530:	200004e8 	.word	0x200004e8
 8007534:	2000001c 	.word	0x2000001c
 8007538:	0800b3cc 	.word	0x0800b3cc

0800753c <executeWord>:

void executeWord(Word* word)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	if (word->subwordsCount < 1) return;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	dd27      	ble.n	800759c <executeWord+0x60>
	if (word->subwords == NULL) return;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d025      	beq.n	80075a0 <executeWord+0x64>
	if (word->subwords[0]->type != function) return;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d121      	bne.n	80075a4 <executeWord+0x68>
	int classIndex = word->classIndex;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	60fb      	str	r3, [r7, #12]
	int functionIndex = word->subwords[0]->functionIndex;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	60bb      	str	r3, [r7, #8]
	classList[classIndex].functions[functionIndex].run(word->subwords + 1, word->subwordsCount - 1);
 8007570:	4b0e      	ldr	r3, [pc, #56]	@ (80075ac <executeWord+0x70>)
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4613      	mov	r3, r2
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	440b      	add	r3, r1
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	00db      	lsls	r3, r3, #3
 8007586:	4413      	add	r3, r2
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	6892      	ldr	r2, [r2, #8]
 800758e:	1d10      	adds	r0, r2, #4
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	68d2      	ldr	r2, [r2, #12]
 8007594:	3a01      	subs	r2, #1
 8007596:	4611      	mov	r1, r2
 8007598:	4798      	blx	r3
 800759a:	e004      	b.n	80075a6 <executeWord+0x6a>
	if (word->subwordsCount < 1) return;
 800759c:	bf00      	nop
 800759e:	e002      	b.n	80075a6 <executeWord+0x6a>
	if (word->subwords == NULL) return;
 80075a0:	bf00      	nop
 80075a2:	e000      	b.n	80075a6 <executeWord+0x6a>
	if (word->subwords[0]->type != function) return;
 80075a4:	bf00      	nop
}
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	200004e8 	.word	0x200004e8

080075b0 <addClass>:
	if (isDefault) defaultClassIndex = classLength;
	classLength++;
}

void addClass(Class* class, int isDefault)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
	classList = (Class*)realloc(classList, (classLength + 1) * sizeof(Class));
 80075ba:	4b17      	ldr	r3, [pc, #92]	@ (8007618 <addClass+0x68>)
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	4b17      	ldr	r3, [pc, #92]	@ (800761c <addClass+0x6c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	4619      	mov	r1, r3
 80075c6:	460b      	mov	r3, r1
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	440b      	add	r3, r1
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f000 fa4b 	bl	8007a6c <realloc>
 80075d6:	4603      	mov	r3, r0
 80075d8:	4a0f      	ldr	r2, [pc, #60]	@ (8007618 <addClass+0x68>)
 80075da:	6013      	str	r3, [r2, #0]
	classList[classLength] = *class;
 80075dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007618 <addClass+0x68>)
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	4b0e      	ldr	r3, [pc, #56]	@ (800761c <addClass+0x6c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4619      	mov	r1, r3
 80075e6:	460b      	mov	r3, r1
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	440b      	add	r3, r1
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80075f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (isDefault) defaultClassIndex = classLength;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <addClass+0x56>
 80075fe:	4b07      	ldr	r3, [pc, #28]	@ (800761c <addClass+0x6c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a07      	ldr	r2, [pc, #28]	@ (8007620 <addClass+0x70>)
 8007604:	6013      	str	r3, [r2, #0]
	classLength++;
 8007606:	4b05      	ldr	r3, [pc, #20]	@ (800761c <addClass+0x6c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3301      	adds	r3, #1
 800760c:	4a03      	ldr	r2, [pc, #12]	@ (800761c <addClass+0x6c>)
 800760e:	6013      	str	r3, [r2, #0]
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	200004e8 	.word	0x200004e8
 800761c:	200004ec 	.word	0x200004ec
 8007620:	2000001c 	.word	0x2000001c

08007624 <writeToRegister>:
uint8_t is_initialised = 0;

I2C_HandleTypeDef I2CHandle;

void writeToRegister(uint16_t device_address, uint16_t memory_address, uint8_t *data)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af04      	add	r7, sp, #16
 800762a:	4603      	mov	r3, r0
 800762c:	603a      	str	r2, [r7, #0]
 800762e:	80fb      	strh	r3, [r7, #6]
 8007630:	460b      	mov	r3, r1
 8007632:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&I2CHandle, (device_address<<1), memory_address, 1, data, 1, 1000);
 8007634:	88fb      	ldrh	r3, [r7, #6]
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	b299      	uxth	r1, r3
 800763a:	88ba      	ldrh	r2, [r7, #4]
 800763c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007640:	9302      	str	r3, [sp, #8]
 8007642:	2301      	movs	r3, #1
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	2301      	movs	r3, #1
 800764c:	4803      	ldr	r0, [pc, #12]	@ (800765c <writeToRegister+0x38>)
 800764e:	f7fb fd01 	bl	8003054 <HAL_I2C_Mem_Write>
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	200004f4 	.word	0x200004f4

08007660 <TCA_Init>:

void TCA_Init(uint8_t address, I2C_HandleTypeDef handle)
{
 8007660:	b084      	sub	sp, #16
 8007662:	b590      	push	{r4, r7, lr}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	4604      	mov	r4, r0
 800766a:	f107 001c 	add.w	r0, r7, #28
 800766e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8007672:	4623      	mov	r3, r4
 8007674:	71fb      	strb	r3, [r7, #7]
	TCA_address = address;
 8007676:	4a0a      	ldr	r2, [pc, #40]	@ (80076a0 <TCA_Init+0x40>)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	7013      	strb	r3, [r2, #0]
	I2CHandle = handle;
 800767c:	4b09      	ldr	r3, [pc, #36]	@ (80076a4 <TCA_Init+0x44>)
 800767e:	4618      	mov	r0, r3
 8007680:	f107 031c 	add.w	r3, r7, #28
 8007684:	2254      	movs	r2, #84	@ 0x54
 8007686:	4619      	mov	r1, r3
 8007688:	f001 f8f5 	bl	8008876 <memcpy>
	is_initialised = 1;
 800768c:	4b06      	ldr	r3, [pc, #24]	@ (80076a8 <TCA_Init+0x48>)
 800768e:	2201      	movs	r2, #1
 8007690:	701a      	strb	r2, [r3, #0]
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800769c:	b004      	add	sp, #16
 800769e:	4770      	bx	lr
 80076a0:	20000024 	.word	0x20000024
 80076a4:	200004f4 	.word	0x200004f4
 80076a8:	200004f0 	.word	0x200004f0

080076ac <TCA_PinMode>:

void TCA_PinMode(uint32_t pin, uint32_t mode)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 80076b6:	4b25      	ldr	r3, [pc, #148]	@ (800774c <TCA_PinMode+0xa0>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d03d      	beq.n	800773a <TCA_PinMode+0x8e>
	if(pin > 15) return;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b0f      	cmp	r3, #15
 80076c2:	d83c      	bhi.n	800773e <TCA_PinMode+0x92>
	if(mode != 0 && mode != 1) return;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <TCA_PinMode+0x24>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d138      	bne.n	8007742 <TCA_PinMode+0x96>

	uint8_t mask =  1 << (pin % 8);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	2201      	movs	r2, #1
 80076d8:	fa02 f303 	lsl.w	r3, r2, r3
 80076dc:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? PINMODE_REGISTER_LOW : PINMODE_REGISTER_HIGH;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b07      	cmp	r3, #7
 80076e2:	d801      	bhi.n	80076e8 <TCA_PinMode+0x3c>
 80076e4:	2306      	movs	r3, #6
 80076e6:	e000      	b.n	80076ea <TCA_PinMode+0x3e>
 80076e8:	2307      	movs	r3, #7
 80076ea:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &pinmode_register_state_low : &pinmode_register_state_high;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b07      	cmp	r3, #7
 80076f0:	d801      	bhi.n	80076f6 <TCA_PinMode+0x4a>
 80076f2:	4b17      	ldr	r3, [pc, #92]	@ (8007750 <TCA_PinMode+0xa4>)
 80076f4:	e000      	b.n	80076f8 <TCA_PinMode+0x4c>
 80076f6:	4b17      	ldr	r3, [pc, #92]	@ (8007754 <TCA_PinMode+0xa8>)
 80076f8:	60bb      	str	r3, [r7, #8]

	if (mode) 	*data |= mask;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <TCA_PinMode+0x64>
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	781a      	ldrb	r2, [r3, #0]
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	4313      	orrs	r3, r2
 8007708:	b2da      	uxtb	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	701a      	strb	r2, [r3, #0]
 800770e:	e00b      	b.n	8007728 <TCA_PinMode+0x7c>
	else 		*data &= ~mask;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	b25a      	sxtb	r2, r3
 8007716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800771a:	43db      	mvns	r3, r3
 800771c:	b25b      	sxtb	r3, r3
 800771e:	4013      	ands	r3, r2
 8007720:	b25b      	sxtb	r3, r3
 8007722:	b2da      	uxtb	r2, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 8007728:	4b0b      	ldr	r3, [pc, #44]	@ (8007758 <TCA_PinMode+0xac>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	4618      	mov	r0, r3
 800772e:	89bb      	ldrh	r3, [r7, #12]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	4619      	mov	r1, r3
 8007734:	f7ff ff76 	bl	8007624 <writeToRegister>
 8007738:	e004      	b.n	8007744 <TCA_PinMode+0x98>
	if(!is_initialised) return;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <TCA_PinMode+0x98>
	if(pin > 15) return;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <TCA_PinMode+0x98>
	if(mode != 0 && mode != 1) return;
 8007742:	bf00      	nop
}
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	200004f0 	.word	0x200004f0
 8007750:	20000022 	.word	0x20000022
 8007754:	20000023 	.word	0x20000023
 8007758:	20000024 	.word	0x20000024

0800775c <TCA_WritePin>:

	writeToRegister(TCA_address, memory_address, data);
}

void TCA_WritePin(uint32_t pin, uint32_t value)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 8007766:	4b25      	ldr	r3, [pc, #148]	@ (80077fc <TCA_WritePin+0xa0>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d03d      	beq.n	80077ea <TCA_WritePin+0x8e>
	if(pin > 15) return;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b0f      	cmp	r3, #15
 8007772:	d83c      	bhi.n	80077ee <TCA_WritePin+0x92>
	if(value != 0 && value != 1) return;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <TCA_WritePin+0x24>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d138      	bne.n	80077f2 <TCA_WritePin+0x96>

	uint8_t mask =  1 << (pin % 8);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f003 0307 	and.w	r3, r3, #7
 8007786:	2201      	movs	r2, #1
 8007788:	fa02 f303 	lsl.w	r3, r2, r3
 800778c:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? OUTPUT_REGISTER_LOW : OUTPUT_REGISTER_HIGH;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b07      	cmp	r3, #7
 8007792:	d801      	bhi.n	8007798 <TCA_WritePin+0x3c>
 8007794:	2302      	movs	r3, #2
 8007796:	e000      	b.n	800779a <TCA_WritePin+0x3e>
 8007798:	2303      	movs	r3, #3
 800779a:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &output_register_state_low : &output_register_state_high;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b07      	cmp	r3, #7
 80077a0:	d801      	bhi.n	80077a6 <TCA_WritePin+0x4a>
 80077a2:	4b17      	ldr	r3, [pc, #92]	@ (8007800 <TCA_WritePin+0xa4>)
 80077a4:	e000      	b.n	80077a8 <TCA_WritePin+0x4c>
 80077a6:	4b17      	ldr	r3, [pc, #92]	@ (8007804 <TCA_WritePin+0xa8>)
 80077a8:	60bb      	str	r3, [r7, #8]

	if (value)	*data |= mask;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d007      	beq.n	80077c0 <TCA_WritePin+0x64>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	781a      	ldrb	r2, [r3, #0]
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	e00b      	b.n	80077d8 <TCA_WritePin+0x7c>
	else 		*data &= ~mask;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b25a      	sxtb	r2, r3
 80077c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ca:	43db      	mvns	r3, r3
 80077cc:	b25b      	sxtb	r3, r3
 80077ce:	4013      	ands	r3, r2
 80077d0:	b25b      	sxtb	r3, r3
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 80077d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007808 <TCA_WritePin+0xac>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	4618      	mov	r0, r3
 80077de:	89bb      	ldrh	r3, [r7, #12]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	4619      	mov	r1, r3
 80077e4:	f7ff ff1e 	bl	8007624 <writeToRegister>
 80077e8:	e004      	b.n	80077f4 <TCA_WritePin+0x98>
	if(!is_initialised) return;
 80077ea:	bf00      	nop
 80077ec:	e002      	b.n	80077f4 <TCA_WritePin+0x98>
	if(pin > 15) return;
 80077ee:	bf00      	nop
 80077f0:	e000      	b.n	80077f4 <TCA_WritePin+0x98>
	if(value != 0 && value != 1) return;
 80077f2:	bf00      	nop
}
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	200004f0 	.word	0x200004f0
 8007800:	20000020 	.word	0x20000020
 8007804:	20000021 	.word	0x20000021
 8007808:	20000024 	.word	0x20000024

0800780c <to_signed_12bit>:
 */

#include "stdint.h"

int16_t to_signed_12bit(uint16_t value)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	80fb      	strh	r3, [r7, #6]
    // Mask to get the lower 12 bits
    value &= 0x0FFF;
 8007816:	88fb      	ldrh	r3, [r7, #6]
 8007818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800781c:	80fb      	strh	r3, [r7, #6]

    // Check if the sign bit (bit 11) is set
    if (value & 0x0800) {
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <to_signed_12bit+0x28>
        // If sign bit is set, make it negative
        value |= 0xF000; // Set the upper 4 bits to 1 to preserve the sign in 16-bit signed int
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800782e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8007832:	80fb      	strh	r3, [r7, #6]
    }

    return (int16_t)value;
 8007834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8007838:	4618      	mov	r0, r3
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr

08007842 <trimInt>:

int trimInt(int integer, int min, int max)
{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	607a      	str	r2, [r7, #4]
	if(integer>max) integer = max;
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	429a      	cmp	r2, r3
 8007854:	dd02      	ble.n	800785c <trimInt+0x1a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	e005      	b.n	8007868 <trimInt+0x26>
	else if(integer<min) integer = min;
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	429a      	cmp	r2, r3
 8007862:	da01      	bge.n	8007868 <trimInt+0x26>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	60fb      	str	r3, [r7, #12]
	return integer;
 8007868:	68fb      	ldr	r3, [r7, #12]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	bc80      	pop	{r7}
 8007872:	4770      	bx	lr

08007874 <trimFloat>:

float trimFloat(float floating, float min, float max)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
	if(floating>max) floating = max;
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f7f9 fc3a 	bl	80010fc <__aeabi_fcmpgt>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <trimFloat+0x20>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60fb      	str	r3, [r7, #12]
 8007892:	e008      	b.n	80078a6 <trimFloat+0x32>
	else if(floating<min) floating = min;
 8007894:	68b9      	ldr	r1, [r7, #8]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f7f9 fc12 	bl	80010c0 <__aeabi_fcmplt>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <trimFloat+0x32>
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	60fb      	str	r3, [r7, #12]
	return floating;
 80078a6:	68fb      	ldr	r3, [r7, #12]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <atoi>:
 80078b0:	220a      	movs	r2, #10
 80078b2:	2100      	movs	r1, #0
 80078b4:	f000 b98a 	b.w	8007bcc <strtol>

080078b8 <calloc>:
 80078b8:	4b02      	ldr	r3, [pc, #8]	@ (80078c4 <calloc+0xc>)
 80078ba:	460a      	mov	r2, r1
 80078bc:	4601      	mov	r1, r0
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	f000 b802 	b.w	80078c8 <_calloc_r>
 80078c4:	20000034 	.word	0x20000034

080078c8 <_calloc_r>:
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	fba1 5402 	umull	r5, r4, r1, r2
 80078ce:	b93c      	cbnz	r4, 80078e0 <_calloc_r+0x18>
 80078d0:	4629      	mov	r1, r5
 80078d2:	f000 f83f 	bl	8007954 <_malloc_r>
 80078d6:	4606      	mov	r6, r0
 80078d8:	b928      	cbnz	r0, 80078e6 <_calloc_r+0x1e>
 80078da:	2600      	movs	r6, #0
 80078dc:	4630      	mov	r0, r6
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	220c      	movs	r2, #12
 80078e2:	6002      	str	r2, [r0, #0]
 80078e4:	e7f9      	b.n	80078da <_calloc_r+0x12>
 80078e6:	462a      	mov	r2, r5
 80078e8:	4621      	mov	r1, r4
 80078ea:	f000 fefa 	bl	80086e2 <memset>
 80078ee:	e7f5      	b.n	80078dc <_calloc_r+0x14>

080078f0 <malloc>:
 80078f0:	4b02      	ldr	r3, [pc, #8]	@ (80078fc <malloc+0xc>)
 80078f2:	4601      	mov	r1, r0
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	f000 b82d 	b.w	8007954 <_malloc_r>
 80078fa:	bf00      	nop
 80078fc:	20000034 	.word	0x20000034

08007900 <free>:
 8007900:	4b02      	ldr	r3, [pc, #8]	@ (800790c <free+0xc>)
 8007902:	4601      	mov	r1, r0
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	f001 be17 	b.w	8009538 <_free_r>
 800790a:	bf00      	nop
 800790c:	20000034 	.word	0x20000034

08007910 <sbrk_aligned>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	4e0f      	ldr	r6, [pc, #60]	@ (8007950 <sbrk_aligned+0x40>)
 8007914:	460c      	mov	r4, r1
 8007916:	6831      	ldr	r1, [r6, #0]
 8007918:	4605      	mov	r5, r0
 800791a:	b911      	cbnz	r1, 8007922 <sbrk_aligned+0x12>
 800791c:	f000 ff46 	bl	80087ac <_sbrk_r>
 8007920:	6030      	str	r0, [r6, #0]
 8007922:	4621      	mov	r1, r4
 8007924:	4628      	mov	r0, r5
 8007926:	f000 ff41 	bl	80087ac <_sbrk_r>
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	d103      	bne.n	8007936 <sbrk_aligned+0x26>
 800792e:	f04f 34ff 	mov.w	r4, #4294967295
 8007932:	4620      	mov	r0, r4
 8007934:	bd70      	pop	{r4, r5, r6, pc}
 8007936:	1cc4      	adds	r4, r0, #3
 8007938:	f024 0403 	bic.w	r4, r4, #3
 800793c:	42a0      	cmp	r0, r4
 800793e:	d0f8      	beq.n	8007932 <sbrk_aligned+0x22>
 8007940:	1a21      	subs	r1, r4, r0
 8007942:	4628      	mov	r0, r5
 8007944:	f000 ff32 	bl	80087ac <_sbrk_r>
 8007948:	3001      	adds	r0, #1
 800794a:	d1f2      	bne.n	8007932 <sbrk_aligned+0x22>
 800794c:	e7ef      	b.n	800792e <sbrk_aligned+0x1e>
 800794e:	bf00      	nop
 8007950:	20000548 	.word	0x20000548

08007954 <_malloc_r>:
 8007954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007958:	1ccd      	adds	r5, r1, #3
 800795a:	f025 0503 	bic.w	r5, r5, #3
 800795e:	3508      	adds	r5, #8
 8007960:	2d0c      	cmp	r5, #12
 8007962:	bf38      	it	cc
 8007964:	250c      	movcc	r5, #12
 8007966:	2d00      	cmp	r5, #0
 8007968:	4606      	mov	r6, r0
 800796a:	db01      	blt.n	8007970 <_malloc_r+0x1c>
 800796c:	42a9      	cmp	r1, r5
 800796e:	d904      	bls.n	800797a <_malloc_r+0x26>
 8007970:	230c      	movs	r3, #12
 8007972:	6033      	str	r3, [r6, #0]
 8007974:	2000      	movs	r0, #0
 8007976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800797a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a50 <_malloc_r+0xfc>
 800797e:	f000 f869 	bl	8007a54 <__malloc_lock>
 8007982:	f8d8 3000 	ldr.w	r3, [r8]
 8007986:	461c      	mov	r4, r3
 8007988:	bb44      	cbnz	r4, 80079dc <_malloc_r+0x88>
 800798a:	4629      	mov	r1, r5
 800798c:	4630      	mov	r0, r6
 800798e:	f7ff ffbf 	bl	8007910 <sbrk_aligned>
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	4604      	mov	r4, r0
 8007996:	d158      	bne.n	8007a4a <_malloc_r+0xf6>
 8007998:	f8d8 4000 	ldr.w	r4, [r8]
 800799c:	4627      	mov	r7, r4
 800799e:	2f00      	cmp	r7, #0
 80079a0:	d143      	bne.n	8007a2a <_malloc_r+0xd6>
 80079a2:	2c00      	cmp	r4, #0
 80079a4:	d04b      	beq.n	8007a3e <_malloc_r+0xea>
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	4639      	mov	r1, r7
 80079aa:	4630      	mov	r0, r6
 80079ac:	eb04 0903 	add.w	r9, r4, r3
 80079b0:	f000 fefc 	bl	80087ac <_sbrk_r>
 80079b4:	4581      	cmp	r9, r0
 80079b6:	d142      	bne.n	8007a3e <_malloc_r+0xea>
 80079b8:	6821      	ldr	r1, [r4, #0]
 80079ba:	4630      	mov	r0, r6
 80079bc:	1a6d      	subs	r5, r5, r1
 80079be:	4629      	mov	r1, r5
 80079c0:	f7ff ffa6 	bl	8007910 <sbrk_aligned>
 80079c4:	3001      	adds	r0, #1
 80079c6:	d03a      	beq.n	8007a3e <_malloc_r+0xea>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	442b      	add	r3, r5
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	f8d8 3000 	ldr.w	r3, [r8]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	bb62      	cbnz	r2, 8007a30 <_malloc_r+0xdc>
 80079d6:	f8c8 7000 	str.w	r7, [r8]
 80079da:	e00f      	b.n	80079fc <_malloc_r+0xa8>
 80079dc:	6822      	ldr	r2, [r4, #0]
 80079de:	1b52      	subs	r2, r2, r5
 80079e0:	d420      	bmi.n	8007a24 <_malloc_r+0xd0>
 80079e2:	2a0b      	cmp	r2, #11
 80079e4:	d917      	bls.n	8007a16 <_malloc_r+0xc2>
 80079e6:	1961      	adds	r1, r4, r5
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	6025      	str	r5, [r4, #0]
 80079ec:	bf18      	it	ne
 80079ee:	6059      	strne	r1, [r3, #4]
 80079f0:	6863      	ldr	r3, [r4, #4]
 80079f2:	bf08      	it	eq
 80079f4:	f8c8 1000 	streq.w	r1, [r8]
 80079f8:	5162      	str	r2, [r4, r5]
 80079fa:	604b      	str	r3, [r1, #4]
 80079fc:	4630      	mov	r0, r6
 80079fe:	f000 f82f 	bl	8007a60 <__malloc_unlock>
 8007a02:	f104 000b 	add.w	r0, r4, #11
 8007a06:	1d23      	adds	r3, r4, #4
 8007a08:	f020 0007 	bic.w	r0, r0, #7
 8007a0c:	1ac2      	subs	r2, r0, r3
 8007a0e:	bf1c      	itt	ne
 8007a10:	1a1b      	subne	r3, r3, r0
 8007a12:	50a3      	strne	r3, [r4, r2]
 8007a14:	e7af      	b.n	8007976 <_malloc_r+0x22>
 8007a16:	6862      	ldr	r2, [r4, #4]
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	bf0c      	ite	eq
 8007a1c:	f8c8 2000 	streq.w	r2, [r8]
 8007a20:	605a      	strne	r2, [r3, #4]
 8007a22:	e7eb      	b.n	80079fc <_malloc_r+0xa8>
 8007a24:	4623      	mov	r3, r4
 8007a26:	6864      	ldr	r4, [r4, #4]
 8007a28:	e7ae      	b.n	8007988 <_malloc_r+0x34>
 8007a2a:	463c      	mov	r4, r7
 8007a2c:	687f      	ldr	r7, [r7, #4]
 8007a2e:	e7b6      	b.n	800799e <_malloc_r+0x4a>
 8007a30:	461a      	mov	r2, r3
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	42a3      	cmp	r3, r4
 8007a36:	d1fb      	bne.n	8007a30 <_malloc_r+0xdc>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	6053      	str	r3, [r2, #4]
 8007a3c:	e7de      	b.n	80079fc <_malloc_r+0xa8>
 8007a3e:	230c      	movs	r3, #12
 8007a40:	4630      	mov	r0, r6
 8007a42:	6033      	str	r3, [r6, #0]
 8007a44:	f000 f80c 	bl	8007a60 <__malloc_unlock>
 8007a48:	e794      	b.n	8007974 <_malloc_r+0x20>
 8007a4a:	6005      	str	r5, [r0, #0]
 8007a4c:	e7d6      	b.n	80079fc <_malloc_r+0xa8>
 8007a4e:	bf00      	nop
 8007a50:	2000054c 	.word	0x2000054c

08007a54 <__malloc_lock>:
 8007a54:	4801      	ldr	r0, [pc, #4]	@ (8007a5c <__malloc_lock+0x8>)
 8007a56:	f000 bef6 	b.w	8008846 <__retarget_lock_acquire_recursive>
 8007a5a:	bf00      	nop
 8007a5c:	20000690 	.word	0x20000690

08007a60 <__malloc_unlock>:
 8007a60:	4801      	ldr	r0, [pc, #4]	@ (8007a68 <__malloc_unlock+0x8>)
 8007a62:	f000 bef1 	b.w	8008848 <__retarget_lock_release_recursive>
 8007a66:	bf00      	nop
 8007a68:	20000690 	.word	0x20000690

08007a6c <realloc>:
 8007a6c:	4b02      	ldr	r3, [pc, #8]	@ (8007a78 <realloc+0xc>)
 8007a6e:	460a      	mov	r2, r1
 8007a70:	4601      	mov	r1, r0
 8007a72:	6818      	ldr	r0, [r3, #0]
 8007a74:	f000 b802 	b.w	8007a7c <_realloc_r>
 8007a78:	20000034 	.word	0x20000034

08007a7c <_realloc_r>:
 8007a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a80:	4680      	mov	r8, r0
 8007a82:	4615      	mov	r5, r2
 8007a84:	460c      	mov	r4, r1
 8007a86:	b921      	cbnz	r1, 8007a92 <_realloc_r+0x16>
 8007a88:	4611      	mov	r1, r2
 8007a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8e:	f7ff bf61 	b.w	8007954 <_malloc_r>
 8007a92:	b92a      	cbnz	r2, 8007aa0 <_realloc_r+0x24>
 8007a94:	f001 fd50 	bl	8009538 <_free_r>
 8007a98:	2400      	movs	r4, #0
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa0:	f002 f912 	bl	8009cc8 <_malloc_usable_size_r>
 8007aa4:	4285      	cmp	r5, r0
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	d802      	bhi.n	8007ab0 <_realloc_r+0x34>
 8007aaa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007aae:	d8f4      	bhi.n	8007a9a <_realloc_r+0x1e>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	f7ff ff4e 	bl	8007954 <_malloc_r>
 8007ab8:	4607      	mov	r7, r0
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d0ec      	beq.n	8007a98 <_realloc_r+0x1c>
 8007abe:	42b5      	cmp	r5, r6
 8007ac0:	462a      	mov	r2, r5
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	bf28      	it	cs
 8007ac6:	4632      	movcs	r2, r6
 8007ac8:	f000 fed5 	bl	8008876 <memcpy>
 8007acc:	4621      	mov	r1, r4
 8007ace:	4640      	mov	r0, r8
 8007ad0:	f001 fd32 	bl	8009538 <_free_r>
 8007ad4:	463c      	mov	r4, r7
 8007ad6:	e7e0      	b.n	8007a9a <_realloc_r+0x1e>

08007ad8 <_strtol_l.constprop.0>:
 8007ad8:	2b24      	cmp	r3, #36	@ 0x24
 8007ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ade:	4686      	mov	lr, r0
 8007ae0:	4690      	mov	r8, r2
 8007ae2:	d801      	bhi.n	8007ae8 <_strtol_l.constprop.0+0x10>
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d106      	bne.n	8007af6 <_strtol_l.constprop.0+0x1e>
 8007ae8:	f000 fe82 	bl	80087f0 <__errno>
 8007aec:	2316      	movs	r3, #22
 8007aee:	6003      	str	r3, [r0, #0]
 8007af0:	2000      	movs	r0, #0
 8007af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af6:	460d      	mov	r5, r1
 8007af8:	4833      	ldr	r0, [pc, #204]	@ (8007bc8 <_strtol_l.constprop.0+0xf0>)
 8007afa:	462a      	mov	r2, r5
 8007afc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b00:	5d06      	ldrb	r6, [r0, r4]
 8007b02:	f016 0608 	ands.w	r6, r6, #8
 8007b06:	d1f8      	bne.n	8007afa <_strtol_l.constprop.0+0x22>
 8007b08:	2c2d      	cmp	r4, #45	@ 0x2d
 8007b0a:	d12d      	bne.n	8007b68 <_strtol_l.constprop.0+0x90>
 8007b0c:	2601      	movs	r6, #1
 8007b0e:	782c      	ldrb	r4, [r5, #0]
 8007b10:	1c95      	adds	r5, r2, #2
 8007b12:	f033 0210 	bics.w	r2, r3, #16
 8007b16:	d109      	bne.n	8007b2c <_strtol_l.constprop.0+0x54>
 8007b18:	2c30      	cmp	r4, #48	@ 0x30
 8007b1a:	d12a      	bne.n	8007b72 <_strtol_l.constprop.0+0x9a>
 8007b1c:	782a      	ldrb	r2, [r5, #0]
 8007b1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b22:	2a58      	cmp	r2, #88	@ 0x58
 8007b24:	d125      	bne.n	8007b72 <_strtol_l.constprop.0+0x9a>
 8007b26:	2310      	movs	r3, #16
 8007b28:	786c      	ldrb	r4, [r5, #1]
 8007b2a:	3502      	adds	r5, #2
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007b32:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b36:	fbbc f9f3 	udiv	r9, ip, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007b44:	2f09      	cmp	r7, #9
 8007b46:	d81b      	bhi.n	8007b80 <_strtol_l.constprop.0+0xa8>
 8007b48:	463c      	mov	r4, r7
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	dd27      	ble.n	8007b9e <_strtol_l.constprop.0+0xc6>
 8007b4e:	1c57      	adds	r7, r2, #1
 8007b50:	d007      	beq.n	8007b62 <_strtol_l.constprop.0+0x8a>
 8007b52:	4581      	cmp	r9, r0
 8007b54:	d320      	bcc.n	8007b98 <_strtol_l.constprop.0+0xc0>
 8007b56:	d101      	bne.n	8007b5c <_strtol_l.constprop.0+0x84>
 8007b58:	45a2      	cmp	sl, r4
 8007b5a:	db1d      	blt.n	8007b98 <_strtol_l.constprop.0+0xc0>
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	fb00 4003 	mla	r0, r0, r3, r4
 8007b62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b66:	e7eb      	b.n	8007b40 <_strtol_l.constprop.0+0x68>
 8007b68:	2c2b      	cmp	r4, #43	@ 0x2b
 8007b6a:	bf04      	itt	eq
 8007b6c:	782c      	ldrbeq	r4, [r5, #0]
 8007b6e:	1c95      	addeq	r5, r2, #2
 8007b70:	e7cf      	b.n	8007b12 <_strtol_l.constprop.0+0x3a>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1da      	bne.n	8007b2c <_strtol_l.constprop.0+0x54>
 8007b76:	2c30      	cmp	r4, #48	@ 0x30
 8007b78:	bf0c      	ite	eq
 8007b7a:	2308      	moveq	r3, #8
 8007b7c:	230a      	movne	r3, #10
 8007b7e:	e7d5      	b.n	8007b2c <_strtol_l.constprop.0+0x54>
 8007b80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007b84:	2f19      	cmp	r7, #25
 8007b86:	d801      	bhi.n	8007b8c <_strtol_l.constprop.0+0xb4>
 8007b88:	3c37      	subs	r4, #55	@ 0x37
 8007b8a:	e7de      	b.n	8007b4a <_strtol_l.constprop.0+0x72>
 8007b8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007b90:	2f19      	cmp	r7, #25
 8007b92:	d804      	bhi.n	8007b9e <_strtol_l.constprop.0+0xc6>
 8007b94:	3c57      	subs	r4, #87	@ 0x57
 8007b96:	e7d8      	b.n	8007b4a <_strtol_l.constprop.0+0x72>
 8007b98:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9c:	e7e1      	b.n	8007b62 <_strtol_l.constprop.0+0x8a>
 8007b9e:	1c53      	adds	r3, r2, #1
 8007ba0:	d108      	bne.n	8007bb4 <_strtol_l.constprop.0+0xdc>
 8007ba2:	2322      	movs	r3, #34	@ 0x22
 8007ba4:	4660      	mov	r0, ip
 8007ba6:	f8ce 3000 	str.w	r3, [lr]
 8007baa:	f1b8 0f00 	cmp.w	r8, #0
 8007bae:	d0a0      	beq.n	8007af2 <_strtol_l.constprop.0+0x1a>
 8007bb0:	1e69      	subs	r1, r5, #1
 8007bb2:	e006      	b.n	8007bc2 <_strtol_l.constprop.0+0xea>
 8007bb4:	b106      	cbz	r6, 8007bb8 <_strtol_l.constprop.0+0xe0>
 8007bb6:	4240      	negs	r0, r0
 8007bb8:	f1b8 0f00 	cmp.w	r8, #0
 8007bbc:	d099      	beq.n	8007af2 <_strtol_l.constprop.0+0x1a>
 8007bbe:	2a00      	cmp	r2, #0
 8007bc0:	d1f6      	bne.n	8007bb0 <_strtol_l.constprop.0+0xd8>
 8007bc2:	f8c8 1000 	str.w	r1, [r8]
 8007bc6:	e794      	b.n	8007af2 <_strtol_l.constprop.0+0x1a>
 8007bc8:	0800b403 	.word	0x0800b403

08007bcc <strtol>:
 8007bcc:	4613      	mov	r3, r2
 8007bce:	460a      	mov	r2, r1
 8007bd0:	4601      	mov	r1, r0
 8007bd2:	4802      	ldr	r0, [pc, #8]	@ (8007bdc <strtol+0x10>)
 8007bd4:	6800      	ldr	r0, [r0, #0]
 8007bd6:	f7ff bf7f 	b.w	8007ad8 <_strtol_l.constprop.0>
 8007bda:	bf00      	nop
 8007bdc:	20000034 	.word	0x20000034

08007be0 <__cvt>:
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be6:	461d      	mov	r5, r3
 8007be8:	bfbb      	ittet	lt
 8007bea:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007bee:	461d      	movlt	r5, r3
 8007bf0:	2300      	movge	r3, #0
 8007bf2:	232d      	movlt	r3, #45	@ 0x2d
 8007bf4:	b088      	sub	sp, #32
 8007bf6:	4614      	mov	r4, r2
 8007bf8:	bfb8      	it	lt
 8007bfa:	4614      	movlt	r4, r2
 8007bfc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007bfe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007c00:	7013      	strb	r3, [r2, #0]
 8007c02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c04:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007c08:	f023 0820 	bic.w	r8, r3, #32
 8007c0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c10:	d005      	beq.n	8007c1e <__cvt+0x3e>
 8007c12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c16:	d100      	bne.n	8007c1a <__cvt+0x3a>
 8007c18:	3601      	adds	r6, #1
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e000      	b.n	8007c20 <__cvt+0x40>
 8007c1e:	2303      	movs	r3, #3
 8007c20:	aa07      	add	r2, sp, #28
 8007c22:	9204      	str	r2, [sp, #16]
 8007c24:	aa06      	add	r2, sp, #24
 8007c26:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007c2a:	e9cd 3600 	strd	r3, r6, [sp]
 8007c2e:	4622      	mov	r2, r4
 8007c30:	462b      	mov	r3, r5
 8007c32:	f000 feb9 	bl	80089a8 <_dtoa_r>
 8007c36:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	d119      	bne.n	8007c72 <__cvt+0x92>
 8007c3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c40:	07db      	lsls	r3, r3, #31
 8007c42:	d50e      	bpl.n	8007c62 <__cvt+0x82>
 8007c44:	eb00 0906 	add.w	r9, r0, r6
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	4629      	mov	r1, r5
 8007c50:	f7f8 feaa 	bl	80009a8 <__aeabi_dcmpeq>
 8007c54:	b108      	cbz	r0, 8007c5a <__cvt+0x7a>
 8007c56:	f8cd 901c 	str.w	r9, [sp, #28]
 8007c5a:	2230      	movs	r2, #48	@ 0x30
 8007c5c:	9b07      	ldr	r3, [sp, #28]
 8007c5e:	454b      	cmp	r3, r9
 8007c60:	d31e      	bcc.n	8007ca0 <__cvt+0xc0>
 8007c62:	4638      	mov	r0, r7
 8007c64:	9b07      	ldr	r3, [sp, #28]
 8007c66:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007c68:	1bdb      	subs	r3, r3, r7
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	b008      	add	sp, #32
 8007c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c72:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c76:	eb00 0906 	add.w	r9, r0, r6
 8007c7a:	d1e5      	bne.n	8007c48 <__cvt+0x68>
 8007c7c:	7803      	ldrb	r3, [r0, #0]
 8007c7e:	2b30      	cmp	r3, #48	@ 0x30
 8007c80:	d10a      	bne.n	8007c98 <__cvt+0xb8>
 8007c82:	2200      	movs	r2, #0
 8007c84:	2300      	movs	r3, #0
 8007c86:	4620      	mov	r0, r4
 8007c88:	4629      	mov	r1, r5
 8007c8a:	f7f8 fe8d 	bl	80009a8 <__aeabi_dcmpeq>
 8007c8e:	b918      	cbnz	r0, 8007c98 <__cvt+0xb8>
 8007c90:	f1c6 0601 	rsb	r6, r6, #1
 8007c94:	f8ca 6000 	str.w	r6, [sl]
 8007c98:	f8da 3000 	ldr.w	r3, [sl]
 8007c9c:	4499      	add	r9, r3
 8007c9e:	e7d3      	b.n	8007c48 <__cvt+0x68>
 8007ca0:	1c59      	adds	r1, r3, #1
 8007ca2:	9107      	str	r1, [sp, #28]
 8007ca4:	701a      	strb	r2, [r3, #0]
 8007ca6:	e7d9      	b.n	8007c5c <__cvt+0x7c>

08007ca8 <__exponent>:
 8007ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007caa:	2900      	cmp	r1, #0
 8007cac:	bfb6      	itet	lt
 8007cae:	232d      	movlt	r3, #45	@ 0x2d
 8007cb0:	232b      	movge	r3, #43	@ 0x2b
 8007cb2:	4249      	neglt	r1, r1
 8007cb4:	2909      	cmp	r1, #9
 8007cb6:	7002      	strb	r2, [r0, #0]
 8007cb8:	7043      	strb	r3, [r0, #1]
 8007cba:	dd29      	ble.n	8007d10 <__exponent+0x68>
 8007cbc:	f10d 0307 	add.w	r3, sp, #7
 8007cc0:	461d      	mov	r5, r3
 8007cc2:	270a      	movs	r7, #10
 8007cc4:	fbb1 f6f7 	udiv	r6, r1, r7
 8007cc8:	461a      	mov	r2, r3
 8007cca:	fb07 1416 	mls	r4, r7, r6, r1
 8007cce:	3430      	adds	r4, #48	@ 0x30
 8007cd0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	2c63      	cmp	r4, #99	@ 0x63
 8007cd8:	4631      	mov	r1, r6
 8007cda:	f103 33ff 	add.w	r3, r3, #4294967295
 8007cde:	dcf1      	bgt.n	8007cc4 <__exponent+0x1c>
 8007ce0:	3130      	adds	r1, #48	@ 0x30
 8007ce2:	1e94      	subs	r4, r2, #2
 8007ce4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ce8:	4623      	mov	r3, r4
 8007cea:	1c41      	adds	r1, r0, #1
 8007cec:	42ab      	cmp	r3, r5
 8007cee:	d30a      	bcc.n	8007d06 <__exponent+0x5e>
 8007cf0:	f10d 0309 	add.w	r3, sp, #9
 8007cf4:	1a9b      	subs	r3, r3, r2
 8007cf6:	42ac      	cmp	r4, r5
 8007cf8:	bf88      	it	hi
 8007cfa:	2300      	movhi	r3, #0
 8007cfc:	3302      	adds	r3, #2
 8007cfe:	4403      	add	r3, r0
 8007d00:	1a18      	subs	r0, r3, r0
 8007d02:	b003      	add	sp, #12
 8007d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d06:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d0a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d0e:	e7ed      	b.n	8007cec <__exponent+0x44>
 8007d10:	2330      	movs	r3, #48	@ 0x30
 8007d12:	3130      	adds	r1, #48	@ 0x30
 8007d14:	7083      	strb	r3, [r0, #2]
 8007d16:	70c1      	strb	r1, [r0, #3]
 8007d18:	1d03      	adds	r3, r0, #4
 8007d1a:	e7f1      	b.n	8007d00 <__exponent+0x58>

08007d1c <_printf_float>:
 8007d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d20:	b091      	sub	sp, #68	@ 0x44
 8007d22:	460c      	mov	r4, r1
 8007d24:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007d28:	4616      	mov	r6, r2
 8007d2a:	461f      	mov	r7, r3
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	f000 fd05 	bl	800873c <_localeconv_r>
 8007d32:	6803      	ldr	r3, [r0, #0]
 8007d34:	4618      	mov	r0, r3
 8007d36:	9308      	str	r3, [sp, #32]
 8007d38:	f7f8 fa0a 	bl	8000150 <strlen>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d40:	f8d8 3000 	ldr.w	r3, [r8]
 8007d44:	9009      	str	r0, [sp, #36]	@ 0x24
 8007d46:	3307      	adds	r3, #7
 8007d48:	f023 0307 	bic.w	r3, r3, #7
 8007d4c:	f103 0208 	add.w	r2, r3, #8
 8007d50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d54:	f8d4 b000 	ldr.w	fp, [r4]
 8007d58:	f8c8 2000 	str.w	r2, [r8]
 8007d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d66:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d76:	4b9c      	ldr	r3, [pc, #624]	@ (8007fe8 <_printf_float+0x2cc>)
 8007d78:	f7f8 fe48 	bl	8000a0c <__aeabi_dcmpun>
 8007d7c:	bb70      	cbnz	r0, 8007ddc <_printf_float+0xc0>
 8007d7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295
 8007d86:	4b98      	ldr	r3, [pc, #608]	@ (8007fe8 <_printf_float+0x2cc>)
 8007d88:	f7f8 fe22 	bl	80009d0 <__aeabi_dcmple>
 8007d8c:	bb30      	cbnz	r0, 8007ddc <_printf_float+0xc0>
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2300      	movs	r3, #0
 8007d92:	4640      	mov	r0, r8
 8007d94:	4649      	mov	r1, r9
 8007d96:	f7f8 fe11 	bl	80009bc <__aeabi_dcmplt>
 8007d9a:	b110      	cbz	r0, 8007da2 <_printf_float+0x86>
 8007d9c:	232d      	movs	r3, #45	@ 0x2d
 8007d9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007da2:	4a92      	ldr	r2, [pc, #584]	@ (8007fec <_printf_float+0x2d0>)
 8007da4:	4b92      	ldr	r3, [pc, #584]	@ (8007ff0 <_printf_float+0x2d4>)
 8007da6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007daa:	bf94      	ite	ls
 8007dac:	4690      	movls	r8, r2
 8007dae:	4698      	movhi	r8, r3
 8007db0:	2303      	movs	r3, #3
 8007db2:	f04f 0900 	mov.w	r9, #0
 8007db6:	6123      	str	r3, [r4, #16]
 8007db8:	f02b 0304 	bic.w	r3, fp, #4
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	4633      	mov	r3, r6
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	9700      	str	r7, [sp, #0]
 8007dc6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007dc8:	f000 f9d4 	bl	8008174 <_printf_common>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	f040 8090 	bne.w	8007ef2 <_printf_float+0x1d6>
 8007dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd6:	b011      	add	sp, #68	@ 0x44
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	4642      	mov	r2, r8
 8007dde:	464b      	mov	r3, r9
 8007de0:	4640      	mov	r0, r8
 8007de2:	4649      	mov	r1, r9
 8007de4:	f7f8 fe12 	bl	8000a0c <__aeabi_dcmpun>
 8007de8:	b148      	cbz	r0, 8007dfe <_printf_float+0xe2>
 8007dea:	464b      	mov	r3, r9
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfb8      	it	lt
 8007df0:	232d      	movlt	r3, #45	@ 0x2d
 8007df2:	4a80      	ldr	r2, [pc, #512]	@ (8007ff4 <_printf_float+0x2d8>)
 8007df4:	bfb8      	it	lt
 8007df6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8007ff8 <_printf_float+0x2dc>)
 8007dfc:	e7d3      	b.n	8007da6 <_printf_float+0x8a>
 8007dfe:	6863      	ldr	r3, [r4, #4]
 8007e00:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	d13f      	bne.n	8007e88 <_printf_float+0x16c>
 8007e08:	2306      	movs	r3, #6
 8007e0a:	6063      	str	r3, [r4, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007e12:	6023      	str	r3, [r4, #0]
 8007e14:	9206      	str	r2, [sp, #24]
 8007e16:	aa0e      	add	r2, sp, #56	@ 0x38
 8007e18:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007e1c:	aa0d      	add	r2, sp, #52	@ 0x34
 8007e1e:	9203      	str	r2, [sp, #12]
 8007e20:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007e24:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007e28:	6863      	ldr	r3, [r4, #4]
 8007e2a:	4642      	mov	r2, r8
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	4628      	mov	r0, r5
 8007e30:	464b      	mov	r3, r9
 8007e32:	910a      	str	r1, [sp, #40]	@ 0x28
 8007e34:	f7ff fed4 	bl	8007be0 <__cvt>
 8007e38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	2947      	cmp	r1, #71	@ 0x47
 8007e3e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007e40:	d128      	bne.n	8007e94 <_printf_float+0x178>
 8007e42:	1cc8      	adds	r0, r1, #3
 8007e44:	db02      	blt.n	8007e4c <_printf_float+0x130>
 8007e46:	6863      	ldr	r3, [r4, #4]
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	dd40      	ble.n	8007ece <_printf_float+0x1b2>
 8007e4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e50:	fa5f fa8a 	uxtb.w	sl, sl
 8007e54:	4652      	mov	r2, sl
 8007e56:	3901      	subs	r1, #1
 8007e58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e5c:	910d      	str	r1, [sp, #52]	@ 0x34
 8007e5e:	f7ff ff23 	bl	8007ca8 <__exponent>
 8007e62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e64:	4681      	mov	r9, r0
 8007e66:	1813      	adds	r3, r2, r0
 8007e68:	2a01      	cmp	r2, #1
 8007e6a:	6123      	str	r3, [r4, #16]
 8007e6c:	dc02      	bgt.n	8007e74 <_printf_float+0x158>
 8007e6e:	6822      	ldr	r2, [r4, #0]
 8007e70:	07d2      	lsls	r2, r2, #31
 8007e72:	d501      	bpl.n	8007e78 <_printf_float+0x15c>
 8007e74:	3301      	adds	r3, #1
 8007e76:	6123      	str	r3, [r4, #16]
 8007e78:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d09e      	beq.n	8007dbe <_printf_float+0xa2>
 8007e80:	232d      	movs	r3, #45	@ 0x2d
 8007e82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e86:	e79a      	b.n	8007dbe <_printf_float+0xa2>
 8007e88:	2947      	cmp	r1, #71	@ 0x47
 8007e8a:	d1bf      	bne.n	8007e0c <_printf_float+0xf0>
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1bd      	bne.n	8007e0c <_printf_float+0xf0>
 8007e90:	2301      	movs	r3, #1
 8007e92:	e7ba      	b.n	8007e0a <_printf_float+0xee>
 8007e94:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e98:	d9dc      	bls.n	8007e54 <_printf_float+0x138>
 8007e9a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e9e:	d118      	bne.n	8007ed2 <_printf_float+0x1b6>
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	6863      	ldr	r3, [r4, #4]
 8007ea4:	dd0b      	ble.n	8007ebe <_printf_float+0x1a2>
 8007ea6:	6121      	str	r1, [r4, #16]
 8007ea8:	b913      	cbnz	r3, 8007eb0 <_printf_float+0x194>
 8007eaa:	6822      	ldr	r2, [r4, #0]
 8007eac:	07d0      	lsls	r0, r2, #31
 8007eae:	d502      	bpl.n	8007eb6 <_printf_float+0x19a>
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	440b      	add	r3, r1
 8007eb4:	6123      	str	r3, [r4, #16]
 8007eb6:	f04f 0900 	mov.w	r9, #0
 8007eba:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ebc:	e7dc      	b.n	8007e78 <_printf_float+0x15c>
 8007ebe:	b913      	cbnz	r3, 8007ec6 <_printf_float+0x1aa>
 8007ec0:	6822      	ldr	r2, [r4, #0]
 8007ec2:	07d2      	lsls	r2, r2, #31
 8007ec4:	d501      	bpl.n	8007eca <_printf_float+0x1ae>
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	e7f4      	b.n	8007eb4 <_printf_float+0x198>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e7f2      	b.n	8007eb4 <_printf_float+0x198>
 8007ece:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ed4:	4299      	cmp	r1, r3
 8007ed6:	db05      	blt.n	8007ee4 <_printf_float+0x1c8>
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	6121      	str	r1, [r4, #16]
 8007edc:	07d8      	lsls	r0, r3, #31
 8007ede:	d5ea      	bpl.n	8007eb6 <_printf_float+0x19a>
 8007ee0:	1c4b      	adds	r3, r1, #1
 8007ee2:	e7e7      	b.n	8007eb4 <_printf_float+0x198>
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	bfcc      	ite	gt
 8007ee8:	2201      	movgt	r2, #1
 8007eea:	f1c1 0202 	rsble	r2, r1, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	e7e0      	b.n	8007eb4 <_printf_float+0x198>
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	055a      	lsls	r2, r3, #21
 8007ef6:	d407      	bmi.n	8007f08 <_printf_float+0x1ec>
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	4642      	mov	r2, r8
 8007efc:	4631      	mov	r1, r6
 8007efe:	4628      	mov	r0, r5
 8007f00:	47b8      	blx	r7
 8007f02:	3001      	adds	r0, #1
 8007f04:	d12b      	bne.n	8007f5e <_printf_float+0x242>
 8007f06:	e764      	b.n	8007dd2 <_printf_float+0xb6>
 8007f08:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f0c:	f240 80dc 	bls.w	80080c8 <_printf_float+0x3ac>
 8007f10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f14:	2200      	movs	r2, #0
 8007f16:	2300      	movs	r3, #0
 8007f18:	f7f8 fd46 	bl	80009a8 <__aeabi_dcmpeq>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d033      	beq.n	8007f88 <_printf_float+0x26c>
 8007f20:	2301      	movs	r3, #1
 8007f22:	4631      	mov	r1, r6
 8007f24:	4628      	mov	r0, r5
 8007f26:	4a35      	ldr	r2, [pc, #212]	@ (8007ffc <_printf_float+0x2e0>)
 8007f28:	47b8      	blx	r7
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	f43f af51 	beq.w	8007dd2 <_printf_float+0xb6>
 8007f30:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007f34:	4543      	cmp	r3, r8
 8007f36:	db02      	blt.n	8007f3e <_printf_float+0x222>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	07d8      	lsls	r0, r3, #31
 8007f3c:	d50f      	bpl.n	8007f5e <_printf_float+0x242>
 8007f3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f42:	4631      	mov	r1, r6
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b8      	blx	r7
 8007f48:	3001      	adds	r0, #1
 8007f4a:	f43f af42 	beq.w	8007dd2 <_printf_float+0xb6>
 8007f4e:	f04f 0900 	mov.w	r9, #0
 8007f52:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f56:	f104 0a1a 	add.w	sl, r4, #26
 8007f5a:	45c8      	cmp	r8, r9
 8007f5c:	dc09      	bgt.n	8007f72 <_printf_float+0x256>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	079b      	lsls	r3, r3, #30
 8007f62:	f100 8102 	bmi.w	800816a <_printf_float+0x44e>
 8007f66:	68e0      	ldr	r0, [r4, #12]
 8007f68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f6a:	4298      	cmp	r0, r3
 8007f6c:	bfb8      	it	lt
 8007f6e:	4618      	movlt	r0, r3
 8007f70:	e731      	b.n	8007dd6 <_printf_float+0xba>
 8007f72:	2301      	movs	r3, #1
 8007f74:	4652      	mov	r2, sl
 8007f76:	4631      	mov	r1, r6
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b8      	blx	r7
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	f43f af28 	beq.w	8007dd2 <_printf_float+0xb6>
 8007f82:	f109 0901 	add.w	r9, r9, #1
 8007f86:	e7e8      	b.n	8007f5a <_printf_float+0x23e>
 8007f88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dc38      	bgt.n	8008000 <_printf_float+0x2e4>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4631      	mov	r1, r6
 8007f92:	4628      	mov	r0, r5
 8007f94:	4a19      	ldr	r2, [pc, #100]	@ (8007ffc <_printf_float+0x2e0>)
 8007f96:	47b8      	blx	r7
 8007f98:	3001      	adds	r0, #1
 8007f9a:	f43f af1a 	beq.w	8007dd2 <_printf_float+0xb6>
 8007f9e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007fa2:	ea59 0303 	orrs.w	r3, r9, r3
 8007fa6:	d102      	bne.n	8007fae <_printf_float+0x292>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	07d9      	lsls	r1, r3, #31
 8007fac:	d5d7      	bpl.n	8007f5e <_printf_float+0x242>
 8007fae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	47b8      	blx	r7
 8007fb8:	3001      	adds	r0, #1
 8007fba:	f43f af0a 	beq.w	8007dd2 <_printf_float+0xb6>
 8007fbe:	f04f 0a00 	mov.w	sl, #0
 8007fc2:	f104 0b1a 	add.w	fp, r4, #26
 8007fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fc8:	425b      	negs	r3, r3
 8007fca:	4553      	cmp	r3, sl
 8007fcc:	dc01      	bgt.n	8007fd2 <_printf_float+0x2b6>
 8007fce:	464b      	mov	r3, r9
 8007fd0:	e793      	b.n	8007efa <_printf_float+0x1de>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	465a      	mov	r2, fp
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4628      	mov	r0, r5
 8007fda:	47b8      	blx	r7
 8007fdc:	3001      	adds	r0, #1
 8007fde:	f43f aef8 	beq.w	8007dd2 <_printf_float+0xb6>
 8007fe2:	f10a 0a01 	add.w	sl, sl, #1
 8007fe6:	e7ee      	b.n	8007fc6 <_printf_float+0x2aa>
 8007fe8:	7fefffff 	.word	0x7fefffff
 8007fec:	0800b503 	.word	0x0800b503
 8007ff0:	0800b507 	.word	0x0800b507
 8007ff4:	0800b50b 	.word	0x0800b50b
 8007ff8:	0800b50f 	.word	0x0800b50f
 8007ffc:	0800b513 	.word	0x0800b513
 8008000:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008002:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008006:	4553      	cmp	r3, sl
 8008008:	bfa8      	it	ge
 800800a:	4653      	movge	r3, sl
 800800c:	2b00      	cmp	r3, #0
 800800e:	4699      	mov	r9, r3
 8008010:	dc36      	bgt.n	8008080 <_printf_float+0x364>
 8008012:	f04f 0b00 	mov.w	fp, #0
 8008016:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800801a:	f104 021a 	add.w	r2, r4, #26
 800801e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008020:	930a      	str	r3, [sp, #40]	@ 0x28
 8008022:	eba3 0309 	sub.w	r3, r3, r9
 8008026:	455b      	cmp	r3, fp
 8008028:	dc31      	bgt.n	800808e <_printf_float+0x372>
 800802a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800802c:	459a      	cmp	sl, r3
 800802e:	dc3a      	bgt.n	80080a6 <_printf_float+0x38a>
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	07da      	lsls	r2, r3, #31
 8008034:	d437      	bmi.n	80080a6 <_printf_float+0x38a>
 8008036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008038:	ebaa 0903 	sub.w	r9, sl, r3
 800803c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800803e:	ebaa 0303 	sub.w	r3, sl, r3
 8008042:	4599      	cmp	r9, r3
 8008044:	bfa8      	it	ge
 8008046:	4699      	movge	r9, r3
 8008048:	f1b9 0f00 	cmp.w	r9, #0
 800804c:	dc33      	bgt.n	80080b6 <_printf_float+0x39a>
 800804e:	f04f 0800 	mov.w	r8, #0
 8008052:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008056:	f104 0b1a 	add.w	fp, r4, #26
 800805a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800805c:	ebaa 0303 	sub.w	r3, sl, r3
 8008060:	eba3 0309 	sub.w	r3, r3, r9
 8008064:	4543      	cmp	r3, r8
 8008066:	f77f af7a 	ble.w	8007f5e <_printf_float+0x242>
 800806a:	2301      	movs	r3, #1
 800806c:	465a      	mov	r2, fp
 800806e:	4631      	mov	r1, r6
 8008070:	4628      	mov	r0, r5
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	f43f aeac 	beq.w	8007dd2 <_printf_float+0xb6>
 800807a:	f108 0801 	add.w	r8, r8, #1
 800807e:	e7ec      	b.n	800805a <_printf_float+0x33e>
 8008080:	4642      	mov	r2, r8
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	47b8      	blx	r7
 8008088:	3001      	adds	r0, #1
 800808a:	d1c2      	bne.n	8008012 <_printf_float+0x2f6>
 800808c:	e6a1      	b.n	8007dd2 <_printf_float+0xb6>
 800808e:	2301      	movs	r3, #1
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	920a      	str	r2, [sp, #40]	@ 0x28
 8008096:	47b8      	blx	r7
 8008098:	3001      	adds	r0, #1
 800809a:	f43f ae9a 	beq.w	8007dd2 <_printf_float+0xb6>
 800809e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080a0:	f10b 0b01 	add.w	fp, fp, #1
 80080a4:	e7bb      	b.n	800801e <_printf_float+0x302>
 80080a6:	4631      	mov	r1, r6
 80080a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080ac:	4628      	mov	r0, r5
 80080ae:	47b8      	blx	r7
 80080b0:	3001      	adds	r0, #1
 80080b2:	d1c0      	bne.n	8008036 <_printf_float+0x31a>
 80080b4:	e68d      	b.n	8007dd2 <_printf_float+0xb6>
 80080b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080b8:	464b      	mov	r3, r9
 80080ba:	4631      	mov	r1, r6
 80080bc:	4628      	mov	r0, r5
 80080be:	4442      	add	r2, r8
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	d1c3      	bne.n	800804e <_printf_float+0x332>
 80080c6:	e684      	b.n	8007dd2 <_printf_float+0xb6>
 80080c8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80080cc:	f1ba 0f01 	cmp.w	sl, #1
 80080d0:	dc01      	bgt.n	80080d6 <_printf_float+0x3ba>
 80080d2:	07db      	lsls	r3, r3, #31
 80080d4:	d536      	bpl.n	8008144 <_printf_float+0x428>
 80080d6:	2301      	movs	r3, #1
 80080d8:	4642      	mov	r2, r8
 80080da:	4631      	mov	r1, r6
 80080dc:	4628      	mov	r0, r5
 80080de:	47b8      	blx	r7
 80080e0:	3001      	adds	r0, #1
 80080e2:	f43f ae76 	beq.w	8007dd2 <_printf_float+0xb6>
 80080e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080ea:	4631      	mov	r1, r6
 80080ec:	4628      	mov	r0, r5
 80080ee:	47b8      	blx	r7
 80080f0:	3001      	adds	r0, #1
 80080f2:	f43f ae6e 	beq.w	8007dd2 <_printf_float+0xb6>
 80080f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080fa:	2200      	movs	r2, #0
 80080fc:	2300      	movs	r3, #0
 80080fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008102:	f7f8 fc51 	bl	80009a8 <__aeabi_dcmpeq>
 8008106:	b9c0      	cbnz	r0, 800813a <_printf_float+0x41e>
 8008108:	4653      	mov	r3, sl
 800810a:	f108 0201 	add.w	r2, r8, #1
 800810e:	4631      	mov	r1, r6
 8008110:	4628      	mov	r0, r5
 8008112:	47b8      	blx	r7
 8008114:	3001      	adds	r0, #1
 8008116:	d10c      	bne.n	8008132 <_printf_float+0x416>
 8008118:	e65b      	b.n	8007dd2 <_printf_float+0xb6>
 800811a:	2301      	movs	r3, #1
 800811c:	465a      	mov	r2, fp
 800811e:	4631      	mov	r1, r6
 8008120:	4628      	mov	r0, r5
 8008122:	47b8      	blx	r7
 8008124:	3001      	adds	r0, #1
 8008126:	f43f ae54 	beq.w	8007dd2 <_printf_float+0xb6>
 800812a:	f108 0801 	add.w	r8, r8, #1
 800812e:	45d0      	cmp	r8, sl
 8008130:	dbf3      	blt.n	800811a <_printf_float+0x3fe>
 8008132:	464b      	mov	r3, r9
 8008134:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008138:	e6e0      	b.n	8007efc <_printf_float+0x1e0>
 800813a:	f04f 0800 	mov.w	r8, #0
 800813e:	f104 0b1a 	add.w	fp, r4, #26
 8008142:	e7f4      	b.n	800812e <_printf_float+0x412>
 8008144:	2301      	movs	r3, #1
 8008146:	4642      	mov	r2, r8
 8008148:	e7e1      	b.n	800810e <_printf_float+0x3f2>
 800814a:	2301      	movs	r3, #1
 800814c:	464a      	mov	r2, r9
 800814e:	4631      	mov	r1, r6
 8008150:	4628      	mov	r0, r5
 8008152:	47b8      	blx	r7
 8008154:	3001      	adds	r0, #1
 8008156:	f43f ae3c 	beq.w	8007dd2 <_printf_float+0xb6>
 800815a:	f108 0801 	add.w	r8, r8, #1
 800815e:	68e3      	ldr	r3, [r4, #12]
 8008160:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008162:	1a5b      	subs	r3, r3, r1
 8008164:	4543      	cmp	r3, r8
 8008166:	dcf0      	bgt.n	800814a <_printf_float+0x42e>
 8008168:	e6fd      	b.n	8007f66 <_printf_float+0x24a>
 800816a:	f04f 0800 	mov.w	r8, #0
 800816e:	f104 0919 	add.w	r9, r4, #25
 8008172:	e7f4      	b.n	800815e <_printf_float+0x442>

08008174 <_printf_common>:
 8008174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008178:	4616      	mov	r6, r2
 800817a:	4698      	mov	r8, r3
 800817c:	688a      	ldr	r2, [r1, #8]
 800817e:	690b      	ldr	r3, [r1, #16]
 8008180:	4607      	mov	r7, r0
 8008182:	4293      	cmp	r3, r2
 8008184:	bfb8      	it	lt
 8008186:	4613      	movlt	r3, r2
 8008188:	6033      	str	r3, [r6, #0]
 800818a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800818e:	460c      	mov	r4, r1
 8008190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008194:	b10a      	cbz	r2, 800819a <_printf_common+0x26>
 8008196:	3301      	adds	r3, #1
 8008198:	6033      	str	r3, [r6, #0]
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	0699      	lsls	r1, r3, #26
 800819e:	bf42      	ittt	mi
 80081a0:	6833      	ldrmi	r3, [r6, #0]
 80081a2:	3302      	addmi	r3, #2
 80081a4:	6033      	strmi	r3, [r6, #0]
 80081a6:	6825      	ldr	r5, [r4, #0]
 80081a8:	f015 0506 	ands.w	r5, r5, #6
 80081ac:	d106      	bne.n	80081bc <_printf_common+0x48>
 80081ae:	f104 0a19 	add.w	sl, r4, #25
 80081b2:	68e3      	ldr	r3, [r4, #12]
 80081b4:	6832      	ldr	r2, [r6, #0]
 80081b6:	1a9b      	subs	r3, r3, r2
 80081b8:	42ab      	cmp	r3, r5
 80081ba:	dc2b      	bgt.n	8008214 <_printf_common+0xa0>
 80081bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081c0:	6822      	ldr	r2, [r4, #0]
 80081c2:	3b00      	subs	r3, #0
 80081c4:	bf18      	it	ne
 80081c6:	2301      	movne	r3, #1
 80081c8:	0692      	lsls	r2, r2, #26
 80081ca:	d430      	bmi.n	800822e <_printf_common+0xba>
 80081cc:	4641      	mov	r1, r8
 80081ce:	4638      	mov	r0, r7
 80081d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081d4:	47c8      	blx	r9
 80081d6:	3001      	adds	r0, #1
 80081d8:	d023      	beq.n	8008222 <_printf_common+0xae>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	6922      	ldr	r2, [r4, #16]
 80081de:	f003 0306 	and.w	r3, r3, #6
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	bf14      	ite	ne
 80081e6:	2500      	movne	r5, #0
 80081e8:	6833      	ldreq	r3, [r6, #0]
 80081ea:	f04f 0600 	mov.w	r6, #0
 80081ee:	bf08      	it	eq
 80081f0:	68e5      	ldreq	r5, [r4, #12]
 80081f2:	f104 041a 	add.w	r4, r4, #26
 80081f6:	bf08      	it	eq
 80081f8:	1aed      	subeq	r5, r5, r3
 80081fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80081fe:	bf08      	it	eq
 8008200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008204:	4293      	cmp	r3, r2
 8008206:	bfc4      	itt	gt
 8008208:	1a9b      	subgt	r3, r3, r2
 800820a:	18ed      	addgt	r5, r5, r3
 800820c:	42b5      	cmp	r5, r6
 800820e:	d11a      	bne.n	8008246 <_printf_common+0xd2>
 8008210:	2000      	movs	r0, #0
 8008212:	e008      	b.n	8008226 <_printf_common+0xb2>
 8008214:	2301      	movs	r3, #1
 8008216:	4652      	mov	r2, sl
 8008218:	4641      	mov	r1, r8
 800821a:	4638      	mov	r0, r7
 800821c:	47c8      	blx	r9
 800821e:	3001      	adds	r0, #1
 8008220:	d103      	bne.n	800822a <_printf_common+0xb6>
 8008222:	f04f 30ff 	mov.w	r0, #4294967295
 8008226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800822a:	3501      	adds	r5, #1
 800822c:	e7c1      	b.n	80081b2 <_printf_common+0x3e>
 800822e:	2030      	movs	r0, #48	@ 0x30
 8008230:	18e1      	adds	r1, r4, r3
 8008232:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008236:	1c5a      	adds	r2, r3, #1
 8008238:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800823c:	4422      	add	r2, r4
 800823e:	3302      	adds	r3, #2
 8008240:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008244:	e7c2      	b.n	80081cc <_printf_common+0x58>
 8008246:	2301      	movs	r3, #1
 8008248:	4622      	mov	r2, r4
 800824a:	4641      	mov	r1, r8
 800824c:	4638      	mov	r0, r7
 800824e:	47c8      	blx	r9
 8008250:	3001      	adds	r0, #1
 8008252:	d0e6      	beq.n	8008222 <_printf_common+0xae>
 8008254:	3601      	adds	r6, #1
 8008256:	e7d9      	b.n	800820c <_printf_common+0x98>

08008258 <_printf_i>:
 8008258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800825c:	7e0f      	ldrb	r7, [r1, #24]
 800825e:	4691      	mov	r9, r2
 8008260:	2f78      	cmp	r7, #120	@ 0x78
 8008262:	4680      	mov	r8, r0
 8008264:	460c      	mov	r4, r1
 8008266:	469a      	mov	sl, r3
 8008268:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800826a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800826e:	d807      	bhi.n	8008280 <_printf_i+0x28>
 8008270:	2f62      	cmp	r7, #98	@ 0x62
 8008272:	d80a      	bhi.n	800828a <_printf_i+0x32>
 8008274:	2f00      	cmp	r7, #0
 8008276:	f000 80d3 	beq.w	8008420 <_printf_i+0x1c8>
 800827a:	2f58      	cmp	r7, #88	@ 0x58
 800827c:	f000 80ba 	beq.w	80083f4 <_printf_i+0x19c>
 8008280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008284:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008288:	e03a      	b.n	8008300 <_printf_i+0xa8>
 800828a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800828e:	2b15      	cmp	r3, #21
 8008290:	d8f6      	bhi.n	8008280 <_printf_i+0x28>
 8008292:	a101      	add	r1, pc, #4	@ (adr r1, 8008298 <_printf_i+0x40>)
 8008294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008298:	080082f1 	.word	0x080082f1
 800829c:	08008305 	.word	0x08008305
 80082a0:	08008281 	.word	0x08008281
 80082a4:	08008281 	.word	0x08008281
 80082a8:	08008281 	.word	0x08008281
 80082ac:	08008281 	.word	0x08008281
 80082b0:	08008305 	.word	0x08008305
 80082b4:	08008281 	.word	0x08008281
 80082b8:	08008281 	.word	0x08008281
 80082bc:	08008281 	.word	0x08008281
 80082c0:	08008281 	.word	0x08008281
 80082c4:	08008407 	.word	0x08008407
 80082c8:	0800832f 	.word	0x0800832f
 80082cc:	080083c1 	.word	0x080083c1
 80082d0:	08008281 	.word	0x08008281
 80082d4:	08008281 	.word	0x08008281
 80082d8:	08008429 	.word	0x08008429
 80082dc:	08008281 	.word	0x08008281
 80082e0:	0800832f 	.word	0x0800832f
 80082e4:	08008281 	.word	0x08008281
 80082e8:	08008281 	.word	0x08008281
 80082ec:	080083c9 	.word	0x080083c9
 80082f0:	6833      	ldr	r3, [r6, #0]
 80082f2:	1d1a      	adds	r2, r3, #4
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6032      	str	r2, [r6, #0]
 80082f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008300:	2301      	movs	r3, #1
 8008302:	e09e      	b.n	8008442 <_printf_i+0x1ea>
 8008304:	6833      	ldr	r3, [r6, #0]
 8008306:	6820      	ldr	r0, [r4, #0]
 8008308:	1d19      	adds	r1, r3, #4
 800830a:	6031      	str	r1, [r6, #0]
 800830c:	0606      	lsls	r6, r0, #24
 800830e:	d501      	bpl.n	8008314 <_printf_i+0xbc>
 8008310:	681d      	ldr	r5, [r3, #0]
 8008312:	e003      	b.n	800831c <_printf_i+0xc4>
 8008314:	0645      	lsls	r5, r0, #25
 8008316:	d5fb      	bpl.n	8008310 <_printf_i+0xb8>
 8008318:	f9b3 5000 	ldrsh.w	r5, [r3]
 800831c:	2d00      	cmp	r5, #0
 800831e:	da03      	bge.n	8008328 <_printf_i+0xd0>
 8008320:	232d      	movs	r3, #45	@ 0x2d
 8008322:	426d      	negs	r5, r5
 8008324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008328:	230a      	movs	r3, #10
 800832a:	4859      	ldr	r0, [pc, #356]	@ (8008490 <_printf_i+0x238>)
 800832c:	e011      	b.n	8008352 <_printf_i+0xfa>
 800832e:	6821      	ldr	r1, [r4, #0]
 8008330:	6833      	ldr	r3, [r6, #0]
 8008332:	0608      	lsls	r0, r1, #24
 8008334:	f853 5b04 	ldr.w	r5, [r3], #4
 8008338:	d402      	bmi.n	8008340 <_printf_i+0xe8>
 800833a:	0649      	lsls	r1, r1, #25
 800833c:	bf48      	it	mi
 800833e:	b2ad      	uxthmi	r5, r5
 8008340:	2f6f      	cmp	r7, #111	@ 0x6f
 8008342:	6033      	str	r3, [r6, #0]
 8008344:	bf14      	ite	ne
 8008346:	230a      	movne	r3, #10
 8008348:	2308      	moveq	r3, #8
 800834a:	4851      	ldr	r0, [pc, #324]	@ (8008490 <_printf_i+0x238>)
 800834c:	2100      	movs	r1, #0
 800834e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008352:	6866      	ldr	r6, [r4, #4]
 8008354:	2e00      	cmp	r6, #0
 8008356:	bfa8      	it	ge
 8008358:	6821      	ldrge	r1, [r4, #0]
 800835a:	60a6      	str	r6, [r4, #8]
 800835c:	bfa4      	itt	ge
 800835e:	f021 0104 	bicge.w	r1, r1, #4
 8008362:	6021      	strge	r1, [r4, #0]
 8008364:	b90d      	cbnz	r5, 800836a <_printf_i+0x112>
 8008366:	2e00      	cmp	r6, #0
 8008368:	d04b      	beq.n	8008402 <_printf_i+0x1aa>
 800836a:	4616      	mov	r6, r2
 800836c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008370:	fb03 5711 	mls	r7, r3, r1, r5
 8008374:	5dc7      	ldrb	r7, [r0, r7]
 8008376:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800837a:	462f      	mov	r7, r5
 800837c:	42bb      	cmp	r3, r7
 800837e:	460d      	mov	r5, r1
 8008380:	d9f4      	bls.n	800836c <_printf_i+0x114>
 8008382:	2b08      	cmp	r3, #8
 8008384:	d10b      	bne.n	800839e <_printf_i+0x146>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	07df      	lsls	r7, r3, #31
 800838a:	d508      	bpl.n	800839e <_printf_i+0x146>
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	6861      	ldr	r1, [r4, #4]
 8008390:	4299      	cmp	r1, r3
 8008392:	bfde      	ittt	le
 8008394:	2330      	movle	r3, #48	@ 0x30
 8008396:	f806 3c01 	strble.w	r3, [r6, #-1]
 800839a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800839e:	1b92      	subs	r2, r2, r6
 80083a0:	6122      	str	r2, [r4, #16]
 80083a2:	464b      	mov	r3, r9
 80083a4:	4621      	mov	r1, r4
 80083a6:	4640      	mov	r0, r8
 80083a8:	f8cd a000 	str.w	sl, [sp]
 80083ac:	aa03      	add	r2, sp, #12
 80083ae:	f7ff fee1 	bl	8008174 <_printf_common>
 80083b2:	3001      	adds	r0, #1
 80083b4:	d14a      	bne.n	800844c <_printf_i+0x1f4>
 80083b6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ba:	b004      	add	sp, #16
 80083bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	f043 0320 	orr.w	r3, r3, #32
 80083c6:	6023      	str	r3, [r4, #0]
 80083c8:	2778      	movs	r7, #120	@ 0x78
 80083ca:	4832      	ldr	r0, [pc, #200]	@ (8008494 <_printf_i+0x23c>)
 80083cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	6831      	ldr	r1, [r6, #0]
 80083d4:	061f      	lsls	r7, r3, #24
 80083d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80083da:	d402      	bmi.n	80083e2 <_printf_i+0x18a>
 80083dc:	065f      	lsls	r7, r3, #25
 80083de:	bf48      	it	mi
 80083e0:	b2ad      	uxthmi	r5, r5
 80083e2:	6031      	str	r1, [r6, #0]
 80083e4:	07d9      	lsls	r1, r3, #31
 80083e6:	bf44      	itt	mi
 80083e8:	f043 0320 	orrmi.w	r3, r3, #32
 80083ec:	6023      	strmi	r3, [r4, #0]
 80083ee:	b11d      	cbz	r5, 80083f8 <_printf_i+0x1a0>
 80083f0:	2310      	movs	r3, #16
 80083f2:	e7ab      	b.n	800834c <_printf_i+0xf4>
 80083f4:	4826      	ldr	r0, [pc, #152]	@ (8008490 <_printf_i+0x238>)
 80083f6:	e7e9      	b.n	80083cc <_printf_i+0x174>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	f023 0320 	bic.w	r3, r3, #32
 80083fe:	6023      	str	r3, [r4, #0]
 8008400:	e7f6      	b.n	80083f0 <_printf_i+0x198>
 8008402:	4616      	mov	r6, r2
 8008404:	e7bd      	b.n	8008382 <_printf_i+0x12a>
 8008406:	6833      	ldr	r3, [r6, #0]
 8008408:	6825      	ldr	r5, [r4, #0]
 800840a:	1d18      	adds	r0, r3, #4
 800840c:	6961      	ldr	r1, [r4, #20]
 800840e:	6030      	str	r0, [r6, #0]
 8008410:	062e      	lsls	r6, r5, #24
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	d501      	bpl.n	800841a <_printf_i+0x1c2>
 8008416:	6019      	str	r1, [r3, #0]
 8008418:	e002      	b.n	8008420 <_printf_i+0x1c8>
 800841a:	0668      	lsls	r0, r5, #25
 800841c:	d5fb      	bpl.n	8008416 <_printf_i+0x1be>
 800841e:	8019      	strh	r1, [r3, #0]
 8008420:	2300      	movs	r3, #0
 8008422:	4616      	mov	r6, r2
 8008424:	6123      	str	r3, [r4, #16]
 8008426:	e7bc      	b.n	80083a2 <_printf_i+0x14a>
 8008428:	6833      	ldr	r3, [r6, #0]
 800842a:	2100      	movs	r1, #0
 800842c:	1d1a      	adds	r2, r3, #4
 800842e:	6032      	str	r2, [r6, #0]
 8008430:	681e      	ldr	r6, [r3, #0]
 8008432:	6862      	ldr	r2, [r4, #4]
 8008434:	4630      	mov	r0, r6
 8008436:	f000 fa10 	bl	800885a <memchr>
 800843a:	b108      	cbz	r0, 8008440 <_printf_i+0x1e8>
 800843c:	1b80      	subs	r0, r0, r6
 800843e:	6060      	str	r0, [r4, #4]
 8008440:	6863      	ldr	r3, [r4, #4]
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	2300      	movs	r3, #0
 8008446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800844a:	e7aa      	b.n	80083a2 <_printf_i+0x14a>
 800844c:	4632      	mov	r2, r6
 800844e:	4649      	mov	r1, r9
 8008450:	4640      	mov	r0, r8
 8008452:	6923      	ldr	r3, [r4, #16]
 8008454:	47d0      	blx	sl
 8008456:	3001      	adds	r0, #1
 8008458:	d0ad      	beq.n	80083b6 <_printf_i+0x15e>
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	079b      	lsls	r3, r3, #30
 800845e:	d413      	bmi.n	8008488 <_printf_i+0x230>
 8008460:	68e0      	ldr	r0, [r4, #12]
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	4298      	cmp	r0, r3
 8008466:	bfb8      	it	lt
 8008468:	4618      	movlt	r0, r3
 800846a:	e7a6      	b.n	80083ba <_printf_i+0x162>
 800846c:	2301      	movs	r3, #1
 800846e:	4632      	mov	r2, r6
 8008470:	4649      	mov	r1, r9
 8008472:	4640      	mov	r0, r8
 8008474:	47d0      	blx	sl
 8008476:	3001      	adds	r0, #1
 8008478:	d09d      	beq.n	80083b6 <_printf_i+0x15e>
 800847a:	3501      	adds	r5, #1
 800847c:	68e3      	ldr	r3, [r4, #12]
 800847e:	9903      	ldr	r1, [sp, #12]
 8008480:	1a5b      	subs	r3, r3, r1
 8008482:	42ab      	cmp	r3, r5
 8008484:	dcf2      	bgt.n	800846c <_printf_i+0x214>
 8008486:	e7eb      	b.n	8008460 <_printf_i+0x208>
 8008488:	2500      	movs	r5, #0
 800848a:	f104 0619 	add.w	r6, r4, #25
 800848e:	e7f5      	b.n	800847c <_printf_i+0x224>
 8008490:	0800b515 	.word	0x0800b515
 8008494:	0800b526 	.word	0x0800b526

08008498 <std>:
 8008498:	2300      	movs	r3, #0
 800849a:	b510      	push	{r4, lr}
 800849c:	4604      	mov	r4, r0
 800849e:	e9c0 3300 	strd	r3, r3, [r0]
 80084a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084a6:	6083      	str	r3, [r0, #8]
 80084a8:	8181      	strh	r1, [r0, #12]
 80084aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80084ac:	81c2      	strh	r2, [r0, #14]
 80084ae:	6183      	str	r3, [r0, #24]
 80084b0:	4619      	mov	r1, r3
 80084b2:	2208      	movs	r2, #8
 80084b4:	305c      	adds	r0, #92	@ 0x5c
 80084b6:	f000 f914 	bl	80086e2 <memset>
 80084ba:	4b0d      	ldr	r3, [pc, #52]	@ (80084f0 <std+0x58>)
 80084bc:	6224      	str	r4, [r4, #32]
 80084be:	6263      	str	r3, [r4, #36]	@ 0x24
 80084c0:	4b0c      	ldr	r3, [pc, #48]	@ (80084f4 <std+0x5c>)
 80084c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084c4:	4b0c      	ldr	r3, [pc, #48]	@ (80084f8 <std+0x60>)
 80084c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084c8:	4b0c      	ldr	r3, [pc, #48]	@ (80084fc <std+0x64>)
 80084ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80084cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008500 <std+0x68>)
 80084ce:	429c      	cmp	r4, r3
 80084d0:	d006      	beq.n	80084e0 <std+0x48>
 80084d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084d6:	4294      	cmp	r4, r2
 80084d8:	d002      	beq.n	80084e0 <std+0x48>
 80084da:	33d0      	adds	r3, #208	@ 0xd0
 80084dc:	429c      	cmp	r4, r3
 80084de:	d105      	bne.n	80084ec <std+0x54>
 80084e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e8:	f000 b9ac 	b.w	8008844 <__retarget_lock_init_recursive>
 80084ec:	bd10      	pop	{r4, pc}
 80084ee:	bf00      	nop
 80084f0:	0800865d 	.word	0x0800865d
 80084f4:	0800867f 	.word	0x0800867f
 80084f8:	080086b7 	.word	0x080086b7
 80084fc:	080086db 	.word	0x080086db
 8008500:	20000550 	.word	0x20000550

08008504 <stdio_exit_handler>:
 8008504:	4a02      	ldr	r2, [pc, #8]	@ (8008510 <stdio_exit_handler+0xc>)
 8008506:	4903      	ldr	r1, [pc, #12]	@ (8008514 <stdio_exit_handler+0x10>)
 8008508:	4803      	ldr	r0, [pc, #12]	@ (8008518 <stdio_exit_handler+0x14>)
 800850a:	f000 b869 	b.w	80085e0 <_fwalk_sglue>
 800850e:	bf00      	nop
 8008510:	20000028 	.word	0x20000028
 8008514:	0800a089 	.word	0x0800a089
 8008518:	20000038 	.word	0x20000038

0800851c <cleanup_stdio>:
 800851c:	6841      	ldr	r1, [r0, #4]
 800851e:	4b0c      	ldr	r3, [pc, #48]	@ (8008550 <cleanup_stdio+0x34>)
 8008520:	b510      	push	{r4, lr}
 8008522:	4299      	cmp	r1, r3
 8008524:	4604      	mov	r4, r0
 8008526:	d001      	beq.n	800852c <cleanup_stdio+0x10>
 8008528:	f001 fdae 	bl	800a088 <_fflush_r>
 800852c:	68a1      	ldr	r1, [r4, #8]
 800852e:	4b09      	ldr	r3, [pc, #36]	@ (8008554 <cleanup_stdio+0x38>)
 8008530:	4299      	cmp	r1, r3
 8008532:	d002      	beq.n	800853a <cleanup_stdio+0x1e>
 8008534:	4620      	mov	r0, r4
 8008536:	f001 fda7 	bl	800a088 <_fflush_r>
 800853a:	68e1      	ldr	r1, [r4, #12]
 800853c:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <cleanup_stdio+0x3c>)
 800853e:	4299      	cmp	r1, r3
 8008540:	d004      	beq.n	800854c <cleanup_stdio+0x30>
 8008542:	4620      	mov	r0, r4
 8008544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008548:	f001 bd9e 	b.w	800a088 <_fflush_r>
 800854c:	bd10      	pop	{r4, pc}
 800854e:	bf00      	nop
 8008550:	20000550 	.word	0x20000550
 8008554:	200005b8 	.word	0x200005b8
 8008558:	20000620 	.word	0x20000620

0800855c <global_stdio_init.part.0>:
 800855c:	b510      	push	{r4, lr}
 800855e:	4b0b      	ldr	r3, [pc, #44]	@ (800858c <global_stdio_init.part.0+0x30>)
 8008560:	4c0b      	ldr	r4, [pc, #44]	@ (8008590 <global_stdio_init.part.0+0x34>)
 8008562:	4a0c      	ldr	r2, [pc, #48]	@ (8008594 <global_stdio_init.part.0+0x38>)
 8008564:	4620      	mov	r0, r4
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	2104      	movs	r1, #4
 800856a:	2200      	movs	r2, #0
 800856c:	f7ff ff94 	bl	8008498 <std>
 8008570:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008574:	2201      	movs	r2, #1
 8008576:	2109      	movs	r1, #9
 8008578:	f7ff ff8e 	bl	8008498 <std>
 800857c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008580:	2202      	movs	r2, #2
 8008582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008586:	2112      	movs	r1, #18
 8008588:	f7ff bf86 	b.w	8008498 <std>
 800858c:	20000688 	.word	0x20000688
 8008590:	20000550 	.word	0x20000550
 8008594:	08008505 	.word	0x08008505

08008598 <__sfp_lock_acquire>:
 8008598:	4801      	ldr	r0, [pc, #4]	@ (80085a0 <__sfp_lock_acquire+0x8>)
 800859a:	f000 b954 	b.w	8008846 <__retarget_lock_acquire_recursive>
 800859e:	bf00      	nop
 80085a0:	20000691 	.word	0x20000691

080085a4 <__sfp_lock_release>:
 80085a4:	4801      	ldr	r0, [pc, #4]	@ (80085ac <__sfp_lock_release+0x8>)
 80085a6:	f000 b94f 	b.w	8008848 <__retarget_lock_release_recursive>
 80085aa:	bf00      	nop
 80085ac:	20000691 	.word	0x20000691

080085b0 <__sinit>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	4604      	mov	r4, r0
 80085b4:	f7ff fff0 	bl	8008598 <__sfp_lock_acquire>
 80085b8:	6a23      	ldr	r3, [r4, #32]
 80085ba:	b11b      	cbz	r3, 80085c4 <__sinit+0x14>
 80085bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c0:	f7ff bff0 	b.w	80085a4 <__sfp_lock_release>
 80085c4:	4b04      	ldr	r3, [pc, #16]	@ (80085d8 <__sinit+0x28>)
 80085c6:	6223      	str	r3, [r4, #32]
 80085c8:	4b04      	ldr	r3, [pc, #16]	@ (80085dc <__sinit+0x2c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1f5      	bne.n	80085bc <__sinit+0xc>
 80085d0:	f7ff ffc4 	bl	800855c <global_stdio_init.part.0>
 80085d4:	e7f2      	b.n	80085bc <__sinit+0xc>
 80085d6:	bf00      	nop
 80085d8:	0800851d 	.word	0x0800851d
 80085dc:	20000688 	.word	0x20000688

080085e0 <_fwalk_sglue>:
 80085e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e4:	4607      	mov	r7, r0
 80085e6:	4688      	mov	r8, r1
 80085e8:	4614      	mov	r4, r2
 80085ea:	2600      	movs	r6, #0
 80085ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085f0:	f1b9 0901 	subs.w	r9, r9, #1
 80085f4:	d505      	bpl.n	8008602 <_fwalk_sglue+0x22>
 80085f6:	6824      	ldr	r4, [r4, #0]
 80085f8:	2c00      	cmp	r4, #0
 80085fa:	d1f7      	bne.n	80085ec <_fwalk_sglue+0xc>
 80085fc:	4630      	mov	r0, r6
 80085fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d907      	bls.n	8008618 <_fwalk_sglue+0x38>
 8008608:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800860c:	3301      	adds	r3, #1
 800860e:	d003      	beq.n	8008618 <_fwalk_sglue+0x38>
 8008610:	4629      	mov	r1, r5
 8008612:	4638      	mov	r0, r7
 8008614:	47c0      	blx	r8
 8008616:	4306      	orrs	r6, r0
 8008618:	3568      	adds	r5, #104	@ 0x68
 800861a:	e7e9      	b.n	80085f0 <_fwalk_sglue+0x10>

0800861c <siprintf>:
 800861c:	b40e      	push	{r1, r2, r3}
 800861e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008622:	b500      	push	{lr}
 8008624:	b09c      	sub	sp, #112	@ 0x70
 8008626:	ab1d      	add	r3, sp, #116	@ 0x74
 8008628:	9002      	str	r0, [sp, #8]
 800862a:	9006      	str	r0, [sp, #24]
 800862c:	9107      	str	r1, [sp, #28]
 800862e:	9104      	str	r1, [sp, #16]
 8008630:	4808      	ldr	r0, [pc, #32]	@ (8008654 <siprintf+0x38>)
 8008632:	4909      	ldr	r1, [pc, #36]	@ (8008658 <siprintf+0x3c>)
 8008634:	f853 2b04 	ldr.w	r2, [r3], #4
 8008638:	9105      	str	r1, [sp, #20]
 800863a:	6800      	ldr	r0, [r0, #0]
 800863c:	a902      	add	r1, sp, #8
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	f001 fba6 	bl	8009d90 <_svfiprintf_r>
 8008644:	2200      	movs	r2, #0
 8008646:	9b02      	ldr	r3, [sp, #8]
 8008648:	701a      	strb	r2, [r3, #0]
 800864a:	b01c      	add	sp, #112	@ 0x70
 800864c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008650:	b003      	add	sp, #12
 8008652:	4770      	bx	lr
 8008654:	20000034 	.word	0x20000034
 8008658:	ffff0208 	.word	0xffff0208

0800865c <__sread>:
 800865c:	b510      	push	{r4, lr}
 800865e:	460c      	mov	r4, r1
 8008660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008664:	f000 f890 	bl	8008788 <_read_r>
 8008668:	2800      	cmp	r0, #0
 800866a:	bfab      	itete	ge
 800866c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800866e:	89a3      	ldrhlt	r3, [r4, #12]
 8008670:	181b      	addge	r3, r3, r0
 8008672:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008676:	bfac      	ite	ge
 8008678:	6563      	strge	r3, [r4, #84]	@ 0x54
 800867a:	81a3      	strhlt	r3, [r4, #12]
 800867c:	bd10      	pop	{r4, pc}

0800867e <__swrite>:
 800867e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008682:	461f      	mov	r7, r3
 8008684:	898b      	ldrh	r3, [r1, #12]
 8008686:	4605      	mov	r5, r0
 8008688:	05db      	lsls	r3, r3, #23
 800868a:	460c      	mov	r4, r1
 800868c:	4616      	mov	r6, r2
 800868e:	d505      	bpl.n	800869c <__swrite+0x1e>
 8008690:	2302      	movs	r3, #2
 8008692:	2200      	movs	r2, #0
 8008694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008698:	f000 f864 	bl	8008764 <_lseek_r>
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	4632      	mov	r2, r6
 80086a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086a4:	81a3      	strh	r3, [r4, #12]
 80086a6:	4628      	mov	r0, r5
 80086a8:	463b      	mov	r3, r7
 80086aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086b2:	f000 b88b 	b.w	80087cc <_write_r>

080086b6 <__sseek>:
 80086b6:	b510      	push	{r4, lr}
 80086b8:	460c      	mov	r4, r1
 80086ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086be:	f000 f851 	bl	8008764 <_lseek_r>
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	89a3      	ldrh	r3, [r4, #12]
 80086c6:	bf15      	itete	ne
 80086c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80086ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80086ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80086d2:	81a3      	strheq	r3, [r4, #12]
 80086d4:	bf18      	it	ne
 80086d6:	81a3      	strhne	r3, [r4, #12]
 80086d8:	bd10      	pop	{r4, pc}

080086da <__sclose>:
 80086da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086de:	f000 b831 	b.w	8008744 <_close_r>

080086e2 <memset>:
 80086e2:	4603      	mov	r3, r0
 80086e4:	4402      	add	r2, r0
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d100      	bne.n	80086ec <memset+0xa>
 80086ea:	4770      	bx	lr
 80086ec:	f803 1b01 	strb.w	r1, [r3], #1
 80086f0:	e7f9      	b.n	80086e6 <memset+0x4>

080086f2 <strncmp>:
 80086f2:	b510      	push	{r4, lr}
 80086f4:	b16a      	cbz	r2, 8008712 <strncmp+0x20>
 80086f6:	3901      	subs	r1, #1
 80086f8:	1884      	adds	r4, r0, r2
 80086fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008702:	429a      	cmp	r2, r3
 8008704:	d103      	bne.n	800870e <strncmp+0x1c>
 8008706:	42a0      	cmp	r0, r4
 8008708:	d001      	beq.n	800870e <strncmp+0x1c>
 800870a:	2a00      	cmp	r2, #0
 800870c:	d1f5      	bne.n	80086fa <strncmp+0x8>
 800870e:	1ad0      	subs	r0, r2, r3
 8008710:	bd10      	pop	{r4, pc}
 8008712:	4610      	mov	r0, r2
 8008714:	e7fc      	b.n	8008710 <strncmp+0x1e>

08008716 <strncpy>:
 8008716:	4603      	mov	r3, r0
 8008718:	b510      	push	{r4, lr}
 800871a:	3901      	subs	r1, #1
 800871c:	b132      	cbz	r2, 800872c <strncpy+0x16>
 800871e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008722:	3a01      	subs	r2, #1
 8008724:	f803 4b01 	strb.w	r4, [r3], #1
 8008728:	2c00      	cmp	r4, #0
 800872a:	d1f7      	bne.n	800871c <strncpy+0x6>
 800872c:	2100      	movs	r1, #0
 800872e:	441a      	add	r2, r3
 8008730:	4293      	cmp	r3, r2
 8008732:	d100      	bne.n	8008736 <strncpy+0x20>
 8008734:	bd10      	pop	{r4, pc}
 8008736:	f803 1b01 	strb.w	r1, [r3], #1
 800873a:	e7f9      	b.n	8008730 <strncpy+0x1a>

0800873c <_localeconv_r>:
 800873c:	4800      	ldr	r0, [pc, #0]	@ (8008740 <_localeconv_r+0x4>)
 800873e:	4770      	bx	lr
 8008740:	20000174 	.word	0x20000174

08008744 <_close_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	2300      	movs	r3, #0
 8008748:	4d05      	ldr	r5, [pc, #20]	@ (8008760 <_close_r+0x1c>)
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	602b      	str	r3, [r5, #0]
 8008750:	f7f9 fc9d 	bl	800208e <_close>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d102      	bne.n	800875e <_close_r+0x1a>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	b103      	cbz	r3, 800875e <_close_r+0x1a>
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	2000068c 	.word	0x2000068c

08008764 <_lseek_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4604      	mov	r4, r0
 8008768:	4608      	mov	r0, r1
 800876a:	4611      	mov	r1, r2
 800876c:	2200      	movs	r2, #0
 800876e:	4d05      	ldr	r5, [pc, #20]	@ (8008784 <_lseek_r+0x20>)
 8008770:	602a      	str	r2, [r5, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	f7f9 fcaf 	bl	80020d6 <_lseek>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <_lseek_r+0x1e>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	b103      	cbz	r3, 8008782 <_lseek_r+0x1e>
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	2000068c 	.word	0x2000068c

08008788 <_read_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4604      	mov	r4, r0
 800878c:	4608      	mov	r0, r1
 800878e:	4611      	mov	r1, r2
 8008790:	2200      	movs	r2, #0
 8008792:	4d05      	ldr	r5, [pc, #20]	@ (80087a8 <_read_r+0x20>)
 8008794:	602a      	str	r2, [r5, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	f7f9 fc40 	bl	800201c <_read>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_read_r+0x1e>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_read_r+0x1e>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	2000068c 	.word	0x2000068c

080087ac <_sbrk_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	2300      	movs	r3, #0
 80087b0:	4d05      	ldr	r5, [pc, #20]	@ (80087c8 <_sbrk_r+0x1c>)
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	f7f9 fc9a 	bl	80020f0 <_sbrk>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_sbrk_r+0x1a>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_sbrk_r+0x1a>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	2000068c 	.word	0x2000068c

080087cc <_write_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	4611      	mov	r1, r2
 80087d4:	2200      	movs	r2, #0
 80087d6:	4d05      	ldr	r5, [pc, #20]	@ (80087ec <_write_r+0x20>)
 80087d8:	602a      	str	r2, [r5, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	f7f9 fc3b 	bl	8002056 <_write>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_write_r+0x1e>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_write_r+0x1e>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	2000068c 	.word	0x2000068c

080087f0 <__errno>:
 80087f0:	4b01      	ldr	r3, [pc, #4]	@ (80087f8 <__errno+0x8>)
 80087f2:	6818      	ldr	r0, [r3, #0]
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	20000034 	.word	0x20000034

080087fc <__libc_init_array>:
 80087fc:	b570      	push	{r4, r5, r6, lr}
 80087fe:	2600      	movs	r6, #0
 8008800:	4d0c      	ldr	r5, [pc, #48]	@ (8008834 <__libc_init_array+0x38>)
 8008802:	4c0d      	ldr	r4, [pc, #52]	@ (8008838 <__libc_init_array+0x3c>)
 8008804:	1b64      	subs	r4, r4, r5
 8008806:	10a4      	asrs	r4, r4, #2
 8008808:	42a6      	cmp	r6, r4
 800880a:	d109      	bne.n	8008820 <__libc_init_array+0x24>
 800880c:	f002 fd7e 	bl	800b30c <_init>
 8008810:	2600      	movs	r6, #0
 8008812:	4d0a      	ldr	r5, [pc, #40]	@ (800883c <__libc_init_array+0x40>)
 8008814:	4c0a      	ldr	r4, [pc, #40]	@ (8008840 <__libc_init_array+0x44>)
 8008816:	1b64      	subs	r4, r4, r5
 8008818:	10a4      	asrs	r4, r4, #2
 800881a:	42a6      	cmp	r6, r4
 800881c:	d105      	bne.n	800882a <__libc_init_array+0x2e>
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	f855 3b04 	ldr.w	r3, [r5], #4
 8008824:	4798      	blx	r3
 8008826:	3601      	adds	r6, #1
 8008828:	e7ee      	b.n	8008808 <__libc_init_array+0xc>
 800882a:	f855 3b04 	ldr.w	r3, [r5], #4
 800882e:	4798      	blx	r3
 8008830:	3601      	adds	r6, #1
 8008832:	e7f2      	b.n	800881a <__libc_init_array+0x1e>
 8008834:	0800bb50 	.word	0x0800bb50
 8008838:	0800bb50 	.word	0x0800bb50
 800883c:	0800bb50 	.word	0x0800bb50
 8008840:	0800bb54 	.word	0x0800bb54

08008844 <__retarget_lock_init_recursive>:
 8008844:	4770      	bx	lr

08008846 <__retarget_lock_acquire_recursive>:
 8008846:	4770      	bx	lr

08008848 <__retarget_lock_release_recursive>:
 8008848:	4770      	bx	lr

0800884a <strcpy>:
 800884a:	4603      	mov	r3, r0
 800884c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008850:	f803 2b01 	strb.w	r2, [r3], #1
 8008854:	2a00      	cmp	r2, #0
 8008856:	d1f9      	bne.n	800884c <strcpy+0x2>
 8008858:	4770      	bx	lr

0800885a <memchr>:
 800885a:	4603      	mov	r3, r0
 800885c:	b510      	push	{r4, lr}
 800885e:	b2c9      	uxtb	r1, r1
 8008860:	4402      	add	r2, r0
 8008862:	4293      	cmp	r3, r2
 8008864:	4618      	mov	r0, r3
 8008866:	d101      	bne.n	800886c <memchr+0x12>
 8008868:	2000      	movs	r0, #0
 800886a:	e003      	b.n	8008874 <memchr+0x1a>
 800886c:	7804      	ldrb	r4, [r0, #0]
 800886e:	3301      	adds	r3, #1
 8008870:	428c      	cmp	r4, r1
 8008872:	d1f6      	bne.n	8008862 <memchr+0x8>
 8008874:	bd10      	pop	{r4, pc}

08008876 <memcpy>:
 8008876:	440a      	add	r2, r1
 8008878:	4291      	cmp	r1, r2
 800887a:	f100 33ff 	add.w	r3, r0, #4294967295
 800887e:	d100      	bne.n	8008882 <memcpy+0xc>
 8008880:	4770      	bx	lr
 8008882:	b510      	push	{r4, lr}
 8008884:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008888:	4291      	cmp	r1, r2
 800888a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800888e:	d1f9      	bne.n	8008884 <memcpy+0xe>
 8008890:	bd10      	pop	{r4, pc}

08008892 <quorem>:
 8008892:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008896:	6903      	ldr	r3, [r0, #16]
 8008898:	690c      	ldr	r4, [r1, #16]
 800889a:	4607      	mov	r7, r0
 800889c:	42a3      	cmp	r3, r4
 800889e:	db7e      	blt.n	800899e <quorem+0x10c>
 80088a0:	3c01      	subs	r4, #1
 80088a2:	00a3      	lsls	r3, r4, #2
 80088a4:	f100 0514 	add.w	r5, r0, #20
 80088a8:	f101 0814 	add.w	r8, r1, #20
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088bc:	3301      	adds	r3, #1
 80088be:	429a      	cmp	r2, r3
 80088c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80088c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088c8:	d32e      	bcc.n	8008928 <quorem+0x96>
 80088ca:	f04f 0a00 	mov.w	sl, #0
 80088ce:	46c4      	mov	ip, r8
 80088d0:	46ae      	mov	lr, r5
 80088d2:	46d3      	mov	fp, sl
 80088d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088d8:	b298      	uxth	r0, r3
 80088da:	fb06 a000 	mla	r0, r6, r0, sl
 80088de:	0c1b      	lsrs	r3, r3, #16
 80088e0:	0c02      	lsrs	r2, r0, #16
 80088e2:	fb06 2303 	mla	r3, r6, r3, r2
 80088e6:	f8de 2000 	ldr.w	r2, [lr]
 80088ea:	b280      	uxth	r0, r0
 80088ec:	b292      	uxth	r2, r2
 80088ee:	1a12      	subs	r2, r2, r0
 80088f0:	445a      	add	r2, fp
 80088f2:	f8de 0000 	ldr.w	r0, [lr]
 80088f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008900:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008904:	b292      	uxth	r2, r2
 8008906:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800890a:	45e1      	cmp	r9, ip
 800890c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008910:	f84e 2b04 	str.w	r2, [lr], #4
 8008914:	d2de      	bcs.n	80088d4 <quorem+0x42>
 8008916:	9b00      	ldr	r3, [sp, #0]
 8008918:	58eb      	ldr	r3, [r5, r3]
 800891a:	b92b      	cbnz	r3, 8008928 <quorem+0x96>
 800891c:	9b01      	ldr	r3, [sp, #4]
 800891e:	3b04      	subs	r3, #4
 8008920:	429d      	cmp	r5, r3
 8008922:	461a      	mov	r2, r3
 8008924:	d32f      	bcc.n	8008986 <quorem+0xf4>
 8008926:	613c      	str	r4, [r7, #16]
 8008928:	4638      	mov	r0, r7
 800892a:	f001 f8c5 	bl	8009ab8 <__mcmp>
 800892e:	2800      	cmp	r0, #0
 8008930:	db25      	blt.n	800897e <quorem+0xec>
 8008932:	4629      	mov	r1, r5
 8008934:	2000      	movs	r0, #0
 8008936:	f858 2b04 	ldr.w	r2, [r8], #4
 800893a:	f8d1 c000 	ldr.w	ip, [r1]
 800893e:	fa1f fe82 	uxth.w	lr, r2
 8008942:	fa1f f38c 	uxth.w	r3, ip
 8008946:	eba3 030e 	sub.w	r3, r3, lr
 800894a:	4403      	add	r3, r0
 800894c:	0c12      	lsrs	r2, r2, #16
 800894e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008952:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008956:	b29b      	uxth	r3, r3
 8008958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800895c:	45c1      	cmp	r9, r8
 800895e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008962:	f841 3b04 	str.w	r3, [r1], #4
 8008966:	d2e6      	bcs.n	8008936 <quorem+0xa4>
 8008968:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800896c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008970:	b922      	cbnz	r2, 800897c <quorem+0xea>
 8008972:	3b04      	subs	r3, #4
 8008974:	429d      	cmp	r5, r3
 8008976:	461a      	mov	r2, r3
 8008978:	d30b      	bcc.n	8008992 <quorem+0x100>
 800897a:	613c      	str	r4, [r7, #16]
 800897c:	3601      	adds	r6, #1
 800897e:	4630      	mov	r0, r6
 8008980:	b003      	add	sp, #12
 8008982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008986:	6812      	ldr	r2, [r2, #0]
 8008988:	3b04      	subs	r3, #4
 800898a:	2a00      	cmp	r2, #0
 800898c:	d1cb      	bne.n	8008926 <quorem+0x94>
 800898e:	3c01      	subs	r4, #1
 8008990:	e7c6      	b.n	8008920 <quorem+0x8e>
 8008992:	6812      	ldr	r2, [r2, #0]
 8008994:	3b04      	subs	r3, #4
 8008996:	2a00      	cmp	r2, #0
 8008998:	d1ef      	bne.n	800897a <quorem+0xe8>
 800899a:	3c01      	subs	r4, #1
 800899c:	e7ea      	b.n	8008974 <quorem+0xe2>
 800899e:	2000      	movs	r0, #0
 80089a0:	e7ee      	b.n	8008980 <quorem+0xee>
 80089a2:	0000      	movs	r0, r0
 80089a4:	0000      	movs	r0, r0
	...

080089a8 <_dtoa_r>:
 80089a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	4614      	mov	r4, r2
 80089ae:	461d      	mov	r5, r3
 80089b0:	69c7      	ldr	r7, [r0, #28]
 80089b2:	b097      	sub	sp, #92	@ 0x5c
 80089b4:	4683      	mov	fp, r0
 80089b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80089ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80089bc:	b97f      	cbnz	r7, 80089de <_dtoa_r+0x36>
 80089be:	2010      	movs	r0, #16
 80089c0:	f7fe ff96 	bl	80078f0 <malloc>
 80089c4:	4602      	mov	r2, r0
 80089c6:	f8cb 001c 	str.w	r0, [fp, #28]
 80089ca:	b920      	cbnz	r0, 80089d6 <_dtoa_r+0x2e>
 80089cc:	21ef      	movs	r1, #239	@ 0xef
 80089ce:	4ba8      	ldr	r3, [pc, #672]	@ (8008c70 <_dtoa_r+0x2c8>)
 80089d0:	48a8      	ldr	r0, [pc, #672]	@ (8008c74 <_dtoa_r+0x2cc>)
 80089d2:	f001 fb9b 	bl	800a10c <__assert_func>
 80089d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80089da:	6007      	str	r7, [r0, #0]
 80089dc:	60c7      	str	r7, [r0, #12]
 80089de:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089e2:	6819      	ldr	r1, [r3, #0]
 80089e4:	b159      	cbz	r1, 80089fe <_dtoa_r+0x56>
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	2301      	movs	r3, #1
 80089ea:	4093      	lsls	r3, r2
 80089ec:	604a      	str	r2, [r1, #4]
 80089ee:	608b      	str	r3, [r1, #8]
 80089f0:	4658      	mov	r0, fp
 80089f2:	f000 fe29 	bl	8009648 <_Bfree>
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	1e2b      	subs	r3, r5, #0
 8008a00:	bfaf      	iteee	ge
 8008a02:	2300      	movge	r3, #0
 8008a04:	2201      	movlt	r2, #1
 8008a06:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a0a:	9303      	strlt	r3, [sp, #12]
 8008a0c:	bfa8      	it	ge
 8008a0e:	6033      	strge	r3, [r6, #0]
 8008a10:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008a14:	4b98      	ldr	r3, [pc, #608]	@ (8008c78 <_dtoa_r+0x2d0>)
 8008a16:	bfb8      	it	lt
 8008a18:	6032      	strlt	r2, [r6, #0]
 8008a1a:	ea33 0308 	bics.w	r3, r3, r8
 8008a1e:	d112      	bne.n	8008a46 <_dtoa_r+0x9e>
 8008a20:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a24:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008a2c:	4323      	orrs	r3, r4
 8008a2e:	f000 8550 	beq.w	80094d2 <_dtoa_r+0xb2a>
 8008a32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a34:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008c7c <_dtoa_r+0x2d4>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 8552 	beq.w	80094e2 <_dtoa_r+0xb3a>
 8008a3e:	f10a 0303 	add.w	r3, sl, #3
 8008a42:	f000 bd4c 	b.w	80094de <_dtoa_r+0xb36>
 8008a46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a4a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008a4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a52:	2200      	movs	r2, #0
 8008a54:	2300      	movs	r3, #0
 8008a56:	f7f7 ffa7 	bl	80009a8 <__aeabi_dcmpeq>
 8008a5a:	4607      	mov	r7, r0
 8008a5c:	b158      	cbz	r0, 8008a76 <_dtoa_r+0xce>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008a62:	6013      	str	r3, [r2, #0]
 8008a64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a66:	b113      	cbz	r3, 8008a6e <_dtoa_r+0xc6>
 8008a68:	4b85      	ldr	r3, [pc, #532]	@ (8008c80 <_dtoa_r+0x2d8>)
 8008a6a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008c84 <_dtoa_r+0x2dc>
 8008a72:	f000 bd36 	b.w	80094e2 <_dtoa_r+0xb3a>
 8008a76:	ab14      	add	r3, sp, #80	@ 0x50
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	ab15      	add	r3, sp, #84	@ 0x54
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	4658      	mov	r0, fp
 8008a80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a84:	f001 f8c8 	bl	8009c18 <__d2b>
 8008a88:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008a8c:	4681      	mov	r9, r0
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	d077      	beq.n	8008b82 <_dtoa_r+0x1da>
 8008a92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a98:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aa0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008aa4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008aa8:	9712      	str	r7, [sp, #72]	@ 0x48
 8008aaa:	4619      	mov	r1, r3
 8008aac:	2200      	movs	r2, #0
 8008aae:	4b76      	ldr	r3, [pc, #472]	@ (8008c88 <_dtoa_r+0x2e0>)
 8008ab0:	f7f7 fb5a 	bl	8000168 <__aeabi_dsub>
 8008ab4:	a368      	add	r3, pc, #416	@ (adr r3, 8008c58 <_dtoa_r+0x2b0>)
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	f7f7 fd0d 	bl	80004d8 <__aeabi_dmul>
 8008abe:	a368      	add	r3, pc, #416	@ (adr r3, 8008c60 <_dtoa_r+0x2b8>)
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	f7f7 fb52 	bl	800016c <__adddf3>
 8008ac8:	4604      	mov	r4, r0
 8008aca:	4630      	mov	r0, r6
 8008acc:	460d      	mov	r5, r1
 8008ace:	f7f7 fc99 	bl	8000404 <__aeabi_i2d>
 8008ad2:	a365      	add	r3, pc, #404	@ (adr r3, 8008c68 <_dtoa_r+0x2c0>)
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	f7f7 fcfe 	bl	80004d8 <__aeabi_dmul>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	f7f7 fb42 	bl	800016c <__adddf3>
 8008ae8:	4604      	mov	r4, r0
 8008aea:	460d      	mov	r5, r1
 8008aec:	f7f7 ffa4 	bl	8000a38 <__aeabi_d2iz>
 8008af0:	2200      	movs	r2, #0
 8008af2:	4607      	mov	r7, r0
 8008af4:	2300      	movs	r3, #0
 8008af6:	4620      	mov	r0, r4
 8008af8:	4629      	mov	r1, r5
 8008afa:	f7f7 ff5f 	bl	80009bc <__aeabi_dcmplt>
 8008afe:	b140      	cbz	r0, 8008b12 <_dtoa_r+0x16a>
 8008b00:	4638      	mov	r0, r7
 8008b02:	f7f7 fc7f 	bl	8000404 <__aeabi_i2d>
 8008b06:	4622      	mov	r2, r4
 8008b08:	462b      	mov	r3, r5
 8008b0a:	f7f7 ff4d 	bl	80009a8 <__aeabi_dcmpeq>
 8008b0e:	b900      	cbnz	r0, 8008b12 <_dtoa_r+0x16a>
 8008b10:	3f01      	subs	r7, #1
 8008b12:	2f16      	cmp	r7, #22
 8008b14:	d853      	bhi.n	8008bbe <_dtoa_r+0x216>
 8008b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8008c8c <_dtoa_r+0x2e4>)
 8008b1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f7f7 ff4a 	bl	80009bc <__aeabi_dcmplt>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d04a      	beq.n	8008bc2 <_dtoa_r+0x21a>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	3f01      	subs	r7, #1
 8008b30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b34:	1b9b      	subs	r3, r3, r6
 8008b36:	1e5a      	subs	r2, r3, #1
 8008b38:	bf46      	itte	mi
 8008b3a:	f1c3 0801 	rsbmi	r8, r3, #1
 8008b3e:	2300      	movmi	r3, #0
 8008b40:	f04f 0800 	movpl.w	r8, #0
 8008b44:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b46:	bf48      	it	mi
 8008b48:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008b4a:	2f00      	cmp	r7, #0
 8008b4c:	db3b      	blt.n	8008bc6 <_dtoa_r+0x21e>
 8008b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b50:	970e      	str	r7, [sp, #56]	@ 0x38
 8008b52:	443b      	add	r3, r7
 8008b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b56:	2300      	movs	r3, #0
 8008b58:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b5c:	2b09      	cmp	r3, #9
 8008b5e:	d866      	bhi.n	8008c2e <_dtoa_r+0x286>
 8008b60:	2b05      	cmp	r3, #5
 8008b62:	bfc4      	itt	gt
 8008b64:	3b04      	subgt	r3, #4
 8008b66:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008b68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b6a:	bfc8      	it	gt
 8008b6c:	2400      	movgt	r4, #0
 8008b6e:	f1a3 0302 	sub.w	r3, r3, #2
 8008b72:	bfd8      	it	le
 8008b74:	2401      	movle	r4, #1
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d864      	bhi.n	8008c44 <_dtoa_r+0x29c>
 8008b7a:	e8df f003 	tbb	[pc, r3]
 8008b7e:	382b      	.short	0x382b
 8008b80:	5636      	.short	0x5636
 8008b82:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008b86:	441e      	add	r6, r3
 8008b88:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b8c:	2b20      	cmp	r3, #32
 8008b8e:	bfc1      	itttt	gt
 8008b90:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b94:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b98:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008b9c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008ba0:	bfd6      	itet	le
 8008ba2:	f1c3 0320 	rsble	r3, r3, #32
 8008ba6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008baa:	fa04 f003 	lslle.w	r0, r4, r3
 8008bae:	f7f7 fc19 	bl	80003e4 <__aeabi_ui2d>
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008bb8:	3e01      	subs	r6, #1
 8008bba:	9212      	str	r2, [sp, #72]	@ 0x48
 8008bbc:	e775      	b.n	8008aaa <_dtoa_r+0x102>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e7b6      	b.n	8008b30 <_dtoa_r+0x188>
 8008bc2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008bc4:	e7b5      	b.n	8008b32 <_dtoa_r+0x18a>
 8008bc6:	427b      	negs	r3, r7
 8008bc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bca:	2300      	movs	r3, #0
 8008bcc:	eba8 0807 	sub.w	r8, r8, r7
 8008bd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008bd2:	e7c2      	b.n	8008b5a <_dtoa_r+0x1b2>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	dc35      	bgt.n	8008c4a <_dtoa_r+0x2a2>
 8008bde:	2301      	movs	r3, #1
 8008be0:	461a      	mov	r2, r3
 8008be2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008be6:	9221      	str	r2, [sp, #132]	@ 0x84
 8008be8:	e00b      	b.n	8008c02 <_dtoa_r+0x25a>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e7f3      	b.n	8008bd6 <_dtoa_r+0x22e>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bf2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bf4:	18fb      	adds	r3, r7, r3
 8008bf6:	9308      	str	r3, [sp, #32]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	9307      	str	r3, [sp, #28]
 8008bfe:	bfb8      	it	lt
 8008c00:	2301      	movlt	r3, #1
 8008c02:	2100      	movs	r1, #0
 8008c04:	2204      	movs	r2, #4
 8008c06:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008c0a:	f102 0514 	add.w	r5, r2, #20
 8008c0e:	429d      	cmp	r5, r3
 8008c10:	d91f      	bls.n	8008c52 <_dtoa_r+0x2aa>
 8008c12:	6041      	str	r1, [r0, #4]
 8008c14:	4658      	mov	r0, fp
 8008c16:	f000 fcd7 	bl	80095c8 <_Balloc>
 8008c1a:	4682      	mov	sl, r0
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d139      	bne.n	8008c94 <_dtoa_r+0x2ec>
 8008c20:	4602      	mov	r2, r0
 8008c22:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c26:	4b1a      	ldr	r3, [pc, #104]	@ (8008c90 <_dtoa_r+0x2e8>)
 8008c28:	e6d2      	b.n	80089d0 <_dtoa_r+0x28>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e7e0      	b.n	8008bf0 <_dtoa_r+0x248>
 8008c2e:	2401      	movs	r4, #1
 8008c30:	2300      	movs	r3, #0
 8008c32:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c34:	9320      	str	r3, [sp, #128]	@ 0x80
 8008c36:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008c40:	2312      	movs	r3, #18
 8008c42:	e7d0      	b.n	8008be6 <_dtoa_r+0x23e>
 8008c44:	2301      	movs	r3, #1
 8008c46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c48:	e7f5      	b.n	8008c36 <_dtoa_r+0x28e>
 8008c4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c4c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008c50:	e7d7      	b.n	8008c02 <_dtoa_r+0x25a>
 8008c52:	3101      	adds	r1, #1
 8008c54:	0052      	lsls	r2, r2, #1
 8008c56:	e7d8      	b.n	8008c0a <_dtoa_r+0x262>
 8008c58:	636f4361 	.word	0x636f4361
 8008c5c:	3fd287a7 	.word	0x3fd287a7
 8008c60:	8b60c8b3 	.word	0x8b60c8b3
 8008c64:	3fc68a28 	.word	0x3fc68a28
 8008c68:	509f79fb 	.word	0x509f79fb
 8008c6c:	3fd34413 	.word	0x3fd34413
 8008c70:	0800b544 	.word	0x0800b544
 8008c74:	0800b55b 	.word	0x0800b55b
 8008c78:	7ff00000 	.word	0x7ff00000
 8008c7c:	0800b540 	.word	0x0800b540
 8008c80:	0800b514 	.word	0x0800b514
 8008c84:	0800b513 	.word	0x0800b513
 8008c88:	3ff80000 	.word	0x3ff80000
 8008c8c:	0800b658 	.word	0x0800b658
 8008c90:	0800b5b3 	.word	0x0800b5b3
 8008c94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c98:	6018      	str	r0, [r3, #0]
 8008c9a:	9b07      	ldr	r3, [sp, #28]
 8008c9c:	2b0e      	cmp	r3, #14
 8008c9e:	f200 80a4 	bhi.w	8008dea <_dtoa_r+0x442>
 8008ca2:	2c00      	cmp	r4, #0
 8008ca4:	f000 80a1 	beq.w	8008dea <_dtoa_r+0x442>
 8008ca8:	2f00      	cmp	r7, #0
 8008caa:	dd33      	ble.n	8008d14 <_dtoa_r+0x36c>
 8008cac:	4b86      	ldr	r3, [pc, #536]	@ (8008ec8 <_dtoa_r+0x520>)
 8008cae:	f007 020f 	and.w	r2, r7, #15
 8008cb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cb6:	05f8      	lsls	r0, r7, #23
 8008cb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cbc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008cc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008cc4:	d516      	bpl.n	8008cf4 <_dtoa_r+0x34c>
 8008cc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cca:	4b80      	ldr	r3, [pc, #512]	@ (8008ecc <_dtoa_r+0x524>)
 8008ccc:	2603      	movs	r6, #3
 8008cce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cd2:	f7f7 fd2b 	bl	800072c <__aeabi_ddiv>
 8008cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cda:	f004 040f 	and.w	r4, r4, #15
 8008cde:	4d7b      	ldr	r5, [pc, #492]	@ (8008ecc <_dtoa_r+0x524>)
 8008ce0:	b954      	cbnz	r4, 8008cf8 <_dtoa_r+0x350>
 8008ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cea:	f7f7 fd1f 	bl	800072c <__aeabi_ddiv>
 8008cee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cf2:	e028      	b.n	8008d46 <_dtoa_r+0x39e>
 8008cf4:	2602      	movs	r6, #2
 8008cf6:	e7f2      	b.n	8008cde <_dtoa_r+0x336>
 8008cf8:	07e1      	lsls	r1, r4, #31
 8008cfa:	d508      	bpl.n	8008d0e <_dtoa_r+0x366>
 8008cfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d04:	f7f7 fbe8 	bl	80004d8 <__aeabi_dmul>
 8008d08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d0c:	3601      	adds	r6, #1
 8008d0e:	1064      	asrs	r4, r4, #1
 8008d10:	3508      	adds	r5, #8
 8008d12:	e7e5      	b.n	8008ce0 <_dtoa_r+0x338>
 8008d14:	f000 80d2 	beq.w	8008ebc <_dtoa_r+0x514>
 8008d18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d1c:	427c      	negs	r4, r7
 8008d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8008ec8 <_dtoa_r+0x520>)
 8008d20:	f004 020f 	and.w	r2, r4, #15
 8008d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2c:	f7f7 fbd4 	bl	80004d8 <__aeabi_dmul>
 8008d30:	2602      	movs	r6, #2
 8008d32:	2300      	movs	r3, #0
 8008d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d38:	4d64      	ldr	r5, [pc, #400]	@ (8008ecc <_dtoa_r+0x524>)
 8008d3a:	1124      	asrs	r4, r4, #4
 8008d3c:	2c00      	cmp	r4, #0
 8008d3e:	f040 80b2 	bne.w	8008ea6 <_dtoa_r+0x4fe>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1d3      	bne.n	8008cee <_dtoa_r+0x346>
 8008d46:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 80b7 	beq.w	8008ec0 <_dtoa_r+0x518>
 8008d52:	2200      	movs	r2, #0
 8008d54:	4620      	mov	r0, r4
 8008d56:	4629      	mov	r1, r5
 8008d58:	4b5d      	ldr	r3, [pc, #372]	@ (8008ed0 <_dtoa_r+0x528>)
 8008d5a:	f7f7 fe2f 	bl	80009bc <__aeabi_dcmplt>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f000 80ae 	beq.w	8008ec0 <_dtoa_r+0x518>
 8008d64:	9b07      	ldr	r3, [sp, #28]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 80aa 	beq.w	8008ec0 <_dtoa_r+0x518>
 8008d6c:	9b08      	ldr	r3, [sp, #32]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	dd37      	ble.n	8008de2 <_dtoa_r+0x43a>
 8008d72:	1e7b      	subs	r3, r7, #1
 8008d74:	4620      	mov	r0, r4
 8008d76:	9304      	str	r3, [sp, #16]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	4b55      	ldr	r3, [pc, #340]	@ (8008ed4 <_dtoa_r+0x52c>)
 8008d7e:	f7f7 fbab 	bl	80004d8 <__aeabi_dmul>
 8008d82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d86:	9c08      	ldr	r4, [sp, #32]
 8008d88:	3601      	adds	r6, #1
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f7f7 fb3a 	bl	8000404 <__aeabi_i2d>
 8008d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d94:	f7f7 fba0 	bl	80004d8 <__aeabi_dmul>
 8008d98:	2200      	movs	r2, #0
 8008d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8008ed8 <_dtoa_r+0x530>)
 8008d9c:	f7f7 f9e6 	bl	800016c <__adddf3>
 8008da0:	4605      	mov	r5, r0
 8008da2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008da6:	2c00      	cmp	r4, #0
 8008da8:	f040 809a 	bne.w	8008ee0 <_dtoa_r+0x538>
 8008dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008db0:	2200      	movs	r2, #0
 8008db2:	4b4a      	ldr	r3, [pc, #296]	@ (8008edc <_dtoa_r+0x534>)
 8008db4:	f7f7 f9d8 	bl	8000168 <__aeabi_dsub>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dc0:	462a      	mov	r2, r5
 8008dc2:	4633      	mov	r3, r6
 8008dc4:	f7f7 fe18 	bl	80009f8 <__aeabi_dcmpgt>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	f040 828e 	bne.w	80092ea <_dtoa_r+0x942>
 8008dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008dd8:	f7f7 fdf0 	bl	80009bc <__aeabi_dcmplt>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	f040 8127 	bne.w	8009030 <_dtoa_r+0x688>
 8008de2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008de6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008dea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f2c0 8163 	blt.w	80090b8 <_dtoa_r+0x710>
 8008df2:	2f0e      	cmp	r7, #14
 8008df4:	f300 8160 	bgt.w	80090b8 <_dtoa_r+0x710>
 8008df8:	4b33      	ldr	r3, [pc, #204]	@ (8008ec8 <_dtoa_r+0x520>)
 8008dfa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008dfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008e06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	da03      	bge.n	8008e14 <_dtoa_r+0x46c>
 8008e0c:	9b07      	ldr	r3, [sp, #28]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f340 8100 	ble.w	8009014 <_dtoa_r+0x66c>
 8008e14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e18:	4656      	mov	r6, sl
 8008e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	f7f7 fc83 	bl	800072c <__aeabi_ddiv>
 8008e26:	f7f7 fe07 	bl	8000a38 <__aeabi_d2iz>
 8008e2a:	4680      	mov	r8, r0
 8008e2c:	f7f7 faea 	bl	8000404 <__aeabi_i2d>
 8008e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e34:	f7f7 fb50 	bl	80004d8 <__aeabi_dmul>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	4629      	mov	r1, r5
 8008e40:	f7f7 f992 	bl	8000168 <__aeabi_dsub>
 8008e44:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e48:	9d07      	ldr	r5, [sp, #28]
 8008e4a:	f806 4b01 	strb.w	r4, [r6], #1
 8008e4e:	eba6 040a 	sub.w	r4, r6, sl
 8008e52:	42a5      	cmp	r5, r4
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	f040 8116 	bne.w	8009088 <_dtoa_r+0x6e0>
 8008e5c:	f7f7 f986 	bl	800016c <__adddf3>
 8008e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e64:	4604      	mov	r4, r0
 8008e66:	460d      	mov	r5, r1
 8008e68:	f7f7 fdc6 	bl	80009f8 <__aeabi_dcmpgt>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	f040 80f8 	bne.w	8009062 <_dtoa_r+0x6ba>
 8008e72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e76:	4620      	mov	r0, r4
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7f7 fd95 	bl	80009a8 <__aeabi_dcmpeq>
 8008e7e:	b118      	cbz	r0, 8008e88 <_dtoa_r+0x4e0>
 8008e80:	f018 0f01 	tst.w	r8, #1
 8008e84:	f040 80ed 	bne.w	8009062 <_dtoa_r+0x6ba>
 8008e88:	4649      	mov	r1, r9
 8008e8a:	4658      	mov	r0, fp
 8008e8c:	f000 fbdc 	bl	8009648 <_Bfree>
 8008e90:	2300      	movs	r3, #0
 8008e92:	7033      	strb	r3, [r6, #0]
 8008e94:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e96:	3701      	adds	r7, #1
 8008e98:	601f      	str	r7, [r3, #0]
 8008e9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 8320 	beq.w	80094e2 <_dtoa_r+0xb3a>
 8008ea2:	601e      	str	r6, [r3, #0]
 8008ea4:	e31d      	b.n	80094e2 <_dtoa_r+0xb3a>
 8008ea6:	07e2      	lsls	r2, r4, #31
 8008ea8:	d505      	bpl.n	8008eb6 <_dtoa_r+0x50e>
 8008eaa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008eae:	f7f7 fb13 	bl	80004d8 <__aeabi_dmul>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	3601      	adds	r6, #1
 8008eb6:	1064      	asrs	r4, r4, #1
 8008eb8:	3508      	adds	r5, #8
 8008eba:	e73f      	b.n	8008d3c <_dtoa_r+0x394>
 8008ebc:	2602      	movs	r6, #2
 8008ebe:	e742      	b.n	8008d46 <_dtoa_r+0x39e>
 8008ec0:	9c07      	ldr	r4, [sp, #28]
 8008ec2:	9704      	str	r7, [sp, #16]
 8008ec4:	e761      	b.n	8008d8a <_dtoa_r+0x3e2>
 8008ec6:	bf00      	nop
 8008ec8:	0800b658 	.word	0x0800b658
 8008ecc:	0800b630 	.word	0x0800b630
 8008ed0:	3ff00000 	.word	0x3ff00000
 8008ed4:	40240000 	.word	0x40240000
 8008ed8:	401c0000 	.word	0x401c0000
 8008edc:	40140000 	.word	0x40140000
 8008ee0:	4b70      	ldr	r3, [pc, #448]	@ (80090a4 <_dtoa_r+0x6fc>)
 8008ee2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ee4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ee8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008eec:	4454      	add	r4, sl
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	d045      	beq.n	8008f7e <_dtoa_r+0x5d6>
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	496c      	ldr	r1, [pc, #432]	@ (80090a8 <_dtoa_r+0x700>)
 8008ef6:	f7f7 fc19 	bl	800072c <__aeabi_ddiv>
 8008efa:	4633      	mov	r3, r6
 8008efc:	462a      	mov	r2, r5
 8008efe:	f7f7 f933 	bl	8000168 <__aeabi_dsub>
 8008f02:	4656      	mov	r6, sl
 8008f04:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f0c:	f7f7 fd94 	bl	8000a38 <__aeabi_d2iz>
 8008f10:	4605      	mov	r5, r0
 8008f12:	f7f7 fa77 	bl	8000404 <__aeabi_i2d>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f1e:	f7f7 f923 	bl	8000168 <__aeabi_dsub>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	3530      	adds	r5, #48	@ 0x30
 8008f28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f30:	f806 5b01 	strb.w	r5, [r6], #1
 8008f34:	f7f7 fd42 	bl	80009bc <__aeabi_dcmplt>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d163      	bne.n	8009004 <_dtoa_r+0x65c>
 8008f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f40:	2000      	movs	r0, #0
 8008f42:	495a      	ldr	r1, [pc, #360]	@ (80090ac <_dtoa_r+0x704>)
 8008f44:	f7f7 f910 	bl	8000168 <__aeabi_dsub>
 8008f48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f4c:	f7f7 fd36 	bl	80009bc <__aeabi_dcmplt>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	f040 8087 	bne.w	8009064 <_dtoa_r+0x6bc>
 8008f56:	42a6      	cmp	r6, r4
 8008f58:	f43f af43 	beq.w	8008de2 <_dtoa_r+0x43a>
 8008f5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f60:	2200      	movs	r2, #0
 8008f62:	4b53      	ldr	r3, [pc, #332]	@ (80090b0 <_dtoa_r+0x708>)
 8008f64:	f7f7 fab8 	bl	80004d8 <__aeabi_dmul>
 8008f68:	2200      	movs	r2, #0
 8008f6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f72:	4b4f      	ldr	r3, [pc, #316]	@ (80090b0 <_dtoa_r+0x708>)
 8008f74:	f7f7 fab0 	bl	80004d8 <__aeabi_dmul>
 8008f78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f7c:	e7c4      	b.n	8008f08 <_dtoa_r+0x560>
 8008f7e:	4631      	mov	r1, r6
 8008f80:	4628      	mov	r0, r5
 8008f82:	f7f7 faa9 	bl	80004d8 <__aeabi_dmul>
 8008f86:	4656      	mov	r6, sl
 8008f88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f8c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f92:	f7f7 fd51 	bl	8000a38 <__aeabi_d2iz>
 8008f96:	4605      	mov	r5, r0
 8008f98:	f7f7 fa34 	bl	8000404 <__aeabi_i2d>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fa4:	f7f7 f8e0 	bl	8000168 <__aeabi_dsub>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	3530      	adds	r5, #48	@ 0x30
 8008fae:	f806 5b01 	strb.w	r5, [r6], #1
 8008fb2:	42a6      	cmp	r6, r4
 8008fb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	d124      	bne.n	8009008 <_dtoa_r+0x660>
 8008fbe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008fc2:	4b39      	ldr	r3, [pc, #228]	@ (80090a8 <_dtoa_r+0x700>)
 8008fc4:	f7f7 f8d2 	bl	800016c <__adddf3>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fd0:	f7f7 fd12 	bl	80009f8 <__aeabi_dcmpgt>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d145      	bne.n	8009064 <_dtoa_r+0x6bc>
 8008fd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fdc:	2000      	movs	r0, #0
 8008fde:	4932      	ldr	r1, [pc, #200]	@ (80090a8 <_dtoa_r+0x700>)
 8008fe0:	f7f7 f8c2 	bl	8000168 <__aeabi_dsub>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fec:	f7f7 fce6 	bl	80009bc <__aeabi_dcmplt>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	f43f aef6 	beq.w	8008de2 <_dtoa_r+0x43a>
 8008ff6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008ff8:	1e73      	subs	r3, r6, #1
 8008ffa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ffc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009000:	2b30      	cmp	r3, #48	@ 0x30
 8009002:	d0f8      	beq.n	8008ff6 <_dtoa_r+0x64e>
 8009004:	9f04      	ldr	r7, [sp, #16]
 8009006:	e73f      	b.n	8008e88 <_dtoa_r+0x4e0>
 8009008:	4b29      	ldr	r3, [pc, #164]	@ (80090b0 <_dtoa_r+0x708>)
 800900a:	f7f7 fa65 	bl	80004d8 <__aeabi_dmul>
 800900e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009012:	e7bc      	b.n	8008f8e <_dtoa_r+0x5e6>
 8009014:	d10c      	bne.n	8009030 <_dtoa_r+0x688>
 8009016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800901a:	2200      	movs	r2, #0
 800901c:	4b25      	ldr	r3, [pc, #148]	@ (80090b4 <_dtoa_r+0x70c>)
 800901e:	f7f7 fa5b 	bl	80004d8 <__aeabi_dmul>
 8009022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009026:	f7f7 fcdd 	bl	80009e4 <__aeabi_dcmpge>
 800902a:	2800      	cmp	r0, #0
 800902c:	f000 815b 	beq.w	80092e6 <_dtoa_r+0x93e>
 8009030:	2400      	movs	r4, #0
 8009032:	4625      	mov	r5, r4
 8009034:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009036:	4656      	mov	r6, sl
 8009038:	43db      	mvns	r3, r3
 800903a:	9304      	str	r3, [sp, #16]
 800903c:	2700      	movs	r7, #0
 800903e:	4621      	mov	r1, r4
 8009040:	4658      	mov	r0, fp
 8009042:	f000 fb01 	bl	8009648 <_Bfree>
 8009046:	2d00      	cmp	r5, #0
 8009048:	d0dc      	beq.n	8009004 <_dtoa_r+0x65c>
 800904a:	b12f      	cbz	r7, 8009058 <_dtoa_r+0x6b0>
 800904c:	42af      	cmp	r7, r5
 800904e:	d003      	beq.n	8009058 <_dtoa_r+0x6b0>
 8009050:	4639      	mov	r1, r7
 8009052:	4658      	mov	r0, fp
 8009054:	f000 faf8 	bl	8009648 <_Bfree>
 8009058:	4629      	mov	r1, r5
 800905a:	4658      	mov	r0, fp
 800905c:	f000 faf4 	bl	8009648 <_Bfree>
 8009060:	e7d0      	b.n	8009004 <_dtoa_r+0x65c>
 8009062:	9704      	str	r7, [sp, #16]
 8009064:	4633      	mov	r3, r6
 8009066:	461e      	mov	r6, r3
 8009068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800906c:	2a39      	cmp	r2, #57	@ 0x39
 800906e:	d107      	bne.n	8009080 <_dtoa_r+0x6d8>
 8009070:	459a      	cmp	sl, r3
 8009072:	d1f8      	bne.n	8009066 <_dtoa_r+0x6be>
 8009074:	9a04      	ldr	r2, [sp, #16]
 8009076:	3201      	adds	r2, #1
 8009078:	9204      	str	r2, [sp, #16]
 800907a:	2230      	movs	r2, #48	@ 0x30
 800907c:	f88a 2000 	strb.w	r2, [sl]
 8009080:	781a      	ldrb	r2, [r3, #0]
 8009082:	3201      	adds	r2, #1
 8009084:	701a      	strb	r2, [r3, #0]
 8009086:	e7bd      	b.n	8009004 <_dtoa_r+0x65c>
 8009088:	2200      	movs	r2, #0
 800908a:	4b09      	ldr	r3, [pc, #36]	@ (80090b0 <_dtoa_r+0x708>)
 800908c:	f7f7 fa24 	bl	80004d8 <__aeabi_dmul>
 8009090:	2200      	movs	r2, #0
 8009092:	2300      	movs	r3, #0
 8009094:	4604      	mov	r4, r0
 8009096:	460d      	mov	r5, r1
 8009098:	f7f7 fc86 	bl	80009a8 <__aeabi_dcmpeq>
 800909c:	2800      	cmp	r0, #0
 800909e:	f43f aebc 	beq.w	8008e1a <_dtoa_r+0x472>
 80090a2:	e6f1      	b.n	8008e88 <_dtoa_r+0x4e0>
 80090a4:	0800b658 	.word	0x0800b658
 80090a8:	3fe00000 	.word	0x3fe00000
 80090ac:	3ff00000 	.word	0x3ff00000
 80090b0:	40240000 	.word	0x40240000
 80090b4:	40140000 	.word	0x40140000
 80090b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	f000 80db 	beq.w	8009276 <_dtoa_r+0x8ce>
 80090c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80090c2:	2a01      	cmp	r2, #1
 80090c4:	f300 80bf 	bgt.w	8009246 <_dtoa_r+0x89e>
 80090c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80090ca:	2a00      	cmp	r2, #0
 80090cc:	f000 80b7 	beq.w	800923e <_dtoa_r+0x896>
 80090d0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80090d4:	4646      	mov	r6, r8
 80090d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090da:	2101      	movs	r1, #1
 80090dc:	441a      	add	r2, r3
 80090de:	4658      	mov	r0, fp
 80090e0:	4498      	add	r8, r3
 80090e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80090e4:	f000 fb64 	bl	80097b0 <__i2b>
 80090e8:	4605      	mov	r5, r0
 80090ea:	b15e      	cbz	r6, 8009104 <_dtoa_r+0x75c>
 80090ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	dd08      	ble.n	8009104 <_dtoa_r+0x75c>
 80090f2:	42b3      	cmp	r3, r6
 80090f4:	bfa8      	it	ge
 80090f6:	4633      	movge	r3, r6
 80090f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090fa:	eba8 0803 	sub.w	r8, r8, r3
 80090fe:	1af6      	subs	r6, r6, r3
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	9309      	str	r3, [sp, #36]	@ 0x24
 8009104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009106:	b1f3      	cbz	r3, 8009146 <_dtoa_r+0x79e>
 8009108:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 80b7 	beq.w	800927e <_dtoa_r+0x8d6>
 8009110:	b18c      	cbz	r4, 8009136 <_dtoa_r+0x78e>
 8009112:	4629      	mov	r1, r5
 8009114:	4622      	mov	r2, r4
 8009116:	4658      	mov	r0, fp
 8009118:	f000 fc08 	bl	800992c <__pow5mult>
 800911c:	464a      	mov	r2, r9
 800911e:	4601      	mov	r1, r0
 8009120:	4605      	mov	r5, r0
 8009122:	4658      	mov	r0, fp
 8009124:	f000 fb5a 	bl	80097dc <__multiply>
 8009128:	4649      	mov	r1, r9
 800912a:	9004      	str	r0, [sp, #16]
 800912c:	4658      	mov	r0, fp
 800912e:	f000 fa8b 	bl	8009648 <_Bfree>
 8009132:	9b04      	ldr	r3, [sp, #16]
 8009134:	4699      	mov	r9, r3
 8009136:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009138:	1b1a      	subs	r2, r3, r4
 800913a:	d004      	beq.n	8009146 <_dtoa_r+0x79e>
 800913c:	4649      	mov	r1, r9
 800913e:	4658      	mov	r0, fp
 8009140:	f000 fbf4 	bl	800992c <__pow5mult>
 8009144:	4681      	mov	r9, r0
 8009146:	2101      	movs	r1, #1
 8009148:	4658      	mov	r0, fp
 800914a:	f000 fb31 	bl	80097b0 <__i2b>
 800914e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009150:	4604      	mov	r4, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	f000 81c9 	beq.w	80094ea <_dtoa_r+0xb42>
 8009158:	461a      	mov	r2, r3
 800915a:	4601      	mov	r1, r0
 800915c:	4658      	mov	r0, fp
 800915e:	f000 fbe5 	bl	800992c <__pow5mult>
 8009162:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009164:	4604      	mov	r4, r0
 8009166:	2b01      	cmp	r3, #1
 8009168:	f300 808f 	bgt.w	800928a <_dtoa_r+0x8e2>
 800916c:	9b02      	ldr	r3, [sp, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	f040 8087 	bne.w	8009282 <_dtoa_r+0x8da>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800917a:	2b00      	cmp	r3, #0
 800917c:	f040 8083 	bne.w	8009286 <_dtoa_r+0x8de>
 8009180:	9b03      	ldr	r3, [sp, #12]
 8009182:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009186:	0d1b      	lsrs	r3, r3, #20
 8009188:	051b      	lsls	r3, r3, #20
 800918a:	b12b      	cbz	r3, 8009198 <_dtoa_r+0x7f0>
 800918c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800918e:	f108 0801 	add.w	r8, r8, #1
 8009192:	3301      	adds	r3, #1
 8009194:	9309      	str	r3, [sp, #36]	@ 0x24
 8009196:	2301      	movs	r3, #1
 8009198:	930a      	str	r3, [sp, #40]	@ 0x28
 800919a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 81aa 	beq.w	80094f6 <_dtoa_r+0xb4e>
 80091a2:	6923      	ldr	r3, [r4, #16]
 80091a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091a8:	6918      	ldr	r0, [r3, #16]
 80091aa:	f000 fab5 	bl	8009718 <__hi0bits>
 80091ae:	f1c0 0020 	rsb	r0, r0, #32
 80091b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091b4:	4418      	add	r0, r3
 80091b6:	f010 001f 	ands.w	r0, r0, #31
 80091ba:	d071      	beq.n	80092a0 <_dtoa_r+0x8f8>
 80091bc:	f1c0 0320 	rsb	r3, r0, #32
 80091c0:	2b04      	cmp	r3, #4
 80091c2:	dd65      	ble.n	8009290 <_dtoa_r+0x8e8>
 80091c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c6:	f1c0 001c 	rsb	r0, r0, #28
 80091ca:	4403      	add	r3, r0
 80091cc:	4480      	add	r8, r0
 80091ce:	4406      	add	r6, r0
 80091d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80091d2:	f1b8 0f00 	cmp.w	r8, #0
 80091d6:	dd05      	ble.n	80091e4 <_dtoa_r+0x83c>
 80091d8:	4649      	mov	r1, r9
 80091da:	4642      	mov	r2, r8
 80091dc:	4658      	mov	r0, fp
 80091de:	f000 fbff 	bl	80099e0 <__lshift>
 80091e2:	4681      	mov	r9, r0
 80091e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	dd05      	ble.n	80091f6 <_dtoa_r+0x84e>
 80091ea:	4621      	mov	r1, r4
 80091ec:	461a      	mov	r2, r3
 80091ee:	4658      	mov	r0, fp
 80091f0:	f000 fbf6 	bl	80099e0 <__lshift>
 80091f4:	4604      	mov	r4, r0
 80091f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d053      	beq.n	80092a4 <_dtoa_r+0x8fc>
 80091fc:	4621      	mov	r1, r4
 80091fe:	4648      	mov	r0, r9
 8009200:	f000 fc5a 	bl	8009ab8 <__mcmp>
 8009204:	2800      	cmp	r0, #0
 8009206:	da4d      	bge.n	80092a4 <_dtoa_r+0x8fc>
 8009208:	1e7b      	subs	r3, r7, #1
 800920a:	4649      	mov	r1, r9
 800920c:	9304      	str	r3, [sp, #16]
 800920e:	220a      	movs	r2, #10
 8009210:	2300      	movs	r3, #0
 8009212:	4658      	mov	r0, fp
 8009214:	f000 fa3a 	bl	800968c <__multadd>
 8009218:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800921a:	4681      	mov	r9, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 816c 	beq.w	80094fa <_dtoa_r+0xb52>
 8009222:	2300      	movs	r3, #0
 8009224:	4629      	mov	r1, r5
 8009226:	220a      	movs	r2, #10
 8009228:	4658      	mov	r0, fp
 800922a:	f000 fa2f 	bl	800968c <__multadd>
 800922e:	9b08      	ldr	r3, [sp, #32]
 8009230:	4605      	mov	r5, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	dc61      	bgt.n	80092fa <_dtoa_r+0x952>
 8009236:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009238:	2b02      	cmp	r3, #2
 800923a:	dc3b      	bgt.n	80092b4 <_dtoa_r+0x90c>
 800923c:	e05d      	b.n	80092fa <_dtoa_r+0x952>
 800923e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009240:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009244:	e746      	b.n	80090d4 <_dtoa_r+0x72c>
 8009246:	9b07      	ldr	r3, [sp, #28]
 8009248:	1e5c      	subs	r4, r3, #1
 800924a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800924c:	42a3      	cmp	r3, r4
 800924e:	bfbf      	itttt	lt
 8009250:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009252:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009254:	1ae3      	sublt	r3, r4, r3
 8009256:	18d2      	addlt	r2, r2, r3
 8009258:	bfa8      	it	ge
 800925a:	1b1c      	subge	r4, r3, r4
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	bfbe      	ittt	lt
 8009260:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009262:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009264:	2400      	movlt	r4, #0
 8009266:	2b00      	cmp	r3, #0
 8009268:	bfb5      	itete	lt
 800926a:	eba8 0603 	sublt.w	r6, r8, r3
 800926e:	4646      	movge	r6, r8
 8009270:	2300      	movlt	r3, #0
 8009272:	9b07      	ldrge	r3, [sp, #28]
 8009274:	e730      	b.n	80090d8 <_dtoa_r+0x730>
 8009276:	4646      	mov	r6, r8
 8009278:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800927a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800927c:	e735      	b.n	80090ea <_dtoa_r+0x742>
 800927e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009280:	e75c      	b.n	800913c <_dtoa_r+0x794>
 8009282:	2300      	movs	r3, #0
 8009284:	e788      	b.n	8009198 <_dtoa_r+0x7f0>
 8009286:	9b02      	ldr	r3, [sp, #8]
 8009288:	e786      	b.n	8009198 <_dtoa_r+0x7f0>
 800928a:	2300      	movs	r3, #0
 800928c:	930a      	str	r3, [sp, #40]	@ 0x28
 800928e:	e788      	b.n	80091a2 <_dtoa_r+0x7fa>
 8009290:	d09f      	beq.n	80091d2 <_dtoa_r+0x82a>
 8009292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009294:	331c      	adds	r3, #28
 8009296:	441a      	add	r2, r3
 8009298:	4498      	add	r8, r3
 800929a:	441e      	add	r6, r3
 800929c:	9209      	str	r2, [sp, #36]	@ 0x24
 800929e:	e798      	b.n	80091d2 <_dtoa_r+0x82a>
 80092a0:	4603      	mov	r3, r0
 80092a2:	e7f6      	b.n	8009292 <_dtoa_r+0x8ea>
 80092a4:	9b07      	ldr	r3, [sp, #28]
 80092a6:	9704      	str	r7, [sp, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	dc20      	bgt.n	80092ee <_dtoa_r+0x946>
 80092ac:	9308      	str	r3, [sp, #32]
 80092ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	dd1e      	ble.n	80092f2 <_dtoa_r+0x94a>
 80092b4:	9b08      	ldr	r3, [sp, #32]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f47f aebc 	bne.w	8009034 <_dtoa_r+0x68c>
 80092bc:	4621      	mov	r1, r4
 80092be:	2205      	movs	r2, #5
 80092c0:	4658      	mov	r0, fp
 80092c2:	f000 f9e3 	bl	800968c <__multadd>
 80092c6:	4601      	mov	r1, r0
 80092c8:	4604      	mov	r4, r0
 80092ca:	4648      	mov	r0, r9
 80092cc:	f000 fbf4 	bl	8009ab8 <__mcmp>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	f77f aeaf 	ble.w	8009034 <_dtoa_r+0x68c>
 80092d6:	2331      	movs	r3, #49	@ 0x31
 80092d8:	4656      	mov	r6, sl
 80092da:	f806 3b01 	strb.w	r3, [r6], #1
 80092de:	9b04      	ldr	r3, [sp, #16]
 80092e0:	3301      	adds	r3, #1
 80092e2:	9304      	str	r3, [sp, #16]
 80092e4:	e6aa      	b.n	800903c <_dtoa_r+0x694>
 80092e6:	9c07      	ldr	r4, [sp, #28]
 80092e8:	9704      	str	r7, [sp, #16]
 80092ea:	4625      	mov	r5, r4
 80092ec:	e7f3      	b.n	80092d6 <_dtoa_r+0x92e>
 80092ee:	9b07      	ldr	r3, [sp, #28]
 80092f0:	9308      	str	r3, [sp, #32]
 80092f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 8104 	beq.w	8009502 <_dtoa_r+0xb5a>
 80092fa:	2e00      	cmp	r6, #0
 80092fc:	dd05      	ble.n	800930a <_dtoa_r+0x962>
 80092fe:	4629      	mov	r1, r5
 8009300:	4632      	mov	r2, r6
 8009302:	4658      	mov	r0, fp
 8009304:	f000 fb6c 	bl	80099e0 <__lshift>
 8009308:	4605      	mov	r5, r0
 800930a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800930c:	2b00      	cmp	r3, #0
 800930e:	d05a      	beq.n	80093c6 <_dtoa_r+0xa1e>
 8009310:	4658      	mov	r0, fp
 8009312:	6869      	ldr	r1, [r5, #4]
 8009314:	f000 f958 	bl	80095c8 <_Balloc>
 8009318:	4606      	mov	r6, r0
 800931a:	b928      	cbnz	r0, 8009328 <_dtoa_r+0x980>
 800931c:	4602      	mov	r2, r0
 800931e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009322:	4b83      	ldr	r3, [pc, #524]	@ (8009530 <_dtoa_r+0xb88>)
 8009324:	f7ff bb54 	b.w	80089d0 <_dtoa_r+0x28>
 8009328:	692a      	ldr	r2, [r5, #16]
 800932a:	f105 010c 	add.w	r1, r5, #12
 800932e:	3202      	adds	r2, #2
 8009330:	0092      	lsls	r2, r2, #2
 8009332:	300c      	adds	r0, #12
 8009334:	f7ff fa9f 	bl	8008876 <memcpy>
 8009338:	2201      	movs	r2, #1
 800933a:	4631      	mov	r1, r6
 800933c:	4658      	mov	r0, fp
 800933e:	f000 fb4f 	bl	80099e0 <__lshift>
 8009342:	462f      	mov	r7, r5
 8009344:	4605      	mov	r5, r0
 8009346:	f10a 0301 	add.w	r3, sl, #1
 800934a:	9307      	str	r3, [sp, #28]
 800934c:	9b08      	ldr	r3, [sp, #32]
 800934e:	4453      	add	r3, sl
 8009350:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009352:	9b02      	ldr	r3, [sp, #8]
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	930a      	str	r3, [sp, #40]	@ 0x28
 800935a:	9b07      	ldr	r3, [sp, #28]
 800935c:	4621      	mov	r1, r4
 800935e:	3b01      	subs	r3, #1
 8009360:	4648      	mov	r0, r9
 8009362:	9302      	str	r3, [sp, #8]
 8009364:	f7ff fa95 	bl	8008892 <quorem>
 8009368:	4639      	mov	r1, r7
 800936a:	9008      	str	r0, [sp, #32]
 800936c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009370:	4648      	mov	r0, r9
 8009372:	f000 fba1 	bl	8009ab8 <__mcmp>
 8009376:	462a      	mov	r2, r5
 8009378:	9009      	str	r0, [sp, #36]	@ 0x24
 800937a:	4621      	mov	r1, r4
 800937c:	4658      	mov	r0, fp
 800937e:	f000 fbb7 	bl	8009af0 <__mdiff>
 8009382:	68c2      	ldr	r2, [r0, #12]
 8009384:	4606      	mov	r6, r0
 8009386:	bb02      	cbnz	r2, 80093ca <_dtoa_r+0xa22>
 8009388:	4601      	mov	r1, r0
 800938a:	4648      	mov	r0, r9
 800938c:	f000 fb94 	bl	8009ab8 <__mcmp>
 8009390:	4602      	mov	r2, r0
 8009392:	4631      	mov	r1, r6
 8009394:	4658      	mov	r0, fp
 8009396:	920c      	str	r2, [sp, #48]	@ 0x30
 8009398:	f000 f956 	bl	8009648 <_Bfree>
 800939c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800939e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80093a0:	9e07      	ldr	r6, [sp, #28]
 80093a2:	ea43 0102 	orr.w	r1, r3, r2
 80093a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093a8:	4319      	orrs	r1, r3
 80093aa:	d110      	bne.n	80093ce <_dtoa_r+0xa26>
 80093ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093b0:	d029      	beq.n	8009406 <_dtoa_r+0xa5e>
 80093b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	dd02      	ble.n	80093be <_dtoa_r+0xa16>
 80093b8:	9b08      	ldr	r3, [sp, #32]
 80093ba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80093be:	9b02      	ldr	r3, [sp, #8]
 80093c0:	f883 8000 	strb.w	r8, [r3]
 80093c4:	e63b      	b.n	800903e <_dtoa_r+0x696>
 80093c6:	4628      	mov	r0, r5
 80093c8:	e7bb      	b.n	8009342 <_dtoa_r+0x99a>
 80093ca:	2201      	movs	r2, #1
 80093cc:	e7e1      	b.n	8009392 <_dtoa_r+0x9ea>
 80093ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	db04      	blt.n	80093de <_dtoa_r+0xa36>
 80093d4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80093d6:	430b      	orrs	r3, r1
 80093d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093da:	430b      	orrs	r3, r1
 80093dc:	d120      	bne.n	8009420 <_dtoa_r+0xa78>
 80093de:	2a00      	cmp	r2, #0
 80093e0:	dded      	ble.n	80093be <_dtoa_r+0xa16>
 80093e2:	4649      	mov	r1, r9
 80093e4:	2201      	movs	r2, #1
 80093e6:	4658      	mov	r0, fp
 80093e8:	f000 fafa 	bl	80099e0 <__lshift>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4681      	mov	r9, r0
 80093f0:	f000 fb62 	bl	8009ab8 <__mcmp>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	dc03      	bgt.n	8009400 <_dtoa_r+0xa58>
 80093f8:	d1e1      	bne.n	80093be <_dtoa_r+0xa16>
 80093fa:	f018 0f01 	tst.w	r8, #1
 80093fe:	d0de      	beq.n	80093be <_dtoa_r+0xa16>
 8009400:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009404:	d1d8      	bne.n	80093b8 <_dtoa_r+0xa10>
 8009406:	2339      	movs	r3, #57	@ 0x39
 8009408:	9a02      	ldr	r2, [sp, #8]
 800940a:	7013      	strb	r3, [r2, #0]
 800940c:	4633      	mov	r3, r6
 800940e:	461e      	mov	r6, r3
 8009410:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009414:	3b01      	subs	r3, #1
 8009416:	2a39      	cmp	r2, #57	@ 0x39
 8009418:	d052      	beq.n	80094c0 <_dtoa_r+0xb18>
 800941a:	3201      	adds	r2, #1
 800941c:	701a      	strb	r2, [r3, #0]
 800941e:	e60e      	b.n	800903e <_dtoa_r+0x696>
 8009420:	2a00      	cmp	r2, #0
 8009422:	dd07      	ble.n	8009434 <_dtoa_r+0xa8c>
 8009424:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009428:	d0ed      	beq.n	8009406 <_dtoa_r+0xa5e>
 800942a:	9a02      	ldr	r2, [sp, #8]
 800942c:	f108 0301 	add.w	r3, r8, #1
 8009430:	7013      	strb	r3, [r2, #0]
 8009432:	e604      	b.n	800903e <_dtoa_r+0x696>
 8009434:	9b07      	ldr	r3, [sp, #28]
 8009436:	9a07      	ldr	r2, [sp, #28]
 8009438:	f803 8c01 	strb.w	r8, [r3, #-1]
 800943c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800943e:	4293      	cmp	r3, r2
 8009440:	d028      	beq.n	8009494 <_dtoa_r+0xaec>
 8009442:	4649      	mov	r1, r9
 8009444:	2300      	movs	r3, #0
 8009446:	220a      	movs	r2, #10
 8009448:	4658      	mov	r0, fp
 800944a:	f000 f91f 	bl	800968c <__multadd>
 800944e:	42af      	cmp	r7, r5
 8009450:	4681      	mov	r9, r0
 8009452:	f04f 0300 	mov.w	r3, #0
 8009456:	f04f 020a 	mov.w	r2, #10
 800945a:	4639      	mov	r1, r7
 800945c:	4658      	mov	r0, fp
 800945e:	d107      	bne.n	8009470 <_dtoa_r+0xac8>
 8009460:	f000 f914 	bl	800968c <__multadd>
 8009464:	4607      	mov	r7, r0
 8009466:	4605      	mov	r5, r0
 8009468:	9b07      	ldr	r3, [sp, #28]
 800946a:	3301      	adds	r3, #1
 800946c:	9307      	str	r3, [sp, #28]
 800946e:	e774      	b.n	800935a <_dtoa_r+0x9b2>
 8009470:	f000 f90c 	bl	800968c <__multadd>
 8009474:	4629      	mov	r1, r5
 8009476:	4607      	mov	r7, r0
 8009478:	2300      	movs	r3, #0
 800947a:	220a      	movs	r2, #10
 800947c:	4658      	mov	r0, fp
 800947e:	f000 f905 	bl	800968c <__multadd>
 8009482:	4605      	mov	r5, r0
 8009484:	e7f0      	b.n	8009468 <_dtoa_r+0xac0>
 8009486:	9b08      	ldr	r3, [sp, #32]
 8009488:	2700      	movs	r7, #0
 800948a:	2b00      	cmp	r3, #0
 800948c:	bfcc      	ite	gt
 800948e:	461e      	movgt	r6, r3
 8009490:	2601      	movle	r6, #1
 8009492:	4456      	add	r6, sl
 8009494:	4649      	mov	r1, r9
 8009496:	2201      	movs	r2, #1
 8009498:	4658      	mov	r0, fp
 800949a:	f000 faa1 	bl	80099e0 <__lshift>
 800949e:	4621      	mov	r1, r4
 80094a0:	4681      	mov	r9, r0
 80094a2:	f000 fb09 	bl	8009ab8 <__mcmp>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	dcb0      	bgt.n	800940c <_dtoa_r+0xa64>
 80094aa:	d102      	bne.n	80094b2 <_dtoa_r+0xb0a>
 80094ac:	f018 0f01 	tst.w	r8, #1
 80094b0:	d1ac      	bne.n	800940c <_dtoa_r+0xa64>
 80094b2:	4633      	mov	r3, r6
 80094b4:	461e      	mov	r6, r3
 80094b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094ba:	2a30      	cmp	r2, #48	@ 0x30
 80094bc:	d0fa      	beq.n	80094b4 <_dtoa_r+0xb0c>
 80094be:	e5be      	b.n	800903e <_dtoa_r+0x696>
 80094c0:	459a      	cmp	sl, r3
 80094c2:	d1a4      	bne.n	800940e <_dtoa_r+0xa66>
 80094c4:	9b04      	ldr	r3, [sp, #16]
 80094c6:	3301      	adds	r3, #1
 80094c8:	9304      	str	r3, [sp, #16]
 80094ca:	2331      	movs	r3, #49	@ 0x31
 80094cc:	f88a 3000 	strb.w	r3, [sl]
 80094d0:	e5b5      	b.n	800903e <_dtoa_r+0x696>
 80094d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094d4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009534 <_dtoa_r+0xb8c>
 80094d8:	b11b      	cbz	r3, 80094e2 <_dtoa_r+0xb3a>
 80094da:	f10a 0308 	add.w	r3, sl, #8
 80094de:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80094e0:	6013      	str	r3, [r2, #0]
 80094e2:	4650      	mov	r0, sl
 80094e4:	b017      	add	sp, #92	@ 0x5c
 80094e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	f77f ae3d 	ble.w	800916c <_dtoa_r+0x7c4>
 80094f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80094f6:	2001      	movs	r0, #1
 80094f8:	e65b      	b.n	80091b2 <_dtoa_r+0x80a>
 80094fa:	9b08      	ldr	r3, [sp, #32]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f77f aed6 	ble.w	80092ae <_dtoa_r+0x906>
 8009502:	4656      	mov	r6, sl
 8009504:	4621      	mov	r1, r4
 8009506:	4648      	mov	r0, r9
 8009508:	f7ff f9c3 	bl	8008892 <quorem>
 800950c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009510:	9b08      	ldr	r3, [sp, #32]
 8009512:	f806 8b01 	strb.w	r8, [r6], #1
 8009516:	eba6 020a 	sub.w	r2, r6, sl
 800951a:	4293      	cmp	r3, r2
 800951c:	ddb3      	ble.n	8009486 <_dtoa_r+0xade>
 800951e:	4649      	mov	r1, r9
 8009520:	2300      	movs	r3, #0
 8009522:	220a      	movs	r2, #10
 8009524:	4658      	mov	r0, fp
 8009526:	f000 f8b1 	bl	800968c <__multadd>
 800952a:	4681      	mov	r9, r0
 800952c:	e7ea      	b.n	8009504 <_dtoa_r+0xb5c>
 800952e:	bf00      	nop
 8009530:	0800b5b3 	.word	0x0800b5b3
 8009534:	0800b537 	.word	0x0800b537

08009538 <_free_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4605      	mov	r5, r0
 800953c:	2900      	cmp	r1, #0
 800953e:	d040      	beq.n	80095c2 <_free_r+0x8a>
 8009540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009544:	1f0c      	subs	r4, r1, #4
 8009546:	2b00      	cmp	r3, #0
 8009548:	bfb8      	it	lt
 800954a:	18e4      	addlt	r4, r4, r3
 800954c:	f7fe fa82 	bl	8007a54 <__malloc_lock>
 8009550:	4a1c      	ldr	r2, [pc, #112]	@ (80095c4 <_free_r+0x8c>)
 8009552:	6813      	ldr	r3, [r2, #0]
 8009554:	b933      	cbnz	r3, 8009564 <_free_r+0x2c>
 8009556:	6063      	str	r3, [r4, #4]
 8009558:	6014      	str	r4, [r2, #0]
 800955a:	4628      	mov	r0, r5
 800955c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009560:	f7fe ba7e 	b.w	8007a60 <__malloc_unlock>
 8009564:	42a3      	cmp	r3, r4
 8009566:	d908      	bls.n	800957a <_free_r+0x42>
 8009568:	6820      	ldr	r0, [r4, #0]
 800956a:	1821      	adds	r1, r4, r0
 800956c:	428b      	cmp	r3, r1
 800956e:	bf01      	itttt	eq
 8009570:	6819      	ldreq	r1, [r3, #0]
 8009572:	685b      	ldreq	r3, [r3, #4]
 8009574:	1809      	addeq	r1, r1, r0
 8009576:	6021      	streq	r1, [r4, #0]
 8009578:	e7ed      	b.n	8009556 <_free_r+0x1e>
 800957a:	461a      	mov	r2, r3
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	b10b      	cbz	r3, 8009584 <_free_r+0x4c>
 8009580:	42a3      	cmp	r3, r4
 8009582:	d9fa      	bls.n	800957a <_free_r+0x42>
 8009584:	6811      	ldr	r1, [r2, #0]
 8009586:	1850      	adds	r0, r2, r1
 8009588:	42a0      	cmp	r0, r4
 800958a:	d10b      	bne.n	80095a4 <_free_r+0x6c>
 800958c:	6820      	ldr	r0, [r4, #0]
 800958e:	4401      	add	r1, r0
 8009590:	1850      	adds	r0, r2, r1
 8009592:	4283      	cmp	r3, r0
 8009594:	6011      	str	r1, [r2, #0]
 8009596:	d1e0      	bne.n	800955a <_free_r+0x22>
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	4408      	add	r0, r1
 800959e:	6010      	str	r0, [r2, #0]
 80095a0:	6053      	str	r3, [r2, #4]
 80095a2:	e7da      	b.n	800955a <_free_r+0x22>
 80095a4:	d902      	bls.n	80095ac <_free_r+0x74>
 80095a6:	230c      	movs	r3, #12
 80095a8:	602b      	str	r3, [r5, #0]
 80095aa:	e7d6      	b.n	800955a <_free_r+0x22>
 80095ac:	6820      	ldr	r0, [r4, #0]
 80095ae:	1821      	adds	r1, r4, r0
 80095b0:	428b      	cmp	r3, r1
 80095b2:	bf01      	itttt	eq
 80095b4:	6819      	ldreq	r1, [r3, #0]
 80095b6:	685b      	ldreq	r3, [r3, #4]
 80095b8:	1809      	addeq	r1, r1, r0
 80095ba:	6021      	streq	r1, [r4, #0]
 80095bc:	6063      	str	r3, [r4, #4]
 80095be:	6054      	str	r4, [r2, #4]
 80095c0:	e7cb      	b.n	800955a <_free_r+0x22>
 80095c2:	bd38      	pop	{r3, r4, r5, pc}
 80095c4:	2000054c 	.word	0x2000054c

080095c8 <_Balloc>:
 80095c8:	b570      	push	{r4, r5, r6, lr}
 80095ca:	69c6      	ldr	r6, [r0, #28]
 80095cc:	4604      	mov	r4, r0
 80095ce:	460d      	mov	r5, r1
 80095d0:	b976      	cbnz	r6, 80095f0 <_Balloc+0x28>
 80095d2:	2010      	movs	r0, #16
 80095d4:	f7fe f98c 	bl	80078f0 <malloc>
 80095d8:	4602      	mov	r2, r0
 80095da:	61e0      	str	r0, [r4, #28]
 80095dc:	b920      	cbnz	r0, 80095e8 <_Balloc+0x20>
 80095de:	216b      	movs	r1, #107	@ 0x6b
 80095e0:	4b17      	ldr	r3, [pc, #92]	@ (8009640 <_Balloc+0x78>)
 80095e2:	4818      	ldr	r0, [pc, #96]	@ (8009644 <_Balloc+0x7c>)
 80095e4:	f000 fd92 	bl	800a10c <__assert_func>
 80095e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095ec:	6006      	str	r6, [r0, #0]
 80095ee:	60c6      	str	r6, [r0, #12]
 80095f0:	69e6      	ldr	r6, [r4, #28]
 80095f2:	68f3      	ldr	r3, [r6, #12]
 80095f4:	b183      	cbz	r3, 8009618 <_Balloc+0x50>
 80095f6:	69e3      	ldr	r3, [r4, #28]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095fe:	b9b8      	cbnz	r0, 8009630 <_Balloc+0x68>
 8009600:	2101      	movs	r1, #1
 8009602:	fa01 f605 	lsl.w	r6, r1, r5
 8009606:	1d72      	adds	r2, r6, #5
 8009608:	4620      	mov	r0, r4
 800960a:	0092      	lsls	r2, r2, #2
 800960c:	f7fe f95c 	bl	80078c8 <_calloc_r>
 8009610:	b160      	cbz	r0, 800962c <_Balloc+0x64>
 8009612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009616:	e00e      	b.n	8009636 <_Balloc+0x6e>
 8009618:	2221      	movs	r2, #33	@ 0x21
 800961a:	2104      	movs	r1, #4
 800961c:	4620      	mov	r0, r4
 800961e:	f7fe f953 	bl	80078c8 <_calloc_r>
 8009622:	69e3      	ldr	r3, [r4, #28]
 8009624:	60f0      	str	r0, [r6, #12]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1e4      	bne.n	80095f6 <_Balloc+0x2e>
 800962c:	2000      	movs	r0, #0
 800962e:	bd70      	pop	{r4, r5, r6, pc}
 8009630:	6802      	ldr	r2, [r0, #0]
 8009632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009636:	2300      	movs	r3, #0
 8009638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800963c:	e7f7      	b.n	800962e <_Balloc+0x66>
 800963e:	bf00      	nop
 8009640:	0800b544 	.word	0x0800b544
 8009644:	0800b5c4 	.word	0x0800b5c4

08009648 <_Bfree>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	69c6      	ldr	r6, [r0, #28]
 800964c:	4605      	mov	r5, r0
 800964e:	460c      	mov	r4, r1
 8009650:	b976      	cbnz	r6, 8009670 <_Bfree+0x28>
 8009652:	2010      	movs	r0, #16
 8009654:	f7fe f94c 	bl	80078f0 <malloc>
 8009658:	4602      	mov	r2, r0
 800965a:	61e8      	str	r0, [r5, #28]
 800965c:	b920      	cbnz	r0, 8009668 <_Bfree+0x20>
 800965e:	218f      	movs	r1, #143	@ 0x8f
 8009660:	4b08      	ldr	r3, [pc, #32]	@ (8009684 <_Bfree+0x3c>)
 8009662:	4809      	ldr	r0, [pc, #36]	@ (8009688 <_Bfree+0x40>)
 8009664:	f000 fd52 	bl	800a10c <__assert_func>
 8009668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800966c:	6006      	str	r6, [r0, #0]
 800966e:	60c6      	str	r6, [r0, #12]
 8009670:	b13c      	cbz	r4, 8009682 <_Bfree+0x3a>
 8009672:	69eb      	ldr	r3, [r5, #28]
 8009674:	6862      	ldr	r2, [r4, #4]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800967c:	6021      	str	r1, [r4, #0]
 800967e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	0800b544 	.word	0x0800b544
 8009688:	0800b5c4 	.word	0x0800b5c4

0800968c <__multadd>:
 800968c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009690:	4607      	mov	r7, r0
 8009692:	460c      	mov	r4, r1
 8009694:	461e      	mov	r6, r3
 8009696:	2000      	movs	r0, #0
 8009698:	690d      	ldr	r5, [r1, #16]
 800969a:	f101 0c14 	add.w	ip, r1, #20
 800969e:	f8dc 3000 	ldr.w	r3, [ip]
 80096a2:	3001      	adds	r0, #1
 80096a4:	b299      	uxth	r1, r3
 80096a6:	fb02 6101 	mla	r1, r2, r1, r6
 80096aa:	0c1e      	lsrs	r6, r3, #16
 80096ac:	0c0b      	lsrs	r3, r1, #16
 80096ae:	fb02 3306 	mla	r3, r2, r6, r3
 80096b2:	b289      	uxth	r1, r1
 80096b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096b8:	4285      	cmp	r5, r0
 80096ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096be:	f84c 1b04 	str.w	r1, [ip], #4
 80096c2:	dcec      	bgt.n	800969e <__multadd+0x12>
 80096c4:	b30e      	cbz	r6, 800970a <__multadd+0x7e>
 80096c6:	68a3      	ldr	r3, [r4, #8]
 80096c8:	42ab      	cmp	r3, r5
 80096ca:	dc19      	bgt.n	8009700 <__multadd+0x74>
 80096cc:	6861      	ldr	r1, [r4, #4]
 80096ce:	4638      	mov	r0, r7
 80096d0:	3101      	adds	r1, #1
 80096d2:	f7ff ff79 	bl	80095c8 <_Balloc>
 80096d6:	4680      	mov	r8, r0
 80096d8:	b928      	cbnz	r0, 80096e6 <__multadd+0x5a>
 80096da:	4602      	mov	r2, r0
 80096dc:	21ba      	movs	r1, #186	@ 0xba
 80096de:	4b0c      	ldr	r3, [pc, #48]	@ (8009710 <__multadd+0x84>)
 80096e0:	480c      	ldr	r0, [pc, #48]	@ (8009714 <__multadd+0x88>)
 80096e2:	f000 fd13 	bl	800a10c <__assert_func>
 80096e6:	6922      	ldr	r2, [r4, #16]
 80096e8:	f104 010c 	add.w	r1, r4, #12
 80096ec:	3202      	adds	r2, #2
 80096ee:	0092      	lsls	r2, r2, #2
 80096f0:	300c      	adds	r0, #12
 80096f2:	f7ff f8c0 	bl	8008876 <memcpy>
 80096f6:	4621      	mov	r1, r4
 80096f8:	4638      	mov	r0, r7
 80096fa:	f7ff ffa5 	bl	8009648 <_Bfree>
 80096fe:	4644      	mov	r4, r8
 8009700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009704:	3501      	adds	r5, #1
 8009706:	615e      	str	r6, [r3, #20]
 8009708:	6125      	str	r5, [r4, #16]
 800970a:	4620      	mov	r0, r4
 800970c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009710:	0800b5b3 	.word	0x0800b5b3
 8009714:	0800b5c4 	.word	0x0800b5c4

08009718 <__hi0bits>:
 8009718:	4603      	mov	r3, r0
 800971a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800971e:	bf3a      	itte	cc
 8009720:	0403      	lslcc	r3, r0, #16
 8009722:	2010      	movcc	r0, #16
 8009724:	2000      	movcs	r0, #0
 8009726:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800972a:	bf3c      	itt	cc
 800972c:	021b      	lslcc	r3, r3, #8
 800972e:	3008      	addcc	r0, #8
 8009730:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009734:	bf3c      	itt	cc
 8009736:	011b      	lslcc	r3, r3, #4
 8009738:	3004      	addcc	r0, #4
 800973a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800973e:	bf3c      	itt	cc
 8009740:	009b      	lslcc	r3, r3, #2
 8009742:	3002      	addcc	r0, #2
 8009744:	2b00      	cmp	r3, #0
 8009746:	db05      	blt.n	8009754 <__hi0bits+0x3c>
 8009748:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800974c:	f100 0001 	add.w	r0, r0, #1
 8009750:	bf08      	it	eq
 8009752:	2020      	moveq	r0, #32
 8009754:	4770      	bx	lr

08009756 <__lo0bits>:
 8009756:	6803      	ldr	r3, [r0, #0]
 8009758:	4602      	mov	r2, r0
 800975a:	f013 0007 	ands.w	r0, r3, #7
 800975e:	d00b      	beq.n	8009778 <__lo0bits+0x22>
 8009760:	07d9      	lsls	r1, r3, #31
 8009762:	d421      	bmi.n	80097a8 <__lo0bits+0x52>
 8009764:	0798      	lsls	r0, r3, #30
 8009766:	bf49      	itett	mi
 8009768:	085b      	lsrmi	r3, r3, #1
 800976a:	089b      	lsrpl	r3, r3, #2
 800976c:	2001      	movmi	r0, #1
 800976e:	6013      	strmi	r3, [r2, #0]
 8009770:	bf5c      	itt	pl
 8009772:	2002      	movpl	r0, #2
 8009774:	6013      	strpl	r3, [r2, #0]
 8009776:	4770      	bx	lr
 8009778:	b299      	uxth	r1, r3
 800977a:	b909      	cbnz	r1, 8009780 <__lo0bits+0x2a>
 800977c:	2010      	movs	r0, #16
 800977e:	0c1b      	lsrs	r3, r3, #16
 8009780:	b2d9      	uxtb	r1, r3
 8009782:	b909      	cbnz	r1, 8009788 <__lo0bits+0x32>
 8009784:	3008      	adds	r0, #8
 8009786:	0a1b      	lsrs	r3, r3, #8
 8009788:	0719      	lsls	r1, r3, #28
 800978a:	bf04      	itt	eq
 800978c:	091b      	lsreq	r3, r3, #4
 800978e:	3004      	addeq	r0, #4
 8009790:	0799      	lsls	r1, r3, #30
 8009792:	bf04      	itt	eq
 8009794:	089b      	lsreq	r3, r3, #2
 8009796:	3002      	addeq	r0, #2
 8009798:	07d9      	lsls	r1, r3, #31
 800979a:	d403      	bmi.n	80097a4 <__lo0bits+0x4e>
 800979c:	085b      	lsrs	r3, r3, #1
 800979e:	f100 0001 	add.w	r0, r0, #1
 80097a2:	d003      	beq.n	80097ac <__lo0bits+0x56>
 80097a4:	6013      	str	r3, [r2, #0]
 80097a6:	4770      	bx	lr
 80097a8:	2000      	movs	r0, #0
 80097aa:	4770      	bx	lr
 80097ac:	2020      	movs	r0, #32
 80097ae:	4770      	bx	lr

080097b0 <__i2b>:
 80097b0:	b510      	push	{r4, lr}
 80097b2:	460c      	mov	r4, r1
 80097b4:	2101      	movs	r1, #1
 80097b6:	f7ff ff07 	bl	80095c8 <_Balloc>
 80097ba:	4602      	mov	r2, r0
 80097bc:	b928      	cbnz	r0, 80097ca <__i2b+0x1a>
 80097be:	f240 1145 	movw	r1, #325	@ 0x145
 80097c2:	4b04      	ldr	r3, [pc, #16]	@ (80097d4 <__i2b+0x24>)
 80097c4:	4804      	ldr	r0, [pc, #16]	@ (80097d8 <__i2b+0x28>)
 80097c6:	f000 fca1 	bl	800a10c <__assert_func>
 80097ca:	2301      	movs	r3, #1
 80097cc:	6144      	str	r4, [r0, #20]
 80097ce:	6103      	str	r3, [r0, #16]
 80097d0:	bd10      	pop	{r4, pc}
 80097d2:	bf00      	nop
 80097d4:	0800b5b3 	.word	0x0800b5b3
 80097d8:	0800b5c4 	.word	0x0800b5c4

080097dc <__multiply>:
 80097dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e0:	4614      	mov	r4, r2
 80097e2:	690a      	ldr	r2, [r1, #16]
 80097e4:	6923      	ldr	r3, [r4, #16]
 80097e6:	460f      	mov	r7, r1
 80097e8:	429a      	cmp	r2, r3
 80097ea:	bfa2      	ittt	ge
 80097ec:	4623      	movge	r3, r4
 80097ee:	460c      	movge	r4, r1
 80097f0:	461f      	movge	r7, r3
 80097f2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80097f6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	6861      	ldr	r1, [r4, #4]
 80097fe:	eb0a 0609 	add.w	r6, sl, r9
 8009802:	42b3      	cmp	r3, r6
 8009804:	b085      	sub	sp, #20
 8009806:	bfb8      	it	lt
 8009808:	3101      	addlt	r1, #1
 800980a:	f7ff fedd 	bl	80095c8 <_Balloc>
 800980e:	b930      	cbnz	r0, 800981e <__multiply+0x42>
 8009810:	4602      	mov	r2, r0
 8009812:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009816:	4b43      	ldr	r3, [pc, #268]	@ (8009924 <__multiply+0x148>)
 8009818:	4843      	ldr	r0, [pc, #268]	@ (8009928 <__multiply+0x14c>)
 800981a:	f000 fc77 	bl	800a10c <__assert_func>
 800981e:	f100 0514 	add.w	r5, r0, #20
 8009822:	462b      	mov	r3, r5
 8009824:	2200      	movs	r2, #0
 8009826:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800982a:	4543      	cmp	r3, r8
 800982c:	d321      	bcc.n	8009872 <__multiply+0x96>
 800982e:	f107 0114 	add.w	r1, r7, #20
 8009832:	f104 0214 	add.w	r2, r4, #20
 8009836:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800983a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800983e:	9302      	str	r3, [sp, #8]
 8009840:	1b13      	subs	r3, r2, r4
 8009842:	3b15      	subs	r3, #21
 8009844:	f023 0303 	bic.w	r3, r3, #3
 8009848:	3304      	adds	r3, #4
 800984a:	f104 0715 	add.w	r7, r4, #21
 800984e:	42ba      	cmp	r2, r7
 8009850:	bf38      	it	cc
 8009852:	2304      	movcc	r3, #4
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	9b02      	ldr	r3, [sp, #8]
 8009858:	9103      	str	r1, [sp, #12]
 800985a:	428b      	cmp	r3, r1
 800985c:	d80c      	bhi.n	8009878 <__multiply+0x9c>
 800985e:	2e00      	cmp	r6, #0
 8009860:	dd03      	ble.n	800986a <__multiply+0x8e>
 8009862:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009866:	2b00      	cmp	r3, #0
 8009868:	d05a      	beq.n	8009920 <__multiply+0x144>
 800986a:	6106      	str	r6, [r0, #16]
 800986c:	b005      	add	sp, #20
 800986e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009872:	f843 2b04 	str.w	r2, [r3], #4
 8009876:	e7d8      	b.n	800982a <__multiply+0x4e>
 8009878:	f8b1 a000 	ldrh.w	sl, [r1]
 800987c:	f1ba 0f00 	cmp.w	sl, #0
 8009880:	d023      	beq.n	80098ca <__multiply+0xee>
 8009882:	46a9      	mov	r9, r5
 8009884:	f04f 0c00 	mov.w	ip, #0
 8009888:	f104 0e14 	add.w	lr, r4, #20
 800988c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009890:	f8d9 3000 	ldr.w	r3, [r9]
 8009894:	fa1f fb87 	uxth.w	fp, r7
 8009898:	b29b      	uxth	r3, r3
 800989a:	fb0a 330b 	mla	r3, sl, fp, r3
 800989e:	4463      	add	r3, ip
 80098a0:	f8d9 c000 	ldr.w	ip, [r9]
 80098a4:	0c3f      	lsrs	r7, r7, #16
 80098a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80098aa:	fb0a c707 	mla	r7, sl, r7, ip
 80098ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098b8:	4572      	cmp	r2, lr
 80098ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80098be:	f849 3b04 	str.w	r3, [r9], #4
 80098c2:	d8e3      	bhi.n	800988c <__multiply+0xb0>
 80098c4:	9b01      	ldr	r3, [sp, #4]
 80098c6:	f845 c003 	str.w	ip, [r5, r3]
 80098ca:	9b03      	ldr	r3, [sp, #12]
 80098cc:	3104      	adds	r1, #4
 80098ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80098d2:	f1b9 0f00 	cmp.w	r9, #0
 80098d6:	d021      	beq.n	800991c <__multiply+0x140>
 80098d8:	46ae      	mov	lr, r5
 80098da:	f04f 0a00 	mov.w	sl, #0
 80098de:	682b      	ldr	r3, [r5, #0]
 80098e0:	f104 0c14 	add.w	ip, r4, #20
 80098e4:	f8bc b000 	ldrh.w	fp, [ip]
 80098e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	fb09 770b 	mla	r7, r9, fp, r7
 80098f2:	4457      	add	r7, sl
 80098f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098f8:	f84e 3b04 	str.w	r3, [lr], #4
 80098fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009900:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009904:	f8be 3000 	ldrh.w	r3, [lr]
 8009908:	4562      	cmp	r2, ip
 800990a:	fb09 330a 	mla	r3, r9, sl, r3
 800990e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009912:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009916:	d8e5      	bhi.n	80098e4 <__multiply+0x108>
 8009918:	9f01      	ldr	r7, [sp, #4]
 800991a:	51eb      	str	r3, [r5, r7]
 800991c:	3504      	adds	r5, #4
 800991e:	e79a      	b.n	8009856 <__multiply+0x7a>
 8009920:	3e01      	subs	r6, #1
 8009922:	e79c      	b.n	800985e <__multiply+0x82>
 8009924:	0800b5b3 	.word	0x0800b5b3
 8009928:	0800b5c4 	.word	0x0800b5c4

0800992c <__pow5mult>:
 800992c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009930:	4615      	mov	r5, r2
 8009932:	f012 0203 	ands.w	r2, r2, #3
 8009936:	4607      	mov	r7, r0
 8009938:	460e      	mov	r6, r1
 800993a:	d007      	beq.n	800994c <__pow5mult+0x20>
 800993c:	4c25      	ldr	r4, [pc, #148]	@ (80099d4 <__pow5mult+0xa8>)
 800993e:	3a01      	subs	r2, #1
 8009940:	2300      	movs	r3, #0
 8009942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009946:	f7ff fea1 	bl	800968c <__multadd>
 800994a:	4606      	mov	r6, r0
 800994c:	10ad      	asrs	r5, r5, #2
 800994e:	d03d      	beq.n	80099cc <__pow5mult+0xa0>
 8009950:	69fc      	ldr	r4, [r7, #28]
 8009952:	b97c      	cbnz	r4, 8009974 <__pow5mult+0x48>
 8009954:	2010      	movs	r0, #16
 8009956:	f7fd ffcb 	bl	80078f0 <malloc>
 800995a:	4602      	mov	r2, r0
 800995c:	61f8      	str	r0, [r7, #28]
 800995e:	b928      	cbnz	r0, 800996c <__pow5mult+0x40>
 8009960:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009964:	4b1c      	ldr	r3, [pc, #112]	@ (80099d8 <__pow5mult+0xac>)
 8009966:	481d      	ldr	r0, [pc, #116]	@ (80099dc <__pow5mult+0xb0>)
 8009968:	f000 fbd0 	bl	800a10c <__assert_func>
 800996c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009970:	6004      	str	r4, [r0, #0]
 8009972:	60c4      	str	r4, [r0, #12]
 8009974:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800997c:	b94c      	cbnz	r4, 8009992 <__pow5mult+0x66>
 800997e:	f240 2171 	movw	r1, #625	@ 0x271
 8009982:	4638      	mov	r0, r7
 8009984:	f7ff ff14 	bl	80097b0 <__i2b>
 8009988:	2300      	movs	r3, #0
 800998a:	4604      	mov	r4, r0
 800998c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009990:	6003      	str	r3, [r0, #0]
 8009992:	f04f 0900 	mov.w	r9, #0
 8009996:	07eb      	lsls	r3, r5, #31
 8009998:	d50a      	bpl.n	80099b0 <__pow5mult+0x84>
 800999a:	4631      	mov	r1, r6
 800999c:	4622      	mov	r2, r4
 800999e:	4638      	mov	r0, r7
 80099a0:	f7ff ff1c 	bl	80097dc <__multiply>
 80099a4:	4680      	mov	r8, r0
 80099a6:	4631      	mov	r1, r6
 80099a8:	4638      	mov	r0, r7
 80099aa:	f7ff fe4d 	bl	8009648 <_Bfree>
 80099ae:	4646      	mov	r6, r8
 80099b0:	106d      	asrs	r5, r5, #1
 80099b2:	d00b      	beq.n	80099cc <__pow5mult+0xa0>
 80099b4:	6820      	ldr	r0, [r4, #0]
 80099b6:	b938      	cbnz	r0, 80099c8 <__pow5mult+0x9c>
 80099b8:	4622      	mov	r2, r4
 80099ba:	4621      	mov	r1, r4
 80099bc:	4638      	mov	r0, r7
 80099be:	f7ff ff0d 	bl	80097dc <__multiply>
 80099c2:	6020      	str	r0, [r4, #0]
 80099c4:	f8c0 9000 	str.w	r9, [r0]
 80099c8:	4604      	mov	r4, r0
 80099ca:	e7e4      	b.n	8009996 <__pow5mult+0x6a>
 80099cc:	4630      	mov	r0, r6
 80099ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d2:	bf00      	nop
 80099d4:	0800b620 	.word	0x0800b620
 80099d8:	0800b544 	.word	0x0800b544
 80099dc:	0800b5c4 	.word	0x0800b5c4

080099e0 <__lshift>:
 80099e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e4:	460c      	mov	r4, r1
 80099e6:	4607      	mov	r7, r0
 80099e8:	4691      	mov	r9, r2
 80099ea:	6923      	ldr	r3, [r4, #16]
 80099ec:	6849      	ldr	r1, [r1, #4]
 80099ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099f2:	68a3      	ldr	r3, [r4, #8]
 80099f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099f8:	f108 0601 	add.w	r6, r8, #1
 80099fc:	42b3      	cmp	r3, r6
 80099fe:	db0b      	blt.n	8009a18 <__lshift+0x38>
 8009a00:	4638      	mov	r0, r7
 8009a02:	f7ff fde1 	bl	80095c8 <_Balloc>
 8009a06:	4605      	mov	r5, r0
 8009a08:	b948      	cbnz	r0, 8009a1e <__lshift+0x3e>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a10:	4b27      	ldr	r3, [pc, #156]	@ (8009ab0 <__lshift+0xd0>)
 8009a12:	4828      	ldr	r0, [pc, #160]	@ (8009ab4 <__lshift+0xd4>)
 8009a14:	f000 fb7a 	bl	800a10c <__assert_func>
 8009a18:	3101      	adds	r1, #1
 8009a1a:	005b      	lsls	r3, r3, #1
 8009a1c:	e7ee      	b.n	80099fc <__lshift+0x1c>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f100 0114 	add.w	r1, r0, #20
 8009a24:	f100 0210 	add.w	r2, r0, #16
 8009a28:	4618      	mov	r0, r3
 8009a2a:	4553      	cmp	r3, sl
 8009a2c:	db33      	blt.n	8009a96 <__lshift+0xb6>
 8009a2e:	6920      	ldr	r0, [r4, #16]
 8009a30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a34:	f104 0314 	add.w	r3, r4, #20
 8009a38:	f019 091f 	ands.w	r9, r9, #31
 8009a3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a44:	d02b      	beq.n	8009a9e <__lshift+0xbe>
 8009a46:	468a      	mov	sl, r1
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f1c9 0e20 	rsb	lr, r9, #32
 8009a4e:	6818      	ldr	r0, [r3, #0]
 8009a50:	fa00 f009 	lsl.w	r0, r0, r9
 8009a54:	4310      	orrs	r0, r2
 8009a56:	f84a 0b04 	str.w	r0, [sl], #4
 8009a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a5e:	459c      	cmp	ip, r3
 8009a60:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a64:	d8f3      	bhi.n	8009a4e <__lshift+0x6e>
 8009a66:	ebac 0304 	sub.w	r3, ip, r4
 8009a6a:	3b15      	subs	r3, #21
 8009a6c:	f023 0303 	bic.w	r3, r3, #3
 8009a70:	3304      	adds	r3, #4
 8009a72:	f104 0015 	add.w	r0, r4, #21
 8009a76:	4584      	cmp	ip, r0
 8009a78:	bf38      	it	cc
 8009a7a:	2304      	movcc	r3, #4
 8009a7c:	50ca      	str	r2, [r1, r3]
 8009a7e:	b10a      	cbz	r2, 8009a84 <__lshift+0xa4>
 8009a80:	f108 0602 	add.w	r6, r8, #2
 8009a84:	3e01      	subs	r6, #1
 8009a86:	4638      	mov	r0, r7
 8009a88:	4621      	mov	r1, r4
 8009a8a:	612e      	str	r6, [r5, #16]
 8009a8c:	f7ff fddc 	bl	8009648 <_Bfree>
 8009a90:	4628      	mov	r0, r5
 8009a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a96:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	e7c5      	b.n	8009a2a <__lshift+0x4a>
 8009a9e:	3904      	subs	r1, #4
 8009aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aa4:	459c      	cmp	ip, r3
 8009aa6:	f841 2f04 	str.w	r2, [r1, #4]!
 8009aaa:	d8f9      	bhi.n	8009aa0 <__lshift+0xc0>
 8009aac:	e7ea      	b.n	8009a84 <__lshift+0xa4>
 8009aae:	bf00      	nop
 8009ab0:	0800b5b3 	.word	0x0800b5b3
 8009ab4:	0800b5c4 	.word	0x0800b5c4

08009ab8 <__mcmp>:
 8009ab8:	4603      	mov	r3, r0
 8009aba:	690a      	ldr	r2, [r1, #16]
 8009abc:	6900      	ldr	r0, [r0, #16]
 8009abe:	b530      	push	{r4, r5, lr}
 8009ac0:	1a80      	subs	r0, r0, r2
 8009ac2:	d10e      	bne.n	8009ae2 <__mcmp+0x2a>
 8009ac4:	3314      	adds	r3, #20
 8009ac6:	3114      	adds	r1, #20
 8009ac8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009acc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ad0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ad4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ad8:	4295      	cmp	r5, r2
 8009ada:	d003      	beq.n	8009ae4 <__mcmp+0x2c>
 8009adc:	d205      	bcs.n	8009aea <__mcmp+0x32>
 8009ade:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae2:	bd30      	pop	{r4, r5, pc}
 8009ae4:	42a3      	cmp	r3, r4
 8009ae6:	d3f3      	bcc.n	8009ad0 <__mcmp+0x18>
 8009ae8:	e7fb      	b.n	8009ae2 <__mcmp+0x2a>
 8009aea:	2001      	movs	r0, #1
 8009aec:	e7f9      	b.n	8009ae2 <__mcmp+0x2a>
	...

08009af0 <__mdiff>:
 8009af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af4:	4689      	mov	r9, r1
 8009af6:	4606      	mov	r6, r0
 8009af8:	4611      	mov	r1, r2
 8009afa:	4648      	mov	r0, r9
 8009afc:	4614      	mov	r4, r2
 8009afe:	f7ff ffdb 	bl	8009ab8 <__mcmp>
 8009b02:	1e05      	subs	r5, r0, #0
 8009b04:	d112      	bne.n	8009b2c <__mdiff+0x3c>
 8009b06:	4629      	mov	r1, r5
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7ff fd5d 	bl	80095c8 <_Balloc>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	b928      	cbnz	r0, 8009b1e <__mdiff+0x2e>
 8009b12:	f240 2137 	movw	r1, #567	@ 0x237
 8009b16:	4b3e      	ldr	r3, [pc, #248]	@ (8009c10 <__mdiff+0x120>)
 8009b18:	483e      	ldr	r0, [pc, #248]	@ (8009c14 <__mdiff+0x124>)
 8009b1a:	f000 faf7 	bl	800a10c <__assert_func>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b24:	4610      	mov	r0, r2
 8009b26:	b003      	add	sp, #12
 8009b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2c:	bfbc      	itt	lt
 8009b2e:	464b      	movlt	r3, r9
 8009b30:	46a1      	movlt	r9, r4
 8009b32:	4630      	mov	r0, r6
 8009b34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b38:	bfba      	itte	lt
 8009b3a:	461c      	movlt	r4, r3
 8009b3c:	2501      	movlt	r5, #1
 8009b3e:	2500      	movge	r5, #0
 8009b40:	f7ff fd42 	bl	80095c8 <_Balloc>
 8009b44:	4602      	mov	r2, r0
 8009b46:	b918      	cbnz	r0, 8009b50 <__mdiff+0x60>
 8009b48:	f240 2145 	movw	r1, #581	@ 0x245
 8009b4c:	4b30      	ldr	r3, [pc, #192]	@ (8009c10 <__mdiff+0x120>)
 8009b4e:	e7e3      	b.n	8009b18 <__mdiff+0x28>
 8009b50:	f100 0b14 	add.w	fp, r0, #20
 8009b54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b58:	f109 0310 	add.w	r3, r9, #16
 8009b5c:	60c5      	str	r5, [r0, #12]
 8009b5e:	f04f 0c00 	mov.w	ip, #0
 8009b62:	f109 0514 	add.w	r5, r9, #20
 8009b66:	46d9      	mov	r9, fp
 8009b68:	6926      	ldr	r6, [r4, #16]
 8009b6a:	f104 0e14 	add.w	lr, r4, #20
 8009b6e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b72:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b76:	9301      	str	r3, [sp, #4]
 8009b78:	9b01      	ldr	r3, [sp, #4]
 8009b7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009b7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b82:	b281      	uxth	r1, r0
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	fa1f f38a 	uxth.w	r3, sl
 8009b8a:	1a5b      	subs	r3, r3, r1
 8009b8c:	0c00      	lsrs	r0, r0, #16
 8009b8e:	4463      	add	r3, ip
 8009b90:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b94:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b9e:	4576      	cmp	r6, lr
 8009ba0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ba4:	f849 3b04 	str.w	r3, [r9], #4
 8009ba8:	d8e6      	bhi.n	8009b78 <__mdiff+0x88>
 8009baa:	1b33      	subs	r3, r6, r4
 8009bac:	3b15      	subs	r3, #21
 8009bae:	f023 0303 	bic.w	r3, r3, #3
 8009bb2:	3415      	adds	r4, #21
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	42a6      	cmp	r6, r4
 8009bb8:	bf38      	it	cc
 8009bba:	2304      	movcc	r3, #4
 8009bbc:	441d      	add	r5, r3
 8009bbe:	445b      	add	r3, fp
 8009bc0:	461e      	mov	r6, r3
 8009bc2:	462c      	mov	r4, r5
 8009bc4:	4544      	cmp	r4, r8
 8009bc6:	d30e      	bcc.n	8009be6 <__mdiff+0xf6>
 8009bc8:	f108 0103 	add.w	r1, r8, #3
 8009bcc:	1b49      	subs	r1, r1, r5
 8009bce:	f021 0103 	bic.w	r1, r1, #3
 8009bd2:	3d03      	subs	r5, #3
 8009bd4:	45a8      	cmp	r8, r5
 8009bd6:	bf38      	it	cc
 8009bd8:	2100      	movcc	r1, #0
 8009bda:	440b      	add	r3, r1
 8009bdc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009be0:	b199      	cbz	r1, 8009c0a <__mdiff+0x11a>
 8009be2:	6117      	str	r7, [r2, #16]
 8009be4:	e79e      	b.n	8009b24 <__mdiff+0x34>
 8009be6:	46e6      	mov	lr, ip
 8009be8:	f854 1b04 	ldr.w	r1, [r4], #4
 8009bec:	fa1f fc81 	uxth.w	ip, r1
 8009bf0:	44f4      	add	ip, lr
 8009bf2:	0c08      	lsrs	r0, r1, #16
 8009bf4:	4471      	add	r1, lr
 8009bf6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009bfa:	b289      	uxth	r1, r1
 8009bfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c04:	f846 1b04 	str.w	r1, [r6], #4
 8009c08:	e7dc      	b.n	8009bc4 <__mdiff+0xd4>
 8009c0a:	3f01      	subs	r7, #1
 8009c0c:	e7e6      	b.n	8009bdc <__mdiff+0xec>
 8009c0e:	bf00      	nop
 8009c10:	0800b5b3 	.word	0x0800b5b3
 8009c14:	0800b5c4 	.word	0x0800b5c4

08009c18 <__d2b>:
 8009c18:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	4690      	mov	r8, r2
 8009c20:	4699      	mov	r9, r3
 8009c22:	9e08      	ldr	r6, [sp, #32]
 8009c24:	f7ff fcd0 	bl	80095c8 <_Balloc>
 8009c28:	4604      	mov	r4, r0
 8009c2a:	b930      	cbnz	r0, 8009c3a <__d2b+0x22>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c32:	4b23      	ldr	r3, [pc, #140]	@ (8009cc0 <__d2b+0xa8>)
 8009c34:	4823      	ldr	r0, [pc, #140]	@ (8009cc4 <__d2b+0xac>)
 8009c36:	f000 fa69 	bl	800a10c <__assert_func>
 8009c3a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c42:	b10d      	cbz	r5, 8009c48 <__d2b+0x30>
 8009c44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c48:	9301      	str	r3, [sp, #4]
 8009c4a:	f1b8 0300 	subs.w	r3, r8, #0
 8009c4e:	d024      	beq.n	8009c9a <__d2b+0x82>
 8009c50:	4668      	mov	r0, sp
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	f7ff fd7f 	bl	8009756 <__lo0bits>
 8009c58:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c5c:	b1d8      	cbz	r0, 8009c96 <__d2b+0x7e>
 8009c5e:	f1c0 0320 	rsb	r3, r0, #32
 8009c62:	fa02 f303 	lsl.w	r3, r2, r3
 8009c66:	430b      	orrs	r3, r1
 8009c68:	40c2      	lsrs	r2, r0
 8009c6a:	6163      	str	r3, [r4, #20]
 8009c6c:	9201      	str	r2, [sp, #4]
 8009c6e:	9b01      	ldr	r3, [sp, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	bf0c      	ite	eq
 8009c74:	2201      	moveq	r2, #1
 8009c76:	2202      	movne	r2, #2
 8009c78:	61a3      	str	r3, [r4, #24]
 8009c7a:	6122      	str	r2, [r4, #16]
 8009c7c:	b1ad      	cbz	r5, 8009caa <__d2b+0x92>
 8009c7e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c82:	4405      	add	r5, r0
 8009c84:	6035      	str	r5, [r6, #0]
 8009c86:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c8c:	6018      	str	r0, [r3, #0]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	b002      	add	sp, #8
 8009c92:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009c96:	6161      	str	r1, [r4, #20]
 8009c98:	e7e9      	b.n	8009c6e <__d2b+0x56>
 8009c9a:	a801      	add	r0, sp, #4
 8009c9c:	f7ff fd5b 	bl	8009756 <__lo0bits>
 8009ca0:	9b01      	ldr	r3, [sp, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	6163      	str	r3, [r4, #20]
 8009ca6:	3020      	adds	r0, #32
 8009ca8:	e7e7      	b.n	8009c7a <__d2b+0x62>
 8009caa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009cae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cb2:	6030      	str	r0, [r6, #0]
 8009cb4:	6918      	ldr	r0, [r3, #16]
 8009cb6:	f7ff fd2f 	bl	8009718 <__hi0bits>
 8009cba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cbe:	e7e4      	b.n	8009c8a <__d2b+0x72>
 8009cc0:	0800b5b3 	.word	0x0800b5b3
 8009cc4:	0800b5c4 	.word	0x0800b5c4

08009cc8 <_malloc_usable_size_r>:
 8009cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ccc:	1f18      	subs	r0, r3, #4
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	bfbc      	itt	lt
 8009cd2:	580b      	ldrlt	r3, [r1, r0]
 8009cd4:	18c0      	addlt	r0, r0, r3
 8009cd6:	4770      	bx	lr

08009cd8 <__ssputs_r>:
 8009cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cdc:	461f      	mov	r7, r3
 8009cde:	688e      	ldr	r6, [r1, #8]
 8009ce0:	4682      	mov	sl, r0
 8009ce2:	42be      	cmp	r6, r7
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	4690      	mov	r8, r2
 8009ce8:	680b      	ldr	r3, [r1, #0]
 8009cea:	d82d      	bhi.n	8009d48 <__ssputs_r+0x70>
 8009cec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009cf4:	d026      	beq.n	8009d44 <__ssputs_r+0x6c>
 8009cf6:	6965      	ldr	r5, [r4, #20]
 8009cf8:	6909      	ldr	r1, [r1, #16]
 8009cfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cfe:	eba3 0901 	sub.w	r9, r3, r1
 8009d02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d06:	1c7b      	adds	r3, r7, #1
 8009d08:	444b      	add	r3, r9
 8009d0a:	106d      	asrs	r5, r5, #1
 8009d0c:	429d      	cmp	r5, r3
 8009d0e:	bf38      	it	cc
 8009d10:	461d      	movcc	r5, r3
 8009d12:	0553      	lsls	r3, r2, #21
 8009d14:	d527      	bpl.n	8009d66 <__ssputs_r+0x8e>
 8009d16:	4629      	mov	r1, r5
 8009d18:	f7fd fe1c 	bl	8007954 <_malloc_r>
 8009d1c:	4606      	mov	r6, r0
 8009d1e:	b360      	cbz	r0, 8009d7a <__ssputs_r+0xa2>
 8009d20:	464a      	mov	r2, r9
 8009d22:	6921      	ldr	r1, [r4, #16]
 8009d24:	f7fe fda7 	bl	8008876 <memcpy>
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d32:	81a3      	strh	r3, [r4, #12]
 8009d34:	6126      	str	r6, [r4, #16]
 8009d36:	444e      	add	r6, r9
 8009d38:	6026      	str	r6, [r4, #0]
 8009d3a:	463e      	mov	r6, r7
 8009d3c:	6165      	str	r5, [r4, #20]
 8009d3e:	eba5 0509 	sub.w	r5, r5, r9
 8009d42:	60a5      	str	r5, [r4, #8]
 8009d44:	42be      	cmp	r6, r7
 8009d46:	d900      	bls.n	8009d4a <__ssputs_r+0x72>
 8009d48:	463e      	mov	r6, r7
 8009d4a:	4632      	mov	r2, r6
 8009d4c:	4641      	mov	r1, r8
 8009d4e:	6820      	ldr	r0, [r4, #0]
 8009d50:	f000 f9c2 	bl	800a0d8 <memmove>
 8009d54:	2000      	movs	r0, #0
 8009d56:	68a3      	ldr	r3, [r4, #8]
 8009d58:	1b9b      	subs	r3, r3, r6
 8009d5a:	60a3      	str	r3, [r4, #8]
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	4433      	add	r3, r6
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d66:	462a      	mov	r2, r5
 8009d68:	f7fd fe88 	bl	8007a7c <_realloc_r>
 8009d6c:	4606      	mov	r6, r0
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d1e0      	bne.n	8009d34 <__ssputs_r+0x5c>
 8009d72:	4650      	mov	r0, sl
 8009d74:	6921      	ldr	r1, [r4, #16]
 8009d76:	f7ff fbdf 	bl	8009538 <_free_r>
 8009d7a:	230c      	movs	r3, #12
 8009d7c:	f8ca 3000 	str.w	r3, [sl]
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	f04f 30ff 	mov.w	r0, #4294967295
 8009d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d8a:	81a3      	strh	r3, [r4, #12]
 8009d8c:	e7e9      	b.n	8009d62 <__ssputs_r+0x8a>
	...

08009d90 <_svfiprintf_r>:
 8009d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d94:	4698      	mov	r8, r3
 8009d96:	898b      	ldrh	r3, [r1, #12]
 8009d98:	4607      	mov	r7, r0
 8009d9a:	061b      	lsls	r3, r3, #24
 8009d9c:	460d      	mov	r5, r1
 8009d9e:	4614      	mov	r4, r2
 8009da0:	b09d      	sub	sp, #116	@ 0x74
 8009da2:	d510      	bpl.n	8009dc6 <_svfiprintf_r+0x36>
 8009da4:	690b      	ldr	r3, [r1, #16]
 8009da6:	b973      	cbnz	r3, 8009dc6 <_svfiprintf_r+0x36>
 8009da8:	2140      	movs	r1, #64	@ 0x40
 8009daa:	f7fd fdd3 	bl	8007954 <_malloc_r>
 8009dae:	6028      	str	r0, [r5, #0]
 8009db0:	6128      	str	r0, [r5, #16]
 8009db2:	b930      	cbnz	r0, 8009dc2 <_svfiprintf_r+0x32>
 8009db4:	230c      	movs	r3, #12
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbc:	b01d      	add	sp, #116	@ 0x74
 8009dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc2:	2340      	movs	r3, #64	@ 0x40
 8009dc4:	616b      	str	r3, [r5, #20]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dca:	2320      	movs	r3, #32
 8009dcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dd0:	2330      	movs	r3, #48	@ 0x30
 8009dd2:	f04f 0901 	mov.w	r9, #1
 8009dd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dda:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009f74 <_svfiprintf_r+0x1e4>
 8009dde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009de2:	4623      	mov	r3, r4
 8009de4:	469a      	mov	sl, r3
 8009de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dea:	b10a      	cbz	r2, 8009df0 <_svfiprintf_r+0x60>
 8009dec:	2a25      	cmp	r2, #37	@ 0x25
 8009dee:	d1f9      	bne.n	8009de4 <_svfiprintf_r+0x54>
 8009df0:	ebba 0b04 	subs.w	fp, sl, r4
 8009df4:	d00b      	beq.n	8009e0e <_svfiprintf_r+0x7e>
 8009df6:	465b      	mov	r3, fp
 8009df8:	4622      	mov	r2, r4
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	f7ff ff6b 	bl	8009cd8 <__ssputs_r>
 8009e02:	3001      	adds	r0, #1
 8009e04:	f000 80a7 	beq.w	8009f56 <_svfiprintf_r+0x1c6>
 8009e08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e0a:	445a      	add	r2, fp
 8009e0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 809f 	beq.w	8009f56 <_svfiprintf_r+0x1c6>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e22:	f10a 0a01 	add.w	sl, sl, #1
 8009e26:	9304      	str	r3, [sp, #16]
 8009e28:	9307      	str	r3, [sp, #28]
 8009e2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e30:	4654      	mov	r4, sl
 8009e32:	2205      	movs	r2, #5
 8009e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e38:	484e      	ldr	r0, [pc, #312]	@ (8009f74 <_svfiprintf_r+0x1e4>)
 8009e3a:	f7fe fd0e 	bl	800885a <memchr>
 8009e3e:	9a04      	ldr	r2, [sp, #16]
 8009e40:	b9d8      	cbnz	r0, 8009e7a <_svfiprintf_r+0xea>
 8009e42:	06d0      	lsls	r0, r2, #27
 8009e44:	bf44      	itt	mi
 8009e46:	2320      	movmi	r3, #32
 8009e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e4c:	0711      	lsls	r1, r2, #28
 8009e4e:	bf44      	itt	mi
 8009e50:	232b      	movmi	r3, #43	@ 0x2b
 8009e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e56:	f89a 3000 	ldrb.w	r3, [sl]
 8009e5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e5c:	d015      	beq.n	8009e8a <_svfiprintf_r+0xfa>
 8009e5e:	4654      	mov	r4, sl
 8009e60:	2000      	movs	r0, #0
 8009e62:	f04f 0c0a 	mov.w	ip, #10
 8009e66:	9a07      	ldr	r2, [sp, #28]
 8009e68:	4621      	mov	r1, r4
 8009e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e6e:	3b30      	subs	r3, #48	@ 0x30
 8009e70:	2b09      	cmp	r3, #9
 8009e72:	d94b      	bls.n	8009f0c <_svfiprintf_r+0x17c>
 8009e74:	b1b0      	cbz	r0, 8009ea4 <_svfiprintf_r+0x114>
 8009e76:	9207      	str	r2, [sp, #28]
 8009e78:	e014      	b.n	8009ea4 <_svfiprintf_r+0x114>
 8009e7a:	eba0 0308 	sub.w	r3, r0, r8
 8009e7e:	fa09 f303 	lsl.w	r3, r9, r3
 8009e82:	4313      	orrs	r3, r2
 8009e84:	46a2      	mov	sl, r4
 8009e86:	9304      	str	r3, [sp, #16]
 8009e88:	e7d2      	b.n	8009e30 <_svfiprintf_r+0xa0>
 8009e8a:	9b03      	ldr	r3, [sp, #12]
 8009e8c:	1d19      	adds	r1, r3, #4
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	9103      	str	r1, [sp, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	bfbb      	ittet	lt
 8009e96:	425b      	neglt	r3, r3
 8009e98:	f042 0202 	orrlt.w	r2, r2, #2
 8009e9c:	9307      	strge	r3, [sp, #28]
 8009e9e:	9307      	strlt	r3, [sp, #28]
 8009ea0:	bfb8      	it	lt
 8009ea2:	9204      	strlt	r2, [sp, #16]
 8009ea4:	7823      	ldrb	r3, [r4, #0]
 8009ea6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ea8:	d10a      	bne.n	8009ec0 <_svfiprintf_r+0x130>
 8009eaa:	7863      	ldrb	r3, [r4, #1]
 8009eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8009eae:	d132      	bne.n	8009f16 <_svfiprintf_r+0x186>
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	3402      	adds	r4, #2
 8009eb4:	1d1a      	adds	r2, r3, #4
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	9203      	str	r2, [sp, #12]
 8009eba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ebe:	9305      	str	r3, [sp, #20]
 8009ec0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009f78 <_svfiprintf_r+0x1e8>
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	4650      	mov	r0, sl
 8009ec8:	7821      	ldrb	r1, [r4, #0]
 8009eca:	f7fe fcc6 	bl	800885a <memchr>
 8009ece:	b138      	cbz	r0, 8009ee0 <_svfiprintf_r+0x150>
 8009ed0:	2240      	movs	r2, #64	@ 0x40
 8009ed2:	9b04      	ldr	r3, [sp, #16]
 8009ed4:	eba0 000a 	sub.w	r0, r0, sl
 8009ed8:	4082      	lsls	r2, r0
 8009eda:	4313      	orrs	r3, r2
 8009edc:	3401      	adds	r4, #1
 8009ede:	9304      	str	r3, [sp, #16]
 8009ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee4:	2206      	movs	r2, #6
 8009ee6:	4825      	ldr	r0, [pc, #148]	@ (8009f7c <_svfiprintf_r+0x1ec>)
 8009ee8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009eec:	f7fe fcb5 	bl	800885a <memchr>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d036      	beq.n	8009f62 <_svfiprintf_r+0x1d2>
 8009ef4:	4b22      	ldr	r3, [pc, #136]	@ (8009f80 <_svfiprintf_r+0x1f0>)
 8009ef6:	bb1b      	cbnz	r3, 8009f40 <_svfiprintf_r+0x1b0>
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	3307      	adds	r3, #7
 8009efc:	f023 0307 	bic.w	r3, r3, #7
 8009f00:	3308      	adds	r3, #8
 8009f02:	9303      	str	r3, [sp, #12]
 8009f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f06:	4433      	add	r3, r6
 8009f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f0a:	e76a      	b.n	8009de2 <_svfiprintf_r+0x52>
 8009f0c:	460c      	mov	r4, r1
 8009f0e:	2001      	movs	r0, #1
 8009f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f14:	e7a8      	b.n	8009e68 <_svfiprintf_r+0xd8>
 8009f16:	2300      	movs	r3, #0
 8009f18:	f04f 0c0a 	mov.w	ip, #10
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	3401      	adds	r4, #1
 8009f20:	9305      	str	r3, [sp, #20]
 8009f22:	4620      	mov	r0, r4
 8009f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f28:	3a30      	subs	r2, #48	@ 0x30
 8009f2a:	2a09      	cmp	r2, #9
 8009f2c:	d903      	bls.n	8009f36 <_svfiprintf_r+0x1a6>
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d0c6      	beq.n	8009ec0 <_svfiprintf_r+0x130>
 8009f32:	9105      	str	r1, [sp, #20]
 8009f34:	e7c4      	b.n	8009ec0 <_svfiprintf_r+0x130>
 8009f36:	4604      	mov	r4, r0
 8009f38:	2301      	movs	r3, #1
 8009f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f3e:	e7f0      	b.n	8009f22 <_svfiprintf_r+0x192>
 8009f40:	ab03      	add	r3, sp, #12
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	462a      	mov	r2, r5
 8009f46:	4638      	mov	r0, r7
 8009f48:	4b0e      	ldr	r3, [pc, #56]	@ (8009f84 <_svfiprintf_r+0x1f4>)
 8009f4a:	a904      	add	r1, sp, #16
 8009f4c:	f7fd fee6 	bl	8007d1c <_printf_float>
 8009f50:	1c42      	adds	r2, r0, #1
 8009f52:	4606      	mov	r6, r0
 8009f54:	d1d6      	bne.n	8009f04 <_svfiprintf_r+0x174>
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	065b      	lsls	r3, r3, #25
 8009f5a:	f53f af2d 	bmi.w	8009db8 <_svfiprintf_r+0x28>
 8009f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f60:	e72c      	b.n	8009dbc <_svfiprintf_r+0x2c>
 8009f62:	ab03      	add	r3, sp, #12
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	462a      	mov	r2, r5
 8009f68:	4638      	mov	r0, r7
 8009f6a:	4b06      	ldr	r3, [pc, #24]	@ (8009f84 <_svfiprintf_r+0x1f4>)
 8009f6c:	a904      	add	r1, sp, #16
 8009f6e:	f7fe f973 	bl	8008258 <_printf_i>
 8009f72:	e7ed      	b.n	8009f50 <_svfiprintf_r+0x1c0>
 8009f74:	0800b720 	.word	0x0800b720
 8009f78:	0800b726 	.word	0x0800b726
 8009f7c:	0800b72a 	.word	0x0800b72a
 8009f80:	08007d1d 	.word	0x08007d1d
 8009f84:	08009cd9 	.word	0x08009cd9

08009f88 <__sflush_r>:
 8009f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8e:	0716      	lsls	r6, r2, #28
 8009f90:	4605      	mov	r5, r0
 8009f92:	460c      	mov	r4, r1
 8009f94:	d454      	bmi.n	800a040 <__sflush_r+0xb8>
 8009f96:	684b      	ldr	r3, [r1, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	dc02      	bgt.n	8009fa2 <__sflush_r+0x1a>
 8009f9c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	dd48      	ble.n	800a034 <__sflush_r+0xac>
 8009fa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fa4:	2e00      	cmp	r6, #0
 8009fa6:	d045      	beq.n	800a034 <__sflush_r+0xac>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009fae:	682f      	ldr	r7, [r5, #0]
 8009fb0:	6a21      	ldr	r1, [r4, #32]
 8009fb2:	602b      	str	r3, [r5, #0]
 8009fb4:	d030      	beq.n	800a018 <__sflush_r+0x90>
 8009fb6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	0759      	lsls	r1, r3, #29
 8009fbc:	d505      	bpl.n	8009fca <__sflush_r+0x42>
 8009fbe:	6863      	ldr	r3, [r4, #4]
 8009fc0:	1ad2      	subs	r2, r2, r3
 8009fc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fc4:	b10b      	cbz	r3, 8009fca <__sflush_r+0x42>
 8009fc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fc8:	1ad2      	subs	r2, r2, r3
 8009fca:	2300      	movs	r3, #0
 8009fcc:	4628      	mov	r0, r5
 8009fce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fd0:	6a21      	ldr	r1, [r4, #32]
 8009fd2:	47b0      	blx	r6
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	89a3      	ldrh	r3, [r4, #12]
 8009fd8:	d106      	bne.n	8009fe8 <__sflush_r+0x60>
 8009fda:	6829      	ldr	r1, [r5, #0]
 8009fdc:	291d      	cmp	r1, #29
 8009fde:	d82b      	bhi.n	800a038 <__sflush_r+0xb0>
 8009fe0:	4a28      	ldr	r2, [pc, #160]	@ (800a084 <__sflush_r+0xfc>)
 8009fe2:	410a      	asrs	r2, r1
 8009fe4:	07d6      	lsls	r6, r2, #31
 8009fe6:	d427      	bmi.n	800a038 <__sflush_r+0xb0>
 8009fe8:	2200      	movs	r2, #0
 8009fea:	6062      	str	r2, [r4, #4]
 8009fec:	6922      	ldr	r2, [r4, #16]
 8009fee:	04d9      	lsls	r1, r3, #19
 8009ff0:	6022      	str	r2, [r4, #0]
 8009ff2:	d504      	bpl.n	8009ffe <__sflush_r+0x76>
 8009ff4:	1c42      	adds	r2, r0, #1
 8009ff6:	d101      	bne.n	8009ffc <__sflush_r+0x74>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b903      	cbnz	r3, 8009ffe <__sflush_r+0x76>
 8009ffc:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ffe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a000:	602f      	str	r7, [r5, #0]
 800a002:	b1b9      	cbz	r1, 800a034 <__sflush_r+0xac>
 800a004:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a008:	4299      	cmp	r1, r3
 800a00a:	d002      	beq.n	800a012 <__sflush_r+0x8a>
 800a00c:	4628      	mov	r0, r5
 800a00e:	f7ff fa93 	bl	8009538 <_free_r>
 800a012:	2300      	movs	r3, #0
 800a014:	6363      	str	r3, [r4, #52]	@ 0x34
 800a016:	e00d      	b.n	800a034 <__sflush_r+0xac>
 800a018:	2301      	movs	r3, #1
 800a01a:	4628      	mov	r0, r5
 800a01c:	47b0      	blx	r6
 800a01e:	4602      	mov	r2, r0
 800a020:	1c50      	adds	r0, r2, #1
 800a022:	d1c9      	bne.n	8009fb8 <__sflush_r+0x30>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0c6      	beq.n	8009fb8 <__sflush_r+0x30>
 800a02a:	2b1d      	cmp	r3, #29
 800a02c:	d001      	beq.n	800a032 <__sflush_r+0xaa>
 800a02e:	2b16      	cmp	r3, #22
 800a030:	d11d      	bne.n	800a06e <__sflush_r+0xe6>
 800a032:	602f      	str	r7, [r5, #0]
 800a034:	2000      	movs	r0, #0
 800a036:	e021      	b.n	800a07c <__sflush_r+0xf4>
 800a038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a03c:	b21b      	sxth	r3, r3
 800a03e:	e01a      	b.n	800a076 <__sflush_r+0xee>
 800a040:	690f      	ldr	r7, [r1, #16]
 800a042:	2f00      	cmp	r7, #0
 800a044:	d0f6      	beq.n	800a034 <__sflush_r+0xac>
 800a046:	0793      	lsls	r3, r2, #30
 800a048:	bf18      	it	ne
 800a04a:	2300      	movne	r3, #0
 800a04c:	680e      	ldr	r6, [r1, #0]
 800a04e:	bf08      	it	eq
 800a050:	694b      	ldreq	r3, [r1, #20]
 800a052:	1bf6      	subs	r6, r6, r7
 800a054:	600f      	str	r7, [r1, #0]
 800a056:	608b      	str	r3, [r1, #8]
 800a058:	2e00      	cmp	r6, #0
 800a05a:	ddeb      	ble.n	800a034 <__sflush_r+0xac>
 800a05c:	4633      	mov	r3, r6
 800a05e:	463a      	mov	r2, r7
 800a060:	4628      	mov	r0, r5
 800a062:	6a21      	ldr	r1, [r4, #32]
 800a064:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a068:	47e0      	blx	ip
 800a06a:	2800      	cmp	r0, #0
 800a06c:	dc07      	bgt.n	800a07e <__sflush_r+0xf6>
 800a06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a076:	f04f 30ff 	mov.w	r0, #4294967295
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a07e:	4407      	add	r7, r0
 800a080:	1a36      	subs	r6, r6, r0
 800a082:	e7e9      	b.n	800a058 <__sflush_r+0xd0>
 800a084:	dfbffffe 	.word	0xdfbffffe

0800a088 <_fflush_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	690b      	ldr	r3, [r1, #16]
 800a08c:	4605      	mov	r5, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	b913      	cbnz	r3, 800a098 <_fflush_r+0x10>
 800a092:	2500      	movs	r5, #0
 800a094:	4628      	mov	r0, r5
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	b118      	cbz	r0, 800a0a2 <_fflush_r+0x1a>
 800a09a:	6a03      	ldr	r3, [r0, #32]
 800a09c:	b90b      	cbnz	r3, 800a0a2 <_fflush_r+0x1a>
 800a09e:	f7fe fa87 	bl	80085b0 <__sinit>
 800a0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d0f3      	beq.n	800a092 <_fflush_r+0xa>
 800a0aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0ac:	07d0      	lsls	r0, r2, #31
 800a0ae:	d404      	bmi.n	800a0ba <_fflush_r+0x32>
 800a0b0:	0599      	lsls	r1, r3, #22
 800a0b2:	d402      	bmi.n	800a0ba <_fflush_r+0x32>
 800a0b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0b6:	f7fe fbc6 	bl	8008846 <__retarget_lock_acquire_recursive>
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	4621      	mov	r1, r4
 800a0be:	f7ff ff63 	bl	8009f88 <__sflush_r>
 800a0c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	07da      	lsls	r2, r3, #31
 800a0c8:	d4e4      	bmi.n	800a094 <_fflush_r+0xc>
 800a0ca:	89a3      	ldrh	r3, [r4, #12]
 800a0cc:	059b      	lsls	r3, r3, #22
 800a0ce:	d4e1      	bmi.n	800a094 <_fflush_r+0xc>
 800a0d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0d2:	f7fe fbb9 	bl	8008848 <__retarget_lock_release_recursive>
 800a0d6:	e7dd      	b.n	800a094 <_fflush_r+0xc>

0800a0d8 <memmove>:
 800a0d8:	4288      	cmp	r0, r1
 800a0da:	b510      	push	{r4, lr}
 800a0dc:	eb01 0402 	add.w	r4, r1, r2
 800a0e0:	d902      	bls.n	800a0e8 <memmove+0x10>
 800a0e2:	4284      	cmp	r4, r0
 800a0e4:	4623      	mov	r3, r4
 800a0e6:	d807      	bhi.n	800a0f8 <memmove+0x20>
 800a0e8:	1e43      	subs	r3, r0, #1
 800a0ea:	42a1      	cmp	r1, r4
 800a0ec:	d008      	beq.n	800a100 <memmove+0x28>
 800a0ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0f6:	e7f8      	b.n	800a0ea <memmove+0x12>
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	4402      	add	r2, r0
 800a0fc:	428a      	cmp	r2, r1
 800a0fe:	d100      	bne.n	800a102 <memmove+0x2a>
 800a100:	bd10      	pop	{r4, pc}
 800a102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a10a:	e7f7      	b.n	800a0fc <memmove+0x24>

0800a10c <__assert_func>:
 800a10c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a10e:	4614      	mov	r4, r2
 800a110:	461a      	mov	r2, r3
 800a112:	4b09      	ldr	r3, [pc, #36]	@ (800a138 <__assert_func+0x2c>)
 800a114:	4605      	mov	r5, r0
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68d8      	ldr	r0, [r3, #12]
 800a11a:	b954      	cbnz	r4, 800a132 <__assert_func+0x26>
 800a11c:	4b07      	ldr	r3, [pc, #28]	@ (800a13c <__assert_func+0x30>)
 800a11e:	461c      	mov	r4, r3
 800a120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a124:	9100      	str	r1, [sp, #0]
 800a126:	462b      	mov	r3, r5
 800a128:	4905      	ldr	r1, [pc, #20]	@ (800a140 <__assert_func+0x34>)
 800a12a:	f000 f82d 	bl	800a188 <fiprintf>
 800a12e:	f000 f83d 	bl	800a1ac <abort>
 800a132:	4b04      	ldr	r3, [pc, #16]	@ (800a144 <__assert_func+0x38>)
 800a134:	e7f4      	b.n	800a120 <__assert_func+0x14>
 800a136:	bf00      	nop
 800a138:	20000034 	.word	0x20000034
 800a13c:	0800b776 	.word	0x0800b776
 800a140:	0800b748 	.word	0x0800b748
 800a144:	0800b73b 	.word	0x0800b73b

0800a148 <__ascii_mbtowc>:
 800a148:	b082      	sub	sp, #8
 800a14a:	b901      	cbnz	r1, 800a14e <__ascii_mbtowc+0x6>
 800a14c:	a901      	add	r1, sp, #4
 800a14e:	b142      	cbz	r2, 800a162 <__ascii_mbtowc+0x1a>
 800a150:	b14b      	cbz	r3, 800a166 <__ascii_mbtowc+0x1e>
 800a152:	7813      	ldrb	r3, [r2, #0]
 800a154:	600b      	str	r3, [r1, #0]
 800a156:	7812      	ldrb	r2, [r2, #0]
 800a158:	1e10      	subs	r0, r2, #0
 800a15a:	bf18      	it	ne
 800a15c:	2001      	movne	r0, #1
 800a15e:	b002      	add	sp, #8
 800a160:	4770      	bx	lr
 800a162:	4610      	mov	r0, r2
 800a164:	e7fb      	b.n	800a15e <__ascii_mbtowc+0x16>
 800a166:	f06f 0001 	mvn.w	r0, #1
 800a16a:	e7f8      	b.n	800a15e <__ascii_mbtowc+0x16>

0800a16c <__ascii_wctomb>:
 800a16c:	4603      	mov	r3, r0
 800a16e:	4608      	mov	r0, r1
 800a170:	b141      	cbz	r1, 800a184 <__ascii_wctomb+0x18>
 800a172:	2aff      	cmp	r2, #255	@ 0xff
 800a174:	d904      	bls.n	800a180 <__ascii_wctomb+0x14>
 800a176:	228a      	movs	r2, #138	@ 0x8a
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	4770      	bx	lr
 800a180:	2001      	movs	r0, #1
 800a182:	700a      	strb	r2, [r1, #0]
 800a184:	4770      	bx	lr
	...

0800a188 <fiprintf>:
 800a188:	b40e      	push	{r1, r2, r3}
 800a18a:	b503      	push	{r0, r1, lr}
 800a18c:	4601      	mov	r1, r0
 800a18e:	ab03      	add	r3, sp, #12
 800a190:	4805      	ldr	r0, [pc, #20]	@ (800a1a8 <fiprintf+0x20>)
 800a192:	f853 2b04 	ldr.w	r2, [r3], #4
 800a196:	6800      	ldr	r0, [r0, #0]
 800a198:	9301      	str	r3, [sp, #4]
 800a19a:	f000 f835 	bl	800a208 <_vfiprintf_r>
 800a19e:	b002      	add	sp, #8
 800a1a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1a4:	b003      	add	sp, #12
 800a1a6:	4770      	bx	lr
 800a1a8:	20000034 	.word	0x20000034

0800a1ac <abort>:
 800a1ac:	2006      	movs	r0, #6
 800a1ae:	b508      	push	{r3, lr}
 800a1b0:	f000 f9fe 	bl	800a5b0 <raise>
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	f7f7 ff26 	bl	8002006 <_exit>

0800a1ba <__sfputc_r>:
 800a1ba:	6893      	ldr	r3, [r2, #8]
 800a1bc:	b410      	push	{r4}
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	6093      	str	r3, [r2, #8]
 800a1c4:	da07      	bge.n	800a1d6 <__sfputc_r+0x1c>
 800a1c6:	6994      	ldr	r4, [r2, #24]
 800a1c8:	42a3      	cmp	r3, r4
 800a1ca:	db01      	blt.n	800a1d0 <__sfputc_r+0x16>
 800a1cc:	290a      	cmp	r1, #10
 800a1ce:	d102      	bne.n	800a1d6 <__sfputc_r+0x1c>
 800a1d0:	bc10      	pop	{r4}
 800a1d2:	f000 b931 	b.w	800a438 <__swbuf_r>
 800a1d6:	6813      	ldr	r3, [r2, #0]
 800a1d8:	1c58      	adds	r0, r3, #1
 800a1da:	6010      	str	r0, [r2, #0]
 800a1dc:	7019      	strb	r1, [r3, #0]
 800a1de:	4608      	mov	r0, r1
 800a1e0:	bc10      	pop	{r4}
 800a1e2:	4770      	bx	lr

0800a1e4 <__sfputs_r>:
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	460f      	mov	r7, r1
 800a1ea:	4614      	mov	r4, r2
 800a1ec:	18d5      	adds	r5, r2, r3
 800a1ee:	42ac      	cmp	r4, r5
 800a1f0:	d101      	bne.n	800a1f6 <__sfputs_r+0x12>
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	e007      	b.n	800a206 <__sfputs_r+0x22>
 800a1f6:	463a      	mov	r2, r7
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1fe:	f7ff ffdc 	bl	800a1ba <__sfputc_r>
 800a202:	1c43      	adds	r3, r0, #1
 800a204:	d1f3      	bne.n	800a1ee <__sfputs_r+0xa>
 800a206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a208 <_vfiprintf_r>:
 800a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	460d      	mov	r5, r1
 800a20e:	4614      	mov	r4, r2
 800a210:	4698      	mov	r8, r3
 800a212:	4606      	mov	r6, r0
 800a214:	b09d      	sub	sp, #116	@ 0x74
 800a216:	b118      	cbz	r0, 800a220 <_vfiprintf_r+0x18>
 800a218:	6a03      	ldr	r3, [r0, #32]
 800a21a:	b90b      	cbnz	r3, 800a220 <_vfiprintf_r+0x18>
 800a21c:	f7fe f9c8 	bl	80085b0 <__sinit>
 800a220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a222:	07d9      	lsls	r1, r3, #31
 800a224:	d405      	bmi.n	800a232 <_vfiprintf_r+0x2a>
 800a226:	89ab      	ldrh	r3, [r5, #12]
 800a228:	059a      	lsls	r2, r3, #22
 800a22a:	d402      	bmi.n	800a232 <_vfiprintf_r+0x2a>
 800a22c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a22e:	f7fe fb0a 	bl	8008846 <__retarget_lock_acquire_recursive>
 800a232:	89ab      	ldrh	r3, [r5, #12]
 800a234:	071b      	lsls	r3, r3, #28
 800a236:	d501      	bpl.n	800a23c <_vfiprintf_r+0x34>
 800a238:	692b      	ldr	r3, [r5, #16]
 800a23a:	b99b      	cbnz	r3, 800a264 <_vfiprintf_r+0x5c>
 800a23c:	4629      	mov	r1, r5
 800a23e:	4630      	mov	r0, r6
 800a240:	f000 f938 	bl	800a4b4 <__swsetup_r>
 800a244:	b170      	cbz	r0, 800a264 <_vfiprintf_r+0x5c>
 800a246:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a248:	07dc      	lsls	r4, r3, #31
 800a24a:	d504      	bpl.n	800a256 <_vfiprintf_r+0x4e>
 800a24c:	f04f 30ff 	mov.w	r0, #4294967295
 800a250:	b01d      	add	sp, #116	@ 0x74
 800a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a256:	89ab      	ldrh	r3, [r5, #12]
 800a258:	0598      	lsls	r0, r3, #22
 800a25a:	d4f7      	bmi.n	800a24c <_vfiprintf_r+0x44>
 800a25c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a25e:	f7fe faf3 	bl	8008848 <__retarget_lock_release_recursive>
 800a262:	e7f3      	b.n	800a24c <_vfiprintf_r+0x44>
 800a264:	2300      	movs	r3, #0
 800a266:	9309      	str	r3, [sp, #36]	@ 0x24
 800a268:	2320      	movs	r3, #32
 800a26a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a26e:	2330      	movs	r3, #48	@ 0x30
 800a270:	f04f 0901 	mov.w	r9, #1
 800a274:	f8cd 800c 	str.w	r8, [sp, #12]
 800a278:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a424 <_vfiprintf_r+0x21c>
 800a27c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a280:	4623      	mov	r3, r4
 800a282:	469a      	mov	sl, r3
 800a284:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a288:	b10a      	cbz	r2, 800a28e <_vfiprintf_r+0x86>
 800a28a:	2a25      	cmp	r2, #37	@ 0x25
 800a28c:	d1f9      	bne.n	800a282 <_vfiprintf_r+0x7a>
 800a28e:	ebba 0b04 	subs.w	fp, sl, r4
 800a292:	d00b      	beq.n	800a2ac <_vfiprintf_r+0xa4>
 800a294:	465b      	mov	r3, fp
 800a296:	4622      	mov	r2, r4
 800a298:	4629      	mov	r1, r5
 800a29a:	4630      	mov	r0, r6
 800a29c:	f7ff ffa2 	bl	800a1e4 <__sfputs_r>
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	f000 80a7 	beq.w	800a3f4 <_vfiprintf_r+0x1ec>
 800a2a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2a8:	445a      	add	r2, fp
 800a2aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f000 809f 	beq.w	800a3f4 <_vfiprintf_r+0x1ec>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2c0:	f10a 0a01 	add.w	sl, sl, #1
 800a2c4:	9304      	str	r3, [sp, #16]
 800a2c6:	9307      	str	r3, [sp, #28]
 800a2c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2ce:	4654      	mov	r4, sl
 800a2d0:	2205      	movs	r2, #5
 800a2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d6:	4853      	ldr	r0, [pc, #332]	@ (800a424 <_vfiprintf_r+0x21c>)
 800a2d8:	f7fe fabf 	bl	800885a <memchr>
 800a2dc:	9a04      	ldr	r2, [sp, #16]
 800a2de:	b9d8      	cbnz	r0, 800a318 <_vfiprintf_r+0x110>
 800a2e0:	06d1      	lsls	r1, r2, #27
 800a2e2:	bf44      	itt	mi
 800a2e4:	2320      	movmi	r3, #32
 800a2e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ea:	0713      	lsls	r3, r2, #28
 800a2ec:	bf44      	itt	mi
 800a2ee:	232b      	movmi	r3, #43	@ 0x2b
 800a2f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2fa:	d015      	beq.n	800a328 <_vfiprintf_r+0x120>
 800a2fc:	4654      	mov	r4, sl
 800a2fe:	2000      	movs	r0, #0
 800a300:	f04f 0c0a 	mov.w	ip, #10
 800a304:	9a07      	ldr	r2, [sp, #28]
 800a306:	4621      	mov	r1, r4
 800a308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a30c:	3b30      	subs	r3, #48	@ 0x30
 800a30e:	2b09      	cmp	r3, #9
 800a310:	d94b      	bls.n	800a3aa <_vfiprintf_r+0x1a2>
 800a312:	b1b0      	cbz	r0, 800a342 <_vfiprintf_r+0x13a>
 800a314:	9207      	str	r2, [sp, #28]
 800a316:	e014      	b.n	800a342 <_vfiprintf_r+0x13a>
 800a318:	eba0 0308 	sub.w	r3, r0, r8
 800a31c:	fa09 f303 	lsl.w	r3, r9, r3
 800a320:	4313      	orrs	r3, r2
 800a322:	46a2      	mov	sl, r4
 800a324:	9304      	str	r3, [sp, #16]
 800a326:	e7d2      	b.n	800a2ce <_vfiprintf_r+0xc6>
 800a328:	9b03      	ldr	r3, [sp, #12]
 800a32a:	1d19      	adds	r1, r3, #4
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	9103      	str	r1, [sp, #12]
 800a330:	2b00      	cmp	r3, #0
 800a332:	bfbb      	ittet	lt
 800a334:	425b      	neglt	r3, r3
 800a336:	f042 0202 	orrlt.w	r2, r2, #2
 800a33a:	9307      	strge	r3, [sp, #28]
 800a33c:	9307      	strlt	r3, [sp, #28]
 800a33e:	bfb8      	it	lt
 800a340:	9204      	strlt	r2, [sp, #16]
 800a342:	7823      	ldrb	r3, [r4, #0]
 800a344:	2b2e      	cmp	r3, #46	@ 0x2e
 800a346:	d10a      	bne.n	800a35e <_vfiprintf_r+0x156>
 800a348:	7863      	ldrb	r3, [r4, #1]
 800a34a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a34c:	d132      	bne.n	800a3b4 <_vfiprintf_r+0x1ac>
 800a34e:	9b03      	ldr	r3, [sp, #12]
 800a350:	3402      	adds	r4, #2
 800a352:	1d1a      	adds	r2, r3, #4
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	9203      	str	r2, [sp, #12]
 800a358:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a35c:	9305      	str	r3, [sp, #20]
 800a35e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a428 <_vfiprintf_r+0x220>
 800a362:	2203      	movs	r2, #3
 800a364:	4650      	mov	r0, sl
 800a366:	7821      	ldrb	r1, [r4, #0]
 800a368:	f7fe fa77 	bl	800885a <memchr>
 800a36c:	b138      	cbz	r0, 800a37e <_vfiprintf_r+0x176>
 800a36e:	2240      	movs	r2, #64	@ 0x40
 800a370:	9b04      	ldr	r3, [sp, #16]
 800a372:	eba0 000a 	sub.w	r0, r0, sl
 800a376:	4082      	lsls	r2, r0
 800a378:	4313      	orrs	r3, r2
 800a37a:	3401      	adds	r4, #1
 800a37c:	9304      	str	r3, [sp, #16]
 800a37e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a382:	2206      	movs	r2, #6
 800a384:	4829      	ldr	r0, [pc, #164]	@ (800a42c <_vfiprintf_r+0x224>)
 800a386:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a38a:	f7fe fa66 	bl	800885a <memchr>
 800a38e:	2800      	cmp	r0, #0
 800a390:	d03f      	beq.n	800a412 <_vfiprintf_r+0x20a>
 800a392:	4b27      	ldr	r3, [pc, #156]	@ (800a430 <_vfiprintf_r+0x228>)
 800a394:	bb1b      	cbnz	r3, 800a3de <_vfiprintf_r+0x1d6>
 800a396:	9b03      	ldr	r3, [sp, #12]
 800a398:	3307      	adds	r3, #7
 800a39a:	f023 0307 	bic.w	r3, r3, #7
 800a39e:	3308      	adds	r3, #8
 800a3a0:	9303      	str	r3, [sp, #12]
 800a3a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a4:	443b      	add	r3, r7
 800a3a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3a8:	e76a      	b.n	800a280 <_vfiprintf_r+0x78>
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	2001      	movs	r0, #1
 800a3ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3b2:	e7a8      	b.n	800a306 <_vfiprintf_r+0xfe>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f04f 0c0a 	mov.w	ip, #10
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	3401      	adds	r4, #1
 800a3be:	9305      	str	r3, [sp, #20]
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3c6:	3a30      	subs	r2, #48	@ 0x30
 800a3c8:	2a09      	cmp	r2, #9
 800a3ca:	d903      	bls.n	800a3d4 <_vfiprintf_r+0x1cc>
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d0c6      	beq.n	800a35e <_vfiprintf_r+0x156>
 800a3d0:	9105      	str	r1, [sp, #20]
 800a3d2:	e7c4      	b.n	800a35e <_vfiprintf_r+0x156>
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3dc:	e7f0      	b.n	800a3c0 <_vfiprintf_r+0x1b8>
 800a3de:	ab03      	add	r3, sp, #12
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	462a      	mov	r2, r5
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	4b13      	ldr	r3, [pc, #76]	@ (800a434 <_vfiprintf_r+0x22c>)
 800a3e8:	a904      	add	r1, sp, #16
 800a3ea:	f7fd fc97 	bl	8007d1c <_printf_float>
 800a3ee:	4607      	mov	r7, r0
 800a3f0:	1c78      	adds	r0, r7, #1
 800a3f2:	d1d6      	bne.n	800a3a2 <_vfiprintf_r+0x19a>
 800a3f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3f6:	07d9      	lsls	r1, r3, #31
 800a3f8:	d405      	bmi.n	800a406 <_vfiprintf_r+0x1fe>
 800a3fa:	89ab      	ldrh	r3, [r5, #12]
 800a3fc:	059a      	lsls	r2, r3, #22
 800a3fe:	d402      	bmi.n	800a406 <_vfiprintf_r+0x1fe>
 800a400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a402:	f7fe fa21 	bl	8008848 <__retarget_lock_release_recursive>
 800a406:	89ab      	ldrh	r3, [r5, #12]
 800a408:	065b      	lsls	r3, r3, #25
 800a40a:	f53f af1f 	bmi.w	800a24c <_vfiprintf_r+0x44>
 800a40e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a410:	e71e      	b.n	800a250 <_vfiprintf_r+0x48>
 800a412:	ab03      	add	r3, sp, #12
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	462a      	mov	r2, r5
 800a418:	4630      	mov	r0, r6
 800a41a:	4b06      	ldr	r3, [pc, #24]	@ (800a434 <_vfiprintf_r+0x22c>)
 800a41c:	a904      	add	r1, sp, #16
 800a41e:	f7fd ff1b 	bl	8008258 <_printf_i>
 800a422:	e7e4      	b.n	800a3ee <_vfiprintf_r+0x1e6>
 800a424:	0800b720 	.word	0x0800b720
 800a428:	0800b726 	.word	0x0800b726
 800a42c:	0800b72a 	.word	0x0800b72a
 800a430:	08007d1d 	.word	0x08007d1d
 800a434:	0800a1e5 	.word	0x0800a1e5

0800a438 <__swbuf_r>:
 800a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43a:	460e      	mov	r6, r1
 800a43c:	4614      	mov	r4, r2
 800a43e:	4605      	mov	r5, r0
 800a440:	b118      	cbz	r0, 800a44a <__swbuf_r+0x12>
 800a442:	6a03      	ldr	r3, [r0, #32]
 800a444:	b90b      	cbnz	r3, 800a44a <__swbuf_r+0x12>
 800a446:	f7fe f8b3 	bl	80085b0 <__sinit>
 800a44a:	69a3      	ldr	r3, [r4, #24]
 800a44c:	60a3      	str	r3, [r4, #8]
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	071a      	lsls	r2, r3, #28
 800a452:	d501      	bpl.n	800a458 <__swbuf_r+0x20>
 800a454:	6923      	ldr	r3, [r4, #16]
 800a456:	b943      	cbnz	r3, 800a46a <__swbuf_r+0x32>
 800a458:	4621      	mov	r1, r4
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 f82a 	bl	800a4b4 <__swsetup_r>
 800a460:	b118      	cbz	r0, 800a46a <__swbuf_r+0x32>
 800a462:	f04f 37ff 	mov.w	r7, #4294967295
 800a466:	4638      	mov	r0, r7
 800a468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	6922      	ldr	r2, [r4, #16]
 800a46e:	b2f6      	uxtb	r6, r6
 800a470:	1a98      	subs	r0, r3, r2
 800a472:	6963      	ldr	r3, [r4, #20]
 800a474:	4637      	mov	r7, r6
 800a476:	4283      	cmp	r3, r0
 800a478:	dc05      	bgt.n	800a486 <__swbuf_r+0x4e>
 800a47a:	4621      	mov	r1, r4
 800a47c:	4628      	mov	r0, r5
 800a47e:	f7ff fe03 	bl	800a088 <_fflush_r>
 800a482:	2800      	cmp	r0, #0
 800a484:	d1ed      	bne.n	800a462 <__swbuf_r+0x2a>
 800a486:	68a3      	ldr	r3, [r4, #8]
 800a488:	3b01      	subs	r3, #1
 800a48a:	60a3      	str	r3, [r4, #8]
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	6022      	str	r2, [r4, #0]
 800a492:	701e      	strb	r6, [r3, #0]
 800a494:	6962      	ldr	r2, [r4, #20]
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	429a      	cmp	r2, r3
 800a49a:	d004      	beq.n	800a4a6 <__swbuf_r+0x6e>
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	07db      	lsls	r3, r3, #31
 800a4a0:	d5e1      	bpl.n	800a466 <__swbuf_r+0x2e>
 800a4a2:	2e0a      	cmp	r6, #10
 800a4a4:	d1df      	bne.n	800a466 <__swbuf_r+0x2e>
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f7ff fded 	bl	800a088 <_fflush_r>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d0d9      	beq.n	800a466 <__swbuf_r+0x2e>
 800a4b2:	e7d6      	b.n	800a462 <__swbuf_r+0x2a>

0800a4b4 <__swsetup_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	4b29      	ldr	r3, [pc, #164]	@ (800a55c <__swsetup_r+0xa8>)
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	6818      	ldr	r0, [r3, #0]
 800a4bc:	460c      	mov	r4, r1
 800a4be:	b118      	cbz	r0, 800a4c8 <__swsetup_r+0x14>
 800a4c0:	6a03      	ldr	r3, [r0, #32]
 800a4c2:	b90b      	cbnz	r3, 800a4c8 <__swsetup_r+0x14>
 800a4c4:	f7fe f874 	bl	80085b0 <__sinit>
 800a4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4cc:	0719      	lsls	r1, r3, #28
 800a4ce:	d422      	bmi.n	800a516 <__swsetup_r+0x62>
 800a4d0:	06da      	lsls	r2, r3, #27
 800a4d2:	d407      	bmi.n	800a4e4 <__swsetup_r+0x30>
 800a4d4:	2209      	movs	r2, #9
 800a4d6:	602a      	str	r2, [r5, #0]
 800a4d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	e033      	b.n	800a54c <__swsetup_r+0x98>
 800a4e4:	0758      	lsls	r0, r3, #29
 800a4e6:	d512      	bpl.n	800a50e <__swsetup_r+0x5a>
 800a4e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4ea:	b141      	cbz	r1, 800a4fe <__swsetup_r+0x4a>
 800a4ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4f0:	4299      	cmp	r1, r3
 800a4f2:	d002      	beq.n	800a4fa <__swsetup_r+0x46>
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f7ff f81f 	bl	8009538 <_free_r>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a504:	81a3      	strh	r3, [r4, #12]
 800a506:	2300      	movs	r3, #0
 800a508:	6063      	str	r3, [r4, #4]
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	f043 0308 	orr.w	r3, r3, #8
 800a514:	81a3      	strh	r3, [r4, #12]
 800a516:	6923      	ldr	r3, [r4, #16]
 800a518:	b94b      	cbnz	r3, 800a52e <__swsetup_r+0x7a>
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a524:	d003      	beq.n	800a52e <__swsetup_r+0x7a>
 800a526:	4621      	mov	r1, r4
 800a528:	4628      	mov	r0, r5
 800a52a:	f000 f882 	bl	800a632 <__smakebuf_r>
 800a52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a532:	f013 0201 	ands.w	r2, r3, #1
 800a536:	d00a      	beq.n	800a54e <__swsetup_r+0x9a>
 800a538:	2200      	movs	r2, #0
 800a53a:	60a2      	str	r2, [r4, #8]
 800a53c:	6962      	ldr	r2, [r4, #20]
 800a53e:	4252      	negs	r2, r2
 800a540:	61a2      	str	r2, [r4, #24]
 800a542:	6922      	ldr	r2, [r4, #16]
 800a544:	b942      	cbnz	r2, 800a558 <__swsetup_r+0xa4>
 800a546:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a54a:	d1c5      	bne.n	800a4d8 <__swsetup_r+0x24>
 800a54c:	bd38      	pop	{r3, r4, r5, pc}
 800a54e:	0799      	lsls	r1, r3, #30
 800a550:	bf58      	it	pl
 800a552:	6962      	ldrpl	r2, [r4, #20]
 800a554:	60a2      	str	r2, [r4, #8]
 800a556:	e7f4      	b.n	800a542 <__swsetup_r+0x8e>
 800a558:	2000      	movs	r0, #0
 800a55a:	e7f7      	b.n	800a54c <__swsetup_r+0x98>
 800a55c:	20000034 	.word	0x20000034

0800a560 <_raise_r>:
 800a560:	291f      	cmp	r1, #31
 800a562:	b538      	push	{r3, r4, r5, lr}
 800a564:	4605      	mov	r5, r0
 800a566:	460c      	mov	r4, r1
 800a568:	d904      	bls.n	800a574 <_raise_r+0x14>
 800a56a:	2316      	movs	r3, #22
 800a56c:	6003      	str	r3, [r0, #0]
 800a56e:	f04f 30ff 	mov.w	r0, #4294967295
 800a572:	bd38      	pop	{r3, r4, r5, pc}
 800a574:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a576:	b112      	cbz	r2, 800a57e <_raise_r+0x1e>
 800a578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a57c:	b94b      	cbnz	r3, 800a592 <_raise_r+0x32>
 800a57e:	4628      	mov	r0, r5
 800a580:	f000 f830 	bl	800a5e4 <_getpid_r>
 800a584:	4622      	mov	r2, r4
 800a586:	4601      	mov	r1, r0
 800a588:	4628      	mov	r0, r5
 800a58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a58e:	f000 b817 	b.w	800a5c0 <_kill_r>
 800a592:	2b01      	cmp	r3, #1
 800a594:	d00a      	beq.n	800a5ac <_raise_r+0x4c>
 800a596:	1c59      	adds	r1, r3, #1
 800a598:	d103      	bne.n	800a5a2 <_raise_r+0x42>
 800a59a:	2316      	movs	r3, #22
 800a59c:	6003      	str	r3, [r0, #0]
 800a59e:	2001      	movs	r0, #1
 800a5a0:	e7e7      	b.n	800a572 <_raise_r+0x12>
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a5aa:	4798      	blx	r3
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	e7e0      	b.n	800a572 <_raise_r+0x12>

0800a5b0 <raise>:
 800a5b0:	4b02      	ldr	r3, [pc, #8]	@ (800a5bc <raise+0xc>)
 800a5b2:	4601      	mov	r1, r0
 800a5b4:	6818      	ldr	r0, [r3, #0]
 800a5b6:	f7ff bfd3 	b.w	800a560 <_raise_r>
 800a5ba:	bf00      	nop
 800a5bc:	20000034 	.word	0x20000034

0800a5c0 <_kill_r>:
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	4d06      	ldr	r5, [pc, #24]	@ (800a5e0 <_kill_r+0x20>)
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	602b      	str	r3, [r5, #0]
 800a5ce:	f7f7 fd0a 	bl	8001fe6 <_kill>
 800a5d2:	1c43      	adds	r3, r0, #1
 800a5d4:	d102      	bne.n	800a5dc <_kill_r+0x1c>
 800a5d6:	682b      	ldr	r3, [r5, #0]
 800a5d8:	b103      	cbz	r3, 800a5dc <_kill_r+0x1c>
 800a5da:	6023      	str	r3, [r4, #0]
 800a5dc:	bd38      	pop	{r3, r4, r5, pc}
 800a5de:	bf00      	nop
 800a5e0:	2000068c 	.word	0x2000068c

0800a5e4 <_getpid_r>:
 800a5e4:	f7f7 bcf8 	b.w	8001fd8 <_getpid>

0800a5e8 <__swhatbuf_r>:
 800a5e8:	b570      	push	{r4, r5, r6, lr}
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f0:	4615      	mov	r5, r2
 800a5f2:	2900      	cmp	r1, #0
 800a5f4:	461e      	mov	r6, r3
 800a5f6:	b096      	sub	sp, #88	@ 0x58
 800a5f8:	da0c      	bge.n	800a614 <__swhatbuf_r+0x2c>
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a602:	bf14      	ite	ne
 800a604:	2340      	movne	r3, #64	@ 0x40
 800a606:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a60a:	2000      	movs	r0, #0
 800a60c:	6031      	str	r1, [r6, #0]
 800a60e:	602b      	str	r3, [r5, #0]
 800a610:	b016      	add	sp, #88	@ 0x58
 800a612:	bd70      	pop	{r4, r5, r6, pc}
 800a614:	466a      	mov	r2, sp
 800a616:	f000 f849 	bl	800a6ac <_fstat_r>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	dbed      	blt.n	800a5fa <__swhatbuf_r+0x12>
 800a61e:	9901      	ldr	r1, [sp, #4]
 800a620:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a624:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a628:	4259      	negs	r1, r3
 800a62a:	4159      	adcs	r1, r3
 800a62c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a630:	e7eb      	b.n	800a60a <__swhatbuf_r+0x22>

0800a632 <__smakebuf_r>:
 800a632:	898b      	ldrh	r3, [r1, #12]
 800a634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a636:	079d      	lsls	r5, r3, #30
 800a638:	4606      	mov	r6, r0
 800a63a:	460c      	mov	r4, r1
 800a63c:	d507      	bpl.n	800a64e <__smakebuf_r+0x1c>
 800a63e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a642:	6023      	str	r3, [r4, #0]
 800a644:	6123      	str	r3, [r4, #16]
 800a646:	2301      	movs	r3, #1
 800a648:	6163      	str	r3, [r4, #20]
 800a64a:	b003      	add	sp, #12
 800a64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a64e:	466a      	mov	r2, sp
 800a650:	ab01      	add	r3, sp, #4
 800a652:	f7ff ffc9 	bl	800a5e8 <__swhatbuf_r>
 800a656:	9f00      	ldr	r7, [sp, #0]
 800a658:	4605      	mov	r5, r0
 800a65a:	4639      	mov	r1, r7
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7fd f979 	bl	8007954 <_malloc_r>
 800a662:	b948      	cbnz	r0, 800a678 <__smakebuf_r+0x46>
 800a664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a668:	059a      	lsls	r2, r3, #22
 800a66a:	d4ee      	bmi.n	800a64a <__smakebuf_r+0x18>
 800a66c:	f023 0303 	bic.w	r3, r3, #3
 800a670:	f043 0302 	orr.w	r3, r3, #2
 800a674:	81a3      	strh	r3, [r4, #12]
 800a676:	e7e2      	b.n	800a63e <__smakebuf_r+0xc>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a67e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a682:	81a3      	strh	r3, [r4, #12]
 800a684:	9b01      	ldr	r3, [sp, #4]
 800a686:	6020      	str	r0, [r4, #0]
 800a688:	b15b      	cbz	r3, 800a6a2 <__smakebuf_r+0x70>
 800a68a:	4630      	mov	r0, r6
 800a68c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a690:	f000 f81e 	bl	800a6d0 <_isatty_r>
 800a694:	b128      	cbz	r0, 800a6a2 <__smakebuf_r+0x70>
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	f023 0303 	bic.w	r3, r3, #3
 800a69c:	f043 0301 	orr.w	r3, r3, #1
 800a6a0:	81a3      	strh	r3, [r4, #12]
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	431d      	orrs	r5, r3
 800a6a6:	81a5      	strh	r5, [r4, #12]
 800a6a8:	e7cf      	b.n	800a64a <__smakebuf_r+0x18>
	...

0800a6ac <_fstat_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4d06      	ldr	r5, [pc, #24]	@ (800a6cc <_fstat_r+0x20>)
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	4608      	mov	r0, r1
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	602b      	str	r3, [r5, #0]
 800a6ba:	f7f7 fcf3 	bl	80020a4 <_fstat>
 800a6be:	1c43      	adds	r3, r0, #1
 800a6c0:	d102      	bne.n	800a6c8 <_fstat_r+0x1c>
 800a6c2:	682b      	ldr	r3, [r5, #0]
 800a6c4:	b103      	cbz	r3, 800a6c8 <_fstat_r+0x1c>
 800a6c6:	6023      	str	r3, [r4, #0]
 800a6c8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ca:	bf00      	nop
 800a6cc:	2000068c 	.word	0x2000068c

0800a6d0 <_isatty_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	4d05      	ldr	r5, [pc, #20]	@ (800a6ec <_isatty_r+0x1c>)
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	4608      	mov	r0, r1
 800a6da:	602b      	str	r3, [r5, #0]
 800a6dc:	f7f7 fcf1 	bl	80020c2 <_isatty>
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	d102      	bne.n	800a6ea <_isatty_r+0x1a>
 800a6e4:	682b      	ldr	r3, [r5, #0]
 800a6e6:	b103      	cbz	r3, 800a6ea <_isatty_r+0x1a>
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	2000068c 	.word	0x2000068c

0800a6f0 <sinf>:
 800a6f0:	b507      	push	{r0, r1, r2, lr}
 800a6f2:	4a1b      	ldr	r2, [pc, #108]	@ (800a760 <sinf+0x70>)
 800a6f4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	4601      	mov	r1, r0
 800a6fc:	d806      	bhi.n	800a70c <sinf+0x1c>
 800a6fe:	2200      	movs	r2, #0
 800a700:	2100      	movs	r1, #0
 800a702:	b003      	add	sp, #12
 800a704:	f85d eb04 	ldr.w	lr, [sp], #4
 800a708:	f000 b8f2 	b.w	800a8f0 <__kernel_sinf>
 800a70c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a710:	d304      	bcc.n	800a71c <sinf+0x2c>
 800a712:	f7f6 fa2d 	bl	8000b70 <__aeabi_fsub>
 800a716:	b003      	add	sp, #12
 800a718:	f85d fb04 	ldr.w	pc, [sp], #4
 800a71c:	4669      	mov	r1, sp
 800a71e:	f000 f95d 	bl	800a9dc <__ieee754_rem_pio2f>
 800a722:	f000 0003 	and.w	r0, r0, #3
 800a726:	2801      	cmp	r0, #1
 800a728:	d008      	beq.n	800a73c <sinf+0x4c>
 800a72a:	2802      	cmp	r0, #2
 800a72c:	d00b      	beq.n	800a746 <sinf+0x56>
 800a72e:	b990      	cbnz	r0, 800a756 <sinf+0x66>
 800a730:	2201      	movs	r2, #1
 800a732:	9901      	ldr	r1, [sp, #4]
 800a734:	9800      	ldr	r0, [sp, #0]
 800a736:	f000 f8db 	bl	800a8f0 <__kernel_sinf>
 800a73a:	e7ec      	b.n	800a716 <sinf+0x26>
 800a73c:	9901      	ldr	r1, [sp, #4]
 800a73e:	9800      	ldr	r0, [sp, #0]
 800a740:	f000 f856 	bl	800a7f0 <__kernel_cosf>
 800a744:	e7e7      	b.n	800a716 <sinf+0x26>
 800a746:	2201      	movs	r2, #1
 800a748:	9901      	ldr	r1, [sp, #4]
 800a74a:	9800      	ldr	r0, [sp, #0]
 800a74c:	f000 f8d0 	bl	800a8f0 <__kernel_sinf>
 800a750:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a754:	e7df      	b.n	800a716 <sinf+0x26>
 800a756:	9901      	ldr	r1, [sp, #4]
 800a758:	9800      	ldr	r0, [sp, #0]
 800a75a:	f000 f849 	bl	800a7f0 <__kernel_cosf>
 800a75e:	e7f7      	b.n	800a750 <sinf+0x60>
 800a760:	3f490fd8 	.word	0x3f490fd8

0800a764 <round>:
 800a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a766:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a76a:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800a76e:	2a13      	cmp	r2, #19
 800a770:	4604      	mov	r4, r0
 800a772:	460d      	mov	r5, r1
 800a774:	460b      	mov	r3, r1
 800a776:	dc1a      	bgt.n	800a7ae <round+0x4a>
 800a778:	2a00      	cmp	r2, #0
 800a77a:	da0b      	bge.n	800a794 <round+0x30>
 800a77c:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800a780:	3201      	adds	r2, #1
 800a782:	bf04      	itt	eq
 800a784:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800a788:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800a78c:	2200      	movs	r2, #0
 800a78e:	461d      	mov	r5, r3
 800a790:	4614      	mov	r4, r2
 800a792:	e016      	b.n	800a7c2 <round+0x5e>
 800a794:	4815      	ldr	r0, [pc, #84]	@ (800a7ec <round+0x88>)
 800a796:	4110      	asrs	r0, r2
 800a798:	4001      	ands	r1, r0
 800a79a:	4321      	orrs	r1, r4
 800a79c:	d011      	beq.n	800a7c2 <round+0x5e>
 800a79e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800a7a2:	fa41 f202 	asr.w	r2, r1, r2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	ea23 0300 	bic.w	r3, r3, r0
 800a7ac:	e7ee      	b.n	800a78c <round+0x28>
 800a7ae:	2a33      	cmp	r2, #51	@ 0x33
 800a7b0:	dd0a      	ble.n	800a7c8 <round+0x64>
 800a7b2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a7b6:	d104      	bne.n	800a7c2 <round+0x5e>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	f7f5 fcd7 	bl	800016c <__adddf3>
 800a7be:	4604      	mov	r4, r0
 800a7c0:	460d      	mov	r5, r1
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7cc:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800a7d0:	40f8      	lsrs	r0, r7
 800a7d2:	4220      	tst	r0, r4
 800a7d4:	d0f5      	beq.n	800a7c2 <round+0x5e>
 800a7d6:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800a7da:	2201      	movs	r2, #1
 800a7dc:	408a      	lsls	r2, r1
 800a7de:	1912      	adds	r2, r2, r4
 800a7e0:	bf28      	it	cs
 800a7e2:	3301      	addcs	r3, #1
 800a7e4:	ea22 0200 	bic.w	r2, r2, r0
 800a7e8:	e7d1      	b.n	800a78e <round+0x2a>
 800a7ea:	bf00      	nop
 800a7ec:	000fffff 	.word	0x000fffff

0800a7f0 <__kernel_cosf>:
 800a7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f4:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800a7f8:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	4688      	mov	r8, r1
 800a800:	d203      	bcs.n	800a80a <__kernel_cosf+0x1a>
 800a802:	f7f6 fc85 	bl	8001110 <__aeabi_f2iz>
 800a806:	2800      	cmp	r0, #0
 800a808:	d05c      	beq.n	800a8c4 <__kernel_cosf+0xd4>
 800a80a:	4631      	mov	r1, r6
 800a80c:	4630      	mov	r0, r6
 800a80e:	f7f6 fab9 	bl	8000d84 <__aeabi_fmul>
 800a812:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a816:	4604      	mov	r4, r0
 800a818:	f7f6 fab4 	bl	8000d84 <__aeabi_fmul>
 800a81c:	492b      	ldr	r1, [pc, #172]	@ (800a8cc <__kernel_cosf+0xdc>)
 800a81e:	4607      	mov	r7, r0
 800a820:	4620      	mov	r0, r4
 800a822:	f7f6 faaf 	bl	8000d84 <__aeabi_fmul>
 800a826:	492a      	ldr	r1, [pc, #168]	@ (800a8d0 <__kernel_cosf+0xe0>)
 800a828:	f7f6 f9a4 	bl	8000b74 <__addsf3>
 800a82c:	4621      	mov	r1, r4
 800a82e:	f7f6 faa9 	bl	8000d84 <__aeabi_fmul>
 800a832:	4928      	ldr	r1, [pc, #160]	@ (800a8d4 <__kernel_cosf+0xe4>)
 800a834:	f7f6 f99c 	bl	8000b70 <__aeabi_fsub>
 800a838:	4621      	mov	r1, r4
 800a83a:	f7f6 faa3 	bl	8000d84 <__aeabi_fmul>
 800a83e:	4926      	ldr	r1, [pc, #152]	@ (800a8d8 <__kernel_cosf+0xe8>)
 800a840:	f7f6 f998 	bl	8000b74 <__addsf3>
 800a844:	4621      	mov	r1, r4
 800a846:	f7f6 fa9d 	bl	8000d84 <__aeabi_fmul>
 800a84a:	4924      	ldr	r1, [pc, #144]	@ (800a8dc <__kernel_cosf+0xec>)
 800a84c:	f7f6 f990 	bl	8000b70 <__aeabi_fsub>
 800a850:	4621      	mov	r1, r4
 800a852:	f7f6 fa97 	bl	8000d84 <__aeabi_fmul>
 800a856:	4922      	ldr	r1, [pc, #136]	@ (800a8e0 <__kernel_cosf+0xf0>)
 800a858:	f7f6 f98c 	bl	8000b74 <__addsf3>
 800a85c:	4621      	mov	r1, r4
 800a85e:	f7f6 fa91 	bl	8000d84 <__aeabi_fmul>
 800a862:	4621      	mov	r1, r4
 800a864:	f7f6 fa8e 	bl	8000d84 <__aeabi_fmul>
 800a868:	4641      	mov	r1, r8
 800a86a:	4604      	mov	r4, r0
 800a86c:	4630      	mov	r0, r6
 800a86e:	f7f6 fa89 	bl	8000d84 <__aeabi_fmul>
 800a872:	4601      	mov	r1, r0
 800a874:	4620      	mov	r0, r4
 800a876:	f7f6 f97b 	bl	8000b70 <__aeabi_fsub>
 800a87a:	4b1a      	ldr	r3, [pc, #104]	@ (800a8e4 <__kernel_cosf+0xf4>)
 800a87c:	4604      	mov	r4, r0
 800a87e:	429d      	cmp	r5, r3
 800a880:	d80a      	bhi.n	800a898 <__kernel_cosf+0xa8>
 800a882:	4601      	mov	r1, r0
 800a884:	4638      	mov	r0, r7
 800a886:	f7f6 f973 	bl	8000b70 <__aeabi_fsub>
 800a88a:	4601      	mov	r1, r0
 800a88c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a890:	f7f6 f96e 	bl	8000b70 <__aeabi_fsub>
 800a894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a898:	4b13      	ldr	r3, [pc, #76]	@ (800a8e8 <__kernel_cosf+0xf8>)
 800a89a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a89e:	429d      	cmp	r5, r3
 800a8a0:	bf8c      	ite	hi
 800a8a2:	4d12      	ldrhi	r5, [pc, #72]	@ (800a8ec <__kernel_cosf+0xfc>)
 800a8a4:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	f7f6 f961 	bl	8000b70 <__aeabi_fsub>
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	f7f6 f95c 	bl	8000b70 <__aeabi_fsub>
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	f7f6 f959 	bl	8000b70 <__aeabi_fsub>
 800a8be:	4601      	mov	r1, r0
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	e7e5      	b.n	800a890 <__kernel_cosf+0xa0>
 800a8c4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a8c8:	e7e4      	b.n	800a894 <__kernel_cosf+0xa4>
 800a8ca:	bf00      	nop
 800a8cc:	ad47d74e 	.word	0xad47d74e
 800a8d0:	310f74f6 	.word	0x310f74f6
 800a8d4:	3493f27c 	.word	0x3493f27c
 800a8d8:	37d00d01 	.word	0x37d00d01
 800a8dc:	3ab60b61 	.word	0x3ab60b61
 800a8e0:	3d2aaaab 	.word	0x3d2aaaab
 800a8e4:	3e999999 	.word	0x3e999999
 800a8e8:	3f480000 	.word	0x3f480000
 800a8ec:	3e900000 	.word	0x3e900000

0800a8f0 <__kernel_sinf>:
 800a8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8f4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a8f8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	460f      	mov	r7, r1
 800a900:	4691      	mov	r9, r2
 800a902:	d203      	bcs.n	800a90c <__kernel_sinf+0x1c>
 800a904:	f7f6 fc04 	bl	8001110 <__aeabi_f2iz>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d035      	beq.n	800a978 <__kernel_sinf+0x88>
 800a90c:	4621      	mov	r1, r4
 800a90e:	4620      	mov	r0, r4
 800a910:	f7f6 fa38 	bl	8000d84 <__aeabi_fmul>
 800a914:	4605      	mov	r5, r0
 800a916:	4601      	mov	r1, r0
 800a918:	4620      	mov	r0, r4
 800a91a:	f7f6 fa33 	bl	8000d84 <__aeabi_fmul>
 800a91e:	4929      	ldr	r1, [pc, #164]	@ (800a9c4 <__kernel_sinf+0xd4>)
 800a920:	4606      	mov	r6, r0
 800a922:	4628      	mov	r0, r5
 800a924:	f7f6 fa2e 	bl	8000d84 <__aeabi_fmul>
 800a928:	4927      	ldr	r1, [pc, #156]	@ (800a9c8 <__kernel_sinf+0xd8>)
 800a92a:	f7f6 f921 	bl	8000b70 <__aeabi_fsub>
 800a92e:	4629      	mov	r1, r5
 800a930:	f7f6 fa28 	bl	8000d84 <__aeabi_fmul>
 800a934:	4925      	ldr	r1, [pc, #148]	@ (800a9cc <__kernel_sinf+0xdc>)
 800a936:	f7f6 f91d 	bl	8000b74 <__addsf3>
 800a93a:	4629      	mov	r1, r5
 800a93c:	f7f6 fa22 	bl	8000d84 <__aeabi_fmul>
 800a940:	4923      	ldr	r1, [pc, #140]	@ (800a9d0 <__kernel_sinf+0xe0>)
 800a942:	f7f6 f915 	bl	8000b70 <__aeabi_fsub>
 800a946:	4629      	mov	r1, r5
 800a948:	f7f6 fa1c 	bl	8000d84 <__aeabi_fmul>
 800a94c:	4921      	ldr	r1, [pc, #132]	@ (800a9d4 <__kernel_sinf+0xe4>)
 800a94e:	f7f6 f911 	bl	8000b74 <__addsf3>
 800a952:	4680      	mov	r8, r0
 800a954:	f1b9 0f00 	cmp.w	r9, #0
 800a958:	d111      	bne.n	800a97e <__kernel_sinf+0x8e>
 800a95a:	4601      	mov	r1, r0
 800a95c:	4628      	mov	r0, r5
 800a95e:	f7f6 fa11 	bl	8000d84 <__aeabi_fmul>
 800a962:	491d      	ldr	r1, [pc, #116]	@ (800a9d8 <__kernel_sinf+0xe8>)
 800a964:	f7f6 f904 	bl	8000b70 <__aeabi_fsub>
 800a968:	4631      	mov	r1, r6
 800a96a:	f7f6 fa0b 	bl	8000d84 <__aeabi_fmul>
 800a96e:	4601      	mov	r1, r0
 800a970:	4620      	mov	r0, r4
 800a972:	f7f6 f8ff 	bl	8000b74 <__addsf3>
 800a976:	4604      	mov	r4, r0
 800a978:	4620      	mov	r0, r4
 800a97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a97e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a982:	4638      	mov	r0, r7
 800a984:	f7f6 f9fe 	bl	8000d84 <__aeabi_fmul>
 800a988:	4641      	mov	r1, r8
 800a98a:	4681      	mov	r9, r0
 800a98c:	4630      	mov	r0, r6
 800a98e:	f7f6 f9f9 	bl	8000d84 <__aeabi_fmul>
 800a992:	4601      	mov	r1, r0
 800a994:	4648      	mov	r0, r9
 800a996:	f7f6 f8eb 	bl	8000b70 <__aeabi_fsub>
 800a99a:	4629      	mov	r1, r5
 800a99c:	f7f6 f9f2 	bl	8000d84 <__aeabi_fmul>
 800a9a0:	4639      	mov	r1, r7
 800a9a2:	f7f6 f8e5 	bl	8000b70 <__aeabi_fsub>
 800a9a6:	490c      	ldr	r1, [pc, #48]	@ (800a9d8 <__kernel_sinf+0xe8>)
 800a9a8:	4605      	mov	r5, r0
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f7f6 f9ea 	bl	8000d84 <__aeabi_fmul>
 800a9b0:	4601      	mov	r1, r0
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f7f6 f8de 	bl	8000b74 <__addsf3>
 800a9b8:	4601      	mov	r1, r0
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f7f6 f8d8 	bl	8000b70 <__aeabi_fsub>
 800a9c0:	e7d9      	b.n	800a976 <__kernel_sinf+0x86>
 800a9c2:	bf00      	nop
 800a9c4:	2f2ec9d3 	.word	0x2f2ec9d3
 800a9c8:	32d72f34 	.word	0x32d72f34
 800a9cc:	3638ef1b 	.word	0x3638ef1b
 800a9d0:	39500d01 	.word	0x39500d01
 800a9d4:	3c088889 	.word	0x3c088889
 800a9d8:	3e2aaaab 	.word	0x3e2aaaab

0800a9dc <__ieee754_rem_pio2f>:
 800a9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e0:	4aa4      	ldr	r2, [pc, #656]	@ (800ac74 <__ieee754_rem_pio2f+0x298>)
 800a9e2:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800a9e6:	4590      	cmp	r8, r2
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	4682      	mov	sl, r0
 800a9ec:	b087      	sub	sp, #28
 800a9ee:	d804      	bhi.n	800a9fa <__ieee754_rem_pio2f+0x1e>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	6008      	str	r0, [r1, #0]
 800a9f4:	604b      	str	r3, [r1, #4]
 800a9f6:	2500      	movs	r5, #0
 800a9f8:	e01d      	b.n	800aa36 <__ieee754_rem_pio2f+0x5a>
 800a9fa:	4a9f      	ldr	r2, [pc, #636]	@ (800ac78 <__ieee754_rem_pio2f+0x29c>)
 800a9fc:	4590      	cmp	r8, r2
 800a9fe:	d84f      	bhi.n	800aaa0 <__ieee754_rem_pio2f+0xc4>
 800aa00:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800aa04:	2800      	cmp	r0, #0
 800aa06:	499d      	ldr	r1, [pc, #628]	@ (800ac7c <__ieee754_rem_pio2f+0x2a0>)
 800aa08:	4f9d      	ldr	r7, [pc, #628]	@ (800ac80 <__ieee754_rem_pio2f+0x2a4>)
 800aa0a:	f025 050f 	bic.w	r5, r5, #15
 800aa0e:	dd24      	ble.n	800aa5a <__ieee754_rem_pio2f+0x7e>
 800aa10:	f7f6 f8ae 	bl	8000b70 <__aeabi_fsub>
 800aa14:	42bd      	cmp	r5, r7
 800aa16:	4606      	mov	r6, r0
 800aa18:	d011      	beq.n	800aa3e <__ieee754_rem_pio2f+0x62>
 800aa1a:	499a      	ldr	r1, [pc, #616]	@ (800ac84 <__ieee754_rem_pio2f+0x2a8>)
 800aa1c:	f7f6 f8a8 	bl	8000b70 <__aeabi_fsub>
 800aa20:	4601      	mov	r1, r0
 800aa22:	4605      	mov	r5, r0
 800aa24:	4630      	mov	r0, r6
 800aa26:	f7f6 f8a3 	bl	8000b70 <__aeabi_fsub>
 800aa2a:	4996      	ldr	r1, [pc, #600]	@ (800ac84 <__ieee754_rem_pio2f+0x2a8>)
 800aa2c:	f7f6 f8a0 	bl	8000b70 <__aeabi_fsub>
 800aa30:	6025      	str	r5, [r4, #0]
 800aa32:	2501      	movs	r5, #1
 800aa34:	6060      	str	r0, [r4, #4]
 800aa36:	4628      	mov	r0, r5
 800aa38:	b007      	add	sp, #28
 800aa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3e:	4992      	ldr	r1, [pc, #584]	@ (800ac88 <__ieee754_rem_pio2f+0x2ac>)
 800aa40:	f7f6 f896 	bl	8000b70 <__aeabi_fsub>
 800aa44:	4991      	ldr	r1, [pc, #580]	@ (800ac8c <__ieee754_rem_pio2f+0x2b0>)
 800aa46:	4606      	mov	r6, r0
 800aa48:	f7f6 f892 	bl	8000b70 <__aeabi_fsub>
 800aa4c:	4601      	mov	r1, r0
 800aa4e:	4605      	mov	r5, r0
 800aa50:	4630      	mov	r0, r6
 800aa52:	f7f6 f88d 	bl	8000b70 <__aeabi_fsub>
 800aa56:	498d      	ldr	r1, [pc, #564]	@ (800ac8c <__ieee754_rem_pio2f+0x2b0>)
 800aa58:	e7e8      	b.n	800aa2c <__ieee754_rem_pio2f+0x50>
 800aa5a:	f7f6 f88b 	bl	8000b74 <__addsf3>
 800aa5e:	42bd      	cmp	r5, r7
 800aa60:	4606      	mov	r6, r0
 800aa62:	d00f      	beq.n	800aa84 <__ieee754_rem_pio2f+0xa8>
 800aa64:	4987      	ldr	r1, [pc, #540]	@ (800ac84 <__ieee754_rem_pio2f+0x2a8>)
 800aa66:	f7f6 f885 	bl	8000b74 <__addsf3>
 800aa6a:	4601      	mov	r1, r0
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	4630      	mov	r0, r6
 800aa70:	f7f6 f87e 	bl	8000b70 <__aeabi_fsub>
 800aa74:	4983      	ldr	r1, [pc, #524]	@ (800ac84 <__ieee754_rem_pio2f+0x2a8>)
 800aa76:	f7f6 f87d 	bl	8000b74 <__addsf3>
 800aa7a:	6025      	str	r5, [r4, #0]
 800aa7c:	6060      	str	r0, [r4, #4]
 800aa7e:	f04f 35ff 	mov.w	r5, #4294967295
 800aa82:	e7d8      	b.n	800aa36 <__ieee754_rem_pio2f+0x5a>
 800aa84:	4980      	ldr	r1, [pc, #512]	@ (800ac88 <__ieee754_rem_pio2f+0x2ac>)
 800aa86:	f7f6 f875 	bl	8000b74 <__addsf3>
 800aa8a:	4980      	ldr	r1, [pc, #512]	@ (800ac8c <__ieee754_rem_pio2f+0x2b0>)
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	f7f6 f871 	bl	8000b74 <__addsf3>
 800aa92:	4601      	mov	r1, r0
 800aa94:	4605      	mov	r5, r0
 800aa96:	4630      	mov	r0, r6
 800aa98:	f7f6 f86a 	bl	8000b70 <__aeabi_fsub>
 800aa9c:	497b      	ldr	r1, [pc, #492]	@ (800ac8c <__ieee754_rem_pio2f+0x2b0>)
 800aa9e:	e7ea      	b.n	800aa76 <__ieee754_rem_pio2f+0x9a>
 800aaa0:	4a7b      	ldr	r2, [pc, #492]	@ (800ac90 <__ieee754_rem_pio2f+0x2b4>)
 800aaa2:	4590      	cmp	r8, r2
 800aaa4:	f200 8095 	bhi.w	800abd2 <__ieee754_rem_pio2f+0x1f6>
 800aaa8:	f000 f8fe 	bl	800aca8 <fabsf>
 800aaac:	4979      	ldr	r1, [pc, #484]	@ (800ac94 <__ieee754_rem_pio2f+0x2b8>)
 800aaae:	4606      	mov	r6, r0
 800aab0:	f7f6 f968 	bl	8000d84 <__aeabi_fmul>
 800aab4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800aab8:	f7f6 f85c 	bl	8000b74 <__addsf3>
 800aabc:	f7f6 fb28 	bl	8001110 <__aeabi_f2iz>
 800aac0:	4605      	mov	r5, r0
 800aac2:	f7f6 f90b 	bl	8000cdc <__aeabi_i2f>
 800aac6:	496d      	ldr	r1, [pc, #436]	@ (800ac7c <__ieee754_rem_pio2f+0x2a0>)
 800aac8:	4681      	mov	r9, r0
 800aaca:	f7f6 f95b 	bl	8000d84 <__aeabi_fmul>
 800aace:	4601      	mov	r1, r0
 800aad0:	4630      	mov	r0, r6
 800aad2:	f7f6 f84d 	bl	8000b70 <__aeabi_fsub>
 800aad6:	496b      	ldr	r1, [pc, #428]	@ (800ac84 <__ieee754_rem_pio2f+0x2a8>)
 800aad8:	4607      	mov	r7, r0
 800aada:	4648      	mov	r0, r9
 800aadc:	f7f6 f952 	bl	8000d84 <__aeabi_fmul>
 800aae0:	2d1f      	cmp	r5, #31
 800aae2:	4606      	mov	r6, r0
 800aae4:	dc0e      	bgt.n	800ab04 <__ieee754_rem_pio2f+0x128>
 800aae6:	4a6c      	ldr	r2, [pc, #432]	@ (800ac98 <__ieee754_rem_pio2f+0x2bc>)
 800aae8:	1e69      	subs	r1, r5, #1
 800aaea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aaee:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800aaf2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d004      	beq.n	800ab04 <__ieee754_rem_pio2f+0x128>
 800aafa:	4631      	mov	r1, r6
 800aafc:	4638      	mov	r0, r7
 800aafe:	f7f6 f837 	bl	8000b70 <__aeabi_fsub>
 800ab02:	e00b      	b.n	800ab1c <__ieee754_rem_pio2f+0x140>
 800ab04:	4631      	mov	r1, r6
 800ab06:	4638      	mov	r0, r7
 800ab08:	f7f6 f832 	bl	8000b70 <__aeabi_fsub>
 800ab0c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ab10:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800ab14:	2b08      	cmp	r3, #8
 800ab16:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800ab1a:	dc01      	bgt.n	800ab20 <__ieee754_rem_pio2f+0x144>
 800ab1c:	6020      	str	r0, [r4, #0]
 800ab1e:	e026      	b.n	800ab6e <__ieee754_rem_pio2f+0x192>
 800ab20:	4959      	ldr	r1, [pc, #356]	@ (800ac88 <__ieee754_rem_pio2f+0x2ac>)
 800ab22:	4648      	mov	r0, r9
 800ab24:	f7f6 f92e 	bl	8000d84 <__aeabi_fmul>
 800ab28:	4606      	mov	r6, r0
 800ab2a:	4601      	mov	r1, r0
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	f7f6 f81f 	bl	8000b70 <__aeabi_fsub>
 800ab32:	4601      	mov	r1, r0
 800ab34:	4680      	mov	r8, r0
 800ab36:	4638      	mov	r0, r7
 800ab38:	f7f6 f81a 	bl	8000b70 <__aeabi_fsub>
 800ab3c:	4631      	mov	r1, r6
 800ab3e:	f7f6 f817 	bl	8000b70 <__aeabi_fsub>
 800ab42:	4606      	mov	r6, r0
 800ab44:	4951      	ldr	r1, [pc, #324]	@ (800ac8c <__ieee754_rem_pio2f+0x2b0>)
 800ab46:	4648      	mov	r0, r9
 800ab48:	f7f6 f91c 	bl	8000d84 <__aeabi_fmul>
 800ab4c:	4631      	mov	r1, r6
 800ab4e:	f7f6 f80f 	bl	8000b70 <__aeabi_fsub>
 800ab52:	4601      	mov	r1, r0
 800ab54:	4606      	mov	r6, r0
 800ab56:	4640      	mov	r0, r8
 800ab58:	f7f6 f80a 	bl	8000b70 <__aeabi_fsub>
 800ab5c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ab60:	ebab 0b03 	sub.w	fp, fp, r3
 800ab64:	f1bb 0f19 	cmp.w	fp, #25
 800ab68:	dc18      	bgt.n	800ab9c <__ieee754_rem_pio2f+0x1c0>
 800ab6a:	4647      	mov	r7, r8
 800ab6c:	6020      	str	r0, [r4, #0]
 800ab6e:	f8d4 8000 	ldr.w	r8, [r4]
 800ab72:	4638      	mov	r0, r7
 800ab74:	4641      	mov	r1, r8
 800ab76:	f7f5 fffb 	bl	8000b70 <__aeabi_fsub>
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	f7f5 fff8 	bl	8000b70 <__aeabi_fsub>
 800ab80:	f1ba 0f00 	cmp.w	sl, #0
 800ab84:	6060      	str	r0, [r4, #4]
 800ab86:	f6bf af56 	bge.w	800aa36 <__ieee754_rem_pio2f+0x5a>
 800ab8a:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800ab8e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800ab92:	f8c4 8000 	str.w	r8, [r4]
 800ab96:	6060      	str	r0, [r4, #4]
 800ab98:	426d      	negs	r5, r5
 800ab9a:	e74c      	b.n	800aa36 <__ieee754_rem_pio2f+0x5a>
 800ab9c:	493f      	ldr	r1, [pc, #252]	@ (800ac9c <__ieee754_rem_pio2f+0x2c0>)
 800ab9e:	4648      	mov	r0, r9
 800aba0:	f7f6 f8f0 	bl	8000d84 <__aeabi_fmul>
 800aba4:	4606      	mov	r6, r0
 800aba6:	4601      	mov	r1, r0
 800aba8:	4640      	mov	r0, r8
 800abaa:	f7f5 ffe1 	bl	8000b70 <__aeabi_fsub>
 800abae:	4601      	mov	r1, r0
 800abb0:	4607      	mov	r7, r0
 800abb2:	4640      	mov	r0, r8
 800abb4:	f7f5 ffdc 	bl	8000b70 <__aeabi_fsub>
 800abb8:	4631      	mov	r1, r6
 800abba:	f7f5 ffd9 	bl	8000b70 <__aeabi_fsub>
 800abbe:	4606      	mov	r6, r0
 800abc0:	4937      	ldr	r1, [pc, #220]	@ (800aca0 <__ieee754_rem_pio2f+0x2c4>)
 800abc2:	4648      	mov	r0, r9
 800abc4:	f7f6 f8de 	bl	8000d84 <__aeabi_fmul>
 800abc8:	4631      	mov	r1, r6
 800abca:	f7f5 ffd1 	bl	8000b70 <__aeabi_fsub>
 800abce:	4606      	mov	r6, r0
 800abd0:	e793      	b.n	800aafa <__ieee754_rem_pio2f+0x11e>
 800abd2:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800abd6:	d305      	bcc.n	800abe4 <__ieee754_rem_pio2f+0x208>
 800abd8:	4601      	mov	r1, r0
 800abda:	f7f5 ffc9 	bl	8000b70 <__aeabi_fsub>
 800abde:	6060      	str	r0, [r4, #4]
 800abe0:	6020      	str	r0, [r4, #0]
 800abe2:	e708      	b.n	800a9f6 <__ieee754_rem_pio2f+0x1a>
 800abe4:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800abe8:	3e86      	subs	r6, #134	@ 0x86
 800abea:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800abee:	4640      	mov	r0, r8
 800abf0:	f7f6 fa8e 	bl	8001110 <__aeabi_f2iz>
 800abf4:	f7f6 f872 	bl	8000cdc <__aeabi_i2f>
 800abf8:	4601      	mov	r1, r0
 800abfa:	9003      	str	r0, [sp, #12]
 800abfc:	4640      	mov	r0, r8
 800abfe:	f7f5 ffb7 	bl	8000b70 <__aeabi_fsub>
 800ac02:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800ac06:	f7f6 f8bd 	bl	8000d84 <__aeabi_fmul>
 800ac0a:	4607      	mov	r7, r0
 800ac0c:	f7f6 fa80 	bl	8001110 <__aeabi_f2iz>
 800ac10:	f7f6 f864 	bl	8000cdc <__aeabi_i2f>
 800ac14:	4601      	mov	r1, r0
 800ac16:	9004      	str	r0, [sp, #16]
 800ac18:	4605      	mov	r5, r0
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	f7f5 ffa8 	bl	8000b70 <__aeabi_fsub>
 800ac20:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800ac24:	f7f6 f8ae 	bl	8000d84 <__aeabi_fmul>
 800ac28:	2100      	movs	r1, #0
 800ac2a:	9005      	str	r0, [sp, #20]
 800ac2c:	f7f6 fa3e 	bl	80010ac <__aeabi_fcmpeq>
 800ac30:	b1f0      	cbz	r0, 800ac70 <__ieee754_rem_pio2f+0x294>
 800ac32:	2100      	movs	r1, #0
 800ac34:	4628      	mov	r0, r5
 800ac36:	f7f6 fa39 	bl	80010ac <__aeabi_fcmpeq>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	bf14      	ite	ne
 800ac3e:	2301      	movne	r3, #1
 800ac40:	2302      	moveq	r3, #2
 800ac42:	4a18      	ldr	r2, [pc, #96]	@ (800aca4 <__ieee754_rem_pio2f+0x2c8>)
 800ac44:	4621      	mov	r1, r4
 800ac46:	9201      	str	r2, [sp, #4]
 800ac48:	2202      	movs	r2, #2
 800ac4a:	a803      	add	r0, sp, #12
 800ac4c:	9200      	str	r2, [sp, #0]
 800ac4e:	4632      	mov	r2, r6
 800ac50:	f000 f82e 	bl	800acb0 <__kernel_rem_pio2f>
 800ac54:	f1ba 0f00 	cmp.w	sl, #0
 800ac58:	4605      	mov	r5, r0
 800ac5a:	f6bf aeec 	bge.w	800aa36 <__ieee754_rem_pio2f+0x5a>
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	6863      	ldr	r3, [r4, #4]
 800ac68:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ac6c:	6063      	str	r3, [r4, #4]
 800ac6e:	e793      	b.n	800ab98 <__ieee754_rem_pio2f+0x1bc>
 800ac70:	2303      	movs	r3, #3
 800ac72:	e7e6      	b.n	800ac42 <__ieee754_rem_pio2f+0x266>
 800ac74:	3f490fd8 	.word	0x3f490fd8
 800ac78:	4016cbe3 	.word	0x4016cbe3
 800ac7c:	3fc90f80 	.word	0x3fc90f80
 800ac80:	3fc90fd0 	.word	0x3fc90fd0
 800ac84:	37354443 	.word	0x37354443
 800ac88:	37354400 	.word	0x37354400
 800ac8c:	2e85a308 	.word	0x2e85a308
 800ac90:	43490f80 	.word	0x43490f80
 800ac94:	3f22f984 	.word	0x3f22f984
 800ac98:	0800b778 	.word	0x0800b778
 800ac9c:	2e85a300 	.word	0x2e85a300
 800aca0:	248d3132 	.word	0x248d3132
 800aca4:	0800b7f8 	.word	0x0800b7f8

0800aca8 <fabsf>:
 800aca8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800acac:	4770      	bx	lr
	...

0800acb0 <__kernel_rem_pio2f>:
 800acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	b0db      	sub	sp, #364	@ 0x16c
 800acb6:	9202      	str	r2, [sp, #8]
 800acb8:	9304      	str	r3, [sp, #16]
 800acba:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800acbc:	4bad      	ldr	r3, [pc, #692]	@ (800af74 <__kernel_rem_pio2f+0x2c4>)
 800acbe:	9005      	str	r0, [sp, #20]
 800acc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc4:	9100      	str	r1, [sp, #0]
 800acc6:	9301      	str	r3, [sp, #4]
 800acc8:	9b04      	ldr	r3, [sp, #16]
 800acca:	3b01      	subs	r3, #1
 800accc:	9303      	str	r3, [sp, #12]
 800acce:	9b02      	ldr	r3, [sp, #8]
 800acd0:	1d1a      	adds	r2, r3, #4
 800acd2:	f2c0 8099 	blt.w	800ae08 <__kernel_rem_pio2f+0x158>
 800acd6:	1edc      	subs	r4, r3, #3
 800acd8:	bf48      	it	mi
 800acda:	1d1c      	addmi	r4, r3, #4
 800acdc:	10e4      	asrs	r4, r4, #3
 800acde:	2500      	movs	r5, #0
 800ace0:	f04f 0b00 	mov.w	fp, #0
 800ace4:	1c67      	adds	r7, r4, #1
 800ace6:	00fb      	lsls	r3, r7, #3
 800ace8:	9306      	str	r3, [sp, #24]
 800acea:	9b02      	ldr	r3, [sp, #8]
 800acec:	9a03      	ldr	r2, [sp, #12]
 800acee:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800acf2:	9b01      	ldr	r3, [sp, #4]
 800acf4:	eba4 0802 	sub.w	r8, r4, r2
 800acf8:	eb03 0902 	add.w	r9, r3, r2
 800acfc:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800acfe:	ae1e      	add	r6, sp, #120	@ 0x78
 800ad00:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800ad04:	454d      	cmp	r5, r9
 800ad06:	f340 8081 	ble.w	800ae0c <__kernel_rem_pio2f+0x15c>
 800ad0a:	9a04      	ldr	r2, [sp, #16]
 800ad0c:	ab1e      	add	r3, sp, #120	@ 0x78
 800ad0e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800ad12:	f04f 0900 	mov.w	r9, #0
 800ad16:	2300      	movs	r3, #0
 800ad18:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 800ad1c:	9a01      	ldr	r2, [sp, #4]
 800ad1e:	4591      	cmp	r9, r2
 800ad20:	f340 809c 	ble.w	800ae5c <__kernel_rem_pio2f+0x1ac>
 800ad24:	4613      	mov	r3, r2
 800ad26:	aa0a      	add	r2, sp, #40	@ 0x28
 800ad28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad2c:	9308      	str	r3, [sp, #32]
 800ad2e:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800ad30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad34:	9c01      	ldr	r4, [sp, #4]
 800ad36:	9307      	str	r3, [sp, #28]
 800ad38:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800ad3c:	4646      	mov	r6, r8
 800ad3e:	4625      	mov	r5, r4
 800ad40:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800ad44:	ab5a      	add	r3, sp, #360	@ 0x168
 800ad46:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad4a:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800ad4e:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800ad52:	2d00      	cmp	r5, #0
 800ad54:	f300 8087 	bgt.w	800ae66 <__kernel_rem_pio2f+0x1b6>
 800ad58:	4639      	mov	r1, r7
 800ad5a:	4658      	mov	r0, fp
 800ad5c:	f000 fa48 	bl	800b1f0 <scalbnf>
 800ad60:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800ad64:	4605      	mov	r5, r0
 800ad66:	f7f6 f80d 	bl	8000d84 <__aeabi_fmul>
 800ad6a:	f000 fa8d 	bl	800b288 <floorf>
 800ad6e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800ad72:	f7f6 f807 	bl	8000d84 <__aeabi_fmul>
 800ad76:	4601      	mov	r1, r0
 800ad78:	4628      	mov	r0, r5
 800ad7a:	f7f5 fef9 	bl	8000b70 <__aeabi_fsub>
 800ad7e:	4605      	mov	r5, r0
 800ad80:	f7f6 f9c6 	bl	8001110 <__aeabi_f2iz>
 800ad84:	4606      	mov	r6, r0
 800ad86:	f7f5 ffa9 	bl	8000cdc <__aeabi_i2f>
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f7f5 feef 	bl	8000b70 <__aeabi_fsub>
 800ad92:	2f00      	cmp	r7, #0
 800ad94:	4681      	mov	r9, r0
 800ad96:	f340 8083 	ble.w	800aea0 <__kernel_rem_pio2f+0x1f0>
 800ad9a:	1e62      	subs	r2, r4, #1
 800ad9c:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad9e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800ada2:	f1c7 0108 	rsb	r1, r7, #8
 800ada6:	fa45 f301 	asr.w	r3, r5, r1
 800adaa:	441e      	add	r6, r3
 800adac:	408b      	lsls	r3, r1
 800adae:	1aed      	subs	r5, r5, r3
 800adb0:	ab0a      	add	r3, sp, #40	@ 0x28
 800adb2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800adb6:	f1c7 0307 	rsb	r3, r7, #7
 800adba:	411d      	asrs	r5, r3
 800adbc:	2d00      	cmp	r5, #0
 800adbe:	dd7c      	ble.n	800aeba <__kernel_rem_pio2f+0x20a>
 800adc0:	2200      	movs	r2, #0
 800adc2:	4692      	mov	sl, r2
 800adc4:	3601      	adds	r6, #1
 800adc6:	4294      	cmp	r4, r2
 800adc8:	f300 80ac 	bgt.w	800af24 <__kernel_rem_pio2f+0x274>
 800adcc:	2f00      	cmp	r7, #0
 800adce:	dd05      	ble.n	800addc <__kernel_rem_pio2f+0x12c>
 800add0:	2f01      	cmp	r7, #1
 800add2:	f000 80b8 	beq.w	800af46 <__kernel_rem_pio2f+0x296>
 800add6:	2f02      	cmp	r7, #2
 800add8:	f000 80bf 	beq.w	800af5a <__kernel_rem_pio2f+0x2aa>
 800addc:	2d02      	cmp	r5, #2
 800adde:	d16c      	bne.n	800aeba <__kernel_rem_pio2f+0x20a>
 800ade0:	4649      	mov	r1, r9
 800ade2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ade6:	f7f5 fec3 	bl	8000b70 <__aeabi_fsub>
 800adea:	4681      	mov	r9, r0
 800adec:	f1ba 0f00 	cmp.w	sl, #0
 800adf0:	d063      	beq.n	800aeba <__kernel_rem_pio2f+0x20a>
 800adf2:	4639      	mov	r1, r7
 800adf4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800adf8:	f000 f9fa 	bl	800b1f0 <scalbnf>
 800adfc:	4601      	mov	r1, r0
 800adfe:	4648      	mov	r0, r9
 800ae00:	f7f5 feb6 	bl	8000b70 <__aeabi_fsub>
 800ae04:	4681      	mov	r9, r0
 800ae06:	e058      	b.n	800aeba <__kernel_rem_pio2f+0x20a>
 800ae08:	2400      	movs	r4, #0
 800ae0a:	e768      	b.n	800acde <__kernel_rem_pio2f+0x2e>
 800ae0c:	eb18 0f05 	cmn.w	r8, r5
 800ae10:	d407      	bmi.n	800ae22 <__kernel_rem_pio2f+0x172>
 800ae12:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800ae16:	f7f5 ff61 	bl	8000cdc <__aeabi_i2f>
 800ae1a:	f846 0b04 	str.w	r0, [r6], #4
 800ae1e:	3501      	adds	r5, #1
 800ae20:	e770      	b.n	800ad04 <__kernel_rem_pio2f+0x54>
 800ae22:	4658      	mov	r0, fp
 800ae24:	e7f9      	b.n	800ae1a <__kernel_rem_pio2f+0x16a>
 800ae26:	9307      	str	r3, [sp, #28]
 800ae28:	9b05      	ldr	r3, [sp, #20]
 800ae2a:	f8da 1000 	ldr.w	r1, [sl]
 800ae2e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ae32:	f7f5 ffa7 	bl	8000d84 <__aeabi_fmul>
 800ae36:	4601      	mov	r1, r0
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f7f5 fe9b 	bl	8000b74 <__addsf3>
 800ae3e:	4606      	mov	r6, r0
 800ae40:	9b07      	ldr	r3, [sp, #28]
 800ae42:	f108 0801 	add.w	r8, r8, #1
 800ae46:	9a03      	ldr	r2, [sp, #12]
 800ae48:	f1aa 0a04 	sub.w	sl, sl, #4
 800ae4c:	4590      	cmp	r8, r2
 800ae4e:	ddea      	ble.n	800ae26 <__kernel_rem_pio2f+0x176>
 800ae50:	f84b 6b04 	str.w	r6, [fp], #4
 800ae54:	f109 0901 	add.w	r9, r9, #1
 800ae58:	3504      	adds	r5, #4
 800ae5a:	e75f      	b.n	800ad1c <__kernel_rem_pio2f+0x6c>
 800ae5c:	46aa      	mov	sl, r5
 800ae5e:	461e      	mov	r6, r3
 800ae60:	f04f 0800 	mov.w	r8, #0
 800ae64:	e7ef      	b.n	800ae46 <__kernel_rem_pio2f+0x196>
 800ae66:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800ae6a:	4658      	mov	r0, fp
 800ae6c:	f7f5 ff8a 	bl	8000d84 <__aeabi_fmul>
 800ae70:	f7f6 f94e 	bl	8001110 <__aeabi_f2iz>
 800ae74:	f7f5 ff32 	bl	8000cdc <__aeabi_i2f>
 800ae78:	4649      	mov	r1, r9
 800ae7a:	9009      	str	r0, [sp, #36]	@ 0x24
 800ae7c:	f7f5 ff82 	bl	8000d84 <__aeabi_fmul>
 800ae80:	4601      	mov	r1, r0
 800ae82:	4658      	mov	r0, fp
 800ae84:	f7f5 fe74 	bl	8000b70 <__aeabi_fsub>
 800ae88:	f7f6 f942 	bl	8001110 <__aeabi_f2iz>
 800ae8c:	3d01      	subs	r5, #1
 800ae8e:	f846 0b04 	str.w	r0, [r6], #4
 800ae92:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800ae96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae98:	f7f5 fe6c 	bl	8000b74 <__addsf3>
 800ae9c:	4683      	mov	fp, r0
 800ae9e:	e758      	b.n	800ad52 <__kernel_rem_pio2f+0xa2>
 800aea0:	d105      	bne.n	800aeae <__kernel_rem_pio2f+0x1fe>
 800aea2:	1e63      	subs	r3, r4, #1
 800aea4:	aa0a      	add	r2, sp, #40	@ 0x28
 800aea6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800aeaa:	11ed      	asrs	r5, r5, #7
 800aeac:	e786      	b.n	800adbc <__kernel_rem_pio2f+0x10c>
 800aeae:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800aeb2:	f7f6 f919 	bl	80010e8 <__aeabi_fcmpge>
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	bb90      	cbnz	r0, 800af20 <__kernel_rem_pio2f+0x270>
 800aeba:	2100      	movs	r1, #0
 800aebc:	4648      	mov	r0, r9
 800aebe:	f7f6 f8f5 	bl	80010ac <__aeabi_fcmpeq>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	f000 8090 	beq.w	800afe8 <__kernel_rem_pio2f+0x338>
 800aec8:	2200      	movs	r2, #0
 800aeca:	1e63      	subs	r3, r4, #1
 800aecc:	9901      	ldr	r1, [sp, #4]
 800aece:	428b      	cmp	r3, r1
 800aed0:	da4a      	bge.n	800af68 <__kernel_rem_pio2f+0x2b8>
 800aed2:	2a00      	cmp	r2, #0
 800aed4:	d076      	beq.n	800afc4 <__kernel_rem_pio2f+0x314>
 800aed6:	3c01      	subs	r4, #1
 800aed8:	ab0a      	add	r3, sp, #40	@ 0x28
 800aeda:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800aede:	3f08      	subs	r7, #8
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0f8      	beq.n	800aed6 <__kernel_rem_pio2f+0x226>
 800aee4:	4639      	mov	r1, r7
 800aee6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800aeea:	f000 f981 	bl	800b1f0 <scalbnf>
 800aeee:	46a2      	mov	sl, r4
 800aef0:	4607      	mov	r7, r0
 800aef2:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800aef6:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800aefa:	f1ba 0f00 	cmp.w	sl, #0
 800aefe:	f280 80a1 	bge.w	800b044 <__kernel_rem_pio2f+0x394>
 800af02:	4627      	mov	r7, r4
 800af04:	2200      	movs	r2, #0
 800af06:	2f00      	cmp	r7, #0
 800af08:	f2c0 80cb 	blt.w	800b0a2 <__kernel_rem_pio2f+0x3f2>
 800af0c:	a946      	add	r1, sp, #280	@ 0x118
 800af0e:	4690      	mov	r8, r2
 800af10:	f04f 0a00 	mov.w	sl, #0
 800af14:	4b18      	ldr	r3, [pc, #96]	@ (800af78 <__kernel_rem_pio2f+0x2c8>)
 800af16:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800af1a:	eba4 0907 	sub.w	r9, r4, r7
 800af1e:	e0b4      	b.n	800b08a <__kernel_rem_pio2f+0x3da>
 800af20:	2502      	movs	r5, #2
 800af22:	e74d      	b.n	800adc0 <__kernel_rem_pio2f+0x110>
 800af24:	f858 3b04 	ldr.w	r3, [r8], #4
 800af28:	f1ba 0f00 	cmp.w	sl, #0
 800af2c:	d108      	bne.n	800af40 <__kernel_rem_pio2f+0x290>
 800af2e:	b123      	cbz	r3, 800af3a <__kernel_rem_pio2f+0x28a>
 800af30:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800af34:	f848 3c04 	str.w	r3, [r8, #-4]
 800af38:	2301      	movs	r3, #1
 800af3a:	469a      	mov	sl, r3
 800af3c:	3201      	adds	r2, #1
 800af3e:	e742      	b.n	800adc6 <__kernel_rem_pio2f+0x116>
 800af40:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800af44:	e7f6      	b.n	800af34 <__kernel_rem_pio2f+0x284>
 800af46:	1e62      	subs	r2, r4, #1
 800af48:	ab0a      	add	r3, sp, #40	@ 0x28
 800af4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af52:	a90a      	add	r1, sp, #40	@ 0x28
 800af54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800af58:	e740      	b.n	800addc <__kernel_rem_pio2f+0x12c>
 800af5a:	1e62      	subs	r2, r4, #1
 800af5c:	ab0a      	add	r3, sp, #40	@ 0x28
 800af5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af66:	e7f4      	b.n	800af52 <__kernel_rem_pio2f+0x2a2>
 800af68:	a90a      	add	r1, sp, #40	@ 0x28
 800af6a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800af6e:	3b01      	subs	r3, #1
 800af70:	430a      	orrs	r2, r1
 800af72:	e7ab      	b.n	800aecc <__kernel_rem_pio2f+0x21c>
 800af74:	0800bb3c 	.word	0x0800bb3c
 800af78:	0800bb10 	.word	0x0800bb10
 800af7c:	3301      	adds	r3, #1
 800af7e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800af82:	2900      	cmp	r1, #0
 800af84:	d0fa      	beq.n	800af7c <__kernel_rem_pio2f+0x2cc>
 800af86:	9a04      	ldr	r2, [sp, #16]
 800af88:	a91e      	add	r1, sp, #120	@ 0x78
 800af8a:	18a2      	adds	r2, r4, r2
 800af8c:	1c66      	adds	r6, r4, #1
 800af8e:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800af92:	441c      	add	r4, r3
 800af94:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800af98:	42b4      	cmp	r4, r6
 800af9a:	f6ff aecd 	blt.w	800ad38 <__kernel_rem_pio2f+0x88>
 800af9e:	9b07      	ldr	r3, [sp, #28]
 800afa0:	46ab      	mov	fp, r5
 800afa2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800afa6:	f7f5 fe99 	bl	8000cdc <__aeabi_i2f>
 800afaa:	f04f 0a00 	mov.w	sl, #0
 800afae:	f04f 0800 	mov.w	r8, #0
 800afb2:	6028      	str	r0, [r5, #0]
 800afb4:	9b03      	ldr	r3, [sp, #12]
 800afb6:	459a      	cmp	sl, r3
 800afb8:	dd07      	ble.n	800afca <__kernel_rem_pio2f+0x31a>
 800afba:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800afbe:	3504      	adds	r5, #4
 800afc0:	3601      	adds	r6, #1
 800afc2:	e7e9      	b.n	800af98 <__kernel_rem_pio2f+0x2e8>
 800afc4:	2301      	movs	r3, #1
 800afc6:	9a08      	ldr	r2, [sp, #32]
 800afc8:	e7d9      	b.n	800af7e <__kernel_rem_pio2f+0x2ce>
 800afca:	9b05      	ldr	r3, [sp, #20]
 800afcc:	f85b 0904 	ldr.w	r0, [fp], #-4
 800afd0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800afd4:	f7f5 fed6 	bl	8000d84 <__aeabi_fmul>
 800afd8:	4601      	mov	r1, r0
 800afda:	4640      	mov	r0, r8
 800afdc:	f7f5 fdca 	bl	8000b74 <__addsf3>
 800afe0:	f10a 0a01 	add.w	sl, sl, #1
 800afe4:	4680      	mov	r8, r0
 800afe6:	e7e5      	b.n	800afb4 <__kernel_rem_pio2f+0x304>
 800afe8:	9b06      	ldr	r3, [sp, #24]
 800afea:	9a02      	ldr	r2, [sp, #8]
 800afec:	4648      	mov	r0, r9
 800afee:	1a99      	subs	r1, r3, r2
 800aff0:	f000 f8fe 	bl	800b1f0 <scalbnf>
 800aff4:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800aff8:	4680      	mov	r8, r0
 800affa:	f7f6 f875 	bl	80010e8 <__aeabi_fcmpge>
 800affe:	b1f8      	cbz	r0, 800b040 <__kernel_rem_pio2f+0x390>
 800b000:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800b004:	4640      	mov	r0, r8
 800b006:	f7f5 febd 	bl	8000d84 <__aeabi_fmul>
 800b00a:	f7f6 f881 	bl	8001110 <__aeabi_f2iz>
 800b00e:	f7f5 fe65 	bl	8000cdc <__aeabi_i2f>
 800b012:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800b016:	4681      	mov	r9, r0
 800b018:	f7f5 feb4 	bl	8000d84 <__aeabi_fmul>
 800b01c:	4601      	mov	r1, r0
 800b01e:	4640      	mov	r0, r8
 800b020:	f7f5 fda6 	bl	8000b70 <__aeabi_fsub>
 800b024:	f7f6 f874 	bl	8001110 <__aeabi_f2iz>
 800b028:	ab0a      	add	r3, sp, #40	@ 0x28
 800b02a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b02e:	4648      	mov	r0, r9
 800b030:	3401      	adds	r4, #1
 800b032:	3708      	adds	r7, #8
 800b034:	f7f6 f86c 	bl	8001110 <__aeabi_f2iz>
 800b038:	ab0a      	add	r3, sp, #40	@ 0x28
 800b03a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b03e:	e751      	b.n	800aee4 <__kernel_rem_pio2f+0x234>
 800b040:	4640      	mov	r0, r8
 800b042:	e7f7      	b.n	800b034 <__kernel_rem_pio2f+0x384>
 800b044:	ab0a      	add	r3, sp, #40	@ 0x28
 800b046:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b04a:	f7f5 fe47 	bl	8000cdc <__aeabi_i2f>
 800b04e:	4639      	mov	r1, r7
 800b050:	f7f5 fe98 	bl	8000d84 <__aeabi_fmul>
 800b054:	4649      	mov	r1, r9
 800b056:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800b05a:	4638      	mov	r0, r7
 800b05c:	f7f5 fe92 	bl	8000d84 <__aeabi_fmul>
 800b060:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b064:	4607      	mov	r7, r0
 800b066:	e748      	b.n	800aefa <__kernel_rem_pio2f+0x24a>
 800b068:	f853 0b04 	ldr.w	r0, [r3], #4
 800b06c:	f85b 1b04 	ldr.w	r1, [fp], #4
 800b070:	9203      	str	r2, [sp, #12]
 800b072:	9302      	str	r3, [sp, #8]
 800b074:	f7f5 fe86 	bl	8000d84 <__aeabi_fmul>
 800b078:	4601      	mov	r1, r0
 800b07a:	4640      	mov	r0, r8
 800b07c:	f7f5 fd7a 	bl	8000b74 <__addsf3>
 800b080:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b084:	4680      	mov	r8, r0
 800b086:	f10a 0a01 	add.w	sl, sl, #1
 800b08a:	9901      	ldr	r1, [sp, #4]
 800b08c:	458a      	cmp	sl, r1
 800b08e:	dc01      	bgt.n	800b094 <__kernel_rem_pio2f+0x3e4>
 800b090:	45d1      	cmp	r9, sl
 800b092:	dae9      	bge.n	800b068 <__kernel_rem_pio2f+0x3b8>
 800b094:	ab5a      	add	r3, sp, #360	@ 0x168
 800b096:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800b09a:	f849 8ca0 	str.w	r8, [r9, #-160]
 800b09e:	3f01      	subs	r7, #1
 800b0a0:	e731      	b.n	800af06 <__kernel_rem_pio2f+0x256>
 800b0a2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b0a4:	2b02      	cmp	r3, #2
 800b0a6:	dc07      	bgt.n	800b0b8 <__kernel_rem_pio2f+0x408>
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	dc4e      	bgt.n	800b14a <__kernel_rem_pio2f+0x49a>
 800b0ac:	d02e      	beq.n	800b10c <__kernel_rem_pio2f+0x45c>
 800b0ae:	f006 0007 	and.w	r0, r6, #7
 800b0b2:	b05b      	add	sp, #364	@ 0x16c
 800b0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	d1f7      	bne.n	800b0ae <__kernel_rem_pio2f+0x3fe>
 800b0be:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800b0c2:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800b0c6:	46b8      	mov	r8, r7
 800b0c8:	46a2      	mov	sl, r4
 800b0ca:	f1ba 0f00 	cmp.w	sl, #0
 800b0ce:	dc49      	bgt.n	800b164 <__kernel_rem_pio2f+0x4b4>
 800b0d0:	46a1      	mov	r9, r4
 800b0d2:	f1b9 0f01 	cmp.w	r9, #1
 800b0d6:	dc60      	bgt.n	800b19a <__kernel_rem_pio2f+0x4ea>
 800b0d8:	2000      	movs	r0, #0
 800b0da:	2c01      	cmp	r4, #1
 800b0dc:	dc76      	bgt.n	800b1cc <__kernel_rem_pio2f+0x51c>
 800b0de:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800b0e0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800b0e2:	2d00      	cmp	r5, #0
 800b0e4:	d178      	bne.n	800b1d8 <__kernel_rem_pio2f+0x528>
 800b0e6:	9900      	ldr	r1, [sp, #0]
 800b0e8:	600a      	str	r2, [r1, #0]
 800b0ea:	460a      	mov	r2, r1
 800b0ec:	604b      	str	r3, [r1, #4]
 800b0ee:	6090      	str	r0, [r2, #8]
 800b0f0:	e7dd      	b.n	800b0ae <__kernel_rem_pio2f+0x3fe>
 800b0f2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800b0f6:	f7f5 fd3d 	bl	8000b74 <__addsf3>
 800b0fa:	3c01      	subs	r4, #1
 800b0fc:	2c00      	cmp	r4, #0
 800b0fe:	daf8      	bge.n	800b0f2 <__kernel_rem_pio2f+0x442>
 800b100:	b10d      	cbz	r5, 800b106 <__kernel_rem_pio2f+0x456>
 800b102:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800b106:	9b00      	ldr	r3, [sp, #0]
 800b108:	6018      	str	r0, [r3, #0]
 800b10a:	e7d0      	b.n	800b0ae <__kernel_rem_pio2f+0x3fe>
 800b10c:	2000      	movs	r0, #0
 800b10e:	af32      	add	r7, sp, #200	@ 0xc8
 800b110:	e7f4      	b.n	800b0fc <__kernel_rem_pio2f+0x44c>
 800b112:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800b116:	f7f5 fd2d 	bl	8000b74 <__addsf3>
 800b11a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b11e:	f1b8 0f00 	cmp.w	r8, #0
 800b122:	daf6      	bge.n	800b112 <__kernel_rem_pio2f+0x462>
 800b124:	b1ad      	cbz	r5, 800b152 <__kernel_rem_pio2f+0x4a2>
 800b126:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800b12a:	9a00      	ldr	r2, [sp, #0]
 800b12c:	4601      	mov	r1, r0
 800b12e:	6013      	str	r3, [r2, #0]
 800b130:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800b132:	f7f5 fd1d 	bl	8000b70 <__aeabi_fsub>
 800b136:	f04f 0801 	mov.w	r8, #1
 800b13a:	4544      	cmp	r4, r8
 800b13c:	da0b      	bge.n	800b156 <__kernel_rem_pio2f+0x4a6>
 800b13e:	b10d      	cbz	r5, 800b144 <__kernel_rem_pio2f+0x494>
 800b140:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800b144:	9b00      	ldr	r3, [sp, #0]
 800b146:	6058      	str	r0, [r3, #4]
 800b148:	e7b1      	b.n	800b0ae <__kernel_rem_pio2f+0x3fe>
 800b14a:	46a0      	mov	r8, r4
 800b14c:	2000      	movs	r0, #0
 800b14e:	af32      	add	r7, sp, #200	@ 0xc8
 800b150:	e7e5      	b.n	800b11e <__kernel_rem_pio2f+0x46e>
 800b152:	4603      	mov	r3, r0
 800b154:	e7e9      	b.n	800b12a <__kernel_rem_pio2f+0x47a>
 800b156:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800b15a:	f7f5 fd0b 	bl	8000b74 <__addsf3>
 800b15e:	f108 0801 	add.w	r8, r8, #1
 800b162:	e7ea      	b.n	800b13a <__kernel_rem_pio2f+0x48a>
 800b164:	f8d8 3000 	ldr.w	r3, [r8]
 800b168:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800b16c:	4619      	mov	r1, r3
 800b16e:	4610      	mov	r0, r2
 800b170:	9302      	str	r3, [sp, #8]
 800b172:	9201      	str	r2, [sp, #4]
 800b174:	f7f5 fcfe 	bl	8000b74 <__addsf3>
 800b178:	9a01      	ldr	r2, [sp, #4]
 800b17a:	4601      	mov	r1, r0
 800b17c:	4681      	mov	r9, r0
 800b17e:	4610      	mov	r0, r2
 800b180:	f7f5 fcf6 	bl	8000b70 <__aeabi_fsub>
 800b184:	9b02      	ldr	r3, [sp, #8]
 800b186:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b18a:	4619      	mov	r1, r3
 800b18c:	f7f5 fcf2 	bl	8000b74 <__addsf3>
 800b190:	f848 0904 	str.w	r0, [r8], #-4
 800b194:	f8c8 9000 	str.w	r9, [r8]
 800b198:	e797      	b.n	800b0ca <__kernel_rem_pio2f+0x41a>
 800b19a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800b19e:	f8d7 a000 	ldr.w	sl, [r7]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	4651      	mov	r1, sl
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	f7f5 fce4 	bl	8000b74 <__addsf3>
 800b1ac:	9b01      	ldr	r3, [sp, #4]
 800b1ae:	4601      	mov	r1, r0
 800b1b0:	4680      	mov	r8, r0
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7f5 fcdc 	bl	8000b70 <__aeabi_fsub>
 800b1b8:	4651      	mov	r1, sl
 800b1ba:	f7f5 fcdb 	bl	8000b74 <__addsf3>
 800b1be:	f847 0904 	str.w	r0, [r7], #-4
 800b1c2:	f109 39ff 	add.w	r9, r9, #4294967295
 800b1c6:	f8c7 8000 	str.w	r8, [r7]
 800b1ca:	e782      	b.n	800b0d2 <__kernel_rem_pio2f+0x422>
 800b1cc:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800b1d0:	f7f5 fcd0 	bl	8000b74 <__addsf3>
 800b1d4:	3c01      	subs	r4, #1
 800b1d6:	e780      	b.n	800b0da <__kernel_rem_pio2f+0x42a>
 800b1d8:	9900      	ldr	r1, [sp, #0]
 800b1da:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800b1de:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b1e2:	600a      	str	r2, [r1, #0]
 800b1e4:	604b      	str	r3, [r1, #4]
 800b1e6:	460a      	mov	r2, r1
 800b1e8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800b1ec:	e77f      	b.n	800b0ee <__kernel_rem_pio2f+0x43e>
 800b1ee:	bf00      	nop

0800b1f0 <scalbnf>:
 800b1f0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	460d      	mov	r5, r1
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	d02e      	beq.n	800b25c <scalbnf+0x6c>
 800b1fe:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b202:	d304      	bcc.n	800b20e <scalbnf+0x1e>
 800b204:	4601      	mov	r1, r0
 800b206:	f7f5 fcb5 	bl	8000b74 <__addsf3>
 800b20a:	4603      	mov	r3, r0
 800b20c:	e026      	b.n	800b25c <scalbnf+0x6c>
 800b20e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800b212:	d118      	bne.n	800b246 <scalbnf+0x56>
 800b214:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800b218:	f7f5 fdb4 	bl	8000d84 <__aeabi_fmul>
 800b21c:	4a17      	ldr	r2, [pc, #92]	@ (800b27c <scalbnf+0x8c>)
 800b21e:	4603      	mov	r3, r0
 800b220:	4295      	cmp	r5, r2
 800b222:	db0c      	blt.n	800b23e <scalbnf+0x4e>
 800b224:	4604      	mov	r4, r0
 800b226:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b22a:	3a19      	subs	r2, #25
 800b22c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b230:	428d      	cmp	r5, r1
 800b232:	dd0a      	ble.n	800b24a <scalbnf+0x5a>
 800b234:	4912      	ldr	r1, [pc, #72]	@ (800b280 <scalbnf+0x90>)
 800b236:	4618      	mov	r0, r3
 800b238:	f361 001e 	bfi	r0, r1, #0, #31
 800b23c:	e000      	b.n	800b240 <scalbnf+0x50>
 800b23e:	4911      	ldr	r1, [pc, #68]	@ (800b284 <scalbnf+0x94>)
 800b240:	f7f5 fda0 	bl	8000d84 <__aeabi_fmul>
 800b244:	e7e1      	b.n	800b20a <scalbnf+0x1a>
 800b246:	0dd2      	lsrs	r2, r2, #23
 800b248:	e7f0      	b.n	800b22c <scalbnf+0x3c>
 800b24a:	1951      	adds	r1, r2, r5
 800b24c:	29fe      	cmp	r1, #254	@ 0xfe
 800b24e:	dcf1      	bgt.n	800b234 <scalbnf+0x44>
 800b250:	2900      	cmp	r1, #0
 800b252:	dd05      	ble.n	800b260 <scalbnf+0x70>
 800b254:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800b258:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800b25c:	4618      	mov	r0, r3
 800b25e:	bd38      	pop	{r3, r4, r5, pc}
 800b260:	f111 0f16 	cmn.w	r1, #22
 800b264:	da01      	bge.n	800b26a <scalbnf+0x7a>
 800b266:	4907      	ldr	r1, [pc, #28]	@ (800b284 <scalbnf+0x94>)
 800b268:	e7e5      	b.n	800b236 <scalbnf+0x46>
 800b26a:	f101 0019 	add.w	r0, r1, #25
 800b26e:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800b272:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800b276:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800b27a:	e7e1      	b.n	800b240 <scalbnf+0x50>
 800b27c:	ffff3cb0 	.word	0xffff3cb0
 800b280:	7149f2ca 	.word	0x7149f2ca
 800b284:	0da24260 	.word	0x0da24260

0800b288 <floorf>:
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800b28e:	3d7f      	subs	r5, #127	@ 0x7f
 800b290:	2d16      	cmp	r5, #22
 800b292:	4601      	mov	r1, r0
 800b294:	4604      	mov	r4, r0
 800b296:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800b29a:	dc26      	bgt.n	800b2ea <floorf+0x62>
 800b29c:	2d00      	cmp	r5, #0
 800b29e:	da0f      	bge.n	800b2c0 <floorf+0x38>
 800b2a0:	4917      	ldr	r1, [pc, #92]	@ (800b300 <floorf+0x78>)
 800b2a2:	f7f5 fc67 	bl	8000b74 <__addsf3>
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	f7f5 ff28 	bl	80010fc <__aeabi_fcmpgt>
 800b2ac:	b130      	cbz	r0, 800b2bc <floorf+0x34>
 800b2ae:	2c00      	cmp	r4, #0
 800b2b0:	da23      	bge.n	800b2fa <floorf+0x72>
 800b2b2:	2e00      	cmp	r6, #0
 800b2b4:	4c13      	ldr	r4, [pc, #76]	@ (800b304 <floorf+0x7c>)
 800b2b6:	bf08      	it	eq
 800b2b8:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b2bc:	4621      	mov	r1, r4
 800b2be:	e01a      	b.n	800b2f6 <floorf+0x6e>
 800b2c0:	4e11      	ldr	r6, [pc, #68]	@ (800b308 <floorf+0x80>)
 800b2c2:	412e      	asrs	r6, r5
 800b2c4:	4230      	tst	r0, r6
 800b2c6:	d016      	beq.n	800b2f6 <floorf+0x6e>
 800b2c8:	490d      	ldr	r1, [pc, #52]	@ (800b300 <floorf+0x78>)
 800b2ca:	f7f5 fc53 	bl	8000b74 <__addsf3>
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	f7f5 ff14 	bl	80010fc <__aeabi_fcmpgt>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d0f1      	beq.n	800b2bc <floorf+0x34>
 800b2d8:	2c00      	cmp	r4, #0
 800b2da:	bfbe      	ittt	lt
 800b2dc:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800b2e0:	412b      	asrlt	r3, r5
 800b2e2:	18e4      	addlt	r4, r4, r3
 800b2e4:	ea24 0406 	bic.w	r4, r4, r6
 800b2e8:	e7e8      	b.n	800b2bc <floorf+0x34>
 800b2ea:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800b2ee:	d302      	bcc.n	800b2f6 <floorf+0x6e>
 800b2f0:	f7f5 fc40 	bl	8000b74 <__addsf3>
 800b2f4:	4601      	mov	r1, r0
 800b2f6:	4608      	mov	r0, r1
 800b2f8:	bd70      	pop	{r4, r5, r6, pc}
 800b2fa:	2400      	movs	r4, #0
 800b2fc:	e7de      	b.n	800b2bc <floorf+0x34>
 800b2fe:	bf00      	nop
 800b300:	7149f2ca 	.word	0x7149f2ca
 800b304:	bf800000 	.word	0xbf800000
 800b308:	007fffff 	.word	0x007fffff

0800b30c <_init>:
 800b30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30e:	bf00      	nop
 800b310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b312:	bc08      	pop	{r3}
 800b314:	469e      	mov	lr, r3
 800b316:	4770      	bx	lr

0800b318 <_fini>:
 800b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31a:	bf00      	nop
 800b31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b31e:	bc08      	pop	{r3}
 800b320:	469e      	mov	lr, r3
 800b322:	4770      	bx	lr
