
CHARTRAK2v3_controllerRETARGETED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001094  0800e040  0800e040  0001e040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0d4  0800f0d4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0d4  0800f0d4  0001f0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0dc  0800f0dc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0dc  0800f0dc  0001f0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0e0  0800f0e0  0001f0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800f0e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  200001f0  0800f2d4  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  0800f2d4  00020700  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   000192b4  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040d6  00000000  00000000  00039510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0003d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001179  00000000  00000000  0003ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d334  00000000  00000000  0003fde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f74b  00000000  00000000  0005d115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000972e8  00000000  00000000  0007c860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000076f8  00000000  00000000  00113b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0011b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e024 	.word	0x0800e024

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800e024 	.word	0x0800e024

08000150 <setjmp>:
 8000150:	46ec      	mov	ip, sp
 8000152:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000156:	f04f 0000 	mov.w	r0, #0
 800015a:	4770      	bx	lr

0800015c <longjmp>:
 800015c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000160:	46e5      	mov	sp, ip
 8000162:	0008      	movs	r0, r1
 8000164:	bf08      	it	eq
 8000166:	2001      	moveq	r0, #1
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop

0800016c <strcmp>:
 800016c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000170:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000174:	2a01      	cmp	r2, #1
 8000176:	bf28      	it	cs
 8000178:	429a      	cmpcs	r2, r3
 800017a:	d0f7      	beq.n	800016c <strcmp>
 800017c:	1ad0      	subs	r0, r2, r3
 800017e:	4770      	bx	lr

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_ldivmod>:
 800118c:	b97b      	cbnz	r3, 80011ae <__aeabi_ldivmod+0x22>
 800118e:	b972      	cbnz	r2, 80011ae <__aeabi_ldivmod+0x22>
 8001190:	2900      	cmp	r1, #0
 8001192:	bfbe      	ittt	lt
 8001194:	2000      	movlt	r0, #0
 8001196:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800119a:	e006      	blt.n	80011aa <__aeabi_ldivmod+0x1e>
 800119c:	bf08      	it	eq
 800119e:	2800      	cmpeq	r0, #0
 80011a0:	bf1c      	itt	ne
 80011a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80011a6:	f04f 30ff 	movne.w	r0, #4294967295
 80011aa:	f000 b9dd 	b.w	8001568 <__aeabi_idiv0>
 80011ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b6:	2900      	cmp	r1, #0
 80011b8:	db09      	blt.n	80011ce <__aeabi_ldivmod+0x42>
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db1a      	blt.n	80011f4 <__aeabi_ldivmod+0x68>
 80011be:	f000 f86d 	bl	800129c <__udivmoddi4>
 80011c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011ca:	b004      	add	sp, #16
 80011cc:	4770      	bx	lr
 80011ce:	4240      	negs	r0, r0
 80011d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db1b      	blt.n	8001210 <__aeabi_ldivmod+0x84>
 80011d8:	f000 f860 	bl	800129c <__udivmoddi4>
 80011dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011e4:	b004      	add	sp, #16
 80011e6:	4240      	negs	r0, r0
 80011e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011ec:	4252      	negs	r2, r2
 80011ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011f2:	4770      	bx	lr
 80011f4:	4252      	negs	r2, r2
 80011f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011fa:	f000 f84f 	bl	800129c <__udivmoddi4>
 80011fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001206:	b004      	add	sp, #16
 8001208:	4240      	negs	r0, r0
 800120a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800120e:	4770      	bx	lr
 8001210:	4252      	negs	r2, r2
 8001212:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001216:	f000 f841 	bl	800129c <__udivmoddi4>
 800121a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800121e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001222:	b004      	add	sp, #16
 8001224:	4252      	negs	r2, r2
 8001226:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800122a:	4770      	bx	lr

0800122c <__aeabi_d2lz>:
 800122c:	b538      	push	{r3, r4, r5, lr}
 800122e:	4605      	mov	r5, r0
 8001230:	460c      	mov	r4, r1
 8001232:	2200      	movs	r2, #0
 8001234:	2300      	movs	r3, #0
 8001236:	4628      	mov	r0, r5
 8001238:	4621      	mov	r1, r4
 800123a:	f7ff fbd7 	bl	80009ec <__aeabi_dcmplt>
 800123e:	b928      	cbnz	r0, 800124c <__aeabi_d2lz+0x20>
 8001240:	4628      	mov	r0, r5
 8001242:	4621      	mov	r1, r4
 8001244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001248:	f000 b80a 	b.w	8001260 <__aeabi_d2ulz>
 800124c:	4628      	mov	r0, r5
 800124e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001252:	f000 f805 	bl	8001260 <__aeabi_d2ulz>
 8001256:	4240      	negs	r0, r0
 8001258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800125c:	bd38      	pop	{r3, r4, r5, pc}
 800125e:	bf00      	nop

08001260 <__aeabi_d2ulz>:
 8001260:	b5d0      	push	{r4, r6, r7, lr}
 8001262:	2200      	movs	r2, #0
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <__aeabi_d2ulz+0x34>)
 8001266:	4606      	mov	r6, r0
 8001268:	460f      	mov	r7, r1
 800126a:	f7ff f94d 	bl	8000508 <__aeabi_dmul>
 800126e:	f7ff fc23 	bl	8000ab8 <__aeabi_d2uiz>
 8001272:	4604      	mov	r4, r0
 8001274:	f7ff f8ce 	bl	8000414 <__aeabi_ui2d>
 8001278:	2200      	movs	r2, #0
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <__aeabi_d2ulz+0x38>)
 800127c:	f7ff f944 	bl	8000508 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4630      	mov	r0, r6
 8001286:	4639      	mov	r1, r7
 8001288:	f7fe ff86 	bl	8000198 <__aeabi_dsub>
 800128c:	f7ff fc14 	bl	8000ab8 <__aeabi_d2uiz>
 8001290:	4621      	mov	r1, r4
 8001292:	bdd0      	pop	{r4, r6, r7, pc}
 8001294:	3df00000 	.word	0x3df00000
 8001298:	41f00000 	.word	0x41f00000

0800129c <__udivmoddi4>:
 800129c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012a0:	9e08      	ldr	r6, [sp, #32]
 80012a2:	460d      	mov	r5, r1
 80012a4:	4604      	mov	r4, r0
 80012a6:	468e      	mov	lr, r1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d14c      	bne.n	8001346 <__udivmoddi4+0xaa>
 80012ac:	428a      	cmp	r2, r1
 80012ae:	4694      	mov	ip, r2
 80012b0:	d967      	bls.n	8001382 <__udivmoddi4+0xe6>
 80012b2:	fab2 f382 	clz	r3, r2
 80012b6:	b153      	cbz	r3, 80012ce <__udivmoddi4+0x32>
 80012b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80012bc:	f1c3 0220 	rsb	r2, r3, #32
 80012c0:	fa01 fe03 	lsl.w	lr, r1, r3
 80012c4:	fa20 f202 	lsr.w	r2, r0, r2
 80012c8:	ea42 0e0e 	orr.w	lr, r2, lr
 80012cc:	409c      	lsls	r4, r3
 80012ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012d2:	fbbe f1f7 	udiv	r1, lr, r7
 80012d6:	fa1f f58c 	uxth.w	r5, ip
 80012da:	fb07 ee11 	mls	lr, r7, r1, lr
 80012de:	fb01 f005 	mul.w	r0, r1, r5
 80012e2:	0c22      	lsrs	r2, r4, #16
 80012e4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80012e8:	4290      	cmp	r0, r2
 80012ea:	d90a      	bls.n	8001302 <__udivmoddi4+0x66>
 80012ec:	eb1c 0202 	adds.w	r2, ip, r2
 80012f0:	f101 3eff 	add.w	lr, r1, #4294967295
 80012f4:	f080 8119 	bcs.w	800152a <__udivmoddi4+0x28e>
 80012f8:	4290      	cmp	r0, r2
 80012fa:	f240 8116 	bls.w	800152a <__udivmoddi4+0x28e>
 80012fe:	3902      	subs	r1, #2
 8001300:	4462      	add	r2, ip
 8001302:	1a12      	subs	r2, r2, r0
 8001304:	fbb2 f0f7 	udiv	r0, r2, r7
 8001308:	fb07 2210 	mls	r2, r7, r0, r2
 800130c:	fb00 f505 	mul.w	r5, r0, r5
 8001310:	b2a4      	uxth	r4, r4
 8001312:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001316:	42a5      	cmp	r5, r4
 8001318:	d90a      	bls.n	8001330 <__udivmoddi4+0x94>
 800131a:	eb1c 0404 	adds.w	r4, ip, r4
 800131e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001322:	f080 8104 	bcs.w	800152e <__udivmoddi4+0x292>
 8001326:	42a5      	cmp	r5, r4
 8001328:	f240 8101 	bls.w	800152e <__udivmoddi4+0x292>
 800132c:	4464      	add	r4, ip
 800132e:	3802      	subs	r0, #2
 8001330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001334:	2100      	movs	r1, #0
 8001336:	1b64      	subs	r4, r4, r5
 8001338:	b11e      	cbz	r6, 8001342 <__udivmoddi4+0xa6>
 800133a:	40dc      	lsrs	r4, r3
 800133c:	2300      	movs	r3, #0
 800133e:	e9c6 4300 	strd	r4, r3, [r6]
 8001342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001346:	428b      	cmp	r3, r1
 8001348:	d908      	bls.n	800135c <__udivmoddi4+0xc0>
 800134a:	2e00      	cmp	r6, #0
 800134c:	f000 80ea 	beq.w	8001524 <__udivmoddi4+0x288>
 8001350:	2100      	movs	r1, #0
 8001352:	e9c6 0500 	strd	r0, r5, [r6]
 8001356:	4608      	mov	r0, r1
 8001358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800135c:	fab3 f183 	clz	r1, r3
 8001360:	2900      	cmp	r1, #0
 8001362:	d148      	bne.n	80013f6 <__udivmoddi4+0x15a>
 8001364:	42ab      	cmp	r3, r5
 8001366:	d302      	bcc.n	800136e <__udivmoddi4+0xd2>
 8001368:	4282      	cmp	r2, r0
 800136a:	f200 80f8 	bhi.w	800155e <__udivmoddi4+0x2c2>
 800136e:	1a84      	subs	r4, r0, r2
 8001370:	eb65 0203 	sbc.w	r2, r5, r3
 8001374:	2001      	movs	r0, #1
 8001376:	4696      	mov	lr, r2
 8001378:	2e00      	cmp	r6, #0
 800137a:	d0e2      	beq.n	8001342 <__udivmoddi4+0xa6>
 800137c:	e9c6 4e00 	strd	r4, lr, [r6]
 8001380:	e7df      	b.n	8001342 <__udivmoddi4+0xa6>
 8001382:	b902      	cbnz	r2, 8001386 <__udivmoddi4+0xea>
 8001384:	deff      	udf	#255	; 0xff
 8001386:	fab2 f382 	clz	r3, r2
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 808e 	bne.w	80014ac <__udivmoddi4+0x210>
 8001390:	1a88      	subs	r0, r1, r2
 8001392:	2101      	movs	r1, #1
 8001394:	0c17      	lsrs	r7, r2, #16
 8001396:	fa1f fe82 	uxth.w	lr, r2
 800139a:	fbb0 f5f7 	udiv	r5, r0, r7
 800139e:	fb07 0015 	mls	r0, r7, r5, r0
 80013a2:	0c22      	lsrs	r2, r4, #16
 80013a4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80013a8:	fb0e f005 	mul.w	r0, lr, r5
 80013ac:	4290      	cmp	r0, r2
 80013ae:	d908      	bls.n	80013c2 <__udivmoddi4+0x126>
 80013b0:	eb1c 0202 	adds.w	r2, ip, r2
 80013b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80013b8:	d202      	bcs.n	80013c0 <__udivmoddi4+0x124>
 80013ba:	4290      	cmp	r0, r2
 80013bc:	f200 80cc 	bhi.w	8001558 <__udivmoddi4+0x2bc>
 80013c0:	4645      	mov	r5, r8
 80013c2:	1a12      	subs	r2, r2, r0
 80013c4:	fbb2 f0f7 	udiv	r0, r2, r7
 80013c8:	fb07 2210 	mls	r2, r7, r0, r2
 80013cc:	fb0e fe00 	mul.w	lr, lr, r0
 80013d0:	b2a4      	uxth	r4, r4
 80013d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80013d6:	45a6      	cmp	lr, r4
 80013d8:	d908      	bls.n	80013ec <__udivmoddi4+0x150>
 80013da:	eb1c 0404 	adds.w	r4, ip, r4
 80013de:	f100 32ff 	add.w	r2, r0, #4294967295
 80013e2:	d202      	bcs.n	80013ea <__udivmoddi4+0x14e>
 80013e4:	45a6      	cmp	lr, r4
 80013e6:	f200 80b4 	bhi.w	8001552 <__udivmoddi4+0x2b6>
 80013ea:	4610      	mov	r0, r2
 80013ec:	eba4 040e 	sub.w	r4, r4, lr
 80013f0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80013f4:	e7a0      	b.n	8001338 <__udivmoddi4+0x9c>
 80013f6:	f1c1 0720 	rsb	r7, r1, #32
 80013fa:	408b      	lsls	r3, r1
 80013fc:	fa22 fc07 	lsr.w	ip, r2, r7
 8001400:	ea4c 0c03 	orr.w	ip, ip, r3
 8001404:	fa25 fa07 	lsr.w	sl, r5, r7
 8001408:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800140c:	fbba f8f9 	udiv	r8, sl, r9
 8001410:	408d      	lsls	r5, r1
 8001412:	fa20 f307 	lsr.w	r3, r0, r7
 8001416:	fb09 aa18 	mls	sl, r9, r8, sl
 800141a:	fa1f fe8c 	uxth.w	lr, ip
 800141e:	432b      	orrs	r3, r5
 8001420:	fa00 f501 	lsl.w	r5, r0, r1
 8001424:	fb08 f00e 	mul.w	r0, r8, lr
 8001428:	0c1c      	lsrs	r4, r3, #16
 800142a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800142e:	42a0      	cmp	r0, r4
 8001430:	fa02 f201 	lsl.w	r2, r2, r1
 8001434:	d90b      	bls.n	800144e <__udivmoddi4+0x1b2>
 8001436:	eb1c 0404 	adds.w	r4, ip, r4
 800143a:	f108 3aff 	add.w	sl, r8, #4294967295
 800143e:	f080 8086 	bcs.w	800154e <__udivmoddi4+0x2b2>
 8001442:	42a0      	cmp	r0, r4
 8001444:	f240 8083 	bls.w	800154e <__udivmoddi4+0x2b2>
 8001448:	f1a8 0802 	sub.w	r8, r8, #2
 800144c:	4464      	add	r4, ip
 800144e:	1a24      	subs	r4, r4, r0
 8001450:	b298      	uxth	r0, r3
 8001452:	fbb4 f3f9 	udiv	r3, r4, r9
 8001456:	fb09 4413 	mls	r4, r9, r3, r4
 800145a:	fb03 fe0e 	mul.w	lr, r3, lr
 800145e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001462:	45a6      	cmp	lr, r4
 8001464:	d908      	bls.n	8001478 <__udivmoddi4+0x1dc>
 8001466:	eb1c 0404 	adds.w	r4, ip, r4
 800146a:	f103 30ff 	add.w	r0, r3, #4294967295
 800146e:	d26a      	bcs.n	8001546 <__udivmoddi4+0x2aa>
 8001470:	45a6      	cmp	lr, r4
 8001472:	d968      	bls.n	8001546 <__udivmoddi4+0x2aa>
 8001474:	3b02      	subs	r3, #2
 8001476:	4464      	add	r4, ip
 8001478:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800147c:	fba0 9302 	umull	r9, r3, r0, r2
 8001480:	eba4 040e 	sub.w	r4, r4, lr
 8001484:	429c      	cmp	r4, r3
 8001486:	46c8      	mov	r8, r9
 8001488:	469e      	mov	lr, r3
 800148a:	d354      	bcc.n	8001536 <__udivmoddi4+0x29a>
 800148c:	d051      	beq.n	8001532 <__udivmoddi4+0x296>
 800148e:	2e00      	cmp	r6, #0
 8001490:	d067      	beq.n	8001562 <__udivmoddi4+0x2c6>
 8001492:	ebb5 0308 	subs.w	r3, r5, r8
 8001496:	eb64 040e 	sbc.w	r4, r4, lr
 800149a:	40cb      	lsrs	r3, r1
 800149c:	fa04 f707 	lsl.w	r7, r4, r7
 80014a0:	431f      	orrs	r7, r3
 80014a2:	40cc      	lsrs	r4, r1
 80014a4:	e9c6 7400 	strd	r7, r4, [r6]
 80014a8:	2100      	movs	r1, #0
 80014aa:	e74a      	b.n	8001342 <__udivmoddi4+0xa6>
 80014ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80014b0:	f1c3 0020 	rsb	r0, r3, #32
 80014b4:	40c1      	lsrs	r1, r0
 80014b6:	409d      	lsls	r5, r3
 80014b8:	fa24 f000 	lsr.w	r0, r4, r0
 80014bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80014c0:	4328      	orrs	r0, r5
 80014c2:	fbb1 f5f7 	udiv	r5, r1, r7
 80014c6:	fb07 1115 	mls	r1, r7, r5, r1
 80014ca:	fa1f fe8c 	uxth.w	lr, ip
 80014ce:	0c02      	lsrs	r2, r0, #16
 80014d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014d4:	fb05 f10e 	mul.w	r1, r5, lr
 80014d8:	4291      	cmp	r1, r2
 80014da:	fa04 f403 	lsl.w	r4, r4, r3
 80014de:	d908      	bls.n	80014f2 <__udivmoddi4+0x256>
 80014e0:	eb1c 0202 	adds.w	r2, ip, r2
 80014e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80014e8:	d22f      	bcs.n	800154a <__udivmoddi4+0x2ae>
 80014ea:	4291      	cmp	r1, r2
 80014ec:	d92d      	bls.n	800154a <__udivmoddi4+0x2ae>
 80014ee:	3d02      	subs	r5, #2
 80014f0:	4462      	add	r2, ip
 80014f2:	1a52      	subs	r2, r2, r1
 80014f4:	fbb2 f1f7 	udiv	r1, r2, r7
 80014f8:	fb07 2211 	mls	r2, r7, r1, r2
 80014fc:	b280      	uxth	r0, r0
 80014fe:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001502:	fb01 f20e 	mul.w	r2, r1, lr
 8001506:	4282      	cmp	r2, r0
 8001508:	d908      	bls.n	800151c <__udivmoddi4+0x280>
 800150a:	eb1c 0000 	adds.w	r0, ip, r0
 800150e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001512:	d216      	bcs.n	8001542 <__udivmoddi4+0x2a6>
 8001514:	4282      	cmp	r2, r0
 8001516:	d914      	bls.n	8001542 <__udivmoddi4+0x2a6>
 8001518:	3902      	subs	r1, #2
 800151a:	4460      	add	r0, ip
 800151c:	1a80      	subs	r0, r0, r2
 800151e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001522:	e73a      	b.n	800139a <__udivmoddi4+0xfe>
 8001524:	4631      	mov	r1, r6
 8001526:	4630      	mov	r0, r6
 8001528:	e70b      	b.n	8001342 <__udivmoddi4+0xa6>
 800152a:	4671      	mov	r1, lr
 800152c:	e6e9      	b.n	8001302 <__udivmoddi4+0x66>
 800152e:	4610      	mov	r0, r2
 8001530:	e6fe      	b.n	8001330 <__udivmoddi4+0x94>
 8001532:	454d      	cmp	r5, r9
 8001534:	d2ab      	bcs.n	800148e <__udivmoddi4+0x1f2>
 8001536:	ebb9 0802 	subs.w	r8, r9, r2
 800153a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800153e:	3801      	subs	r0, #1
 8001540:	e7a5      	b.n	800148e <__udivmoddi4+0x1f2>
 8001542:	4641      	mov	r1, r8
 8001544:	e7ea      	b.n	800151c <__udivmoddi4+0x280>
 8001546:	4603      	mov	r3, r0
 8001548:	e796      	b.n	8001478 <__udivmoddi4+0x1dc>
 800154a:	4645      	mov	r5, r8
 800154c:	e7d1      	b.n	80014f2 <__udivmoddi4+0x256>
 800154e:	46d0      	mov	r8, sl
 8001550:	e77d      	b.n	800144e <__udivmoddi4+0x1b2>
 8001552:	4464      	add	r4, ip
 8001554:	3802      	subs	r0, #2
 8001556:	e749      	b.n	80013ec <__udivmoddi4+0x150>
 8001558:	3d02      	subs	r5, #2
 800155a:	4462      	add	r2, ip
 800155c:	e731      	b.n	80013c2 <__udivmoddi4+0x126>
 800155e:	4608      	mov	r0, r1
 8001560:	e70a      	b.n	8001378 <__udivmoddi4+0xdc>
 8001562:	4631      	mov	r1, r6
 8001564:	e6ed      	b.n	8001342 <__udivmoddi4+0xa6>
 8001566:	bf00      	nop

08001568 <__aeabi_idiv0>:
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	0000      	movs	r0, r0
	...

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b0b0      	sub	sp, #192	; 0xc0
 8001574:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001576:	f000 fe63 	bl	8002240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157a:	f000 f95f 	bl	800183c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157e:	f000 fad3 	bl	8001b28 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001582:	f000 f9b7 	bl	80018f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001586:	f000 f9f3 	bl	8001970 <MX_I2C1_Init>
  MX_SPI1_Init();
 800158a:	f000 fa1f 	bl	80019cc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800158e:	f000 faa1 	bl	8001ad4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001592:	f000 fa51 	bl	8001a38 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  	//GPIO SETUP
    HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159c:	488e      	ldr	r0, [pc, #568]	; (80017d8 <main+0x268>)
 800159e:	f001 fc5c 	bl	8002e5a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2110      	movs	r1, #16
 80015a6:	488d      	ldr	r0, [pc, #564]	; (80017dc <main+0x26c>)
 80015a8:	f001 fc57 	bl	8002e5a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b2:	4889      	ldr	r0, [pc, #548]	; (80017d8 <main+0x268>)
 80015b4:	f001 fc51 	bl	8002e5a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2120      	movs	r1, #32
 80015bc:	4888      	ldr	r0, [pc, #544]	; (80017e0 <main+0x270>)
 80015be:	f001 fc4c 	bl	8002e5a <HAL_GPIO_WritePin>

    // ADC board expander setup
    TCA_Init(0b0100001, hi2c1);
 80015c2:	4c88      	ldr	r4, [pc, #544]	; (80017e4 <main+0x274>)
 80015c4:	4668      	mov	r0, sp
 80015c6:	f104 030c 	add.w	r3, r4, #12
 80015ca:	2248      	movs	r2, #72	; 0x48
 80015cc:	4619      	mov	r1, r3
 80015ce:	f009 fb9e 	bl	800ad0e <memcpy>
 80015d2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80015d6:	2021      	movs	r0, #33	; 0x21
 80015d8:	f006 ff40 	bl	800845c <TCA_Init>

    TCA_PinMode(P07, 0);
 80015dc:	2100      	movs	r1, #0
 80015de:	2007      	movs	r0, #7
 80015e0:	f006 ff62 	bl	80084a8 <TCA_PinMode>
    TCA_PinMode(P11, 0);
 80015e4:	2100      	movs	r1, #0
 80015e6:	2009      	movs	r0, #9
 80015e8:	f006 ff5e 	bl	80084a8 <TCA_PinMode>
    TCA_PinMode(P12, 0);
 80015ec:	2100      	movs	r1, #0
 80015ee:	200a      	movs	r0, #10
 80015f0:	f006 ff5a 	bl	80084a8 <TCA_PinMode>

    TCA_WritePin(P07, 1);
 80015f4:	2101      	movs	r1, #1
 80015f6:	2007      	movs	r0, #7
 80015f8:	f006 ffae 	bl	8008558 <TCA_WritePin>
    TCA_WritePin(P11, 0);
 80015fc:	2100      	movs	r1, #0
 80015fe:	2009      	movs	r0, #9
 8001600:	f006 ffaa 	bl	8008558 <TCA_WritePin>
    TCA_WritePin(P12, 0);
 8001604:	2100      	movs	r1, #0
 8001606:	200a      	movs	r0, #10
 8001608:	f006 ffa6 	bl	8008558 <TCA_WritePin>

    // High-speed DAC setup
    DACREF(0.0);
 800160c:	f04f 0000 	mov.w	r0, #0
 8001610:	f005 fc96 	bl	8006f40 <DACREF>
    DACOFFS(0.0);
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	f005 fcf2 	bl	8007000 <DACOFFS>

    // High-speed ADC setup
    ADCREF(1.2);
 800161c:	4872      	ldr	r0, [pc, #456]	; (80017e8 <main+0x278>)
 800161e:	f005 fd57 	bl	80070d0 <ADCREF>
    ADCOFFS(0.0);
 8001622:	f04f 0000 	mov.w	r0, #0
 8001626:	f005 fdaf 	bl	8007188 <ADCOFFS>

    //HAL_TIM_Base_Start_IT(&htim4);

    // system functions setup
    Function SYSfunctions[] = { {.name = "ID", .run = SCPIC_SYS_ID},
 800162a:	4b70      	ldr	r3, [pc, #448]	; (80017ec <main+0x27c>)
 800162c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001630:	461d      	mov	r5, r3
 8001632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001636:	e895 0003 	ldmia.w	r5, {r0, r1}
 800163a:	e884 0003 	stmia.w	r4, {r0, r1}
       							 {.name = "RESET", .run = SCPIC_SYS_RESET},
   								 {.name = "APPLY", .run = SCPIC_SYS_APPLY}	};

    Class SYSclass = { .name = "SYS", .functions = SYSfunctions, .functionsLength = 3 };
 800163e:	4b6c      	ldr	r3, [pc, #432]	; (80017f0 <main+0x280>)
 8001640:	657b      	str	r3, [r7, #84]	; 0x54
 8001642:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001646:	65bb      	str	r3, [r7, #88]	; 0x58
 8001648:	2303      	movs	r3, #3
 800164a:	65fb      	str	r3, [r7, #92]	; 0x5c
    addClass(&SYSclass, 0);
 800164c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f006 fb38 	bl	8007cc8 <addClass>

    // output functions setup
    Function OUTfunctions[] = { {.name = "MAXAMPLITUDE", .run = SCPIC_OUT_MAXAMPLITUDE},
 8001658:	4b66      	ldr	r3, [pc, #408]	; (80017f4 <main+0x284>)
 800165a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800165e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           						{.name = "MODE", .run = SCPIC_OUT_MODE} };

    Class OUTclass = { .name = "OUT", .functions = OUTfunctions, .functionsLength = 2 };
 8001664:	4b64      	ldr	r3, [pc, #400]	; (80017f8 <main+0x288>)
 8001666:	63bb      	str	r3, [r7, #56]	; 0x38
 8001668:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800166c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800166e:	2302      	movs	r3, #2
 8001670:	643b      	str	r3, [r7, #64]	; 0x40
    addClass(&OUTclass, 0);
 8001672:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f006 fb25 	bl	8007cc8 <addClass>

    //SCPI setup
    Function Lolafunctions[] = { {.name = "FID", .run = SCPIC_FID},
 800167e:	4b5f      	ldr	r3, [pc, #380]	; (80017fc <main+0x28c>)
 8001680:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								 {.name = "INIT", .run = SCPIC_INIT}	};

    Class Lolaclass = { .name = "LOLA", .functions = Lolafunctions, .functionsLength = 2 };
 800168a:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <main+0x290>)
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001692:	623b      	str	r3, [r7, #32]
 8001694:	2302      	movs	r3, #2
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    addClass(&Lolaclass, 0);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f006 fb12 	bl	8007cc8 <addClass>

    Function DVMfunctions[] = { {.name = "RAW", .run = SCPIC_DVM_RAW},
 80016a4:	4b57      	ldr	r3, [pc, #348]	; (8001804 <main+0x294>)
 80016a6:	f107 040c 	add.w	r4, r7, #12
 80016aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    							{.name = "VAL", .run = SCPIC_DVM_VAL}	};

    Class DVMclass = { .name = "DVM", .functions = DVMfunctions, .functionsLength = 2 };
 80016b0:	4b55      	ldr	r3, [pc, #340]	; (8001808 <main+0x298>)
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	2302      	movs	r3, #2
 80016bc:	60bb      	str	r3, [r7, #8]
    addClass(&DVMclass, 0);
 80016be:	463b      	mov	r3, r7
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f006 fb00 	bl	8007cc8 <addClass>

    //SimpleOS setup
    kernel_init(20); // max 20 tasks
 80016c8:	2014      	movs	r0, #20
 80016ca:	f006 fb37 	bl	8007d3c <kernel_init>

    //SPARTAN3 SETUP
    LOLA1.Config = JTAG;
 80016ce:	4b4f      	ldr	r3, [pc, #316]	; (800180c <main+0x29c>)
 80016d0:	2206      	movs	r2, #6
 80016d2:	705a      	strb	r2, [r3, #1]
    LOLA1.Trials = 100;
 80016d4:	4b4d      	ldr	r3, [pc, #308]	; (800180c <main+0x29c>)
 80016d6:	2264      	movs	r2, #100	; 0x64
 80016d8:	805a      	strh	r2, [r3, #2]
    LOLA1.compatibleFirmwareID = 0xF103;
 80016da:	4b4c      	ldr	r3, [pc, #304]	; (800180c <main+0x29c>)
 80016dc:	f24f 1203 	movw	r2, #61699	; 0xf103
 80016e0:	809a      	strh	r2, [r3, #4]

    //High frequency DAC setup
    HFDAC1.maxAmplitude = 0;
 80016e2:	4b4b      	ldr	r3, [pc, #300]	; (8001810 <main+0x2a0>)
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
    HFDAC1.mode = Voltage_output;
 80016ea:	4b49      	ldr	r3, [pc, #292]	; (8001810 <main+0x2a0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
    HFDAC1.offset = 0;
 80016f0:	4b47      	ldr	r3, [pc, #284]	; (8001810 <main+0x2a0>)
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]

    //Hight Frequency ADC setup
    HFADC1.ADCref = 2.5;
 80016f8:	4b46      	ldr	r3, [pc, #280]	; (8001814 <main+0x2a4>)
 80016fa:	4a47      	ldr	r2, [pc, #284]	; (8001818 <main+0x2a8>)
 80016fc:	609a      	str	r2, [r3, #8]
    HFADC1.OUT_MEASURING_OFFSET = 0;
 80016fe:	4b45      	ldr	r3, [pc, #276]	; (8001814 <main+0x2a4>)
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
    HFADC1.source = OUT;
 8001706:	4b43      	ldr	r3, [pc, #268]	; (8001814 <main+0x2a4>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
    HFADC1.UIO_channel = 1;
 800170c:	4b41      	ldr	r3, [pc, #260]	; (8001814 <main+0x2a4>)
 800170e:	2201      	movs	r2, #1
 8001710:	709a      	strb	r2, [r3, #2]
    HFADC1.UIO_channelLetter = 'A';
 8001712:	4b40      	ldr	r3, [pc, #256]	; (8001814 <main+0x2a4>)
 8001714:	2241      	movs	r2, #65	; 0x41
 8001716:	70da      	strb	r2, [r3, #3]
    HFADC1.mode = Voltage_input;
 8001718:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <main+0x2a4>)
 800171a:	2200      	movs	r2, #0
 800171c:	705a      	strb	r2, [r3, #1]

    //Oscilloscope setup
    OSC1.prescaler = 1;
 800171e:	4b3f      	ldr	r3, [pc, #252]	; (800181c <main+0x2ac>)
 8001720:	2201      	movs	r2, #1
 8001722:	609a      	str	r2, [r3, #8]
    OSC1.samplesAfterTrig = 1000;
 8001724:	4b3d      	ldr	r3, [pc, #244]	; (800181c <main+0x2ac>)
 8001726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800172a:	80da      	strh	r2, [r3, #6]
    OSC1.trigMode = rising;
 800172c:	4b3b      	ldr	r3, [pc, #236]	; (800181c <main+0x2ac>)
 800172e:	2201      	movs	r2, #1
 8001730:	711a      	strb	r2, [r3, #4]
    OSC1.triggerLevel = 0;
 8001732:	4b3a      	ldr	r3, [pc, #232]	; (800181c <main+0x2ac>)
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	601a      	str	r2, [r3, #0]

    //CharTrak setup
    CHT1.characteristic = Open;
 800173a:	4b39      	ldr	r3, [pc, #228]	; (8001820 <main+0x2b0>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
    CHT1.Uamp = 0;
 8001740:	4b37      	ldr	r3, [pc, #220]	; (8001820 <main+0x2b0>)
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	605a      	str	r2, [r3, #4]

    // Arbitrary waveform generator setup
    AWG1.waveform = Square;
 8001748:	4b36      	ldr	r3, [pc, #216]	; (8001824 <main+0x2b4>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
    AWG1.Uavg = 0.0;
 800174e:	4b35      	ldr	r3, [pc, #212]	; (8001824 <main+0x2b4>)
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	605a      	str	r2, [r3, #4]
    AWG1.Uamp = 2.0;
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <main+0x2b4>)
 8001758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800175c:	609a      	str	r2, [r3, #8]
    AWG1.DutyCycle = 20.0;
 800175e:	4b31      	ldr	r3, [pc, #196]	; (8001824 <main+0x2b4>)
 8001760:	4a31      	ldr	r2, [pc, #196]	; (8001828 <main+0x2b8>)
 8001762:	60da      	str	r2, [r3, #12]
    AWG1.Freq = 10000.0;
 8001764:	492f      	ldr	r1, [pc, #188]	; (8001824 <main+0x2b4>)
 8001766:	a318      	add	r3, pc, #96	; (adr r3, 80017c8 <main+0x258>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	e9c1 2304 	strd	r2, r3, [r1, #16]

    // Noise generator setup
    NOISE1.Enable = 0;
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <main+0x2bc>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
    NOISE1.Freq = 10000.0;
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <main+0x2bc>)
 8001778:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <main+0x2c0>)
 800177a:	609a      	str	r2, [r3, #8]
    NOISE1.Uamp = 1.0;
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <main+0x2bc>)
 800177e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001782:	605a      	str	r2, [r3, #4]
    NOISE1.Seed = 0x800f000f000f0001;
 8001784:	4929      	ldr	r1, [pc, #164]	; (800182c <main+0x2bc>)
 8001786:	a312      	add	r3, pc, #72	; (adr r3, 80017d0 <main+0x260>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	e9c1 2304 	strd	r2, r3, [r1, #16]

    HFDAC_SET_ALL(&HFDAC1);
 8001790:	481f      	ldr	r0, [pc, #124]	; (8001810 <main+0x2a0>)
 8001792:	f005 f929 	bl	80069e8 <HFDAC_SET_ALL>
    HFADC_SET_ALL(&HFADC1);
 8001796:	481f      	ldr	r0, [pc, #124]	; (8001814 <main+0x2a4>)
 8001798:	f005 f874 	bl	8006884 <HFADC_SET_ALL>

    OSC_SET_ALL(&OSC1, &HFADC1);
 800179c:	491d      	ldr	r1, [pc, #116]	; (8001814 <main+0x2a4>)
 800179e:	481f      	ldr	r0, [pc, #124]	; (800181c <main+0x2ac>)
 80017a0:	f005 faec 	bl	8006d7c <OSC_SET_ALL>

    HFDAC_DIRECT_DATA(&HFDAC1, 0);
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	4819      	ldr	r0, [pc, #100]	; (8001810 <main+0x2a0>)
 80017aa:	f005 f8dd 	bl	8006968 <HFDAC_DIRECT_DATA>
    AWG_Load_Waveform(&AWG1, &HFDAC1);
 80017ae:	4918      	ldr	r1, [pc, #96]	; (8001810 <main+0x2a0>)
 80017b0:	481c      	ldr	r0, [pc, #112]	; (8001824 <main+0x2b4>)
 80017b2:	f004 fcbd 	bl	8006130 <AWG_Load_Waveform>
    //NOISE_Load_param(&NOISE1, &HFDAC1);

    //AWG_Load_Waveform(AWG1,NOISE1);

    // RS485 receive interrupt setup
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 80017b6:	227d      	movs	r2, #125	; 0x7d
 80017b8:	491e      	ldr	r1, [pc, #120]	; (8001834 <main+0x2c4>)
 80017ba:	481f      	ldr	r0, [pc, #124]	; (8001838 <main+0x2c8>)
 80017bc:	f003 fedd 	bl	800557a <HAL_UARTEx_ReceiveToIdle_IT>

    kernel_begin(); //////////////////////////////////// CODE DOESNT GET FURTHER
 80017c0:	f006 fe0e 	bl	80083e0 <kernel_begin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <main+0x254>
 80017c6:	bf00      	nop
 80017c8:	00000000 	.word	0x00000000
 80017cc:	40c38800 	.word	0x40c38800
 80017d0:	000f0001 	.word	0x000f0001
 80017d4:	800f000f 	.word	0x800f000f
 80017d8:	40011000 	.word	0x40011000
 80017dc:	40010800 	.word	0x40010800
 80017e0:	40010c00 	.word	0x40010c00
 80017e4:	2000023c 	.word	0x2000023c
 80017e8:	3f99999a 	.word	0x3f99999a
 80017ec:	0800e068 	.word	0x0800e068
 80017f0:	0800e040 	.word	0x0800e040
 80017f4:	0800e098 	.word	0x0800e098
 80017f8:	0800e044 	.word	0x0800e044
 80017fc:	0800e0b4 	.word	0x0800e0b4
 8001800:	0800e048 	.word	0x0800e048
 8001804:	0800e0cc 	.word	0x0800e0cc
 8001808:	0800e050 	.word	0x0800e050
 800180c:	200003b0 	.word	0x200003b0
 8001810:	200003c4 	.word	0x200003c4
 8001814:	200003b8 	.word	0x200003b8
 8001818:	40200000 	.word	0x40200000
 800181c:	200003d4 	.word	0x200003d4
 8001820:	200003a8 	.word	0x200003a8
 8001824:	20000378 	.word	0x20000378
 8001828:	41a00000 	.word	0x41a00000
 800182c:	20000390 	.word	0x20000390
 8001830:	461c4000 	.word	0x461c4000
 8001834:	20000470 	.word	0x20000470
 8001838:	20000330 	.word	0x20000330

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b094      	sub	sp, #80	; 0x50
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001846:	2228      	movs	r2, #40	; 0x28
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f008 ff9e 	bl	800a78c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800186c:	2301      	movs	r3, #1
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187a:	2301      	movs	r3, #1
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187e:	2302      	movs	r3, #2
 8001880:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001888:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800188c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001892:	4618      	mov	r0, r3
 8001894:	f001 ffa6 	bl	80037e4 <HAL_RCC_OscConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800189e:	f000 fa12 	bl	8001cc6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a2:	230f      	movs	r3, #15
 80018a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2101      	movs	r1, #1
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fa12 	bl	8003ce8 <HAL_RCC_ClockConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80018ca:	f000 f9fc 	bl	8001cc6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018ce:	2302      	movs	r3, #2
 80018d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80018d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 fb92 	bl	8004004 <HAL_RCCEx_PeriphCLKConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80018e6:	f000 f9ee 	bl	8001cc6 <Error_Handler>
  }
}
 80018ea:	bf00      	nop
 80018ec:	3750      	adds	r7, #80	; 0x50
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <MX_ADC1_Init+0x74>)
 8001906:	4a19      	ldr	r2, [pc, #100]	; (800196c <MX_ADC1_Init+0x78>)
 8001908:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_ADC1_Init+0x74>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <MX_ADC1_Init+0x74>)
 8001912:	2200      	movs	r2, #0
 8001914:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_ADC1_Init+0x74>)
 8001918:	2200      	movs	r2, #0
 800191a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <MX_ADC1_Init+0x74>)
 800191e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001922:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <MX_ADC1_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <MX_ADC1_Init+0x74>)
 800192c:	2201      	movs	r2, #1
 800192e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001930:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_ADC1_Init+0x74>)
 8001932:	f000 fd0b 	bl	800234c <HAL_ADC_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800193c:	f000 f9c3 	bl	8001cc6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001944:	2301      	movs	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_ADC1_Init+0x74>)
 8001952:	f000 fdd3 	bl	80024fc <HAL_ADC_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800195c:	f000 f9b3 	bl	8001cc6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	2000020c 	.word	0x2000020c
 800196c:	40012400 	.word	0x40012400

08001970 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_I2C1_Init+0x50>)
 8001976:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <MX_I2C1_Init+0x54>)
 8001978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_I2C1_Init+0x50>)
 800197c:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <MX_I2C1_Init+0x58>)
 800197e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_I2C1_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_I2C1_Init+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_I2C1_Init+0x50>)
 800198e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001992:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <MX_I2C1_Init+0x50>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_I2C1_Init+0x50>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <MX_I2C1_Init+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_I2C1_Init+0x50>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_I2C1_Init+0x50>)
 80019ae:	f001 fa6d 	bl	8002e8c <HAL_I2C_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019b8:	f000 f985 	bl	8001cc6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	2000023c 	.word	0x2000023c
 80019c4:	40005400 	.word	0x40005400
 80019c8:	000186a0 	.word	0x000186a0

080019cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019d2:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <MX_SPI1_Init+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019ec:	2202      	movs	r2, #2
 80019ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_SPI1_Init+0x64>)
 8001a00:	2228      	movs	r2, #40	; 0x28
 8001a02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <MX_SPI1_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_SPI1_Init+0x64>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <MX_SPI1_Init+0x64>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_SPI1_Init+0x64>)
 8001a18:	220a      	movs	r2, #10
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <MX_SPI1_Init+0x64>)
 8001a1e:	f002 fba7 	bl	8004170 <HAL_SPI_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a28:	f000 f94d 	bl	8001cc6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000290 	.word	0x20000290
 8001a34:	40013000 	.word	0x40013000

08001a38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <MX_TIM4_Init+0x94>)
 8001a56:	4a1e      	ldr	r2, [pc, #120]	; (8001ad0 <MX_TIM4_Init+0x98>)
 8001a58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <MX_TIM4_Init+0x94>)
 8001a5c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001a60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_TIM4_Init+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50-1;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_TIM4_Init+0x94>)
 8001a6a:	2231      	movs	r2, #49	; 0x31
 8001a6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_TIM4_Init+0x94>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_TIM4_Init+0x94>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a7a:	4814      	ldr	r0, [pc, #80]	; (8001acc <MX_TIM4_Init+0x94>)
 8001a7c:	f003 f900 	bl	8004c80 <HAL_TIM_Base_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001a86:	f000 f91e 	bl	8001cc6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4619      	mov	r1, r3
 8001a96:	480d      	ldr	r0, [pc, #52]	; (8001acc <MX_TIM4_Init+0x94>)
 8001a98:	f003 fa49 	bl	8004f2e <HAL_TIM_ConfigClockSource>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001aa2:	f000 f910 	bl	8001cc6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aae:	463b      	mov	r3, r7
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	; (8001acc <MX_TIM4_Init+0x94>)
 8001ab4:	f003 fc1e 	bl	80052f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001abe:	f000 f902 	bl	8001cc6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200002e8 	.word	0x200002e8
 8001ad0:	40000800 	.word	0x40000800

08001ad4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <MX_USART1_UART_Init+0x50>)
 8001adc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001afa:	220c      	movs	r2, #12
 8001afc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001b0c:	f003 fc62 	bl	80053d4 <HAL_UART_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b16:	f000 f8d6 	bl	8001cc6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000330 	.word	0x20000330
 8001b24:	40013800 	.word	0x40013800

08001b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3c:	4b4b      	ldr	r3, [pc, #300]	; (8001c6c <MX_GPIO_Init+0x144>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a4a      	ldr	r2, [pc, #296]	; (8001c6c <MX_GPIO_Init+0x144>)
 8001b42:	f043 0310 	orr.w	r3, r3, #16
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b48      	ldr	r3, [pc, #288]	; (8001c6c <MX_GPIO_Init+0x144>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b54:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <MX_GPIO_Init+0x144>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	4a44      	ldr	r2, [pc, #272]	; (8001c6c <MX_GPIO_Init+0x144>)
 8001b5a:	f043 0320 	orr.w	r3, r3, #32
 8001b5e:	6193      	str	r3, [r2, #24]
 8001b60:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <MX_GPIO_Init+0x144>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <MX_GPIO_Init+0x144>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a3e      	ldr	r2, [pc, #248]	; (8001c6c <MX_GPIO_Init+0x144>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <MX_GPIO_Init+0x144>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b84:	4b39      	ldr	r3, [pc, #228]	; (8001c6c <MX_GPIO_Init+0x144>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a38      	ldr	r2, [pc, #224]	; (8001c6c <MX_GPIO_Init+0x144>)
 8001b8a:	f043 0308 	orr.w	r3, r3, #8
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <MX_GPIO_Init+0x144>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_DACS_Pin|LDAC_Pin, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001ba2:	4833      	ldr	r0, [pc, #204]	; (8001c70 <MX_GPIO_Init+0x148>)
 8001ba4:	f001 f959 	bl	8002e5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin, GPIO_PIN_RESET);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	211e      	movs	r1, #30
 8001bac:	4831      	ldr	r0, [pc, #196]	; (8001c74 <MX_GPIO_Init+0x14c>)
 8001bae:	f001 f954 	bl	8002e5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f24f 4127 	movw	r1, #62503	; 0xf427
 8001bb8:	482f      	ldr	r0, [pc, #188]	; (8001c78 <MX_GPIO_Init+0x150>)
 8001bba:	f001 f94e 	bl	8002e5a <HAL_GPIO_WritePin>
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SPI1_DACS_Pin LDAC_Pin */
  GPIO_InitStruct.Pin = SPI1_DACS_Pin|LDAC_Pin;
 8001bbe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4826      	ldr	r0, [pc, #152]	; (8001c70 <MX_GPIO_Init+0x148>)
 8001bd8:	f000 ffa4 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : VselC0_Pin VselC1_Pin PROGB_Pin SPI1_FPGAS_Pin */
  GPIO_InitStruct.Pin = VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin;
 8001bdc:	231e      	movs	r3, #30
 8001bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4820      	ldr	r0, [pc, #128]	; (8001c74 <MX_GPIO_Init+0x14c>)
 8001bf4:	f000 ff96 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : VselB1_Pin VselB0_Pin VselA1_Pin VselA0_Pin
                           MODE_Pin M2_Pin M1_Pin M0_Pin
                           DIR_Pin */
  GPIO_InitStruct.Pin = VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 8001bf8:	f24f 4327 	movw	r3, #62503	; 0xf427
 8001bfc:	613b      	str	r3, [r7, #16]
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4819      	ldr	r0, [pc, #100]	; (8001c78 <MX_GPIO_Init+0x150>)
 8001c12:	f000 ff87 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : FPGA_IRQ_Pin USB_detect_Pin */
  GPIO_InitStruct.Pin = FPGA_IRQ_Pin|USB_detect_Pin;
 8001c16:	f640 0308 	movw	r3, #2056	; 0x808
 8001c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <MX_GPIO_Init+0x154>)
 8001c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4813      	ldr	r0, [pc, #76]	; (8001c78 <MX_GPIO_Init+0x150>)
 8001c2c:	f000 ff7a 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : DONE_Pin INITB_Pin */
  GPIO_InitStruct.Pin = DONE_Pin|INITB_Pin;
 8001c30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	4619      	mov	r1, r3
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <MX_GPIO_Init+0x14c>)
 8001c46:	f000 ff6d 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_IRQ_Pin */
  GPIO_InitStruct.Pin = UI_IRQ_Pin;
 8001c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <MX_GPIO_Init+0x154>)
 8001c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UI_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_GPIO_Init+0x14c>)
 8001c60:	f000 ff60 	bl	8002b24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c64:	bf00      	nop
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40010800 	.word	0x40010800
 8001c78:	40010c00 	.word	0x40010c00
 8001c7c:	10110000 	.word	0x10110000

08001c80 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
	 SCPI_EXECUTE();
 8001c8c:	f005 fd84 	bl	8007798 <SCPI_EXECUTE>
	 RS485_Transmit(TXbuff);
 8001c90:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <HAL_UARTEx_RxEventCallback+0x28>)
 8001c92:	f005 fae1 	bl	8007258 <RS485_Transmit>
	 HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 8001c96:	227d      	movs	r2, #125	; 0x7d
 8001c98:	4904      	ldr	r1, [pc, #16]	; (8001cac <HAL_UARTEx_RxEventCallback+0x2c>)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <HAL_UARTEx_RxEventCallback+0x30>)
 8001c9c:	f003 fc6d 	bl	800557a <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200003f0 	.word	0x200003f0
 8001cac:	20000470 	.word	0x20000470
 8001cb0:	20000330 	.word	0x20000330

08001cb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cca:	b672      	cpsid	i
}
 8001ccc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cce:	e7fe      	b.n	8001cce <Error_Handler+0x8>

08001cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_MspInit+0x5c>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <HAL_MspInit+0x5c>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6193      	str	r3, [r2, #24]
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_MspInit+0x5c>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_MspInit+0x5c>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_MspInit+0x5c>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	61d3      	str	r3, [r2, #28]
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_MspInit+0x5c>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_MspInit+0x60>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_MspInit+0x60>)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010000 	.word	0x40010000

08001d34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <HAL_ADC_MspInit+0x6c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d121      	bne.n	8001d98 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <HAL_ADC_MspInit+0x70>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_ADC_MspInit+0x70>)
 8001d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_ADC_MspInit+0x70>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_ADC_MspInit+0x70>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <HAL_ADC_MspInit+0x70>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_ADC_MspInit+0x70>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Ain_Pin;
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Ain_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	4619      	mov	r1, r3
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <HAL_ADC_MspInit+0x74>)
 8001d94:	f000 fec6 	bl	8002b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40012400 	.word	0x40012400
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010800 	.word	0x40010800

08001dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_I2C_MspInit+0x90>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d132      	bne.n	8001e32 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_I2C_MspInit+0x94>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <HAL_I2C_MspInit+0x94>)
 8001dd2:	f043 0308 	orr.w	r3, r3, #8
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_I2C_MspInit+0x94>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001de4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dea:	2312      	movs	r3, #18
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	4812      	ldr	r0, [pc, #72]	; (8001e44 <HAL_I2C_MspInit+0x98>)
 8001dfa:	f000 fe93 	bl	8002b24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_I2C_MspInit+0x9c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <HAL_I2C_MspInit+0x9c>)
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_I2C_MspInit+0x94>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <HAL_I2C_MspInit+0x94>)
 8001e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_I2C_MspInit+0x94>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40005400 	.word	0x40005400
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010c00 	.word	0x40010c00
 8001e48:	40010000 	.word	0x40010000

08001e4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d12f      	bne.n	8001ecc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001e72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e9c:	23a0      	movs	r3, #160	; 0xa0
 8001e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4619      	mov	r1, r3
 8001eae:	480b      	ldr	r0, [pc, #44]	; (8001edc <HAL_SPI_MspInit+0x90>)
 8001eb0:	f000 fe38 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eb4:	2340      	movs	r3, #64	; 0x40
 8001eb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <HAL_SPI_MspInit+0x90>)
 8001ec8:	f000 fe2c 	bl	8002b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ecc:	bf00      	nop
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40013000 	.word	0x40013000
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010800 	.word	0x40010800

08001ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0d      	ldr	r2, [pc, #52]	; (8001f24 <HAL_TIM_Base_MspInit+0x44>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d113      	bne.n	8001f1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_TIM_Base_MspInit+0x48>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <HAL_TIM_Base_MspInit+0x48>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_TIM_Base_MspInit+0x48>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	201e      	movs	r0, #30
 8001f10:	f000 fd1b 	bl	800294a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f14:	201e      	movs	r0, #30
 8001f16:	f000 fd34 	bl	8002982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40021000 	.word	0x40021000

08001f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <HAL_UART_MspInit+0xb4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d145      	bne.n	8001fd8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_UART_MspInit+0xb8>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <HAL_UART_MspInit+0xb8>)
 8001f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <HAL_UART_MspInit+0xb8>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <HAL_UART_MspInit+0xb8>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_UART_MspInit+0xb8>)
 8001f6a:	f043 0308 	orr.w	r3, r3, #8
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_UART_MspInit+0xb8>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f7c:	2340      	movs	r3, #64	; 0x40
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4816      	ldr	r0, [pc, #88]	; (8001fe8 <HAL_UART_MspInit+0xbc>)
 8001f90:	f000 fdc8 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4810      	ldr	r0, [pc, #64]	; (8001fe8 <HAL_UART_MspInit+0xbc>)
 8001fa8:	f000 fdbc 	bl	8002b24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_UART_MspInit+0xc0>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_UART_MspInit+0xc0>)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2101      	movs	r1, #1
 8001fcc:	2025      	movs	r0, #37	; 0x25
 8001fce:	f000 fcbc 	bl	800294a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fd2:	2025      	movs	r0, #37	; 0x25
 8001fd4:	f000 fcd5 	bl	8002982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	; 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010c00 	.word	0x40010c00
 8001fec:	40010000 	.word	0x40010000

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <NMI_Handler+0x4>

08001ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <MemManage_Handler+0x4>

08002002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <BusFault_Handler+0x4>

08002008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <UsageFault_Handler+0x4>

0800200e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002036:	f000 f949 	bl	80022cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <TIM4_IRQHandler+0x10>)
 8002046:	f002 fe6a 	bl	8004d1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200002e8 	.word	0x200002e8

08002054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <USART1_IRQHandler+0x10>)
 800205a:	f003 faeb 	bl	8005634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000330 	.word	0x20000330

08002068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return 1;
 800206c:	2301      	movs	r3, #1
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <_kill>:

int _kill(int pid, int sig)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002080:	f008 fe02 	bl	800ac88 <__errno>
 8002084:	4603      	mov	r3, r0
 8002086:	2216      	movs	r2, #22
 8002088:	601a      	str	r2, [r3, #0]
  return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_exit>:

void _exit (int status)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800209e:	f04f 31ff 	mov.w	r1, #4294967295
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffe7 	bl	8002076 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020a8:	e7fe      	b.n	80020a8 <_exit+0x12>

080020aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e00a      	b.n	80020d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020bc:	f3af 8000 	nop.w
 80020c0:	4601      	mov	r1, r0
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	60ba      	str	r2, [r7, #8]
 80020c8:	b2ca      	uxtb	r2, r1
 80020ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3301      	adds	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	dbf0      	blt.n	80020bc <_read+0x12>
  }

  return len;
 80020da:	687b      	ldr	r3, [r7, #4]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e009      	b.n	800210a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	60ba      	str	r2, [r7, #8]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3301      	adds	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	429a      	cmp	r2, r3
 8002110:	dbf1      	blt.n	80020f6 <_write+0x12>
  }
  return len;
 8002112:	687b      	ldr	r3, [r7, #4]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <_close>:

int _close(int file)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002142:	605a      	str	r2, [r3, #4]
  return 0;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <_isatty>:

int _isatty(int file)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002158:	2301      	movs	r3, #1
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002184:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <_sbrk+0x5c>)
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <_sbrk+0x60>)
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <_sbrk+0x64>)
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <_sbrk+0x68>)
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d207      	bcs.n	80021bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ac:	f008 fd6c 	bl	800ac88 <__errno>
 80021b0:	4603      	mov	r3, r0
 80021b2:	220c      	movs	r2, #12
 80021b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	e009      	b.n	80021d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <_sbrk+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <_sbrk+0x64>)
 80021cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ce:	68fb      	ldr	r3, [r7, #12]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20005000 	.word	0x20005000
 80021dc:	00000400 	.word	0x00000400
 80021e0:	200003e0 	.word	0x200003e0
 80021e4:	20000700 	.word	0x20000700

080021e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021f4:	f7ff fff8 	bl	80021e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f8:	480b      	ldr	r0, [pc, #44]	; (8002228 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021fa:	490c      	ldr	r1, [pc, #48]	; (800222c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021fc:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002210:	4c09      	ldr	r4, [pc, #36]	; (8002238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800221e:	f008 fd39 	bl	800ac94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002222:	f7ff f9a5 	bl	8001570 <main>
  bx lr
 8002226:	4770      	bx	lr
  ldr r0, =_sdata
 8002228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800222c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002230:	0800f0e4 	.word	0x0800f0e4
  ldr r2, =_sbss
 8002234:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002238:	20000700 	.word	0x20000700

0800223c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800223c:	e7fe      	b.n	800223c <ADC1_2_IRQHandler>
	...

08002240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_Init+0x28>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_Init+0x28>)
 800224a:	f043 0310 	orr.w	r3, r3, #16
 800224e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002250:	2003      	movs	r0, #3
 8002252:	f000 fb6f 	bl	8002934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002256:	200f      	movs	r0, #15
 8002258:	f000 f808 	bl	800226c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800225c:	f7ff fd38 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40022000 	.word	0x40022000

0800226c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_InitTick+0x54>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_InitTick+0x58>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002282:	fbb3 f3f1 	udiv	r3, r3, r1
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fb8b 	bl	80029a6 <HAL_SYSTICK_Config>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e00e      	b.n	80022b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b0f      	cmp	r3, #15
 800229e:	d80a      	bhi.n	80022b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a0:	2200      	movs	r2, #0
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f000 fb4f 	bl	800294a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ac:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <HAL_InitTick+0x5c>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000008 	.word	0x20000008
 80022c8:	20000004 	.word	0x20000004

080022cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_IncTick+0x1c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_IncTick+0x20>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a03      	ldr	r2, [pc, #12]	; (80022ec <HAL_IncTick+0x20>)
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000008 	.word	0x20000008
 80022ec:	200003e4 	.word	0x200003e4

080022f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return uwTick;
 80022f4:	4b02      	ldr	r3, [pc, #8]	; (8002300 <HAL_GetTick+0x10>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	200003e4 	.word	0x200003e4

08002304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff fff0 	bl	80022f0 <HAL_GetTick>
 8002310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d005      	beq.n	800232a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_Delay+0x44>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800232a:	bf00      	nop
 800232c:	f7ff ffe0 	bl	80022f0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	429a      	cmp	r2, r3
 800233a:	d8f7      	bhi.n	800232c <HAL_Delay+0x28>
  {
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000008 	.word	0x20000008

0800234c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0be      	b.n	80024ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	d109      	bne.n	8002390 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff fcd2 	bl	8001d34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f9ab 	bl	80026ec <ADC_ConversionStop_Disable>
 8002396:	4603      	mov	r3, r0
 8002398:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 8099 	bne.w	80024da <HAL_ADC_Init+0x18e>
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 8095 	bne.w	80024da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b8:	f023 0302 	bic.w	r3, r3, #2
 80023bc:	f043 0202 	orr.w	r2, r3, #2
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7b1b      	ldrb	r3, [r3, #12]
 80023d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e4:	d003      	beq.n	80023ee <HAL_ADC_Init+0xa2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d102      	bne.n	80023f4 <HAL_ADC_Init+0xa8>
 80023ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f2:	e000      	b.n	80023f6 <HAL_ADC_Init+0xaa>
 80023f4:	2300      	movs	r3, #0
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7d1b      	ldrb	r3, [r3, #20]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d119      	bne.n	8002438 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7b1b      	ldrb	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d109      	bne.n	8002420 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	3b01      	subs	r3, #1
 8002412:	035a      	lsls	r2, r3, #13
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	e00b      	b.n	8002438 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	f043 0220 	orr.w	r2, r3, #32
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	430a      	orrs	r2, r1
 800244a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <HAL_ADC_Init+0x1a8>)
 8002454:	4013      	ands	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	430b      	orrs	r3, r1
 800245e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002468:	d003      	beq.n	8002472 <HAL_ADC_Init+0x126>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d104      	bne.n	800247c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	3b01      	subs	r3, #1
 8002478:	051b      	lsls	r3, r3, #20
 800247a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	430a      	orrs	r2, r1
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_ADC_Init+0x1ac>)
 8002498:	4013      	ands	r3, r2
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	429a      	cmp	r2, r3
 800249e:	d10b      	bne.n	80024b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	f023 0303 	bic.w	r3, r3, #3
 80024ae:	f043 0201 	orr.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024b6:	e018      	b.n	80024ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	f023 0312 	bic.w	r3, r3, #18
 80024c0:	f043 0210 	orr.w	r2, r3, #16
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	f043 0201 	orr.w	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024d8:	e007      	b.n	80024ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	ffe1f7fd 	.word	0xffe1f7fd
 80024f8:	ff1f0efe 	.word	0xff1f0efe

080024fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x20>
 8002518:	2302      	movs	r3, #2
 800251a:	e0dc      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1da>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b06      	cmp	r3, #6
 800252a:	d81c      	bhi.n	8002566 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	3b05      	subs	r3, #5
 800253e:	221f      	movs	r2, #31
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	4019      	ands	r1, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b05      	subs	r3, #5
 8002558:	fa00 f203 	lsl.w	r2, r0, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	635a      	str	r2, [r3, #52]	; 0x34
 8002564:	e03c      	b.n	80025e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d81c      	bhi.n	80025a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b23      	subs	r3, #35	; 0x23
 8002580:	221f      	movs	r2, #31
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	4019      	ands	r1, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	3b23      	subs	r3, #35	; 0x23
 800259a:	fa00 f203 	lsl.w	r2, r0, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
 80025a6:	e01b      	b.n	80025e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	3b41      	subs	r3, #65	; 0x41
 80025ba:	221f      	movs	r2, #31
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4019      	ands	r1, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b41      	subs	r3, #65	; 0x41
 80025d4:	fa00 f203 	lsl.w	r2, r0, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	d91c      	bls.n	8002622 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68d9      	ldr	r1, [r3, #12]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	3b1e      	subs	r3, #30
 80025fa:	2207      	movs	r2, #7
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	4019      	ands	r1, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6898      	ldr	r0, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	3b1e      	subs	r3, #30
 8002614:	fa00 f203 	lsl.w	r2, r0, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	60da      	str	r2, [r3, #12]
 8002620:	e019      	b.n	8002656 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6919      	ldr	r1, [r3, #16]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	2207      	movs	r2, #7
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	4019      	ands	r1, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6898      	ldr	r0, [r3, #8]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	fa00 f203 	lsl.w	r2, r0, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b10      	cmp	r3, #16
 800265c:	d003      	beq.n	8002666 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002662:	2b11      	cmp	r3, #17
 8002664:	d132      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d125      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d126      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800268c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b10      	cmp	r3, #16
 8002694:	d11a      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a13      	ldr	r2, [pc, #76]	; (80026e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9a      	lsrs	r2, r3, #18
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x1b2>
 80026ba:	e007      	b.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	40012400 	.word	0x40012400
 80026e4:	20000000 	.word	0x20000000
 80026e8:	431bde83 	.word	0x431bde83

080026ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d12e      	bne.n	8002764 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002716:	f7ff fdeb 	bl	80022f0 <HAL_GetTick>
 800271a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800271c:	e01b      	b.n	8002756 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800271e:	f7ff fde7 	bl	80022f0 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d914      	bls.n	8002756 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	d10d      	bne.n	8002756 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	f043 0210 	orr.w	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e007      	b.n	8002766 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d0dc      	beq.n	800271e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800278c:	4013      	ands	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800279c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a2:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	60d3      	str	r3, [r2, #12]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <__NVIC_GetPriorityGrouping+0x18>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	0a1b      	lsrs	r3, r3, #8
 80027c2:	f003 0307 	and.w	r3, r3, #7
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	db0b      	blt.n	80027fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	f003 021f 	and.w	r2, r3, #31
 80027ec:	4906      	ldr	r1, [pc, #24]	; (8002808 <__NVIC_EnableIRQ+0x34>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2001      	movs	r0, #1
 80027f6:	fa00 f202 	lsl.w	r2, r0, r2
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	e000e100 	.word	0xe000e100

0800280c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	2b00      	cmp	r3, #0
 800281e:	db0a      	blt.n	8002836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	490c      	ldr	r1, [pc, #48]	; (8002858 <__NVIC_SetPriority+0x4c>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	0112      	lsls	r2, r2, #4
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	440b      	add	r3, r1
 8002830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002834:	e00a      	b.n	800284c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4908      	ldr	r1, [pc, #32]	; (800285c <__NVIC_SetPriority+0x50>)
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	3b04      	subs	r3, #4
 8002844:	0112      	lsls	r2, r2, #4
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	440b      	add	r3, r1
 800284a:	761a      	strb	r2, [r3, #24]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000e100 	.word	0xe000e100
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f1c3 0307 	rsb	r3, r3, #7
 800287a:	2b04      	cmp	r3, #4
 800287c:	bf28      	it	cs
 800287e:	2304      	movcs	r3, #4
 8002880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3304      	adds	r3, #4
 8002886:	2b06      	cmp	r3, #6
 8002888:	d902      	bls.n	8002890 <NVIC_EncodePriority+0x30>
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3b03      	subs	r3, #3
 800288e:	e000      	b.n	8002892 <NVIC_EncodePriority+0x32>
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002894:	f04f 32ff 	mov.w	r2, #4294967295
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	401a      	ands	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	43d9      	mvns	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	4313      	orrs	r3, r2
         );
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028c8:	f3bf 8f4f 	dsb	sy
}
 80028cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <__NVIC_SystemReset+0x24>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80028d6:	4904      	ldr	r1, [pc, #16]	; (80028e8 <__NVIC_SystemReset+0x24>)
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <__NVIC_SystemReset+0x28>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80028de:	f3bf 8f4f 	dsb	sy
}
 80028e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <__NVIC_SystemReset+0x20>
 80028e8:	e000ed00 	.word	0xe000ed00
 80028ec:	05fa0004 	.word	0x05fa0004

080028f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002900:	d301      	bcc.n	8002906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002902:	2301      	movs	r3, #1
 8002904:	e00f      	b.n	8002926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <SysTick_Config+0x40>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290e:	210f      	movs	r1, #15
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	f7ff ff7a 	bl	800280c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <SysTick_Config+0x40>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291e:	4b04      	ldr	r3, [pc, #16]	; (8002930 <SysTick_Config+0x40>)
 8002920:	2207      	movs	r2, #7
 8002922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	e000e010 	.word	0xe000e010

08002934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ff17 	bl	8002770 <__NVIC_SetPriorityGrouping>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800295c:	f7ff ff2c 	bl	80027b8 <__NVIC_GetPriorityGrouping>
 8002960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	6978      	ldr	r0, [r7, #20]
 8002968:	f7ff ff7a 	bl	8002860 <NVIC_EncodePriority>
 800296c:	4602      	mov	r2, r0
 800296e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff49 	bl	800280c <__NVIC_SetPriority>
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff1f 	bl	80027d4 <__NVIC_EnableIRQ>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80029a2:	f7ff ff8f 	bl	80028c4 <__NVIC_SystemReset>

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff9e 	bl	80028f0 <SysTick_Config>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d008      	beq.n	80029e8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2204      	movs	r2, #4
 80029da:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e020      	b.n	8002a2a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 020e 	bic.w	r2, r2, #14
 80029f6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d005      	beq.n	8002a58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
 8002a56:	e051      	b.n	8002afc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 020e 	bic.w	r2, r2, #14
 8002a66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <HAL_DMA_Abort_IT+0xd4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d029      	beq.n	8002ad6 <HAL_DMA_Abort_IT+0xa2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <HAL_DMA_Abort_IT+0xd8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d022      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0x9e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1f      	ldr	r2, [pc, #124]	; (8002b10 <HAL_DMA_Abort_IT+0xdc>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d01a      	beq.n	8002acc <HAL_DMA_Abort_IT+0x98>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1e      	ldr	r2, [pc, #120]	; (8002b14 <HAL_DMA_Abort_IT+0xe0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d012      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x92>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_DMA_Abort_IT+0xe4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x8c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1b      	ldr	r2, [pc, #108]	; (8002b1c <HAL_DMA_Abort_IT+0xe8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d102      	bne.n	8002aba <HAL_DMA_Abort_IT+0x86>
 8002ab4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ab8:	e00e      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xa4>
 8002aba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002abe:	e00b      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xa4>
 8002ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ac4:	e008      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xa4>
 8002ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aca:	e005      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xa4>
 8002acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ad0:	e002      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xa4>
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	e000      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xa4>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	4a11      	ldr	r2, [pc, #68]	; (8002b20 <HAL_DMA_Abort_IT+0xec>)
 8002ada:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4798      	blx	r3
    } 
  }
  return status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40020008 	.word	0x40020008
 8002b0c:	4002001c 	.word	0x4002001c
 8002b10:	40020030 	.word	0x40020030
 8002b14:	40020044 	.word	0x40020044
 8002b18:	40020058 	.word	0x40020058
 8002b1c:	4002006c 	.word	0x4002006c
 8002b20:	40020000 	.word	0x40020000

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b08b      	sub	sp, #44	; 0x2c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b36:	e169      	b.n	8002e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b38:	2201      	movs	r2, #1
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	f040 8158 	bne.w	8002e06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4a9a      	ldr	r2, [pc, #616]	; (8002dc4 <HAL_GPIO_Init+0x2a0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d05e      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b60:	4a98      	ldr	r2, [pc, #608]	; (8002dc4 <HAL_GPIO_Init+0x2a0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d875      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b66:	4a98      	ldr	r2, [pc, #608]	; (8002dc8 <HAL_GPIO_Init+0x2a4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d058      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b6c:	4a96      	ldr	r2, [pc, #600]	; (8002dc8 <HAL_GPIO_Init+0x2a4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d86f      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b72:	4a96      	ldr	r2, [pc, #600]	; (8002dcc <HAL_GPIO_Init+0x2a8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d052      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b78:	4a94      	ldr	r2, [pc, #592]	; (8002dcc <HAL_GPIO_Init+0x2a8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d869      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b7e:	4a94      	ldr	r2, [pc, #592]	; (8002dd0 <HAL_GPIO_Init+0x2ac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d04c      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b84:	4a92      	ldr	r2, [pc, #584]	; (8002dd0 <HAL_GPIO_Init+0x2ac>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d863      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b8a:	4a92      	ldr	r2, [pc, #584]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d046      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b90:	4a90      	ldr	r2, [pc, #576]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d85d      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b96:	2b12      	cmp	r3, #18
 8002b98:	d82a      	bhi.n	8002bf0 <HAL_GPIO_Init+0xcc>
 8002b9a:	2b12      	cmp	r3, #18
 8002b9c:	d859      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <HAL_GPIO_Init+0x80>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002c1f 	.word	0x08002c1f
 8002ba8:	08002bf9 	.word	0x08002bf9
 8002bac:	08002c0b 	.word	0x08002c0b
 8002bb0:	08002c4d 	.word	0x08002c4d
 8002bb4:	08002c53 	.word	0x08002c53
 8002bb8:	08002c53 	.word	0x08002c53
 8002bbc:	08002c53 	.word	0x08002c53
 8002bc0:	08002c53 	.word	0x08002c53
 8002bc4:	08002c53 	.word	0x08002c53
 8002bc8:	08002c53 	.word	0x08002c53
 8002bcc:	08002c53 	.word	0x08002c53
 8002bd0:	08002c53 	.word	0x08002c53
 8002bd4:	08002c53 	.word	0x08002c53
 8002bd8:	08002c53 	.word	0x08002c53
 8002bdc:	08002c53 	.word	0x08002c53
 8002be0:	08002c53 	.word	0x08002c53
 8002be4:	08002c53 	.word	0x08002c53
 8002be8:	08002c01 	.word	0x08002c01
 8002bec:	08002c15 	.word	0x08002c15
 8002bf0:	4a79      	ldr	r2, [pc, #484]	; (8002dd8 <HAL_GPIO_Init+0x2b4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bf6:	e02c      	b.n	8002c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	623b      	str	r3, [r7, #32]
          break;
 8002bfe:	e029      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	3304      	adds	r3, #4
 8002c06:	623b      	str	r3, [r7, #32]
          break;
 8002c08:	e024      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	3308      	adds	r3, #8
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e01f      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	623b      	str	r3, [r7, #32]
          break;
 8002c1c:	e01a      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c26:	2304      	movs	r3, #4
 8002c28:	623b      	str	r3, [r7, #32]
          break;
 8002c2a:	e013      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c34:	2308      	movs	r3, #8
 8002c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	611a      	str	r2, [r3, #16]
          break;
 8002c3e:	e009      	b.n	8002c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c40:	2308      	movs	r3, #8
 8002c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	615a      	str	r2, [r3, #20]
          break;
 8002c4a:	e003      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	623b      	str	r3, [r7, #32]
          break;
 8002c50:	e000      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          break;
 8002c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2bff      	cmp	r3, #255	; 0xff
 8002c58:	d801      	bhi.n	8002c5e <HAL_GPIO_Init+0x13a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	e001      	b.n	8002c62 <HAL_GPIO_Init+0x13e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2bff      	cmp	r3, #255	; 0xff
 8002c68:	d802      	bhi.n	8002c70 <HAL_GPIO_Init+0x14c>
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	e002      	b.n	8002c76 <HAL_GPIO_Init+0x152>
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	3b08      	subs	r3, #8
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	210f      	movs	r1, #15
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	6a39      	ldr	r1, [r7, #32]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	431a      	orrs	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80b1 	beq.w	8002e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ca4:	4b4d      	ldr	r3, [pc, #308]	; (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	; (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cbc:	4a48      	ldr	r2, [pc, #288]	; (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a40      	ldr	r2, [pc, #256]	; (8002de4 <HAL_GPIO_Init+0x2c0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <HAL_GPIO_Init+0x1ec>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a3f      	ldr	r2, [pc, #252]	; (8002de8 <HAL_GPIO_Init+0x2c4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00d      	beq.n	8002d0c <HAL_GPIO_Init+0x1e8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a3e      	ldr	r2, [pc, #248]	; (8002dec <HAL_GPIO_Init+0x2c8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <HAL_GPIO_Init+0x1e4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a3d      	ldr	r2, [pc, #244]	; (8002df0 <HAL_GPIO_Init+0x2cc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_GPIO_Init+0x1e0>
 8002d00:	2303      	movs	r3, #3
 8002d02:	e006      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d04:	2304      	movs	r3, #4
 8002d06:	e004      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e002      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d10:	2300      	movs	r3, #0
 8002d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d14:	f002 0203 	and.w	r2, r2, #3
 8002d18:	0092      	lsls	r2, r2, #2
 8002d1a:	4093      	lsls	r3, r2
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d22:	492f      	ldr	r1, [pc, #188]	; (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	492c      	ldr	r1, [pc, #176]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]
 8002d48:	e006      	b.n	8002d58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	4928      	ldr	r1, [pc, #160]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d64:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4922      	ldr	r1, [pc, #136]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60cb      	str	r3, [r1, #12]
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	491e      	ldr	r1, [pc, #120]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d8c:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4918      	ldr	r1, [pc, #96]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d9a:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	4914      	ldr	r1, [pc, #80]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d021      	beq.n	8002df8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	490e      	ldr	r1, [pc, #56]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e021      	b.n	8002e06 <HAL_GPIO_Init+0x2e2>
 8002dc2:	bf00      	nop
 8002dc4:	10320000 	.word	0x10320000
 8002dc8:	10310000 	.word	0x10310000
 8002dcc:	10220000 	.word	0x10220000
 8002dd0:	10210000 	.word	0x10210000
 8002dd4:	10120000 	.word	0x10120000
 8002dd8:	10110000 	.word	0x10110000
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40010800 	.word	0x40010800
 8002de8:	40010c00 	.word	0x40010c00
 8002dec:	40011000 	.word	0x40011000
 8002df0:	40011400 	.word	0x40011400
 8002df4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_GPIO_Init+0x304>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	4909      	ldr	r1, [pc, #36]	; (8002e28 <HAL_GPIO_Init+0x304>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	3301      	adds	r3, #1
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	fa22 f303 	lsr.w	r3, r2, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f47f ae8e 	bne.w	8002b38 <HAL_GPIO_Init+0x14>
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	372c      	adds	r7, #44	; 0x2c
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr
 8002e28:	40010400 	.word	0x40010400

08002e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e001      	b.n	8002e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	807b      	strh	r3, [r7, #2]
 8002e66:	4613      	mov	r3, r2
 8002e68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e6a:	787b      	ldrb	r3, [r7, #1]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e70:	887a      	ldrh	r2, [r7, #2]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e76:	e003      	b.n	8002e80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e78:	887b      	ldrh	r3, [r7, #2]
 8002e7a:	041a      	lsls	r2, r3, #16
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	611a      	str	r2, [r3, #16]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e12b      	b.n	80030f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe ff7a 	bl	8001dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2224      	movs	r2, #36	; 0x24
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ede:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ef0:	f001 f842 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8002ef4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4a81      	ldr	r2, [pc, #516]	; (8003100 <HAL_I2C_Init+0x274>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d807      	bhi.n	8002f10 <HAL_I2C_Init+0x84>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a80      	ldr	r2, [pc, #512]	; (8003104 <HAL_I2C_Init+0x278>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	bf94      	ite	ls
 8002f08:	2301      	movls	r3, #1
 8002f0a:	2300      	movhi	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e006      	b.n	8002f1e <HAL_I2C_Init+0x92>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4a7d      	ldr	r2, [pc, #500]	; (8003108 <HAL_I2C_Init+0x27c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	bf94      	ite	ls
 8002f18:	2301      	movls	r3, #1
 8002f1a:	2300      	movhi	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0e7      	b.n	80030f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4a78      	ldr	r2, [pc, #480]	; (800310c <HAL_I2C_Init+0x280>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0c9b      	lsrs	r3, r3, #18
 8002f30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a6a      	ldr	r2, [pc, #424]	; (8003100 <HAL_I2C_Init+0x274>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d802      	bhi.n	8002f60 <HAL_I2C_Init+0xd4>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	e009      	b.n	8002f74 <HAL_I2C_Init+0xe8>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	4a69      	ldr	r2, [pc, #420]	; (8003110 <HAL_I2C_Init+0x284>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	099b      	lsrs	r3, r3, #6
 8002f72:	3301      	adds	r3, #1
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	495c      	ldr	r1, [pc, #368]	; (8003100 <HAL_I2C_Init+0x274>)
 8002f90:	428b      	cmp	r3, r1
 8002f92:	d819      	bhi.n	8002fc8 <HAL_I2C_Init+0x13c>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1e59      	subs	r1, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa2:	1c59      	adds	r1, r3, #1
 8002fa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fa8:	400b      	ands	r3, r1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_I2C_Init+0x138>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1e59      	subs	r1, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc2:	e051      	b.n	8003068 <HAL_I2C_Init+0x1dc>
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	e04f      	b.n	8003068 <HAL_I2C_Init+0x1dc>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d111      	bne.n	8002ff4 <HAL_I2C_Init+0x168>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e58      	subs	r0, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	e012      	b.n	800301a <HAL_I2C_Init+0x18e>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1e58      	subs	r0, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	0099      	lsls	r1, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	fbb0 f3f3 	udiv	r3, r0, r3
 800300a:	3301      	adds	r3, #1
 800300c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_Init+0x196>
 800301e:	2301      	movs	r3, #1
 8003020:	e022      	b.n	8003068 <HAL_I2C_Init+0x1dc>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10e      	bne.n	8003048 <HAL_I2C_Init+0x1bc>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1e58      	subs	r0, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6859      	ldr	r1, [r3, #4]
 8003032:	460b      	mov	r3, r1
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	440b      	add	r3, r1
 8003038:	fbb0 f3f3 	udiv	r3, r0, r3
 800303c:	3301      	adds	r3, #1
 800303e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003046:	e00f      	b.n	8003068 <HAL_I2C_Init+0x1dc>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e58      	subs	r0, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	0099      	lsls	r1, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	fbb0 f3f3 	udiv	r3, r0, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	6809      	ldr	r1, [r1, #0]
 800306c:	4313      	orrs	r3, r2
 800306e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6911      	ldr	r1, [r2, #16]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68d2      	ldr	r2, [r2, #12]
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	430b      	orrs	r3, r1
 80030aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	000186a0 	.word	0x000186a0
 8003104:	001e847f 	.word	0x001e847f
 8003108:	003d08ff 	.word	0x003d08ff
 800310c:	431bde83 	.word	0x431bde83
 8003110:	10624dd3 	.word	0x10624dd3

08003114 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4603      	mov	r3, r0
 8003124:	817b      	strh	r3, [r7, #10]
 8003126:	460b      	mov	r3, r1
 8003128:	813b      	strh	r3, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800312e:	f7ff f8df 	bl	80022f0 <HAL_GetTick>
 8003132:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b20      	cmp	r3, #32
 800313e:	f040 80d9 	bne.w	80032f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	2319      	movs	r3, #25
 8003148:	2201      	movs	r2, #1
 800314a:	496d      	ldr	r1, [pc, #436]	; (8003300 <HAL_I2C_Mem_Write+0x1ec>)
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f971 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
 800315a:	e0cc      	b.n	80032f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_I2C_Mem_Write+0x56>
 8003166:	2302      	movs	r3, #2
 8003168:	e0c5      	b.n	80032f6 <HAL_I2C_Mem_Write+0x1e2>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b01      	cmp	r3, #1
 800317e:	d007      	beq.n	8003190 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800319e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2221      	movs	r2, #33	; 0x21
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2240      	movs	r2, #64	; 0x40
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a3a      	ldr	r2, [r7, #32]
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4a4d      	ldr	r2, [pc, #308]	; (8003304 <HAL_I2C_Mem_Write+0x1f0>)
 80031d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031d2:	88f8      	ldrh	r0, [r7, #6]
 80031d4:	893a      	ldrh	r2, [r7, #8]
 80031d6:	8979      	ldrh	r1, [r7, #10]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	4603      	mov	r3, r0
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f890 	bl	8003308 <I2C_RequestMemoryWrite>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d052      	beq.n	8003294 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e081      	b.n	80032f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fa36 	bl	8003668 <I2C_WaitOnTXEFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b04      	cmp	r3, #4
 8003208:	d107      	bne.n	800321a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003218:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e06b      	b.n	80032f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	781a      	ldrb	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d11b      	bne.n	8003294 <HAL_I2C_Mem_Write+0x180>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	d017      	beq.n	8003294 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1aa      	bne.n	80031f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fa29 	bl	80036f8 <I2C_WaitOnBTFFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d107      	bne.n	80032c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e016      	b.n	80032f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
  }
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	00100002 	.word	0x00100002
 8003304:	ffff0000 	.word	0xffff0000

08003308 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	4608      	mov	r0, r1
 8003312:	4611      	mov	r1, r2
 8003314:	461a      	mov	r2, r3
 8003316:	4603      	mov	r3, r0
 8003318:	817b      	strh	r3, [r7, #10]
 800331a:	460b      	mov	r3, r1
 800331c:	813b      	strh	r3, [r7, #8]
 800331e:	4613      	mov	r3, r2
 8003320:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003330:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	2200      	movs	r2, #0
 800333a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f878 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00d      	beq.n	8003366 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003358:	d103      	bne.n	8003362 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e05f      	b.n	8003426 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003366:	897b      	ldrh	r3, [r7, #10]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003374:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	6a3a      	ldr	r2, [r7, #32]
 800337a:	492d      	ldr	r1, [pc, #180]	; (8003430 <I2C_RequestMemoryWrite+0x128>)
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f8d3 	bl	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e04c      	b.n	8003426 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	6a39      	ldr	r1, [r7, #32]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f95e 	bl	8003668 <I2C_WaitOnTXEFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d107      	bne.n	80033ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e02b      	b.n	8003426 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d105      	bne.n	80033e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033d4:	893b      	ldrh	r3, [r7, #8]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	611a      	str	r2, [r3, #16]
 80033de:	e021      	b.n	8003424 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033e0:	893b      	ldrh	r3, [r7, #8]
 80033e2:	0a1b      	lsrs	r3, r3, #8
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	6a39      	ldr	r1, [r7, #32]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f938 	bl	8003668 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2b04      	cmp	r3, #4
 8003404:	d107      	bne.n	8003416 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003414:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e005      	b.n	8003426 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800341a:	893b      	ldrh	r3, [r7, #8]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	00010002 	.word	0x00010002

08003434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003444:	e048      	b.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d044      	beq.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344e:	f7fe ff4f 	bl	80022f0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d139      	bne.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	0c1b      	lsrs	r3, r3, #16
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10d      	bne.n	800348a <I2C_WaitOnFlagUntilTimeout+0x56>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	43da      	mvns	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	e00c      	b.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	43da      	mvns	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4013      	ands	r3, r2
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d116      	bne.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f043 0220 	orr.w	r2, r3, #32
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e023      	b.n	8003520 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	0c1b      	lsrs	r3, r3, #16
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10d      	bne.n	80034fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	43da      	mvns	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	e00c      	b.n	8003518 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	43da      	mvns	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	429a      	cmp	r2, r3
 800351c:	d093      	beq.n	8003446 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003536:	e071      	b.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003546:	d123      	bne.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003560:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f043 0204 	orr.w	r2, r3, #4
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e067      	b.n	8003660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d041      	beq.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003598:	f7fe feaa 	bl	80022f0 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d302      	bcc.n	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d136      	bne.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d10c      	bne.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4013      	ands	r3, r2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bf14      	ite	ne
 80035ca:	2301      	movne	r3, #1
 80035cc:	2300      	moveq	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	e00b      	b.n	80035ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	43da      	mvns	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4013      	ands	r3, r2
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d016      	beq.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e021      	b.n	8003660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	0c1b      	lsrs	r3, r3, #16
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10c      	bne.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	43da      	mvns	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e00b      	b.n	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4013      	ands	r3, r2
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f af6d 	bne.w	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003674:	e034      	b.n	80036e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f886 	bl	8003788 <I2C_IsAcknowledgeFailed>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e034      	b.n	80036f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d028      	beq.n	80036e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368e:	f7fe fe2f 	bl	80022f0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d11d      	bne.n	80036e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ae:	2b80      	cmp	r3, #128	; 0x80
 80036b0:	d016      	beq.n	80036e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e007      	b.n	80036f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b80      	cmp	r3, #128	; 0x80
 80036ec:	d1c3      	bne.n	8003676 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003704:	e034      	b.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f83e 	bl	8003788 <I2C_IsAcknowledgeFailed>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e034      	b.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d028      	beq.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371e:	f7fe fde7 	bl	80022f0 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	429a      	cmp	r2, r3
 800372c:	d302      	bcc.n	8003734 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d11d      	bne.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b04      	cmp	r3, #4
 8003740:	d016      	beq.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e007      	b.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b04      	cmp	r3, #4
 800377c:	d1c3      	bne.n	8003706 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379e:	d11b      	bne.n	80037d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f043 0204 	orr.w	r2, r3, #4
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e272      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8087 	beq.w	8003912 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003804:	4b92      	ldr	r3, [pc, #584]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b04      	cmp	r3, #4
 800380e:	d00c      	beq.n	800382a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003810:	4b8f      	ldr	r3, [pc, #572]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d112      	bne.n	8003842 <HAL_RCC_OscConfig+0x5e>
 800381c:	4b8c      	ldr	r3, [pc, #560]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003828:	d10b      	bne.n	8003842 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382a:	4b89      	ldr	r3, [pc, #548]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d06c      	beq.n	8003910 <HAL_RCC_OscConfig+0x12c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d168      	bne.n	8003910 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e24c      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x76>
 800384c:	4b80      	ldr	r3, [pc, #512]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a7f      	ldr	r2, [pc, #508]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	e02e      	b.n	80038b8 <HAL_RCC_OscConfig+0xd4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x98>
 8003862:	4b7b      	ldr	r3, [pc, #492]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a7a      	ldr	r2, [pc, #488]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b78      	ldr	r3, [pc, #480]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a77      	ldr	r2, [pc, #476]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e01d      	b.n	80038b8 <HAL_RCC_OscConfig+0xd4>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0xbc>
 8003886:	4b72      	ldr	r3, [pc, #456]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a71      	ldr	r2, [pc, #452]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800388c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b6f      	ldr	r3, [pc, #444]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a6e      	ldr	r2, [pc, #440]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e00b      	b.n	80038b8 <HAL_RCC_OscConfig+0xd4>
 80038a0:	4b6b      	ldr	r3, [pc, #428]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a6a      	ldr	r2, [pc, #424]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b68      	ldr	r3, [pc, #416]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a67      	ldr	r2, [pc, #412]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80038b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fe fd16 	bl	80022f0 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fe fd12 	bl	80022f0 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e200      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b5d      	ldr	r3, [pc, #372]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0xe4>
 80038e6:	e014      	b.n	8003912 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7fe fd02 	bl	80022f0 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fe fcfe 	bl	80022f0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e1ec      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003902:	4b53      	ldr	r3, [pc, #332]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x10c>
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d063      	beq.n	80039e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800391e:	4b4c      	ldr	r3, [pc, #304]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00b      	beq.n	8003942 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800392a:	4b49      	ldr	r3, [pc, #292]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b08      	cmp	r3, #8
 8003934:	d11c      	bne.n	8003970 <HAL_RCC_OscConfig+0x18c>
 8003936:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d116      	bne.n	8003970 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003942:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_RCC_OscConfig+0x176>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d001      	beq.n	800395a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e1c0      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395a:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4939      	ldr	r1, [pc, #228]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	e03a      	b.n	80039e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d020      	beq.n	80039ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003978:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <HAL_RCC_OscConfig+0x270>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fe fcb7 	bl	80022f0 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003986:	f7fe fcb3 	bl	80022f0 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e1a1      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003998:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a4:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4927      	ldr	r1, [pc, #156]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]
 80039b8:	e015      	b.n	80039e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ba:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <HAL_RCC_OscConfig+0x270>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fe fc96 	bl	80022f0 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c8:	f7fe fc92 	bl	80022f0 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e180      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d03a      	beq.n	8003a68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d019      	beq.n	8003a2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <HAL_RCC_OscConfig+0x274>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a00:	f7fe fc76 	bl	80022f0 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a08:	f7fe fc72 	bl	80022f0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e160      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a26:	2001      	movs	r0, #1
 8003a28:	f000 face 	bl	8003fc8 <RCC_Delay>
 8003a2c:	e01c      	b.n	8003a68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <HAL_RCC_OscConfig+0x274>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a34:	f7fe fc5c 	bl	80022f0 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3a:	e00f      	b.n	8003a5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3c:	f7fe fc58 	bl	80022f0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d908      	bls.n	8003a5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e146      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	42420000 	.word	0x42420000
 8003a58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5c:	4b92      	ldr	r3, [pc, #584]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e9      	bne.n	8003a3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80a6 	beq.w	8003bc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a76:	2300      	movs	r3, #0
 8003a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7a:	4b8b      	ldr	r3, [pc, #556]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10d      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	4b88      	ldr	r3, [pc, #544]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4a87      	ldr	r2, [pc, #540]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	61d3      	str	r3, [r2, #28]
 8003a92:	4b85      	ldr	r3, [pc, #532]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa2:	4b82      	ldr	r3, [pc, #520]	; (8003cac <HAL_RCC_OscConfig+0x4c8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aae:	4b7f      	ldr	r3, [pc, #508]	; (8003cac <HAL_RCC_OscConfig+0x4c8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a7e      	ldr	r2, [pc, #504]	; (8003cac <HAL_RCC_OscConfig+0x4c8>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7fe fc19 	bl	80022f0 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fe fc15 	bl	80022f0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b64      	cmp	r3, #100	; 0x64
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e103      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	4b75      	ldr	r3, [pc, #468]	; (8003cac <HAL_RCC_OscConfig+0x4c8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x312>
 8003ae8:	4b6f      	ldr	r3, [pc, #444]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	4a6e      	ldr	r2, [pc, #440]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6213      	str	r3, [r2, #32]
 8003af4:	e02d      	b.n	8003b52 <HAL_RCC_OscConfig+0x36e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x334>
 8003afe:	4b6a      	ldr	r3, [pc, #424]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	4a69      	ldr	r2, [pc, #420]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	6213      	str	r3, [r2, #32]
 8003b0a:	4b67      	ldr	r3, [pc, #412]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	4a66      	ldr	r2, [pc, #408]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	f023 0304 	bic.w	r3, r3, #4
 8003b14:	6213      	str	r3, [r2, #32]
 8003b16:	e01c      	b.n	8003b52 <HAL_RCC_OscConfig+0x36e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b05      	cmp	r3, #5
 8003b1e:	d10c      	bne.n	8003b3a <HAL_RCC_OscConfig+0x356>
 8003b20:	4b61      	ldr	r3, [pc, #388]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4a60      	ldr	r2, [pc, #384]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	f043 0304 	orr.w	r3, r3, #4
 8003b2a:	6213      	str	r3, [r2, #32]
 8003b2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4a5d      	ldr	r2, [pc, #372]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6213      	str	r3, [r2, #32]
 8003b38:	e00b      	b.n	8003b52 <HAL_RCC_OscConfig+0x36e>
 8003b3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4a5a      	ldr	r2, [pc, #360]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	6213      	str	r3, [r2, #32]
 8003b46:	4b58      	ldr	r3, [pc, #352]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4a57      	ldr	r2, [pc, #348]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	f023 0304 	bic.w	r3, r3, #4
 8003b50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d015      	beq.n	8003b86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5a:	f7fe fbc9 	bl	80022f0 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fe fbc5 	bl	80022f0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e0b1      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b78:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ee      	beq.n	8003b62 <HAL_RCC_OscConfig+0x37e>
 8003b84:	e014      	b.n	8003bb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b86:	f7fe fbb3 	bl	80022f0 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fe fbaf 	bl	80022f0 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e09b      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba4:	4b40      	ldr	r3, [pc, #256]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ee      	bne.n	8003b8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d105      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb6:	4b3c      	ldr	r3, [pc, #240]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	4a3b      	ldr	r2, [pc, #236]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8087 	beq.w	8003cda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bcc:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d061      	beq.n	8003c9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d146      	bne.n	8003c6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be0:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <HAL_RCC_OscConfig+0x4cc>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fe fb83 	bl	80022f0 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bee:	f7fe fb7f 	bl	80022f0 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e06d      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c00:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f0      	bne.n	8003bee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d108      	bne.n	8003c28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c16:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	4921      	ldr	r1, [pc, #132]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c28:	4b1f      	ldr	r3, [pc, #124]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a19      	ldr	r1, [r3, #32]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	491b      	ldr	r1, [pc, #108]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c40:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCC_OscConfig+0x4cc>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c46:	f7fe fb53 	bl	80022f0 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fe fb4f 	bl	80022f0 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e03d      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x46a>
 8003c6c:	e035      	b.n	8003cda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_RCC_OscConfig+0x4cc>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fe fb3c 	bl	80022f0 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe fb38 	bl	80022f0 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e026      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x498>
 8003c9a:	e01e      	b.n	8003cda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e019      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_OscConfig+0x500>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d106      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000

08003ce8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0d0      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cfc:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d910      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0a:	4b67      	ldr	r3, [pc, #412]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 0207 	bic.w	r2, r3, #7
 8003d12:	4965      	ldr	r1, [pc, #404]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0b8      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d44:	4b59      	ldr	r3, [pc, #356]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a58      	ldr	r2, [pc, #352]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d5c:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4a52      	ldr	r2, [pc, #328]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b50      	ldr	r3, [pc, #320]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	494d      	ldr	r1, [pc, #308]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d040      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d115      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e07f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d107      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da6:	4b41      	ldr	r3, [pc, #260]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e073      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e06b      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dc6:	4b39      	ldr	r3, [pc, #228]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f023 0203 	bic.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4936      	ldr	r1, [pc, #216]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd8:	f7fe fa8a 	bl	80022f0 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de0:	f7fe fa86 	bl	80022f0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e053      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 020c 	and.w	r2, r3, #12
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d1eb      	bne.n	8003de0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e08:	4b27      	ldr	r3, [pc, #156]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d210      	bcs.n	8003e38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 0207 	bic.w	r2, r3, #7
 8003e1e:	4922      	ldr	r1, [pc, #136]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e032      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4916      	ldr	r1, [pc, #88]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	490e      	ldr	r1, [pc, #56]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e76:	f000 f821 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	490a      	ldr	r1, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e88:	5ccb      	ldrb	r3, [r1, r3]
 8003e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1cc>)
 8003e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_ClockConfig+0x1d0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe f9e8 	bl	800226c <HAL_InitTick>

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40022000 	.word	0x40022000
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	0800e21c 	.word	0x0800e21c
 8003eb4:	20000000 	.word	0x20000000
 8003eb8:	20000004 	.word	0x20000004

08003ebc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ed6:	4b1e      	ldr	r3, [pc, #120]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d002      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x30>
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d003      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eea:	e027      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eee:	613b      	str	r3, [r7, #16]
      break;
 8003ef0:	e027      	b.n	8003f42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	0c9b      	lsrs	r3, r3, #18
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	4a17      	ldr	r2, [pc, #92]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003efc:	5cd3      	ldrb	r3, [r2, r3]
 8003efe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d010      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	0c5b      	lsrs	r3, r3, #17
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f16:	5cd3      	ldrb	r3, [r2, r3]
 8003f18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a0d      	ldr	r2, [pc, #52]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f1e:	fb03 f202 	mul.w	r2, r3, r2
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	e004      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	613b      	str	r3, [r7, #16]
      break;
 8003f3a:	e002      	b.n	8003f42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f3e:	613b      	str	r3, [r7, #16]
      break;
 8003f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f42:	693b      	ldr	r3, [r7, #16]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000
 8003f54:	007a1200 	.word	0x007a1200
 8003f58:	0800e234 	.word	0x0800e234
 8003f5c:	0800e244 	.word	0x0800e244
 8003f60:	003d0900 	.word	0x003d0900

08003f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f68:	4b02      	ldr	r3, [pc, #8]	; (8003f74 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr
 8003f74:	20000000 	.word	0x20000000

08003f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f7c:	f7ff fff2 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4903      	ldr	r1, [pc, #12]	; (8003f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	0800e22c 	.word	0x0800e22c

08003fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fa4:	f7ff ffde 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	0adb      	lsrs	r3, r3, #11
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4903      	ldr	r1, [pc, #12]	; (8003fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	0800e22c 	.word	0x0800e22c

08003fc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <RCC_Delay+0x34>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <RCC_Delay+0x38>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	0a5b      	lsrs	r3, r3, #9
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fe4:	bf00      	nop
  }
  while (Delay --);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	60fa      	str	r2, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f9      	bne.n	8003fe4 <RCC_Delay+0x1c>
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr
 8003ffc:	20000000 	.word	0x20000000
 8004000:	10624dd3 	.word	0x10624dd3

08004004 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d07d      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004020:	2300      	movs	r3, #0
 8004022:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004024:	4b4f      	ldr	r3, [pc, #316]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10d      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004030:	4b4c      	ldr	r3, [pc, #304]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	4a4b      	ldr	r2, [pc, #300]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403a:	61d3      	str	r3, [r2, #28]
 800403c:	4b49      	ldr	r3, [pc, #292]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004048:	2301      	movs	r3, #1
 800404a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	4b46      	ldr	r3, [pc, #280]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d118      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004058:	4b43      	ldr	r3, [pc, #268]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a42      	ldr	r2, [pc, #264]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800405e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004062:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004064:	f7fe f944 	bl	80022f0 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	e008      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406c:	f7fe f940 	bl	80022f0 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	; 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e06d      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b3a      	ldr	r3, [pc, #232]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800408a:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d02e      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d027      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040a8:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040b2:	4b2e      	ldr	r3, [pc, #184]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040b8:	4b2c      	ldr	r3, [pc, #176]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040be:	4a29      	ldr	r2, [pc, #164]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d014      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fe f90f 	bl	80022f0 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fe f90b 	bl	80022f0 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e036      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ee      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4917      	ldr	r1, [pc, #92]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004106:	4313      	orrs	r3, r2
 8004108:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d105      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4a13      	ldr	r2, [pc, #76]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800411a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	490b      	ldr	r1, [pc, #44]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	4313      	orrs	r3, r2
 8004138:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	4904      	ldr	r1, [pc, #16]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
 8004168:	40007000 	.word	0x40007000
 800416c:	42420440 	.word	0x42420440

08004170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e076      	b.n	8004270 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2b00      	cmp	r3, #0
 8004188:	d108      	bne.n	800419c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004192:	d009      	beq.n	80041a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	61da      	str	r2, [r3, #28]
 800419a:	e005      	b.n	80041a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd fe42 	bl	8001e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422c:	ea42 0103 	orr.w	r1, r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	0c1a      	lsrs	r2, r3, #16
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f002 0204 	and.w	r2, r2, #4
 800424e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800425e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_SPI_Transmit+0x22>
 8004296:	2302      	movs	r3, #2
 8004298:	e12d      	b.n	80044f6 <HAL_SPI_Transmit+0x27e>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042a2:	f7fe f825 	bl	80022f0 <HAL_GetTick>
 80042a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042a8:	88fb      	ldrh	r3, [r7, #6]
 80042aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d002      	beq.n	80042be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
 80042ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042bc:	e116      	b.n	80044ec <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_SPI_Transmit+0x52>
 80042c4:	88fb      	ldrh	r3, [r7, #6]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042ce:	e10d      	b.n	80044ec <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2203      	movs	r2, #3
 80042d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	88fa      	ldrh	r2, [r7, #6]
 80042e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	88fa      	ldrh	r2, [r7, #6]
 80042ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004316:	d10f      	bne.n	8004338 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004326:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004336:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d007      	beq.n	8004356 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004354:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435e:	d14f      	bne.n	8004400 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_SPI_Transmit+0xf6>
 8004368:	8afb      	ldrh	r3, [r7, #22]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d142      	bne.n	80043f4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	881a      	ldrh	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	1c9a      	adds	r2, r3, #2
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004392:	e02f      	b.n	80043f4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d112      	bne.n	80043c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	881a      	ldrh	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	1c9a      	adds	r2, r3, #2
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80043c6:	e015      	b.n	80043f4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043c8:	f7fd ff92 	bl	80022f0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d803      	bhi.n	80043e0 <HAL_SPI_Transmit+0x168>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d102      	bne.n	80043e6 <HAL_SPI_Transmit+0x16e>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80043f2:	e07b      	b.n	80044ec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1ca      	bne.n	8004394 <HAL_SPI_Transmit+0x11c>
 80043fe:	e050      	b.n	80044a2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <HAL_SPI_Transmit+0x196>
 8004408:	8afb      	ldrh	r3, [r7, #22]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d144      	bne.n	8004498 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	330c      	adds	r3, #12
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004434:	e030      	b.n	8004498 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b02      	cmp	r3, #2
 8004442:	d113      	bne.n	800446c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	86da      	strh	r2, [r3, #54]	; 0x36
 800446a:	e015      	b.n	8004498 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800446c:	f7fd ff40 	bl	80022f0 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d803      	bhi.n	8004484 <HAL_SPI_Transmit+0x20c>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d102      	bne.n	800448a <HAL_SPI_Transmit+0x212>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004496:	e029      	b.n	80044ec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1c9      	bne.n	8004436 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	6839      	ldr	r1, [r7, #0]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fbcc 	bl	8004c44 <SPI_EndRxTxTransaction>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	e003      	b.n	80044ec <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b088      	sub	sp, #32
 8004502:	af02      	add	r7, sp, #8
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d002      	beq.n	8004524 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800451e:	2302      	movs	r3, #2
 8004520:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004522:	e0fb      	b.n	800471c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452c:	d112      	bne.n	8004554 <HAL_SPI_Receive+0x56>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10e      	bne.n	8004554 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2204      	movs	r2, #4
 800453a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	4613      	mov	r3, r2
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f8ef 	bl	800472e <HAL_SPI_TransmitReceive>
 8004550:	4603      	mov	r3, r0
 8004552:	e0e8      	b.n	8004726 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_SPI_Receive+0x64>
 800455e:	2302      	movs	r3, #2
 8004560:	e0e1      	b.n	8004726 <HAL_SPI_Receive+0x228>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800456a:	f7fd fec1 	bl	80022f0 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_SPI_Receive+0x7e>
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004580:	e0cc      	b.n	800471c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2204      	movs	r2, #4
 8004586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	88fa      	ldrh	r2, [r7, #6]
 800459a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	88fa      	ldrh	r2, [r7, #6]
 80045a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c8:	d10f      	bne.n	80045ea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d007      	beq.n	8004608 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004606:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d16a      	bne.n	80046e6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004610:	e032      	b.n	8004678 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d115      	bne.n	800464c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f103 020c 	add.w	r2, r3, #12
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	87da      	strh	r2, [r3, #62]	; 0x3e
 800464a:	e015      	b.n	8004678 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800464c:	f7fd fe50 	bl	80022f0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d803      	bhi.n	8004664 <HAL_SPI_Receive+0x166>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004662:	d102      	bne.n	800466a <HAL_SPI_Receive+0x16c>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004676:	e051      	b.n	800471c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1c7      	bne.n	8004612 <HAL_SPI_Receive+0x114>
 8004682:	e035      	b.n	80046f0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b01      	cmp	r3, #1
 8004690:	d113      	bne.n	80046ba <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	b292      	uxth	r2, r2
 800469e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046b8:	e015      	b.n	80046e6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ba:	f7fd fe19 	bl	80022f0 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d803      	bhi.n	80046d2 <HAL_SPI_Receive+0x1d4>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d102      	bne.n	80046d8 <HAL_SPI_Receive+0x1da>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80046e4:	e01a      	b.n	800471c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1c9      	bne.n	8004684 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	6839      	ldr	r1, [r7, #0]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 fa53 	bl	8004ba0 <SPI_EndRxTransaction>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	75fb      	strb	r3, [r7, #23]
 8004712:	e003      	b.n	800471c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004724:	7dfb      	ldrb	r3, [r7, #23]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b08c      	sub	sp, #48	; 0x30
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
 800473a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800473c:	2301      	movs	r3, #1
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x26>
 8004750:	2302      	movs	r3, #2
 8004752:	e198      	b.n	8004a86 <HAL_SPI_TransmitReceive+0x358>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800475c:	f7fd fdc8 	bl	80022f0 <HAL_GetTick>
 8004760:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004772:	887b      	ldrh	r3, [r7, #2]
 8004774:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004776:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800477a:	2b01      	cmp	r3, #1
 800477c:	d00f      	beq.n	800479e <HAL_SPI_TransmitReceive+0x70>
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004784:	d107      	bne.n	8004796 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d103      	bne.n	8004796 <HAL_SPI_TransmitReceive+0x68>
 800478e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004792:	2b04      	cmp	r3, #4
 8004794:	d003      	beq.n	800479e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004796:	2302      	movs	r3, #2
 8004798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800479c:	e16d      	b.n	8004a7a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_SPI_TransmitReceive+0x82>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_SPI_TransmitReceive+0x82>
 80047aa:	887b      	ldrh	r3, [r7, #2]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d103      	bne.n	80047b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047b6:	e160      	b.n	8004a7a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d003      	beq.n	80047cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2205      	movs	r2, #5
 80047c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	887a      	ldrh	r2, [r7, #2]
 80047dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	887a      	ldrh	r2, [r7, #2]
 80047e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	887a      	ldrh	r2, [r7, #2]
 80047ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d007      	beq.n	8004820 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800481e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004828:	d17c      	bne.n	8004924 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_SPI_TransmitReceive+0x10a>
 8004832:	8b7b      	ldrh	r3, [r7, #26]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d16a      	bne.n	800490e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	881a      	ldrh	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	1c9a      	adds	r2, r3, #2
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800485c:	e057      	b.n	800490e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b02      	cmp	r3, #2
 800486a:	d11b      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x176>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d016      	beq.n	80048a4 <HAL_SPI_TransmitReceive+0x176>
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d113      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	881a      	ldrh	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	1c9a      	adds	r2, r3, #2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d119      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x1b8>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d014      	beq.n	80048e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	b292      	uxth	r2, r2
 80048c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	1c9a      	adds	r2, r3, #2
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048e2:	2301      	movs	r3, #1
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048e6:	f7fd fd03 	bl	80022f0 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d80b      	bhi.n	800490e <HAL_SPI_TransmitReceive+0x1e0>
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d007      	beq.n	800490e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800490c:	e0b5      	b.n	8004a7a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1a2      	bne.n	800485e <HAL_SPI_TransmitReceive+0x130>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d19d      	bne.n	800485e <HAL_SPI_TransmitReceive+0x130>
 8004922:	e080      	b.n	8004a26 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_SPI_TransmitReceive+0x204>
 800492c:	8b7b      	ldrh	r3, [r7, #26]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d16f      	bne.n	8004a12 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004958:	e05b      	b.n	8004a12 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d11c      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x274>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d017      	beq.n	80049a2 <HAL_SPI_TransmitReceive+0x274>
 8004972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d114      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	7812      	ldrb	r2, [r2, #0]
 8004984:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d119      	bne.n	80049e4 <HAL_SPI_TransmitReceive+0x2b6>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d014      	beq.n	80049e4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049e0:	2301      	movs	r3, #1
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049e4:	f7fd fc84 	bl	80022f0 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d803      	bhi.n	80049fc <HAL_SPI_TransmitReceive+0x2ce>
 80049f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d102      	bne.n	8004a02 <HAL_SPI_TransmitReceive+0x2d4>
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d107      	bne.n	8004a12 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004a10:	e033      	b.n	8004a7a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d19e      	bne.n	800495a <HAL_SPI_TransmitReceive+0x22c>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d199      	bne.n	800495a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f90a 	bl	8004c44 <SPI_EndRxTxTransaction>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d006      	beq.n	8004a44 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a42:	e01a      	b.n	8004a7a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a70:	e003      	b.n	8004a7a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3730      	adds	r7, #48	; 0x30
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004aa0:	f7fd fc26 	bl	80022f0 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	4413      	add	r3, r2
 8004aae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ab0:	f7fd fc1e 	bl	80022f0 <HAL_GetTick>
 8004ab4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ab6:	4b39      	ldr	r3, [pc, #228]	; (8004b9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	015b      	lsls	r3, r3, #5
 8004abc:	0d1b      	lsrs	r3, r3, #20
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	fb02 f303 	mul.w	r3, r2, r3
 8004ac4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ac6:	e054      	b.n	8004b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	d050      	beq.n	8004b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ad0:	f7fd fc0e 	bl	80022f0 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d902      	bls.n	8004ae6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d13d      	bne.n	8004b62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004af4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004afe:	d111      	bne.n	8004b24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b08:	d004      	beq.n	8004b14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b12:	d107      	bne.n	8004b24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2c:	d10f      	bne.n	8004b4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e017      	b.n	8004b92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	bf0c      	ite	eq
 8004b82:	2301      	moveq	r3, #1
 8004b84:	2300      	movne	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d19b      	bne.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3720      	adds	r7, #32
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000000 	.word	0x20000000

08004ba0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb4:	d111      	bne.n	8004bda <SPI_EndRxTransaction+0x3a>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bbe:	d004      	beq.n	8004bca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc8:	d107      	bne.n	8004bda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be2:	d117      	bne.n	8004c14 <SPI_EndRxTransaction+0x74>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bec:	d112      	bne.n	8004c14 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff ff49 	bl	8004a90 <SPI_WaitFlagStateUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01a      	beq.n	8004c3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c08:	f043 0220 	orr.w	r2, r3, #32
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e013      	b.n	8004c3c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2180      	movs	r1, #128	; 0x80
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff ff36 	bl	8004a90 <SPI_WaitFlagStateUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e000      	b.n	8004c3c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2200      	movs	r2, #0
 8004c58:	2180      	movs	r1, #128	; 0x80
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f7ff ff18 	bl	8004a90 <SPI_WaitFlagStateUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6a:	f043 0220 	orr.w	r2, r3, #32
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e000      	b.n	8004c78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e041      	b.n	8004d16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fd f91a 	bl	8001ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f000 fa20 	bl	8005104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d122      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d11b      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f06f 0202 	mvn.w	r2, #2
 8004d4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f9b4 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004d66:	e005      	b.n	8004d74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f9a7 	bl	80050bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f9b6 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d122      	bne.n	8004dce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d11b      	bne.n	8004dce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f06f 0204 	mvn.w	r2, #4
 8004d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f98a 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004dba:	e005      	b.n	8004dc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f97d 	bl	80050bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f98c 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d122      	bne.n	8004e22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d11b      	bne.n	8004e22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f06f 0208 	mvn.w	r2, #8
 8004df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2204      	movs	r2, #4
 8004df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f960 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004e0e:	e005      	b.n	8004e1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f953 	bl	80050bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f962 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d122      	bne.n	8004e76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d11b      	bne.n	8004e76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f06f 0210 	mvn.w	r2, #16
 8004e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f936 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004e62:	e005      	b.n	8004e70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f929 	bl	80050bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f938 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d10e      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d107      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f06f 0201 	mvn.w	r2, #1
 8004e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7fc ff09 	bl	8001cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b80      	cmp	r3, #128	; 0x80
 8004eae:	d10e      	bne.n	8004ece <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b80      	cmp	r3, #128	; 0x80
 8004ebc:	d107      	bne.n	8004ece <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fa7a 	bl	80053c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d10e      	bne.n	8004efa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee6:	2b40      	cmp	r3, #64	; 0x40
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f8fc 	bl	80050f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d10e      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d107      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f06f 0220 	mvn.w	r2, #32
 8004f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fa45 	bl	80053b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_TIM_ConfigClockSource+0x1c>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e0b4      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x186>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2202      	movs	r2, #2
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f70:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f82:	d03e      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0xd4>
 8004f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f88:	f200 8087 	bhi.w	800509a <HAL_TIM_ConfigClockSource+0x16c>
 8004f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f90:	f000 8086 	beq.w	80050a0 <HAL_TIM_ConfigClockSource+0x172>
 8004f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f98:	d87f      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x16c>
 8004f9a:	2b70      	cmp	r3, #112	; 0x70
 8004f9c:	d01a      	beq.n	8004fd4 <HAL_TIM_ConfigClockSource+0xa6>
 8004f9e:	2b70      	cmp	r3, #112	; 0x70
 8004fa0:	d87b      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x16c>
 8004fa2:	2b60      	cmp	r3, #96	; 0x60
 8004fa4:	d050      	beq.n	8005048 <HAL_TIM_ConfigClockSource+0x11a>
 8004fa6:	2b60      	cmp	r3, #96	; 0x60
 8004fa8:	d877      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x16c>
 8004faa:	2b50      	cmp	r3, #80	; 0x50
 8004fac:	d03c      	beq.n	8005028 <HAL_TIM_ConfigClockSource+0xfa>
 8004fae:	2b50      	cmp	r3, #80	; 0x50
 8004fb0:	d873      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x16c>
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d058      	beq.n	8005068 <HAL_TIM_ConfigClockSource+0x13a>
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d86f      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x16c>
 8004fba:	2b30      	cmp	r3, #48	; 0x30
 8004fbc:	d064      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0x15a>
 8004fbe:	2b30      	cmp	r3, #48	; 0x30
 8004fc0:	d86b      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x16c>
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d060      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0x15a>
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d867      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x16c>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d05c      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0x15a>
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d05a      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0x15a>
 8004fd2:	e062      	b.n	800509a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fe4:	f000 f967 	bl	80052b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ff6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	609a      	str	r2, [r3, #8]
      break;
 8005000:	e04f      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005012:	f000 f950 	bl	80052b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005024:	609a      	str	r2, [r3, #8]
      break;
 8005026:	e03c      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005034:	461a      	mov	r2, r3
 8005036:	f000 f8c7 	bl	80051c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2150      	movs	r1, #80	; 0x50
 8005040:	4618      	mov	r0, r3
 8005042:	f000 f91e 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8005046:	e02c      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005054:	461a      	mov	r2, r3
 8005056:	f000 f8e5 	bl	8005224 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2160      	movs	r1, #96	; 0x60
 8005060:	4618      	mov	r0, r3
 8005062:	f000 f90e 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8005066:	e01c      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005074:	461a      	mov	r2, r3
 8005076:	f000 f8a7 	bl	80051c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2140      	movs	r1, #64	; 0x40
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f8fe 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8005086:	e00c      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f000 f8f5 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8005098:	e003      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
      break;
 800509e:	e000      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr

080050ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr

080050f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a29      	ldr	r2, [pc, #164]	; (80051bc <TIM_Base_SetConfig+0xb8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00b      	beq.n	8005134 <TIM_Base_SetConfig+0x30>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005122:	d007      	beq.n	8005134 <TIM_Base_SetConfig+0x30>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a26      	ldr	r2, [pc, #152]	; (80051c0 <TIM_Base_SetConfig+0xbc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_Base_SetConfig+0x30>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a25      	ldr	r2, [pc, #148]	; (80051c4 <TIM_Base_SetConfig+0xc0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d108      	bne.n	8005146 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1c      	ldr	r2, [pc, #112]	; (80051bc <TIM_Base_SetConfig+0xb8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00b      	beq.n	8005166 <TIM_Base_SetConfig+0x62>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005154:	d007      	beq.n	8005166 <TIM_Base_SetConfig+0x62>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <TIM_Base_SetConfig+0xbc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_Base_SetConfig+0x62>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <TIM_Base_SetConfig+0xc0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d108      	bne.n	8005178 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a07      	ldr	r2, [pc, #28]	; (80051bc <TIM_Base_SetConfig+0xb8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d103      	bne.n	80051ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	615a      	str	r2, [r3, #20]
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800

080051c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f023 0201 	bic.w	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f023 030a 	bic.w	r3, r3, #10
 8005204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr

08005224 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f023 0210 	bic.w	r2, r3, #16
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800524e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	031b      	lsls	r3, r3, #12
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005260:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	621a      	str	r2, [r3, #32]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr

08005282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	f043 0307 	orr.w	r3, r3, #7
 80052a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	609a      	str	r2, [r3, #8]
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr

080052b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b087      	sub	sp, #28
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	021a      	lsls	r2, r3, #8
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	431a      	orrs	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4313      	orrs	r3, r2
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	609a      	str	r2, [r3, #8]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005308:	2302      	movs	r3, #2
 800530a:	e046      	b.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005358:	d009      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a12      	ldr	r2, [pc, #72]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a10      	ldr	r2, [pc, #64]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d10c      	bne.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	4313      	orrs	r3, r2
 800537e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800

080053b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr

080053c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e042      	b.n	800546c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fc fd96 	bl	8001f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2224      	movs	r2, #36	; 0x24
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fdfb 	bl	8006014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800542c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800543c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800544c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b20      	cmp	r3, #32
 8005492:	d16d      	bne.n	8005570 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_UART_Transmit+0x2c>
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e066      	b.n	8005572 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2221      	movs	r2, #33	; 0x21
 80054ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054b2:	f7fc ff1d 	bl	80022f0 <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	88fa      	ldrh	r2, [r7, #6]
 80054c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054cc:	d108      	bne.n	80054e0 <HAL_UART_Transmit+0x6c>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	e003      	b.n	80054e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054e8:	e02a      	b.n	8005540 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2180      	movs	r1, #128	; 0x80
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fb4a 	bl	8005b8e <UART_WaitOnFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e036      	b.n	8005572 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10b      	bne.n	8005522 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005518:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	3302      	adds	r3, #2
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	e007      	b.n	8005532 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	781a      	ldrb	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	3301      	adds	r3, #1
 8005530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1cf      	bne.n	80054ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2200      	movs	r2, #0
 8005552:	2140      	movs	r1, #64	; 0x40
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 fb1a 	bl	8005b8e <UART_WaitOnFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e006      	b.n	8005572 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e000      	b.n	8005572 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b08c      	sub	sp, #48	; 0x30
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	4613      	mov	r3, r2
 8005586:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b20      	cmp	r3, #32
 8005592:	d14a      	bne.n	800562a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e043      	b.n	800562c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80055b0:	88fb      	ldrh	r3, [r7, #6]
 80055b2:	461a      	mov	r2, r3
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fb57 	bl	8005c6a <UART_Start_Receive_IT>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80055c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d12c      	bne.n	8005624 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d125      	bne.n	800561e <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	617b      	str	r3, [r7, #20]
   return(result);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f043 0310 	orr.w	r3, r3, #16
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005608:	627a      	str	r2, [r7, #36]	; 0x24
 800560a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6a39      	ldr	r1, [r7, #32]
 800560e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	61fb      	str	r3, [r7, #28]
   return(result);
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e5      	bne.n	80055e8 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800561c:	e002      	b.n	8005624 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005628:	e000      	b.n	800562c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800562a:	2302      	movs	r3, #2
  }
}
 800562c:	4618      	mov	r0, r3
 800562e:	3730      	adds	r7, #48	; 0x30
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b0ba      	sub	sp, #232	; 0xe8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800565a:	2300      	movs	r3, #0
 800565c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005660:	2300      	movs	r3, #0
 8005662:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10f      	bne.n	800569a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800567a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <HAL_UART_IRQHandler+0x66>
 8005686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fbff 	bl	8005e96 <UART_Receive_IT>
      return;
 8005698:	e25b      	b.n	8005b52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800569a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80de 	beq.w	8005860 <HAL_UART_IRQHandler+0x22c>
 80056a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 80d1 	beq.w	8005860 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00b      	beq.n	80056e2 <HAL_UART_IRQHandler+0xae>
 80056ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056da:	f043 0201 	orr.w	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <HAL_UART_IRQHandler+0xd2>
 80056ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fe:	f043 0202 	orr.w	r2, r3, #2
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <HAL_UART_IRQHandler+0xf6>
 8005712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d005      	beq.n	800572a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f043 0204 	orr.w	r2, r3, #4
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800572a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d011      	beq.n	800575a <HAL_UART_IRQHandler+0x126>
 8005736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d105      	bne.n	800574e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005752:	f043 0208 	orr.w	r2, r3, #8
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 81f2 	beq.w	8005b48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_UART_IRQHandler+0x14e>
 8005770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fb8a 	bl	8005e96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	bf14      	ite	ne
 8005790:	2301      	movne	r3, #1
 8005792:	2300      	moveq	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d103      	bne.n	80057ae <HAL_UART_IRQHandler+0x17a>
 80057a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d04f      	beq.n	800584e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fa94 	bl	8005cdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d041      	beq.n	8005846 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3314      	adds	r3, #20
 80057c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3314      	adds	r3, #20
 80057ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1d9      	bne.n	80057c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d013      	beq.n	800583e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581a:	4a7e      	ldr	r2, [pc, #504]	; (8005a14 <HAL_UART_IRQHandler+0x3e0>)
 800581c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005822:	4618      	mov	r0, r3
 8005824:	f7fd f906 	bl	8002a34 <HAL_DMA_Abort_IT>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d016      	beq.n	800585c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005838:	4610      	mov	r0, r2
 800583a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	e00e      	b.n	800585c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f99c 	bl	8005b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005844:	e00a      	b.n	800585c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f998 	bl	8005b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584c:	e006      	b.n	800585c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f994 	bl	8005b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800585a:	e175      	b.n	8005b48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800585c:	bf00      	nop
    return;
 800585e:	e173      	b.n	8005b48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	2b01      	cmp	r3, #1
 8005866:	f040 814f 	bne.w	8005b08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 8148 	beq.w	8005b08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8141 	beq.w	8005b08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005886:	2300      	movs	r3, #0
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80b6 	beq.w	8005a18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8145 	beq.w	8005b4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ca:	429a      	cmp	r2, r3
 80058cc:	f080 813e 	bcs.w	8005b4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b20      	cmp	r3, #32
 80058e0:	f000 8088 	beq.w	80059f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005902:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	330c      	adds	r3, #12
 800590c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005910:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800591c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1d9      	bne.n	80058e4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3314      	adds	r3, #20
 8005936:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3314      	adds	r3, #20
 8005950:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005954:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005958:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800595c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e1      	bne.n	8005930 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3314      	adds	r3, #20
 8005972:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800597c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800597e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005982:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3314      	adds	r3, #20
 800598c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005990:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005992:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005996:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800599e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e3      	bne.n	800596c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	330c      	adds	r3, #12
 80059b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c4:	f023 0310 	bic.w	r3, r3, #16
 80059c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80059d8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e3      	bne.n	80059b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fc ffe5 	bl	80029be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fc f938 	bl	8001c80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a10:	e09c      	b.n	8005b4c <HAL_UART_IRQHandler+0x518>
 8005a12:	bf00      	nop
 8005a14:	08005da1 	.word	0x08005da1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 808e 	beq.w	8005b50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8089 	beq.w	8005b50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	330c      	adds	r3, #12
 8005a44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a62:	647a      	str	r2, [r7, #68]	; 0x44
 8005a64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e3      	bne.n	8005a3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3314      	adds	r3, #20
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	623b      	str	r3, [r7, #32]
   return(result);
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	f023 0301 	bic.w	r3, r3, #1
 8005a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3314      	adds	r3, #20
 8005a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a9a:	633a      	str	r2, [r7, #48]	; 0x30
 8005a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e3      	bne.n	8005a76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0310 	bic.w	r3, r3, #16
 8005ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ae0:	61fa      	str	r2, [r7, #28]
 8005ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae4:	69b9      	ldr	r1, [r7, #24]
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	e841 2300 	strex	r3, r2, [r1]
 8005aec:	617b      	str	r3, [r7, #20]
   return(result);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1e3      	bne.n	8005abc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005afa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7fc f8bd 	bl	8001c80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b06:	e023      	b.n	8005b50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <HAL_UART_IRQHandler+0x4f4>
 8005b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f951 	bl	8005dc8 <UART_Transmit_IT>
    return;
 8005b26:	e014      	b.n	8005b52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00e      	beq.n	8005b52 <HAL_UART_IRQHandler+0x51e>
 8005b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d008      	beq.n	8005b52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f990 	bl	8005e66 <UART_EndTransmit_IT>
    return;
 8005b46:	e004      	b.n	8005b52 <HAL_UART_IRQHandler+0x51e>
    return;
 8005b48:	bf00      	nop
 8005b4a:	e002      	b.n	8005b52 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b4c:	bf00      	nop
 8005b4e:	e000      	b.n	8005b52 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b50:	bf00      	nop
  }
}
 8005b52:	37e8      	adds	r7, #232	; 0xe8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr

08005b6a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr

08005b8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b090      	sub	sp, #64	; 0x40
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9e:	e050      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba6:	d04c      	beq.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d007      	beq.n	8005bbe <UART_WaitOnFlagUntilTimeout+0x30>
 8005bae:	f7fc fb9f 	bl	80022f0 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d241      	bcs.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	330c      	adds	r3, #12
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	330c      	adds	r3, #12
 8005bdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bde:	637a      	str	r2, [r7, #52]	; 0x34
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e5      	bne.n	8005bbe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3314      	adds	r3, #20
 8005bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	613b      	str	r3, [r7, #16]
   return(result);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f023 0301 	bic.w	r3, r3, #1
 8005c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3314      	adds	r3, #20
 8005c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c12:	623a      	str	r2, [r7, #32]
 8005c14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	69f9      	ldr	r1, [r7, #28]
 8005c18:	6a3a      	ldr	r2, [r7, #32]
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e5      	bne.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e00f      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	bf0c      	ite	eq
 8005c52:	2301      	moveq	r3, #1
 8005c54:	2300      	movne	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d09f      	beq.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3740      	adds	r7, #64	; 0x40
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	4613      	mov	r3, r2
 8005c76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	88fa      	ldrh	r2, [r7, #6]
 8005c82:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	88fa      	ldrh	r2, [r7, #6]
 8005c88:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2222      	movs	r2, #34	; 0x22
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0220 	orr.w	r2, r2, #32
 8005cce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b095      	sub	sp, #84	; 0x54
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d04:	643a      	str	r2, [r7, #64]	; 0x40
 8005d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e5      	bne.n	8005ce4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3314      	adds	r3, #20
 8005d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e5      	bne.n	8005d18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d119      	bne.n	8005d88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f023 0310 	bic.w	r3, r3, #16
 8005d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d74:	61ba      	str	r2, [r7, #24]
 8005d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6979      	ldr	r1, [r7, #20]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	613b      	str	r3, [r7, #16]
   return(result);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e5      	bne.n	8005d54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d96:	bf00      	nop
 8005d98:	3754      	adds	r7, #84	; 0x54
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr

08005da0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7ff fede 	bl	8005b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b21      	cmp	r3, #33	; 0x21
 8005dda:	d13e      	bne.n	8005e5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de4:	d114      	bne.n	8005e10 <UART_Transmit_IT+0x48>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d110      	bne.n	8005e10 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	1c9a      	adds	r2, r3, #2
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	621a      	str	r2, [r3, #32]
 8005e0e:	e008      	b.n	8005e22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	1c59      	adds	r1, r3, #1
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6211      	str	r1, [r2, #32]
 8005e1a:	781a      	ldrb	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10f      	bne.n	8005e56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e000      	b.n	8005e5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e5a:	2302      	movs	r3, #2
  }
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr

08005e66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b082      	sub	sp, #8
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff fe66 	bl	8005b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b08c      	sub	sp, #48	; 0x30
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b22      	cmp	r3, #34	; 0x22
 8005ea8:	f040 80ae 	bne.w	8006008 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb4:	d117      	bne.n	8005ee6 <UART_Receive_IT+0x50>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d113      	bne.n	8005ee6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	1c9a      	adds	r2, r3, #2
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ee4:	e026      	b.n	8005f34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005eec:	2300      	movs	r3, #0
 8005eee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef8:	d007      	beq.n	8005f0a <UART_Receive_IT+0x74>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <UART_Receive_IT+0x82>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	e008      	b.n	8005f2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	4619      	mov	r1, r3
 8005f42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d15d      	bne.n	8006004 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0220 	bic.w	r2, r2, #32
 8005f56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d135      	bne.n	8005ffa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	330c      	adds	r3, #12
 8005f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	e853 3f00 	ldrex	r3, [r3]
 8005fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f023 0310 	bic.w	r3, r3, #16
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb4:	623a      	str	r2, [r7, #32]
 8005fb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	69f9      	ldr	r1, [r7, #28]
 8005fba:	6a3a      	ldr	r2, [r7, #32]
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e5      	bne.n	8005f94 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0310 	and.w	r3, r3, #16
 8005fd2:	2b10      	cmp	r3, #16
 8005fd4:	d10a      	bne.n	8005fec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fb fe44 	bl	8001c80 <HAL_UARTEx_RxEventCallback>
 8005ff8:	e002      	b.n	8006000 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff fdb5 	bl	8005b6a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	e002      	b.n	800600a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	e000      	b.n	800600a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006008:	2302      	movs	r3, #2
  }
}
 800600a:	4618      	mov	r0, r3
 800600c:	3730      	adds	r7, #48	; 0x30
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800604e:	f023 030c 	bic.w	r3, r3, #12
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6812      	ldr	r2, [r2, #0]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	430b      	orrs	r3, r1
 800605a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a2c      	ldr	r2, [pc, #176]	; (8006128 <UART_SetConfig+0x114>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d103      	bne.n	8006084 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800607c:	f7fd ff90 	bl	8003fa0 <HAL_RCC_GetPCLK2Freq>
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	e002      	b.n	800608a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006084:	f7fd ff78 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8006088:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009a      	lsls	r2, r3, #2
 8006094:	441a      	add	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a0:	4a22      	ldr	r2, [pc, #136]	; (800612c <UART_SetConfig+0x118>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	0119      	lsls	r1, r3, #4
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	009a      	lsls	r2, r3, #2
 80060b4:	441a      	add	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80060c0:	4b1a      	ldr	r3, [pc, #104]	; (800612c <UART_SetConfig+0x118>)
 80060c2:	fba3 0302 	umull	r0, r3, r3, r2
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	2064      	movs	r0, #100	; 0x64
 80060ca:	fb00 f303 	mul.w	r3, r0, r3
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	3332      	adds	r3, #50	; 0x32
 80060d4:	4a15      	ldr	r2, [pc, #84]	; (800612c <UART_SetConfig+0x118>)
 80060d6:	fba2 2303 	umull	r2, r3, r2, r3
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060e0:	4419      	add	r1, r3
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009a      	lsls	r2, r3, #2
 80060ec:	441a      	add	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <UART_SetConfig+0x118>)
 80060fa:	fba3 0302 	umull	r0, r3, r3, r2
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	2064      	movs	r0, #100	; 0x64
 8006102:	fb00 f303 	mul.w	r3, r0, r3
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	3332      	adds	r3, #50	; 0x32
 800610c:	4a07      	ldr	r2, [pc, #28]	; (800612c <UART_SetConfig+0x118>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	f003 020f 	and.w	r2, r3, #15
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	440a      	add	r2, r1
 800611e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40013800 	.word	0x40013800
 800612c:	51eb851f 	.word	0x51eb851f

08006130 <AWG_Load_Waveform>:
#include "math.h"

#define MaxDepth 2048 // max AWG samples

void AWG_Load_Waveform(AWG_struct* AWG, HFDAC_struct* HFDAC)
{
 8006130:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006134:	b088      	sub	sp, #32
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]
	LOLA_enable_features(AWG_EN, 0); // disable AWG
 800613c:	2100      	movs	r1, #0
 800613e:	2002      	movs	r0, #2
 8006140:	f000 fd80 	bl	8006c44 <LOLA_enable_features>

	uint8_t byte[4];
	int16_t data;

	uint16_t depth = trimInt((int)round(DACmaxFreq/AWG->Freq), 1, (MaxDepth-1));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800614a:	a1ad      	add	r1, pc, #692	; (adr r1, 8006400 <AWG_Load_Waveform+0x2d0>)
 800614c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006150:	f7fa fb04 	bl	800075c <__aeabi_ddiv>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	4610      	mov	r0, r2
 800615a:	4619      	mov	r1, r3
 800615c:	f007 f984 	bl	800d468 <round>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4610      	mov	r0, r2
 8006166:	4619      	mov	r1, r3
 8006168:	f7fa fc7e 	bl	8000a68 <__aeabi_d2iz>
 800616c:	4603      	mov	r3, r0
 800616e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006172:	2101      	movs	r1, #1
 8006174:	4618      	mov	r0, r3
 8006176:	f002 fa6c 	bl	8008652 <trimInt>
 800617a:	4603      	mov	r3, r0
 800617c:	837b      	strh	r3, [r7, #26]


	uint16_t DepthPos = trimInt((int)round(depth*AWG->DutyCycle/100), 1, (MaxDepth-1));
 800617e:	8b7b      	ldrh	r3, [r7, #26]
 8006180:	4618      	mov	r0, r3
 8006182:	f7fa fdc3 	bl	8000d0c <__aeabi_i2f>
 8006186:	4602      	mov	r2, r0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f7fa fe10 	bl	8000db4 <__aeabi_fmul>
 8006194:	4603      	mov	r3, r0
 8006196:	499e      	ldr	r1, [pc, #632]	; (8006410 <AWG_Load_Waveform+0x2e0>)
 8006198:	4618      	mov	r0, r3
 800619a:	f7fa febf 	bl	8000f1c <__aeabi_fdiv>
 800619e:	4603      	mov	r3, r0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fa f959 	bl	8000458 <__aeabi_f2d>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	4610      	mov	r0, r2
 80061ac:	4619      	mov	r1, r3
 80061ae:	f007 f95b 	bl	800d468 <round>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4610      	mov	r0, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	f7fa fc55 	bl	8000a68 <__aeabi_d2iz>
 80061be:	4603      	mov	r3, r0
 80061c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80061c4:	2101      	movs	r1, #1
 80061c6:	4618      	mov	r0, r3
 80061c8:	f002 fa43 	bl	8008652 <trimInt>
 80061cc:	4603      	mov	r3, r0
 80061ce:	833b      	strh	r3, [r7, #24]
	uint16_t DepthNeg = trimInt((int)(depth-DepthPos), 1, (MaxDepth-1));
 80061d0:	8b7a      	ldrh	r2, [r7, #26]
 80061d2:	8b3b      	ldrh	r3, [r7, #24]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80061da:	2101      	movs	r1, #1
 80061dc:	4618      	mov	r0, r3
 80061de:	f002 fa38 	bl	8008652 <trimInt>
 80061e2:	4603      	mov	r3, r0
 80061e4:	82fb      	strh	r3, [r7, #22]

	// setting sample count
	byte[0] = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((depth>>8)&0x00ff);
 80061ea:	8b7b      	ldrh	r3, [r7, #26]
 80061ec:	0a1b      	lsrs	r3, r3, #8
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(depth&0x00ff);
 80061f4:	8b7b      	ldrh	r3, [r7, #26]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)AWG_MAXADRESS;
 80061fa:	2306      	movs	r3, #6
 80061fc:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80061fe:	f107 0108 	add.w	r1, r7, #8
 8006202:	2364      	movs	r3, #100	; 0x64
 8006204:	2204      	movs	r2, #4
 8006206:	4883      	ldr	r0, [pc, #524]	; (8006414 <AWG_Load_Waveform+0x2e4>)
 8006208:	f7fe f836 	bl	8004278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 800620c:	2200      	movs	r2, #0
 800620e:	2110      	movs	r1, #16
 8006210:	4881      	ldr	r0, [pc, #516]	; (8006418 <AWG_Load_Waveform+0x2e8>)
 8006212:	f7fc fe22 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006216:	2201      	movs	r2, #1
 8006218:	2110      	movs	r1, #16
 800621a:	487f      	ldr	r0, [pc, #508]	; (8006418 <AWG_Load_Waveform+0x2e8>)
 800621c:	f7fc fe1d 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006220:	2200      	movs	r2, #0
 8006222:	2110      	movs	r1, #16
 8006224:	487c      	ldr	r0, [pc, #496]	; (8006418 <AWG_Load_Waveform+0x2e8>)
 8006226:	f7fc fe18 	bl	8002e5a <HAL_GPIO_WritePin>

	//Setting up clock
	uint32_t D = (uint32_t)round(MCLKfreq/(depth*AWG->Freq));
 800622a:	8b7b      	ldrh	r3, [r7, #26]
 800622c:	4618      	mov	r0, r3
 800622e:	f7fa f901 	bl	8000434 <__aeabi_i2d>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006238:	f7fa f966 	bl	8000508 <__aeabi_dmul>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	a171      	add	r1, pc, #452	; (adr r1, 8006408 <AWG_Load_Waveform+0x2d8>)
 8006242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006246:	f7fa fa89 	bl	800075c <__aeabi_ddiv>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4610      	mov	r0, r2
 8006250:	4619      	mov	r1, r3
 8006252:	f007 f909 	bl	800d468 <round>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4610      	mov	r0, r2
 800625c:	4619      	mov	r1, r3
 800625e:	f7fa fc2b 	bl	8000ab8 <__aeabi_d2uiz>
 8006262:	4603      	mov	r3, r0
 8006264:	613b      	str	r3, [r7, #16]

	data = D;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	83fb      	strh	r3, [r7, #30]

	byte[0] = (uint8_t)((data>>16)&0x00ff);
 800626a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800626e:	141b      	asrs	r3, r3, #16
 8006270:	b2db      	uxtb	r3, r3
 8006272:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((data>>8)&0x00ff);
 8006274:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006278:	121b      	asrs	r3, r3, #8
 800627a:	b21b      	sxth	r3, r3
 800627c:	b2db      	uxtb	r3, r3
 800627e:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(data&0x00ff);
 8006280:	8bfb      	ldrh	r3, [r7, #30]
 8006282:	b2db      	uxtb	r3, r3
 8006284:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)AWG_D;
 8006286:	2302      	movs	r3, #2
 8006288:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 800628a:	f107 0108 	add.w	r1, r7, #8
 800628e:	2364      	movs	r3, #100	; 0x64
 8006290:	2204      	movs	r2, #4
 8006292:	4860      	ldr	r0, [pc, #384]	; (8006414 <AWG_Load_Waveform+0x2e4>)
 8006294:	f7fd fff0 	bl	8004278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006298:	2201      	movs	r2, #1
 800629a:	2110      	movs	r1, #16
 800629c:	485e      	ldr	r0, [pc, #376]	; (8006418 <AWG_Load_Waveform+0x2e8>)
 800629e:	f7fc fddc 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80062a2:	2200      	movs	r2, #0
 80062a4:	2110      	movs	r1, #16
 80062a6:	485c      	ldr	r0, [pc, #368]	; (8006418 <AWG_Load_Waveform+0x2e8>)
 80062a8:	f7fc fdd7 	bl	8002e5a <HAL_GPIO_WritePin>

	// loading waveform

	float relativeDACcode = AWG->Uamp * HFDAC->relativeDACcodeCoef;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f7fa fd7c 	bl	8000db4 <__aeabi_fmul>
 80062bc:	4603      	mov	r3, r0
 80062be:	60fb      	str	r3, [r7, #12]

	for(int16_t addr = 0; addr < depth; addr++)
 80062c0:	2300      	movs	r3, #0
 80062c2:	83bb      	strh	r3, [r7, #28]
 80062c4:	e172      	b.n	80065ac <AWG_Load_Waveform+0x47c>
	{

		switch(AWG->waveform)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	f200 8139 	bhi.w	8006542 <AWG_Load_Waveform+0x412>
 80062d0:	a201      	add	r2, pc, #4	; (adr r2, 80062d8 <AWG_Load_Waveform+0x1a8>)
 80062d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d6:	bf00      	nop
 80062d8:	080062e9 	.word	0x080062e9
 80062dc:	0800637f 	.word	0x0800637f
 80062e0:	080064ab 	.word	0x080064ab
 80062e4:	0800653d 	.word	0x0800653d
		{
			case Square: data = (int16_t)round((addr>=(depth*AWG->DutyCycle/100))*relativeDACcode-(relativeDACcode/2.0)); break;
 80062e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fa fd0d 	bl	8000d0c <__aeabi_i2f>
 80062f2:	4604      	mov	r4, r0
 80062f4:	8b7b      	ldrh	r3, [r7, #26]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fa fd08 	bl	8000d0c <__aeabi_i2f>
 80062fc:	4602      	mov	r2, r0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f7fa fd55 	bl	8000db4 <__aeabi_fmul>
 800630a:	4603      	mov	r3, r0
 800630c:	4940      	ldr	r1, [pc, #256]	; (8006410 <AWG_Load_Waveform+0x2e0>)
 800630e:	4618      	mov	r0, r3
 8006310:	f7fa fe04 	bl	8000f1c <__aeabi_fdiv>
 8006314:	4603      	mov	r3, r0
 8006316:	4619      	mov	r1, r3
 8006318:	4620      	mov	r0, r4
 800631a:	f7fa fefd 	bl	8001118 <__aeabi_fcmpge>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <AWG_Load_Waveform+0x1fa>
 8006324:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006328:	e001      	b.n	800632e <AWG_Load_Waveform+0x1fe>
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	68f9      	ldr	r1, [r7, #12]
 8006330:	4618      	mov	r0, r3
 8006332:	f7fa fd3f 	bl	8000db4 <__aeabi_fmul>
 8006336:	4603      	mov	r3, r0
 8006338:	4618      	mov	r0, r3
 800633a:	f7fa f88d 	bl	8000458 <__aeabi_f2d>
 800633e:	4604      	mov	r4, r0
 8006340:	460d      	mov	r5, r1
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7fa f888 	bl	8000458 <__aeabi_f2d>
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006350:	f7fa fa04 	bl	800075c <__aeabi_ddiv>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4620      	mov	r0, r4
 800635a:	4629      	mov	r1, r5
 800635c:	f7f9 ff1c 	bl	8000198 <__aeabi_dsub>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4610      	mov	r0, r2
 8006366:	4619      	mov	r1, r3
 8006368:	f007 f87e 	bl	800d468 <round>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4610      	mov	r0, r2
 8006372:	4619      	mov	r1, r3
 8006374:	f7fa fb78 	bl	8000a68 <__aeabi_d2iz>
 8006378:	4603      	mov	r3, r0
 800637a:	83fb      	strh	r3, [r7, #30]
 800637c:	e0e1      	b.n	8006542 <AWG_Load_Waveform+0x412>

			case Triangle:	if(addr <= DepthPos) data = (int16_t)round(relativeDACcode*addr/(DepthPos*1.0)-(relativeDACcode/2.0)); // rising edge
 800637e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8006382:	8b3b      	ldrh	r3, [r7, #24]
 8006384:	429a      	cmp	r2, r3
 8006386:	dc49      	bgt.n	800641c <AWG_Load_Waveform+0x2ec>
 8006388:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800638c:	4618      	mov	r0, r3
 800638e:	f7fa fcbd 	bl	8000d0c <__aeabi_i2f>
 8006392:	4603      	mov	r3, r0
 8006394:	68f9      	ldr	r1, [r7, #12]
 8006396:	4618      	mov	r0, r3
 8006398:	f7fa fd0c 	bl	8000db4 <__aeabi_fmul>
 800639c:	4603      	mov	r3, r0
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fa f85a 	bl	8000458 <__aeabi_f2d>
 80063a4:	4604      	mov	r4, r0
 80063a6:	460d      	mov	r5, r1
 80063a8:	8b3b      	ldrh	r3, [r7, #24]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fa f842 	bl	8000434 <__aeabi_i2d>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4620      	mov	r0, r4
 80063b6:	4629      	mov	r1, r5
 80063b8:	f7fa f9d0 	bl	800075c <__aeabi_ddiv>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4614      	mov	r4, r2
 80063c2:	461d      	mov	r5, r3
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7fa f847 	bl	8000458 <__aeabi_f2d>
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063d2:	f7fa f9c3 	bl	800075c <__aeabi_ddiv>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4620      	mov	r0, r4
 80063dc:	4629      	mov	r1, r5
 80063de:	f7f9 fedb 	bl	8000198 <__aeabi_dsub>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4610      	mov	r0, r2
 80063e8:	4619      	mov	r1, r3
 80063ea:	f007 f83d 	bl	800d468 <round>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	f7fa fb37 	bl	8000a68 <__aeabi_d2iz>
 80063fa:	4603      	mov	r3, r0
 80063fc:	83fb      	strh	r3, [r7, #30]
							else data = (int16_t)round(relativeDACcode*(1-(addr-DepthPos)/(DepthNeg*1.0))-(relativeDACcode/2.0)); break; // falling edge
 80063fe:	e0a0      	b.n	8006542 <AWG_Load_Waveform+0x412>
 8006400:	00000000 	.word	0x00000000
 8006404:	417312d0 	.word	0x417312d0
 8006408:	00000000 	.word	0x00000000
 800640c:	41b0b076 	.word	0x41b0b076
 8006410:	42c80000 	.word	0x42c80000
 8006414:	20000290 	.word	0x20000290
 8006418:	40010800 	.word	0x40010800
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f7fa f81b 	bl	8000458 <__aeabi_f2d>
 8006422:	4604      	mov	r4, r0
 8006424:	460d      	mov	r5, r1
 8006426:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800642a:	8b3b      	ldrh	r3, [r7, #24]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	4618      	mov	r0, r3
 8006430:	f7fa f800 	bl	8000434 <__aeabi_i2d>
 8006434:	4680      	mov	r8, r0
 8006436:	4689      	mov	r9, r1
 8006438:	8afb      	ldrh	r3, [r7, #22]
 800643a:	4618      	mov	r0, r3
 800643c:	f7f9 fffa 	bl	8000434 <__aeabi_i2d>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4640      	mov	r0, r8
 8006446:	4649      	mov	r1, r9
 8006448:	f7fa f988 	bl	800075c <__aeabi_ddiv>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	f04f 0000 	mov.w	r0, #0
 8006454:	4960      	ldr	r1, [pc, #384]	; (80065d8 <AWG_Load_Waveform+0x4a8>)
 8006456:	f7f9 fe9f 	bl	8000198 <__aeabi_dsub>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4620      	mov	r0, r4
 8006460:	4629      	mov	r1, r5
 8006462:	f7fa f851 	bl	8000508 <__aeabi_dmul>
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	4614      	mov	r4, r2
 800646c:	461d      	mov	r5, r3
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7f9 fff2 	bl	8000458 <__aeabi_f2d>
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800647c:	f7fa f96e 	bl	800075c <__aeabi_ddiv>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4620      	mov	r0, r4
 8006486:	4629      	mov	r1, r5
 8006488:	f7f9 fe86 	bl	8000198 <__aeabi_dsub>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4610      	mov	r0, r2
 8006492:	4619      	mov	r1, r3
 8006494:	f006 ffe8 	bl	800d468 <round>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4610      	mov	r0, r2
 800649e:	4619      	mov	r1, r3
 80064a0:	f7fa fae2 	bl	8000a68 <__aeabi_d2iz>
 80064a4:	4603      	mov	r3, r0
 80064a6:	83fb      	strh	r3, [r7, #30]
 80064a8:	e04b      	b.n	8006542 <AWG_Load_Waveform+0x412>

			case Sine: data = (int16_t)round(relativeDACcode*(AWG->Uavg+sinf((addr*3.14159*2)/(1.0*depth)))); break;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685c      	ldr	r4, [r3, #4]
 80064ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7f9 ffbe 	bl	8000434 <__aeabi_i2d>
 80064b8:	a345      	add	r3, pc, #276	; (adr r3, 80065d0 <AWG_Load_Waveform+0x4a0>)
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f7fa f823 	bl	8000508 <__aeabi_dmul>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4610      	mov	r0, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	f7f9 fe65 	bl	800019c <__adddf3>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4690      	mov	r8, r2
 80064d8:	4699      	mov	r9, r3
 80064da:	8b7b      	ldrh	r3, [r7, #26]
 80064dc:	4618      	mov	r0, r3
 80064de:	f7f9 ffa9 	bl	8000434 <__aeabi_i2d>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4640      	mov	r0, r8
 80064e8:	4649      	mov	r1, r9
 80064ea:	f7fa f937 	bl	800075c <__aeabi_ddiv>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4610      	mov	r0, r2
 80064f4:	4619      	mov	r1, r3
 80064f6:	f7fa faff 	bl	8000af8 <__aeabi_d2f>
 80064fa:	4603      	mov	r3, r0
 80064fc:	4618      	mov	r0, r3
 80064fe:	f006 ff79 	bl	800d3f4 <sinf>
 8006502:	4603      	mov	r3, r0
 8006504:	4619      	mov	r1, r3
 8006506:	4620      	mov	r0, r4
 8006508:	f7fa fb4c 	bl	8000ba4 <__addsf3>
 800650c:	4603      	mov	r3, r0
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	4618      	mov	r0, r3
 8006512:	f7fa fc4f 	bl	8000db4 <__aeabi_fmul>
 8006516:	4603      	mov	r3, r0
 8006518:	4618      	mov	r0, r3
 800651a:	f7f9 ff9d 	bl	8000458 <__aeabi_f2d>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4610      	mov	r0, r2
 8006524:	4619      	mov	r1, r3
 8006526:	f006 ff9f 	bl	800d468 <round>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4610      	mov	r0, r2
 8006530:	4619      	mov	r1, r3
 8006532:	f7fa fa99 	bl	8000a68 <__aeabi_d2iz>
 8006536:	4603      	mov	r3, r0
 8006538:	83fb      	strh	r3, [r7, #30]
 800653a:	e002      	b.n	8006542 <AWG_Load_Waveform+0x412>

			case Func: data = 0; break;
 800653c:	2300      	movs	r3, #0
 800653e:	83fb      	strh	r3, [r7, #30]
 8006540:	bf00      	nop
		}

		byte[0] = (int8_t)((addr>>4)&0x00ff);
 8006542:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006546:	111b      	asrs	r3, r3, #4
 8006548:	b21b      	sxth	r3, r3
 800654a:	b2db      	uxtb	r3, r3
 800654c:	723b      	strb	r3, [r7, #8]
		byte[1] = (int8_t)(((data>>8)&0x000f)|((addr<<4)&0x00f0));
 800654e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006552:	121b      	asrs	r3, r3, #8
 8006554:	b21b      	sxth	r3, r3
 8006556:	b25b      	sxtb	r3, r3
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	b25a      	sxtb	r2, r3
 800655e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	b25b      	sxtb	r3, r3
 8006566:	f023 030f 	bic.w	r3, r3, #15
 800656a:	b25b      	sxtb	r3, r3
 800656c:	4313      	orrs	r3, r2
 800656e:	b25b      	sxtb	r3, r3
 8006570:	b2db      	uxtb	r3, r3
 8006572:	727b      	strb	r3, [r7, #9]
		byte[2] = (int8_t)(data&0x00ff);
 8006574:	8bfb      	ldrh	r3, [r7, #30]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	72bb      	strb	r3, [r7, #10]
		byte[3] = (int8_t)AWG_DATA;
 800657a:	2305      	movs	r3, #5
 800657c:	72fb      	strb	r3, [r7, #11]

		HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 800657e:	f107 0108 	add.w	r1, r7, #8
 8006582:	2364      	movs	r3, #100	; 0x64
 8006584:	2204      	movs	r2, #4
 8006586:	4815      	ldr	r0, [pc, #84]	; (80065dc <AWG_Load_Waveform+0x4ac>)
 8006588:	f7fd fe76 	bl	8004278 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 800658c:	2201      	movs	r2, #1
 800658e:	2110      	movs	r1, #16
 8006590:	4813      	ldr	r0, [pc, #76]	; (80065e0 <AWG_Load_Waveform+0x4b0>)
 8006592:	f7fc fc62 	bl	8002e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006596:	2200      	movs	r2, #0
 8006598:	2110      	movs	r1, #16
 800659a:	4811      	ldr	r0, [pc, #68]	; (80065e0 <AWG_Load_Waveform+0x4b0>)
 800659c:	f7fc fc5d 	bl	8002e5a <HAL_GPIO_WritePin>
	for(int16_t addr = 0; addr < depth; addr++)
 80065a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	3301      	adds	r3, #1
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	83bb      	strh	r3, [r7, #28]
 80065ac:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80065b0:	8b7b      	ldrh	r3, [r7, #26]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	f6ff ae87 	blt.w	80062c6 <AWG_Load_Waveform+0x196>
	}
		LOLA_enable_features(AWG_EN, 1); // enable AWG
 80065b8:	2101      	movs	r1, #1
 80065ba:	2002      	movs	r0, #2
 80065bc:	f000 fb42 	bl	8006c44 <LOLA_enable_features>
}
 80065c0:	bf00      	nop
 80065c2:	3720      	adds	r7, #32
 80065c4:	46bd      	mov	sp, r7
 80065c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80065ca:	bf00      	nop
 80065cc:	f3af 8000 	nop.w
 80065d0:	f01b866e 	.word	0xf01b866e
 80065d4:	400921f9 	.word	0x400921f9
 80065d8:	3ff00000 	.word	0x3ff00000
 80065dc:	20000290 	.word	0x20000290
 80065e0:	40010800 	.word	0x40010800

080065e4 <DVM_GET_DATA_RAW>:
#include "board.h"
#include "trim.h"


int16_t DVM_GET_DATA_RAW()
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
	int16_t RawValue = 0; // voltage or current
 80065ea:	2300      	movs	r3, #0
 80065ec:	80fb      	strh	r3, [r7, #6]
	uint8_t byte[4];

	byte[0] = (int8_t)0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	703b      	strb	r3, [r7, #0]
	byte[1] = (int8_t)0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	707b      	strb	r3, [r7, #1]
	byte[2] = (int8_t)0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	70bb      	strb	r3, [r7, #2]
	byte[3] = (int8_t)DVM_DATA;
 80065fa:	2314      	movs	r3, #20
 80065fc:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80065fe:	4639      	mov	r1, r7
 8006600:	2364      	movs	r3, #100	; 0x64
 8006602:	2204      	movs	r2, #4
 8006604:	4817      	ldr	r0, [pc, #92]	; (8006664 <DVM_GET_DATA_RAW+0x80>)
 8006606:	f7fd fe37 	bl	8004278 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 800660a:	2200      	movs	r2, #0
 800660c:	2110      	movs	r1, #16
 800660e:	4816      	ldr	r0, [pc, #88]	; (8006668 <DVM_GET_DATA_RAW+0x84>)
 8006610:	f7fc fc23 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006614:	2201      	movs	r2, #1
 8006616:	2110      	movs	r1, #16
 8006618:	4813      	ldr	r0, [pc, #76]	; (8006668 <DVM_GET_DATA_RAW+0x84>)
 800661a:	f7fc fc1e 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 800661e:	2200      	movs	r2, #0
 8006620:	2110      	movs	r1, #16
 8006622:	4811      	ldr	r0, [pc, #68]	; (8006668 <DVM_GET_DATA_RAW+0x84>)
 8006624:	f7fc fc19 	bl	8002e5a <HAL_GPIO_WritePin>

	if (HAL_SPI_Receive(&hspi1, byte, 4, HAL_MAX_DELAY) == HAL_OK) RawValue = to_signed_12bit((int16_t)((byte[2] << 8) | byte[3]));
 8006628:	4639      	mov	r1, r7
 800662a:	f04f 33ff 	mov.w	r3, #4294967295
 800662e:	2204      	movs	r2, #4
 8006630:	480c      	ldr	r0, [pc, #48]	; (8006664 <DVM_GET_DATA_RAW+0x80>)
 8006632:	f7fd ff64 	bl	80044fe <HAL_SPI_Receive>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10c      	bne.n	8006656 <DVM_GET_DATA_RAW+0x72>
 800663c:	78bb      	ldrb	r3, [r7, #2]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	b21a      	sxth	r2, r3
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	b21b      	sxth	r3, r3
 8006646:	4313      	orrs	r3, r2
 8006648:	b21b      	sxth	r3, r3
 800664a:	b29b      	uxth	r3, r3
 800664c:	4618      	mov	r0, r3
 800664e:	f001 ffe5 	bl	800861c <to_signed_12bit>
 8006652:	4603      	mov	r3, r0
 8006654:	80fb      	strh	r3, [r7, #6]

	return RawValue;
 8006656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000290 	.word	0x20000290
 8006668:	40010800 	.word	0x40010800

0800666c <DVM_GET_FILTERED_DATA_RAW>:

int16_t DVM_GET_FILTERED_DATA_RAW(uint16_t NoSamples)
{
 800666c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006670:	b086      	sub	sp, #24
 8006672:	af00      	add	r7, sp, #0
 8006674:	4603      	mov	r3, r0
 8006676:	80fb      	strh	r3, [r7, #6]
	int64_t out = 0;
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9c7 2304 	strd	r2, r3, [r7, #16]

	for(int i = 0; i < NoSamples; i++)
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e011      	b.n	80066ae <DVM_GET_FILTERED_DATA_RAW+0x42>
	{
		out += DVM_GET_DATA_RAW();
 800668a:	f7ff ffab 	bl	80065e4 <DVM_GET_DATA_RAW>
 800668e:	4603      	mov	r3, r0
 8006690:	b21b      	sxth	r3, r3
 8006692:	17da      	asrs	r2, r3, #31
 8006694:	461c      	mov	r4, r3
 8006696:	4615      	mov	r5, r2
 8006698:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800669c:	eb12 0804 	adds.w	r8, r2, r4
 80066a0:	eb43 0905 	adc.w	r9, r3, r5
 80066a4:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for(int i = 0; i < NoSamples; i++)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3301      	adds	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	88fb      	ldrh	r3, [r7, #6]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	dbe9      	blt.n	800668a <DVM_GET_FILTERED_DATA_RAW+0x1e>
	}
	out /= NoSamples;
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	2200      	movs	r2, #0
 80066ba:	469a      	mov	sl, r3
 80066bc:	4693      	mov	fp, r2
 80066be:	4652      	mov	r2, sl
 80066c0:	465b      	mov	r3, fp
 80066c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80066c6:	f7fa fd61 	bl	800118c <__aeabi_ldivmod>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return (int16_t)out;
 80066d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080066e0 <HFADC_CONVERT_RAW2VALUE>:
#include "HFADC.h"
#include "ProgRef.h"
#include "TCA9555.h"

float HFADC_CONVERT_RAW2VALUE(HFADC_struct* HFADC, uint16_t RAW)
{
 80066e0:	b5b0      	push	{r4, r5, r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	807b      	strh	r3, [r7, #2]
	float VALUE = HFADCfrontendGain * HFADC->ADCref * (RAW/(maxValOf11Bit*1.0));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7f9 feb1 	bl	8000458 <__aeabi_f2d>
 80066f6:	a330      	add	r3, pc, #192	; (adr r3, 80067b8 <HFADC_CONVERT_RAW2VALUE+0xd8>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	f7f9 ff04 	bl	8000508 <__aeabi_dmul>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4614      	mov	r4, r2
 8006706:	461d      	mov	r5, r3
 8006708:	887b      	ldrh	r3, [r7, #2]
 800670a:	4618      	mov	r0, r3
 800670c:	f7f9 fe92 	bl	8000434 <__aeabi_i2d>
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	4b2a      	ldr	r3, [pc, #168]	; (80067c0 <HFADC_CONVERT_RAW2VALUE+0xe0>)
 8006716:	f7fa f821 	bl	800075c <__aeabi_ddiv>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4620      	mov	r0, r4
 8006720:	4629      	mov	r1, r5
 8006722:	f7f9 fef1 	bl	8000508 <__aeabi_dmul>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4610      	mov	r0, r2
 800672c:	4619      	mov	r1, r3
 800672e:	f7fa f9e3 	bl	8000af8 <__aeabi_d2f>
 8006732:	4603      	mov	r3, r0
 8006734:	60fb      	str	r3, [r7, #12]

	switch(HFADC->source)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d035      	beq.n	80067aa <HFADC_CONVERT_RAW2VALUE+0xca>
 800673e:	2b02      	cmp	r3, #2
 8006740:	dc2f      	bgt.n	80067a2 <HFADC_CONVERT_RAW2VALUE+0xc2>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <HFADC_CONVERT_RAW2VALUE+0x6c>
 8006746:	2b01      	cmp	r3, #1
 8006748:	d024      	beq.n	8006794 <HFADC_CONVERT_RAW2VALUE+0xb4>
 800674a:	e02a      	b.n	80067a2 <HFADC_CONVERT_RAW2VALUE+0xc2>
	{
		case OUT: if(HFADC->mode == Voltage_input) VALUE = VALUE*HFADCoutVoltageGain - HFADC->OUT_MEASURING_OFFSET;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10f      	bne.n	8006774 <HFADC_CONVERT_RAW2VALUE+0x94>
 8006754:	f04f 0100 	mov.w	r1, #0
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f7fa fb2b 	bl	8000db4 <__aeabi_fmul>
 800675e:	4603      	mov	r3, r0
 8006760:	461a      	mov	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	4619      	mov	r1, r3
 8006768:	4610      	mov	r0, r2
 800676a:	f7fa fa19 	bl	8000ba0 <__aeabi_fsub>
 800676e:	4603      	mov	r3, r0
 8006770:	60fb      	str	r3, [r7, #12]
				  else 						 	   VALUE = VALUE*HFADCoutCurrentGain - HFADC->OUT_MEASURING_OFFSET;
		break;
 8006772:	e01b      	b.n	80067ac <HFADC_CONVERT_RAW2VALUE+0xcc>
				  else 						 	   VALUE = VALUE*HFADCoutCurrentGain - HFADC->OUT_MEASURING_OFFSET;
 8006774:	f04f 0100 	mov.w	r1, #0
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7fa fb1b 	bl	8000db4 <__aeabi_fmul>
 800677e:	4603      	mov	r3, r0
 8006780:	461a      	mov	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7fa fa09 	bl	8000ba0 <__aeabi_fsub>
 800678e:	4603      	mov	r3, r0
 8006790:	60fb      	str	r3, [r7, #12]
		break;
 8006792:	e00b      	b.n	80067ac <HFADC_CONVERT_RAW2VALUE+0xcc>

		case IN: VALUE *= HFADCinGain; break;
 8006794:	490b      	ldr	r1, [pc, #44]	; (80067c4 <HFADC_CONVERT_RAW2VALUE+0xe4>)
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7fa fb0c 	bl	8000db4 <__aeabi_fmul>
 800679c:	4603      	mov	r3, r0
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	e004      	b.n	80067ac <HFADC_CONVERT_RAW2VALUE+0xcc>

		case UIO: VALUE *= HFADCuioGain; break;

		default: VALUE = 0; break;
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e000      	b.n	80067ac <HFADC_CONVERT_RAW2VALUE+0xcc>
		case UIO: VALUE *= HFADCuioGain; break;
 80067aa:	bf00      	nop
	}

	return VALUE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bdb0      	pop	{r4, r5, r7, pc}
 80067b6:	bf00      	nop
 80067b8:	cccccccd 	.word	0xcccccccd
 80067bc:	4008cccc 	.word	0x4008cccc
 80067c0:	40a00000 	.word	0x40a00000
 80067c4:	423c0000 	.word	0x423c0000

080067c8 <HFADC_CONVERT_VALUE2RAW>:

uint16_t HFADC_CONVERT_VALUE2RAW(HFADC_struct* HFADC, float VALUE)
{
 80067c8:	b5b0      	push	{r4, r5, r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
	switch(HFADC->source)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d025      	beq.n	8006826 <HFADC_CONVERT_VALUE2RAW+0x5e>
 80067da:	2b02      	cmp	r3, #2
 80067dc:	dc1f      	bgt.n	800681e <HFADC_CONVERT_VALUE2RAW+0x56>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HFADC_CONVERT_VALUE2RAW+0x20>
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d014      	beq.n	8006810 <HFADC_CONVERT_VALUE2RAW+0x48>
 80067e6:	e01a      	b.n	800681e <HFADC_CONVERT_VALUE2RAW+0x56>
	{
		case OUT: if(HFADC->mode == Voltage_input) VALUE /= HFADCoutVoltageGain;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d107      	bne.n	8006800 <HFADC_CONVERT_VALUE2RAW+0x38>
 80067f0:	f04f 0100 	mov.w	r1, #0
 80067f4:	6838      	ldr	r0, [r7, #0]
 80067f6:	f7fa fb91 	bl	8000f1c <__aeabi_fdiv>
 80067fa:	4603      	mov	r3, r0
 80067fc:	603b      	str	r3, [r7, #0]
				  else 						 	   VALUE /= HFADCoutCurrentGain;
		break;
 80067fe:	e013      	b.n	8006828 <HFADC_CONVERT_VALUE2RAW+0x60>
				  else 						 	   VALUE /= HFADCoutCurrentGain;
 8006800:	f04f 0100 	mov.w	r1, #0
 8006804:	6838      	ldr	r0, [r7, #0]
 8006806:	f7fa fb89 	bl	8000f1c <__aeabi_fdiv>
 800680a:	4603      	mov	r3, r0
 800680c:	603b      	str	r3, [r7, #0]
		break;
 800680e:	e00b      	b.n	8006828 <HFADC_CONVERT_VALUE2RAW+0x60>

		case IN: VALUE /= HFADCinGain; break;
 8006810:	491b      	ldr	r1, [pc, #108]	; (8006880 <HFADC_CONVERT_VALUE2RAW+0xb8>)
 8006812:	6838      	ldr	r0, [r7, #0]
 8006814:	f7fa fb82 	bl	8000f1c <__aeabi_fdiv>
 8006818:	4603      	mov	r3, r0
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	e004      	b.n	8006828 <HFADC_CONVERT_VALUE2RAW+0x60>

		case UIO: VALUE /= HFADCuioGain; break;

		default: VALUE = 0; break;
 800681e:	f04f 0300 	mov.w	r3, #0
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	e000      	b.n	8006828 <HFADC_CONVERT_VALUE2RAW+0x60>
		case UIO: VALUE /= HFADCuioGain; break;
 8006826:	bf00      	nop
	}

	uint16_t RAW = (uint16_t) maxValOf11Bit*VALUE/(HFADCfrontendGain*HFADC->ADCref);
 8006828:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 800682c:	6838      	ldr	r0, [r7, #0]
 800682e:	f7fa fac1 	bl	8000db4 <__aeabi_fmul>
 8006832:	4603      	mov	r3, r0
 8006834:	4618      	mov	r0, r3
 8006836:	f7f9 fe0f 	bl	8000458 <__aeabi_f2d>
 800683a:	4604      	mov	r4, r0
 800683c:	460d      	mov	r5, r1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	4618      	mov	r0, r3
 8006844:	f7f9 fe08 	bl	8000458 <__aeabi_f2d>
 8006848:	a30b      	add	r3, pc, #44	; (adr r3, 8006878 <HFADC_CONVERT_VALUE2RAW+0xb0>)
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	f7f9 fe5b 	bl	8000508 <__aeabi_dmul>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	4620      	mov	r0, r4
 8006858:	4629      	mov	r1, r5
 800685a:	f7f9 ff7f 	bl	800075c <__aeabi_ddiv>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	f7fa f927 	bl	8000ab8 <__aeabi_d2uiz>
 800686a:	4603      	mov	r3, r0
 800686c:	81fb      	strh	r3, [r7, #14]

	return RAW;
 800686e:	89fb      	ldrh	r3, [r7, #14]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bdb0      	pop	{r4, r5, r7, pc}
 8006878:	cccccccd 	.word	0xcccccccd
 800687c:	4008cccc 	.word	0x4008cccc
 8006880:	423c0000 	.word	0x423c0000

08006884 <HFADC_SET_ALL>:

void HFADC_SET_ALL(HFADC_struct* HFADC)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	HFADC_SET_REF(HFADC->ADCref);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	4618      	mov	r0, r3
 8006892:	f7f9 fde1 	bl	8000458 <__aeabi_f2d>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4610      	mov	r0, r2
 800689c:	4619      	mov	r1, r3
 800689e:	f000 f809 	bl	80068b4 <HFADC_SET_REF>
	HFADC_SET_UIO_SOURCE(HFADC->UIO_channel);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	789b      	ldrb	r3, [r3, #2]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 f811 	bl	80068ce <HFADC_SET_UIO_SOURCE>

	return;
 80068ac:	bf00      	nop
}
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HFADC_SET_REF>:

void HFADC_SET_REF(HFADC_struct* HFADC)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
	ADCREF(HFADC->ADCref);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fc05 	bl	80070d0 <ADCREF>
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HFADC_SET_UIO_SOURCE>:
{

}

void HFADC_SET_UIO_SOURCE(HFADC_struct* HFADC)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]

}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	bc80      	pop	{r7}
 80068de:	4770      	bx	lr

080068e0 <HFDAC_SET_MAX_AMPLITUDE>:
#include "HFDAC.h"
#include "main.h"
#include "LOLA.h"

void HFDAC_SET_MAX_AMPLITUDE(HFDAC_struct* HFDAC)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
	DACREF((HFDAC->maxAmplitude)*2/6.4);	// setting DAC Voltage reference
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	4619      	mov	r1, r3
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fa f958 	bl	8000ba4 <__addsf3>
 80068f4:	4603      	mov	r3, r0
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7f9 fdae 	bl	8000458 <__aeabi_f2d>
 80068fc:	a30e      	add	r3, pc, #56	; (adr r3, 8006938 <HFDAC_SET_MAX_AMPLITUDE+0x58>)
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	f7f9 ff2b 	bl	800075c <__aeabi_ddiv>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4610      	mov	r0, r2
 800690c:	4619      	mov	r1, r3
 800690e:	f7fa f8f3 	bl	8000af8 <__aeabi_d2f>
 8006912:	4603      	mov	r3, r0
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fb13 	bl	8006f40 <DACREF>
	HFDAC->relativeDACcodeCoef = 2047/(HFDAC->maxAmplitude); // multiply any number from -1 to 1 and you will get direct code for DAC
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	4619      	mov	r1, r3
 8006920:	4807      	ldr	r0, [pc, #28]	; (8006940 <HFDAC_SET_MAX_AMPLITUDE+0x60>)
 8006922:	f7fa fafb 	bl	8000f1c <__aeabi_fdiv>
 8006926:	4603      	mov	r3, r0
 8006928:	461a      	mov	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60da      	str	r2, [r3, #12]
}
 800692e:	bf00      	nop
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	9999999a 	.word	0x9999999a
 800693c:	40199999 	.word	0x40199999
 8006940:	44ffe000 	.word	0x44ffe000

08006944 <HFDAC_SET_MODE>:

void HFDAC_SET_MODE(HFDAC_MODE mode)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, mode);
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	461a      	mov	r2, r3
 8006952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006956:	4803      	ldr	r0, [pc, #12]	; (8006964 <HFDAC_SET_MODE+0x20>)
 8006958:	f7fc fa7f 	bl	8002e5a <HAL_GPIO_WritePin>
}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	40010c00 	.word	0x40010c00

08006968 <HFDAC_DIRECT_DATA>:

void HFDAC_DIRECT_DATA(HFDAC_struct* HFDAC, float value)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
	uint8_t byte[4];

	int16_t data = value * HFDAC->relativeDACcodeCoef;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	4618      	mov	r0, r3
 800697a:	f7fa fa1b 	bl	8000db4 <__aeabi_fmul>
 800697e:	4603      	mov	r3, r0
 8006980:	4618      	mov	r0, r3
 8006982:	f7fa fbdd 	bl	8001140 <__aeabi_f2iz>
 8006986:	4603      	mov	r3, r0
 8006988:	81fb      	strh	r3, [r7, #14]

	byte[0] = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)((data>>8)&0x000f);
 800698e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006992:	121b      	asrs	r3, r3, #8
 8006994:	b21b      	sxth	r3, r3
 8006996:	b2db      	uxtb	r3, r3
 8006998:	f003 030f 	and.w	r3, r3, #15
 800699c:	b2db      	uxtb	r3, r3
 800699e:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)(data&0x00ff);
 80069a0:	89fb      	ldrh	r3, [r7, #14]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)DAC_DIRECTDATA;
 80069a6:	2304      	movs	r3, #4
 80069a8:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80069aa:	f107 0108 	add.w	r1, r7, #8
 80069ae:	2364      	movs	r3, #100	; 0x64
 80069b0:	2204      	movs	r2, #4
 80069b2:	480b      	ldr	r0, [pc, #44]	; (80069e0 <HFDAC_DIRECT_DATA+0x78>)
 80069b4:	f7fd fc60 	bl	8004278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80069b8:	2200      	movs	r2, #0
 80069ba:	2110      	movs	r1, #16
 80069bc:	4809      	ldr	r0, [pc, #36]	; (80069e4 <HFDAC_DIRECT_DATA+0x7c>)
 80069be:	f7fc fa4c 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80069c2:	2201      	movs	r2, #1
 80069c4:	2110      	movs	r1, #16
 80069c6:	4807      	ldr	r0, [pc, #28]	; (80069e4 <HFDAC_DIRECT_DATA+0x7c>)
 80069c8:	f7fc fa47 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80069cc:	2200      	movs	r2, #0
 80069ce:	2110      	movs	r1, #16
 80069d0:	4804      	ldr	r0, [pc, #16]	; (80069e4 <HFDAC_DIRECT_DATA+0x7c>)
 80069d2:	f7fc fa42 	bl	8002e5a <HAL_GPIO_WritePin>
}
 80069d6:	bf00      	nop
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20000290 	.word	0x20000290
 80069e4:	40010800 	.word	0x40010800

080069e8 <HFDAC_SET_ALL>:

void HFDAC_SET_ALL(HFDAC_struct* HFDAC)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	HFDAC_SET_MAX_AMPLITUDE(HFDAC);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff ff75 	bl	80068e0 <HFDAC_SET_MAX_AMPLITUDE>
	HFDAC_SET_MODE(HFDAC->mode);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff ffa2 	bl	8006944 <HFDAC_SET_MODE>

}
 8006a00:	bf00      	nop
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <LOLA_CFG_SEL>:
#include "board.h"
#include "ProgRef.h"


void LOLA_CFG_SEL(InitType t)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	4603      	mov	r3, r0
 8006a10:	71fb      	strb	r3, [r7, #7]
	switch(t)
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	2b05      	cmp	r3, #5
 8006a16:	f200 8081 	bhi.w	8006b1c <LOLA_CFG_SEL+0x114>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <LOLA_CFG_SEL+0x18>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a39 	.word	0x08006a39
 8006a24:	08006a5f 	.word	0x08006a5f
 8006a28:	08006a85 	.word	0x08006a85
 8006a2c:	08006aab 	.word	0x08006aab
 8006a30:	08006ad1 	.word	0x08006ad1
 8006a34:	08006af7 	.word	0x08006af7
		{
			// reference: http://dangerousprototypes.com/docs/Xilinx_Spartan_3_FPGA_quick_start#Boot_configuration
			case Master_Serial:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a3e:	4843      	ldr	r0, [pc, #268]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006a40:	f7fc fa0b 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 8006a44:	2200      	movs	r2, #0
 8006a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a4a:	4840      	ldr	r0, [pc, #256]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006a4c:	f7fc fa05 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 8006a50:	2200      	movs	r2, #0
 8006a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a56:	483d      	ldr	r0, [pc, #244]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006a58:	f7fc f9ff 	bl	8002e5a <HAL_GPIO_WritePin>
			break;
 8006a5c:	e071      	b.n	8006b42 <LOLA_CFG_SEL+0x13a>

			case SPI_FLASH:	// SPI FLASH
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a64:	4839      	ldr	r0, [pc, #228]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006a66:	f7fc f9f8 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a70:	4836      	ldr	r0, [pc, #216]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006a72:	f7fc f9f2 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8006a76:	2201      	movs	r2, #1
 8006a78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a7c:	4833      	ldr	r0, [pc, #204]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006a7e:	f7fc f9ec 	bl	8002e5a <HAL_GPIO_WritePin>
			break;
 8006a82:	e05e      	b.n	8006b42 <LOLA_CFG_SEL+0x13a>

			case BPI_Up:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 8006a84:	2200      	movs	r2, #0
 8006a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a8a:	4830      	ldr	r0, [pc, #192]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006a8c:	f7fc f9e5 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8006a90:	2201      	movs	r2, #1
 8006a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a96:	482d      	ldr	r0, [pc, #180]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006a98:	f7fc f9df 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006aa2:	482a      	ldr	r0, [pc, #168]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006aa4:	f7fc f9d9 	bl	8002e5a <HAL_GPIO_WritePin>
			break;
 8006aa8:	e04b      	b.n	8006b42 <LOLA_CFG_SEL+0x13a>

			case BPI_Down:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ab0:	4826      	ldr	r0, [pc, #152]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006ab2:	f7fc f9d2 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006abc:	4823      	ldr	r0, [pc, #140]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006abe:	f7fc f9cc 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ac8:	4820      	ldr	r0, [pc, #128]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006aca:	f7fc f9c6 	bl	8002e5a <HAL_GPIO_WritePin>
			break;
 8006ace:	e038      	b.n	8006b42 <LOLA_CFG_SEL+0x13a>

			case Slave_parallel:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ad6:	481d      	ldr	r0, [pc, #116]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006ad8:	f7fc f9bf 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8006adc:	2201      	movs	r2, #1
 8006ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ae2:	481a      	ldr	r0, [pc, #104]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006ae4:	f7fc f9b9 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006aee:	4817      	ldr	r0, [pc, #92]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006af0:	f7fc f9b3 	bl	8002e5a <HAL_GPIO_WritePin>
			break;
 8006af4:	e025      	b.n	8006b42 <LOLA_CFG_SEL+0x13a>

			case Slave_Serial:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8006af6:	2201      	movs	r2, #1
 8006af8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006afc:	4813      	ldr	r0, [pc, #76]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006afe:	f7fc f9ac 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8006b02:	2201      	movs	r2, #1
 8006b04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b08:	4810      	ldr	r0, [pc, #64]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006b0a:	f7fc f9a6 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b14:	480d      	ldr	r0, [pc, #52]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006b16:	f7fc f9a0 	bl	8002e5a <HAL_GPIO_WritePin>
			break;
 8006b1a:	e012      	b.n	8006b42 <LOLA_CFG_SEL+0x13a>

			default: // JTAG on default
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b22:	480a      	ldr	r0, [pc, #40]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006b24:	f7fc f999 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b2e:	4807      	ldr	r0, [pc, #28]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006b30:	f7fc f993 	bl	8002e5a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8006b34:	2201      	movs	r2, #1
 8006b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b3a:	4804      	ldr	r0, [pc, #16]	; (8006b4c <LOLA_CFG_SEL+0x144>)
 8006b3c:	f7fc f98d 	bl	8002e5a <HAL_GPIO_WritePin>
			break;
 8006b40:	bf00      	nop
		}
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	40010c00 	.word	0x40010c00

08006b50 <LOLA_Init>:

uint8_t LOLA_Init(LOLAconfig_struct* LOLAconfig)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
	uint16_t AttemptsLeft;
	uint16_t FID = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	817b      	strh	r3, [r7, #10]
	uint16_t TrialsLeft = LOLAconfig->Trials;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	885b      	ldrh	r3, [r3, #2]
 8006b60:	81bb      	strh	r3, [r7, #12]


	do{
		LOLAconfig->Status = NO_FIRMWARE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
		LOLA_Reset();
 8006b68:	f000 f85c 	bl	8006c24 <LOLA_Reset>
		HAL_Delay(200);
 8006b6c:	20c8      	movs	r0, #200	; 0xc8
 8006b6e:	f7fb fbc9 	bl	8002304 <HAL_Delay>
		LOLA_CFG_SEL(LOLAconfig->Config);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff ff46 	bl	8006a08 <LOLA_CFG_SEL>

		AttemptsLeft = 20;
 8006b7c:	2314      	movs	r3, #20
 8006b7e:	81fb      	strh	r3, [r7, #14]

		if(LOLAconfig->Config == JTAG)	// unlimited timer for manual JTAG configuration
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	785b      	ldrb	r3, [r3, #1]
 8006b84:	2b06      	cmp	r3, #6
 8006b86:	d10f      	bne.n	8006ba8 <LOLA_Init+0x58>
			while(!HAL_GPIO_ReadPin(DONE_GPIO_Port, DONE_Pin)){}
 8006b88:	bf00      	nop
 8006b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b8e:	4824      	ldr	r0, [pc, #144]	; (8006c20 <LOLA_Init+0xd0>)
 8006b90:	f7fc f94c 	bl	8002e2c <HAL_GPIO_ReadPin>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f7      	beq.n	8006b8a <LOLA_Init+0x3a>
 8006b9a:	e010      	b.n	8006bbe <LOLA_Init+0x6e>
		else
			while(!HAL_GPIO_ReadPin(DONE_GPIO_Port, DONE_Pin) && AttemptsLeft > 0)
			{
				AttemptsLeft--;
 8006b9c:	89fb      	ldrh	r3, [r7, #14]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	81fb      	strh	r3, [r7, #14]
				HAL_Delay(100);
 8006ba2:	2064      	movs	r0, #100	; 0x64
 8006ba4:	f7fb fbae 	bl	8002304 <HAL_Delay>
			while(!HAL_GPIO_ReadPin(DONE_GPIO_Port, DONE_Pin) && AttemptsLeft > 0)
 8006ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bac:	481c      	ldr	r0, [pc, #112]	; (8006c20 <LOLA_Init+0xd0>)
 8006bae:	f7fc f93d 	bl	8002e2c <HAL_GPIO_ReadPin>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d102      	bne.n	8006bbe <LOLA_Init+0x6e>
 8006bb8:	89fb      	ldrh	r3, [r7, #14]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1ee      	bne.n	8006b9c <LOLA_Init+0x4c>
			}

		AttemptsLeft = 20;
 8006bbe:	2314      	movs	r3, #20
 8006bc0:	81fb      	strh	r3, [r7, #14]

		do{
			HAL_Delay(100);
 8006bc2:	2064      	movs	r0, #100	; 0x64
 8006bc4:	f7fb fb9e 	bl	8002304 <HAL_Delay>
			FID = LOLA_GET_FIRMWAREID();
 8006bc8:	f000 f89a 	bl	8006d00 <LOLA_GET_FIRMWAREID>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	817b      	strh	r3, [r7, #10]

			if(LOLAconfig->compatibleFirmwareID == FID) LOLAconfig->Status = FIRMWARE_OK;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	889b      	ldrh	r3, [r3, #4]
 8006bd4:	897a      	ldrh	r2, [r7, #10]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d103      	bne.n	8006be2 <LOLA_Init+0x92>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	e002      	b.n	8006be8 <LOLA_Init+0x98>
			else LOLAconfig->Status = INVALID_FIRMWARE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]
		}while(AttemptsLeft > 0 && LOLAconfig->Status != FIRMWARE_OK);
 8006be8:	89fb      	ldrh	r3, [r7, #14]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <LOLA_Init+0xa6>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d1e5      	bne.n	8006bc2 <LOLA_Init+0x72>

		TrialsLeft--;
 8006bf6:	89bb      	ldrh	r3, [r7, #12]
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	81bb      	strh	r3, [r7, #12]

	}while(TrialsLeft > 0 && LOLAconfig->Status != FIRMWARE_OK);
 8006bfc:	89bb      	ldrh	r3, [r7, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <LOLA_Init+0xba>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d1ab      	bne.n	8006b62 <LOLA_Init+0x12>

	if(LOLAconfig->Status == FIRMWARE_OK) return 1;	// sucesfull configuration
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d101      	bne.n	8006c16 <LOLA_Init+0xc6>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <LOLA_Init+0xc8>
	else return 0; // timer ran out
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40010800 	.word	0x40010800

08006c24 <LOLA_Reset>:

void LOLA_Reset()
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 0);
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2108      	movs	r1, #8
 8006c2c:	4804      	ldr	r0, [pc, #16]	; (8006c40 <LOLA_Reset+0x1c>)
 8006c2e:	f7fc f914 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 1);
 8006c32:	2201      	movs	r2, #1
 8006c34:	2108      	movs	r1, #8
 8006c36:	4802      	ldr	r0, [pc, #8]	; (8006c40 <LOLA_Reset+0x1c>)
 8006c38:	f7fc f90f 	bl	8002e5a <HAL_GPIO_WritePin>
}
 8006c3c:	bf00      	nop
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40010800 	.word	0x40010800

08006c44 <LOLA_enable_features>:
}*/

uint16_t enablersReg = 0;

void LOLA_enable_features(LOLAfeatures LOLAfeatures1, uint8_t ENABLE)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	460a      	mov	r2, r1
 8006c4e:	71fb      	strb	r3, [r7, #7]
 8006c50:	4613      	mov	r3, r2
 8006c52:	71bb      	strb	r3, [r7, #6]
	uint16_t enablersMask = 0x0001 << LOLAfeatures1;
 8006c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5e:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	if((uint16_t)LOLAfeatures1 == (uint16_t)ALL_EN) 	enablersMask = 0xffff;
 8006c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d102      	bne.n	8006c74 <LOLA_enable_features+0x30>
 8006c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c72:	81fb      	strh	r3, [r7, #14]

	if(ENABLE) 	enablersReg |= enablersMask;
 8006c74:	79bb      	ldrb	r3, [r7, #6]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <LOLA_enable_features+0x46>
 8006c7a:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <LOLA_enable_features+0xb0>)
 8006c7c:	881a      	ldrh	r2, [r3, #0]
 8006c7e:	89fb      	ldrh	r3, [r7, #14]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	4b1b      	ldr	r3, [pc, #108]	; (8006cf4 <LOLA_enable_features+0xb0>)
 8006c86:	801a      	strh	r2, [r3, #0]
 8006c88:	e00b      	b.n	8006ca2 <LOLA_enable_features+0x5e>
	else 		enablersReg &= ~enablersMask;
 8006c8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c8e:	43db      	mvns	r3, r3
 8006c90:	b21a      	sxth	r2, r3
 8006c92:	4b18      	ldr	r3, [pc, #96]	; (8006cf4 <LOLA_enable_features+0xb0>)
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	b21b      	sxth	r3, r3
 8006c98:	4013      	ands	r3, r2
 8006c9a:	b21b      	sxth	r3, r3
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	4b15      	ldr	r3, [pc, #84]	; (8006cf4 <LOLA_enable_features+0xb0>)
 8006ca0:	801a      	strh	r2, [r3, #0]

	byte[0] = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((enablersReg>>8)&0x00ff);
 8006ca6:	4b13      	ldr	r3, [pc, #76]	; (8006cf4 <LOLA_enable_features+0xb0>)
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	0a1b      	lsrs	r3, r3, #8
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(enablersReg&0x00ff);
 8006cb2:	4b10      	ldr	r3, [pc, #64]	; (8006cf4 <LOLA_enable_features+0xb0>)
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)ENABLERS;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	72fb      	strb	r3, [r7, #11]


	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8006cbe:	f107 0108 	add.w	r1, r7, #8
 8006cc2:	2364      	movs	r3, #100	; 0x64
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	480c      	ldr	r0, [pc, #48]	; (8006cf8 <LOLA_enable_features+0xb4>)
 8006cc8:	f7fd fad6 	bl	8004278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2110      	movs	r1, #16
 8006cd0:	480a      	ldr	r0, [pc, #40]	; (8006cfc <LOLA_enable_features+0xb8>)
 8006cd2:	f7fc f8c2 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	2110      	movs	r1, #16
 8006cda:	4808      	ldr	r0, [pc, #32]	; (8006cfc <LOLA_enable_features+0xb8>)
 8006cdc:	f7fc f8bd 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2110      	movs	r1, #16
 8006ce4:	4805      	ldr	r0, [pc, #20]	; (8006cfc <LOLA_enable_features+0xb8>)
 8006ce6:	f7fc f8b8 	bl	8002e5a <HAL_GPIO_WritePin>
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	200003e8 	.word	0x200003e8
 8006cf8:	20000290 	.word	0x20000290
 8006cfc:	40010800 	.word	0x40010800

08006d00 <LOLA_GET_FIRMWAREID>:

uint16_t LOLA_GET_FIRMWAREID()
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
	uint16_t FirmwareID = 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	byte[0] = (int8_t)0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)FIRMWARE_ID;
 8006d16:	2313      	movs	r3, #19
 8006d18:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8006d1a:	f107 0108 	add.w	r1, r7, #8
 8006d1e:	2364      	movs	r3, #100	; 0x64
 8006d20:	2204      	movs	r2, #4
 8006d22:	4814      	ldr	r0, [pc, #80]	; (8006d74 <LOLA_GET_FIRMWAREID+0x74>)
 8006d24:	f7fd faa8 	bl	8004278 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2110      	movs	r1, #16
 8006d2c:	4812      	ldr	r0, [pc, #72]	; (8006d78 <LOLA_GET_FIRMWAREID+0x78>)
 8006d2e:	f7fc f894 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006d32:	2201      	movs	r2, #1
 8006d34:	2110      	movs	r1, #16
 8006d36:	4810      	ldr	r0, [pc, #64]	; (8006d78 <LOLA_GET_FIRMWAREID+0x78>)
 8006d38:	f7fc f88f 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2110      	movs	r1, #16
 8006d40:	480d      	ldr	r0, [pc, #52]	; (8006d78 <LOLA_GET_FIRMWAREID+0x78>)
 8006d42:	f7fc f88a 	bl	8002e5a <HAL_GPIO_WritePin>

	uint8_t rxBuffer[4];

	 // Receive 4 bytes
	if (HAL_SPI_Receive(&hspi1, rxBuffer, 4, HAL_MAX_DELAY) == HAL_OK) FirmwareID = (rxBuffer[2] << 8) | rxBuffer[3];
 8006d46:	1d39      	adds	r1, r7, #4
 8006d48:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4c:	2204      	movs	r2, #4
 8006d4e:	4809      	ldr	r0, [pc, #36]	; (8006d74 <LOLA_GET_FIRMWAREID+0x74>)
 8006d50:	f7fd fbd5 	bl	80044fe <HAL_SPI_Receive>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d107      	bne.n	8006d6a <LOLA_GET_FIRMWAREID+0x6a>
 8006d5a:	79bb      	ldrb	r3, [r7, #6]
 8006d5c:	021b      	lsls	r3, r3, #8
 8006d5e:	b21a      	sxth	r2, r3
 8006d60:	79fb      	ldrb	r3, [r7, #7]
 8006d62:	b21b      	sxth	r3, r3
 8006d64:	4313      	orrs	r3, r2
 8006d66:	b21b      	sxth	r3, r3
 8006d68:	81fb      	strh	r3, [r7, #14]

	return FirmwareID;
 8006d6a:	89fb      	ldrh	r3, [r7, #14]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000290 	.word	0x20000290
 8006d78:	40010800 	.word	0x40010800

08006d7c <OSC_SET_ALL>:

#include "OSC.h"
#include "main.h"

void OSC_SET_ALL(OSC_struct* OSC, HFADC_struct* HFADC)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
	OSC_SET_PRESCALER(OSC);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f8a8 	bl	8006edc <OSC_SET_PRESCALER>
	OSC_SET_SAMPLES_AFTER_TRIGGER(OSC);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f873 	bl	8006e78 <OSC_SET_SAMPLES_AFTER_TRIGGER>
	OSC_SET_TRIGGER_MODE(OSC);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f844 	bl	8006e20 <OSC_SET_TRIGGER_MODE>
	OSC_SET_TRIGGER_VAL(OSC, HFADC);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f804 	bl	8006da8 <OSC_SET_TRIGGER_VAL>
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <OSC_SET_TRIGGER_VAL>:
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);

}

void OSC_SET_TRIGGER_VAL(OSC_struct* OSC, HFADC_struct* HFADC)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
	uint8_t byte[4];

	int16_t data = HFADC_CONVERT_VALUE2RAW(HFADC, OSC->triggerLevel);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6838      	ldr	r0, [r7, #0]
 8006dba:	f7ff fd05 	bl	80067c8 <HFADC_CONVERT_VALUE2RAW>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	81fb      	strh	r3, [r7, #14]

	byte[0] = (int8_t)0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)((data>>8)&0x000f);
 8006dc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dca:	121b      	asrs	r3, r3, #8
 8006dcc:	b21b      	sxth	r3, r3
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	f003 030f 	and.w	r3, r3, #15
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)(data&0x00ff);
 8006dd8:	89fb      	ldrh	r3, [r7, #14]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)OSC_TRIGLEVEL;
 8006dde:	230b      	movs	r3, #11
 8006de0:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8006de2:	f107 0108 	add.w	r1, r7, #8
 8006de6:	2364      	movs	r3, #100	; 0x64
 8006de8:	2204      	movs	r2, #4
 8006dea:	480b      	ldr	r0, [pc, #44]	; (8006e18 <OSC_SET_TRIGGER_VAL+0x70>)
 8006dec:	f7fd fa44 	bl	8004278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006df0:	2200      	movs	r2, #0
 8006df2:	2110      	movs	r1, #16
 8006df4:	4809      	ldr	r0, [pc, #36]	; (8006e1c <OSC_SET_TRIGGER_VAL+0x74>)
 8006df6:	f7fc f830 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	2110      	movs	r1, #16
 8006dfe:	4807      	ldr	r0, [pc, #28]	; (8006e1c <OSC_SET_TRIGGER_VAL+0x74>)
 8006e00:	f7fc f82b 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006e04:	2200      	movs	r2, #0
 8006e06:	2110      	movs	r1, #16
 8006e08:	4804      	ldr	r0, [pc, #16]	; (8006e1c <OSC_SET_TRIGGER_VAL+0x74>)
 8006e0a:	f7fc f826 	bl	8002e5a <HAL_GPIO_WritePin>
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20000290 	.word	0x20000290
 8006e1c:	40010800 	.word	0x40010800

08006e20 <OSC_SET_TRIGGER_MODE>:

void OSC_SET_TRIGGER_MODE(OSC_struct* OSC)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
	uint8_t byte[4];

	byte[0] = (int8_t)0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	733b      	strb	r3, [r7, #12]
	byte[1] = (int8_t)0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	737b      	strb	r3, [r7, #13]
	byte[2] = (int8_t)OSC->trigMode;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	791b      	ldrb	r3, [r3, #4]
 8006e34:	73bb      	strb	r3, [r7, #14]
	byte[3] = (int8_t)OSC_TRIGLEVEL;
 8006e36:	230b      	movs	r3, #11
 8006e38:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8006e3a:	f107 010c 	add.w	r1, r7, #12
 8006e3e:	2364      	movs	r3, #100	; 0x64
 8006e40:	2204      	movs	r2, #4
 8006e42:	480b      	ldr	r0, [pc, #44]	; (8006e70 <OSC_SET_TRIGGER_MODE+0x50>)
 8006e44:	f7fd fa18 	bl	8004278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2110      	movs	r1, #16
 8006e4c:	4809      	ldr	r0, [pc, #36]	; (8006e74 <OSC_SET_TRIGGER_MODE+0x54>)
 8006e4e:	f7fc f804 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006e52:	2201      	movs	r2, #1
 8006e54:	2110      	movs	r1, #16
 8006e56:	4807      	ldr	r0, [pc, #28]	; (8006e74 <OSC_SET_TRIGGER_MODE+0x54>)
 8006e58:	f7fb ffff 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2110      	movs	r1, #16
 8006e60:	4804      	ldr	r0, [pc, #16]	; (8006e74 <OSC_SET_TRIGGER_MODE+0x54>)
 8006e62:	f7fb fffa 	bl	8002e5a <HAL_GPIO_WritePin>
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000290 	.word	0x20000290
 8006e74:	40010800 	.word	0x40010800

08006e78 <OSC_SET_SAMPLES_AFTER_TRIGGER>:

void OSC_SET_SAMPLES_AFTER_TRIGGER(OSC_struct* OSC)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	uint8_t byte[4];

	int16_t data = OSC->samplesAfterTrig;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	88db      	ldrh	r3, [r3, #6]
 8006e84:	81fb      	strh	r3, [r7, #14]

	byte[0] = (int8_t)0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)((data>>8)&0x00ff);
 8006e8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e8e:	121b      	asrs	r3, r3, #8
 8006e90:	b21b      	sxth	r3, r3
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)(data&0x00ff);
 8006e96:	89fb      	ldrh	r3, [r7, #14]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)OSC_SAMPLESAFTERTRIG;
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8006ea0:	f107 0108 	add.w	r1, r7, #8
 8006ea4:	2364      	movs	r3, #100	; 0x64
 8006ea6:	2204      	movs	r2, #4
 8006ea8:	480a      	ldr	r0, [pc, #40]	; (8006ed4 <OSC_SET_SAMPLES_AFTER_TRIGGER+0x5c>)
 8006eaa:	f7fd f9e5 	bl	8004278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2110      	movs	r1, #16
 8006eb2:	4809      	ldr	r0, [pc, #36]	; (8006ed8 <OSC_SET_SAMPLES_AFTER_TRIGGER+0x60>)
 8006eb4:	f7fb ffd1 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006eb8:	2201      	movs	r2, #1
 8006eba:	2110      	movs	r1, #16
 8006ebc:	4806      	ldr	r0, [pc, #24]	; (8006ed8 <OSC_SET_SAMPLES_AFTER_TRIGGER+0x60>)
 8006ebe:	f7fb ffcc 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2110      	movs	r1, #16
 8006ec6:	4804      	ldr	r0, [pc, #16]	; (8006ed8 <OSC_SET_SAMPLES_AFTER_TRIGGER+0x60>)
 8006ec8:	f7fb ffc7 	bl	8002e5a <HAL_GPIO_WritePin>
}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	20000290 	.word	0x20000290
 8006ed8:	40010800 	.word	0x40010800

08006edc <OSC_SET_PRESCALER>:

void OSC_SET_PRESCALER(OSC_struct* OSC)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
	uint8_t byte[4];

	uint32_t prescaler = OSC->prescaler;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	60fb      	str	r3, [r7, #12]

	// setting prescaler
	byte[0] = (uint8_t)((prescaler>>16)&0x00ff);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((prescaler>>8)&0x00ff);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	0a1b      	lsrs	r3, r3, #8
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(prescaler&0x00ff);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)OSC_PRESCALER;
 8006f00:	230d      	movs	r3, #13
 8006f02:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8006f04:	f107 0108 	add.w	r1, r7, #8
 8006f08:	2364      	movs	r3, #100	; 0x64
 8006f0a:	2204      	movs	r2, #4
 8006f0c:	480a      	ldr	r0, [pc, #40]	; (8006f38 <OSC_SET_PRESCALER+0x5c>)
 8006f0e:	f7fd f9b3 	bl	8004278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006f12:	2200      	movs	r2, #0
 8006f14:	2110      	movs	r1, #16
 8006f16:	4809      	ldr	r0, [pc, #36]	; (8006f3c <OSC_SET_PRESCALER+0x60>)
 8006f18:	f7fb ff9f 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	2110      	movs	r1, #16
 8006f20:	4806      	ldr	r0, [pc, #24]	; (8006f3c <OSC_SET_PRESCALER+0x60>)
 8006f22:	f7fb ff9a 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8006f26:	2200      	movs	r2, #0
 8006f28:	2110      	movs	r1, #16
 8006f2a:	4804      	ldr	r0, [pc, #16]	; (8006f3c <OSC_SET_PRESCALER+0x60>)
 8006f2c:	f7fb ff95 	bl	8002e5a <HAL_GPIO_WritePin>
}
 8006f30:	bf00      	nop
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20000290 	.word	0x20000290
 8006f3c:	40010800 	.word	0x40010800

08006f40 <DACREF>:
#include "trim.h"

float DACref = 0;

void DACREF(float v) // 0 <= v <= 2.5
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 8006f48:	4a27      	ldr	r2, [pc, #156]	; (8006fe8 <DACREF+0xa8>)
 8006f4a:	f04f 0100 	mov.w	r1, #0
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 fb98 	bl	8008684 <trimFloat>
 8006f54:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 8006f56:	4924      	ldr	r1, [pc, #144]	; (8006fe8 <DACREF+0xa8>)
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fa f8bf 	bl	80010dc <__aeabi_fcmpeq>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <DACREF+0x2c>
 8006f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f68:	81fb      	strh	r3, [r7, #14]
 8006f6a:	e018      	b.n	8006f9e <DACREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7f9 fa73 	bl	8000458 <__aeabi_f2d>
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	4b1d      	ldr	r3, [pc, #116]	; (8006fec <DACREF+0xac>)
 8006f78:	f7f9 fbf0 	bl	800075c <__aeabi_ddiv>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4610      	mov	r0, r2
 8006f82:	4619      	mov	r1, r3
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	4b19      	ldr	r3, [pc, #100]	; (8006ff0 <DACREF+0xb0>)
 8006f8a:	f7f9 fabd 	bl	8000508 <__aeabi_dmul>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4610      	mov	r0, r2
 8006f94:	4619      	mov	r1, r3
 8006f96:	f7f9 fd8f 	bl	8000ab8 <__aeabi_d2uiz>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	81fb      	strh	r3, [r7, #14]

	DACref = v;
 8006f9e:	4a15      	ldr	r2, [pc, #84]	; (8006ff4 <DACREF+0xb4>)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6013      	str	r3, [r2, #0]

	uint8_t byte[3];

	byte[0] = (3<<1)|(1<<4);	//3 shifted=channel D	1 shifted=load
 8006fa4:	2316      	movs	r3, #22
 8006fa6:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8006fa8:	89fb      	ldrh	r3, [r7, #14]
 8006faa:	099b      	lsrs	r3, r3, #6
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8006fb2:	89fb      	ldrh	r3, [r7, #14]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006fc0:	480d      	ldr	r0, [pc, #52]	; (8006ff8 <DACREF+0xb8>)
 8006fc2:	f7fb ff4a 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8006fc6:	f107 0108 	add.w	r1, r7, #8
 8006fca:	2364      	movs	r3, #100	; 0x64
 8006fcc:	2203      	movs	r2, #3
 8006fce:	480b      	ldr	r0, [pc, #44]	; (8006ffc <DACREF+0xbc>)
 8006fd0:	f7fd f952 	bl	8004278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006fda:	4807      	ldr	r0, [pc, #28]	; (8006ff8 <DACREF+0xb8>)
 8006fdc:	f7fb ff3d 	bl	8002e5a <HAL_GPIO_WritePin>
}
 8006fe0:	bf00      	nop
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	40200000 	.word	0x40200000
 8006fec:	40040000 	.word	0x40040000
 8006ff0:	40d00000 	.word	0x40d00000
 8006ff4:	200003ec 	.word	0x200003ec
 8006ff8:	40011000 	.word	0x40011000
 8006ffc:	20000290 	.word	0x20000290

08007000 <DACOFFS>:

void DACOFFS(float v) // -12.5 <= v <= 12.5
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 8007008:	4a2a      	ldr	r2, [pc, #168]	; (80070b4 <DACOFFS+0xb4>)
 800700a:	492b      	ldr	r1, [pc, #172]	; (80070b8 <DACOFFS+0xb8>)
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fb39 	bl	8008684 <trimFloat>
 8007012:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 8007014:	4927      	ldr	r1, [pc, #156]	; (80070b4 <DACOFFS+0xb4>)
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fa f860 	bl	80010dc <__aeabi_fcmpeq>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <DACOFFS+0x2a>
 8007022:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007026:	81fb      	strh	r3, [r7, #14]
 8007028:	e021      	b.n	800706e <DACOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7f9 fa14 	bl	8000458 <__aeabi_f2d>
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	4b21      	ldr	r3, [pc, #132]	; (80070bc <DACOFFS+0xbc>)
 8007036:	f7f9 f8b1 	bl	800019c <__adddf3>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4610      	mov	r0, r2
 8007040:	4619      	mov	r1, r3
 8007042:	f04f 0200 	mov.w	r2, #0
 8007046:	4b1e      	ldr	r3, [pc, #120]	; (80070c0 <DACOFFS+0xc0>)
 8007048:	f7f9 fb88 	bl	800075c <__aeabi_ddiv>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4610      	mov	r0, r2
 8007052:	4619      	mov	r1, r3
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	4b1a      	ldr	r3, [pc, #104]	; (80070c4 <DACOFFS+0xc4>)
 800705a:	f7f9 fa55 	bl	8000508 <__aeabi_dmul>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	4610      	mov	r0, r2
 8007064:	4619      	mov	r1, r3
 8007066:	f7f9 fd27 	bl	8000ab8 <__aeabi_d2uiz>
 800706a:	4603      	mov	r3, r0
 800706c:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (2<<1)|(1<<4);	//2 shifted=channel C	1 shifted=load
 800706e:	2314      	movs	r3, #20
 8007070:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8007072:	89fb      	ldrh	r3, [r7, #14]
 8007074:	099b      	lsrs	r3, r3, #6
 8007076:	b29b      	uxth	r3, r3
 8007078:	b2db      	uxtb	r3, r3
 800707a:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 800707c:	89fb      	ldrh	r3, [r7, #14]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	b2db      	uxtb	r3, r3
 8007082:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8007084:	2200      	movs	r2, #0
 8007086:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800708a:	480f      	ldr	r0, [pc, #60]	; (80070c8 <DACOFFS+0xc8>)
 800708c:	f7fb fee5 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8007090:	f107 0108 	add.w	r1, r7, #8
 8007094:	2364      	movs	r3, #100	; 0x64
 8007096:	2203      	movs	r2, #3
 8007098:	480c      	ldr	r0, [pc, #48]	; (80070cc <DACOFFS+0xcc>)
 800709a:	f7fd f8ed 	bl	8004278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 800709e:	2201      	movs	r2, #1
 80070a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070a4:	4808      	ldr	r0, [pc, #32]	; (80070c8 <DACOFFS+0xc8>)
 80070a6:	f7fb fed8 	bl	8002e5a <HAL_GPIO_WritePin>
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	41480000 	.word	0x41480000
 80070b8:	c1480000 	.word	0xc1480000
 80070bc:	40290000 	.word	0x40290000
 80070c0:	40390000 	.word	0x40390000
 80070c4:	40d00000 	.word	0x40d00000
 80070c8:	40011000 	.word	0x40011000
 80070cc:	20000290 	.word	0x20000290

080070d0 <ADCREF>:

void ADCREF(float v) // 0 <= v <= 2.5
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 80070d8:	4a26      	ldr	r2, [pc, #152]	; (8007174 <ADCREF+0xa4>)
 80070da:	f04f 0100 	mov.w	r1, #0
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 fad0 	bl	8008684 <trimFloat>
 80070e4:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 80070e6:	4923      	ldr	r1, [pc, #140]	; (8007174 <ADCREF+0xa4>)
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7f9 fff7 	bl	80010dc <__aeabi_fcmpeq>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <ADCREF+0x2c>
 80070f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070f8:	81fb      	strh	r3, [r7, #14]
 80070fa:	e018      	b.n	800712e <ADCREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7f9 f9ab 	bl	8000458 <__aeabi_f2d>
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	4b1c      	ldr	r3, [pc, #112]	; (8007178 <ADCREF+0xa8>)
 8007108:	f7f9 fb28 	bl	800075c <__aeabi_ddiv>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4610      	mov	r0, r2
 8007112:	4619      	mov	r1, r3
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	4b18      	ldr	r3, [pc, #96]	; (800717c <ADCREF+0xac>)
 800711a:	f7f9 f9f5 	bl	8000508 <__aeabi_dmul>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4610      	mov	r0, r2
 8007124:	4619      	mov	r1, r3
 8007126:	f7f9 fcc7 	bl	8000ab8 <__aeabi_d2uiz>
 800712a:	4603      	mov	r3, r0
 800712c:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<1)|(1<<4); //1 shifted=channel B	1 shifted=load
 800712e:	2312      	movs	r3, #18
 8007130:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8007132:	89fb      	ldrh	r3, [r7, #14]
 8007134:	099b      	lsrs	r3, r3, #6
 8007136:	b29b      	uxth	r3, r3
 8007138:	b2db      	uxtb	r3, r3
 800713a:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 800713c:	89fb      	ldrh	r3, [r7, #14]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	b2db      	uxtb	r3, r3
 8007142:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8007144:	2200      	movs	r2, #0
 8007146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800714a:	480d      	ldr	r0, [pc, #52]	; (8007180 <ADCREF+0xb0>)
 800714c:	f7fb fe85 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8007150:	f107 0108 	add.w	r1, r7, #8
 8007154:	2364      	movs	r3, #100	; 0x64
 8007156:	2203      	movs	r2, #3
 8007158:	480a      	ldr	r0, [pc, #40]	; (8007184 <ADCREF+0xb4>)
 800715a:	f7fd f88d 	bl	8004278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 800715e:	2201      	movs	r2, #1
 8007160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007164:	4806      	ldr	r0, [pc, #24]	; (8007180 <ADCREF+0xb0>)
 8007166:	f7fb fe78 	bl	8002e5a <HAL_GPIO_WritePin>
}
 800716a:	bf00      	nop
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	40200000 	.word	0x40200000
 8007178:	40040000 	.word	0x40040000
 800717c:	40d00000 	.word	0x40d00000
 8007180:	40011000 	.word	0x40011000
 8007184:	20000290 	.word	0x20000290

08007188 <ADCOFFS>:

void ADCOFFS(float v) // -12.5 <= v <= 12.5
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 8007190:	4a2a      	ldr	r2, [pc, #168]	; (800723c <ADCOFFS+0xb4>)
 8007192:	492b      	ldr	r1, [pc, #172]	; (8007240 <ADCOFFS+0xb8>)
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fa75 	bl	8008684 <trimFloat>
 800719a:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 800719c:	4927      	ldr	r1, [pc, #156]	; (800723c <ADCOFFS+0xb4>)
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7f9 ff9c 	bl	80010dc <__aeabi_fcmpeq>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <ADCOFFS+0x2a>
 80071aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071ae:	81fb      	strh	r3, [r7, #14]
 80071b0:	e021      	b.n	80071f6 <ADCOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7f9 f950 	bl	8000458 <__aeabi_f2d>
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	4b21      	ldr	r3, [pc, #132]	; (8007244 <ADCOFFS+0xbc>)
 80071be:	f7f8 ffed 	bl	800019c <__adddf3>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4610      	mov	r0, r2
 80071c8:	4619      	mov	r1, r3
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	4b1e      	ldr	r3, [pc, #120]	; (8007248 <ADCOFFS+0xc0>)
 80071d0:	f7f9 fac4 	bl	800075c <__aeabi_ddiv>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4610      	mov	r0, r2
 80071da:	4619      	mov	r1, r3
 80071dc:	f04f 0200 	mov.w	r2, #0
 80071e0:	4b1a      	ldr	r3, [pc, #104]	; (800724c <ADCOFFS+0xc4>)
 80071e2:	f7f9 f991 	bl	8000508 <__aeabi_dmul>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4610      	mov	r0, r2
 80071ec:	4619      	mov	r1, r3
 80071ee:	f7f9 fc63 	bl	8000ab8 <__aeabi_d2uiz>
 80071f2:	4603      	mov	r3, r0
 80071f4:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<4); //none shifted=channel A	1 shifted=load
 80071f6:	2310      	movs	r3, #16
 80071f8:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 80071fa:	89fb      	ldrh	r3, [r7, #14]
 80071fc:	099b      	lsrs	r3, r3, #6
 80071fe:	b29b      	uxth	r3, r3
 8007200:	b2db      	uxtb	r3, r3
 8007202:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8007204:	89fb      	ldrh	r3, [r7, #14]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	b2db      	uxtb	r3, r3
 800720a:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 800720c:	2200      	movs	r2, #0
 800720e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007212:	480f      	ldr	r0, [pc, #60]	; (8007250 <ADCOFFS+0xc8>)
 8007214:	f7fb fe21 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8007218:	f107 0108 	add.w	r1, r7, #8
 800721c:	2364      	movs	r3, #100	; 0x64
 800721e:	2203      	movs	r2, #3
 8007220:	480c      	ldr	r0, [pc, #48]	; (8007254 <ADCOFFS+0xcc>)
 8007222:	f7fd f829 	bl	8004278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8007226:	2201      	movs	r2, #1
 8007228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800722c:	4808      	ldr	r0, [pc, #32]	; (8007250 <ADCOFFS+0xc8>)
 800722e:	f7fb fe14 	bl	8002e5a <HAL_GPIO_WritePin>
}
 8007232:	bf00      	nop
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	41480000 	.word	0x41480000
 8007240:	c1480000 	.word	0xc1480000
 8007244:	40290000 	.word	0x40290000
 8007248:	40390000 	.word	0x40390000
 800724c:	40d00000 	.word	0x40d00000
 8007250:	40011000 	.word	0x40011000
 8007254:	20000290 	.word	0x20000290

08007258 <RS485_Transmit>:

char TXbuff[RS485BUFFSIZE] = {0};
char RXbuff[RS485BUFFSIZE] = {0};

void RS485_Transmit(char *message)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
	//strcat(message, "\r\n");

	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);	// Enable Driver
 8007260:	2201      	movs	r2, #1
 8007262:	2120      	movs	r1, #32
 8007264:	480a      	ldr	r0, [pc, #40]	; (8007290 <RS485_Transmit+0x38>)
 8007266:	f7fb fdf8 	bl	8002e5a <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, message, strlen(message), 100);	// Transmit
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7f8 ff88 	bl	8000180 <strlen>
 8007270:	4603      	mov	r3, r0
 8007272:	b29a      	uxth	r2, r3
 8007274:	2364      	movs	r3, #100	; 0x64
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	4806      	ldr	r0, [pc, #24]	; (8007294 <RS485_Transmit+0x3c>)
 800727a:	f7fe f8fb 	bl	8005474 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);	// Disable Driver
 800727e:	2200      	movs	r2, #0
 8007280:	2120      	movs	r1, #32
 8007282:	4803      	ldr	r0, [pc, #12]	; (8007290 <RS485_Transmit+0x38>)
 8007284:	f7fb fde9 	bl	8002e5a <HAL_GPIO_WritePin>
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40010c00 	.word	0x40010c00
 8007294:	20000330 	.word	0x20000330

08007298 <SCPIC_SYS_APPLY>:
 */

#include "SCPI_Commands.h"

void SCPIC_SYS_APPLY(struct subword** subwords, int length)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d128      	bne.n	80072fa <SCPIC_SYS_APPLY+0x62>
		if(subwords[0]->type != params) return;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d125      	bne.n	80072fe <SCPIC_SYS_APPLY+0x66>
		Subword* subword = subwords[0];
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]

		if(subword->type == params && subword->paramType == INT_P)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d11f      	bne.n	8007300 <SCPIC_SYS_APPLY+0x68>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	7a1b      	ldrb	r3, [r3, #8]
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d11b      	bne.n	8007300 <SCPIC_SYS_APPLY+0x68>
		{
			if(subword->integerParam)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d017      	beq.n	8007300 <SCPIC_SYS_APPLY+0x68>
			{
				HFDAC_SET_ALL(&HFDAC1);
 80072d0:	480d      	ldr	r0, [pc, #52]	; (8007308 <SCPIC_SYS_APPLY+0x70>)
 80072d2:	f7ff fb89 	bl	80069e8 <HFDAC_SET_ALL>
				HFADC_SET_ALL(&HFADC1);
 80072d6:	480d      	ldr	r0, [pc, #52]	; (800730c <SCPIC_SYS_APPLY+0x74>)
 80072d8:	f7ff fad4 	bl	8006884 <HFADC_SET_ALL>
				OSC_SET_ALL(&OSC1, &HFADC1);
 80072dc:	490b      	ldr	r1, [pc, #44]	; (800730c <SCPIC_SYS_APPLY+0x74>)
 80072de:	480c      	ldr	r0, [pc, #48]	; (8007310 <SCPIC_SYS_APPLY+0x78>)
 80072e0:	f7ff fd4c 	bl	8006d7c <OSC_SET_ALL>
				AWG_Load_Waveform(&AWG1, &HFDAC1);
 80072e4:	4908      	ldr	r1, [pc, #32]	; (8007308 <SCPIC_SYS_APPLY+0x70>)
 80072e6:	480b      	ldr	r0, [pc, #44]	; (8007314 <SCPIC_SYS_APPLY+0x7c>)
 80072e8:	f7fe ff22 	bl	8006130 <AWG_Load_Waveform>

				strcpy(TXbuff, "OK");
 80072ec:	4b0a      	ldr	r3, [pc, #40]	; (8007318 <SCPIC_SYS_APPLY+0x80>)
 80072ee:	4a0b      	ldr	r2, [pc, #44]	; (800731c <SCPIC_SYS_APPLY+0x84>)
 80072f0:	8811      	ldrh	r1, [r2, #0]
 80072f2:	7892      	ldrb	r2, [r2, #2]
 80072f4:	8019      	strh	r1, [r3, #0]
 80072f6:	709a      	strb	r2, [r3, #2]
 80072f8:	e002      	b.n	8007300 <SCPIC_SYS_APPLY+0x68>
	if(length != 1) return;
 80072fa:	bf00      	nop
 80072fc:	e000      	b.n	8007300 <SCPIC_SYS_APPLY+0x68>
		if(subwords[0]->type != params) return;
 80072fe:	bf00      	nop
			}
		}
}
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	200003c4 	.word	0x200003c4
 800730c:	200003b8 	.word	0x200003b8
 8007310:	200003d4 	.word	0x200003d4
 8007314:	20000378 	.word	0x20000378
 8007318:	200003f0 	.word	0x200003f0
 800731c:	0800e0dc 	.word	0x0800e0dc

08007320 <SCPIC_SYS_RESET>:

void SCPIC_SYS_RESET(struct subword** subwords, int length)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d11c      	bne.n	800736a <SCPIC_SYS_RESET+0x4a>
		if(subwords[0]->type != params) return;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d119      	bne.n	800736e <SCPIC_SYS_RESET+0x4e>
		Subword* subword = subwords[0];
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60fb      	str	r3, [r7, #12]

		if(subword->type == params && subword->paramType == INT_P)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d113      	bne.n	8007370 <SCPIC_SYS_RESET+0x50>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	7a1b      	ldrb	r3, [r3, #8]
 800734c:	2b03      	cmp	r3, #3
 800734e:	d10f      	bne.n	8007370 <SCPIC_SYS_RESET+0x50>
		{
			if(subword->integerParam)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00b      	beq.n	8007370 <SCPIC_SYS_RESET+0x50>
			{
				strcpy(TXbuff, "OK");
 8007358:	4b07      	ldr	r3, [pc, #28]	; (8007378 <SCPIC_SYS_RESET+0x58>)
 800735a:	4a08      	ldr	r2, [pc, #32]	; (800737c <SCPIC_SYS_RESET+0x5c>)
 800735c:	8811      	ldrh	r1, [r2, #0]
 800735e:	7892      	ldrb	r2, [r2, #2]
 8007360:	8019      	strh	r1, [r3, #0]
 8007362:	709a      	strb	r2, [r3, #2]
				HAL_NVIC_SystemReset();
 8007364:	f7fb fb1b 	bl	800299e <HAL_NVIC_SystemReset>
 8007368:	e002      	b.n	8007370 <SCPIC_SYS_RESET+0x50>
	if(length != 1) return;
 800736a:	bf00      	nop
 800736c:	e000      	b.n	8007370 <SCPIC_SYS_RESET+0x50>
		if(subwords[0]->type != params) return;
 800736e:	bf00      	nop
			}
		}
}
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	200003f0 	.word	0x200003f0
 800737c:	0800e0dc 	.word	0x0800e0dc

08007380 <SCPIC_SYS_ID>:

void SCPIC_SYS_ID(struct subword** subwords, int length)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d115      	bne.n	80073bc <SCPIC_SYS_ID+0x3c>
	if(subwords[0]->type != params) return;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d112      	bne.n	80073c0 <SCPIC_SYS_ID+0x40>
	Subword* subword = subwords[0];
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	60fb      	str	r3, [r7, #12]

	if(subword->type == params && subword->paramType == EVAL_P)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d10c      	bne.n	80073c2 <SCPIC_SYS_ID+0x42>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	7a1b      	ldrb	r3, [r3, #8]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d108      	bne.n	80073c2 <SCPIC_SYS_ID+0x42>
	{
		sprintf(TXbuff, "%x\r\n", DEVICE_ID);
 80073b0:	220f      	movs	r2, #15
 80073b2:	4905      	ldr	r1, [pc, #20]	; (80073c8 <SCPIC_SYS_ID+0x48>)
 80073b4:	4805      	ldr	r0, [pc, #20]	; (80073cc <SCPIC_SYS_ID+0x4c>)
 80073b6:	f003 f8f1 	bl	800a59c <siprintf>
 80073ba:	e002      	b.n	80073c2 <SCPIC_SYS_ID+0x42>
	if(length != 1) return;
 80073bc:	bf00      	nop
 80073be:	e000      	b.n	80073c2 <SCPIC_SYS_ID+0x42>
	if(subwords[0]->type != params) return;
 80073c0:	bf00      	nop
	}
}
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	0800e0e0 	.word	0x0800e0e0
 80073cc:	200003f0 	.word	0x200003f0

080073d0 <SCPIC_OUT_MAXAMPLITUDE>:



void SCPIC_OUT_MAXAMPLITUDE(struct subword** subwords, int length)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d12c      	bne.n	800743a <SCPIC_OUT_MAXAMPLITUDE+0x6a>
		if(subwords[0]->type != params) return;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d129      	bne.n	800743e <SCPIC_OUT_MAXAMPLITUDE+0x6e>
		Subword* subword = subwords[0];
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]

		if(subword->type == params && subword->paramType == FLOAT_P)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d123      	bne.n	8007440 <SCPIC_OUT_MAXAMPLITUDE+0x70>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	7a1b      	ldrb	r3, [r3, #8]
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	d11f      	bne.n	8007440 <SCPIC_OUT_MAXAMPLITUDE+0x70>
		{
			if(checkFloat(subword->floatParam, 20, 0))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	4618      	mov	r0, r3
 8007406:	f7f9 f827 	bl	8000458 <__aeabi_f2d>
 800740a:	2300      	movs	r3, #0
 800740c:	2214      	movs	r2, #20
 800740e:	f001 f957 	bl	80086c0 <checkFloat>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <SCPIC_OUT_MAXAMPLITUDE+0x5e>
			{
				HFDAC1.maxAmplitude = subword->floatParam;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	4a0a      	ldr	r2, [pc, #40]	; (8007448 <SCPIC_OUT_MAXAMPLITUDE+0x78>)
 800741e:	6053      	str	r3, [r2, #4]
				strcpy(TXbuff, "OK");
 8007420:	4b0a      	ldr	r3, [pc, #40]	; (800744c <SCPIC_OUT_MAXAMPLITUDE+0x7c>)
 8007422:	4a0b      	ldr	r2, [pc, #44]	; (8007450 <SCPIC_OUT_MAXAMPLITUDE+0x80>)
 8007424:	8811      	ldrh	r1, [r2, #0]
 8007426:	7892      	ldrb	r2, [r2, #2]
 8007428:	8019      	strh	r1, [r3, #0]
 800742a:	709a      	strb	r2, [r3, #2]
 800742c:	e008      	b.n	8007440 <SCPIC_OUT_MAXAMPLITUDE+0x70>
			}
			else strcpy(TXbuff, "ERR:VAL");
 800742e:	4a07      	ldr	r2, [pc, #28]	; (800744c <SCPIC_OUT_MAXAMPLITUDE+0x7c>)
 8007430:	4b08      	ldr	r3, [pc, #32]	; (8007454 <SCPIC_OUT_MAXAMPLITUDE+0x84>)
 8007432:	cb03      	ldmia	r3!, {r0, r1}
 8007434:	6010      	str	r0, [r2, #0]
 8007436:	6051      	str	r1, [r2, #4]
 8007438:	e002      	b.n	8007440 <SCPIC_OUT_MAXAMPLITUDE+0x70>
	if(length != 1) return;
 800743a:	bf00      	nop
 800743c:	e000      	b.n	8007440 <SCPIC_OUT_MAXAMPLITUDE+0x70>
		if(subwords[0]->type != params) return;
 800743e:	bf00      	nop
		}
}
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	200003c4 	.word	0x200003c4
 800744c:	200003f0 	.word	0x200003f0
 8007450:	0800e0dc 	.word	0x0800e0dc
 8007454:	0800e0e8 	.word	0x0800e0e8

08007458 <SCPIC_OUT_MODE>:

void SCPIC_OUT_MODE(struct subword** subwords, int length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d14c      	bne.n	8007502 <SCPIC_OUT_MODE+0xaa>
		if(subwords[0]->type != params) return;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d149      	bne.n	8007506 <SCPIC_OUT_MODE+0xae>
		Subword* subword = subwords[0];
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60fb      	str	r3, [r7, #12]

		if(subword->type == params)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d145      	bne.n	800750c <SCPIC_OUT_MODE+0xb4>
		{
			switch(subword->paramType)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	7a1b      	ldrb	r3, [r3, #8]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d002      	beq.n	800748e <SCPIC_OUT_MODE+0x36>
 8007488:	2b05      	cmp	r3, #5
 800748a:	d014      	beq.n	80074b6 <SCPIC_OUT_MODE+0x5e>
 800748c:	e03e      	b.n	800750c <SCPIC_OUT_MODE+0xb4>
			{
				case EVAL_P:
					switch(HFDAC1.mode)
 800748e:	4b21      	ldr	r3, [pc, #132]	; (8007514 <SCPIC_OUT_MODE+0xbc>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <SCPIC_OUT_MODE+0x44>
 8007496:	2b01      	cmp	r3, #1
 8007498:	d006      	beq.n	80074a8 <SCPIC_OUT_MODE+0x50>
					{
						case Voltage_output: strcpy(TXbuff, "VOLTAGE"); break;
						case Current_output: strcpy(TXbuff, "CURRENT"); break;
					}
				break;
 800749a:	e037      	b.n	800750c <SCPIC_OUT_MODE+0xb4>
						case Voltage_output: strcpy(TXbuff, "VOLTAGE"); break;
 800749c:	4a1e      	ldr	r2, [pc, #120]	; (8007518 <SCPIC_OUT_MODE+0xc0>)
 800749e:	4b1f      	ldr	r3, [pc, #124]	; (800751c <SCPIC_OUT_MODE+0xc4>)
 80074a0:	cb03      	ldmia	r3!, {r0, r1}
 80074a2:	6010      	str	r0, [r2, #0]
 80074a4:	6051      	str	r1, [r2, #4]
 80074a6:	e005      	b.n	80074b4 <SCPIC_OUT_MODE+0x5c>
						case Current_output: strcpy(TXbuff, "CURRENT"); break;
 80074a8:	4a1b      	ldr	r2, [pc, #108]	; (8007518 <SCPIC_OUT_MODE+0xc0>)
 80074aa:	4b1d      	ldr	r3, [pc, #116]	; (8007520 <SCPIC_OUT_MODE+0xc8>)
 80074ac:	cb03      	ldmia	r3!, {r0, r1}
 80074ae:	6010      	str	r0, [r2, #0]
 80074b0:	6051      	str	r1, [r2, #4]
 80074b2:	bf00      	nop
				break;
 80074b4:	e02a      	b.n	800750c <SCPIC_OUT_MODE+0xb4>

				case OTHER_P:
					if(!strcmp(subword->otherParam, "VOLTAGE"))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	4918      	ldr	r1, [pc, #96]	; (800751c <SCPIC_OUT_MODE+0xc4>)
 80074bc:	4618      	mov	r0, r3
 80074be:	f7f8 fe55 	bl	800016c <strcmp>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d109      	bne.n	80074dc <SCPIC_OUT_MODE+0x84>
					{
						HFDAC1.mode = Voltage_output;
 80074c8:	4b12      	ldr	r3, [pc, #72]	; (8007514 <SCPIC_OUT_MODE+0xbc>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
						strcpy(TXbuff, "OK");
 80074ce:	4b12      	ldr	r3, [pc, #72]	; (8007518 <SCPIC_OUT_MODE+0xc0>)
 80074d0:	4a14      	ldr	r2, [pc, #80]	; (8007524 <SCPIC_OUT_MODE+0xcc>)
 80074d2:	8811      	ldrh	r1, [r2, #0]
 80074d4:	7892      	ldrb	r2, [r2, #2]
 80074d6:	8019      	strh	r1, [r3, #0]
 80074d8:	709a      	strb	r2, [r3, #2]
					else if(!strcmp(subword->otherParam, "CURRENT"))
					{
						HFDAC1.mode = Current_output;
						strcpy(TXbuff, "OK");
					}
				break;
 80074da:	e016      	b.n	800750a <SCPIC_OUT_MODE+0xb2>
					else if(!strcmp(subword->otherParam, "CURRENT"))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	490f      	ldr	r1, [pc, #60]	; (8007520 <SCPIC_OUT_MODE+0xc8>)
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7f8 fe42 	bl	800016c <strcmp>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10d      	bne.n	800750a <SCPIC_OUT_MODE+0xb2>
						HFDAC1.mode = Current_output;
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <SCPIC_OUT_MODE+0xbc>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	701a      	strb	r2, [r3, #0]
						strcpy(TXbuff, "OK");
 80074f4:	4b08      	ldr	r3, [pc, #32]	; (8007518 <SCPIC_OUT_MODE+0xc0>)
 80074f6:	4a0b      	ldr	r2, [pc, #44]	; (8007524 <SCPIC_OUT_MODE+0xcc>)
 80074f8:	8811      	ldrh	r1, [r2, #0]
 80074fa:	7892      	ldrb	r2, [r2, #2]
 80074fc:	8019      	strh	r1, [r3, #0]
 80074fe:	709a      	strb	r2, [r3, #2]
				break;
 8007500:	e003      	b.n	800750a <SCPIC_OUT_MODE+0xb2>
	if(length != 1) return;
 8007502:	bf00      	nop
 8007504:	e002      	b.n	800750c <SCPIC_OUT_MODE+0xb4>
		if(subwords[0]->type != params) return;
 8007506:	bf00      	nop
 8007508:	e000      	b.n	800750c <SCPIC_OUT_MODE+0xb4>
				break;
 800750a:	bf00      	nop
			}

		}
}
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	200003c4 	.word	0x200003c4
 8007518:	200003f0 	.word	0x200003f0
 800751c:	0800e0f0 	.word	0x0800e0f0
 8007520:	0800e0f8 	.word	0x0800e0f8
 8007524:	0800e0dc 	.word	0x0800e0dc

08007528 <SCPIC_DVM_RAW>:



void SCPIC_DVM_RAW(struct subword** subwords, int length)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d11c      	bne.n	8007572 <SCPIC_DVM_RAW+0x4a>
		if(subwords[0]->type != params) return;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d119      	bne.n	8007576 <SCPIC_DVM_RAW+0x4e>
		Subword* subword = subwords[0];
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]

		if(subword->type == params && subword->paramType == EVAL_P)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d113      	bne.n	8007578 <SCPIC_DVM_RAW+0x50>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	7a1b      	ldrb	r3, [r3, #8]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d10f      	bne.n	8007578 <SCPIC_DVM_RAW+0x50>
		{
			int16_t DVM = DVM_GET_FILTERED_DATA_RAW(100);
 8007558:	2064      	movs	r0, #100	; 0x64
 800755a:	f7ff f887 	bl	800666c <DVM_GET_FILTERED_DATA_RAW>
 800755e:	4603      	mov	r3, r0
 8007560:	817b      	strh	r3, [r7, #10]
			sprintf(TXbuff, "%d\r\n", DVM);
 8007562:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007566:	461a      	mov	r2, r3
 8007568:	4905      	ldr	r1, [pc, #20]	; (8007580 <SCPIC_DVM_RAW+0x58>)
 800756a:	4806      	ldr	r0, [pc, #24]	; (8007584 <SCPIC_DVM_RAW+0x5c>)
 800756c:	f003 f816 	bl	800a59c <siprintf>
 8007570:	e002      	b.n	8007578 <SCPIC_DVM_RAW+0x50>
	if(length != 1) return;
 8007572:	bf00      	nop
 8007574:	e000      	b.n	8007578 <SCPIC_DVM_RAW+0x50>
		if(subwords[0]->type != params) return;
 8007576:	bf00      	nop
		}
}
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	0800e100 	.word	0x0800e100
 8007584:	200003f0 	.word	0x200003f0

08007588 <SCPIC_DVM_VAL>:

void SCPIC_DVM_VAL(struct subword** subwords, int length)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af02      	add	r7, sp, #8
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d12d      	bne.n	80075f4 <SCPIC_DVM_VAL+0x6c>
		if(subwords[0]->type != params) return;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d12a      	bne.n	80075f8 <SCPIC_DVM_VAL+0x70>
		Subword* subword = subwords[0];
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	613b      	str	r3, [r7, #16]

		if(subword->type == params && subword->paramType == EVAL_P)
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d124      	bne.n	80075fa <SCPIC_DVM_VAL+0x72>
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	7a1b      	ldrb	r3, [r3, #8]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d120      	bne.n	80075fa <SCPIC_DVM_VAL+0x72>
		{
			char unit = 'V';
 80075b8:	2356      	movs	r3, #86	; 0x56
 80075ba:	75fb      	strb	r3, [r7, #23]
			float DVM = HFADC_CONVERT_RAW2VALUE(&HFADC1, DVM_GET_FILTERED_DATA_RAW(100));
 80075bc:	2064      	movs	r0, #100	; 0x64
 80075be:	f7ff f855 	bl	800666c <DVM_GET_FILTERED_DATA_RAW>
 80075c2:	4603      	mov	r3, r0
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	4619      	mov	r1, r3
 80075c8:	480d      	ldr	r0, [pc, #52]	; (8007600 <SCPIC_DVM_VAL+0x78>)
 80075ca:	f7ff f889 	bl	80066e0 <HFADC_CONVERT_RAW2VALUE>
 80075ce:	60f8      	str	r0, [r7, #12]
			if(HFADC1.mode == Current_input) unit = 'A';
 80075d0:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <SCPIC_DVM_VAL+0x78>)
 80075d2:	785b      	ldrb	r3, [r3, #1]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <SCPIC_DVM_VAL+0x54>
 80075d8:	2341      	movs	r3, #65	; 0x41
 80075da:	75fb      	strb	r3, [r7, #23]
			sprintf(TXbuff, "%f%c\r\n", DVM, unit);
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7f8 ff3b 	bl	8000458 <__aeabi_f2d>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	7df9      	ldrb	r1, [r7, #23]
 80075e8:	9100      	str	r1, [sp, #0]
 80075ea:	4906      	ldr	r1, [pc, #24]	; (8007604 <SCPIC_DVM_VAL+0x7c>)
 80075ec:	4806      	ldr	r0, [pc, #24]	; (8007608 <SCPIC_DVM_VAL+0x80>)
 80075ee:	f002 ffd5 	bl	800a59c <siprintf>
 80075f2:	e002      	b.n	80075fa <SCPIC_DVM_VAL+0x72>
	if(length != 1) return;
 80075f4:	bf00      	nop
 80075f6:	e000      	b.n	80075fa <SCPIC_DVM_VAL+0x72>
		if(subwords[0]->type != params) return;
 80075f8:	bf00      	nop
		}
}
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	200003b8 	.word	0x200003b8
 8007604:	0800e108 	.word	0x0800e108
 8007608:	200003f0 	.word	0x200003f0

0800760c <SCPIC_INIT>:

void SCPIC_INIT(struct subword** subwords, int length)
{
 800760c:	b5b0      	push	{r4, r5, r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d171      	bne.n	8007700 <SCPIC_INIT+0xf4>
		if(subwords[0]->type != params) return;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d16e      	bne.n	8007704 <SCPIC_INIT+0xf8>
		Subword* subword = subwords[0];
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]

		if(subword->type == params)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d168      	bne.n	8007706 <SCPIC_INIT+0xfa>
		{
			switch(subword->paramType)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	7a1b      	ldrb	r3, [r3, #8]
 8007638:	2b02      	cmp	r3, #2
 800763a:	d002      	beq.n	8007642 <SCPIC_INIT+0x36>
 800763c:	2b05      	cmp	r3, #5
 800763e:	d023      	beq.n	8007688 <SCPIC_INIT+0x7c>
 8007640:	e061      	b.n	8007706 <SCPIC_INIT+0xfa>
			{
				case EVAL_P:
					switch(LOLA1.Status)
 8007642:	4b32      	ldr	r3, [pc, #200]	; (800770c <SCPIC_INIT+0x100>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d002      	beq.n	8007650 <SCPIC_INIT+0x44>
 800764a:	2b02      	cmp	r3, #2
 800764c:	d00c      	beq.n	8007668 <SCPIC_INIT+0x5c>
 800764e:	e012      	b.n	8007676 <SCPIC_INIT+0x6a>
					{
						case INVALID_FIRMWARE: strcpy(TXbuff, "INVALID FIRMWARE"); break;
 8007650:	4a2f      	ldr	r2, [pc, #188]	; (8007710 <SCPIC_INIT+0x104>)
 8007652:	4b30      	ldr	r3, [pc, #192]	; (8007714 <SCPIC_INIT+0x108>)
 8007654:	4615      	mov	r5, r2
 8007656:	461c      	mov	r4, r3
 8007658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800765a:	6028      	str	r0, [r5, #0]
 800765c:	6069      	str	r1, [r5, #4]
 800765e:	60aa      	str	r2, [r5, #8]
 8007660:	60eb      	str	r3, [r5, #12]
 8007662:	7823      	ldrb	r3, [r4, #0]
 8007664:	742b      	strb	r3, [r5, #16]
 8007666:	e00e      	b.n	8007686 <SCPIC_INIT+0x7a>
						case FIRMWARE_OK: strcpy(TXbuff, "OK"); break;
 8007668:	4b29      	ldr	r3, [pc, #164]	; (8007710 <SCPIC_INIT+0x104>)
 800766a:	4a2b      	ldr	r2, [pc, #172]	; (8007718 <SCPIC_INIT+0x10c>)
 800766c:	8811      	ldrh	r1, [r2, #0]
 800766e:	7892      	ldrb	r2, [r2, #2]
 8007670:	8019      	strh	r1, [r3, #0]
 8007672:	709a      	strb	r2, [r3, #2]
 8007674:	e007      	b.n	8007686 <SCPIC_INIT+0x7a>
						default: strcpy(TXbuff, "NO FIRMWARE"); break;
 8007676:	4a26      	ldr	r2, [pc, #152]	; (8007710 <SCPIC_INIT+0x104>)
 8007678:	4b28      	ldr	r3, [pc, #160]	; (800771c <SCPIC_INIT+0x110>)
 800767a:	4614      	mov	r4, r2
 800767c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800767e:	6020      	str	r0, [r4, #0]
 8007680:	6061      	str	r1, [r4, #4]
 8007682:	60a2      	str	r2, [r4, #8]
 8007684:	bf00      	nop
					}
				break;
 8007686:	e03e      	b.n	8007706 <SCPIC_INIT+0xfa>

				case OTHER_P:
					if(!strcmp(subword->otherParam, "JTAG"))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	4924      	ldr	r1, [pc, #144]	; (8007720 <SCPIC_INIT+0x114>)
 800768e:	4618      	mov	r0, r3
 8007690:	f7f8 fd6c 	bl	800016c <strcmp>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d114      	bne.n	80076c4 <SCPIC_INIT+0xb8>
					{
						LOLA1.Config = JTAG;
 800769a:	4b1c      	ldr	r3, [pc, #112]	; (800770c <SCPIC_INIT+0x100>)
 800769c:	2206      	movs	r2, #6
 800769e:	705a      	strb	r2, [r3, #1]
						if(Task_add(Task_LOLA_INIT, PRIORITY_URGENT, 10000, 20)) strcpy(TXbuff, "OK");
 80076a0:	2314      	movs	r3, #20
 80076a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80076a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80076aa:	481e      	ldr	r0, [pc, #120]	; (8007724 <SCPIC_INIT+0x118>)
 80076ac:	f000 fb90 	bl	8007dd0 <Task_add>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d027      	beq.n	8007706 <SCPIC_INIT+0xfa>
 80076b6:	4b16      	ldr	r3, [pc, #88]	; (8007710 <SCPIC_INIT+0x104>)
 80076b8:	4a17      	ldr	r2, [pc, #92]	; (8007718 <SCPIC_INIT+0x10c>)
 80076ba:	8811      	ldrh	r1, [r2, #0]
 80076bc:	7892      	ldrb	r2, [r2, #2]
 80076be:	8019      	strh	r1, [r3, #0]
 80076c0:	709a      	strb	r2, [r3, #2]
 80076c2:	e020      	b.n	8007706 <SCPIC_INIT+0xfa>
					}
					else if(!strcmp(subword->otherParam, "FLASH"))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	4917      	ldr	r1, [pc, #92]	; (8007728 <SCPIC_INIT+0x11c>)
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7f8 fd4e 	bl	800016c <strcmp>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d117      	bne.n	8007706 <SCPIC_INIT+0xfa>
					{
						LOLA1.Config = SPI_FLASH;
 80076d6:	4b0d      	ldr	r3, [pc, #52]	; (800770c <SCPIC_INIT+0x100>)
 80076d8:	2201      	movs	r2, #1
 80076da:	705a      	strb	r2, [r3, #1]
						if(Task_add(Task_LOLA_INIT, PRIORITY_URGENT, 10000, 20)) strcpy(TXbuff, "OK");
 80076dc:	2314      	movs	r3, #20
 80076de:	f242 7210 	movw	r2, #10000	; 0x2710
 80076e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80076e6:	480f      	ldr	r0, [pc, #60]	; (8007724 <SCPIC_INIT+0x118>)
 80076e8:	f000 fb72 	bl	8007dd0 <Task_add>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d009      	beq.n	8007706 <SCPIC_INIT+0xfa>
 80076f2:	4b07      	ldr	r3, [pc, #28]	; (8007710 <SCPIC_INIT+0x104>)
 80076f4:	4a08      	ldr	r2, [pc, #32]	; (8007718 <SCPIC_INIT+0x10c>)
 80076f6:	8811      	ldrh	r1, [r2, #0]
 80076f8:	7892      	ldrb	r2, [r2, #2]
 80076fa:	8019      	strh	r1, [r3, #0]
 80076fc:	709a      	strb	r2, [r3, #2]
 80076fe:	e002      	b.n	8007706 <SCPIC_INIT+0xfa>
	if(length != 1) return;
 8007700:	bf00      	nop
 8007702:	e000      	b.n	8007706 <SCPIC_INIT+0xfa>
		if(subwords[0]->type != params) return;
 8007704:	bf00      	nop
					}
			}

		}
}
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bdb0      	pop	{r4, r5, r7, pc}
 800770c:	200003b0 	.word	0x200003b0
 8007710:	200003f0 	.word	0x200003f0
 8007714:	0800e110 	.word	0x0800e110
 8007718:	0800e0dc 	.word	0x0800e0dc
 800771c:	0800e124 	.word	0x0800e124
 8007720:	0800e130 	.word	0x0800e130
 8007724:	08008609 	.word	0x08008609
 8007728:	0800e138 	.word	0x0800e138

0800772c <SCPIC_FID>:

void SCPIC_FID(struct subword** subwords, int length)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d120      	bne.n	800777e <SCPIC_FID+0x52>
	if(subwords[0]->type != params) return;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d11d      	bne.n	8007782 <SCPIC_FID+0x56>
	Subword* subword = subwords[0];
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]
	strcpy(TXbuff,"OK\r\n");
 800774c:	4b0f      	ldr	r3, [pc, #60]	; (800778c <SCPIC_FID+0x60>)
 800774e:	4a10      	ldr	r2, [pc, #64]	; (8007790 <SCPIC_FID+0x64>)
 8007750:	6810      	ldr	r0, [r2, #0]
 8007752:	6018      	str	r0, [r3, #0]
 8007754:	7912      	ldrb	r2, [r2, #4]
 8007756:	711a      	strb	r2, [r3, #4]

	if(subword->type == params && subword->paramType == EVAL_P)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d111      	bne.n	8007784 <SCPIC_FID+0x58>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	7a1b      	ldrb	r3, [r3, #8]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d10d      	bne.n	8007784 <SCPIC_FID+0x58>
	{
		uint16_t id = LOLA_GET_FIRMWAREID();
 8007768:	f7ff faca 	bl	8006d00 <LOLA_GET_FIRMWAREID>
 800776c:	4603      	mov	r3, r0
 800776e:	817b      	strh	r3, [r7, #10]
		sprintf(TXbuff, "%x\r\n", id);
 8007770:	897b      	ldrh	r3, [r7, #10]
 8007772:	461a      	mov	r2, r3
 8007774:	4907      	ldr	r1, [pc, #28]	; (8007794 <SCPIC_FID+0x68>)
 8007776:	4805      	ldr	r0, [pc, #20]	; (800778c <SCPIC_FID+0x60>)
 8007778:	f002 ff10 	bl	800a59c <siprintf>
 800777c:	e002      	b.n	8007784 <SCPIC_FID+0x58>
	if(length != 1) return;
 800777e:	bf00      	nop
 8007780:	e000      	b.n	8007784 <SCPIC_FID+0x58>
	if(subwords[0]->type != params) return;
 8007782:	bf00      	nop

		default:

			break;
	}*/
}
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	200003f0 	.word	0x200003f0
 8007790:	0800e140 	.word	0x0800e140
 8007794:	0800e0e0 	.word	0x0800e0e0

08007798 <SCPI_EXECUTE>:

#include "SCPI_Lib.h"
#include "RS485.h"

void SCPI_EXECUTE()
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
	char* formatedMessage = ReformatString(RXbuff, RS485BUFFSIZE); //tady je změna
 800779e:	217d      	movs	r1, #125	; 0x7d
 80077a0:	482e      	ldr	r0, [pc, #184]	; (800785c <SCPI_EXECUTE+0xc4>)
 80077a2:	f000 f861 	bl	8007868 <ReformatString>
 80077a6:	60b8      	str	r0, [r7, #8]

		strcpy(TXbuff, "ERR\r\n");
 80077a8:	4b2d      	ldr	r3, [pc, #180]	; (8007860 <SCPI_EXECUTE+0xc8>)
 80077aa:	4a2e      	ldr	r2, [pc, #184]	; (8007864 <SCPI_EXECUTE+0xcc>)
 80077ac:	6810      	ldr	r0, [r2, #0]
 80077ae:	6018      	str	r0, [r3, #0]
 80077b0:	8892      	ldrh	r2, [r2, #4]
 80077b2:	809a      	strh	r2, [r3, #4]

		Word* word = generateWordDirect(formatedMessage);
 80077b4:	68b8      	ldr	r0, [r7, #8]
 80077b6:	f000 f96b 	bl	8007a90 <generateWordDirect>
 80077ba:	6078      	str	r0, [r7, #4]

		free(formatedMessage);
 80077bc:	68b8      	ldr	r0, [r7, #8]
 80077be:	f000 ffc5 	bl	800874c <free>

		//if(word->address == RackID || word->address == 1)
		if (word != NULL) {
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d045      	beq.n	8007854 <SCPI_EXECUTE+0xbc>
			executeWord(word);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fa43 	bl	8007c54 <executeWord>

			for (int i = word->subwordsCount - 1; i >= 0; i--)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	e02f      	b.n	8007838 <SCPI_EXECUTE+0xa0>
			{
				if (word->subwords[i]->paramType == OTHER_P && word->subwords[i]->otherParam != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	7a1b      	ldrb	r3, [r3, #8]
 80077e6:	2b05      	cmp	r3, #5
 80077e8:	d11a      	bne.n	8007820 <SCPI_EXECUTE+0x88>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d011      	beq.n	8007820 <SCPI_EXECUTE+0x88>
				{
					free(word->subwords[i]->otherParam);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	4618      	mov	r0, r3
 800780c:	f000 ff9e 	bl	800874c <free>
					word->subwords[i]->otherParam = NULL;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2200      	movs	r2, #0
 800781e:	615a      	str	r2, [r3, #20]
				}
				free(word->subwords[i]);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4618      	mov	r0, r3
 800782e:	f000 ff8d 	bl	800874c <free>
			for (int i = word->subwordsCount - 1; i >= 0; i--)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3b01      	subs	r3, #1
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	dacc      	bge.n	80077d8 <SCPI_EXECUTE+0x40>
			}
			free(word->subwords);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	4618      	mov	r0, r3
 8007844:	f000 ff82 	bl	800874c <free>
			word->subwords = NULL;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	609a      	str	r2, [r3, #8]
			free(word);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 ff7c 	bl	800874c <free>
		}
}
 8007854:	bf00      	nop
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20000470 	.word	0x20000470
 8007860:	200003f0 	.word	0x200003f0
 8007864:	0800e148 	.word	0x0800e148

08007868 <ReformatString>:
//int defaultClassIndex;
int classLength = 0;
int defaultClassIndex = -1;

char* ReformatString(char* chararr, int arrMaxSize)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
	char* temp = (char*)calloc(strlen(chararr) + 1, sizeof(char));
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7f8 fc84 	bl	8000180 <strlen>
 8007878:	4603      	mov	r3, r0
 800787a:	3301      	adds	r3, #1
 800787c:	2101      	movs	r1, #1
 800787e:	4618      	mov	r0, r3
 8007880:	f000 ff40 	bl	8008704 <calloc>
 8007884:	4603      	mov	r3, r0
 8007886:	60bb      	str	r3, [r7, #8]
	strcpy(temp, chararr);
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	68b8      	ldr	r0, [r7, #8]
 800788c:	f003 fa29 	bl	800ace2 <strcpy>
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	e015      	b.n	80078c2 <ReformatString+0x5a>
	{
		if (chararr[i] == '\r' || chararr[i] == '\n')
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	4413      	add	r3, r2
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b0d      	cmp	r3, #13
 80078a0:	d005      	beq.n	80078ae <ReformatString+0x46>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	4413      	add	r3, r2
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b0a      	cmp	r3, #10
 80078ac:	d106      	bne.n	80078bc <ReformatString+0x54>
		{
			temp[i] = '\0';
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	4413      	add	r3, r2
 80078b4:	2200      	movs	r2, #0
 80078b6:	701a      	strb	r2, [r3, #0]
			return temp;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	e00d      	b.n	80078d8 <ReformatString+0x70>
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3301      	adds	r3, #1
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	da05      	bge.n	80078d6 <ReformatString+0x6e>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	4413      	add	r3, r2
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1df      	bne.n	8007896 <ReformatString+0x2e>
		}
	}
	return temp;
 80078d6:	68bb      	ldr	r3, [r7, #8]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <generateSubwordn>:

Subword* generateSubwordn(char* subcommand, int length, Class* class)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	; 0x28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
	Subword* final = (Subword*)malloc(sizeof(Subword));
 80078ec:	2018      	movs	r0, #24
 80078ee:	f000 ff25 	bl	800873c <malloc>
 80078f2:	4603      	mov	r3, r0
 80078f4:	61fb      	str	r3, [r7, #28]
	final->type = params;
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	2201      	movs	r2, #1
 80078fa:	701a      	strb	r2, [r3, #0]
	final->integerParam = 0;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	2200      	movs	r2, #0
 8007900:	611a      	str	r2, [r3, #16]
	final->otherParam = NULL;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	2200      	movs	r2, #0
 8007906:	615a      	str	r2, [r3, #20]
	final->paramType = 0;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2200      	movs	r2, #0
 800790c:	721a      	strb	r2, [r3, #8]

	for (int i = 0; i < class->functionsLength; i++)
 800790e:	2300      	movs	r3, #0
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
 8007912:	e018      	b.n	8007946 <generateSubwordn+0x66>
	{
		if (!strncmp(subcommand, class->functions[i].name, length))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	4413      	add	r3, r2
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	4619      	mov	r1, r3
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f003 f92d 	bl	800ab84 <strncmp>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d107      	bne.n	8007940 <generateSubwordn+0x60>
		{
			final->type = function;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
			final->functionIndex = i;
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793a:	605a      	str	r2, [r3, #4]
			return final;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	e06e      	b.n	8007a1e <generateSubwordn+0x13e>
	for (int i = 0; i < class->functionsLength; i++)
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	3301      	adds	r3, #1
 8007944:	627b      	str	r3, [r7, #36]	; 0x24
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800794c:	429a      	cmp	r2, r3
 800794e:	dbe1      	blt.n	8007914 <generateSubwordn+0x34>
		}
	}

	for (int i = 0; i < paramsLength; i++)
 8007950:	2300      	movs	r3, #0
 8007952:	623b      	str	r3, [r7, #32]
 8007954:	e014      	b.n	8007980 <generateSubwordn+0xa0>
	{
		if (!strncmp(subcommand, paramsList[i], length))
 8007956:	4a34      	ldr	r2, [pc, #208]	; (8007a28 <generateSubwordn+0x148>)
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	4619      	mov	r1, r3
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f003 f90e 	bl	800ab84 <strncmp>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d105      	bne.n	800797a <generateSubwordn+0x9a>
		{
			final->paramType = (ParamTypes)i;
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	b2da      	uxtb	r2, r3
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	721a      	strb	r2, [r3, #8]
			return final;
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	e051      	b.n	8007a1e <generateSubwordn+0x13e>
	for (int i = 0; i < paramsLength; i++)
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	3301      	adds	r3, #1
 800797e:	623b      	str	r3, [r7, #32]
 8007980:	4b2a      	ldr	r3, [pc, #168]	; (8007a2c <generateSubwordn+0x14c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6a3a      	ldr	r2, [r7, #32]
 8007986:	429a      	cmp	r2, r3
 8007988:	dbe5      	blt.n	8007956 <generateSubwordn+0x76>
		}
	}

	float f;
	if (strchr(subcommand, '.'))
 800798a:	212e      	movs	r1, #46	; 0x2e
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f002 ff05 	bl	800a79c <strchr>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01a      	beq.n	80079ce <generateSubwordn+0xee>
	{
		if ((f = atof(subcommand)) != 0)
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 feac 	bl	80086f6 <atof>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4610      	mov	r0, r2
 80079a4:	4619      	mov	r1, r3
 80079a6:	f7f9 f8a7 	bl	8000af8 <__aeabi_d2f>
 80079aa:	4603      	mov	r3, r0
 80079ac:	61bb      	str	r3, [r7, #24]
 80079ae:	f04f 0100 	mov.w	r1, #0
 80079b2:	69b8      	ldr	r0, [r7, #24]
 80079b4:	f7f9 fb92 	bl	80010dc <__aeabi_fcmpeq>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d107      	bne.n	80079ce <generateSubwordn+0xee>
		{
			final->paramType = FLOAT_P;
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	2204      	movs	r2, #4
 80079c2:	721a      	strb	r2, [r3, #8]
			final->floatParam = f;
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	60da      	str	r2, [r3, #12]
			return final;
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	e027      	b.n	8007a1e <generateSubwordn+0x13e>
		}
	}

	int n;
	if ((n = atoi(subcommand)))
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 fe94 	bl	80086fc <atoi>
 80079d4:	6178      	str	r0, [r7, #20]
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <generateSubwordn+0x10c>
	{
		final->paramType = INT_P;
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	2203      	movs	r2, #3
 80079e0:	721a      	strb	r2, [r3, #8]
		final->integerParam = n;
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	611a      	str	r2, [r3, #16]
		return final;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	e018      	b.n	8007a1e <generateSubwordn+0x13e>
	}

	final->paramType = OTHER_P;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	2205      	movs	r2, #5
 80079f0:	721a      	strb	r2, [r3, #8]
	final->otherParam = (char*)calloc(length + 1, sizeof(char));
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	3301      	adds	r3, #1
 80079f6:	2101      	movs	r1, #1
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fe83 	bl	8008704 <calloc>
 80079fe:	4603      	mov	r3, r0
 8007a00:	461a      	mov	r2, r3
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	615a      	str	r2, [r3, #20]
	if (final->otherParam != NULL) strncpy(final->otherParam, subcommand, length);
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d006      	beq.n	8007a1c <generateSubwordn+0x13c>
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	68f9      	ldr	r1, [r7, #12]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f003 f8c6 	bl	800aba8 <strncpy>
	return final;
 8007a1c:	69fb      	ldr	r3, [r7, #28]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3728      	adds	r7, #40	; 0x28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	2000000c 	.word	0x2000000c
 8007a2c:	20000018 	.word	0x20000018

08007a30 <findClassIndex>:

int findClassIndex(char* subcommand, int length)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < classLength; i++)
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	e015      	b.n	8007a6c <findClassIndex+0x3c>
	{
		if (!strncmp(subcommand, classList[i].name, length))
 8007a40:	4b10      	ldr	r3, [pc, #64]	; (8007a84 <findClassIndex+0x54>)
 8007a42:	6819      	ldr	r1, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4613      	mov	r3, r2
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	440b      	add	r3, r1
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f003 f894 	bl	800ab84 <strncmp>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <findClassIndex+0x36>
		{
			return i;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	e009      	b.n	8007a7a <findClassIndex+0x4a>
	for (int i = 0; i < classLength; i++)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	4b06      	ldr	r3, [pc, #24]	; (8007a88 <findClassIndex+0x58>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	dbe4      	blt.n	8007a40 <findClassIndex+0x10>
		}
	}

	return defaultClassIndex;
 8007a76:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <findClassIndex+0x5c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	200004f0 	.word	0x200004f0
 8007a88:	200004f4 	.word	0x200004f4
 8007a8c:	2000001c 	.word	0x2000001c

08007a90 <generateWordDirect>:

Word* generateWordDirect(char* command)
{
 8007a90:	b590      	push	{r4, r7, lr}
 8007a92:	b08d      	sub	sp, #52	; 0x34
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	Word* final = (Word*)malloc(sizeof(Word));
 8007a98:	2010      	movs	r0, #16
 8007a9a:	f000 fe4f 	bl	800873c <malloc>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	61bb      	str	r3, [r7, #24]
	final->address = -1;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa8:	601a      	str	r2, [r3, #0]
	final->subwords = NULL;
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2200      	movs	r2, #0
 8007aae:	609a      	str	r2, [r3, #8]
	final->subwordsCount = 0;
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	60da      	str	r2, [r3, #12]

	char* currSymbol = command;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int intermediateLength = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	62bb      	str	r3, [r7, #40]	; 0x28
	Class* currentClass = classList;
 8007abe:	4b62      	ldr	r3, [pc, #392]	; (8007c48 <generateWordDirect+0x1b8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	627b      	str	r3, [r7, #36]	; 0x24
	int currentClassIndex = defaultClassIndex;
 8007ac4:	4b61      	ldr	r3, [pc, #388]	; (8007c4c <generateWordDirect+0x1bc>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	617b      	str	r3, [r7, #20]

	int isLast = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	623b      	str	r3, [r7, #32]
	int firstSubWord = 1;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	61fb      	str	r3, [r7, #28]

	while (!isLast)
 8007ad2:	e0af      	b.n	8007c34 <generateWordDirect+0x1a4>
	{
		isLast = *currSymbol == '\0';
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	bf0c      	ite	eq
 8007adc:	2301      	moveq	r3, #1
 8007ade:	2300      	movne	r3, #0
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	623b      	str	r3, [r7, #32]
		switch (*currSymbol)
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2b3f      	cmp	r3, #63	; 0x3f
 8007aea:	d005      	beq.n	8007af8 <generateWordDirect+0x68>
 8007aec:	2b3f      	cmp	r3, #63	; 0x3f
 8007aee:	dc65      	bgt.n	8007bbc <generateWordDirect+0x12c>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <generateWordDirect+0x68>
 8007af4:	2b3a      	cmp	r3, #58	; 0x3a
 8007af6:	d161      	bne.n	8007bbc <generateWordDirect+0x12c>
		{
		case ':':
		case '\0':
		case '?':

			if (intermediateLength == 0) break;
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d062      	beq.n	8007bc4 <generateWordDirect+0x134>
			if (final->address == -1)
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b06:	d10a      	bne.n	8007b1e <generateWordDirect+0x8e>
			{
				final->address = atoi(currSymbol - intermediateLength);
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	425b      	negs	r3, r3
 8007b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b0e:	4413      	add	r3, r2
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fdf3 	bl	80086fc <atoi>
 8007b16:	4602      	mov	r2, r0
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	e04b      	b.n	8007bb6 <generateWordDirect+0x126>
			}

			else
			{
				if (firstSubWord)
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d020      	beq.n	8007b66 <generateWordDirect+0xd6>
				{
					int index = findClassIndex(currSymbol - intermediateLength, intermediateLength);
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	425b      	negs	r3, r3
 8007b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b2a:	4413      	add	r3, r2
 8007b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff ff7e 	bl	8007a30 <findClassIndex>
 8007b34:	6138      	str	r0, [r7, #16]
					currentClass = &classList[index];
 8007b36:	4b44      	ldr	r3, [pc, #272]	; (8007c48 <generateWordDirect+0x1b8>)
 8007b38:	6819      	ldr	r1, [r3, #0]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	440b      	add	r3, r1
 8007b46:	627b      	str	r3, [r7, #36]	; 0x24
					final->classIndex = index;
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	605a      	str	r2, [r3, #4]
					currentClassIndex = index;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	617b      	str	r3, [r7, #20]
					firstSubWord = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61fb      	str	r3, [r7, #28]
					if (currentClassIndex != defaultClassIndex)
 8007b56:	4b3d      	ldr	r3, [pc, #244]	; (8007c4c <generateWordDirect+0x1bc>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d002      	beq.n	8007b66 <generateWordDirect+0xd6>
					{
						intermediateLength = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	62bb      	str	r3, [r7, #40]	; 0x28
						break;
 8007b64:	e02f      	b.n	8007bc6 <generateWordDirect+0x136>
					}
				}

				final->subwordsCount++;
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	60da      	str	r2, [r3, #12]
				Subword** intermediate = (Subword*)realloc(final->subwords, final->subwordsCount * sizeof(Subword*));
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	f000 fe99 	bl	80088b4 <realloc>
 8007b82:	60f8      	str	r0, [r7, #12]
				if (intermediate != NULL)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d015      	beq.n	8007bb6 <generateWordDirect+0x126>
				{
					final->subwords = intermediate;																				///??????
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	609a      	str	r2, [r3, #8]
					final->subwords[final->subwordsCount - 1] = generateSubwordn(currSymbol - intermediateLength, intermediateLength, currentClass);
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	425b      	negs	r3, r3
 8007b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b96:	18d0      	adds	r0, r2, r3
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	18d4      	adds	r4, r2, r3
 8007baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bae:	f7ff fe97 	bl	80078e0 <generateSubwordn>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	6023      	str	r3, [r4, #0]
				}
			}

			intermediateLength = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	62bb      	str	r3, [r7, #40]	; 0x28

			break;
 8007bba:	e004      	b.n	8007bc6 <generateWordDirect+0x136>

		default:
			intermediateLength++;
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8007bc2:	e000      	b.n	8007bc6 <generateWordDirect+0x136>
			if (intermediateLength == 0) break;
 8007bc4:	bf00      	nop

		}

		if (*currSymbol == '?')
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b3f      	cmp	r3, #63	; 0x3f
 8007bcc:	d128      	bne.n	8007c20 <generateWordDirect+0x190>
		{
			final->subwordsCount++;
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	60da      	str	r2, [r3, #12]
			Subword** intermediate = (Subword*)realloc(final->subwords, final->subwordsCount * sizeof(Subword));
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	4619      	mov	r1, r3
 8007be2:	460b      	mov	r3, r1
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	440b      	add	r3, r1
 8007be8:	00db      	lsls	r3, r3, #3
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f000 fe61 	bl	80088b4 <realloc>
 8007bf2:	60b8      	str	r0, [r7, #8]
			if (intermediate != NULL)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d012      	beq.n	8007c20 <generateWordDirect+0x190>
			{
				final->subwords = intermediate;																						///??????
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	609a      	str	r2, [r3, #8]
				final->subwords[final->subwordsCount - 1] = generateSubwordn("?", 1, currentClass);
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	18d4      	adds	r4, r2, r3
 8007c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c14:	2101      	movs	r1, #1
 8007c16:	480e      	ldr	r0, [pc, #56]	; (8007c50 <generateWordDirect+0x1c0>)
 8007c18:	f7ff fe62 	bl	80078e0 <generateSubwordn>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	6023      	str	r3, [r4, #0]
			}
		}

		currSymbol += !isLast;
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bf0c      	ite	eq
 8007c26:	2301      	moveq	r3, #1
 8007c28:	2300      	movne	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	4413      	add	r3, r2
 8007c32:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (!isLast)
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f43f af4c 	beq.w	8007ad4 <generateWordDirect+0x44>
	}

	return final;
 8007c3c:	69bb      	ldr	r3, [r7, #24]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3734      	adds	r7, #52	; 0x34
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd90      	pop	{r4, r7, pc}
 8007c46:	bf00      	nop
 8007c48:	200004f0 	.word	0x200004f0
 8007c4c:	2000001c 	.word	0x2000001c
 8007c50:	0800e15c 	.word	0x0800e15c

08007c54 <executeWord>:

void executeWord(Word* word)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	if (word->subwordsCount < 1) return;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	dd27      	ble.n	8007cb4 <executeWord+0x60>
	if (word->subwords == NULL) return;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d025      	beq.n	8007cb8 <executeWord+0x64>
	if (word->subwords[0]->type != function) return;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d121      	bne.n	8007cbc <executeWord+0x68>
	int classIndex = word->classIndex;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	60fb      	str	r3, [r7, #12]
	int functionIndex = word->subwords[0]->functionIndex;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	60bb      	str	r3, [r7, #8]
	classList[classIndex].functions[functionIndex].run(word->subwords + 1, word->subwordsCount - 1);
 8007c88:	4b0e      	ldr	r3, [pc, #56]	; (8007cc4 <executeWord+0x70>)
 8007c8a:	6819      	ldr	r1, [r3, #0]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	440b      	add	r3, r1
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	4413      	add	r3, r2
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6892      	ldr	r2, [r2, #8]
 8007ca6:	1d10      	adds	r0, r2, #4
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	68d2      	ldr	r2, [r2, #12]
 8007cac:	3a01      	subs	r2, #1
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4798      	blx	r3
 8007cb2:	e004      	b.n	8007cbe <executeWord+0x6a>
	if (word->subwordsCount < 1) return;
 8007cb4:	bf00      	nop
 8007cb6:	e002      	b.n	8007cbe <executeWord+0x6a>
	if (word->subwords == NULL) return;
 8007cb8:	bf00      	nop
 8007cba:	e000      	b.n	8007cbe <executeWord+0x6a>
	if (word->subwords[0]->type != function) return;
 8007cbc:	bf00      	nop
}
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	200004f0 	.word	0x200004f0

08007cc8 <addClass>:
	if (isDefault) defaultClassIndex = classLength;
	classLength++;
}

void addClass(Class* class, int isDefault)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
	classList = (Class*)realloc(classList, (classLength + 1) * sizeof(Class));
 8007cd2:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <addClass+0x68>)
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	4b17      	ldr	r3, [pc, #92]	; (8007d34 <addClass+0x6c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	4619      	mov	r1, r3
 8007cde:	460b      	mov	r3, r1
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	440b      	add	r3, r1
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4610      	mov	r0, r2
 8007cea:	f000 fde3 	bl	80088b4 <realloc>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4a0f      	ldr	r2, [pc, #60]	; (8007d30 <addClass+0x68>)
 8007cf2:	6013      	str	r3, [r2, #0]
	classList[classLength] = *class;
 8007cf4:	4b0e      	ldr	r3, [pc, #56]	; (8007d30 <addClass+0x68>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <addClass+0x6c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	460b      	mov	r3, r1
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	440b      	add	r3, r1
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (isDefault) defaultClassIndex = classLength;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <addClass+0x56>
 8007d16:	4b07      	ldr	r3, [pc, #28]	; (8007d34 <addClass+0x6c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a07      	ldr	r2, [pc, #28]	; (8007d38 <addClass+0x70>)
 8007d1c:	6013      	str	r3, [r2, #0]
	classLength++;
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <addClass+0x6c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3301      	adds	r3, #1
 8007d24:	4a03      	ldr	r2, [pc, #12]	; (8007d34 <addClass+0x6c>)
 8007d26:	6013      	str	r3, [r2, #0]
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	200004f0 	.word	0x200004f0
 8007d34:	200004f4 	.word	0x200004f4
 8007d38:	2000001c 	.word	0x2000001c

08007d3c <kernel_init>:
long Task_count(void)
{
    return TaskList->TaskCount;
}

int kernel_init(long MaxTasksinput) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]

    TaskList = (TaskList_struct*)malloc(sizeof(TaskList_struct));
 8007d44:	202c      	movs	r0, #44	; 0x2c
 8007d46:	f000 fcf9 	bl	800873c <malloc>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	4b1e      	ldr	r3, [pc, #120]	; (8007dc8 <kernel_init+0x8c>)
 8007d50:	601a      	str	r2, [r3, #0]
    if (TaskList == NULL) {
 8007d52:	4b1d      	ldr	r3, [pc, #116]	; (8007dc8 <kernel_init+0x8c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d104      	bne.n	8007d64 <kernel_init+0x28>
        perror("Failed to allocate memory whili initializing SimpleOS");
 8007d5a:	481c      	ldr	r0, [pc, #112]	; (8007dcc <kernel_init+0x90>)
 8007d5c:	f002 fc16 	bl	800a58c <perror>
        return 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	e02c      	b.n	8007dbe <kernel_init+0x82>
    }

    TaskList->TaskCount = 0;
 8007d64:	4b18      	ldr	r3, [pc, #96]	; (8007dc8 <kernel_init+0x8c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]
    TaskList->TaskFunc = NULL;
 8007d6c:	4b16      	ldr	r3, [pc, #88]	; (8007dc8 <kernel_init+0x8c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2200      	movs	r2, #0
 8007d72:	605a      	str	r2, [r3, #4]
    TaskList->TaskTime = NULL;
 8007d74:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <kernel_init+0x8c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	609a      	str	r2, [r3, #8]
    TaskList->TaskMaxTries = NULL;
 8007d7c:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <kernel_init+0x8c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2200      	movs	r2, #0
 8007d82:	60da      	str	r2, [r3, #12]
    TaskList->TaskPriority = NULL;
 8007d84:	4b10      	ldr	r3, [pc, #64]	; (8007dc8 <kernel_init+0x8c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	611a      	str	r2, [r3, #16]

    TaskList->ERRbufferSize = 0;
 8007d8c:	4b0e      	ldr	r3, [pc, #56]	; (8007dc8 <kernel_init+0x8c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2200      	movs	r2, #0
 8007d92:	619a      	str	r2, [r3, #24]
    TaskList->ERRbuffer = NULL;
 8007d94:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <kernel_init+0x8c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	615a      	str	r2, [r3, #20]

    TaskList->status= KERNEL_NOT_RUNNING;
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <kernel_init+0x8c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2202      	movs	r2, #2
 8007da2:	771a      	strb	r2, [r3, #28]
    TaskList->MaxTasks = MaxTasksinput;
 8007da4:	4b08      	ldr	r3, [pc, #32]	; (8007dc8 <kernel_init+0x8c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	621a      	str	r2, [r3, #32]

    TaskList->kernelRunningFlag = 0;
 8007dac:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <kernel_init+0x8c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2200      	movs	r2, #0
 8007db2:	625a      	str	r2, [r3, #36]	; 0x24
    TaskList->kernelHaltFlag = 0;
 8007db4:	4b04      	ldr	r3, [pc, #16]	; (8007dc8 <kernel_init+0x8c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2200      	movs	r2, #0
 8007dba:	629a      	str	r2, [r3, #40]	; 0x28

    return 1;
 8007dbc:	2301      	movs	r3, #1
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	200004f8 	.word	0x200004f8
 8007dcc:	0800e168 	.word	0x0800e168

08007dd0 <Task_add>:

    return 1;
}

int Task_add(TaskFunc_t func, int priority, long time, long MaxTries) 
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
    if (TaskList->TaskCount >= TaskList->MaxTasks)
 8007dde:	4b47      	ldr	r3, [pc, #284]	; (8007efc <Task_add+0x12c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	4b45      	ldr	r3, [pc, #276]	; (8007efc <Task_add+0x12c>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	db01      	blt.n	8007df2 <Task_add+0x22>
    {
        return 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	e07f      	b.n	8007ef2 <Task_add+0x122>
    }

    TaskFunc_t* newFuncs = (TaskFunc_t*)realloc(TaskList->TaskFunc, (TaskList->TaskCount + 1) * sizeof(TaskFunc_t));
 8007df2:	4b42      	ldr	r3, [pc, #264]	; (8007efc <Task_add+0x12c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	685a      	ldr	r2, [r3, #4]
 8007df8:	4b40      	ldr	r3, [pc, #256]	; (8007efc <Task_add+0x12c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4619      	mov	r1, r3
 8007e04:	4610      	mov	r0, r2
 8007e06:	f000 fd55 	bl	80088b4 <realloc>
 8007e0a:	61f8      	str	r0, [r7, #28]
    long* newTimes = (long*)realloc(TaskList->TaskTime, (TaskList->TaskCount + 1) * sizeof(long));
 8007e0c:	4b3b      	ldr	r3, [pc, #236]	; (8007efc <Task_add+0x12c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	4b3a      	ldr	r3, [pc, #232]	; (8007efc <Task_add+0x12c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	f000 fd48 	bl	80088b4 <realloc>
 8007e24:	61b8      	str	r0, [r7, #24]
    long* newMaxTries = (long*)realloc(TaskList->TaskMaxTries, (TaskList->TaskCount + 1) * sizeof(long));
 8007e26:	4b35      	ldr	r3, [pc, #212]	; (8007efc <Task_add+0x12c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	4b33      	ldr	r3, [pc, #204]	; (8007efc <Task_add+0x12c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3301      	adds	r3, #1
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4619      	mov	r1, r3
 8007e38:	4610      	mov	r0, r2
 8007e3a:	f000 fd3b 	bl	80088b4 <realloc>
 8007e3e:	6178      	str	r0, [r7, #20]
    int* newPriorities = (int*)realloc(TaskList->TaskPriority, (TaskList->TaskCount + 1) * sizeof(int));
 8007e40:	4b2e      	ldr	r3, [pc, #184]	; (8007efc <Task_add+0x12c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	691a      	ldr	r2, [r3, #16]
 8007e46:	4b2d      	ldr	r3, [pc, #180]	; (8007efc <Task_add+0x12c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4619      	mov	r1, r3
 8007e52:	4610      	mov	r0, r2
 8007e54:	f000 fd2e 	bl	80088b4 <realloc>
 8007e58:	6138      	str	r0, [r7, #16]

    if (newFuncs == NULL || newTimes == NULL || newMaxTries == NULL || newPriorities == NULL)
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d008      	beq.n	8007e72 <Task_add+0xa2>
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d005      	beq.n	8007e72 <Task_add+0xa2>
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <Task_add+0xa2>
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <Task_add+0xa6>
    {
        return 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	e03d      	b.n	8007ef2 <Task_add+0x122>
    }

    TaskList->TaskFunc = newFuncs;
 8007e76:	4b21      	ldr	r3, [pc, #132]	; (8007efc <Task_add+0x12c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	605a      	str	r2, [r3, #4]
    TaskList->TaskFunc[TaskList->TaskCount] = func;
 8007e7e:	4b1f      	ldr	r3, [pc, #124]	; (8007efc <Task_add+0x12c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	4b1d      	ldr	r3, [pc, #116]	; (8007efc <Task_add+0x12c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	601a      	str	r2, [r3, #0]

    TaskList->TaskTime = newTimes;
 8007e92:	4b1a      	ldr	r3, [pc, #104]	; (8007efc <Task_add+0x12c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	609a      	str	r2, [r3, #8]
    TaskList->TaskTime[TaskList->TaskCount] = time;
 8007e9a:	4b18      	ldr	r3, [pc, #96]	; (8007efc <Task_add+0x12c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	4b16      	ldr	r3, [pc, #88]	; (8007efc <Task_add+0x12c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	601a      	str	r2, [r3, #0]

    TaskList->TaskMaxTries = newMaxTries;
 8007eae:	4b13      	ldr	r3, [pc, #76]	; (8007efc <Task_add+0x12c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	60da      	str	r2, [r3, #12]
    TaskList->TaskMaxTries[TaskList->TaskCount] = MaxTries;
 8007eb6:	4b11      	ldr	r3, [pc, #68]	; (8007efc <Task_add+0x12c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68da      	ldr	r2, [r3, #12]
 8007ebc:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <Task_add+0x12c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	601a      	str	r2, [r3, #0]

    TaskList->TaskPriority = newPriorities;
 8007eca:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <Task_add+0x12c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	611a      	str	r2, [r3, #16]
    TaskList->TaskPriority[TaskList->TaskCount] = priority;
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <Task_add+0x12c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	691a      	ldr	r2, [r3, #16]
 8007ed8:	4b08      	ldr	r3, [pc, #32]	; (8007efc <Task_add+0x12c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	601a      	str	r2, [r3, #0]

    TaskList->TaskCount++;
 8007ee6:	4b05      	ldr	r3, [pc, #20]	; (8007efc <Task_add+0x12c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	3201      	adds	r2, #1
 8007eee:	601a      	str	r2, [r3, #0]

    return 1;
 8007ef0:	2301      	movs	r3, #1
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3720      	adds	r7, #32
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	200004f8 	.word	0x200004f8

08007f00 <compare_priority>:

// Comparator function for qsort
int compare_priority(const void* a, const void* b) {
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
    int index_a = *(const int*)a;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60fb      	str	r3, [r7, #12]
    int index_b = *(const int*)b;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60bb      	str	r3, [r7, #8]
    return global_priorities[index_b] - global_priorities[index_a];
 8007f16:	4b09      	ldr	r3, [pc, #36]	; (8007f3c <compare_priority+0x3c>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	4b06      	ldr	r3, [pc, #24]	; (8007f3c <compare_priority+0x3c>)
 8007f24:	6819      	ldr	r1, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	1ad3      	subs	r3, r2, r3
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	20000558 	.word	0x20000558

08007f40 <TaskList_sort_priorities>:

void TaskList_sort_priorities()
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
    // Create an array of indices
    int* indices = (int*)malloc(TaskList->TaskCount * sizeof(int));
 8007f46:	4b74      	ldr	r3, [pc, #464]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fbf4 	bl	800873c <malloc>
 8007f54:	4603      	mov	r3, r0
 8007f56:	613b      	str	r3, [r7, #16]
    for (long i = 0; i < TaskList->TaskCount; ++i) {
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	e008      	b.n	8007f70 <TaskList_sort_priorities+0x30>
        indices[i] = i;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	4413      	add	r3, r2
 8007f66:	69fa      	ldr	r2, [r7, #28]
 8007f68:	601a      	str	r2, [r3, #0]
    for (long i = 0; i < TaskList->TaskCount; ++i) {
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	61fb      	str	r3, [r7, #28]
 8007f70:	4b69      	ldr	r3, [pc, #420]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	69fa      	ldr	r2, [r7, #28]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	dbf0      	blt.n	8007f5e <TaskList_sort_priorities+0x1e>
    }

    // Set the global priorities pointer to the TaskPriority array
    global_priorities = TaskList->TaskPriority;
 8007f7c:	4b66      	ldr	r3, [pc, #408]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	4a66      	ldr	r2, [pc, #408]	; (800811c <TaskList_sort_priorities+0x1dc>)
 8007f84:	6013      	str	r3, [r2, #0]

    // Sort indices based on TaskPriority
    qsort(indices, TaskList->TaskCount, sizeof(int), compare_priority);
 8007f86:	4b64      	ldr	r3, [pc, #400]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4b64      	ldr	r3, [pc, #400]	; (8008120 <TaskList_sort_priorities+0x1e0>)
 8007f90:	2204      	movs	r2, #4
 8007f92:	6938      	ldr	r0, [r7, #16]
 8007f94:	f001 fba8 	bl	80096e8 <qsort>

    // Allocate temporary arrays for sorted elements
    TaskFunc_t* sorted_TaskFunc = (TaskFunc_t*)malloc(TaskList->TaskCount * sizeof(TaskFunc_t));
 8007f98:	4b5f      	ldr	r3, [pc, #380]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fbcb 	bl	800873c <malloc>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	60fb      	str	r3, [r7, #12]
    long* sorted_TaskTime = (long*)malloc(TaskList->TaskCount * sizeof(long));
 8007faa:	4b5b      	ldr	r3, [pc, #364]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fbc2 	bl	800873c <malloc>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	60bb      	str	r3, [r7, #8]
    long* sorted_TaskMaxTries = (long*)malloc(TaskList->TaskCount * sizeof(long));
 8007fbc:	4b56      	ldr	r3, [pc, #344]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fbb9 	bl	800873c <malloc>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	607b      	str	r3, [r7, #4]
    int* sorted_TaskPriority = (int*)malloc(TaskList->TaskCount * sizeof(int));
 8007fce:	4b52      	ldr	r3, [pc, #328]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fbb0 	bl	800873c <malloc>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	603b      	str	r3, [r7, #0]

    // Populate sorted arrays
    for (long i = 0; i < TaskList->TaskCount; i++) {
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61bb      	str	r3, [r7, #24]
 8007fe4:	e042      	b.n	800806c <TaskList_sort_priorities+0x12c>
        sorted_TaskFunc[i] = TaskList->TaskFunc[indices[i]];
 8007fe6:	4b4c      	ldr	r3, [pc, #304]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	6939      	ldr	r1, [r7, #16]
 8007ff2:	440b      	add	r3, r1
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	68f9      	ldr	r1, [r7, #12]
 8008000:	440b      	add	r3, r1
 8008002:	6812      	ldr	r2, [r2, #0]
 8008004:	601a      	str	r2, [r3, #0]
        sorted_TaskTime[i] = TaskList->TaskTime[indices[i]];
 8008006:	4b44      	ldr	r3, [pc, #272]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	6939      	ldr	r1, [r7, #16]
 8008012:	440b      	add	r3, r1
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	441a      	add	r2, r3
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	68b9      	ldr	r1, [r7, #8]
 8008020:	440b      	add	r3, r1
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	601a      	str	r2, [r3, #0]
        sorted_TaskMaxTries[i] = TaskList->TaskMaxTries[indices[i]];
 8008026:	4b3c      	ldr	r3, [pc, #240]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	6939      	ldr	r1, [r7, #16]
 8008032:	440b      	add	r3, r1
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	441a      	add	r2, r3
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	440b      	add	r3, r1
 8008042:	6812      	ldr	r2, [r2, #0]
 8008044:	601a      	str	r2, [r3, #0]
        sorted_TaskPriority[i] = TaskList->TaskPriority[indices[i]];
 8008046:	4b34      	ldr	r3, [pc, #208]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	6939      	ldr	r1, [r7, #16]
 8008052:	440b      	add	r3, r1
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	441a      	add	r2, r3
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	440b      	add	r3, r1
 8008062:	6812      	ldr	r2, [r2, #0]
 8008064:	601a      	str	r2, [r3, #0]
    for (long i = 0; i < TaskList->TaskCount; i++) {
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	3301      	adds	r3, #1
 800806a:	61bb      	str	r3, [r7, #24]
 800806c:	4b2a      	ldr	r3, [pc, #168]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	429a      	cmp	r2, r3
 8008076:	dbb6      	blt.n	8007fe6 <TaskList_sort_priorities+0xa6>
    }

    // Copy sorted arrays back to the original task list
    for (long i = 0; i < TaskList->TaskCount; i++) {
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]
 800807c:	e032      	b.n	80080e4 <TaskList_sort_priorities+0x1a4>
        TaskList->TaskFunc[i] = sorted_TaskFunc[i];
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	441a      	add	r2, r3
 8008086:	4b24      	ldr	r3, [pc, #144]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6859      	ldr	r1, [r3, #4]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	440b      	add	r3, r1
 8008092:	6812      	ldr	r2, [r2, #0]
 8008094:	601a      	str	r2, [r3, #0]
        TaskList->TaskTime[i] = sorted_TaskTime[i];
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	441a      	add	r2, r3
 800809e:	4b1e      	ldr	r3, [pc, #120]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6899      	ldr	r1, [r3, #8]
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	440b      	add	r3, r1
 80080aa:	6812      	ldr	r2, [r2, #0]
 80080ac:	601a      	str	r2, [r3, #0]
        TaskList->TaskMaxTries[i] = sorted_TaskMaxTries[i];
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	441a      	add	r2, r3
 80080b6:	4b18      	ldr	r3, [pc, #96]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68d9      	ldr	r1, [r3, #12]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	440b      	add	r3, r1
 80080c2:	6812      	ldr	r2, [r2, #0]
 80080c4:	601a      	str	r2, [r3, #0]
        TaskList->TaskPriority[i] = sorted_TaskPriority[i];
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	441a      	add	r2, r3
 80080ce:	4b12      	ldr	r3, [pc, #72]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6919      	ldr	r1, [r3, #16]
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	440b      	add	r3, r1
 80080da:	6812      	ldr	r2, [r2, #0]
 80080dc:	601a      	str	r2, [r3, #0]
    for (long i = 0; i < TaskList->TaskCount; i++) {
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	3301      	adds	r3, #1
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	4b0c      	ldr	r3, [pc, #48]	; (8008118 <TaskList_sort_priorities+0x1d8>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	dbc6      	blt.n	800807e <TaskList_sort_priorities+0x13e>
    }

    // Free temporary arrays and indices
    free(sorted_TaskFunc);
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 fb2b 	bl	800874c <free>
    free(sorted_TaskTime);
 80080f6:	68b8      	ldr	r0, [r7, #8]
 80080f8:	f000 fb28 	bl	800874c <free>
    free(sorted_TaskMaxTries);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fb25 	bl	800874c <free>
    free(sorted_TaskPriority);
 8008102:	6838      	ldr	r0, [r7, #0]
 8008104:	f000 fb22 	bl	800874c <free>
    free(indices);
 8008108:	6938      	ldr	r0, [r7, #16]
 800810a:	f000 fb1f 	bl	800874c <free>
}
 800810e:	bf00      	nop
 8008110:	3720      	adds	r7, #32
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	200004f8 	.word	0x200004f8
 800811c:	20000558 	.word	0x20000558
 8008120:	08007f01 	.word	0x08007f01

08008124 <Task_remove>:

int Task_remove(long index) 
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
    if (index >= TaskList->TaskCount) {
 800812c:	4b71      	ldr	r3, [pc, #452]	; (80082f4 <Task_remove+0x1d0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	429a      	cmp	r2, r3
 8008136:	db09      	blt.n	800814c <Task_remove+0x28>
        fprintf(stderr, "Index out of bounds\n");
 8008138:	4b6f      	ldr	r3, [pc, #444]	; (80082f8 <Task_remove+0x1d4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	2214      	movs	r2, #20
 8008140:	2101      	movs	r1, #1
 8008142:	486e      	ldr	r0, [pc, #440]	; (80082fc <Task_remove+0x1d8>)
 8008144:	f002 f98e 	bl	800a464 <fwrite>
        return 0;
 8008148:	2300      	movs	r3, #0
 800814a:	e0cf      	b.n	80082ec <Task_remove+0x1c8>
    }

    // Shift all elements after the index to the left by one position
    for (long i = index; i < TaskList->TaskCount - 1; ++i) 
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	61fb      	str	r3, [r7, #28]
 8008150:	e03e      	b.n	80081d0 <Task_remove+0xac>
    {
        TaskList->TaskFunc[i] = TaskList->TaskFunc[i + 1];
 8008152:	4b68      	ldr	r3, [pc, #416]	; (80082f4 <Task_remove+0x1d0>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	3301      	adds	r3, #1
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	441a      	add	r2, r3
 8008160:	4b64      	ldr	r3, [pc, #400]	; (80082f4 <Task_remove+0x1d0>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6859      	ldr	r1, [r3, #4]
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	6812      	ldr	r2, [r2, #0]
 800816e:	601a      	str	r2, [r3, #0]
        TaskList->TaskPriority[i] = TaskList->TaskPriority[i + 1];
 8008170:	4b60      	ldr	r3, [pc, #384]	; (80082f4 <Task_remove+0x1d0>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	3301      	adds	r3, #1
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	441a      	add	r2, r3
 800817e:	4b5d      	ldr	r3, [pc, #372]	; (80082f4 <Task_remove+0x1d0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6919      	ldr	r1, [r3, #16]
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	6812      	ldr	r2, [r2, #0]
 800818c:	601a      	str	r2, [r3, #0]
        TaskList->TaskTime[i] = TaskList->TaskTime[i + 1];
 800818e:	4b59      	ldr	r3, [pc, #356]	; (80082f4 <Task_remove+0x1d0>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689a      	ldr	r2, [r3, #8]
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	3301      	adds	r3, #1
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	441a      	add	r2, r3
 800819c:	4b55      	ldr	r3, [pc, #340]	; (80082f4 <Task_remove+0x1d0>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6899      	ldr	r1, [r3, #8]
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	6812      	ldr	r2, [r2, #0]
 80081aa:	601a      	str	r2, [r3, #0]
        TaskList->TaskMaxTries[i] = TaskList->TaskMaxTries[i + 1];
 80081ac:	4b51      	ldr	r3, [pc, #324]	; (80082f4 <Task_remove+0x1d0>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	3301      	adds	r3, #1
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	441a      	add	r2, r3
 80081ba:	4b4e      	ldr	r3, [pc, #312]	; (80082f4 <Task_remove+0x1d0>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68d9      	ldr	r1, [r3, #12]
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	6812      	ldr	r2, [r2, #0]
 80081c8:	601a      	str	r2, [r3, #0]
    for (long i = index; i < TaskList->TaskCount - 1; ++i) 
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	3301      	adds	r3, #1
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	4b48      	ldr	r3, [pc, #288]	; (80082f4 <Task_remove+0x1d0>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	429a      	cmp	r2, r3
 80081dc:	dbb9      	blt.n	8008152 <Task_remove+0x2e>
    }

    TaskList->TaskCount -= 1;
 80081de:	4b45      	ldr	r3, [pc, #276]	; (80082f4 <Task_remove+0x1d0>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	4b43      	ldr	r3, [pc, #268]	; (80082f4 <Task_remove+0x1d0>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3a01      	subs	r2, #1
 80081ea:	601a      	str	r2, [r3, #0]

    // Handle the case where the task list becomes empty
    if (TaskList->TaskCount == 0) {
 80081ec:	4b41      	ldr	r3, [pc, #260]	; (80082f4 <Task_remove+0x1d0>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d128      	bne.n	8008248 <Task_remove+0x124>
        free(TaskList->TaskFunc);
 80081f6:	4b3f      	ldr	r3, [pc, #252]	; (80082f4 <Task_remove+0x1d0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 faa5 	bl	800874c <free>
        free(TaskList->TaskPriority);
 8008202:	4b3c      	ldr	r3, [pc, #240]	; (80082f4 <Task_remove+0x1d0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fa9f 	bl	800874c <free>
        free(TaskList->TaskTime);
 800820e:	4b39      	ldr	r3, [pc, #228]	; (80082f4 <Task_remove+0x1d0>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fa99 	bl	800874c <free>
        free(TaskList->TaskMaxTries);
 800821a:	4b36      	ldr	r3, [pc, #216]	; (80082f4 <Task_remove+0x1d0>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	4618      	mov	r0, r3
 8008222:	f000 fa93 	bl	800874c <free>

        TaskList->TaskFunc = NULL;
 8008226:	4b33      	ldr	r3, [pc, #204]	; (80082f4 <Task_remove+0x1d0>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2200      	movs	r2, #0
 800822c:	605a      	str	r2, [r3, #4]
        TaskList->TaskPriority = NULL;
 800822e:	4b31      	ldr	r3, [pc, #196]	; (80082f4 <Task_remove+0x1d0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2200      	movs	r2, #0
 8008234:	611a      	str	r2, [r3, #16]
        TaskList->TaskTime = NULL;
 8008236:	4b2f      	ldr	r3, [pc, #188]	; (80082f4 <Task_remove+0x1d0>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2200      	movs	r2, #0
 800823c:	609a      	str	r2, [r3, #8]
        TaskList->TaskMaxTries = NULL;
 800823e:	4b2d      	ldr	r3, [pc, #180]	; (80082f4 <Task_remove+0x1d0>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2200      	movs	r2, #0
 8008244:	60da      	str	r2, [r3, #12]
 8008246:	e050      	b.n	80082ea <Task_remove+0x1c6>
    }
    else {
        // Reallocate memory to shrink the arrays by one element
        TaskFunc_t* newFuncs = (TaskFunc_t*)realloc(TaskList->TaskFunc, TaskList->TaskCount * sizeof(TaskFunc_t));
 8008248:	4b2a      	ldr	r3, [pc, #168]	; (80082f4 <Task_remove+0x1d0>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	4b29      	ldr	r3, [pc, #164]	; (80082f4 <Task_remove+0x1d0>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4619      	mov	r1, r3
 8008258:	4610      	mov	r0, r2
 800825a:	f000 fb2b 	bl	80088b4 <realloc>
 800825e:	61b8      	str	r0, [r7, #24]
        int* newPriorities = (long*)realloc(TaskList->TaskPriority, TaskList->TaskCount * sizeof(int));
 8008260:	4b24      	ldr	r3, [pc, #144]	; (80082f4 <Task_remove+0x1d0>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	691a      	ldr	r2, [r3, #16]
 8008266:	4b23      	ldr	r3, [pc, #140]	; (80082f4 <Task_remove+0x1d0>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f000 fb1f 	bl	80088b4 <realloc>
 8008276:	6178      	str	r0, [r7, #20]
        long* newTimes = (long*)realloc(TaskList->TaskTime, TaskList->TaskCount * sizeof(long));
 8008278:	4b1e      	ldr	r3, [pc, #120]	; (80082f4 <Task_remove+0x1d0>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689a      	ldr	r2, [r3, #8]
 800827e:	4b1d      	ldr	r3, [pc, #116]	; (80082f4 <Task_remove+0x1d0>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4619      	mov	r1, r3
 8008288:	4610      	mov	r0, r2
 800828a:	f000 fb13 	bl	80088b4 <realloc>
 800828e:	6138      	str	r0, [r7, #16]
        long* newMaxTries = (long*)realloc(TaskList->TaskMaxTries, TaskList->TaskCount * sizeof(long));
 8008290:	4b18      	ldr	r3, [pc, #96]	; (80082f4 <Task_remove+0x1d0>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	4b17      	ldr	r3, [pc, #92]	; (80082f4 <Task_remove+0x1d0>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f000 fb07 	bl	80088b4 <realloc>
 80082a6:	60f8      	str	r0, [r7, #12]

        if (newFuncs == NULL || newTimes == NULL || newMaxTries == NULL || newPriorities == NULL)
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d008      	beq.n	80082c0 <Task_remove+0x19c>
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <Task_remove+0x19c>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <Task_remove+0x19c>
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d104      	bne.n	80082ca <Task_remove+0x1a6>
        {
            perror("Failed to reallocate memory while removing task");
 80082c0:	480f      	ldr	r0, [pc, #60]	; (8008300 <Task_remove+0x1dc>)
 80082c2:	f002 f963 	bl	800a58c <perror>
            return 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	e010      	b.n	80082ec <Task_remove+0x1c8>
        }

        TaskList->TaskFunc = newFuncs;
 80082ca:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <Task_remove+0x1d0>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	605a      	str	r2, [r3, #4]
        TaskList->TaskPriority = newPriorities;
 80082d2:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <Task_remove+0x1d0>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	611a      	str	r2, [r3, #16]
        TaskList->TaskTime = newTimes;
 80082da:	4b06      	ldr	r3, [pc, #24]	; (80082f4 <Task_remove+0x1d0>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	609a      	str	r2, [r3, #8]
        TaskList->TaskMaxTries = newMaxTries;
 80082e2:	4b04      	ldr	r3, [pc, #16]	; (80082f4 <Task_remove+0x1d0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	60da      	str	r2, [r3, #12]
    }

    return 1;
 80082ea:	2301      	movs	r3, #1
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3720      	adds	r7, #32
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	200004f8 	.word	0x200004f8
 80082f8:	200001ec 	.word	0x200001ec
 80082fc:	0800e1a0 	.word	0x0800e1a0
 8008300:	0800e1b8 	.word	0x0800e1b8

08008304 <Task_execute>:

int Task_execute()
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
    if (!TaskList->kernelRunningFlag)   TaskList->status = KERNEL_NOT_RUNNING;
 800830a:	4b25      	ldr	r3, [pc, #148]	; (80083a0 <Task_execute+0x9c>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	2b00      	cmp	r3, #0
 8008312:	d104      	bne.n	800831e <Task_execute+0x1a>
 8008314:	4b22      	ldr	r3, [pc, #136]	; (80083a0 <Task_execute+0x9c>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2202      	movs	r2, #2
 800831a:	771a      	strb	r2, [r3, #28]
 800831c:	e00d      	b.n	800833a <Task_execute+0x36>
    else if (TaskList->kernelHaltFlag)  TaskList->status = KERNEL_HALTED;
 800831e:	4b20      	ldr	r3, [pc, #128]	; (80083a0 <Task_execute+0x9c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008324:	2b00      	cmp	r3, #0
 8008326:	d004      	beq.n	8008332 <Task_execute+0x2e>
 8008328:	4b1d      	ldr	r3, [pc, #116]	; (80083a0 <Task_execute+0x9c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2201      	movs	r2, #1
 800832e:	771a      	strb	r2, [r3, #28]
 8008330:	e003      	b.n	800833a <Task_execute+0x36>
    else                                TaskList->status = KERNEL_RUNNING;
 8008332:	4b1b      	ldr	r3, [pc, #108]	; (80083a0 <Task_execute+0x9c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2200      	movs	r2, #0
 8008338:	771a      	strb	r2, [r3, #28]

        int exit = setjmp(env); // setjump alows to cancel running function
 800833a:	481a      	ldr	r0, [pc, #104]	; (80083a4 <Task_execute+0xa0>)
 800833c:	f7f7 ff08 	bl	8000150 <setjmp>
 8008340:	4603      	mov	r3, r0
 8008342:	607b      	str	r3, [r7, #4]
        if (exit == 0)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d121      	bne.n	800838e <Task_execute+0x8a>
        {

            if (TaskList->TaskFunc[0]() == TASK_DONE)
 800834a:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <Task_execute+0x9c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4798      	blx	r3
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d104      	bne.n	8008364 <Task_execute+0x60>
            {
                Task_remove(0); 
 800835a:	2000      	movs	r0, #0
 800835c:	f7ff fee2 	bl	8008124 <Task_remove>
                return TASK_DONE;
 8008360:	2300      	movs	r3, #0
 8008362:	e018      	b.n	8008396 <Task_execute+0x92>
            }
            else
            {
                TaskList->TaskMaxTries[0]--;
 8008364:	4b0e      	ldr	r3, [pc, #56]	; (80083a0 <Task_execute+0x9c>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	3a01      	subs	r2, #1
 800836e:	601a      	str	r2, [r3, #0]

                if (TaskList->TaskMaxTries[0] > 0)
 8008370:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <Task_execute+0x9c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	dd03      	ble.n	8008384 <Task_execute+0x80>
                {
                    Task_current_to_end();
 800837c:	f000 f814 	bl	80083a8 <Task_current_to_end>
                    return TASK_RETRYING;
 8008380:	2304      	movs	r3, #4
 8008382:	e008      	b.n	8008396 <Task_execute+0x92>
                }      
                else
                {
                    Task_remove(0);
 8008384:	2000      	movs	r0, #0
 8008386:	f7ff fecd 	bl	8008124 <Task_remove>
                    return TASK_TRIES_EXPIRED;
 800838a:	2301      	movs	r3, #1
 800838c:	e003      	b.n	8008396 <Task_execute+0x92>
                }
            }
        }
        else
        {
            Task_remove(0);
 800838e:	2000      	movs	r0, #0
 8008390:	f7ff fec8 	bl	8008124 <Task_remove>
            return exit;
 8008394:	687b      	ldr	r3, [r7, #4]
        }
}
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	200004f8 	.word	0x200004f8
 80083a4:	200004fc 	.word	0x200004fc

080083a8 <Task_current_to_end>:

int Task_current_to_end()
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
    Task_add(TaskList->TaskFunc[0], TaskList->TaskPriority[0], TaskList->TaskTime[0], TaskList->TaskMaxTries[0]);
 80083ac:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <Task_current_to_end+0x34>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	4b09      	ldr	r3, [pc, #36]	; (80083dc <Task_current_to_end+0x34>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	6819      	ldr	r1, [r3, #0]
 80083bc:	4b07      	ldr	r3, [pc, #28]	; (80083dc <Task_current_to_end+0x34>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <Task_current_to_end+0x34>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f7ff fd00 	bl	8007dd0 <Task_add>
    return Task_remove(0);
 80083d0:	2000      	movs	r0, #0
 80083d2:	f7ff fea7 	bl	8008124 <Task_remove>
 80083d6:	4603      	mov	r3, r0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	200004f8 	.word	0x200004f8

080083e0 <kernel_begin>:

    TaskList->TaskTime[0]--;
}

void kernel_begin()
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
    TaskList->kernelRunningFlag = 1;
 80083e4:	4b0d      	ldr	r3, [pc, #52]	; (800841c <kernel_begin+0x3c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2201      	movs	r2, #1
 80083ea:	625a      	str	r2, [r3, #36]	; 0x24

    while (TaskList->kernelRunningFlag)
 80083ec:	e00d      	b.n	800840a <kernel_begin+0x2a>
        if (TaskList->TaskCount > 0 && !TaskList->kernelHaltFlag)
 80083ee:	4b0b      	ldr	r3, [pc, #44]	; (800841c <kernel_begin+0x3c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dd08      	ble.n	800840a <kernel_begin+0x2a>
 80083f8:	4b08      	ldr	r3, [pc, #32]	; (800841c <kernel_begin+0x3c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d103      	bne.n	800840a <kernel_begin+0x2a>
        {
            TaskList_sort_priorities();
 8008402:	f7ff fd9d 	bl	8007f40 <TaskList_sort_priorities>
            Task_execute();
 8008406:	f7ff ff7d 	bl	8008304 <Task_execute>
    while (TaskList->kernelRunningFlag)
 800840a:	4b04      	ldr	r3, [pc, #16]	; (800841c <kernel_begin+0x3c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1ec      	bne.n	80083ee <kernel_begin+0xe>
        }
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	200004f8 	.word	0x200004f8

08008420 <writeToRegister>:
uint8_t is_initialised = 0;

I2C_HandleTypeDef I2CHandle;

void writeToRegister(uint16_t device_address, uint16_t memory_address, uint8_t *data)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af04      	add	r7, sp, #16
 8008426:	4603      	mov	r3, r0
 8008428:	603a      	str	r2, [r7, #0]
 800842a:	80fb      	strh	r3, [r7, #6]
 800842c:	460b      	mov	r3, r1
 800842e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&I2CHandle, (device_address<<1), memory_address, 1, data, 1, 1000);
 8008430:	88fb      	ldrh	r3, [r7, #6]
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	b299      	uxth	r1, r3
 8008436:	88ba      	ldrh	r2, [r7, #4]
 8008438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800843c:	9302      	str	r3, [sp, #8]
 800843e:	2301      	movs	r3, #1
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	2301      	movs	r3, #1
 8008448:	4803      	ldr	r0, [pc, #12]	; (8008458 <writeToRegister+0x38>)
 800844a:	f7fa fe63 	bl	8003114 <HAL_I2C_Mem_Write>
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000560 	.word	0x20000560

0800845c <TCA_Init>:

void TCA_Init(uint8_t address, I2C_HandleTypeDef handle)
{
 800845c:	b084      	sub	sp, #16
 800845e:	b590      	push	{r4, r7, lr}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	4604      	mov	r4, r0
 8008466:	f107 001c 	add.w	r0, r7, #28
 800846a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800846e:	4623      	mov	r3, r4
 8008470:	71fb      	strb	r3, [r7, #7]
	TCA_address = address;
 8008472:	4a0a      	ldr	r2, [pc, #40]	; (800849c <TCA_Init+0x40>)
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	7013      	strb	r3, [r2, #0]
	I2CHandle = handle;
 8008478:	4b09      	ldr	r3, [pc, #36]	; (80084a0 <TCA_Init+0x44>)
 800847a:	4618      	mov	r0, r3
 800847c:	f107 031c 	add.w	r3, r7, #28
 8008480:	2254      	movs	r2, #84	; 0x54
 8008482:	4619      	mov	r1, r3
 8008484:	f002 fc43 	bl	800ad0e <memcpy>
	is_initialised = 1;
 8008488:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <TCA_Init+0x48>)
 800848a:	2201      	movs	r2, #1
 800848c:	701a      	strb	r2, [r3, #0]
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008498:	b004      	add	sp, #16
 800849a:	4770      	bx	lr
 800849c:	20000024 	.word	0x20000024
 80084a0:	20000560 	.word	0x20000560
 80084a4:	2000055c 	.word	0x2000055c

080084a8 <TCA_PinMode>:

void TCA_PinMode(uint32_t pin, uint32_t mode)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 80084b2:	4b25      	ldr	r3, [pc, #148]	; (8008548 <TCA_PinMode+0xa0>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d03d      	beq.n	8008536 <TCA_PinMode+0x8e>
	if(pin > 15) return;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b0f      	cmp	r3, #15
 80084be:	d83c      	bhi.n	800853a <TCA_PinMode+0x92>
	if(mode != 0 && mode != 1) return;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <TCA_PinMode+0x24>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d138      	bne.n	800853e <TCA_PinMode+0x96>

	uint8_t mask =  1 << (pin % 8);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f003 0307 	and.w	r3, r3, #7
 80084d2:	2201      	movs	r2, #1
 80084d4:	fa02 f303 	lsl.w	r3, r2, r3
 80084d8:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? PINMODE_REGISTER_LOW : PINMODE_REGISTER_HIGH;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b07      	cmp	r3, #7
 80084de:	d801      	bhi.n	80084e4 <TCA_PinMode+0x3c>
 80084e0:	2306      	movs	r3, #6
 80084e2:	e000      	b.n	80084e6 <TCA_PinMode+0x3e>
 80084e4:	2307      	movs	r3, #7
 80084e6:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &pinmode_register_state_low : &pinmode_register_state_high;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b07      	cmp	r3, #7
 80084ec:	d801      	bhi.n	80084f2 <TCA_PinMode+0x4a>
 80084ee:	4b17      	ldr	r3, [pc, #92]	; (800854c <TCA_PinMode+0xa4>)
 80084f0:	e000      	b.n	80084f4 <TCA_PinMode+0x4c>
 80084f2:	4b17      	ldr	r3, [pc, #92]	; (8008550 <TCA_PinMode+0xa8>)
 80084f4:	60bb      	str	r3, [r7, #8]

	if (mode) 	*data |= mask;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d007      	beq.n	800850c <TCA_PinMode+0x64>
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	781a      	ldrb	r2, [r3, #0]
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	4313      	orrs	r3, r2
 8008504:	b2da      	uxtb	r2, r3
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	701a      	strb	r2, [r3, #0]
 800850a:	e00b      	b.n	8008524 <TCA_PinMode+0x7c>
	else 		*data &= ~mask;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	b25a      	sxtb	r2, r3
 8008512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008516:	43db      	mvns	r3, r3
 8008518:	b25b      	sxtb	r3, r3
 800851a:	4013      	ands	r3, r2
 800851c:	b25b      	sxtb	r3, r3
 800851e:	b2da      	uxtb	r2, r3
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 8008524:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <TCA_PinMode+0xac>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	89b9      	ldrh	r1, [r7, #12]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	4618      	mov	r0, r3
 8008530:	f7ff ff76 	bl	8008420 <writeToRegister>
 8008534:	e004      	b.n	8008540 <TCA_PinMode+0x98>
	if(!is_initialised) return;
 8008536:	bf00      	nop
 8008538:	e002      	b.n	8008540 <TCA_PinMode+0x98>
	if(pin > 15) return;
 800853a:	bf00      	nop
 800853c:	e000      	b.n	8008540 <TCA_PinMode+0x98>
	if(mode != 0 && mode != 1) return;
 800853e:	bf00      	nop
}
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	2000055c 	.word	0x2000055c
 800854c:	20000022 	.word	0x20000022
 8008550:	20000023 	.word	0x20000023
 8008554:	20000024 	.word	0x20000024

08008558 <TCA_WritePin>:

	writeToRegister(TCA_address, memory_address, data);
}

void TCA_WritePin(uint32_t pin, uint32_t value)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 8008562:	4b25      	ldr	r3, [pc, #148]	; (80085f8 <TCA_WritePin+0xa0>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d03d      	beq.n	80085e6 <TCA_WritePin+0x8e>
	if(pin > 15) return;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b0f      	cmp	r3, #15
 800856e:	d83c      	bhi.n	80085ea <TCA_WritePin+0x92>
	if(value != 0 && value != 1) return;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <TCA_WritePin+0x24>
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d138      	bne.n	80085ee <TCA_WritePin+0x96>

	uint8_t mask =  1 << (pin % 8);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f003 0307 	and.w	r3, r3, #7
 8008582:	2201      	movs	r2, #1
 8008584:	fa02 f303 	lsl.w	r3, r2, r3
 8008588:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? OUTPUT_REGISTER_LOW : OUTPUT_REGISTER_HIGH;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b07      	cmp	r3, #7
 800858e:	d801      	bhi.n	8008594 <TCA_WritePin+0x3c>
 8008590:	2302      	movs	r3, #2
 8008592:	e000      	b.n	8008596 <TCA_WritePin+0x3e>
 8008594:	2303      	movs	r3, #3
 8008596:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &output_register_state_low : &output_register_state_high;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b07      	cmp	r3, #7
 800859c:	d801      	bhi.n	80085a2 <TCA_WritePin+0x4a>
 800859e:	4b17      	ldr	r3, [pc, #92]	; (80085fc <TCA_WritePin+0xa4>)
 80085a0:	e000      	b.n	80085a4 <TCA_WritePin+0x4c>
 80085a2:	4b17      	ldr	r3, [pc, #92]	; (8008600 <TCA_WritePin+0xa8>)
 80085a4:	60bb      	str	r3, [r7, #8]

	if (value)	*data |= mask;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d007      	beq.n	80085bc <TCA_WritePin+0x64>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	781a      	ldrb	r2, [r3, #0]
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	e00b      	b.n	80085d4 <TCA_WritePin+0x7c>
	else 		*data &= ~mask;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	b25a      	sxtb	r2, r3
 80085c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c6:	43db      	mvns	r3, r3
 80085c8:	b25b      	sxtb	r3, r3
 80085ca:	4013      	ands	r3, r2
 80085cc:	b25b      	sxtb	r3, r3
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 80085d4:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <TCA_WritePin+0xac>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	89b9      	ldrh	r1, [r7, #12]
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff ff1e 	bl	8008420 <writeToRegister>
 80085e4:	e004      	b.n	80085f0 <TCA_WritePin+0x98>
	if(!is_initialised) return;
 80085e6:	bf00      	nop
 80085e8:	e002      	b.n	80085f0 <TCA_WritePin+0x98>
	if(pin > 15) return;
 80085ea:	bf00      	nop
 80085ec:	e000      	b.n	80085f0 <TCA_WritePin+0x98>
	if(value != 0 && value != 1) return;
 80085ee:	bf00      	nop
}
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	2000055c 	.word	0x2000055c
 80085fc:	20000020 	.word	0x20000020
 8008600:	20000021 	.word	0x20000021
 8008604:	20000024 	.word	0x20000024

08008608 <Task_LOLA_INIT>:
 */

#include "Tasks.h"

int Task_LOLA_INIT()
{
 8008608:	b580      	push	{r7, lr}
 800860a:	af00      	add	r7, sp, #0
	return LOLA_Init(&LOLA1);
 800860c:	4802      	ldr	r0, [pc, #8]	; (8008618 <Task_LOLA_INIT+0x10>)
 800860e:	f7fe fa9f 	bl	8006b50 <LOLA_Init>
 8008612:	4603      	mov	r3, r0
}
 8008614:	4618      	mov	r0, r3
 8008616:	bd80      	pop	{r7, pc}
 8008618:	200003b0 	.word	0x200003b0

0800861c <to_signed_12bit>:
 */

#include "stdint.h"

int16_t to_signed_12bit(uint16_t value)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	80fb      	strh	r3, [r7, #6]
    // Mask to get the lower 12 bits
    value &= 0x0FFF;
 8008626:	88fb      	ldrh	r3, [r7, #6]
 8008628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800862c:	80fb      	strh	r3, [r7, #6]

    // Check if the sign bit (bit 11) is set
    if (value & 0x0800) {
 800862e:	88fb      	ldrh	r3, [r7, #6]
 8008630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <to_signed_12bit+0x28>
        // If sign bit is set, make it negative
        value |= 0xF000; // Set the upper 4 bits to 1 to preserve the sign in 16-bit signed int
 8008638:	88fb      	ldrh	r3, [r7, #6]
 800863a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800863e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8008642:	80fb      	strh	r3, [r7, #6]
    }

    return (int16_t)value;
 8008644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr

08008652 <trimInt>:

int trimInt(int integer, int min, int max)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
	if(integer>max) integer = max;
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	429a      	cmp	r2, r3
 8008664:	dd02      	ble.n	800866c <trimInt+0x1a>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60fb      	str	r3, [r7, #12]
 800866a:	e005      	b.n	8008678 <trimInt+0x26>
	else if(integer<min) integer = min;
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	429a      	cmp	r2, r3
 8008672:	da01      	bge.n	8008678 <trimInt+0x26>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	60fb      	str	r3, [r7, #12]
	return integer;
 8008678:	68fb      	ldr	r3, [r7, #12]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr

08008684 <trimFloat>:

float trimFloat(float floating, float min, float max)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
	if(floating>max) floating = max;
 8008690:	6879      	ldr	r1, [r7, #4]
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7f8 fd4a 	bl	800112c <__aeabi_fcmpgt>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <trimFloat+0x20>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e008      	b.n	80086b6 <trimFloat+0x32>
	else if(floating<min) floating = min;
 80086a4:	68b9      	ldr	r1, [r7, #8]
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7f8 fd22 	bl	80010f0 <__aeabi_fcmplt>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <trimFloat+0x32>
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	60fb      	str	r3, [r7, #12]
	return floating;
 80086b6:	68fb      	ldr	r3, [r7, #12]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <checkFloat>:

int checkFloat(float input, float max, float min)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
	return (input <= max)&&(input >= min);
 80086cc:	68b9      	ldr	r1, [r7, #8]
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7f8 fd18 	bl	8001104 <__aeabi_fcmple>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d008      	beq.n	80086ec <checkFloat+0x2c>
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f7f8 fd1b 	bl	8001118 <__aeabi_fcmpge>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <checkFloat+0x2c>
 80086e8:	2301      	movs	r3, #1
 80086ea:	e000      	b.n	80086ee <checkFloat+0x2e>
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <atof>:
 80086f6:	2100      	movs	r1, #0
 80086f8:	f000 bf2a 	b.w	8009550 <strtod>

080086fc <atoi>:
 80086fc:	220a      	movs	r2, #10
 80086fe:	2100      	movs	r1, #0
 8008700:	f000 bfb0 	b.w	8009664 <strtol>

08008704 <calloc>:
 8008704:	4b02      	ldr	r3, [pc, #8]	; (8008710 <calloc+0xc>)
 8008706:	460a      	mov	r2, r1
 8008708:	4601      	mov	r1, r0
 800870a:	6818      	ldr	r0, [r3, #0]
 800870c:	f000 b802 	b.w	8008714 <_calloc_r>
 8008710:	200001ec 	.word	0x200001ec

08008714 <_calloc_r>:
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	fba1 5402 	umull	r5, r4, r1, r2
 800871a:	b934      	cbnz	r4, 800872a <_calloc_r+0x16>
 800871c:	4629      	mov	r1, r5
 800871e:	f000 f83d 	bl	800879c <_malloc_r>
 8008722:	4606      	mov	r6, r0
 8008724:	b928      	cbnz	r0, 8008732 <_calloc_r+0x1e>
 8008726:	4630      	mov	r0, r6
 8008728:	bd70      	pop	{r4, r5, r6, pc}
 800872a:	220c      	movs	r2, #12
 800872c:	2600      	movs	r6, #0
 800872e:	6002      	str	r2, [r0, #0]
 8008730:	e7f9      	b.n	8008726 <_calloc_r+0x12>
 8008732:	462a      	mov	r2, r5
 8008734:	4621      	mov	r1, r4
 8008736:	f002 f829 	bl	800a78c <memset>
 800873a:	e7f4      	b.n	8008726 <_calloc_r+0x12>

0800873c <malloc>:
 800873c:	4b02      	ldr	r3, [pc, #8]	; (8008748 <malloc+0xc>)
 800873e:	4601      	mov	r1, r0
 8008740:	6818      	ldr	r0, [r3, #0]
 8008742:	f000 b82b 	b.w	800879c <_malloc_r>
 8008746:	bf00      	nop
 8008748:	200001ec 	.word	0x200001ec

0800874c <free>:
 800874c:	4b02      	ldr	r3, [pc, #8]	; (8008758 <free+0xc>)
 800874e:	4601      	mov	r1, r0
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	f003 b961 	b.w	800ba18 <_free_r>
 8008756:	bf00      	nop
 8008758:	200001ec 	.word	0x200001ec

0800875c <sbrk_aligned>:
 800875c:	b570      	push	{r4, r5, r6, lr}
 800875e:	4e0e      	ldr	r6, [pc, #56]	; (8008798 <sbrk_aligned+0x3c>)
 8008760:	460c      	mov	r4, r1
 8008762:	6831      	ldr	r1, [r6, #0]
 8008764:	4605      	mov	r5, r0
 8008766:	b911      	cbnz	r1, 800876e <sbrk_aligned+0x12>
 8008768:	f002 fa6c 	bl	800ac44 <_sbrk_r>
 800876c:	6030      	str	r0, [r6, #0]
 800876e:	4621      	mov	r1, r4
 8008770:	4628      	mov	r0, r5
 8008772:	f002 fa67 	bl	800ac44 <_sbrk_r>
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	d00a      	beq.n	8008790 <sbrk_aligned+0x34>
 800877a:	1cc4      	adds	r4, r0, #3
 800877c:	f024 0403 	bic.w	r4, r4, #3
 8008780:	42a0      	cmp	r0, r4
 8008782:	d007      	beq.n	8008794 <sbrk_aligned+0x38>
 8008784:	1a21      	subs	r1, r4, r0
 8008786:	4628      	mov	r0, r5
 8008788:	f002 fa5c 	bl	800ac44 <_sbrk_r>
 800878c:	3001      	adds	r0, #1
 800878e:	d101      	bne.n	8008794 <sbrk_aligned+0x38>
 8008790:	f04f 34ff 	mov.w	r4, #4294967295
 8008794:	4620      	mov	r0, r4
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	200005b8 	.word	0x200005b8

0800879c <_malloc_r>:
 800879c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087a0:	1ccd      	adds	r5, r1, #3
 80087a2:	f025 0503 	bic.w	r5, r5, #3
 80087a6:	3508      	adds	r5, #8
 80087a8:	2d0c      	cmp	r5, #12
 80087aa:	bf38      	it	cc
 80087ac:	250c      	movcc	r5, #12
 80087ae:	2d00      	cmp	r5, #0
 80087b0:	4607      	mov	r7, r0
 80087b2:	db01      	blt.n	80087b8 <_malloc_r+0x1c>
 80087b4:	42a9      	cmp	r1, r5
 80087b6:	d905      	bls.n	80087c4 <_malloc_r+0x28>
 80087b8:	230c      	movs	r3, #12
 80087ba:	2600      	movs	r6, #0
 80087bc:	603b      	str	r3, [r7, #0]
 80087be:	4630      	mov	r0, r6
 80087c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008898 <_malloc_r+0xfc>
 80087c8:	f000 f868 	bl	800889c <__malloc_lock>
 80087cc:	f8d8 3000 	ldr.w	r3, [r8]
 80087d0:	461c      	mov	r4, r3
 80087d2:	bb5c      	cbnz	r4, 800882c <_malloc_r+0x90>
 80087d4:	4629      	mov	r1, r5
 80087d6:	4638      	mov	r0, r7
 80087d8:	f7ff ffc0 	bl	800875c <sbrk_aligned>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	4604      	mov	r4, r0
 80087e0:	d155      	bne.n	800888e <_malloc_r+0xf2>
 80087e2:	f8d8 4000 	ldr.w	r4, [r8]
 80087e6:	4626      	mov	r6, r4
 80087e8:	2e00      	cmp	r6, #0
 80087ea:	d145      	bne.n	8008878 <_malloc_r+0xdc>
 80087ec:	2c00      	cmp	r4, #0
 80087ee:	d048      	beq.n	8008882 <_malloc_r+0xe6>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	4631      	mov	r1, r6
 80087f4:	4638      	mov	r0, r7
 80087f6:	eb04 0903 	add.w	r9, r4, r3
 80087fa:	f002 fa23 	bl	800ac44 <_sbrk_r>
 80087fe:	4581      	cmp	r9, r0
 8008800:	d13f      	bne.n	8008882 <_malloc_r+0xe6>
 8008802:	6821      	ldr	r1, [r4, #0]
 8008804:	4638      	mov	r0, r7
 8008806:	1a6d      	subs	r5, r5, r1
 8008808:	4629      	mov	r1, r5
 800880a:	f7ff ffa7 	bl	800875c <sbrk_aligned>
 800880e:	3001      	adds	r0, #1
 8008810:	d037      	beq.n	8008882 <_malloc_r+0xe6>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	442b      	add	r3, r5
 8008816:	6023      	str	r3, [r4, #0]
 8008818:	f8d8 3000 	ldr.w	r3, [r8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d038      	beq.n	8008892 <_malloc_r+0xf6>
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	42a2      	cmp	r2, r4
 8008824:	d12b      	bne.n	800887e <_malloc_r+0xe2>
 8008826:	2200      	movs	r2, #0
 8008828:	605a      	str	r2, [r3, #4]
 800882a:	e00f      	b.n	800884c <_malloc_r+0xb0>
 800882c:	6822      	ldr	r2, [r4, #0]
 800882e:	1b52      	subs	r2, r2, r5
 8008830:	d41f      	bmi.n	8008872 <_malloc_r+0xd6>
 8008832:	2a0b      	cmp	r2, #11
 8008834:	d917      	bls.n	8008866 <_malloc_r+0xca>
 8008836:	1961      	adds	r1, r4, r5
 8008838:	42a3      	cmp	r3, r4
 800883a:	6025      	str	r5, [r4, #0]
 800883c:	bf18      	it	ne
 800883e:	6059      	strne	r1, [r3, #4]
 8008840:	6863      	ldr	r3, [r4, #4]
 8008842:	bf08      	it	eq
 8008844:	f8c8 1000 	streq.w	r1, [r8]
 8008848:	5162      	str	r2, [r4, r5]
 800884a:	604b      	str	r3, [r1, #4]
 800884c:	4638      	mov	r0, r7
 800884e:	f104 060b 	add.w	r6, r4, #11
 8008852:	f000 f829 	bl	80088a8 <__malloc_unlock>
 8008856:	f026 0607 	bic.w	r6, r6, #7
 800885a:	1d23      	adds	r3, r4, #4
 800885c:	1af2      	subs	r2, r6, r3
 800885e:	d0ae      	beq.n	80087be <_malloc_r+0x22>
 8008860:	1b9b      	subs	r3, r3, r6
 8008862:	50a3      	str	r3, [r4, r2]
 8008864:	e7ab      	b.n	80087be <_malloc_r+0x22>
 8008866:	42a3      	cmp	r3, r4
 8008868:	6862      	ldr	r2, [r4, #4]
 800886a:	d1dd      	bne.n	8008828 <_malloc_r+0x8c>
 800886c:	f8c8 2000 	str.w	r2, [r8]
 8008870:	e7ec      	b.n	800884c <_malloc_r+0xb0>
 8008872:	4623      	mov	r3, r4
 8008874:	6864      	ldr	r4, [r4, #4]
 8008876:	e7ac      	b.n	80087d2 <_malloc_r+0x36>
 8008878:	4634      	mov	r4, r6
 800887a:	6876      	ldr	r6, [r6, #4]
 800887c:	e7b4      	b.n	80087e8 <_malloc_r+0x4c>
 800887e:	4613      	mov	r3, r2
 8008880:	e7cc      	b.n	800881c <_malloc_r+0x80>
 8008882:	230c      	movs	r3, #12
 8008884:	4638      	mov	r0, r7
 8008886:	603b      	str	r3, [r7, #0]
 8008888:	f000 f80e 	bl	80088a8 <__malloc_unlock>
 800888c:	e797      	b.n	80087be <_malloc_r+0x22>
 800888e:	6025      	str	r5, [r4, #0]
 8008890:	e7dc      	b.n	800884c <_malloc_r+0xb0>
 8008892:	605b      	str	r3, [r3, #4]
 8008894:	deff      	udf	#255	; 0xff
 8008896:	bf00      	nop
 8008898:	200005b4 	.word	0x200005b4

0800889c <__malloc_lock>:
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__malloc_lock+0x8>)
 800889e:	f002 ba1e 	b.w	800acde <__retarget_lock_acquire_recursive>
 80088a2:	bf00      	nop
 80088a4:	200006fc 	.word	0x200006fc

080088a8 <__malloc_unlock>:
 80088a8:	4801      	ldr	r0, [pc, #4]	; (80088b0 <__malloc_unlock+0x8>)
 80088aa:	f002 ba19 	b.w	800ace0 <__retarget_lock_release_recursive>
 80088ae:	bf00      	nop
 80088b0:	200006fc 	.word	0x200006fc

080088b4 <realloc>:
 80088b4:	4b02      	ldr	r3, [pc, #8]	; (80088c0 <realloc+0xc>)
 80088b6:	460a      	mov	r2, r1
 80088b8:	4601      	mov	r1, r0
 80088ba:	6818      	ldr	r0, [r3, #0]
 80088bc:	f000 b802 	b.w	80088c4 <_realloc_r>
 80088c0:	200001ec 	.word	0x200001ec

080088c4 <_realloc_r>:
 80088c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c8:	4680      	mov	r8, r0
 80088ca:	4614      	mov	r4, r2
 80088cc:	460e      	mov	r6, r1
 80088ce:	b921      	cbnz	r1, 80088da <_realloc_r+0x16>
 80088d0:	4611      	mov	r1, r2
 80088d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088d6:	f7ff bf61 	b.w	800879c <_malloc_r>
 80088da:	b92a      	cbnz	r2, 80088e8 <_realloc_r+0x24>
 80088dc:	f003 f89c 	bl	800ba18 <_free_r>
 80088e0:	4625      	mov	r5, r4
 80088e2:	4628      	mov	r0, r5
 80088e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e8:	f004 f8e6 	bl	800cab8 <_malloc_usable_size_r>
 80088ec:	4284      	cmp	r4, r0
 80088ee:	4607      	mov	r7, r0
 80088f0:	d802      	bhi.n	80088f8 <_realloc_r+0x34>
 80088f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088f6:	d812      	bhi.n	800891e <_realloc_r+0x5a>
 80088f8:	4621      	mov	r1, r4
 80088fa:	4640      	mov	r0, r8
 80088fc:	f7ff ff4e 	bl	800879c <_malloc_r>
 8008900:	4605      	mov	r5, r0
 8008902:	2800      	cmp	r0, #0
 8008904:	d0ed      	beq.n	80088e2 <_realloc_r+0x1e>
 8008906:	42bc      	cmp	r4, r7
 8008908:	4622      	mov	r2, r4
 800890a:	4631      	mov	r1, r6
 800890c:	bf28      	it	cs
 800890e:	463a      	movcs	r2, r7
 8008910:	f002 f9fd 	bl	800ad0e <memcpy>
 8008914:	4631      	mov	r1, r6
 8008916:	4640      	mov	r0, r8
 8008918:	f003 f87e 	bl	800ba18 <_free_r>
 800891c:	e7e1      	b.n	80088e2 <_realloc_r+0x1e>
 800891e:	4635      	mov	r5, r6
 8008920:	e7df      	b.n	80088e2 <_realloc_r+0x1e>

08008922 <sulp>:
 8008922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008926:	460f      	mov	r7, r1
 8008928:	4690      	mov	r8, r2
 800892a:	f003 ff95 	bl	800c858 <__ulp>
 800892e:	4604      	mov	r4, r0
 8008930:	460d      	mov	r5, r1
 8008932:	f1b8 0f00 	cmp.w	r8, #0
 8008936:	d011      	beq.n	800895c <sulp+0x3a>
 8008938:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800893c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008940:	2b00      	cmp	r3, #0
 8008942:	dd0b      	ble.n	800895c <sulp+0x3a>
 8008944:	2400      	movs	r4, #0
 8008946:	051b      	lsls	r3, r3, #20
 8008948:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800894c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008950:	4622      	mov	r2, r4
 8008952:	462b      	mov	r3, r5
 8008954:	f7f7 fdd8 	bl	8000508 <__aeabi_dmul>
 8008958:	4604      	mov	r4, r0
 800895a:	460d      	mov	r5, r1
 800895c:	4620      	mov	r0, r4
 800895e:	4629      	mov	r1, r5
 8008960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008964:	0000      	movs	r0, r0
	...

08008968 <_strtod_l>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	b09f      	sub	sp, #124	; 0x7c
 800896e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008970:	2200      	movs	r2, #0
 8008972:	4604      	mov	r4, r0
 8008974:	921a      	str	r2, [sp, #104]	; 0x68
 8008976:	460d      	mov	r5, r1
 8008978:	f04f 0800 	mov.w	r8, #0
 800897c:	f04f 0900 	mov.w	r9, #0
 8008980:	460a      	mov	r2, r1
 8008982:	9219      	str	r2, [sp, #100]	; 0x64
 8008984:	7811      	ldrb	r1, [r2, #0]
 8008986:	292b      	cmp	r1, #43	; 0x2b
 8008988:	d04a      	beq.n	8008a20 <_strtod_l+0xb8>
 800898a:	d838      	bhi.n	80089fe <_strtod_l+0x96>
 800898c:	290d      	cmp	r1, #13
 800898e:	d832      	bhi.n	80089f6 <_strtod_l+0x8e>
 8008990:	2908      	cmp	r1, #8
 8008992:	d832      	bhi.n	80089fa <_strtod_l+0x92>
 8008994:	2900      	cmp	r1, #0
 8008996:	d03b      	beq.n	8008a10 <_strtod_l+0xa8>
 8008998:	2200      	movs	r2, #0
 800899a:	920e      	str	r2, [sp, #56]	; 0x38
 800899c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800899e:	7832      	ldrb	r2, [r6, #0]
 80089a0:	2a30      	cmp	r2, #48	; 0x30
 80089a2:	f040 80b2 	bne.w	8008b0a <_strtod_l+0x1a2>
 80089a6:	7872      	ldrb	r2, [r6, #1]
 80089a8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80089ac:	2a58      	cmp	r2, #88	; 0x58
 80089ae:	d16e      	bne.n	8008a8e <_strtod_l+0x126>
 80089b0:	9302      	str	r3, [sp, #8]
 80089b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089b4:	4620      	mov	r0, r4
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	ab1a      	add	r3, sp, #104	; 0x68
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	4a8c      	ldr	r2, [pc, #560]	; (8008bf0 <_strtod_l+0x288>)
 80089be:	ab1b      	add	r3, sp, #108	; 0x6c
 80089c0:	a919      	add	r1, sp, #100	; 0x64
 80089c2:	f003 f8d9 	bl	800bb78 <__gethex>
 80089c6:	f010 070f 	ands.w	r7, r0, #15
 80089ca:	4605      	mov	r5, r0
 80089cc:	d005      	beq.n	80089da <_strtod_l+0x72>
 80089ce:	2f06      	cmp	r7, #6
 80089d0:	d128      	bne.n	8008a24 <_strtod_l+0xbc>
 80089d2:	2300      	movs	r3, #0
 80089d4:	3601      	adds	r6, #1
 80089d6:	9619      	str	r6, [sp, #100]	; 0x64
 80089d8:	930e      	str	r3, [sp, #56]	; 0x38
 80089da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f040 85a0 	bne.w	8009522 <_strtod_l+0xbba>
 80089e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089e4:	b1cb      	cbz	r3, 8008a1a <_strtod_l+0xb2>
 80089e6:	4642      	mov	r2, r8
 80089e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80089ec:	4610      	mov	r0, r2
 80089ee:	4619      	mov	r1, r3
 80089f0:	b01f      	add	sp, #124	; 0x7c
 80089f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f6:	2920      	cmp	r1, #32
 80089f8:	d1ce      	bne.n	8008998 <_strtod_l+0x30>
 80089fa:	3201      	adds	r2, #1
 80089fc:	e7c1      	b.n	8008982 <_strtod_l+0x1a>
 80089fe:	292d      	cmp	r1, #45	; 0x2d
 8008a00:	d1ca      	bne.n	8008998 <_strtod_l+0x30>
 8008a02:	2101      	movs	r1, #1
 8008a04:	910e      	str	r1, [sp, #56]	; 0x38
 8008a06:	1c51      	adds	r1, r2, #1
 8008a08:	9119      	str	r1, [sp, #100]	; 0x64
 8008a0a:	7852      	ldrb	r2, [r2, #1]
 8008a0c:	2a00      	cmp	r2, #0
 8008a0e:	d1c5      	bne.n	800899c <_strtod_l+0x34>
 8008a10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a12:	9519      	str	r5, [sp, #100]	; 0x64
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f040 8582 	bne.w	800951e <_strtod_l+0xbb6>
 8008a1a:	4642      	mov	r2, r8
 8008a1c:	464b      	mov	r3, r9
 8008a1e:	e7e5      	b.n	80089ec <_strtod_l+0x84>
 8008a20:	2100      	movs	r1, #0
 8008a22:	e7ef      	b.n	8008a04 <_strtod_l+0x9c>
 8008a24:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008a26:	b13a      	cbz	r2, 8008a38 <_strtod_l+0xd0>
 8008a28:	2135      	movs	r1, #53	; 0x35
 8008a2a:	a81c      	add	r0, sp, #112	; 0x70
 8008a2c:	f004 f800 	bl	800ca30 <__copybits>
 8008a30:	4620      	mov	r0, r4
 8008a32:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a34:	f003 fbe4 	bl	800c200 <_Bfree>
 8008a38:	3f01      	subs	r7, #1
 8008a3a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008a3c:	2f04      	cmp	r7, #4
 8008a3e:	d806      	bhi.n	8008a4e <_strtod_l+0xe6>
 8008a40:	e8df f007 	tbb	[pc, r7]
 8008a44:	201d0314 	.word	0x201d0314
 8008a48:	14          	.byte	0x14
 8008a49:	00          	.byte	0x00
 8008a4a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008a4e:	05e9      	lsls	r1, r5, #23
 8008a50:	bf48      	it	mi
 8008a52:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008a56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a5a:	0d1b      	lsrs	r3, r3, #20
 8008a5c:	051b      	lsls	r3, r3, #20
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1bb      	bne.n	80089da <_strtod_l+0x72>
 8008a62:	f002 f911 	bl	800ac88 <__errno>
 8008a66:	2322      	movs	r3, #34	; 0x22
 8008a68:	6003      	str	r3, [r0, #0]
 8008a6a:	e7b6      	b.n	80089da <_strtod_l+0x72>
 8008a6c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a70:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008a74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008a7c:	e7e7      	b.n	8008a4e <_strtod_l+0xe6>
 8008a7e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008bf4 <_strtod_l+0x28c>
 8008a82:	e7e4      	b.n	8008a4e <_strtod_l+0xe6>
 8008a84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008a88:	f04f 38ff 	mov.w	r8, #4294967295
 8008a8c:	e7df      	b.n	8008a4e <_strtod_l+0xe6>
 8008a8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	9219      	str	r2, [sp, #100]	; 0x64
 8008a94:	785b      	ldrb	r3, [r3, #1]
 8008a96:	2b30      	cmp	r3, #48	; 0x30
 8008a98:	d0f9      	beq.n	8008a8e <_strtod_l+0x126>
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d09d      	beq.n	80089da <_strtod_l+0x72>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	f04f 0a00 	mov.w	sl, #0
 8008aa4:	220a      	movs	r2, #10
 8008aa6:	46d3      	mov	fp, sl
 8008aa8:	9305      	str	r3, [sp, #20]
 8008aaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008aac:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ab2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008ab4:	7806      	ldrb	r6, [r0, #0]
 8008ab6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008aba:	b2d9      	uxtb	r1, r3
 8008abc:	2909      	cmp	r1, #9
 8008abe:	d926      	bls.n	8008b0e <_strtod_l+0x1a6>
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	494d      	ldr	r1, [pc, #308]	; (8008bf8 <_strtod_l+0x290>)
 8008ac4:	f002 f85e 	bl	800ab84 <strncmp>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d030      	beq.n	8008b2e <_strtod_l+0x1c6>
 8008acc:	2000      	movs	r0, #0
 8008ace:	4632      	mov	r2, r6
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	465e      	mov	r6, fp
 8008ad4:	9008      	str	r0, [sp, #32]
 8008ad6:	2a65      	cmp	r2, #101	; 0x65
 8008ad8:	d001      	beq.n	8008ade <_strtod_l+0x176>
 8008ada:	2a45      	cmp	r2, #69	; 0x45
 8008adc:	d113      	bne.n	8008b06 <_strtod_l+0x19e>
 8008ade:	b91e      	cbnz	r6, 8008ae8 <_strtod_l+0x180>
 8008ae0:	9a05      	ldr	r2, [sp, #20]
 8008ae2:	4302      	orrs	r2, r0
 8008ae4:	d094      	beq.n	8008a10 <_strtod_l+0xa8>
 8008ae6:	2600      	movs	r6, #0
 8008ae8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008aea:	1c6a      	adds	r2, r5, #1
 8008aec:	9219      	str	r2, [sp, #100]	; 0x64
 8008aee:	786a      	ldrb	r2, [r5, #1]
 8008af0:	2a2b      	cmp	r2, #43	; 0x2b
 8008af2:	d074      	beq.n	8008bde <_strtod_l+0x276>
 8008af4:	2a2d      	cmp	r2, #45	; 0x2d
 8008af6:	d078      	beq.n	8008bea <_strtod_l+0x282>
 8008af8:	f04f 0c00 	mov.w	ip, #0
 8008afc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b00:	2909      	cmp	r1, #9
 8008b02:	d97f      	bls.n	8008c04 <_strtod_l+0x29c>
 8008b04:	9519      	str	r5, [sp, #100]	; 0x64
 8008b06:	2700      	movs	r7, #0
 8008b08:	e09e      	b.n	8008c48 <_strtod_l+0x2e0>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e7c8      	b.n	8008aa0 <_strtod_l+0x138>
 8008b0e:	f1bb 0f08 	cmp.w	fp, #8
 8008b12:	bfd8      	it	le
 8008b14:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008b16:	f100 0001 	add.w	r0, r0, #1
 8008b1a:	bfd6      	itet	le
 8008b1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b20:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008b24:	930a      	strle	r3, [sp, #40]	; 0x28
 8008b26:	f10b 0b01 	add.w	fp, fp, #1
 8008b2a:	9019      	str	r0, [sp, #100]	; 0x64
 8008b2c:	e7c1      	b.n	8008ab2 <_strtod_l+0x14a>
 8008b2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	9219      	str	r2, [sp, #100]	; 0x64
 8008b34:	785a      	ldrb	r2, [r3, #1]
 8008b36:	f1bb 0f00 	cmp.w	fp, #0
 8008b3a:	d037      	beq.n	8008bac <_strtod_l+0x244>
 8008b3c:	465e      	mov	r6, fp
 8008b3e:	9008      	str	r0, [sp, #32]
 8008b40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b44:	2b09      	cmp	r3, #9
 8008b46:	d912      	bls.n	8008b6e <_strtod_l+0x206>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e7c4      	b.n	8008ad6 <_strtod_l+0x16e>
 8008b4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b4e:	3001      	adds	r0, #1
 8008b50:	1c5a      	adds	r2, r3, #1
 8008b52:	9219      	str	r2, [sp, #100]	; 0x64
 8008b54:	785a      	ldrb	r2, [r3, #1]
 8008b56:	2a30      	cmp	r2, #48	; 0x30
 8008b58:	d0f8      	beq.n	8008b4c <_strtod_l+0x1e4>
 8008b5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	f200 84e4 	bhi.w	800952c <_strtod_l+0xbc4>
 8008b64:	9008      	str	r0, [sp, #32]
 8008b66:	2000      	movs	r0, #0
 8008b68:	4606      	mov	r6, r0
 8008b6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b6e:	3a30      	subs	r2, #48	; 0x30
 8008b70:	f100 0301 	add.w	r3, r0, #1
 8008b74:	d014      	beq.n	8008ba0 <_strtod_l+0x238>
 8008b76:	9908      	ldr	r1, [sp, #32]
 8008b78:	eb00 0c06 	add.w	ip, r0, r6
 8008b7c:	4419      	add	r1, r3
 8008b7e:	9108      	str	r1, [sp, #32]
 8008b80:	4633      	mov	r3, r6
 8008b82:	210a      	movs	r1, #10
 8008b84:	4563      	cmp	r3, ip
 8008b86:	d113      	bne.n	8008bb0 <_strtod_l+0x248>
 8008b88:	1833      	adds	r3, r6, r0
 8008b8a:	2b08      	cmp	r3, #8
 8008b8c:	f106 0601 	add.w	r6, r6, #1
 8008b90:	4406      	add	r6, r0
 8008b92:	dc1a      	bgt.n	8008bca <_strtod_l+0x262>
 8008b94:	230a      	movs	r3, #10
 8008b96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b98:	fb03 2301 	mla	r3, r3, r1, r2
 8008b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	1c51      	adds	r1, r2, #1
 8008ba6:	9119      	str	r1, [sp, #100]	; 0x64
 8008ba8:	7852      	ldrb	r2, [r2, #1]
 8008baa:	e7c9      	b.n	8008b40 <_strtod_l+0x1d8>
 8008bac:	4658      	mov	r0, fp
 8008bae:	e7d2      	b.n	8008b56 <_strtod_l+0x1ee>
 8008bb0:	2b08      	cmp	r3, #8
 8008bb2:	f103 0301 	add.w	r3, r3, #1
 8008bb6:	dc03      	bgt.n	8008bc0 <_strtod_l+0x258>
 8008bb8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008bba:	434f      	muls	r7, r1
 8008bbc:	970a      	str	r7, [sp, #40]	; 0x28
 8008bbe:	e7e1      	b.n	8008b84 <_strtod_l+0x21c>
 8008bc0:	2b10      	cmp	r3, #16
 8008bc2:	bfd8      	it	le
 8008bc4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008bc8:	e7dc      	b.n	8008b84 <_strtod_l+0x21c>
 8008bca:	2e10      	cmp	r6, #16
 8008bcc:	bfdc      	itt	le
 8008bce:	230a      	movle	r3, #10
 8008bd0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008bd4:	e7e3      	b.n	8008b9e <_strtod_l+0x236>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	9308      	str	r3, [sp, #32]
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e780      	b.n	8008ae0 <_strtod_l+0x178>
 8008bde:	f04f 0c00 	mov.w	ip, #0
 8008be2:	1caa      	adds	r2, r5, #2
 8008be4:	9219      	str	r2, [sp, #100]	; 0x64
 8008be6:	78aa      	ldrb	r2, [r5, #2]
 8008be8:	e788      	b.n	8008afc <_strtod_l+0x194>
 8008bea:	f04f 0c01 	mov.w	ip, #1
 8008bee:	e7f8      	b.n	8008be2 <_strtod_l+0x27a>
 8008bf0:	0800e248 	.word	0x0800e248
 8008bf4:	7ff00000 	.word	0x7ff00000
 8008bf8:	0800e246 	.word	0x0800e246
 8008bfc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bfe:	1c51      	adds	r1, r2, #1
 8008c00:	9119      	str	r1, [sp, #100]	; 0x64
 8008c02:	7852      	ldrb	r2, [r2, #1]
 8008c04:	2a30      	cmp	r2, #48	; 0x30
 8008c06:	d0f9      	beq.n	8008bfc <_strtod_l+0x294>
 8008c08:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c0c:	2908      	cmp	r1, #8
 8008c0e:	f63f af7a 	bhi.w	8008b06 <_strtod_l+0x19e>
 8008c12:	3a30      	subs	r2, #48	; 0x30
 8008c14:	9209      	str	r2, [sp, #36]	; 0x24
 8008c16:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c18:	920c      	str	r2, [sp, #48]	; 0x30
 8008c1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c1c:	1c57      	adds	r7, r2, #1
 8008c1e:	9719      	str	r7, [sp, #100]	; 0x64
 8008c20:	7852      	ldrb	r2, [r2, #1]
 8008c22:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c26:	f1be 0f09 	cmp.w	lr, #9
 8008c2a:	d938      	bls.n	8008c9e <_strtod_l+0x336>
 8008c2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c2e:	1a7f      	subs	r7, r7, r1
 8008c30:	2f08      	cmp	r7, #8
 8008c32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008c36:	dc03      	bgt.n	8008c40 <_strtod_l+0x2d8>
 8008c38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c3a:	428f      	cmp	r7, r1
 8008c3c:	bfa8      	it	ge
 8008c3e:	460f      	movge	r7, r1
 8008c40:	f1bc 0f00 	cmp.w	ip, #0
 8008c44:	d000      	beq.n	8008c48 <_strtod_l+0x2e0>
 8008c46:	427f      	negs	r7, r7
 8008c48:	2e00      	cmp	r6, #0
 8008c4a:	d14f      	bne.n	8008cec <_strtod_l+0x384>
 8008c4c:	9905      	ldr	r1, [sp, #20]
 8008c4e:	4301      	orrs	r1, r0
 8008c50:	f47f aec3 	bne.w	80089da <_strtod_l+0x72>
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f47f aedb 	bne.w	8008a10 <_strtod_l+0xa8>
 8008c5a:	2a69      	cmp	r2, #105	; 0x69
 8008c5c:	d029      	beq.n	8008cb2 <_strtod_l+0x34a>
 8008c5e:	dc26      	bgt.n	8008cae <_strtod_l+0x346>
 8008c60:	2a49      	cmp	r2, #73	; 0x49
 8008c62:	d026      	beq.n	8008cb2 <_strtod_l+0x34a>
 8008c64:	2a4e      	cmp	r2, #78	; 0x4e
 8008c66:	f47f aed3 	bne.w	8008a10 <_strtod_l+0xa8>
 8008c6a:	499a      	ldr	r1, [pc, #616]	; (8008ed4 <_strtod_l+0x56c>)
 8008c6c:	a819      	add	r0, sp, #100	; 0x64
 8008c6e:	f003 f9c5 	bl	800bffc <__match>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	f43f aecc 	beq.w	8008a10 <_strtod_l+0xa8>
 8008c78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b28      	cmp	r3, #40	; 0x28
 8008c7e:	d12f      	bne.n	8008ce0 <_strtod_l+0x378>
 8008c80:	4995      	ldr	r1, [pc, #596]	; (8008ed8 <_strtod_l+0x570>)
 8008c82:	aa1c      	add	r2, sp, #112	; 0x70
 8008c84:	a819      	add	r0, sp, #100	; 0x64
 8008c86:	f003 f9cd 	bl	800c024 <__hexnan>
 8008c8a:	2805      	cmp	r0, #5
 8008c8c:	d128      	bne.n	8008ce0 <_strtod_l+0x378>
 8008c8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c90:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008c94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008c98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008c9c:	e69d      	b.n	80089da <_strtod_l+0x72>
 8008c9e:	210a      	movs	r1, #10
 8008ca0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008ca2:	fb01 2107 	mla	r1, r1, r7, r2
 8008ca6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008caa:	9209      	str	r2, [sp, #36]	; 0x24
 8008cac:	e7b5      	b.n	8008c1a <_strtod_l+0x2b2>
 8008cae:	2a6e      	cmp	r2, #110	; 0x6e
 8008cb0:	e7d9      	b.n	8008c66 <_strtod_l+0x2fe>
 8008cb2:	498a      	ldr	r1, [pc, #552]	; (8008edc <_strtod_l+0x574>)
 8008cb4:	a819      	add	r0, sp, #100	; 0x64
 8008cb6:	f003 f9a1 	bl	800bffc <__match>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	f43f aea8 	beq.w	8008a10 <_strtod_l+0xa8>
 8008cc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cc2:	4987      	ldr	r1, [pc, #540]	; (8008ee0 <_strtod_l+0x578>)
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	a819      	add	r0, sp, #100	; 0x64
 8008cc8:	9319      	str	r3, [sp, #100]	; 0x64
 8008cca:	f003 f997 	bl	800bffc <__match>
 8008cce:	b910      	cbnz	r0, 8008cd6 <_strtod_l+0x36e>
 8008cd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	9319      	str	r3, [sp, #100]	; 0x64
 8008cd6:	f04f 0800 	mov.w	r8, #0
 8008cda:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008ee4 <_strtod_l+0x57c>
 8008cde:	e67c      	b.n	80089da <_strtod_l+0x72>
 8008ce0:	4881      	ldr	r0, [pc, #516]	; (8008ee8 <_strtod_l+0x580>)
 8008ce2:	f002 f823 	bl	800ad2c <nan>
 8008ce6:	4680      	mov	r8, r0
 8008ce8:	4689      	mov	r9, r1
 8008cea:	e676      	b.n	80089da <_strtod_l+0x72>
 8008cec:	9b08      	ldr	r3, [sp, #32]
 8008cee:	f1bb 0f00 	cmp.w	fp, #0
 8008cf2:	bf08      	it	eq
 8008cf4:	46b3      	moveq	fp, r6
 8008cf6:	1afb      	subs	r3, r7, r3
 8008cf8:	2e10      	cmp	r6, #16
 8008cfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008cfc:	4635      	mov	r5, r6
 8008cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008d00:	bfa8      	it	ge
 8008d02:	2510      	movge	r5, #16
 8008d04:	f7f7 fb86 	bl	8000414 <__aeabi_ui2d>
 8008d08:	2e09      	cmp	r6, #9
 8008d0a:	4680      	mov	r8, r0
 8008d0c:	4689      	mov	r9, r1
 8008d0e:	dd13      	ble.n	8008d38 <_strtod_l+0x3d0>
 8008d10:	4b76      	ldr	r3, [pc, #472]	; (8008eec <_strtod_l+0x584>)
 8008d12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d1a:	f7f7 fbf5 	bl	8000508 <__aeabi_dmul>
 8008d1e:	4680      	mov	r8, r0
 8008d20:	4650      	mov	r0, sl
 8008d22:	4689      	mov	r9, r1
 8008d24:	f7f7 fb76 	bl	8000414 <__aeabi_ui2d>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	4649      	mov	r1, r9
 8008d30:	f7f7 fa34 	bl	800019c <__adddf3>
 8008d34:	4680      	mov	r8, r0
 8008d36:	4689      	mov	r9, r1
 8008d38:	2e0f      	cmp	r6, #15
 8008d3a:	dc36      	bgt.n	8008daa <_strtod_l+0x442>
 8008d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f43f ae4b 	beq.w	80089da <_strtod_l+0x72>
 8008d44:	dd22      	ble.n	8008d8c <_strtod_l+0x424>
 8008d46:	2b16      	cmp	r3, #22
 8008d48:	dc09      	bgt.n	8008d5e <_strtod_l+0x3f6>
 8008d4a:	4968      	ldr	r1, [pc, #416]	; (8008eec <_strtod_l+0x584>)
 8008d4c:	4642      	mov	r2, r8
 8008d4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d52:	464b      	mov	r3, r9
 8008d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d58:	f7f7 fbd6 	bl	8000508 <__aeabi_dmul>
 8008d5c:	e7c3      	b.n	8008ce6 <_strtod_l+0x37e>
 8008d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d60:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008d64:	4293      	cmp	r3, r2
 8008d66:	db20      	blt.n	8008daa <_strtod_l+0x442>
 8008d68:	4c60      	ldr	r4, [pc, #384]	; (8008eec <_strtod_l+0x584>)
 8008d6a:	f1c6 060f 	rsb	r6, r6, #15
 8008d6e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008d72:	4642      	mov	r2, r8
 8008d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d78:	464b      	mov	r3, r9
 8008d7a:	f7f7 fbc5 	bl	8000508 <__aeabi_dmul>
 8008d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d80:	1b9e      	subs	r6, r3, r6
 8008d82:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008d86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d8a:	e7e5      	b.n	8008d58 <_strtod_l+0x3f0>
 8008d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d8e:	3316      	adds	r3, #22
 8008d90:	db0b      	blt.n	8008daa <_strtod_l+0x442>
 8008d92:	9b08      	ldr	r3, [sp, #32]
 8008d94:	4640      	mov	r0, r8
 8008d96:	1bdf      	subs	r7, r3, r7
 8008d98:	4b54      	ldr	r3, [pc, #336]	; (8008eec <_strtod_l+0x584>)
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da4:	f7f7 fcda 	bl	800075c <__aeabi_ddiv>
 8008da8:	e79d      	b.n	8008ce6 <_strtod_l+0x37e>
 8008daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dac:	1b75      	subs	r5, r6, r5
 8008dae:	441d      	add	r5, r3
 8008db0:	2d00      	cmp	r5, #0
 8008db2:	dd70      	ble.n	8008e96 <_strtod_l+0x52e>
 8008db4:	f015 030f 	ands.w	r3, r5, #15
 8008db8:	d00a      	beq.n	8008dd0 <_strtod_l+0x468>
 8008dba:	494c      	ldr	r1, [pc, #304]	; (8008eec <_strtod_l+0x584>)
 8008dbc:	4642      	mov	r2, r8
 8008dbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dc6:	464b      	mov	r3, r9
 8008dc8:	f7f7 fb9e 	bl	8000508 <__aeabi_dmul>
 8008dcc:	4680      	mov	r8, r0
 8008dce:	4689      	mov	r9, r1
 8008dd0:	f035 050f 	bics.w	r5, r5, #15
 8008dd4:	d04d      	beq.n	8008e72 <_strtod_l+0x50a>
 8008dd6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008dda:	dd22      	ble.n	8008e22 <_strtod_l+0x4ba>
 8008ddc:	2600      	movs	r6, #0
 8008dde:	46b3      	mov	fp, r6
 8008de0:	960b      	str	r6, [sp, #44]	; 0x2c
 8008de2:	9608      	str	r6, [sp, #32]
 8008de4:	2322      	movs	r3, #34	; 0x22
 8008de6:	f04f 0800 	mov.w	r8, #0
 8008dea:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008ee4 <_strtod_l+0x57c>
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f43f adf1 	beq.w	80089da <_strtod_l+0x72>
 8008df8:	4620      	mov	r0, r4
 8008dfa:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008dfc:	f003 fa00 	bl	800c200 <_Bfree>
 8008e00:	4620      	mov	r0, r4
 8008e02:	9908      	ldr	r1, [sp, #32]
 8008e04:	f003 f9fc 	bl	800c200 <_Bfree>
 8008e08:	4659      	mov	r1, fp
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f003 f9f8 	bl	800c200 <_Bfree>
 8008e10:	4620      	mov	r0, r4
 8008e12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e14:	f003 f9f4 	bl	800c200 <_Bfree>
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f003 f9f0 	bl	800c200 <_Bfree>
 8008e20:	e5db      	b.n	80089da <_strtod_l+0x72>
 8008e22:	4b33      	ldr	r3, [pc, #204]	; (8008ef0 <_strtod_l+0x588>)
 8008e24:	4640      	mov	r0, r8
 8008e26:	9305      	str	r3, [sp, #20]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	469a      	mov	sl, r3
 8008e2e:	112d      	asrs	r5, r5, #4
 8008e30:	2d01      	cmp	r5, #1
 8008e32:	dc21      	bgt.n	8008e78 <_strtod_l+0x510>
 8008e34:	b10b      	cbz	r3, 8008e3a <_strtod_l+0x4d2>
 8008e36:	4680      	mov	r8, r0
 8008e38:	4689      	mov	r9, r1
 8008e3a:	492d      	ldr	r1, [pc, #180]	; (8008ef0 <_strtod_l+0x588>)
 8008e3c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008e40:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e44:	4642      	mov	r2, r8
 8008e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e4a:	464b      	mov	r3, r9
 8008e4c:	f7f7 fb5c 	bl	8000508 <__aeabi_dmul>
 8008e50:	4b24      	ldr	r3, [pc, #144]	; (8008ee4 <_strtod_l+0x57c>)
 8008e52:	460a      	mov	r2, r1
 8008e54:	400b      	ands	r3, r1
 8008e56:	4927      	ldr	r1, [pc, #156]	; (8008ef4 <_strtod_l+0x58c>)
 8008e58:	4680      	mov	r8, r0
 8008e5a:	428b      	cmp	r3, r1
 8008e5c:	d8be      	bhi.n	8008ddc <_strtod_l+0x474>
 8008e5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e62:	428b      	cmp	r3, r1
 8008e64:	bf86      	itte	hi
 8008e66:	f04f 38ff 	movhi.w	r8, #4294967295
 8008e6a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008ef8 <_strtod_l+0x590>
 8008e6e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008e72:	2300      	movs	r3, #0
 8008e74:	9305      	str	r3, [sp, #20]
 8008e76:	e07b      	b.n	8008f70 <_strtod_l+0x608>
 8008e78:	07ea      	lsls	r2, r5, #31
 8008e7a:	d505      	bpl.n	8008e88 <_strtod_l+0x520>
 8008e7c:	9b05      	ldr	r3, [sp, #20]
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fb41 	bl	8000508 <__aeabi_dmul>
 8008e86:	2301      	movs	r3, #1
 8008e88:	9a05      	ldr	r2, [sp, #20]
 8008e8a:	f10a 0a01 	add.w	sl, sl, #1
 8008e8e:	3208      	adds	r2, #8
 8008e90:	106d      	asrs	r5, r5, #1
 8008e92:	9205      	str	r2, [sp, #20]
 8008e94:	e7cc      	b.n	8008e30 <_strtod_l+0x4c8>
 8008e96:	d0ec      	beq.n	8008e72 <_strtod_l+0x50a>
 8008e98:	426d      	negs	r5, r5
 8008e9a:	f015 020f 	ands.w	r2, r5, #15
 8008e9e:	d00a      	beq.n	8008eb6 <_strtod_l+0x54e>
 8008ea0:	4b12      	ldr	r3, [pc, #72]	; (8008eec <_strtod_l+0x584>)
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eae:	f7f7 fc55 	bl	800075c <__aeabi_ddiv>
 8008eb2:	4680      	mov	r8, r0
 8008eb4:	4689      	mov	r9, r1
 8008eb6:	112d      	asrs	r5, r5, #4
 8008eb8:	d0db      	beq.n	8008e72 <_strtod_l+0x50a>
 8008eba:	2d1f      	cmp	r5, #31
 8008ebc:	dd1e      	ble.n	8008efc <_strtod_l+0x594>
 8008ebe:	2600      	movs	r6, #0
 8008ec0:	46b3      	mov	fp, r6
 8008ec2:	960b      	str	r6, [sp, #44]	; 0x2c
 8008ec4:	9608      	str	r6, [sp, #32]
 8008ec6:	2322      	movs	r3, #34	; 0x22
 8008ec8:	f04f 0800 	mov.w	r8, #0
 8008ecc:	f04f 0900 	mov.w	r9, #0
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	e78d      	b.n	8008df0 <_strtod_l+0x488>
 8008ed4:	0800e3a6 	.word	0x0800e3a6
 8008ed8:	0800e25c 	.word	0x0800e25c
 8008edc:	0800e39e 	.word	0x0800e39e
 8008ee0:	0800ea6e 	.word	0x0800ea6e
 8008ee4:	7ff00000 	.word	0x7ff00000
 8008ee8:	0800ed00 	.word	0x0800ed00
 8008eec:	0800ebe0 	.word	0x0800ebe0
 8008ef0:	0800ebb8 	.word	0x0800ebb8
 8008ef4:	7ca00000 	.word	0x7ca00000
 8008ef8:	7fefffff 	.word	0x7fefffff
 8008efc:	f015 0310 	ands.w	r3, r5, #16
 8008f00:	bf18      	it	ne
 8008f02:	236a      	movne	r3, #106	; 0x6a
 8008f04:	4640      	mov	r0, r8
 8008f06:	9305      	str	r3, [sp, #20]
 8008f08:	4649      	mov	r1, r9
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80091d8 <_strtod_l+0x870>
 8008f10:	07ea      	lsls	r2, r5, #31
 8008f12:	d504      	bpl.n	8008f1e <_strtod_l+0x5b6>
 8008f14:	e9da 2300 	ldrd	r2, r3, [sl]
 8008f18:	f7f7 faf6 	bl	8000508 <__aeabi_dmul>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	106d      	asrs	r5, r5, #1
 8008f20:	f10a 0a08 	add.w	sl, sl, #8
 8008f24:	d1f4      	bne.n	8008f10 <_strtod_l+0x5a8>
 8008f26:	b10b      	cbz	r3, 8008f2c <_strtod_l+0x5c4>
 8008f28:	4680      	mov	r8, r0
 8008f2a:	4689      	mov	r9, r1
 8008f2c:	9b05      	ldr	r3, [sp, #20]
 8008f2e:	b1bb      	cbz	r3, 8008f60 <_strtod_l+0x5f8>
 8008f30:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008f34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	dd10      	ble.n	8008f60 <_strtod_l+0x5f8>
 8008f3e:	2b1f      	cmp	r3, #31
 8008f40:	f340 8128 	ble.w	8009194 <_strtod_l+0x82c>
 8008f44:	2b34      	cmp	r3, #52	; 0x34
 8008f46:	bfd8      	it	le
 8008f48:	f04f 33ff 	movle.w	r3, #4294967295
 8008f4c:	f04f 0800 	mov.w	r8, #0
 8008f50:	bfcf      	iteee	gt
 8008f52:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008f56:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008f5a:	4093      	lslle	r3, r2
 8008f5c:	ea03 0901 	andle.w	r9, r3, r1
 8008f60:	2200      	movs	r2, #0
 8008f62:	2300      	movs	r3, #0
 8008f64:	4640      	mov	r0, r8
 8008f66:	4649      	mov	r1, r9
 8008f68:	f7f7 fd36 	bl	80009d8 <__aeabi_dcmpeq>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d1a6      	bne.n	8008ebe <_strtod_l+0x556>
 8008f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f72:	465a      	mov	r2, fp
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	4620      	mov	r0, r4
 8008f78:	4633      	mov	r3, r6
 8008f7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f7c:	f003 f9a8 	bl	800c2d0 <__s2b>
 8008f80:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f82:	2800      	cmp	r0, #0
 8008f84:	f43f af2a 	beq.w	8008ddc <_strtod_l+0x474>
 8008f88:	2600      	movs	r6, #0
 8008f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f8c:	9b08      	ldr	r3, [sp, #32]
 8008f8e:	2a00      	cmp	r2, #0
 8008f90:	eba3 0307 	sub.w	r3, r3, r7
 8008f94:	bfa8      	it	ge
 8008f96:	2300      	movge	r3, #0
 8008f98:	46b3      	mov	fp, r6
 8008f9a:	9312      	str	r3, [sp, #72]	; 0x48
 8008f9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008fa0:	9316      	str	r3, [sp, #88]	; 0x58
 8008fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	6859      	ldr	r1, [r3, #4]
 8008fa8:	f003 f8ea 	bl	800c180 <_Balloc>
 8008fac:	9008      	str	r0, [sp, #32]
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	f43f af18 	beq.w	8008de4 <_strtod_l+0x47c>
 8008fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fb6:	300c      	adds	r0, #12
 8008fb8:	691a      	ldr	r2, [r3, #16]
 8008fba:	f103 010c 	add.w	r1, r3, #12
 8008fbe:	3202      	adds	r2, #2
 8008fc0:	0092      	lsls	r2, r2, #2
 8008fc2:	f001 fea4 	bl	800ad0e <memcpy>
 8008fc6:	ab1c      	add	r3, sp, #112	; 0x70
 8008fc8:	9301      	str	r3, [sp, #4]
 8008fca:	ab1b      	add	r3, sp, #108	; 0x6c
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	4642      	mov	r2, r8
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008fd8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008fdc:	f003 fca4 	bl	800c928 <__d2b>
 8008fe0:	901a      	str	r0, [sp, #104]	; 0x68
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	f43f aefe 	beq.w	8008de4 <_strtod_l+0x47c>
 8008fe8:	2101      	movs	r1, #1
 8008fea:	4620      	mov	r0, r4
 8008fec:	f003 fa08 	bl	800c400 <__i2b>
 8008ff0:	4683      	mov	fp, r0
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	f43f aef6 	beq.w	8008de4 <_strtod_l+0x47c>
 8008ff8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008ffa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008ffc:	2f00      	cmp	r7, #0
 8008ffe:	bfab      	itete	ge
 8009000:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8009002:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009004:	eb07 0a03 	addge.w	sl, r7, r3
 8009008:	1bdd      	sublt	r5, r3, r7
 800900a:	9b05      	ldr	r3, [sp, #20]
 800900c:	bfa8      	it	ge
 800900e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009010:	eba7 0703 	sub.w	r7, r7, r3
 8009014:	4417      	add	r7, r2
 8009016:	4b71      	ldr	r3, [pc, #452]	; (80091dc <_strtod_l+0x874>)
 8009018:	f107 37ff 	add.w	r7, r7, #4294967295
 800901c:	bfb8      	it	lt
 800901e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8009022:	429f      	cmp	r7, r3
 8009024:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009028:	f280 80c7 	bge.w	80091ba <_strtod_l+0x852>
 800902c:	1bdb      	subs	r3, r3, r7
 800902e:	2b1f      	cmp	r3, #31
 8009030:	f04f 0101 	mov.w	r1, #1
 8009034:	eba2 0203 	sub.w	r2, r2, r3
 8009038:	f300 80b3 	bgt.w	80091a2 <_strtod_l+0x83a>
 800903c:	fa01 f303 	lsl.w	r3, r1, r3
 8009040:	9313      	str	r3, [sp, #76]	; 0x4c
 8009042:	2300      	movs	r3, #0
 8009044:	9310      	str	r3, [sp, #64]	; 0x40
 8009046:	eb0a 0702 	add.w	r7, sl, r2
 800904a:	9b05      	ldr	r3, [sp, #20]
 800904c:	45ba      	cmp	sl, r7
 800904e:	4415      	add	r5, r2
 8009050:	441d      	add	r5, r3
 8009052:	4653      	mov	r3, sl
 8009054:	bfa8      	it	ge
 8009056:	463b      	movge	r3, r7
 8009058:	42ab      	cmp	r3, r5
 800905a:	bfa8      	it	ge
 800905c:	462b      	movge	r3, r5
 800905e:	2b00      	cmp	r3, #0
 8009060:	bfc2      	ittt	gt
 8009062:	1aff      	subgt	r7, r7, r3
 8009064:	1aed      	subgt	r5, r5, r3
 8009066:	ebaa 0a03 	subgt.w	sl, sl, r3
 800906a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800906c:	2b00      	cmp	r3, #0
 800906e:	dd17      	ble.n	80090a0 <_strtod_l+0x738>
 8009070:	4659      	mov	r1, fp
 8009072:	461a      	mov	r2, r3
 8009074:	4620      	mov	r0, r4
 8009076:	f003 fa81 	bl	800c57c <__pow5mult>
 800907a:	4683      	mov	fp, r0
 800907c:	2800      	cmp	r0, #0
 800907e:	f43f aeb1 	beq.w	8008de4 <_strtod_l+0x47c>
 8009082:	4601      	mov	r1, r0
 8009084:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009086:	4620      	mov	r0, r4
 8009088:	f003 f9d0 	bl	800c42c <__multiply>
 800908c:	900a      	str	r0, [sp, #40]	; 0x28
 800908e:	2800      	cmp	r0, #0
 8009090:	f43f aea8 	beq.w	8008de4 <_strtod_l+0x47c>
 8009094:	4620      	mov	r0, r4
 8009096:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009098:	f003 f8b2 	bl	800c200 <_Bfree>
 800909c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800909e:	931a      	str	r3, [sp, #104]	; 0x68
 80090a0:	2f00      	cmp	r7, #0
 80090a2:	f300 808f 	bgt.w	80091c4 <_strtod_l+0x85c>
 80090a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	dd08      	ble.n	80090be <_strtod_l+0x756>
 80090ac:	4620      	mov	r0, r4
 80090ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80090b0:	9908      	ldr	r1, [sp, #32]
 80090b2:	f003 fa63 	bl	800c57c <__pow5mult>
 80090b6:	9008      	str	r0, [sp, #32]
 80090b8:	2800      	cmp	r0, #0
 80090ba:	f43f ae93 	beq.w	8008de4 <_strtod_l+0x47c>
 80090be:	2d00      	cmp	r5, #0
 80090c0:	dd08      	ble.n	80090d4 <_strtod_l+0x76c>
 80090c2:	462a      	mov	r2, r5
 80090c4:	4620      	mov	r0, r4
 80090c6:	9908      	ldr	r1, [sp, #32]
 80090c8:	f003 fab2 	bl	800c630 <__lshift>
 80090cc:	9008      	str	r0, [sp, #32]
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f43f ae88 	beq.w	8008de4 <_strtod_l+0x47c>
 80090d4:	f1ba 0f00 	cmp.w	sl, #0
 80090d8:	dd08      	ble.n	80090ec <_strtod_l+0x784>
 80090da:	4659      	mov	r1, fp
 80090dc:	4652      	mov	r2, sl
 80090de:	4620      	mov	r0, r4
 80090e0:	f003 faa6 	bl	800c630 <__lshift>
 80090e4:	4683      	mov	fp, r0
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f43f ae7c 	beq.w	8008de4 <_strtod_l+0x47c>
 80090ec:	4620      	mov	r0, r4
 80090ee:	9a08      	ldr	r2, [sp, #32]
 80090f0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80090f2:	f003 fb25 	bl	800c740 <__mdiff>
 80090f6:	4606      	mov	r6, r0
 80090f8:	2800      	cmp	r0, #0
 80090fa:	f43f ae73 	beq.w	8008de4 <_strtod_l+0x47c>
 80090fe:	2500      	movs	r5, #0
 8009100:	68c3      	ldr	r3, [r0, #12]
 8009102:	4659      	mov	r1, fp
 8009104:	60c5      	str	r5, [r0, #12]
 8009106:	930a      	str	r3, [sp, #40]	; 0x28
 8009108:	f003 fafe 	bl	800c708 <__mcmp>
 800910c:	42a8      	cmp	r0, r5
 800910e:	da6b      	bge.n	80091e8 <_strtod_l+0x880>
 8009110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009112:	ea53 0308 	orrs.w	r3, r3, r8
 8009116:	f040 808f 	bne.w	8009238 <_strtod_l+0x8d0>
 800911a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800911e:	2b00      	cmp	r3, #0
 8009120:	f040 808a 	bne.w	8009238 <_strtod_l+0x8d0>
 8009124:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009128:	0d1b      	lsrs	r3, r3, #20
 800912a:	051b      	lsls	r3, r3, #20
 800912c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009130:	f240 8082 	bls.w	8009238 <_strtod_l+0x8d0>
 8009134:	6973      	ldr	r3, [r6, #20]
 8009136:	b913      	cbnz	r3, 800913e <_strtod_l+0x7d6>
 8009138:	6933      	ldr	r3, [r6, #16]
 800913a:	2b01      	cmp	r3, #1
 800913c:	dd7c      	ble.n	8009238 <_strtod_l+0x8d0>
 800913e:	4631      	mov	r1, r6
 8009140:	2201      	movs	r2, #1
 8009142:	4620      	mov	r0, r4
 8009144:	f003 fa74 	bl	800c630 <__lshift>
 8009148:	4659      	mov	r1, fp
 800914a:	4606      	mov	r6, r0
 800914c:	f003 fadc 	bl	800c708 <__mcmp>
 8009150:	2800      	cmp	r0, #0
 8009152:	dd71      	ble.n	8009238 <_strtod_l+0x8d0>
 8009154:	9905      	ldr	r1, [sp, #20]
 8009156:	464b      	mov	r3, r9
 8009158:	4a21      	ldr	r2, [pc, #132]	; (80091e0 <_strtod_l+0x878>)
 800915a:	2900      	cmp	r1, #0
 800915c:	f000 808d 	beq.w	800927a <_strtod_l+0x912>
 8009160:	ea02 0109 	and.w	r1, r2, r9
 8009164:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009168:	f300 8087 	bgt.w	800927a <_strtod_l+0x912>
 800916c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009170:	f77f aea9 	ble.w	8008ec6 <_strtod_l+0x55e>
 8009174:	4640      	mov	r0, r8
 8009176:	4649      	mov	r1, r9
 8009178:	4b1a      	ldr	r3, [pc, #104]	; (80091e4 <_strtod_l+0x87c>)
 800917a:	2200      	movs	r2, #0
 800917c:	f7f7 f9c4 	bl	8000508 <__aeabi_dmul>
 8009180:	4b17      	ldr	r3, [pc, #92]	; (80091e0 <_strtod_l+0x878>)
 8009182:	4680      	mov	r8, r0
 8009184:	400b      	ands	r3, r1
 8009186:	4689      	mov	r9, r1
 8009188:	2b00      	cmp	r3, #0
 800918a:	f47f ae35 	bne.w	8008df8 <_strtod_l+0x490>
 800918e:	2322      	movs	r3, #34	; 0x22
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	e631      	b.n	8008df8 <_strtod_l+0x490>
 8009194:	f04f 32ff 	mov.w	r2, #4294967295
 8009198:	fa02 f303 	lsl.w	r3, r2, r3
 800919c:	ea03 0808 	and.w	r8, r3, r8
 80091a0:	e6de      	b.n	8008f60 <_strtod_l+0x5f8>
 80091a2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80091a6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80091aa:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80091ae:	37e2      	adds	r7, #226	; 0xe2
 80091b0:	fa01 f307 	lsl.w	r3, r1, r7
 80091b4:	9310      	str	r3, [sp, #64]	; 0x40
 80091b6:	9113      	str	r1, [sp, #76]	; 0x4c
 80091b8:	e745      	b.n	8009046 <_strtod_l+0x6de>
 80091ba:	2300      	movs	r3, #0
 80091bc:	9310      	str	r3, [sp, #64]	; 0x40
 80091be:	2301      	movs	r3, #1
 80091c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80091c2:	e740      	b.n	8009046 <_strtod_l+0x6de>
 80091c4:	463a      	mov	r2, r7
 80091c6:	4620      	mov	r0, r4
 80091c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80091ca:	f003 fa31 	bl	800c630 <__lshift>
 80091ce:	901a      	str	r0, [sp, #104]	; 0x68
 80091d0:	2800      	cmp	r0, #0
 80091d2:	f47f af68 	bne.w	80090a6 <_strtod_l+0x73e>
 80091d6:	e605      	b.n	8008de4 <_strtod_l+0x47c>
 80091d8:	0800e270 	.word	0x0800e270
 80091dc:	fffffc02 	.word	0xfffffc02
 80091e0:	7ff00000 	.word	0x7ff00000
 80091e4:	39500000 	.word	0x39500000
 80091e8:	46ca      	mov	sl, r9
 80091ea:	d165      	bne.n	80092b8 <_strtod_l+0x950>
 80091ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091f2:	b352      	cbz	r2, 800924a <_strtod_l+0x8e2>
 80091f4:	4a9e      	ldr	r2, [pc, #632]	; (8009470 <_strtod_l+0xb08>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d12a      	bne.n	8009250 <_strtod_l+0x8e8>
 80091fa:	9b05      	ldr	r3, [sp, #20]
 80091fc:	4641      	mov	r1, r8
 80091fe:	b1fb      	cbz	r3, 8009240 <_strtod_l+0x8d8>
 8009200:	4b9c      	ldr	r3, [pc, #624]	; (8009474 <_strtod_l+0xb0c>)
 8009202:	f04f 32ff 	mov.w	r2, #4294967295
 8009206:	ea09 0303 	and.w	r3, r9, r3
 800920a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800920e:	d81a      	bhi.n	8009246 <_strtod_l+0x8de>
 8009210:	0d1b      	lsrs	r3, r3, #20
 8009212:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009216:	fa02 f303 	lsl.w	r3, r2, r3
 800921a:	4299      	cmp	r1, r3
 800921c:	d118      	bne.n	8009250 <_strtod_l+0x8e8>
 800921e:	4b96      	ldr	r3, [pc, #600]	; (8009478 <_strtod_l+0xb10>)
 8009220:	459a      	cmp	sl, r3
 8009222:	d102      	bne.n	800922a <_strtod_l+0x8c2>
 8009224:	3101      	adds	r1, #1
 8009226:	f43f addd 	beq.w	8008de4 <_strtod_l+0x47c>
 800922a:	f04f 0800 	mov.w	r8, #0
 800922e:	4b91      	ldr	r3, [pc, #580]	; (8009474 <_strtod_l+0xb0c>)
 8009230:	ea0a 0303 	and.w	r3, sl, r3
 8009234:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009238:	9b05      	ldr	r3, [sp, #20]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d19a      	bne.n	8009174 <_strtod_l+0x80c>
 800923e:	e5db      	b.n	8008df8 <_strtod_l+0x490>
 8009240:	f04f 33ff 	mov.w	r3, #4294967295
 8009244:	e7e9      	b.n	800921a <_strtod_l+0x8b2>
 8009246:	4613      	mov	r3, r2
 8009248:	e7e7      	b.n	800921a <_strtod_l+0x8b2>
 800924a:	ea53 0308 	orrs.w	r3, r3, r8
 800924e:	d081      	beq.n	8009154 <_strtod_l+0x7ec>
 8009250:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009252:	b1e3      	cbz	r3, 800928e <_strtod_l+0x926>
 8009254:	ea13 0f0a 	tst.w	r3, sl
 8009258:	d0ee      	beq.n	8009238 <_strtod_l+0x8d0>
 800925a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800925c:	4640      	mov	r0, r8
 800925e:	4649      	mov	r1, r9
 8009260:	9a05      	ldr	r2, [sp, #20]
 8009262:	b1c3      	cbz	r3, 8009296 <_strtod_l+0x92e>
 8009264:	f7ff fb5d 	bl	8008922 <sulp>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800926e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009270:	f7f6 ff94 	bl	800019c <__adddf3>
 8009274:	4680      	mov	r8, r0
 8009276:	4689      	mov	r9, r1
 8009278:	e7de      	b.n	8009238 <_strtod_l+0x8d0>
 800927a:	4013      	ands	r3, r2
 800927c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009280:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009284:	f04f 38ff 	mov.w	r8, #4294967295
 8009288:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800928c:	e7d4      	b.n	8009238 <_strtod_l+0x8d0>
 800928e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009290:	ea13 0f08 	tst.w	r3, r8
 8009294:	e7e0      	b.n	8009258 <_strtod_l+0x8f0>
 8009296:	f7ff fb44 	bl	8008922 <sulp>
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80092a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092a2:	f7f6 ff79 	bl	8000198 <__aeabi_dsub>
 80092a6:	2200      	movs	r2, #0
 80092a8:	2300      	movs	r3, #0
 80092aa:	4680      	mov	r8, r0
 80092ac:	4689      	mov	r9, r1
 80092ae:	f7f7 fb93 	bl	80009d8 <__aeabi_dcmpeq>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d0c0      	beq.n	8009238 <_strtod_l+0x8d0>
 80092b6:	e606      	b.n	8008ec6 <_strtod_l+0x55e>
 80092b8:	4659      	mov	r1, fp
 80092ba:	4630      	mov	r0, r6
 80092bc:	f003 fb8a 	bl	800c9d4 <__ratio>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80092c8:	2200      	movs	r2, #0
 80092ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092ce:	f7f7 fb97 	bl	8000a00 <__aeabi_dcmple>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	d06f      	beq.n	80093b6 <_strtod_l+0xa4e>
 80092d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d17c      	bne.n	80093d6 <_strtod_l+0xa6e>
 80092dc:	f1b8 0f00 	cmp.w	r8, #0
 80092e0:	d159      	bne.n	8009396 <_strtod_l+0xa2e>
 80092e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d17b      	bne.n	80093e2 <_strtod_l+0xa7a>
 80092ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092ee:	2200      	movs	r2, #0
 80092f0:	4b62      	ldr	r3, [pc, #392]	; (800947c <_strtod_l+0xb14>)
 80092f2:	f7f7 fb7b 	bl	80009ec <__aeabi_dcmplt>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d15a      	bne.n	80093b0 <_strtod_l+0xa48>
 80092fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092fe:	2200      	movs	r2, #0
 8009300:	4b5f      	ldr	r3, [pc, #380]	; (8009480 <_strtod_l+0xb18>)
 8009302:	f7f7 f901 	bl	8000508 <__aeabi_dmul>
 8009306:	4605      	mov	r5, r0
 8009308:	460f      	mov	r7, r1
 800930a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800930e:	9506      	str	r5, [sp, #24]
 8009310:	9307      	str	r3, [sp, #28]
 8009312:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009316:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800931a:	4b56      	ldr	r3, [pc, #344]	; (8009474 <_strtod_l+0xb0c>)
 800931c:	4a55      	ldr	r2, [pc, #340]	; (8009474 <_strtod_l+0xb0c>)
 800931e:	ea0a 0303 	and.w	r3, sl, r3
 8009322:	9313      	str	r3, [sp, #76]	; 0x4c
 8009324:	4b57      	ldr	r3, [pc, #348]	; (8009484 <_strtod_l+0xb1c>)
 8009326:	ea0a 0202 	and.w	r2, sl, r2
 800932a:	429a      	cmp	r2, r3
 800932c:	f040 80b0 	bne.w	8009490 <_strtod_l+0xb28>
 8009330:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009334:	4640      	mov	r0, r8
 8009336:	4649      	mov	r1, r9
 8009338:	f003 fa8e 	bl	800c858 <__ulp>
 800933c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009340:	f7f7 f8e2 	bl	8000508 <__aeabi_dmul>
 8009344:	4642      	mov	r2, r8
 8009346:	464b      	mov	r3, r9
 8009348:	f7f6 ff28 	bl	800019c <__adddf3>
 800934c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8009474 <_strtod_l+0xb0c>
 8009350:	4a4d      	ldr	r2, [pc, #308]	; (8009488 <_strtod_l+0xb20>)
 8009352:	ea01 0a0a 	and.w	sl, r1, sl
 8009356:	4592      	cmp	sl, r2
 8009358:	4680      	mov	r8, r0
 800935a:	d948      	bls.n	80093ee <_strtod_l+0xa86>
 800935c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800935e:	4b46      	ldr	r3, [pc, #280]	; (8009478 <_strtod_l+0xb10>)
 8009360:	429a      	cmp	r2, r3
 8009362:	d103      	bne.n	800936c <_strtod_l+0xa04>
 8009364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009366:	3301      	adds	r3, #1
 8009368:	f43f ad3c 	beq.w	8008de4 <_strtod_l+0x47c>
 800936c:	f04f 38ff 	mov.w	r8, #4294967295
 8009370:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009478 <_strtod_l+0xb10>
 8009374:	4620      	mov	r0, r4
 8009376:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009378:	f002 ff42 	bl	800c200 <_Bfree>
 800937c:	4620      	mov	r0, r4
 800937e:	9908      	ldr	r1, [sp, #32]
 8009380:	f002 ff3e 	bl	800c200 <_Bfree>
 8009384:	4659      	mov	r1, fp
 8009386:	4620      	mov	r0, r4
 8009388:	f002 ff3a 	bl	800c200 <_Bfree>
 800938c:	4631      	mov	r1, r6
 800938e:	4620      	mov	r0, r4
 8009390:	f002 ff36 	bl	800c200 <_Bfree>
 8009394:	e605      	b.n	8008fa2 <_strtod_l+0x63a>
 8009396:	f1b8 0f01 	cmp.w	r8, #1
 800939a:	d103      	bne.n	80093a4 <_strtod_l+0xa3c>
 800939c:	f1b9 0f00 	cmp.w	r9, #0
 80093a0:	f43f ad91 	beq.w	8008ec6 <_strtod_l+0x55e>
 80093a4:	2200      	movs	r2, #0
 80093a6:	4b39      	ldr	r3, [pc, #228]	; (800948c <_strtod_l+0xb24>)
 80093a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80093aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80093ae:	e016      	b.n	80093de <_strtod_l+0xa76>
 80093b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80093b2:	4f33      	ldr	r7, [pc, #204]	; (8009480 <_strtod_l+0xb18>)
 80093b4:	e7a9      	b.n	800930a <_strtod_l+0x9a2>
 80093b6:	4b32      	ldr	r3, [pc, #200]	; (8009480 <_strtod_l+0xb18>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093be:	f7f7 f8a3 	bl	8000508 <__aeabi_dmul>
 80093c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c4:	4605      	mov	r5, r0
 80093c6:	460f      	mov	r7, r1
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d09e      	beq.n	800930a <_strtod_l+0x9a2>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80093d4:	e79d      	b.n	8009312 <_strtod_l+0x9aa>
 80093d6:	2200      	movs	r2, #0
 80093d8:	4b28      	ldr	r3, [pc, #160]	; (800947c <_strtod_l+0xb14>)
 80093da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80093de:	4f27      	ldr	r7, [pc, #156]	; (800947c <_strtod_l+0xb14>)
 80093e0:	e797      	b.n	8009312 <_strtod_l+0x9aa>
 80093e2:	2200      	movs	r2, #0
 80093e4:	4b29      	ldr	r3, [pc, #164]	; (800948c <_strtod_l+0xb24>)
 80093e6:	4645      	mov	r5, r8
 80093e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80093ec:	e7f7      	b.n	80093de <_strtod_l+0xa76>
 80093ee:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80093f2:	9b05      	ldr	r3, [sp, #20]
 80093f4:	46ca      	mov	sl, r9
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1bc      	bne.n	8009374 <_strtod_l+0xa0c>
 80093fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009400:	0d1b      	lsrs	r3, r3, #20
 8009402:	051b      	lsls	r3, r3, #20
 8009404:	429a      	cmp	r2, r3
 8009406:	d1b5      	bne.n	8009374 <_strtod_l+0xa0c>
 8009408:	4628      	mov	r0, r5
 800940a:	4639      	mov	r1, r7
 800940c:	f7f7 ff0e 	bl	800122c <__aeabi_d2lz>
 8009410:	f7f7 f84c 	bl	80004ac <__aeabi_l2d>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4628      	mov	r0, r5
 800941a:	4639      	mov	r1, r7
 800941c:	f7f6 febc 	bl	8000198 <__aeabi_dsub>
 8009420:	460b      	mov	r3, r1
 8009422:	4602      	mov	r2, r0
 8009424:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009428:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800942c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800942e:	ea4a 0a08 	orr.w	sl, sl, r8
 8009432:	ea5a 0a03 	orrs.w	sl, sl, r3
 8009436:	d06c      	beq.n	8009512 <_strtod_l+0xbaa>
 8009438:	a309      	add	r3, pc, #36	; (adr r3, 8009460 <_strtod_l+0xaf8>)
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	f7f7 fad5 	bl	80009ec <__aeabi_dcmplt>
 8009442:	2800      	cmp	r0, #0
 8009444:	f47f acd8 	bne.w	8008df8 <_strtod_l+0x490>
 8009448:	a307      	add	r3, pc, #28	; (adr r3, 8009468 <_strtod_l+0xb00>)
 800944a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009452:	f7f7 fae9 	bl	8000a28 <__aeabi_dcmpgt>
 8009456:	2800      	cmp	r0, #0
 8009458:	d08c      	beq.n	8009374 <_strtod_l+0xa0c>
 800945a:	e4cd      	b.n	8008df8 <_strtod_l+0x490>
 800945c:	f3af 8000 	nop.w
 8009460:	94a03595 	.word	0x94a03595
 8009464:	3fdfffff 	.word	0x3fdfffff
 8009468:	35afe535 	.word	0x35afe535
 800946c:	3fe00000 	.word	0x3fe00000
 8009470:	000fffff 	.word	0x000fffff
 8009474:	7ff00000 	.word	0x7ff00000
 8009478:	7fefffff 	.word	0x7fefffff
 800947c:	3ff00000 	.word	0x3ff00000
 8009480:	3fe00000 	.word	0x3fe00000
 8009484:	7fe00000 	.word	0x7fe00000
 8009488:	7c9fffff 	.word	0x7c9fffff
 800948c:	bff00000 	.word	0xbff00000
 8009490:	9b05      	ldr	r3, [sp, #20]
 8009492:	b333      	cbz	r3, 80094e2 <_strtod_l+0xb7a>
 8009494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009496:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800949a:	d822      	bhi.n	80094e2 <_strtod_l+0xb7a>
 800949c:	a328      	add	r3, pc, #160	; (adr r3, 8009540 <_strtod_l+0xbd8>)
 800949e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a2:	4628      	mov	r0, r5
 80094a4:	4639      	mov	r1, r7
 80094a6:	f7f7 faab 	bl	8000a00 <__aeabi_dcmple>
 80094aa:	b1a0      	cbz	r0, 80094d6 <_strtod_l+0xb6e>
 80094ac:	4639      	mov	r1, r7
 80094ae:	4628      	mov	r0, r5
 80094b0:	f7f7 fb02 	bl	8000ab8 <__aeabi_d2uiz>
 80094b4:	2801      	cmp	r0, #1
 80094b6:	bf38      	it	cc
 80094b8:	2001      	movcc	r0, #1
 80094ba:	f7f6 ffab 	bl	8000414 <__aeabi_ui2d>
 80094be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c0:	4605      	mov	r5, r0
 80094c2:	460f      	mov	r7, r1
 80094c4:	bb03      	cbnz	r3, 8009508 <_strtod_l+0xba0>
 80094c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094ca:	9014      	str	r0, [sp, #80]	; 0x50
 80094cc:	9315      	str	r3, [sp, #84]	; 0x54
 80094ce:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80094d2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80094d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094da:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80094de:	1a9b      	subs	r3, r3, r2
 80094e0:	9311      	str	r3, [sp, #68]	; 0x44
 80094e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094e6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80094ea:	f003 f9b5 	bl	800c858 <__ulp>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	4640      	mov	r0, r8
 80094f4:	4649      	mov	r1, r9
 80094f6:	f7f7 f807 	bl	8000508 <__aeabi_dmul>
 80094fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094fe:	f7f6 fe4d 	bl	800019c <__adddf3>
 8009502:	4680      	mov	r8, r0
 8009504:	4689      	mov	r9, r1
 8009506:	e774      	b.n	80093f2 <_strtod_l+0xa8a>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009510:	e7dd      	b.n	80094ce <_strtod_l+0xb66>
 8009512:	a30d      	add	r3, pc, #52	; (adr r3, 8009548 <_strtod_l+0xbe0>)
 8009514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009518:	f7f7 fa68 	bl	80009ec <__aeabi_dcmplt>
 800951c:	e79b      	b.n	8009456 <_strtod_l+0xaee>
 800951e:	2300      	movs	r3, #0
 8009520:	930e      	str	r3, [sp, #56]	; 0x38
 8009522:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009524:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009526:	6013      	str	r3, [r2, #0]
 8009528:	f7ff ba5b 	b.w	80089e2 <_strtod_l+0x7a>
 800952c:	2a65      	cmp	r2, #101	; 0x65
 800952e:	f43f ab52 	beq.w	8008bd6 <_strtod_l+0x26e>
 8009532:	2a45      	cmp	r2, #69	; 0x45
 8009534:	f43f ab4f 	beq.w	8008bd6 <_strtod_l+0x26e>
 8009538:	2301      	movs	r3, #1
 800953a:	f7ff bb87 	b.w	8008c4c <_strtod_l+0x2e4>
 800953e:	bf00      	nop
 8009540:	ffc00000 	.word	0xffc00000
 8009544:	41dfffff 	.word	0x41dfffff
 8009548:	94a03595 	.word	0x94a03595
 800954c:	3fcfffff 	.word	0x3fcfffff

08009550 <strtod>:
 8009550:	460a      	mov	r2, r1
 8009552:	4601      	mov	r1, r0
 8009554:	4802      	ldr	r0, [pc, #8]	; (8009560 <strtod+0x10>)
 8009556:	4b03      	ldr	r3, [pc, #12]	; (8009564 <strtod+0x14>)
 8009558:	6800      	ldr	r0, [r0, #0]
 800955a:	f7ff ba05 	b.w	8008968 <_strtod_l>
 800955e:	bf00      	nop
 8009560:	200001ec 	.word	0x200001ec
 8009564:	20000034 	.word	0x20000034

08009568 <_strtol_l.constprop.0>:
 8009568:	2b01      	cmp	r3, #1
 800956a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800956e:	4686      	mov	lr, r0
 8009570:	4690      	mov	r8, r2
 8009572:	d001      	beq.n	8009578 <_strtol_l.constprop.0+0x10>
 8009574:	2b24      	cmp	r3, #36	; 0x24
 8009576:	d906      	bls.n	8009586 <_strtol_l.constprop.0+0x1e>
 8009578:	f001 fb86 	bl	800ac88 <__errno>
 800957c:	2316      	movs	r3, #22
 800957e:	6003      	str	r3, [r0, #0]
 8009580:	2000      	movs	r0, #0
 8009582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009586:	460d      	mov	r5, r1
 8009588:	4835      	ldr	r0, [pc, #212]	; (8009660 <_strtol_l.constprop.0+0xf8>)
 800958a:	462a      	mov	r2, r5
 800958c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009590:	5d06      	ldrb	r6, [r0, r4]
 8009592:	f016 0608 	ands.w	r6, r6, #8
 8009596:	d1f8      	bne.n	800958a <_strtol_l.constprop.0+0x22>
 8009598:	2c2d      	cmp	r4, #45	; 0x2d
 800959a:	d12e      	bne.n	80095fa <_strtol_l.constprop.0+0x92>
 800959c:	2601      	movs	r6, #1
 800959e:	782c      	ldrb	r4, [r5, #0]
 80095a0:	1c95      	adds	r5, r2, #2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d057      	beq.n	8009656 <_strtol_l.constprop.0+0xee>
 80095a6:	2b10      	cmp	r3, #16
 80095a8:	d109      	bne.n	80095be <_strtol_l.constprop.0+0x56>
 80095aa:	2c30      	cmp	r4, #48	; 0x30
 80095ac:	d107      	bne.n	80095be <_strtol_l.constprop.0+0x56>
 80095ae:	782a      	ldrb	r2, [r5, #0]
 80095b0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80095b4:	2a58      	cmp	r2, #88	; 0x58
 80095b6:	d149      	bne.n	800964c <_strtol_l.constprop.0+0xe4>
 80095b8:	2310      	movs	r3, #16
 80095ba:	786c      	ldrb	r4, [r5, #1]
 80095bc:	3502      	adds	r5, #2
 80095be:	2200      	movs	r2, #0
 80095c0:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80095c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80095c8:	fbbc f9f3 	udiv	r9, ip, r3
 80095cc:	4610      	mov	r0, r2
 80095ce:	fb03 ca19 	mls	sl, r3, r9, ip
 80095d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80095d6:	2f09      	cmp	r7, #9
 80095d8:	d814      	bhi.n	8009604 <_strtol_l.constprop.0+0x9c>
 80095da:	463c      	mov	r4, r7
 80095dc:	42a3      	cmp	r3, r4
 80095de:	dd20      	ble.n	8009622 <_strtol_l.constprop.0+0xba>
 80095e0:	1c57      	adds	r7, r2, #1
 80095e2:	d007      	beq.n	80095f4 <_strtol_l.constprop.0+0x8c>
 80095e4:	4581      	cmp	r9, r0
 80095e6:	d319      	bcc.n	800961c <_strtol_l.constprop.0+0xb4>
 80095e8:	d101      	bne.n	80095ee <_strtol_l.constprop.0+0x86>
 80095ea:	45a2      	cmp	sl, r4
 80095ec:	db16      	blt.n	800961c <_strtol_l.constprop.0+0xb4>
 80095ee:	2201      	movs	r2, #1
 80095f0:	fb00 4003 	mla	r0, r0, r3, r4
 80095f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095f8:	e7eb      	b.n	80095d2 <_strtol_l.constprop.0+0x6a>
 80095fa:	2c2b      	cmp	r4, #43	; 0x2b
 80095fc:	bf04      	itt	eq
 80095fe:	782c      	ldrbeq	r4, [r5, #0]
 8009600:	1c95      	addeq	r5, r2, #2
 8009602:	e7ce      	b.n	80095a2 <_strtol_l.constprop.0+0x3a>
 8009604:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009608:	2f19      	cmp	r7, #25
 800960a:	d801      	bhi.n	8009610 <_strtol_l.constprop.0+0xa8>
 800960c:	3c37      	subs	r4, #55	; 0x37
 800960e:	e7e5      	b.n	80095dc <_strtol_l.constprop.0+0x74>
 8009610:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009614:	2f19      	cmp	r7, #25
 8009616:	d804      	bhi.n	8009622 <_strtol_l.constprop.0+0xba>
 8009618:	3c57      	subs	r4, #87	; 0x57
 800961a:	e7df      	b.n	80095dc <_strtol_l.constprop.0+0x74>
 800961c:	f04f 32ff 	mov.w	r2, #4294967295
 8009620:	e7e8      	b.n	80095f4 <_strtol_l.constprop.0+0x8c>
 8009622:	1c53      	adds	r3, r2, #1
 8009624:	d108      	bne.n	8009638 <_strtol_l.constprop.0+0xd0>
 8009626:	2322      	movs	r3, #34	; 0x22
 8009628:	4660      	mov	r0, ip
 800962a:	f8ce 3000 	str.w	r3, [lr]
 800962e:	f1b8 0f00 	cmp.w	r8, #0
 8009632:	d0a6      	beq.n	8009582 <_strtol_l.constprop.0+0x1a>
 8009634:	1e69      	subs	r1, r5, #1
 8009636:	e006      	b.n	8009646 <_strtol_l.constprop.0+0xde>
 8009638:	b106      	cbz	r6, 800963c <_strtol_l.constprop.0+0xd4>
 800963a:	4240      	negs	r0, r0
 800963c:	f1b8 0f00 	cmp.w	r8, #0
 8009640:	d09f      	beq.n	8009582 <_strtol_l.constprop.0+0x1a>
 8009642:	2a00      	cmp	r2, #0
 8009644:	d1f6      	bne.n	8009634 <_strtol_l.constprop.0+0xcc>
 8009646:	f8c8 1000 	str.w	r1, [r8]
 800964a:	e79a      	b.n	8009582 <_strtol_l.constprop.0+0x1a>
 800964c:	2430      	movs	r4, #48	; 0x30
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1b5      	bne.n	80095be <_strtol_l.constprop.0+0x56>
 8009652:	2308      	movs	r3, #8
 8009654:	e7b3      	b.n	80095be <_strtol_l.constprop.0+0x56>
 8009656:	2c30      	cmp	r4, #48	; 0x30
 8009658:	d0a9      	beq.n	80095ae <_strtol_l.constprop.0+0x46>
 800965a:	230a      	movs	r3, #10
 800965c:	e7af      	b.n	80095be <_strtol_l.constprop.0+0x56>
 800965e:	bf00      	nop
 8009660:	0800e299 	.word	0x0800e299

08009664 <strtol>:
 8009664:	4613      	mov	r3, r2
 8009666:	460a      	mov	r2, r1
 8009668:	4601      	mov	r1, r0
 800966a:	4802      	ldr	r0, [pc, #8]	; (8009674 <strtol+0x10>)
 800966c:	6800      	ldr	r0, [r0, #0]
 800966e:	f7ff bf7b 	b.w	8009568 <_strtol_l.constprop.0>
 8009672:	bf00      	nop
 8009674:	200001ec 	.word	0x200001ec

08009678 <swapfunc>:
 8009678:	2b02      	cmp	r3, #2
 800967a:	b510      	push	{r4, lr}
 800967c:	d00a      	beq.n	8009694 <swapfunc+0x1c>
 800967e:	0892      	lsrs	r2, r2, #2
 8009680:	6803      	ldr	r3, [r0, #0]
 8009682:	680c      	ldr	r4, [r1, #0]
 8009684:	3a01      	subs	r2, #1
 8009686:	2a00      	cmp	r2, #0
 8009688:	f840 4b04 	str.w	r4, [r0], #4
 800968c:	f841 3b04 	str.w	r3, [r1], #4
 8009690:	dcf6      	bgt.n	8009680 <swapfunc+0x8>
 8009692:	bd10      	pop	{r4, pc}
 8009694:	4402      	add	r2, r0
 8009696:	780c      	ldrb	r4, [r1, #0]
 8009698:	7803      	ldrb	r3, [r0, #0]
 800969a:	f800 4b01 	strb.w	r4, [r0], #1
 800969e:	f801 3b01 	strb.w	r3, [r1], #1
 80096a2:	1a13      	subs	r3, r2, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dcf6      	bgt.n	8009696 <swapfunc+0x1e>
 80096a8:	e7f3      	b.n	8009692 <swapfunc+0x1a>

080096aa <med3.constprop.0>:
 80096aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ac:	460c      	mov	r4, r1
 80096ae:	4615      	mov	r5, r2
 80096b0:	4607      	mov	r7, r0
 80096b2:	461e      	mov	r6, r3
 80096b4:	4798      	blx	r3
 80096b6:	2800      	cmp	r0, #0
 80096b8:	4629      	mov	r1, r5
 80096ba:	4620      	mov	r0, r4
 80096bc:	da0a      	bge.n	80096d4 <med3.constprop.0+0x2a>
 80096be:	47b0      	blx	r6
 80096c0:	2800      	cmp	r0, #0
 80096c2:	db05      	blt.n	80096d0 <med3.constprop.0+0x26>
 80096c4:	4629      	mov	r1, r5
 80096c6:	4638      	mov	r0, r7
 80096c8:	47b0      	blx	r6
 80096ca:	2800      	cmp	r0, #0
 80096cc:	db0a      	blt.n	80096e4 <med3.constprop.0+0x3a>
 80096ce:	463c      	mov	r4, r7
 80096d0:	4620      	mov	r0, r4
 80096d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d4:	47b0      	blx	r6
 80096d6:	2800      	cmp	r0, #0
 80096d8:	dcfa      	bgt.n	80096d0 <med3.constprop.0+0x26>
 80096da:	4629      	mov	r1, r5
 80096dc:	4638      	mov	r0, r7
 80096de:	47b0      	blx	r6
 80096e0:	2800      	cmp	r0, #0
 80096e2:	dbf4      	blt.n	80096ce <med3.constprop.0+0x24>
 80096e4:	462c      	mov	r4, r5
 80096e6:	e7f3      	b.n	80096d0 <med3.constprop.0+0x26>

080096e8 <qsort>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	469a      	mov	sl, r3
 80096ee:	ea40 0302 	orr.w	r3, r0, r2
 80096f2:	079b      	lsls	r3, r3, #30
 80096f4:	4606      	mov	r6, r0
 80096f6:	4614      	mov	r4, r2
 80096f8:	b097      	sub	sp, #92	; 0x5c
 80096fa:	d11a      	bne.n	8009732 <qsort+0x4a>
 80096fc:	f1b2 0804 	subs.w	r8, r2, #4
 8009700:	bf18      	it	ne
 8009702:	f04f 0801 	movne.w	r8, #1
 8009706:	2300      	movs	r3, #0
 8009708:	9302      	str	r3, [sp, #8]
 800970a:	fb04 f701 	mul.w	r7, r4, r1
 800970e:	1933      	adds	r3, r6, r4
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	2906      	cmp	r1, #6
 8009714:	eb06 0307 	add.w	r3, r6, r7
 8009718:	9303      	str	r3, [sp, #12]
 800971a:	d82a      	bhi.n	8009772 <qsort+0x8a>
 800971c:	9b01      	ldr	r3, [sp, #4]
 800971e:	9a03      	ldr	r2, [sp, #12]
 8009720:	4293      	cmp	r3, r2
 8009722:	d310      	bcc.n	8009746 <qsort+0x5e>
 8009724:	9b02      	ldr	r3, [sp, #8]
 8009726:	2b00      	cmp	r3, #0
 8009728:	f040 811f 	bne.w	800996a <qsort+0x282>
 800972c:	b017      	add	sp, #92	; 0x5c
 800972e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009732:	f04f 0802 	mov.w	r8, #2
 8009736:	e7e6      	b.n	8009706 <qsort+0x1e>
 8009738:	4643      	mov	r3, r8
 800973a:	4622      	mov	r2, r4
 800973c:	4639      	mov	r1, r7
 800973e:	4628      	mov	r0, r5
 8009740:	f7ff ff9a 	bl	8009678 <swapfunc>
 8009744:	e00e      	b.n	8009764 <qsort+0x7c>
 8009746:	9d01      	ldr	r5, [sp, #4]
 8009748:	e00d      	b.n	8009766 <qsort+0x7e>
 800974a:	1b2f      	subs	r7, r5, r4
 800974c:	4629      	mov	r1, r5
 800974e:	4638      	mov	r0, r7
 8009750:	47d0      	blx	sl
 8009752:	2800      	cmp	r0, #0
 8009754:	dd09      	ble.n	800976a <qsort+0x82>
 8009756:	f1b8 0f00 	cmp.w	r8, #0
 800975a:	d1ed      	bne.n	8009738 <qsort+0x50>
 800975c:	682b      	ldr	r3, [r5, #0]
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	602a      	str	r2, [r5, #0]
 8009762:	603b      	str	r3, [r7, #0]
 8009764:	463d      	mov	r5, r7
 8009766:	42ae      	cmp	r6, r5
 8009768:	d3ef      	bcc.n	800974a <qsort+0x62>
 800976a:	9b01      	ldr	r3, [sp, #4]
 800976c:	4423      	add	r3, r4
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	e7d4      	b.n	800971c <qsort+0x34>
 8009772:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8009776:	1b3f      	subs	r7, r7, r4
 8009778:	2907      	cmp	r1, #7
 800977a:	fb04 6909 	mla	r9, r4, r9, r6
 800977e:	4437      	add	r7, r6
 8009780:	d021      	beq.n	80097c6 <qsort+0xde>
 8009782:	2928      	cmp	r1, #40	; 0x28
 8009784:	d944      	bls.n	8009810 <qsort+0x128>
 8009786:	08cd      	lsrs	r5, r1, #3
 8009788:	4365      	muls	r5, r4
 800978a:	4653      	mov	r3, sl
 800978c:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8009790:	1971      	adds	r1, r6, r5
 8009792:	4630      	mov	r0, r6
 8009794:	f7ff ff89 	bl	80096aa <med3.constprop.0>
 8009798:	4649      	mov	r1, r9
 800979a:	eb09 0205 	add.w	r2, r9, r5
 800979e:	4653      	mov	r3, sl
 80097a0:	4683      	mov	fp, r0
 80097a2:	1b48      	subs	r0, r1, r5
 80097a4:	f7ff ff81 	bl	80096aa <med3.constprop.0>
 80097a8:	463a      	mov	r2, r7
 80097aa:	4681      	mov	r9, r0
 80097ac:	4653      	mov	r3, sl
 80097ae:	1b79      	subs	r1, r7, r5
 80097b0:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 80097b4:	f7ff ff79 	bl	80096aa <med3.constprop.0>
 80097b8:	4602      	mov	r2, r0
 80097ba:	4649      	mov	r1, r9
 80097bc:	4653      	mov	r3, sl
 80097be:	4658      	mov	r0, fp
 80097c0:	f7ff ff73 	bl	80096aa <med3.constprop.0>
 80097c4:	4681      	mov	r9, r0
 80097c6:	f1b8 0f00 	cmp.w	r8, #0
 80097ca:	d124      	bne.n	8009816 <qsort+0x12e>
 80097cc:	6833      	ldr	r3, [r6, #0]
 80097ce:	f8d9 2000 	ldr.w	r2, [r9]
 80097d2:	6032      	str	r2, [r6, #0]
 80097d4:	f8c9 3000 	str.w	r3, [r9]
 80097d8:	eb06 0b04 	add.w	fp, r6, r4
 80097dc:	46b9      	mov	r9, r7
 80097de:	465d      	mov	r5, fp
 80097e0:	2300      	movs	r3, #0
 80097e2:	45bb      	cmp	fp, r7
 80097e4:	d835      	bhi.n	8009852 <qsort+0x16a>
 80097e6:	4631      	mov	r1, r6
 80097e8:	4658      	mov	r0, fp
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	47d0      	blx	sl
 80097ee:	2800      	cmp	r0, #0
 80097f0:	9b04      	ldr	r3, [sp, #16]
 80097f2:	dc3e      	bgt.n	8009872 <qsort+0x18a>
 80097f4:	d10a      	bne.n	800980c <qsort+0x124>
 80097f6:	f1b8 0f00 	cmp.w	r8, #0
 80097fa:	d113      	bne.n	8009824 <qsort+0x13c>
 80097fc:	682b      	ldr	r3, [r5, #0]
 80097fe:	f8db 2000 	ldr.w	r2, [fp]
 8009802:	602a      	str	r2, [r5, #0]
 8009804:	f8cb 3000 	str.w	r3, [fp]
 8009808:	4425      	add	r5, r4
 800980a:	2301      	movs	r3, #1
 800980c:	44a3      	add	fp, r4
 800980e:	e7e8      	b.n	80097e2 <qsort+0xfa>
 8009810:	463a      	mov	r2, r7
 8009812:	46b3      	mov	fp, r6
 8009814:	e7d1      	b.n	80097ba <qsort+0xd2>
 8009816:	4643      	mov	r3, r8
 8009818:	4622      	mov	r2, r4
 800981a:	4649      	mov	r1, r9
 800981c:	4630      	mov	r0, r6
 800981e:	f7ff ff2b 	bl	8009678 <swapfunc>
 8009822:	e7d9      	b.n	80097d8 <qsort+0xf0>
 8009824:	4643      	mov	r3, r8
 8009826:	4622      	mov	r2, r4
 8009828:	4659      	mov	r1, fp
 800982a:	4628      	mov	r0, r5
 800982c:	f7ff ff24 	bl	8009678 <swapfunc>
 8009830:	e7ea      	b.n	8009808 <qsort+0x120>
 8009832:	d10b      	bne.n	800984c <qsort+0x164>
 8009834:	f1b8 0f00 	cmp.w	r8, #0
 8009838:	d114      	bne.n	8009864 <qsort+0x17c>
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	f8d9 2000 	ldr.w	r2, [r9]
 8009840:	603a      	str	r2, [r7, #0]
 8009842:	f8c9 3000 	str.w	r3, [r9]
 8009846:	2301      	movs	r3, #1
 8009848:	eba9 0904 	sub.w	r9, r9, r4
 800984c:	9f04      	ldr	r7, [sp, #16]
 800984e:	45bb      	cmp	fp, r7
 8009850:	d90f      	bls.n	8009872 <qsort+0x18a>
 8009852:	2b00      	cmp	r3, #0
 8009854:	d143      	bne.n	80098de <qsort+0x1f6>
 8009856:	9b01      	ldr	r3, [sp, #4]
 8009858:	9a03      	ldr	r2, [sp, #12]
 800985a:	4293      	cmp	r3, r2
 800985c:	f4bf af62 	bcs.w	8009724 <qsort+0x3c>
 8009860:	9d01      	ldr	r5, [sp, #4]
 8009862:	e036      	b.n	80098d2 <qsort+0x1ea>
 8009864:	4643      	mov	r3, r8
 8009866:	4622      	mov	r2, r4
 8009868:	4649      	mov	r1, r9
 800986a:	4638      	mov	r0, r7
 800986c:	f7ff ff04 	bl	8009678 <swapfunc>
 8009870:	e7e9      	b.n	8009846 <qsort+0x15e>
 8009872:	4631      	mov	r1, r6
 8009874:	4638      	mov	r0, r7
 8009876:	9305      	str	r3, [sp, #20]
 8009878:	47d0      	blx	sl
 800987a:	1b3b      	subs	r3, r7, r4
 800987c:	2800      	cmp	r0, #0
 800987e:	9304      	str	r3, [sp, #16]
 8009880:	9b05      	ldr	r3, [sp, #20]
 8009882:	dad6      	bge.n	8009832 <qsort+0x14a>
 8009884:	f1b8 0f00 	cmp.w	r8, #0
 8009888:	d006      	beq.n	8009898 <qsort+0x1b0>
 800988a:	4643      	mov	r3, r8
 800988c:	4622      	mov	r2, r4
 800988e:	4639      	mov	r1, r7
 8009890:	4658      	mov	r0, fp
 8009892:	f7ff fef1 	bl	8009678 <swapfunc>
 8009896:	e005      	b.n	80098a4 <qsort+0x1bc>
 8009898:	f8db 3000 	ldr.w	r3, [fp]
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	f8cb 2000 	str.w	r2, [fp]
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	9f04      	ldr	r7, [sp, #16]
 80098a6:	e7b0      	b.n	800980a <qsort+0x122>
 80098a8:	4643      	mov	r3, r8
 80098aa:	4622      	mov	r2, r4
 80098ac:	4639      	mov	r1, r7
 80098ae:	4628      	mov	r0, r5
 80098b0:	f7ff fee2 	bl	8009678 <swapfunc>
 80098b4:	e00c      	b.n	80098d0 <qsort+0x1e8>
 80098b6:	1b2f      	subs	r7, r5, r4
 80098b8:	4629      	mov	r1, r5
 80098ba:	4638      	mov	r0, r7
 80098bc:	47d0      	blx	sl
 80098be:	2800      	cmp	r0, #0
 80098c0:	dd09      	ble.n	80098d6 <qsort+0x1ee>
 80098c2:	f1b8 0f00 	cmp.w	r8, #0
 80098c6:	d1ef      	bne.n	80098a8 <qsort+0x1c0>
 80098c8:	682b      	ldr	r3, [r5, #0]
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	602a      	str	r2, [r5, #0]
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	463d      	mov	r5, r7
 80098d2:	42ae      	cmp	r6, r5
 80098d4:	d3ef      	bcc.n	80098b6 <qsort+0x1ce>
 80098d6:	9b01      	ldr	r3, [sp, #4]
 80098d8:	4423      	add	r3, r4
 80098da:	9301      	str	r3, [sp, #4]
 80098dc:	e7bb      	b.n	8009856 <qsort+0x16e>
 80098de:	ebab 0305 	sub.w	r3, fp, r5
 80098e2:	1baa      	subs	r2, r5, r6
 80098e4:	429a      	cmp	r2, r3
 80098e6:	bfa8      	it	ge
 80098e8:	461a      	movge	r2, r3
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	b12a      	cbz	r2, 80098fa <qsort+0x212>
 80098ee:	4643      	mov	r3, r8
 80098f0:	4630      	mov	r0, r6
 80098f2:	ebab 0102 	sub.w	r1, fp, r2
 80098f6:	f7ff febf 	bl	8009678 <swapfunc>
 80098fa:	9b03      	ldr	r3, [sp, #12]
 80098fc:	eba9 0707 	sub.w	r7, r9, r7
 8009900:	eba3 0209 	sub.w	r2, r3, r9
 8009904:	1b12      	subs	r2, r2, r4
 8009906:	42ba      	cmp	r2, r7
 8009908:	bf28      	it	cs
 800990a:	463a      	movcs	r2, r7
 800990c:	b12a      	cbz	r2, 800991a <qsort+0x232>
 800990e:	9903      	ldr	r1, [sp, #12]
 8009910:	4643      	mov	r3, r8
 8009912:	4658      	mov	r0, fp
 8009914:	1a89      	subs	r1, r1, r2
 8009916:	f7ff feaf 	bl	8009678 <swapfunc>
 800991a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800991e:	9b03      	ldr	r3, [sp, #12]
 8009920:	454f      	cmp	r7, r9
 8009922:	eba3 0007 	sub.w	r0, r3, r7
 8009926:	d904      	bls.n	8009932 <qsort+0x24a>
 8009928:	4633      	mov	r3, r6
 800992a:	4606      	mov	r6, r0
 800992c:	4618      	mov	r0, r3
 800992e:	46b9      	mov	r9, r7
 8009930:	9f01      	ldr	r7, [sp, #4]
 8009932:	42a7      	cmp	r7, r4
 8009934:	d923      	bls.n	800997e <qsort+0x296>
 8009936:	9b02      	ldr	r3, [sp, #8]
 8009938:	fbb7 f1f4 	udiv	r1, r7, r4
 800993c:	2b07      	cmp	r3, #7
 800993e:	d80e      	bhi.n	800995e <qsort+0x276>
 8009940:	9a02      	ldr	r2, [sp, #8]
 8009942:	ab16      	add	r3, sp, #88	; 0x58
 8009944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009948:	fbb9 f2f4 	udiv	r2, r9, r4
 800994c:	f843 6c40 	str.w	r6, [r3, #-64]
 8009950:	f843 2c3c 	str.w	r2, [r3, #-60]
 8009954:	9b02      	ldr	r3, [sp, #8]
 8009956:	3301      	adds	r3, #1
 8009958:	9302      	str	r3, [sp, #8]
 800995a:	4606      	mov	r6, r0
 800995c:	e6d5      	b.n	800970a <qsort+0x22>
 800995e:	4653      	mov	r3, sl
 8009960:	4622      	mov	r2, r4
 8009962:	f7ff fec1 	bl	80096e8 <qsort>
 8009966:	45a1      	cmp	r9, r4
 8009968:	d80c      	bhi.n	8009984 <qsort+0x29c>
 800996a:	9b02      	ldr	r3, [sp, #8]
 800996c:	3b01      	subs	r3, #1
 800996e:	9302      	str	r3, [sp, #8]
 8009970:	9a02      	ldr	r2, [sp, #8]
 8009972:	ab16      	add	r3, sp, #88	; 0x58
 8009974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009978:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 800997c:	e7ed      	b.n	800995a <qsort+0x272>
 800997e:	45a1      	cmp	r9, r4
 8009980:	f67f aed0 	bls.w	8009724 <qsort+0x3c>
 8009984:	fbb9 f1f4 	udiv	r1, r9, r4
 8009988:	4630      	mov	r0, r6
 800998a:	e7e6      	b.n	800995a <qsort+0x272>

0800998c <__cvt>:
 800998c:	2b00      	cmp	r3, #0
 800998e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009992:	461f      	mov	r7, r3
 8009994:	bfbb      	ittet	lt
 8009996:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800999a:	461f      	movlt	r7, r3
 800999c:	2300      	movge	r3, #0
 800999e:	232d      	movlt	r3, #45	; 0x2d
 80099a0:	b088      	sub	sp, #32
 80099a2:	4614      	mov	r4, r2
 80099a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80099a8:	7013      	strb	r3, [r2, #0]
 80099aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80099b0:	f023 0820 	bic.w	r8, r3, #32
 80099b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099b8:	d005      	beq.n	80099c6 <__cvt+0x3a>
 80099ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80099be:	d100      	bne.n	80099c2 <__cvt+0x36>
 80099c0:	3501      	adds	r5, #1
 80099c2:	2302      	movs	r3, #2
 80099c4:	e000      	b.n	80099c8 <__cvt+0x3c>
 80099c6:	2303      	movs	r3, #3
 80099c8:	aa07      	add	r2, sp, #28
 80099ca:	9204      	str	r2, [sp, #16]
 80099cc:	aa06      	add	r2, sp, #24
 80099ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80099d2:	e9cd 3500 	strd	r3, r5, [sp]
 80099d6:	4622      	mov	r2, r4
 80099d8:	463b      	mov	r3, r7
 80099da:	f001 fa39 	bl	800ae50 <_dtoa_r>
 80099de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80099e2:	4606      	mov	r6, r0
 80099e4:	d102      	bne.n	80099ec <__cvt+0x60>
 80099e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099e8:	07db      	lsls	r3, r3, #31
 80099ea:	d522      	bpl.n	8009a32 <__cvt+0xa6>
 80099ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099f0:	eb06 0905 	add.w	r9, r6, r5
 80099f4:	d110      	bne.n	8009a18 <__cvt+0x8c>
 80099f6:	7833      	ldrb	r3, [r6, #0]
 80099f8:	2b30      	cmp	r3, #48	; 0x30
 80099fa:	d10a      	bne.n	8009a12 <__cvt+0x86>
 80099fc:	2200      	movs	r2, #0
 80099fe:	2300      	movs	r3, #0
 8009a00:	4620      	mov	r0, r4
 8009a02:	4639      	mov	r1, r7
 8009a04:	f7f6 ffe8 	bl	80009d8 <__aeabi_dcmpeq>
 8009a08:	b918      	cbnz	r0, 8009a12 <__cvt+0x86>
 8009a0a:	f1c5 0501 	rsb	r5, r5, #1
 8009a0e:	f8ca 5000 	str.w	r5, [sl]
 8009a12:	f8da 3000 	ldr.w	r3, [sl]
 8009a16:	4499      	add	r9, r3
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	4639      	mov	r1, r7
 8009a20:	f7f6 ffda 	bl	80009d8 <__aeabi_dcmpeq>
 8009a24:	b108      	cbz	r0, 8009a2a <__cvt+0x9e>
 8009a26:	f8cd 901c 	str.w	r9, [sp, #28]
 8009a2a:	2230      	movs	r2, #48	; 0x30
 8009a2c:	9b07      	ldr	r3, [sp, #28]
 8009a2e:	454b      	cmp	r3, r9
 8009a30:	d307      	bcc.n	8009a42 <__cvt+0xb6>
 8009a32:	4630      	mov	r0, r6
 8009a34:	9b07      	ldr	r3, [sp, #28]
 8009a36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a38:	1b9b      	subs	r3, r3, r6
 8009a3a:	6013      	str	r3, [r2, #0]
 8009a3c:	b008      	add	sp, #32
 8009a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a42:	1c59      	adds	r1, r3, #1
 8009a44:	9107      	str	r1, [sp, #28]
 8009a46:	701a      	strb	r2, [r3, #0]
 8009a48:	e7f0      	b.n	8009a2c <__cvt+0xa0>

08009a4a <__exponent>:
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a4e:	2900      	cmp	r1, #0
 8009a50:	f803 2b02 	strb.w	r2, [r3], #2
 8009a54:	bfb6      	itet	lt
 8009a56:	222d      	movlt	r2, #45	; 0x2d
 8009a58:	222b      	movge	r2, #43	; 0x2b
 8009a5a:	4249      	neglt	r1, r1
 8009a5c:	2909      	cmp	r1, #9
 8009a5e:	7042      	strb	r2, [r0, #1]
 8009a60:	dd2a      	ble.n	8009ab8 <__exponent+0x6e>
 8009a62:	f10d 0207 	add.w	r2, sp, #7
 8009a66:	4617      	mov	r7, r2
 8009a68:	260a      	movs	r6, #10
 8009a6a:	fb91 f5f6 	sdiv	r5, r1, r6
 8009a6e:	4694      	mov	ip, r2
 8009a70:	fb06 1415 	mls	r4, r6, r5, r1
 8009a74:	3430      	adds	r4, #48	; 0x30
 8009a76:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	2c63      	cmp	r4, #99	; 0x63
 8009a7e:	4629      	mov	r1, r5
 8009a80:	f102 32ff 	add.w	r2, r2, #4294967295
 8009a84:	dcf1      	bgt.n	8009a6a <__exponent+0x20>
 8009a86:	3130      	adds	r1, #48	; 0x30
 8009a88:	f1ac 0402 	sub.w	r4, ip, #2
 8009a8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009a90:	4622      	mov	r2, r4
 8009a92:	1c41      	adds	r1, r0, #1
 8009a94:	42ba      	cmp	r2, r7
 8009a96:	d30a      	bcc.n	8009aae <__exponent+0x64>
 8009a98:	f10d 0209 	add.w	r2, sp, #9
 8009a9c:	eba2 020c 	sub.w	r2, r2, ip
 8009aa0:	42bc      	cmp	r4, r7
 8009aa2:	bf88      	it	hi
 8009aa4:	2200      	movhi	r2, #0
 8009aa6:	4413      	add	r3, r2
 8009aa8:	1a18      	subs	r0, r3, r0
 8009aaa:	b003      	add	sp, #12
 8009aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aae:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ab2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009ab6:	e7ed      	b.n	8009a94 <__exponent+0x4a>
 8009ab8:	2330      	movs	r3, #48	; 0x30
 8009aba:	3130      	adds	r1, #48	; 0x30
 8009abc:	7083      	strb	r3, [r0, #2]
 8009abe:	70c1      	strb	r1, [r0, #3]
 8009ac0:	1d03      	adds	r3, r0, #4
 8009ac2:	e7f1      	b.n	8009aa8 <__exponent+0x5e>

08009ac4 <_printf_float>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	b091      	sub	sp, #68	; 0x44
 8009aca:	460c      	mov	r4, r1
 8009acc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	461f      	mov	r7, r3
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	f001 f87d 	bl	800abd4 <_localeconv_r>
 8009ada:	6803      	ldr	r3, [r0, #0]
 8009adc:	4618      	mov	r0, r3
 8009ade:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae0:	f7f6 fb4e 	bl	8000180 <strlen>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	930e      	str	r3, [sp, #56]	; 0x38
 8009ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8009aec:	900a      	str	r0, [sp, #40]	; 0x28
 8009aee:	3307      	adds	r3, #7
 8009af0:	f023 0307 	bic.w	r3, r3, #7
 8009af4:	f103 0208 	add.w	r2, r3, #8
 8009af8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009afc:	f8d4 b000 	ldr.w	fp, [r4]
 8009b00:	f8c8 2000 	str.w	r2, [r8]
 8009b04:	e9d3 a800 	ldrd	sl, r8, [r3]
 8009b08:	4652      	mov	r2, sl
 8009b0a:	4643      	mov	r3, r8
 8009b0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b10:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8009b14:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b16:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1a:	4650      	mov	r0, sl
 8009b1c:	4b9c      	ldr	r3, [pc, #624]	; (8009d90 <_printf_float+0x2cc>)
 8009b1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b20:	f7f6 ff8c 	bl	8000a3c <__aeabi_dcmpun>
 8009b24:	bb70      	cbnz	r0, 8009b84 <_printf_float+0xc0>
 8009b26:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2a:	4650      	mov	r0, sl
 8009b2c:	4b98      	ldr	r3, [pc, #608]	; (8009d90 <_printf_float+0x2cc>)
 8009b2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b30:	f7f6 ff66 	bl	8000a00 <__aeabi_dcmple>
 8009b34:	bb30      	cbnz	r0, 8009b84 <_printf_float+0xc0>
 8009b36:	2200      	movs	r2, #0
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	4641      	mov	r1, r8
 8009b3e:	f7f6 ff55 	bl	80009ec <__aeabi_dcmplt>
 8009b42:	b110      	cbz	r0, 8009b4a <_printf_float+0x86>
 8009b44:	232d      	movs	r3, #45	; 0x2d
 8009b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b4a:	4a92      	ldr	r2, [pc, #584]	; (8009d94 <_printf_float+0x2d0>)
 8009b4c:	4b92      	ldr	r3, [pc, #584]	; (8009d98 <_printf_float+0x2d4>)
 8009b4e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009b52:	bf94      	ite	ls
 8009b54:	4690      	movls	r8, r2
 8009b56:	4698      	movhi	r8, r3
 8009b58:	2303      	movs	r3, #3
 8009b5a:	f04f 0a00 	mov.w	sl, #0
 8009b5e:	6123      	str	r3, [r4, #16]
 8009b60:	f02b 0304 	bic.w	r3, fp, #4
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	4633      	mov	r3, r6
 8009b68:	4621      	mov	r1, r4
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	9700      	str	r7, [sp, #0]
 8009b6e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009b70:	f000 f9d6 	bl	8009f20 <_printf_common>
 8009b74:	3001      	adds	r0, #1
 8009b76:	f040 8090 	bne.w	8009c9a <_printf_float+0x1d6>
 8009b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7e:	b011      	add	sp, #68	; 0x44
 8009b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b84:	4652      	mov	r2, sl
 8009b86:	4643      	mov	r3, r8
 8009b88:	4650      	mov	r0, sl
 8009b8a:	4641      	mov	r1, r8
 8009b8c:	f7f6 ff56 	bl	8000a3c <__aeabi_dcmpun>
 8009b90:	b148      	cbz	r0, 8009ba6 <_printf_float+0xe2>
 8009b92:	f1b8 0f00 	cmp.w	r8, #0
 8009b96:	bfb8      	it	lt
 8009b98:	232d      	movlt	r3, #45	; 0x2d
 8009b9a:	4a80      	ldr	r2, [pc, #512]	; (8009d9c <_printf_float+0x2d8>)
 8009b9c:	bfb8      	it	lt
 8009b9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ba2:	4b7f      	ldr	r3, [pc, #508]	; (8009da0 <_printf_float+0x2dc>)
 8009ba4:	e7d3      	b.n	8009b4e <_printf_float+0x8a>
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	d142      	bne.n	8009c36 <_printf_float+0x172>
 8009bb0:	2306      	movs	r3, #6
 8009bb2:	6063      	str	r3, [r4, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	9206      	str	r2, [sp, #24]
 8009bb8:	aa0e      	add	r2, sp, #56	; 0x38
 8009bba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009bbe:	aa0d      	add	r2, sp, #52	; 0x34
 8009bc0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009bc4:	9203      	str	r2, [sp, #12]
 8009bc6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009bca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	6863      	ldr	r3, [r4, #4]
 8009bd2:	4652      	mov	r2, sl
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	4643      	mov	r3, r8
 8009bda:	910b      	str	r1, [sp, #44]	; 0x2c
 8009bdc:	f7ff fed6 	bl	800998c <__cvt>
 8009be0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009be2:	4680      	mov	r8, r0
 8009be4:	2947      	cmp	r1, #71	; 0x47
 8009be6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009be8:	d108      	bne.n	8009bfc <_printf_float+0x138>
 8009bea:	1cc8      	adds	r0, r1, #3
 8009bec:	db02      	blt.n	8009bf4 <_printf_float+0x130>
 8009bee:	6863      	ldr	r3, [r4, #4]
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	dd40      	ble.n	8009c76 <_printf_float+0x1b2>
 8009bf4:	f1a9 0902 	sub.w	r9, r9, #2
 8009bf8:	fa5f f989 	uxtb.w	r9, r9
 8009bfc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009c00:	d81f      	bhi.n	8009c42 <_printf_float+0x17e>
 8009c02:	464a      	mov	r2, r9
 8009c04:	3901      	subs	r1, #1
 8009c06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c0a:	910d      	str	r1, [sp, #52]	; 0x34
 8009c0c:	f7ff ff1d 	bl	8009a4a <__exponent>
 8009c10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c12:	4682      	mov	sl, r0
 8009c14:	1813      	adds	r3, r2, r0
 8009c16:	2a01      	cmp	r2, #1
 8009c18:	6123      	str	r3, [r4, #16]
 8009c1a:	dc02      	bgt.n	8009c22 <_printf_float+0x15e>
 8009c1c:	6822      	ldr	r2, [r4, #0]
 8009c1e:	07d2      	lsls	r2, r2, #31
 8009c20:	d501      	bpl.n	8009c26 <_printf_float+0x162>
 8009c22:	3301      	adds	r3, #1
 8009c24:	6123      	str	r3, [r4, #16]
 8009c26:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d09b      	beq.n	8009b66 <_printf_float+0xa2>
 8009c2e:	232d      	movs	r3, #45	; 0x2d
 8009c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c34:	e797      	b.n	8009b66 <_printf_float+0xa2>
 8009c36:	2947      	cmp	r1, #71	; 0x47
 8009c38:	d1bc      	bne.n	8009bb4 <_printf_float+0xf0>
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1ba      	bne.n	8009bb4 <_printf_float+0xf0>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e7b7      	b.n	8009bb2 <_printf_float+0xee>
 8009c42:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009c46:	d118      	bne.n	8009c7a <_printf_float+0x1b6>
 8009c48:	2900      	cmp	r1, #0
 8009c4a:	6863      	ldr	r3, [r4, #4]
 8009c4c:	dd0b      	ble.n	8009c66 <_printf_float+0x1a2>
 8009c4e:	6121      	str	r1, [r4, #16]
 8009c50:	b913      	cbnz	r3, 8009c58 <_printf_float+0x194>
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	07d0      	lsls	r0, r2, #31
 8009c56:	d502      	bpl.n	8009c5e <_printf_float+0x19a>
 8009c58:	3301      	adds	r3, #1
 8009c5a:	440b      	add	r3, r1
 8009c5c:	6123      	str	r3, [r4, #16]
 8009c5e:	f04f 0a00 	mov.w	sl, #0
 8009c62:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c64:	e7df      	b.n	8009c26 <_printf_float+0x162>
 8009c66:	b913      	cbnz	r3, 8009c6e <_printf_float+0x1aa>
 8009c68:	6822      	ldr	r2, [r4, #0]
 8009c6a:	07d2      	lsls	r2, r2, #31
 8009c6c:	d501      	bpl.n	8009c72 <_printf_float+0x1ae>
 8009c6e:	3302      	adds	r3, #2
 8009c70:	e7f4      	b.n	8009c5c <_printf_float+0x198>
 8009c72:	2301      	movs	r3, #1
 8009c74:	e7f2      	b.n	8009c5c <_printf_float+0x198>
 8009c76:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009c7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c7c:	4299      	cmp	r1, r3
 8009c7e:	db05      	blt.n	8009c8c <_printf_float+0x1c8>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	6121      	str	r1, [r4, #16]
 8009c84:	07d8      	lsls	r0, r3, #31
 8009c86:	d5ea      	bpl.n	8009c5e <_printf_float+0x19a>
 8009c88:	1c4b      	adds	r3, r1, #1
 8009c8a:	e7e7      	b.n	8009c5c <_printf_float+0x198>
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	bfcc      	ite	gt
 8009c90:	2201      	movgt	r2, #1
 8009c92:	f1c1 0202 	rsble	r2, r1, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	e7e0      	b.n	8009c5c <_printf_float+0x198>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	055a      	lsls	r2, r3, #21
 8009c9e:	d407      	bmi.n	8009cb0 <_printf_float+0x1ec>
 8009ca0:	6923      	ldr	r3, [r4, #16]
 8009ca2:	4642      	mov	r2, r8
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b8      	blx	r7
 8009caa:	3001      	adds	r0, #1
 8009cac:	d12b      	bne.n	8009d06 <_printf_float+0x242>
 8009cae:	e764      	b.n	8009b7a <_printf_float+0xb6>
 8009cb0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009cb4:	f240 80dd 	bls.w	8009e72 <_printf_float+0x3ae>
 8009cb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f7f6 fe8a 	bl	80009d8 <__aeabi_dcmpeq>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d033      	beq.n	8009d30 <_printf_float+0x26c>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4628      	mov	r0, r5
 8009cce:	4a35      	ldr	r2, [pc, #212]	; (8009da4 <_printf_float+0x2e0>)
 8009cd0:	47b8      	blx	r7
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	f43f af51 	beq.w	8009b7a <_printf_float+0xb6>
 8009cd8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	db02      	blt.n	8009ce6 <_printf_float+0x222>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	07d8      	lsls	r0, r3, #31
 8009ce4:	d50f      	bpl.n	8009d06 <_printf_float+0x242>
 8009ce6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b8      	blx	r7
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	f43f af42 	beq.w	8009b7a <_printf_float+0xb6>
 8009cf6:	f04f 0800 	mov.w	r8, #0
 8009cfa:	f104 091a 	add.w	r9, r4, #26
 8009cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d00:	3b01      	subs	r3, #1
 8009d02:	4543      	cmp	r3, r8
 8009d04:	dc09      	bgt.n	8009d1a <_printf_float+0x256>
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	079b      	lsls	r3, r3, #30
 8009d0a:	f100 8104 	bmi.w	8009f16 <_printf_float+0x452>
 8009d0e:	68e0      	ldr	r0, [r4, #12]
 8009d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d12:	4298      	cmp	r0, r3
 8009d14:	bfb8      	it	lt
 8009d16:	4618      	movlt	r0, r3
 8009d18:	e731      	b.n	8009b7e <_printf_float+0xba>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	464a      	mov	r2, r9
 8009d1e:	4631      	mov	r1, r6
 8009d20:	4628      	mov	r0, r5
 8009d22:	47b8      	blx	r7
 8009d24:	3001      	adds	r0, #1
 8009d26:	f43f af28 	beq.w	8009b7a <_printf_float+0xb6>
 8009d2a:	f108 0801 	add.w	r8, r8, #1
 8009d2e:	e7e6      	b.n	8009cfe <_printf_float+0x23a>
 8009d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	dc38      	bgt.n	8009da8 <_printf_float+0x2e4>
 8009d36:	2301      	movs	r3, #1
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	4a19      	ldr	r2, [pc, #100]	; (8009da4 <_printf_float+0x2e0>)
 8009d3e:	47b8      	blx	r7
 8009d40:	3001      	adds	r0, #1
 8009d42:	f43f af1a 	beq.w	8009b7a <_printf_float+0xb6>
 8009d46:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	d102      	bne.n	8009d54 <_printf_float+0x290>
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	07d9      	lsls	r1, r3, #31
 8009d52:	d5d8      	bpl.n	8009d06 <_printf_float+0x242>
 8009d54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d58:	4631      	mov	r1, r6
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	47b8      	blx	r7
 8009d5e:	3001      	adds	r0, #1
 8009d60:	f43f af0b 	beq.w	8009b7a <_printf_float+0xb6>
 8009d64:	f04f 0900 	mov.w	r9, #0
 8009d68:	f104 0a1a 	add.w	sl, r4, #26
 8009d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d6e:	425b      	negs	r3, r3
 8009d70:	454b      	cmp	r3, r9
 8009d72:	dc01      	bgt.n	8009d78 <_printf_float+0x2b4>
 8009d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d76:	e794      	b.n	8009ca2 <_printf_float+0x1de>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	4652      	mov	r2, sl
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4628      	mov	r0, r5
 8009d80:	47b8      	blx	r7
 8009d82:	3001      	adds	r0, #1
 8009d84:	f43f aef9 	beq.w	8009b7a <_printf_float+0xb6>
 8009d88:	f109 0901 	add.w	r9, r9, #1
 8009d8c:	e7ee      	b.n	8009d6c <_printf_float+0x2a8>
 8009d8e:	bf00      	nop
 8009d90:	7fefffff 	.word	0x7fefffff
 8009d94:	0800e399 	.word	0x0800e399
 8009d98:	0800e39d 	.word	0x0800e39d
 8009d9c:	0800e3a1 	.word	0x0800e3a1
 8009da0:	0800e3a5 	.word	0x0800e3a5
 8009da4:	0800e3a9 	.word	0x0800e3a9
 8009da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009daa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dac:	429a      	cmp	r2, r3
 8009dae:	bfa8      	it	ge
 8009db0:	461a      	movge	r2, r3
 8009db2:	2a00      	cmp	r2, #0
 8009db4:	4691      	mov	r9, r2
 8009db6:	dc37      	bgt.n	8009e28 <_printf_float+0x364>
 8009db8:	f04f 0b00 	mov.w	fp, #0
 8009dbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dc0:	f104 021a 	add.w	r2, r4, #26
 8009dc4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009dc8:	ebaa 0309 	sub.w	r3, sl, r9
 8009dcc:	455b      	cmp	r3, fp
 8009dce:	dc33      	bgt.n	8009e38 <_printf_float+0x374>
 8009dd0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	db3b      	blt.n	8009e50 <_printf_float+0x38c>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	07da      	lsls	r2, r3, #31
 8009ddc:	d438      	bmi.n	8009e50 <_printf_float+0x38c>
 8009dde:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009de2:	eba2 0903 	sub.w	r9, r2, r3
 8009de6:	eba2 020a 	sub.w	r2, r2, sl
 8009dea:	4591      	cmp	r9, r2
 8009dec:	bfa8      	it	ge
 8009dee:	4691      	movge	r9, r2
 8009df0:	f1b9 0f00 	cmp.w	r9, #0
 8009df4:	dc34      	bgt.n	8009e60 <_printf_float+0x39c>
 8009df6:	f04f 0800 	mov.w	r8, #0
 8009dfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dfe:	f104 0a1a 	add.w	sl, r4, #26
 8009e02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009e06:	1a9b      	subs	r3, r3, r2
 8009e08:	eba3 0309 	sub.w	r3, r3, r9
 8009e0c:	4543      	cmp	r3, r8
 8009e0e:	f77f af7a 	ble.w	8009d06 <_printf_float+0x242>
 8009e12:	2301      	movs	r3, #1
 8009e14:	4652      	mov	r2, sl
 8009e16:	4631      	mov	r1, r6
 8009e18:	4628      	mov	r0, r5
 8009e1a:	47b8      	blx	r7
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	f43f aeac 	beq.w	8009b7a <_printf_float+0xb6>
 8009e22:	f108 0801 	add.w	r8, r8, #1
 8009e26:	e7ec      	b.n	8009e02 <_printf_float+0x33e>
 8009e28:	4613      	mov	r3, r2
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4642      	mov	r2, r8
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b8      	blx	r7
 8009e32:	3001      	adds	r0, #1
 8009e34:	d1c0      	bne.n	8009db8 <_printf_float+0x2f4>
 8009e36:	e6a0      	b.n	8009b7a <_printf_float+0xb6>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e40:	47b8      	blx	r7
 8009e42:	3001      	adds	r0, #1
 8009e44:	f43f ae99 	beq.w	8009b7a <_printf_float+0xb6>
 8009e48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e4a:	f10b 0b01 	add.w	fp, fp, #1
 8009e4e:	e7b9      	b.n	8009dc4 <_printf_float+0x300>
 8009e50:	4631      	mov	r1, r6
 8009e52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e56:	4628      	mov	r0, r5
 8009e58:	47b8      	blx	r7
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	d1bf      	bne.n	8009dde <_printf_float+0x31a>
 8009e5e:	e68c      	b.n	8009b7a <_printf_float+0xb6>
 8009e60:	464b      	mov	r3, r9
 8009e62:	4631      	mov	r1, r6
 8009e64:	4628      	mov	r0, r5
 8009e66:	eb08 020a 	add.w	r2, r8, sl
 8009e6a:	47b8      	blx	r7
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	d1c2      	bne.n	8009df6 <_printf_float+0x332>
 8009e70:	e683      	b.n	8009b7a <_printf_float+0xb6>
 8009e72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e74:	2a01      	cmp	r2, #1
 8009e76:	dc01      	bgt.n	8009e7c <_printf_float+0x3b8>
 8009e78:	07db      	lsls	r3, r3, #31
 8009e7a:	d539      	bpl.n	8009ef0 <_printf_float+0x42c>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	4642      	mov	r2, r8
 8009e80:	4631      	mov	r1, r6
 8009e82:	4628      	mov	r0, r5
 8009e84:	47b8      	blx	r7
 8009e86:	3001      	adds	r0, #1
 8009e88:	f43f ae77 	beq.w	8009b7a <_printf_float+0xb6>
 8009e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e90:	4631      	mov	r1, r6
 8009e92:	4628      	mov	r0, r5
 8009e94:	47b8      	blx	r7
 8009e96:	3001      	adds	r0, #1
 8009e98:	f43f ae6f 	beq.w	8009b7a <_printf_float+0xb6>
 8009e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009ea8:	f7f6 fd96 	bl	80009d8 <__aeabi_dcmpeq>
 8009eac:	b9d8      	cbnz	r0, 8009ee6 <_printf_float+0x422>
 8009eae:	f109 33ff 	add.w	r3, r9, #4294967295
 8009eb2:	f108 0201 	add.w	r2, r8, #1
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b8      	blx	r7
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d10e      	bne.n	8009ede <_printf_float+0x41a>
 8009ec0:	e65b      	b.n	8009b7a <_printf_float+0xb6>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	464a      	mov	r2, r9
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	4628      	mov	r0, r5
 8009eca:	47b8      	blx	r7
 8009ecc:	3001      	adds	r0, #1
 8009ece:	f43f ae54 	beq.w	8009b7a <_printf_float+0xb6>
 8009ed2:	f108 0801 	add.w	r8, r8, #1
 8009ed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	4543      	cmp	r3, r8
 8009edc:	dcf1      	bgt.n	8009ec2 <_printf_float+0x3fe>
 8009ede:	4653      	mov	r3, sl
 8009ee0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ee4:	e6de      	b.n	8009ca4 <_printf_float+0x1e0>
 8009ee6:	f04f 0800 	mov.w	r8, #0
 8009eea:	f104 091a 	add.w	r9, r4, #26
 8009eee:	e7f2      	b.n	8009ed6 <_printf_float+0x412>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	4642      	mov	r2, r8
 8009ef4:	e7df      	b.n	8009eb6 <_printf_float+0x3f2>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	464a      	mov	r2, r9
 8009efa:	4631      	mov	r1, r6
 8009efc:	4628      	mov	r0, r5
 8009efe:	47b8      	blx	r7
 8009f00:	3001      	adds	r0, #1
 8009f02:	f43f ae3a 	beq.w	8009b7a <_printf_float+0xb6>
 8009f06:	f108 0801 	add.w	r8, r8, #1
 8009f0a:	68e3      	ldr	r3, [r4, #12]
 8009f0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f0e:	1a5b      	subs	r3, r3, r1
 8009f10:	4543      	cmp	r3, r8
 8009f12:	dcf0      	bgt.n	8009ef6 <_printf_float+0x432>
 8009f14:	e6fb      	b.n	8009d0e <_printf_float+0x24a>
 8009f16:	f04f 0800 	mov.w	r8, #0
 8009f1a:	f104 0919 	add.w	r9, r4, #25
 8009f1e:	e7f4      	b.n	8009f0a <_printf_float+0x446>

08009f20 <_printf_common>:
 8009f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f24:	4616      	mov	r6, r2
 8009f26:	4699      	mov	r9, r3
 8009f28:	688a      	ldr	r2, [r1, #8]
 8009f2a:	690b      	ldr	r3, [r1, #16]
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	bfb8      	it	lt
 8009f32:	4613      	movlt	r3, r2
 8009f34:	6033      	str	r3, [r6, #0]
 8009f36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f40:	b10a      	cbz	r2, 8009f46 <_printf_common+0x26>
 8009f42:	3301      	adds	r3, #1
 8009f44:	6033      	str	r3, [r6, #0]
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	0699      	lsls	r1, r3, #26
 8009f4a:	bf42      	ittt	mi
 8009f4c:	6833      	ldrmi	r3, [r6, #0]
 8009f4e:	3302      	addmi	r3, #2
 8009f50:	6033      	strmi	r3, [r6, #0]
 8009f52:	6825      	ldr	r5, [r4, #0]
 8009f54:	f015 0506 	ands.w	r5, r5, #6
 8009f58:	d106      	bne.n	8009f68 <_printf_common+0x48>
 8009f5a:	f104 0a19 	add.w	sl, r4, #25
 8009f5e:	68e3      	ldr	r3, [r4, #12]
 8009f60:	6832      	ldr	r2, [r6, #0]
 8009f62:	1a9b      	subs	r3, r3, r2
 8009f64:	42ab      	cmp	r3, r5
 8009f66:	dc2b      	bgt.n	8009fc0 <_printf_common+0xa0>
 8009f68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f6c:	1e13      	subs	r3, r2, #0
 8009f6e:	6822      	ldr	r2, [r4, #0]
 8009f70:	bf18      	it	ne
 8009f72:	2301      	movne	r3, #1
 8009f74:	0692      	lsls	r2, r2, #26
 8009f76:	d430      	bmi.n	8009fda <_printf_common+0xba>
 8009f78:	4649      	mov	r1, r9
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f80:	47c0      	blx	r8
 8009f82:	3001      	adds	r0, #1
 8009f84:	d023      	beq.n	8009fce <_printf_common+0xae>
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	6922      	ldr	r2, [r4, #16]
 8009f8a:	f003 0306 	and.w	r3, r3, #6
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	bf14      	ite	ne
 8009f92:	2500      	movne	r5, #0
 8009f94:	6833      	ldreq	r3, [r6, #0]
 8009f96:	f04f 0600 	mov.w	r6, #0
 8009f9a:	bf08      	it	eq
 8009f9c:	68e5      	ldreq	r5, [r4, #12]
 8009f9e:	f104 041a 	add.w	r4, r4, #26
 8009fa2:	bf08      	it	eq
 8009fa4:	1aed      	subeq	r5, r5, r3
 8009fa6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009faa:	bf08      	it	eq
 8009fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	bfc4      	itt	gt
 8009fb4:	1a9b      	subgt	r3, r3, r2
 8009fb6:	18ed      	addgt	r5, r5, r3
 8009fb8:	42b5      	cmp	r5, r6
 8009fba:	d11a      	bne.n	8009ff2 <_printf_common+0xd2>
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	e008      	b.n	8009fd2 <_printf_common+0xb2>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	4652      	mov	r2, sl
 8009fc4:	4649      	mov	r1, r9
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	47c0      	blx	r8
 8009fca:	3001      	adds	r0, #1
 8009fcc:	d103      	bne.n	8009fd6 <_printf_common+0xb6>
 8009fce:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd6:	3501      	adds	r5, #1
 8009fd8:	e7c1      	b.n	8009f5e <_printf_common+0x3e>
 8009fda:	2030      	movs	r0, #48	; 0x30
 8009fdc:	18e1      	adds	r1, r4, r3
 8009fde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fe8:	4422      	add	r2, r4
 8009fea:	3302      	adds	r3, #2
 8009fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ff0:	e7c2      	b.n	8009f78 <_printf_common+0x58>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	4622      	mov	r2, r4
 8009ff6:	4649      	mov	r1, r9
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	47c0      	blx	r8
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d0e6      	beq.n	8009fce <_printf_common+0xae>
 800a000:	3601      	adds	r6, #1
 800a002:	e7d9      	b.n	8009fb8 <_printf_common+0x98>

0800a004 <_printf_i>:
 800a004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a008:	7e0f      	ldrb	r7, [r1, #24]
 800a00a:	4691      	mov	r9, r2
 800a00c:	2f78      	cmp	r7, #120	; 0x78
 800a00e:	4680      	mov	r8, r0
 800a010:	460c      	mov	r4, r1
 800a012:	469a      	mov	sl, r3
 800a014:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a016:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a01a:	d807      	bhi.n	800a02c <_printf_i+0x28>
 800a01c:	2f62      	cmp	r7, #98	; 0x62
 800a01e:	d80a      	bhi.n	800a036 <_printf_i+0x32>
 800a020:	2f00      	cmp	r7, #0
 800a022:	f000 80d5 	beq.w	800a1d0 <_printf_i+0x1cc>
 800a026:	2f58      	cmp	r7, #88	; 0x58
 800a028:	f000 80c1 	beq.w	800a1ae <_printf_i+0x1aa>
 800a02c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a030:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a034:	e03a      	b.n	800a0ac <_printf_i+0xa8>
 800a036:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a03a:	2b15      	cmp	r3, #21
 800a03c:	d8f6      	bhi.n	800a02c <_printf_i+0x28>
 800a03e:	a101      	add	r1, pc, #4	; (adr r1, 800a044 <_printf_i+0x40>)
 800a040:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a044:	0800a09d 	.word	0x0800a09d
 800a048:	0800a0b1 	.word	0x0800a0b1
 800a04c:	0800a02d 	.word	0x0800a02d
 800a050:	0800a02d 	.word	0x0800a02d
 800a054:	0800a02d 	.word	0x0800a02d
 800a058:	0800a02d 	.word	0x0800a02d
 800a05c:	0800a0b1 	.word	0x0800a0b1
 800a060:	0800a02d 	.word	0x0800a02d
 800a064:	0800a02d 	.word	0x0800a02d
 800a068:	0800a02d 	.word	0x0800a02d
 800a06c:	0800a02d 	.word	0x0800a02d
 800a070:	0800a1b7 	.word	0x0800a1b7
 800a074:	0800a0dd 	.word	0x0800a0dd
 800a078:	0800a171 	.word	0x0800a171
 800a07c:	0800a02d 	.word	0x0800a02d
 800a080:	0800a02d 	.word	0x0800a02d
 800a084:	0800a1d9 	.word	0x0800a1d9
 800a088:	0800a02d 	.word	0x0800a02d
 800a08c:	0800a0dd 	.word	0x0800a0dd
 800a090:	0800a02d 	.word	0x0800a02d
 800a094:	0800a02d 	.word	0x0800a02d
 800a098:	0800a179 	.word	0x0800a179
 800a09c:	682b      	ldr	r3, [r5, #0]
 800a09e:	1d1a      	adds	r2, r3, #4
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	602a      	str	r2, [r5, #0]
 800a0a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e0a0      	b.n	800a1f2 <_printf_i+0x1ee>
 800a0b0:	6820      	ldr	r0, [r4, #0]
 800a0b2:	682b      	ldr	r3, [r5, #0]
 800a0b4:	0607      	lsls	r7, r0, #24
 800a0b6:	f103 0104 	add.w	r1, r3, #4
 800a0ba:	6029      	str	r1, [r5, #0]
 800a0bc:	d501      	bpl.n	800a0c2 <_printf_i+0xbe>
 800a0be:	681e      	ldr	r6, [r3, #0]
 800a0c0:	e003      	b.n	800a0ca <_printf_i+0xc6>
 800a0c2:	0646      	lsls	r6, r0, #25
 800a0c4:	d5fb      	bpl.n	800a0be <_printf_i+0xba>
 800a0c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a0ca:	2e00      	cmp	r6, #0
 800a0cc:	da03      	bge.n	800a0d6 <_printf_i+0xd2>
 800a0ce:	232d      	movs	r3, #45	; 0x2d
 800a0d0:	4276      	negs	r6, r6
 800a0d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0d6:	230a      	movs	r3, #10
 800a0d8:	4859      	ldr	r0, [pc, #356]	; (800a240 <_printf_i+0x23c>)
 800a0da:	e012      	b.n	800a102 <_printf_i+0xfe>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	6820      	ldr	r0, [r4, #0]
 800a0e0:	1d19      	adds	r1, r3, #4
 800a0e2:	6029      	str	r1, [r5, #0]
 800a0e4:	0605      	lsls	r5, r0, #24
 800a0e6:	d501      	bpl.n	800a0ec <_printf_i+0xe8>
 800a0e8:	681e      	ldr	r6, [r3, #0]
 800a0ea:	e002      	b.n	800a0f2 <_printf_i+0xee>
 800a0ec:	0641      	lsls	r1, r0, #25
 800a0ee:	d5fb      	bpl.n	800a0e8 <_printf_i+0xe4>
 800a0f0:	881e      	ldrh	r6, [r3, #0]
 800a0f2:	2f6f      	cmp	r7, #111	; 0x6f
 800a0f4:	bf0c      	ite	eq
 800a0f6:	2308      	moveq	r3, #8
 800a0f8:	230a      	movne	r3, #10
 800a0fa:	4851      	ldr	r0, [pc, #324]	; (800a240 <_printf_i+0x23c>)
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a102:	6865      	ldr	r5, [r4, #4]
 800a104:	2d00      	cmp	r5, #0
 800a106:	bfa8      	it	ge
 800a108:	6821      	ldrge	r1, [r4, #0]
 800a10a:	60a5      	str	r5, [r4, #8]
 800a10c:	bfa4      	itt	ge
 800a10e:	f021 0104 	bicge.w	r1, r1, #4
 800a112:	6021      	strge	r1, [r4, #0]
 800a114:	b90e      	cbnz	r6, 800a11a <_printf_i+0x116>
 800a116:	2d00      	cmp	r5, #0
 800a118:	d04b      	beq.n	800a1b2 <_printf_i+0x1ae>
 800a11a:	4615      	mov	r5, r2
 800a11c:	fbb6 f1f3 	udiv	r1, r6, r3
 800a120:	fb03 6711 	mls	r7, r3, r1, r6
 800a124:	5dc7      	ldrb	r7, [r0, r7]
 800a126:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a12a:	4637      	mov	r7, r6
 800a12c:	42bb      	cmp	r3, r7
 800a12e:	460e      	mov	r6, r1
 800a130:	d9f4      	bls.n	800a11c <_printf_i+0x118>
 800a132:	2b08      	cmp	r3, #8
 800a134:	d10b      	bne.n	800a14e <_printf_i+0x14a>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	07de      	lsls	r6, r3, #31
 800a13a:	d508      	bpl.n	800a14e <_printf_i+0x14a>
 800a13c:	6923      	ldr	r3, [r4, #16]
 800a13e:	6861      	ldr	r1, [r4, #4]
 800a140:	4299      	cmp	r1, r3
 800a142:	bfde      	ittt	le
 800a144:	2330      	movle	r3, #48	; 0x30
 800a146:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a14a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a14e:	1b52      	subs	r2, r2, r5
 800a150:	6122      	str	r2, [r4, #16]
 800a152:	464b      	mov	r3, r9
 800a154:	4621      	mov	r1, r4
 800a156:	4640      	mov	r0, r8
 800a158:	f8cd a000 	str.w	sl, [sp]
 800a15c:	aa03      	add	r2, sp, #12
 800a15e:	f7ff fedf 	bl	8009f20 <_printf_common>
 800a162:	3001      	adds	r0, #1
 800a164:	d14a      	bne.n	800a1fc <_printf_i+0x1f8>
 800a166:	f04f 30ff 	mov.w	r0, #4294967295
 800a16a:	b004      	add	sp, #16
 800a16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	f043 0320 	orr.w	r3, r3, #32
 800a176:	6023      	str	r3, [r4, #0]
 800a178:	2778      	movs	r7, #120	; 0x78
 800a17a:	4832      	ldr	r0, [pc, #200]	; (800a244 <_printf_i+0x240>)
 800a17c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	6829      	ldr	r1, [r5, #0]
 800a184:	061f      	lsls	r7, r3, #24
 800a186:	f851 6b04 	ldr.w	r6, [r1], #4
 800a18a:	d402      	bmi.n	800a192 <_printf_i+0x18e>
 800a18c:	065f      	lsls	r7, r3, #25
 800a18e:	bf48      	it	mi
 800a190:	b2b6      	uxthmi	r6, r6
 800a192:	07df      	lsls	r7, r3, #31
 800a194:	bf48      	it	mi
 800a196:	f043 0320 	orrmi.w	r3, r3, #32
 800a19a:	6029      	str	r1, [r5, #0]
 800a19c:	bf48      	it	mi
 800a19e:	6023      	strmi	r3, [r4, #0]
 800a1a0:	b91e      	cbnz	r6, 800a1aa <_printf_i+0x1a6>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	f023 0320 	bic.w	r3, r3, #32
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	2310      	movs	r3, #16
 800a1ac:	e7a6      	b.n	800a0fc <_printf_i+0xf8>
 800a1ae:	4824      	ldr	r0, [pc, #144]	; (800a240 <_printf_i+0x23c>)
 800a1b0:	e7e4      	b.n	800a17c <_printf_i+0x178>
 800a1b2:	4615      	mov	r5, r2
 800a1b4:	e7bd      	b.n	800a132 <_printf_i+0x12e>
 800a1b6:	682b      	ldr	r3, [r5, #0]
 800a1b8:	6826      	ldr	r6, [r4, #0]
 800a1ba:	1d18      	adds	r0, r3, #4
 800a1bc:	6961      	ldr	r1, [r4, #20]
 800a1be:	6028      	str	r0, [r5, #0]
 800a1c0:	0635      	lsls	r5, r6, #24
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	d501      	bpl.n	800a1ca <_printf_i+0x1c6>
 800a1c6:	6019      	str	r1, [r3, #0]
 800a1c8:	e002      	b.n	800a1d0 <_printf_i+0x1cc>
 800a1ca:	0670      	lsls	r0, r6, #25
 800a1cc:	d5fb      	bpl.n	800a1c6 <_printf_i+0x1c2>
 800a1ce:	8019      	strh	r1, [r3, #0]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	4615      	mov	r5, r2
 800a1d4:	6123      	str	r3, [r4, #16]
 800a1d6:	e7bc      	b.n	800a152 <_printf_i+0x14e>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	2100      	movs	r1, #0
 800a1dc:	1d1a      	adds	r2, r3, #4
 800a1de:	602a      	str	r2, [r5, #0]
 800a1e0:	681d      	ldr	r5, [r3, #0]
 800a1e2:	6862      	ldr	r2, [r4, #4]
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f000 fd84 	bl	800acf2 <memchr>
 800a1ea:	b108      	cbz	r0, 800a1f0 <_printf_i+0x1ec>
 800a1ec:	1b40      	subs	r0, r0, r5
 800a1ee:	6060      	str	r0, [r4, #4]
 800a1f0:	6863      	ldr	r3, [r4, #4]
 800a1f2:	6123      	str	r3, [r4, #16]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1fa:	e7aa      	b.n	800a152 <_printf_i+0x14e>
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	4649      	mov	r1, r9
 800a200:	4640      	mov	r0, r8
 800a202:	6923      	ldr	r3, [r4, #16]
 800a204:	47d0      	blx	sl
 800a206:	3001      	adds	r0, #1
 800a208:	d0ad      	beq.n	800a166 <_printf_i+0x162>
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	079b      	lsls	r3, r3, #30
 800a20e:	d413      	bmi.n	800a238 <_printf_i+0x234>
 800a210:	68e0      	ldr	r0, [r4, #12]
 800a212:	9b03      	ldr	r3, [sp, #12]
 800a214:	4298      	cmp	r0, r3
 800a216:	bfb8      	it	lt
 800a218:	4618      	movlt	r0, r3
 800a21a:	e7a6      	b.n	800a16a <_printf_i+0x166>
 800a21c:	2301      	movs	r3, #1
 800a21e:	4632      	mov	r2, r6
 800a220:	4649      	mov	r1, r9
 800a222:	4640      	mov	r0, r8
 800a224:	47d0      	blx	sl
 800a226:	3001      	adds	r0, #1
 800a228:	d09d      	beq.n	800a166 <_printf_i+0x162>
 800a22a:	3501      	adds	r5, #1
 800a22c:	68e3      	ldr	r3, [r4, #12]
 800a22e:	9903      	ldr	r1, [sp, #12]
 800a230:	1a5b      	subs	r3, r3, r1
 800a232:	42ab      	cmp	r3, r5
 800a234:	dcf2      	bgt.n	800a21c <_printf_i+0x218>
 800a236:	e7eb      	b.n	800a210 <_printf_i+0x20c>
 800a238:	2500      	movs	r5, #0
 800a23a:	f104 0619 	add.w	r6, r4, #25
 800a23e:	e7f5      	b.n	800a22c <_printf_i+0x228>
 800a240:	0800e3ab 	.word	0x0800e3ab
 800a244:	0800e3bc 	.word	0x0800e3bc

0800a248 <std>:
 800a248:	2300      	movs	r3, #0
 800a24a:	b510      	push	{r4, lr}
 800a24c:	4604      	mov	r4, r0
 800a24e:	e9c0 3300 	strd	r3, r3, [r0]
 800a252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a256:	6083      	str	r3, [r0, #8]
 800a258:	8181      	strh	r1, [r0, #12]
 800a25a:	6643      	str	r3, [r0, #100]	; 0x64
 800a25c:	81c2      	strh	r2, [r0, #14]
 800a25e:	6183      	str	r3, [r0, #24]
 800a260:	4619      	mov	r1, r3
 800a262:	2208      	movs	r2, #8
 800a264:	305c      	adds	r0, #92	; 0x5c
 800a266:	f000 fa91 	bl	800a78c <memset>
 800a26a:	4b0d      	ldr	r3, [pc, #52]	; (800a2a0 <std+0x58>)
 800a26c:	6224      	str	r4, [r4, #32]
 800a26e:	6263      	str	r3, [r4, #36]	; 0x24
 800a270:	4b0c      	ldr	r3, [pc, #48]	; (800a2a4 <std+0x5c>)
 800a272:	62a3      	str	r3, [r4, #40]	; 0x28
 800a274:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <std+0x60>)
 800a276:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a278:	4b0c      	ldr	r3, [pc, #48]	; (800a2ac <std+0x64>)
 800a27a:	6323      	str	r3, [r4, #48]	; 0x30
 800a27c:	4b0c      	ldr	r3, [pc, #48]	; (800a2b0 <std+0x68>)
 800a27e:	429c      	cmp	r4, r3
 800a280:	d006      	beq.n	800a290 <std+0x48>
 800a282:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a286:	4294      	cmp	r4, r2
 800a288:	d002      	beq.n	800a290 <std+0x48>
 800a28a:	33d0      	adds	r3, #208	; 0xd0
 800a28c:	429c      	cmp	r4, r3
 800a28e:	d105      	bne.n	800a29c <std+0x54>
 800a290:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a298:	f000 bd20 	b.w	800acdc <__retarget_lock_init_recursive>
 800a29c:	bd10      	pop	{r4, pc}
 800a29e:	bf00      	nop
 800a2a0:	0800a5dd 	.word	0x0800a5dd
 800a2a4:	0800a5ff 	.word	0x0800a5ff
 800a2a8:	0800a637 	.word	0x0800a637
 800a2ac:	0800a65b 	.word	0x0800a65b
 800a2b0:	200005bc 	.word	0x200005bc

0800a2b4 <stdio_exit_handler>:
 800a2b4:	4a02      	ldr	r2, [pc, #8]	; (800a2c0 <stdio_exit_handler+0xc>)
 800a2b6:	4903      	ldr	r1, [pc, #12]	; (800a2c4 <stdio_exit_handler+0x10>)
 800a2b8:	4803      	ldr	r0, [pc, #12]	; (800a2c8 <stdio_exit_handler+0x14>)
 800a2ba:	f000 b869 	b.w	800a390 <_fwalk_sglue>
 800a2be:	bf00      	nop
 800a2c0:	20000028 	.word	0x20000028
 800a2c4:	0800d11d 	.word	0x0800d11d
 800a2c8:	200001a0 	.word	0x200001a0

0800a2cc <cleanup_stdio>:
 800a2cc:	6841      	ldr	r1, [r0, #4]
 800a2ce:	4b0c      	ldr	r3, [pc, #48]	; (800a300 <cleanup_stdio+0x34>)
 800a2d0:	b510      	push	{r4, lr}
 800a2d2:	4299      	cmp	r1, r3
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	d001      	beq.n	800a2dc <cleanup_stdio+0x10>
 800a2d8:	f002 ff20 	bl	800d11c <_fflush_r>
 800a2dc:	68a1      	ldr	r1, [r4, #8]
 800a2de:	4b09      	ldr	r3, [pc, #36]	; (800a304 <cleanup_stdio+0x38>)
 800a2e0:	4299      	cmp	r1, r3
 800a2e2:	d002      	beq.n	800a2ea <cleanup_stdio+0x1e>
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f002 ff19 	bl	800d11c <_fflush_r>
 800a2ea:	68e1      	ldr	r1, [r4, #12]
 800a2ec:	4b06      	ldr	r3, [pc, #24]	; (800a308 <cleanup_stdio+0x3c>)
 800a2ee:	4299      	cmp	r1, r3
 800a2f0:	d004      	beq.n	800a2fc <cleanup_stdio+0x30>
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2f8:	f002 bf10 	b.w	800d11c <_fflush_r>
 800a2fc:	bd10      	pop	{r4, pc}
 800a2fe:	bf00      	nop
 800a300:	200005bc 	.word	0x200005bc
 800a304:	20000624 	.word	0x20000624
 800a308:	2000068c 	.word	0x2000068c

0800a30c <global_stdio_init.part.0>:
 800a30c:	b510      	push	{r4, lr}
 800a30e:	4b0b      	ldr	r3, [pc, #44]	; (800a33c <global_stdio_init.part.0+0x30>)
 800a310:	4c0b      	ldr	r4, [pc, #44]	; (800a340 <global_stdio_init.part.0+0x34>)
 800a312:	4a0c      	ldr	r2, [pc, #48]	; (800a344 <global_stdio_init.part.0+0x38>)
 800a314:	4620      	mov	r0, r4
 800a316:	601a      	str	r2, [r3, #0]
 800a318:	2104      	movs	r1, #4
 800a31a:	2200      	movs	r2, #0
 800a31c:	f7ff ff94 	bl	800a248 <std>
 800a320:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a324:	2201      	movs	r2, #1
 800a326:	2109      	movs	r1, #9
 800a328:	f7ff ff8e 	bl	800a248 <std>
 800a32c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a330:	2202      	movs	r2, #2
 800a332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a336:	2112      	movs	r1, #18
 800a338:	f7ff bf86 	b.w	800a248 <std>
 800a33c:	200006f4 	.word	0x200006f4
 800a340:	200005bc 	.word	0x200005bc
 800a344:	0800a2b5 	.word	0x0800a2b5

0800a348 <__sfp_lock_acquire>:
 800a348:	4801      	ldr	r0, [pc, #4]	; (800a350 <__sfp_lock_acquire+0x8>)
 800a34a:	f000 bcc8 	b.w	800acde <__retarget_lock_acquire_recursive>
 800a34e:	bf00      	nop
 800a350:	200006fd 	.word	0x200006fd

0800a354 <__sfp_lock_release>:
 800a354:	4801      	ldr	r0, [pc, #4]	; (800a35c <__sfp_lock_release+0x8>)
 800a356:	f000 bcc3 	b.w	800ace0 <__retarget_lock_release_recursive>
 800a35a:	bf00      	nop
 800a35c:	200006fd 	.word	0x200006fd

0800a360 <__sinit>:
 800a360:	b510      	push	{r4, lr}
 800a362:	4604      	mov	r4, r0
 800a364:	f7ff fff0 	bl	800a348 <__sfp_lock_acquire>
 800a368:	6a23      	ldr	r3, [r4, #32]
 800a36a:	b11b      	cbz	r3, 800a374 <__sinit+0x14>
 800a36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a370:	f7ff bff0 	b.w	800a354 <__sfp_lock_release>
 800a374:	4b04      	ldr	r3, [pc, #16]	; (800a388 <__sinit+0x28>)
 800a376:	6223      	str	r3, [r4, #32]
 800a378:	4b04      	ldr	r3, [pc, #16]	; (800a38c <__sinit+0x2c>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d1f5      	bne.n	800a36c <__sinit+0xc>
 800a380:	f7ff ffc4 	bl	800a30c <global_stdio_init.part.0>
 800a384:	e7f2      	b.n	800a36c <__sinit+0xc>
 800a386:	bf00      	nop
 800a388:	0800a2cd 	.word	0x0800a2cd
 800a38c:	200006f4 	.word	0x200006f4

0800a390 <_fwalk_sglue>:
 800a390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a394:	4607      	mov	r7, r0
 800a396:	4688      	mov	r8, r1
 800a398:	4614      	mov	r4, r2
 800a39a:	2600      	movs	r6, #0
 800a39c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a3a4:	d505      	bpl.n	800a3b2 <_fwalk_sglue+0x22>
 800a3a6:	6824      	ldr	r4, [r4, #0]
 800a3a8:	2c00      	cmp	r4, #0
 800a3aa:	d1f7      	bne.n	800a39c <_fwalk_sglue+0xc>
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3b2:	89ab      	ldrh	r3, [r5, #12]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d907      	bls.n	800a3c8 <_fwalk_sglue+0x38>
 800a3b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	d003      	beq.n	800a3c8 <_fwalk_sglue+0x38>
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	47c0      	blx	r8
 800a3c6:	4306      	orrs	r6, r0
 800a3c8:	3568      	adds	r5, #104	; 0x68
 800a3ca:	e7e9      	b.n	800a3a0 <_fwalk_sglue+0x10>

0800a3cc <_fwrite_r>:
 800a3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d0:	9c08      	ldr	r4, [sp, #32]
 800a3d2:	468a      	mov	sl, r1
 800a3d4:	4690      	mov	r8, r2
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	fb02 f903 	mul.w	r9, r2, r3
 800a3dc:	b118      	cbz	r0, 800a3e6 <_fwrite_r+0x1a>
 800a3de:	6a03      	ldr	r3, [r0, #32]
 800a3e0:	b90b      	cbnz	r3, 800a3e6 <_fwrite_r+0x1a>
 800a3e2:	f7ff ffbd 	bl	800a360 <__sinit>
 800a3e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3e8:	07dd      	lsls	r5, r3, #31
 800a3ea:	d405      	bmi.n	800a3f8 <_fwrite_r+0x2c>
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	0598      	lsls	r0, r3, #22
 800a3f0:	d402      	bmi.n	800a3f8 <_fwrite_r+0x2c>
 800a3f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3f4:	f000 fc73 	bl	800acde <__retarget_lock_acquire_recursive>
 800a3f8:	89a3      	ldrh	r3, [r4, #12]
 800a3fa:	0719      	lsls	r1, r3, #28
 800a3fc:	d516      	bpl.n	800a42c <_fwrite_r+0x60>
 800a3fe:	6923      	ldr	r3, [r4, #16]
 800a400:	b1a3      	cbz	r3, 800a42c <_fwrite_r+0x60>
 800a402:	2500      	movs	r5, #0
 800a404:	454d      	cmp	r5, r9
 800a406:	d01f      	beq.n	800a448 <_fwrite_r+0x7c>
 800a408:	68a7      	ldr	r7, [r4, #8]
 800a40a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800a40e:	3f01      	subs	r7, #1
 800a410:	2f00      	cmp	r7, #0
 800a412:	60a7      	str	r7, [r4, #8]
 800a414:	da04      	bge.n	800a420 <_fwrite_r+0x54>
 800a416:	69a3      	ldr	r3, [r4, #24]
 800a418:	429f      	cmp	r7, r3
 800a41a:	db0f      	blt.n	800a43c <_fwrite_r+0x70>
 800a41c:	290a      	cmp	r1, #10
 800a41e:	d00d      	beq.n	800a43c <_fwrite_r+0x70>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	1c5a      	adds	r2, r3, #1
 800a424:	6022      	str	r2, [r4, #0]
 800a426:	7019      	strb	r1, [r3, #0]
 800a428:	3501      	adds	r5, #1
 800a42a:	e7eb      	b.n	800a404 <_fwrite_r+0x38>
 800a42c:	4621      	mov	r1, r4
 800a42e:	4630      	mov	r0, r6
 800a430:	f000 f954 	bl	800a6dc <__swsetup_r>
 800a434:	2800      	cmp	r0, #0
 800a436:	d0e4      	beq.n	800a402 <_fwrite_r+0x36>
 800a438:	2500      	movs	r5, #0
 800a43a:	e005      	b.n	800a448 <_fwrite_r+0x7c>
 800a43c:	4622      	mov	r2, r4
 800a43e:	4630      	mov	r0, r6
 800a440:	f000 f90f 	bl	800a662 <__swbuf_r>
 800a444:	3001      	adds	r0, #1
 800a446:	d1ef      	bne.n	800a428 <_fwrite_r+0x5c>
 800a448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a44a:	07da      	lsls	r2, r3, #31
 800a44c:	d405      	bmi.n	800a45a <_fwrite_r+0x8e>
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	059b      	lsls	r3, r3, #22
 800a452:	d402      	bmi.n	800a45a <_fwrite_r+0x8e>
 800a454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a456:	f000 fc43 	bl	800ace0 <__retarget_lock_release_recursive>
 800a45a:	fbb5 f0f8 	udiv	r0, r5, r8
 800a45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800a464 <fwrite>:
 800a464:	b507      	push	{r0, r1, r2, lr}
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	4613      	mov	r3, r2
 800a46a:	460a      	mov	r2, r1
 800a46c:	4601      	mov	r1, r0
 800a46e:	4803      	ldr	r0, [pc, #12]	; (800a47c <fwrite+0x18>)
 800a470:	6800      	ldr	r0, [r0, #0]
 800a472:	f7ff ffab 	bl	800a3cc <_fwrite_r>
 800a476:	b003      	add	sp, #12
 800a478:	f85d fb04 	ldr.w	pc, [sp], #4
 800a47c:	200001ec 	.word	0x200001ec

0800a480 <_perror_r>:
 800a480:	6a03      	ldr	r3, [r0, #32]
 800a482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a484:	4605      	mov	r5, r0
 800a486:	460e      	mov	r6, r1
 800a488:	68c4      	ldr	r4, [r0, #12]
 800a48a:	b90b      	cbnz	r3, 800a490 <_perror_r+0x10>
 800a48c:	f7ff ff68 	bl	800a360 <__sinit>
 800a490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a492:	07d8      	lsls	r0, r3, #31
 800a494:	d405      	bmi.n	800a4a2 <_perror_r+0x22>
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	0599      	lsls	r1, r3, #22
 800a49a:	d402      	bmi.n	800a4a2 <_perror_r+0x22>
 800a49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a49e:	f000 fc1e 	bl	800acde <__retarget_lock_acquire_recursive>
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f002 fe39 	bl	800d11c <_fflush_r>
 800a4aa:	bb1e      	cbnz	r6, 800a4f4 <_perror_r+0x74>
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	6829      	ldr	r1, [r5, #0]
 800a4b2:	ab01      	add	r3, sp, #4
 800a4b4:	f000 f980 	bl	800a7b8 <_strerror_r>
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d145      	bne.n	800a54a <_perror_r+0xca>
 800a4be:	4831      	ldr	r0, [pc, #196]	; (800a584 <_perror_r+0x104>)
 800a4c0:	f7f5 fe5e 	bl	8000180 <strlen>
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	4f2f      	ldr	r7, [pc, #188]	; (800a584 <_perror_r+0x104>)
 800a4c8:	b156      	cbz	r6, 800a4e0 <_perror_r+0x60>
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f002 fe4e 	bl	800d16c <fileno>
 800a4d0:	4633      	mov	r3, r6
 800a4d2:	4601      	mov	r1, r0
 800a4d4:	463a      	mov	r2, r7
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f000 fbc4 	bl	800ac64 <_write_r>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	da47      	bge.n	800a570 <_perror_r+0xf0>
 800a4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4ea:	07d2      	lsls	r2, r2, #31
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	d542      	bpl.n	800a576 <_perror_r+0xf6>
 800a4f0:	b003      	add	sp, #12
 800a4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4f4:	7833      	ldrb	r3, [r6, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0d8      	beq.n	800a4ac <_perror_r+0x2c>
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f7f5 fe40 	bl	8000180 <strlen>
 800a500:	4607      	mov	r7, r0
 800a502:	b157      	cbz	r7, 800a51a <_perror_r+0x9a>
 800a504:	4620      	mov	r0, r4
 800a506:	f002 fe31 	bl	800d16c <fileno>
 800a50a:	463b      	mov	r3, r7
 800a50c:	4601      	mov	r1, r0
 800a50e:	4632      	mov	r2, r6
 800a510:	4628      	mov	r0, r5
 800a512:	f000 fba7 	bl	800ac64 <_write_r>
 800a516:	2800      	cmp	r0, #0
 800a518:	da14      	bge.n	800a544 <_perror_r+0xc4>
 800a51a:	481b      	ldr	r0, [pc, #108]	; (800a588 <_perror_r+0x108>)
 800a51c:	f7f5 fe30 	bl	8000180 <strlen>
 800a520:	4606      	mov	r6, r0
 800a522:	4f19      	ldr	r7, [pc, #100]	; (800a588 <_perror_r+0x108>)
 800a524:	2e00      	cmp	r6, #0
 800a526:	d0c1      	beq.n	800a4ac <_perror_r+0x2c>
 800a528:	4620      	mov	r0, r4
 800a52a:	f002 fe1f 	bl	800d16c <fileno>
 800a52e:	4633      	mov	r3, r6
 800a530:	4601      	mov	r1, r0
 800a532:	463a      	mov	r2, r7
 800a534:	4628      	mov	r0, r5
 800a536:	f000 fb95 	bl	800ac64 <_write_r>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	dbb6      	blt.n	800a4ac <_perror_r+0x2c>
 800a53e:	1a36      	subs	r6, r6, r0
 800a540:	4407      	add	r7, r0
 800a542:	e7ef      	b.n	800a524 <_perror_r+0xa4>
 800a544:	1a3f      	subs	r7, r7, r0
 800a546:	4406      	add	r6, r0
 800a548:	e7db      	b.n	800a502 <_perror_r+0x82>
 800a54a:	f7f5 fe19 	bl	8000180 <strlen>
 800a54e:	4606      	mov	r6, r0
 800a550:	2e00      	cmp	r6, #0
 800a552:	d0b4      	beq.n	800a4be <_perror_r+0x3e>
 800a554:	4620      	mov	r0, r4
 800a556:	f002 fe09 	bl	800d16c <fileno>
 800a55a:	4633      	mov	r3, r6
 800a55c:	4601      	mov	r1, r0
 800a55e:	463a      	mov	r2, r7
 800a560:	4628      	mov	r0, r5
 800a562:	f000 fb7f 	bl	800ac64 <_write_r>
 800a566:	2800      	cmp	r0, #0
 800a568:	dba9      	blt.n	800a4be <_perror_r+0x3e>
 800a56a:	1a36      	subs	r6, r6, r0
 800a56c:	4407      	add	r7, r0
 800a56e:	e7ef      	b.n	800a550 <_perror_r+0xd0>
 800a570:	1a36      	subs	r6, r6, r0
 800a572:	4407      	add	r7, r0
 800a574:	e7a8      	b.n	800a4c8 <_perror_r+0x48>
 800a576:	059b      	lsls	r3, r3, #22
 800a578:	d4ba      	bmi.n	800a4f0 <_perror_r+0x70>
 800a57a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a57c:	f000 fbb0 	bl	800ace0 <__retarget_lock_release_recursive>
 800a580:	e7b6      	b.n	800a4f0 <_perror_r+0x70>
 800a582:	bf00      	nop
 800a584:	0800ecff 	.word	0x0800ecff
 800a588:	0800eccf 	.word	0x0800eccf

0800a58c <perror>:
 800a58c:	4b02      	ldr	r3, [pc, #8]	; (800a598 <perror+0xc>)
 800a58e:	4601      	mov	r1, r0
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	f7ff bf75 	b.w	800a480 <_perror_r>
 800a596:	bf00      	nop
 800a598:	200001ec 	.word	0x200001ec

0800a59c <siprintf>:
 800a59c:	b40e      	push	{r1, r2, r3}
 800a59e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5a2:	b500      	push	{lr}
 800a5a4:	b09c      	sub	sp, #112	; 0x70
 800a5a6:	ab1d      	add	r3, sp, #116	; 0x74
 800a5a8:	9002      	str	r0, [sp, #8]
 800a5aa:	9006      	str	r0, [sp, #24]
 800a5ac:	9107      	str	r1, [sp, #28]
 800a5ae:	9104      	str	r1, [sp, #16]
 800a5b0:	4808      	ldr	r0, [pc, #32]	; (800a5d4 <siprintf+0x38>)
 800a5b2:	4909      	ldr	r1, [pc, #36]	; (800a5d8 <siprintf+0x3c>)
 800a5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5b8:	9105      	str	r1, [sp, #20]
 800a5ba:	6800      	ldr	r0, [r0, #0]
 800a5bc:	a902      	add	r1, sp, #8
 800a5be:	9301      	str	r3, [sp, #4]
 800a5c0:	f002 faea 	bl	800cb98 <_svfiprintf_r>
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	9b02      	ldr	r3, [sp, #8]
 800a5c8:	701a      	strb	r2, [r3, #0]
 800a5ca:	b01c      	add	sp, #112	; 0x70
 800a5cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5d0:	b003      	add	sp, #12
 800a5d2:	4770      	bx	lr
 800a5d4:	200001ec 	.word	0x200001ec
 800a5d8:	ffff0208 	.word	0xffff0208

0800a5dc <__sread>:
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	460c      	mov	r4, r1
 800a5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e4:	f000 fb1c 	bl	800ac20 <_read_r>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	bfab      	itete	ge
 800a5ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ee:	89a3      	ldrhlt	r3, [r4, #12]
 800a5f0:	181b      	addge	r3, r3, r0
 800a5f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5f6:	bfac      	ite	ge
 800a5f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5fa:	81a3      	strhlt	r3, [r4, #12]
 800a5fc:	bd10      	pop	{r4, pc}

0800a5fe <__swrite>:
 800a5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a602:	461f      	mov	r7, r3
 800a604:	898b      	ldrh	r3, [r1, #12]
 800a606:	4605      	mov	r5, r0
 800a608:	05db      	lsls	r3, r3, #23
 800a60a:	460c      	mov	r4, r1
 800a60c:	4616      	mov	r6, r2
 800a60e:	d505      	bpl.n	800a61c <__swrite+0x1e>
 800a610:	2302      	movs	r3, #2
 800a612:	2200      	movs	r2, #0
 800a614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a618:	f000 faf0 	bl	800abfc <_lseek_r>
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	4632      	mov	r2, r6
 800a620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a624:	81a3      	strh	r3, [r4, #12]
 800a626:	4628      	mov	r0, r5
 800a628:	463b      	mov	r3, r7
 800a62a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a632:	f000 bb17 	b.w	800ac64 <_write_r>

0800a636 <__sseek>:
 800a636:	b510      	push	{r4, lr}
 800a638:	460c      	mov	r4, r1
 800a63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63e:	f000 fadd 	bl	800abfc <_lseek_r>
 800a642:	1c43      	adds	r3, r0, #1
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	bf15      	itete	ne
 800a648:	6560      	strne	r0, [r4, #84]	; 0x54
 800a64a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a64e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a652:	81a3      	strheq	r3, [r4, #12]
 800a654:	bf18      	it	ne
 800a656:	81a3      	strhne	r3, [r4, #12]
 800a658:	bd10      	pop	{r4, pc}

0800a65a <__sclose>:
 800a65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a65e:	f000 babd 	b.w	800abdc <_close_r>

0800a662 <__swbuf_r>:
 800a662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a664:	460e      	mov	r6, r1
 800a666:	4614      	mov	r4, r2
 800a668:	4605      	mov	r5, r0
 800a66a:	b118      	cbz	r0, 800a674 <__swbuf_r+0x12>
 800a66c:	6a03      	ldr	r3, [r0, #32]
 800a66e:	b90b      	cbnz	r3, 800a674 <__swbuf_r+0x12>
 800a670:	f7ff fe76 	bl	800a360 <__sinit>
 800a674:	69a3      	ldr	r3, [r4, #24]
 800a676:	60a3      	str	r3, [r4, #8]
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	071a      	lsls	r2, r3, #28
 800a67c:	d525      	bpl.n	800a6ca <__swbuf_r+0x68>
 800a67e:	6923      	ldr	r3, [r4, #16]
 800a680:	b31b      	cbz	r3, 800a6ca <__swbuf_r+0x68>
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	6922      	ldr	r2, [r4, #16]
 800a686:	b2f6      	uxtb	r6, r6
 800a688:	1a98      	subs	r0, r3, r2
 800a68a:	6963      	ldr	r3, [r4, #20]
 800a68c:	4637      	mov	r7, r6
 800a68e:	4283      	cmp	r3, r0
 800a690:	dc04      	bgt.n	800a69c <__swbuf_r+0x3a>
 800a692:	4621      	mov	r1, r4
 800a694:	4628      	mov	r0, r5
 800a696:	f002 fd41 	bl	800d11c <_fflush_r>
 800a69a:	b9e0      	cbnz	r0, 800a6d6 <__swbuf_r+0x74>
 800a69c:	68a3      	ldr	r3, [r4, #8]
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	60a3      	str	r3, [r4, #8]
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	1c5a      	adds	r2, r3, #1
 800a6a6:	6022      	str	r2, [r4, #0]
 800a6a8:	701e      	strb	r6, [r3, #0]
 800a6aa:	6962      	ldr	r2, [r4, #20]
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d004      	beq.n	800a6bc <__swbuf_r+0x5a>
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	07db      	lsls	r3, r3, #31
 800a6b6:	d506      	bpl.n	800a6c6 <__swbuf_r+0x64>
 800a6b8:	2e0a      	cmp	r6, #10
 800a6ba:	d104      	bne.n	800a6c6 <__swbuf_r+0x64>
 800a6bc:	4621      	mov	r1, r4
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f002 fd2c 	bl	800d11c <_fflush_r>
 800a6c4:	b938      	cbnz	r0, 800a6d6 <__swbuf_r+0x74>
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	f000 f805 	bl	800a6dc <__swsetup_r>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d0d5      	beq.n	800a682 <__swbuf_r+0x20>
 800a6d6:	f04f 37ff 	mov.w	r7, #4294967295
 800a6da:	e7f4      	b.n	800a6c6 <__swbuf_r+0x64>

0800a6dc <__swsetup_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	4b2a      	ldr	r3, [pc, #168]	; (800a788 <__swsetup_r+0xac>)
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	6818      	ldr	r0, [r3, #0]
 800a6e4:	460c      	mov	r4, r1
 800a6e6:	b118      	cbz	r0, 800a6f0 <__swsetup_r+0x14>
 800a6e8:	6a03      	ldr	r3, [r0, #32]
 800a6ea:	b90b      	cbnz	r3, 800a6f0 <__swsetup_r+0x14>
 800a6ec:	f7ff fe38 	bl	800a360 <__sinit>
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6f6:	0718      	lsls	r0, r3, #28
 800a6f8:	d422      	bmi.n	800a740 <__swsetup_r+0x64>
 800a6fa:	06d9      	lsls	r1, r3, #27
 800a6fc:	d407      	bmi.n	800a70e <__swsetup_r+0x32>
 800a6fe:	2309      	movs	r3, #9
 800a700:	602b      	str	r3, [r5, #0]
 800a702:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a706:	f04f 30ff 	mov.w	r0, #4294967295
 800a70a:	81a3      	strh	r3, [r4, #12]
 800a70c:	e034      	b.n	800a778 <__swsetup_r+0x9c>
 800a70e:	0758      	lsls	r0, r3, #29
 800a710:	d512      	bpl.n	800a738 <__swsetup_r+0x5c>
 800a712:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a714:	b141      	cbz	r1, 800a728 <__swsetup_r+0x4c>
 800a716:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a71a:	4299      	cmp	r1, r3
 800a71c:	d002      	beq.n	800a724 <__swsetup_r+0x48>
 800a71e:	4628      	mov	r0, r5
 800a720:	f001 f97a 	bl	800ba18 <_free_r>
 800a724:	2300      	movs	r3, #0
 800a726:	6363      	str	r3, [r4, #52]	; 0x34
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a72e:	81a3      	strh	r3, [r4, #12]
 800a730:	2300      	movs	r3, #0
 800a732:	6063      	str	r3, [r4, #4]
 800a734:	6923      	ldr	r3, [r4, #16]
 800a736:	6023      	str	r3, [r4, #0]
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	f043 0308 	orr.w	r3, r3, #8
 800a73e:	81a3      	strh	r3, [r4, #12]
 800a740:	6923      	ldr	r3, [r4, #16]
 800a742:	b94b      	cbnz	r3, 800a758 <__swsetup_r+0x7c>
 800a744:	89a3      	ldrh	r3, [r4, #12]
 800a746:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a74a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a74e:	d003      	beq.n	800a758 <__swsetup_r+0x7c>
 800a750:	4621      	mov	r1, r4
 800a752:	4628      	mov	r0, r5
 800a754:	f002 fd59 	bl	800d20a <__smakebuf_r>
 800a758:	89a0      	ldrh	r0, [r4, #12]
 800a75a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a75e:	f010 0301 	ands.w	r3, r0, #1
 800a762:	d00a      	beq.n	800a77a <__swsetup_r+0x9e>
 800a764:	2300      	movs	r3, #0
 800a766:	60a3      	str	r3, [r4, #8]
 800a768:	6963      	ldr	r3, [r4, #20]
 800a76a:	425b      	negs	r3, r3
 800a76c:	61a3      	str	r3, [r4, #24]
 800a76e:	6923      	ldr	r3, [r4, #16]
 800a770:	b943      	cbnz	r3, 800a784 <__swsetup_r+0xa8>
 800a772:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a776:	d1c4      	bne.n	800a702 <__swsetup_r+0x26>
 800a778:	bd38      	pop	{r3, r4, r5, pc}
 800a77a:	0781      	lsls	r1, r0, #30
 800a77c:	bf58      	it	pl
 800a77e:	6963      	ldrpl	r3, [r4, #20]
 800a780:	60a3      	str	r3, [r4, #8]
 800a782:	e7f4      	b.n	800a76e <__swsetup_r+0x92>
 800a784:	2000      	movs	r0, #0
 800a786:	e7f7      	b.n	800a778 <__swsetup_r+0x9c>
 800a788:	200001ec 	.word	0x200001ec

0800a78c <memset>:
 800a78c:	4603      	mov	r3, r0
 800a78e:	4402      	add	r2, r0
 800a790:	4293      	cmp	r3, r2
 800a792:	d100      	bne.n	800a796 <memset+0xa>
 800a794:	4770      	bx	lr
 800a796:	f803 1b01 	strb.w	r1, [r3], #1
 800a79a:	e7f9      	b.n	800a790 <memset+0x4>

0800a79c <strchr>:
 800a79c:	4603      	mov	r3, r0
 800a79e:	b2c9      	uxtb	r1, r1
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7a6:	b112      	cbz	r2, 800a7ae <strchr+0x12>
 800a7a8:	428a      	cmp	r2, r1
 800a7aa:	d1f9      	bne.n	800a7a0 <strchr+0x4>
 800a7ac:	4770      	bx	lr
 800a7ae:	2900      	cmp	r1, #0
 800a7b0:	bf18      	it	ne
 800a7b2:	2000      	movne	r0, #0
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <_strerror_r>:
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4608      	mov	r0, r1
 800a7be:	4611      	mov	r1, r2
 800a7c0:	288e      	cmp	r0, #142	; 0x8e
 800a7c2:	f200 8130 	bhi.w	800aa26 <_strerror_r+0x26e>
 800a7c6:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a7ca:	0139      	.short	0x0139
 800a7cc:	0092008f 	.word	0x0092008f
 800a7d0:	00960094 	.word	0x00960094
 800a7d4:	009a0098 	.word	0x009a0098
 800a7d8:	009e009c 	.word	0x009e009c
 800a7dc:	00a400a2 	.word	0x00a400a2
 800a7e0:	00aa00a8 	.word	0x00aa00a8
 800a7e4:	00ae00ac 	.word	0x00ae00ac
 800a7e8:	00b0012e 	.word	0x00b0012e
 800a7ec:	00b400b2 	.word	0x00b400b2
 800a7f0:	00b800b6 	.word	0x00b800b6
 800a7f4:	00c000be 	.word	0x00c000be
 800a7f8:	00c800c6 	.word	0x00c800c6
 800a7fc:	00cc00ca 	.word	0x00cc00ca
 800a800:	00d200ce 	.word	0x00d200ce
 800a804:	00d800d6 	.word	0x00d800d6
 800a808:	00dc00da 	.word	0x00dc00da
 800a80c:	00e000de 	.word	0x00e000de
 800a810:	00e400e2 	.word	0x00e400e2
 800a814:	012e012e 	.word	0x012e012e
 800a818:	012e012e 	.word	0x012e012e
 800a81c:	012e012e 	.word	0x012e012e
 800a820:	012e012e 	.word	0x012e012e
 800a824:	00ec00e8 	.word	0x00ec00e8
 800a828:	012e012e 	.word	0x012e012e
 800a82c:	012e012e 	.word	0x012e012e
 800a830:	012e012e 	.word	0x012e012e
 800a834:	012e012e 	.word	0x012e012e
 800a838:	012e012e 	.word	0x012e012e
 800a83c:	012e012e 	.word	0x012e012e
 800a840:	00ee012e 	.word	0x00ee012e
 800a844:	00f00108 	.word	0x00f00108
 800a848:	012e00f2 	.word	0x012e00f2
 800a84c:	012e012e 	.word	0x012e012e
 800a850:	012e00f4 	.word	0x012e00f4
 800a854:	012e012e 	.word	0x012e012e
 800a858:	012e00f6 	.word	0x012e00f6
 800a85c:	00fa012e 	.word	0x00fa012e
 800a860:	012e012e 	.word	0x012e012e
 800a864:	012e00fc 	.word	0x012e00fc
 800a868:	012e012e 	.word	0x012e012e
 800a86c:	012e012e 	.word	0x012e012e
 800a870:	012e012e 	.word	0x012e012e
 800a874:	012e012e 	.word	0x012e012e
 800a878:	00fe012e 	.word	0x00fe012e
 800a87c:	0100012e 	.word	0x0100012e
 800a880:	01040102 	.word	0x01040102
 800a884:	012e012e 	.word	0x012e012e
 800a888:	012e0126 	.word	0x012e0126
 800a88c:	012e012e 	.word	0x012e012e
 800a890:	012e012e 	.word	0x012e012e
 800a894:	012e012e 	.word	0x012e012e
 800a898:	0114012e 	.word	0x0114012e
 800a89c:	010a0106 	.word	0x010a0106
 800a8a0:	010e010c 	.word	0x010e010c
 800a8a4:	012e0110 	.word	0x012e0110
 800a8a8:	01160112 	.word	0x01160112
 800a8ac:	00ea011a 	.word	0x00ea011a
 800a8b0:	012c00c2 	.word	0x012c00c2
 800a8b4:	00d000ba 	.word	0x00d000ba
 800a8b8:	00a000bc 	.word	0x00a000bc
 800a8bc:	012a00a6 	.word	0x012a00a6
 800a8c0:	012e00f8 	.word	0x012e00f8
 800a8c4:	00c40118 	.word	0x00c40118
 800a8c8:	011c011e 	.word	0x011c011e
 800a8cc:	012e012e 	.word	0x012e012e
 800a8d0:	012e012e 	.word	0x012e012e
 800a8d4:	00d4012e 	.word	0x00d4012e
 800a8d8:	012e012e 	.word	0x012e012e
 800a8dc:	00e6012e 	.word	0x00e6012e
 800a8e0:	01200128 	.word	0x01200128
 800a8e4:	01240122 	.word	0x01240122
 800a8e8:	4b55      	ldr	r3, [pc, #340]	; (800aa40 <_strerror_r+0x288>)
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	bd10      	pop	{r4, pc}
 800a8ee:	4b55      	ldr	r3, [pc, #340]	; (800aa44 <_strerror_r+0x28c>)
 800a8f0:	e7fb      	b.n	800a8ea <_strerror_r+0x132>
 800a8f2:	4b55      	ldr	r3, [pc, #340]	; (800aa48 <_strerror_r+0x290>)
 800a8f4:	e7f9      	b.n	800a8ea <_strerror_r+0x132>
 800a8f6:	4b55      	ldr	r3, [pc, #340]	; (800aa4c <_strerror_r+0x294>)
 800a8f8:	e7f7      	b.n	800a8ea <_strerror_r+0x132>
 800a8fa:	4b55      	ldr	r3, [pc, #340]	; (800aa50 <_strerror_r+0x298>)
 800a8fc:	e7f5      	b.n	800a8ea <_strerror_r+0x132>
 800a8fe:	4b55      	ldr	r3, [pc, #340]	; (800aa54 <_strerror_r+0x29c>)
 800a900:	e7f3      	b.n	800a8ea <_strerror_r+0x132>
 800a902:	4b55      	ldr	r3, [pc, #340]	; (800aa58 <_strerror_r+0x2a0>)
 800a904:	e7f1      	b.n	800a8ea <_strerror_r+0x132>
 800a906:	4b55      	ldr	r3, [pc, #340]	; (800aa5c <_strerror_r+0x2a4>)
 800a908:	e7ef      	b.n	800a8ea <_strerror_r+0x132>
 800a90a:	4b55      	ldr	r3, [pc, #340]	; (800aa60 <_strerror_r+0x2a8>)
 800a90c:	e7ed      	b.n	800a8ea <_strerror_r+0x132>
 800a90e:	4b55      	ldr	r3, [pc, #340]	; (800aa64 <_strerror_r+0x2ac>)
 800a910:	e7eb      	b.n	800a8ea <_strerror_r+0x132>
 800a912:	4b55      	ldr	r3, [pc, #340]	; (800aa68 <_strerror_r+0x2b0>)
 800a914:	e7e9      	b.n	800a8ea <_strerror_r+0x132>
 800a916:	4b55      	ldr	r3, [pc, #340]	; (800aa6c <_strerror_r+0x2b4>)
 800a918:	e7e7      	b.n	800a8ea <_strerror_r+0x132>
 800a91a:	4b55      	ldr	r3, [pc, #340]	; (800aa70 <_strerror_r+0x2b8>)
 800a91c:	e7e5      	b.n	800a8ea <_strerror_r+0x132>
 800a91e:	4b55      	ldr	r3, [pc, #340]	; (800aa74 <_strerror_r+0x2bc>)
 800a920:	e7e3      	b.n	800a8ea <_strerror_r+0x132>
 800a922:	4b55      	ldr	r3, [pc, #340]	; (800aa78 <_strerror_r+0x2c0>)
 800a924:	e7e1      	b.n	800a8ea <_strerror_r+0x132>
 800a926:	4b55      	ldr	r3, [pc, #340]	; (800aa7c <_strerror_r+0x2c4>)
 800a928:	e7df      	b.n	800a8ea <_strerror_r+0x132>
 800a92a:	4b55      	ldr	r3, [pc, #340]	; (800aa80 <_strerror_r+0x2c8>)
 800a92c:	e7dd      	b.n	800a8ea <_strerror_r+0x132>
 800a92e:	4b55      	ldr	r3, [pc, #340]	; (800aa84 <_strerror_r+0x2cc>)
 800a930:	e7db      	b.n	800a8ea <_strerror_r+0x132>
 800a932:	4b55      	ldr	r3, [pc, #340]	; (800aa88 <_strerror_r+0x2d0>)
 800a934:	e7d9      	b.n	800a8ea <_strerror_r+0x132>
 800a936:	4b55      	ldr	r3, [pc, #340]	; (800aa8c <_strerror_r+0x2d4>)
 800a938:	e7d7      	b.n	800a8ea <_strerror_r+0x132>
 800a93a:	4b55      	ldr	r3, [pc, #340]	; (800aa90 <_strerror_r+0x2d8>)
 800a93c:	e7d5      	b.n	800a8ea <_strerror_r+0x132>
 800a93e:	4b55      	ldr	r3, [pc, #340]	; (800aa94 <_strerror_r+0x2dc>)
 800a940:	e7d3      	b.n	800a8ea <_strerror_r+0x132>
 800a942:	4b55      	ldr	r3, [pc, #340]	; (800aa98 <_strerror_r+0x2e0>)
 800a944:	e7d1      	b.n	800a8ea <_strerror_r+0x132>
 800a946:	4b55      	ldr	r3, [pc, #340]	; (800aa9c <_strerror_r+0x2e4>)
 800a948:	e7cf      	b.n	800a8ea <_strerror_r+0x132>
 800a94a:	4b55      	ldr	r3, [pc, #340]	; (800aaa0 <_strerror_r+0x2e8>)
 800a94c:	e7cd      	b.n	800a8ea <_strerror_r+0x132>
 800a94e:	4b55      	ldr	r3, [pc, #340]	; (800aaa4 <_strerror_r+0x2ec>)
 800a950:	e7cb      	b.n	800a8ea <_strerror_r+0x132>
 800a952:	4b55      	ldr	r3, [pc, #340]	; (800aaa8 <_strerror_r+0x2f0>)
 800a954:	e7c9      	b.n	800a8ea <_strerror_r+0x132>
 800a956:	4b55      	ldr	r3, [pc, #340]	; (800aaac <_strerror_r+0x2f4>)
 800a958:	e7c7      	b.n	800a8ea <_strerror_r+0x132>
 800a95a:	4b55      	ldr	r3, [pc, #340]	; (800aab0 <_strerror_r+0x2f8>)
 800a95c:	e7c5      	b.n	800a8ea <_strerror_r+0x132>
 800a95e:	4b55      	ldr	r3, [pc, #340]	; (800aab4 <_strerror_r+0x2fc>)
 800a960:	e7c3      	b.n	800a8ea <_strerror_r+0x132>
 800a962:	4b55      	ldr	r3, [pc, #340]	; (800aab8 <_strerror_r+0x300>)
 800a964:	e7c1      	b.n	800a8ea <_strerror_r+0x132>
 800a966:	4b55      	ldr	r3, [pc, #340]	; (800aabc <_strerror_r+0x304>)
 800a968:	e7bf      	b.n	800a8ea <_strerror_r+0x132>
 800a96a:	4b55      	ldr	r3, [pc, #340]	; (800aac0 <_strerror_r+0x308>)
 800a96c:	e7bd      	b.n	800a8ea <_strerror_r+0x132>
 800a96e:	4b55      	ldr	r3, [pc, #340]	; (800aac4 <_strerror_r+0x30c>)
 800a970:	e7bb      	b.n	800a8ea <_strerror_r+0x132>
 800a972:	4b55      	ldr	r3, [pc, #340]	; (800aac8 <_strerror_r+0x310>)
 800a974:	e7b9      	b.n	800a8ea <_strerror_r+0x132>
 800a976:	4b55      	ldr	r3, [pc, #340]	; (800aacc <_strerror_r+0x314>)
 800a978:	e7b7      	b.n	800a8ea <_strerror_r+0x132>
 800a97a:	4b55      	ldr	r3, [pc, #340]	; (800aad0 <_strerror_r+0x318>)
 800a97c:	e7b5      	b.n	800a8ea <_strerror_r+0x132>
 800a97e:	4b55      	ldr	r3, [pc, #340]	; (800aad4 <_strerror_r+0x31c>)
 800a980:	e7b3      	b.n	800a8ea <_strerror_r+0x132>
 800a982:	4b55      	ldr	r3, [pc, #340]	; (800aad8 <_strerror_r+0x320>)
 800a984:	e7b1      	b.n	800a8ea <_strerror_r+0x132>
 800a986:	4b55      	ldr	r3, [pc, #340]	; (800aadc <_strerror_r+0x324>)
 800a988:	e7af      	b.n	800a8ea <_strerror_r+0x132>
 800a98a:	4b55      	ldr	r3, [pc, #340]	; (800aae0 <_strerror_r+0x328>)
 800a98c:	e7ad      	b.n	800a8ea <_strerror_r+0x132>
 800a98e:	4b55      	ldr	r3, [pc, #340]	; (800aae4 <_strerror_r+0x32c>)
 800a990:	e7ab      	b.n	800a8ea <_strerror_r+0x132>
 800a992:	4b55      	ldr	r3, [pc, #340]	; (800aae8 <_strerror_r+0x330>)
 800a994:	e7a9      	b.n	800a8ea <_strerror_r+0x132>
 800a996:	4b55      	ldr	r3, [pc, #340]	; (800aaec <_strerror_r+0x334>)
 800a998:	e7a7      	b.n	800a8ea <_strerror_r+0x132>
 800a99a:	4b55      	ldr	r3, [pc, #340]	; (800aaf0 <_strerror_r+0x338>)
 800a99c:	e7a5      	b.n	800a8ea <_strerror_r+0x132>
 800a99e:	4b55      	ldr	r3, [pc, #340]	; (800aaf4 <_strerror_r+0x33c>)
 800a9a0:	e7a3      	b.n	800a8ea <_strerror_r+0x132>
 800a9a2:	4b55      	ldr	r3, [pc, #340]	; (800aaf8 <_strerror_r+0x340>)
 800a9a4:	e7a1      	b.n	800a8ea <_strerror_r+0x132>
 800a9a6:	4b55      	ldr	r3, [pc, #340]	; (800aafc <_strerror_r+0x344>)
 800a9a8:	e79f      	b.n	800a8ea <_strerror_r+0x132>
 800a9aa:	4b55      	ldr	r3, [pc, #340]	; (800ab00 <_strerror_r+0x348>)
 800a9ac:	e79d      	b.n	800a8ea <_strerror_r+0x132>
 800a9ae:	4b55      	ldr	r3, [pc, #340]	; (800ab04 <_strerror_r+0x34c>)
 800a9b0:	e79b      	b.n	800a8ea <_strerror_r+0x132>
 800a9b2:	4b55      	ldr	r3, [pc, #340]	; (800ab08 <_strerror_r+0x350>)
 800a9b4:	e799      	b.n	800a8ea <_strerror_r+0x132>
 800a9b6:	4b55      	ldr	r3, [pc, #340]	; (800ab0c <_strerror_r+0x354>)
 800a9b8:	e797      	b.n	800a8ea <_strerror_r+0x132>
 800a9ba:	4b55      	ldr	r3, [pc, #340]	; (800ab10 <_strerror_r+0x358>)
 800a9bc:	e795      	b.n	800a8ea <_strerror_r+0x132>
 800a9be:	4b55      	ldr	r3, [pc, #340]	; (800ab14 <_strerror_r+0x35c>)
 800a9c0:	e793      	b.n	800a8ea <_strerror_r+0x132>
 800a9c2:	4b55      	ldr	r3, [pc, #340]	; (800ab18 <_strerror_r+0x360>)
 800a9c4:	e791      	b.n	800a8ea <_strerror_r+0x132>
 800a9c6:	4b55      	ldr	r3, [pc, #340]	; (800ab1c <_strerror_r+0x364>)
 800a9c8:	e78f      	b.n	800a8ea <_strerror_r+0x132>
 800a9ca:	4b55      	ldr	r3, [pc, #340]	; (800ab20 <_strerror_r+0x368>)
 800a9cc:	e78d      	b.n	800a8ea <_strerror_r+0x132>
 800a9ce:	4b55      	ldr	r3, [pc, #340]	; (800ab24 <_strerror_r+0x36c>)
 800a9d0:	e78b      	b.n	800a8ea <_strerror_r+0x132>
 800a9d2:	4b55      	ldr	r3, [pc, #340]	; (800ab28 <_strerror_r+0x370>)
 800a9d4:	e789      	b.n	800a8ea <_strerror_r+0x132>
 800a9d6:	4b55      	ldr	r3, [pc, #340]	; (800ab2c <_strerror_r+0x374>)
 800a9d8:	e787      	b.n	800a8ea <_strerror_r+0x132>
 800a9da:	4b55      	ldr	r3, [pc, #340]	; (800ab30 <_strerror_r+0x378>)
 800a9dc:	e785      	b.n	800a8ea <_strerror_r+0x132>
 800a9de:	4b55      	ldr	r3, [pc, #340]	; (800ab34 <_strerror_r+0x37c>)
 800a9e0:	e783      	b.n	800a8ea <_strerror_r+0x132>
 800a9e2:	4b55      	ldr	r3, [pc, #340]	; (800ab38 <_strerror_r+0x380>)
 800a9e4:	e781      	b.n	800a8ea <_strerror_r+0x132>
 800a9e6:	4b55      	ldr	r3, [pc, #340]	; (800ab3c <_strerror_r+0x384>)
 800a9e8:	e77f      	b.n	800a8ea <_strerror_r+0x132>
 800a9ea:	4b55      	ldr	r3, [pc, #340]	; (800ab40 <_strerror_r+0x388>)
 800a9ec:	e77d      	b.n	800a8ea <_strerror_r+0x132>
 800a9ee:	4b55      	ldr	r3, [pc, #340]	; (800ab44 <_strerror_r+0x38c>)
 800a9f0:	e77b      	b.n	800a8ea <_strerror_r+0x132>
 800a9f2:	4b55      	ldr	r3, [pc, #340]	; (800ab48 <_strerror_r+0x390>)
 800a9f4:	e779      	b.n	800a8ea <_strerror_r+0x132>
 800a9f6:	4b55      	ldr	r3, [pc, #340]	; (800ab4c <_strerror_r+0x394>)
 800a9f8:	e777      	b.n	800a8ea <_strerror_r+0x132>
 800a9fa:	4b55      	ldr	r3, [pc, #340]	; (800ab50 <_strerror_r+0x398>)
 800a9fc:	e775      	b.n	800a8ea <_strerror_r+0x132>
 800a9fe:	4b55      	ldr	r3, [pc, #340]	; (800ab54 <_strerror_r+0x39c>)
 800aa00:	e773      	b.n	800a8ea <_strerror_r+0x132>
 800aa02:	4b55      	ldr	r3, [pc, #340]	; (800ab58 <_strerror_r+0x3a0>)
 800aa04:	e771      	b.n	800a8ea <_strerror_r+0x132>
 800aa06:	4b55      	ldr	r3, [pc, #340]	; (800ab5c <_strerror_r+0x3a4>)
 800aa08:	e76f      	b.n	800a8ea <_strerror_r+0x132>
 800aa0a:	4b55      	ldr	r3, [pc, #340]	; (800ab60 <_strerror_r+0x3a8>)
 800aa0c:	e76d      	b.n	800a8ea <_strerror_r+0x132>
 800aa0e:	4b55      	ldr	r3, [pc, #340]	; (800ab64 <_strerror_r+0x3ac>)
 800aa10:	e76b      	b.n	800a8ea <_strerror_r+0x132>
 800aa12:	4b55      	ldr	r3, [pc, #340]	; (800ab68 <_strerror_r+0x3b0>)
 800aa14:	e769      	b.n	800a8ea <_strerror_r+0x132>
 800aa16:	4b55      	ldr	r3, [pc, #340]	; (800ab6c <_strerror_r+0x3b4>)
 800aa18:	e767      	b.n	800a8ea <_strerror_r+0x132>
 800aa1a:	4b55      	ldr	r3, [pc, #340]	; (800ab70 <_strerror_r+0x3b8>)
 800aa1c:	e765      	b.n	800a8ea <_strerror_r+0x132>
 800aa1e:	4b55      	ldr	r3, [pc, #340]	; (800ab74 <_strerror_r+0x3bc>)
 800aa20:	e763      	b.n	800a8ea <_strerror_r+0x132>
 800aa22:	4b55      	ldr	r3, [pc, #340]	; (800ab78 <_strerror_r+0x3c0>)
 800aa24:	e761      	b.n	800a8ea <_strerror_r+0x132>
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	bf14      	ite	ne
 800aa2a:	461a      	movne	r2, r3
 800aa2c:	4622      	moveq	r2, r4
 800aa2e:	f000 f8ce 	bl	800abce <_user_strerror>
 800aa32:	4b52      	ldr	r3, [pc, #328]	; (800ab7c <_strerror_r+0x3c4>)
 800aa34:	2800      	cmp	r0, #0
 800aa36:	bf18      	it	ne
 800aa38:	4603      	movne	r3, r0
 800aa3a:	e756      	b.n	800a8ea <_strerror_r+0x132>
 800aa3c:	4b50      	ldr	r3, [pc, #320]	; (800ab80 <_strerror_r+0x3c8>)
 800aa3e:	e754      	b.n	800a8ea <_strerror_r+0x132>
 800aa40:	0800e3d5 	.word	0x0800e3d5
 800aa44:	0800e3df 	.word	0x0800e3df
 800aa48:	0800e3f9 	.word	0x0800e3f9
 800aa4c:	0800e409 	.word	0x0800e409
 800aa50:	0800e421 	.word	0x0800e421
 800aa54:	0800e42b 	.word	0x0800e42b
 800aa58:	0800e445 	.word	0x0800e445
 800aa5c:	0800e457 	.word	0x0800e457
 800aa60:	0800e469 	.word	0x0800e469
 800aa64:	0800e482 	.word	0x0800e482
 800aa68:	0800e492 	.word	0x0800e492
 800aa6c:	0800e49e 	.word	0x0800e49e
 800aa70:	0800e4bb 	.word	0x0800e4bb
 800aa74:	0800e4cd 	.word	0x0800e4cd
 800aa78:	0800e4de 	.word	0x0800e4de
 800aa7c:	0800e4f0 	.word	0x0800e4f0
 800aa80:	0800e4fc 	.word	0x0800e4fc
 800aa84:	0800e514 	.word	0x0800e514
 800aa88:	0800e520 	.word	0x0800e520
 800aa8c:	0800e532 	.word	0x0800e532
 800aa90:	0800e541 	.word	0x0800e541
 800aa94:	0800e551 	.word	0x0800e551
 800aa98:	0800e55e 	.word	0x0800e55e
 800aa9c:	0800e57d 	.word	0x0800e57d
 800aaa0:	0800e58c 	.word	0x0800e58c
 800aaa4:	0800e59d 	.word	0x0800e59d
 800aaa8:	0800e5c1 	.word	0x0800e5c1
 800aaac:	0800e5df 	.word	0x0800e5df
 800aab0:	0800e5fd 	.word	0x0800e5fd
 800aab4:	0800e61d 	.word	0x0800e61d
 800aab8:	0800e634 	.word	0x0800e634
 800aabc:	0800e643 	.word	0x0800e643
 800aac0:	0800e652 	.word	0x0800e652
 800aac4:	0800e666 	.word	0x0800e666
 800aac8:	0800e67e 	.word	0x0800e67e
 800aacc:	0800e68c 	.word	0x0800e68c
 800aad0:	0800e699 	.word	0x0800e699
 800aad4:	0800e6af 	.word	0x0800e6af
 800aad8:	0800e6be 	.word	0x0800e6be
 800aadc:	0800e6ca 	.word	0x0800e6ca
 800aae0:	0800e6f9 	.word	0x0800e6f9
 800aae4:	0800e70a 	.word	0x0800e70a
 800aae8:	0800e725 	.word	0x0800e725
 800aaec:	0800e738 	.word	0x0800e738
 800aaf0:	0800e74e 	.word	0x0800e74e
 800aaf4:	0800e757 	.word	0x0800e757
 800aaf8:	0800e76e 	.word	0x0800e76e
 800aafc:	0800e776 	.word	0x0800e776
 800ab00:	0800e783 	.word	0x0800e783
 800ab04:	0800e798 	.word	0x0800e798
 800ab08:	0800e7ac 	.word	0x0800e7ac
 800ab0c:	0800e7c4 	.word	0x0800e7c4
 800ab10:	0800e7d3 	.word	0x0800e7d3
 800ab14:	0800e7e4 	.word	0x0800e7e4
 800ab18:	0800e7f7 	.word	0x0800e7f7
 800ab1c:	0800e803 	.word	0x0800e803
 800ab20:	0800e81c 	.word	0x0800e81c
 800ab24:	0800e830 	.word	0x0800e830
 800ab28:	0800e84b 	.word	0x0800e84b
 800ab2c:	0800e863 	.word	0x0800e863
 800ab30:	0800e87d 	.word	0x0800e87d
 800ab34:	0800e885 	.word	0x0800e885
 800ab38:	0800e8b5 	.word	0x0800e8b5
 800ab3c:	0800e8d4 	.word	0x0800e8d4
 800ab40:	0800e8f3 	.word	0x0800e8f3
 800ab44:	0800e90a 	.word	0x0800e90a
 800ab48:	0800e91d 	.word	0x0800e91d
 800ab4c:	0800e936 	.word	0x0800e936
 800ab50:	0800e94d 	.word	0x0800e94d
 800ab54:	0800e963 	.word	0x0800e963
 800ab58:	0800e984 	.word	0x0800e984
 800ab5c:	0800e99c 	.word	0x0800e99c
 800ab60:	0800e9b8 	.word	0x0800e9b8
 800ab64:	0800e9cb 	.word	0x0800e9cb
 800ab68:	0800e9e1 	.word	0x0800e9e1
 800ab6c:	0800e9f5 	.word	0x0800e9f5
 800ab70:	0800ea17 	.word	0x0800ea17
 800ab74:	0800ea3d 	.word	0x0800ea3d
 800ab78:	0800ea4e 	.word	0x0800ea4e
 800ab7c:	0800ed00 	.word	0x0800ed00
 800ab80:	0800e3cd 	.word	0x0800e3cd

0800ab84 <strncmp>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	b16a      	cbz	r2, 800aba4 <strncmp+0x20>
 800ab88:	3901      	subs	r1, #1
 800ab8a:	1884      	adds	r4, r0, r2
 800ab8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d103      	bne.n	800aba0 <strncmp+0x1c>
 800ab98:	42a0      	cmp	r0, r4
 800ab9a:	d001      	beq.n	800aba0 <strncmp+0x1c>
 800ab9c:	2a00      	cmp	r2, #0
 800ab9e:	d1f5      	bne.n	800ab8c <strncmp+0x8>
 800aba0:	1ad0      	subs	r0, r2, r3
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	4610      	mov	r0, r2
 800aba6:	e7fc      	b.n	800aba2 <strncmp+0x1e>

0800aba8 <strncpy>:
 800aba8:	4603      	mov	r3, r0
 800abaa:	b510      	push	{r4, lr}
 800abac:	3901      	subs	r1, #1
 800abae:	b132      	cbz	r2, 800abbe <strncpy+0x16>
 800abb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800abb4:	3a01      	subs	r2, #1
 800abb6:	f803 4b01 	strb.w	r4, [r3], #1
 800abba:	2c00      	cmp	r4, #0
 800abbc:	d1f7      	bne.n	800abae <strncpy+0x6>
 800abbe:	2100      	movs	r1, #0
 800abc0:	441a      	add	r2, r3
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d100      	bne.n	800abc8 <strncpy+0x20>
 800abc6:	bd10      	pop	{r4, pc}
 800abc8:	f803 1b01 	strb.w	r1, [r3], #1
 800abcc:	e7f9      	b.n	800abc2 <strncpy+0x1a>

0800abce <_user_strerror>:
 800abce:	2000      	movs	r0, #0
 800abd0:	4770      	bx	lr
	...

0800abd4 <_localeconv_r>:
 800abd4:	4800      	ldr	r0, [pc, #0]	; (800abd8 <_localeconv_r+0x4>)
 800abd6:	4770      	bx	lr
 800abd8:	20000124 	.word	0x20000124

0800abdc <_close_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	2300      	movs	r3, #0
 800abe0:	4d05      	ldr	r5, [pc, #20]	; (800abf8 <_close_r+0x1c>)
 800abe2:	4604      	mov	r4, r0
 800abe4:	4608      	mov	r0, r1
 800abe6:	602b      	str	r3, [r5, #0]
 800abe8:	f7f7 fa98 	bl	800211c <_close>
 800abec:	1c43      	adds	r3, r0, #1
 800abee:	d102      	bne.n	800abf6 <_close_r+0x1a>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	b103      	cbz	r3, 800abf6 <_close_r+0x1a>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
 800abf8:	200006f8 	.word	0x200006f8

0800abfc <_lseek_r>:
 800abfc:	b538      	push	{r3, r4, r5, lr}
 800abfe:	4604      	mov	r4, r0
 800ac00:	4608      	mov	r0, r1
 800ac02:	4611      	mov	r1, r2
 800ac04:	2200      	movs	r2, #0
 800ac06:	4d05      	ldr	r5, [pc, #20]	; (800ac1c <_lseek_r+0x20>)
 800ac08:	602a      	str	r2, [r5, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	f7f7 faaa 	bl	8002164 <_lseek>
 800ac10:	1c43      	adds	r3, r0, #1
 800ac12:	d102      	bne.n	800ac1a <_lseek_r+0x1e>
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	b103      	cbz	r3, 800ac1a <_lseek_r+0x1e>
 800ac18:	6023      	str	r3, [r4, #0]
 800ac1a:	bd38      	pop	{r3, r4, r5, pc}
 800ac1c:	200006f8 	.word	0x200006f8

0800ac20 <_read_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4604      	mov	r4, r0
 800ac24:	4608      	mov	r0, r1
 800ac26:	4611      	mov	r1, r2
 800ac28:	2200      	movs	r2, #0
 800ac2a:	4d05      	ldr	r5, [pc, #20]	; (800ac40 <_read_r+0x20>)
 800ac2c:	602a      	str	r2, [r5, #0]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	f7f7 fa3b 	bl	80020aa <_read>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d102      	bne.n	800ac3e <_read_r+0x1e>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	b103      	cbz	r3, 800ac3e <_read_r+0x1e>
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	200006f8 	.word	0x200006f8

0800ac44 <_sbrk_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	2300      	movs	r3, #0
 800ac48:	4d05      	ldr	r5, [pc, #20]	; (800ac60 <_sbrk_r+0x1c>)
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	4608      	mov	r0, r1
 800ac4e:	602b      	str	r3, [r5, #0]
 800ac50:	f7f7 fa94 	bl	800217c <_sbrk>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d102      	bne.n	800ac5e <_sbrk_r+0x1a>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	b103      	cbz	r3, 800ac5e <_sbrk_r+0x1a>
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	bd38      	pop	{r3, r4, r5, pc}
 800ac60:	200006f8 	.word	0x200006f8

0800ac64 <_write_r>:
 800ac64:	b538      	push	{r3, r4, r5, lr}
 800ac66:	4604      	mov	r4, r0
 800ac68:	4608      	mov	r0, r1
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	4d05      	ldr	r5, [pc, #20]	; (800ac84 <_write_r+0x20>)
 800ac70:	602a      	str	r2, [r5, #0]
 800ac72:	461a      	mov	r2, r3
 800ac74:	f7f7 fa36 	bl	80020e4 <_write>
 800ac78:	1c43      	adds	r3, r0, #1
 800ac7a:	d102      	bne.n	800ac82 <_write_r+0x1e>
 800ac7c:	682b      	ldr	r3, [r5, #0]
 800ac7e:	b103      	cbz	r3, 800ac82 <_write_r+0x1e>
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	bd38      	pop	{r3, r4, r5, pc}
 800ac84:	200006f8 	.word	0x200006f8

0800ac88 <__errno>:
 800ac88:	4b01      	ldr	r3, [pc, #4]	; (800ac90 <__errno+0x8>)
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	200001ec 	.word	0x200001ec

0800ac94 <__libc_init_array>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	2600      	movs	r6, #0
 800ac98:	4d0c      	ldr	r5, [pc, #48]	; (800accc <__libc_init_array+0x38>)
 800ac9a:	4c0d      	ldr	r4, [pc, #52]	; (800acd0 <__libc_init_array+0x3c>)
 800ac9c:	1b64      	subs	r4, r4, r5
 800ac9e:	10a4      	asrs	r4, r4, #2
 800aca0:	42a6      	cmp	r6, r4
 800aca2:	d109      	bne.n	800acb8 <__libc_init_array+0x24>
 800aca4:	f003 f9be 	bl	800e024 <_init>
 800aca8:	2600      	movs	r6, #0
 800acaa:	4d0a      	ldr	r5, [pc, #40]	; (800acd4 <__libc_init_array+0x40>)
 800acac:	4c0a      	ldr	r4, [pc, #40]	; (800acd8 <__libc_init_array+0x44>)
 800acae:	1b64      	subs	r4, r4, r5
 800acb0:	10a4      	asrs	r4, r4, #2
 800acb2:	42a6      	cmp	r6, r4
 800acb4:	d105      	bne.n	800acc2 <__libc_init_array+0x2e>
 800acb6:	bd70      	pop	{r4, r5, r6, pc}
 800acb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800acbc:	4798      	blx	r3
 800acbe:	3601      	adds	r6, #1
 800acc0:	e7ee      	b.n	800aca0 <__libc_init_array+0xc>
 800acc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800acc6:	4798      	blx	r3
 800acc8:	3601      	adds	r6, #1
 800acca:	e7f2      	b.n	800acb2 <__libc_init_array+0x1e>
 800accc:	0800f0dc 	.word	0x0800f0dc
 800acd0:	0800f0dc 	.word	0x0800f0dc
 800acd4:	0800f0dc 	.word	0x0800f0dc
 800acd8:	0800f0e0 	.word	0x0800f0e0

0800acdc <__retarget_lock_init_recursive>:
 800acdc:	4770      	bx	lr

0800acde <__retarget_lock_acquire_recursive>:
 800acde:	4770      	bx	lr

0800ace0 <__retarget_lock_release_recursive>:
 800ace0:	4770      	bx	lr

0800ace2 <strcpy>:
 800ace2:	4603      	mov	r3, r0
 800ace4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ace8:	f803 2b01 	strb.w	r2, [r3], #1
 800acec:	2a00      	cmp	r2, #0
 800acee:	d1f9      	bne.n	800ace4 <strcpy+0x2>
 800acf0:	4770      	bx	lr

0800acf2 <memchr>:
 800acf2:	4603      	mov	r3, r0
 800acf4:	b510      	push	{r4, lr}
 800acf6:	b2c9      	uxtb	r1, r1
 800acf8:	4402      	add	r2, r0
 800acfa:	4293      	cmp	r3, r2
 800acfc:	4618      	mov	r0, r3
 800acfe:	d101      	bne.n	800ad04 <memchr+0x12>
 800ad00:	2000      	movs	r0, #0
 800ad02:	e003      	b.n	800ad0c <memchr+0x1a>
 800ad04:	7804      	ldrb	r4, [r0, #0]
 800ad06:	3301      	adds	r3, #1
 800ad08:	428c      	cmp	r4, r1
 800ad0a:	d1f6      	bne.n	800acfa <memchr+0x8>
 800ad0c:	bd10      	pop	{r4, pc}

0800ad0e <memcpy>:
 800ad0e:	440a      	add	r2, r1
 800ad10:	4291      	cmp	r1, r2
 800ad12:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad16:	d100      	bne.n	800ad1a <memcpy+0xc>
 800ad18:	4770      	bx	lr
 800ad1a:	b510      	push	{r4, lr}
 800ad1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad20:	4291      	cmp	r1, r2
 800ad22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad26:	d1f9      	bne.n	800ad1c <memcpy+0xe>
 800ad28:	bd10      	pop	{r4, pc}
	...

0800ad2c <nan>:
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	4901      	ldr	r1, [pc, #4]	; (800ad34 <nan+0x8>)
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	7ff80000 	.word	0x7ff80000

0800ad38 <quorem>:
 800ad38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	6903      	ldr	r3, [r0, #16]
 800ad3e:	690c      	ldr	r4, [r1, #16]
 800ad40:	4607      	mov	r7, r0
 800ad42:	42a3      	cmp	r3, r4
 800ad44:	db7f      	blt.n	800ae46 <quorem+0x10e>
 800ad46:	3c01      	subs	r4, #1
 800ad48:	f100 0514 	add.w	r5, r0, #20
 800ad4c:	f101 0814 	add.w	r8, r1, #20
 800ad50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	429a      	cmp	r2, r3
 800ad62:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad66:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad6e:	d331      	bcc.n	800add4 <quorem+0x9c>
 800ad70:	f04f 0e00 	mov.w	lr, #0
 800ad74:	4640      	mov	r0, r8
 800ad76:	46ac      	mov	ip, r5
 800ad78:	46f2      	mov	sl, lr
 800ad7a:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad7e:	b293      	uxth	r3, r2
 800ad80:	fb06 e303 	mla	r3, r6, r3, lr
 800ad84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad88:	0c1a      	lsrs	r2, r3, #16
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	fb06 220e 	mla	r2, r6, lr, r2
 800ad90:	ebaa 0303 	sub.w	r3, sl, r3
 800ad94:	f8dc a000 	ldr.w	sl, [ip]
 800ad98:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad9c:	fa1f fa8a 	uxth.w	sl, sl
 800ada0:	4453      	add	r3, sl
 800ada2:	f8dc a000 	ldr.w	sl, [ip]
 800ada6:	b292      	uxth	r2, r2
 800ada8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800adac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adb6:	4581      	cmp	r9, r0
 800adb8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800adbc:	f84c 3b04 	str.w	r3, [ip], #4
 800adc0:	d2db      	bcs.n	800ad7a <quorem+0x42>
 800adc2:	f855 300b 	ldr.w	r3, [r5, fp]
 800adc6:	b92b      	cbnz	r3, 800add4 <quorem+0x9c>
 800adc8:	9b01      	ldr	r3, [sp, #4]
 800adca:	3b04      	subs	r3, #4
 800adcc:	429d      	cmp	r5, r3
 800adce:	461a      	mov	r2, r3
 800add0:	d32d      	bcc.n	800ae2e <quorem+0xf6>
 800add2:	613c      	str	r4, [r7, #16]
 800add4:	4638      	mov	r0, r7
 800add6:	f001 fc97 	bl	800c708 <__mcmp>
 800adda:	2800      	cmp	r0, #0
 800addc:	db23      	blt.n	800ae26 <quorem+0xee>
 800adde:	4629      	mov	r1, r5
 800ade0:	2000      	movs	r0, #0
 800ade2:	3601      	adds	r6, #1
 800ade4:	f858 2b04 	ldr.w	r2, [r8], #4
 800ade8:	f8d1 c000 	ldr.w	ip, [r1]
 800adec:	b293      	uxth	r3, r2
 800adee:	1ac3      	subs	r3, r0, r3
 800adf0:	0c12      	lsrs	r2, r2, #16
 800adf2:	fa1f f08c 	uxth.w	r0, ip
 800adf6:	4403      	add	r3, r0
 800adf8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800adfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae06:	45c1      	cmp	r9, r8
 800ae08:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae0c:	f841 3b04 	str.w	r3, [r1], #4
 800ae10:	d2e8      	bcs.n	800ade4 <quorem+0xac>
 800ae12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae1a:	b922      	cbnz	r2, 800ae26 <quorem+0xee>
 800ae1c:	3b04      	subs	r3, #4
 800ae1e:	429d      	cmp	r5, r3
 800ae20:	461a      	mov	r2, r3
 800ae22:	d30a      	bcc.n	800ae3a <quorem+0x102>
 800ae24:	613c      	str	r4, [r7, #16]
 800ae26:	4630      	mov	r0, r6
 800ae28:	b003      	add	sp, #12
 800ae2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2e:	6812      	ldr	r2, [r2, #0]
 800ae30:	3b04      	subs	r3, #4
 800ae32:	2a00      	cmp	r2, #0
 800ae34:	d1cd      	bne.n	800add2 <quorem+0x9a>
 800ae36:	3c01      	subs	r4, #1
 800ae38:	e7c8      	b.n	800adcc <quorem+0x94>
 800ae3a:	6812      	ldr	r2, [r2, #0]
 800ae3c:	3b04      	subs	r3, #4
 800ae3e:	2a00      	cmp	r2, #0
 800ae40:	d1f0      	bne.n	800ae24 <quorem+0xec>
 800ae42:	3c01      	subs	r4, #1
 800ae44:	e7eb      	b.n	800ae1e <quorem+0xe6>
 800ae46:	2000      	movs	r0, #0
 800ae48:	e7ee      	b.n	800ae28 <quorem+0xf0>
 800ae4a:	0000      	movs	r0, r0
 800ae4c:	0000      	movs	r0, r0
	...

0800ae50 <_dtoa_r>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	4616      	mov	r6, r2
 800ae56:	461f      	mov	r7, r3
 800ae58:	69c4      	ldr	r4, [r0, #28]
 800ae5a:	b099      	sub	sp, #100	; 0x64
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ae62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ae66:	b974      	cbnz	r4, 800ae86 <_dtoa_r+0x36>
 800ae68:	2010      	movs	r0, #16
 800ae6a:	f7fd fc67 	bl	800873c <malloc>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	61e8      	str	r0, [r5, #28]
 800ae72:	b920      	cbnz	r0, 800ae7e <_dtoa_r+0x2e>
 800ae74:	21ef      	movs	r1, #239	; 0xef
 800ae76:	4bac      	ldr	r3, [pc, #688]	; (800b128 <_dtoa_r+0x2d8>)
 800ae78:	48ac      	ldr	r0, [pc, #688]	; (800b12c <_dtoa_r+0x2dc>)
 800ae7a:	f002 fa3f 	bl	800d2fc <__assert_func>
 800ae7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae82:	6004      	str	r4, [r0, #0]
 800ae84:	60c4      	str	r4, [r0, #12]
 800ae86:	69eb      	ldr	r3, [r5, #28]
 800ae88:	6819      	ldr	r1, [r3, #0]
 800ae8a:	b151      	cbz	r1, 800aea2 <_dtoa_r+0x52>
 800ae8c:	685a      	ldr	r2, [r3, #4]
 800ae8e:	2301      	movs	r3, #1
 800ae90:	4093      	lsls	r3, r2
 800ae92:	604a      	str	r2, [r1, #4]
 800ae94:	608b      	str	r3, [r1, #8]
 800ae96:	4628      	mov	r0, r5
 800ae98:	f001 f9b2 	bl	800c200 <_Bfree>
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	69eb      	ldr	r3, [r5, #28]
 800aea0:	601a      	str	r2, [r3, #0]
 800aea2:	1e3b      	subs	r3, r7, #0
 800aea4:	bfaf      	iteee	ge
 800aea6:	2300      	movge	r3, #0
 800aea8:	2201      	movlt	r2, #1
 800aeaa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aeae:	9305      	strlt	r3, [sp, #20]
 800aeb0:	bfa8      	it	ge
 800aeb2:	f8c8 3000 	strge.w	r3, [r8]
 800aeb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800aeba:	4b9d      	ldr	r3, [pc, #628]	; (800b130 <_dtoa_r+0x2e0>)
 800aebc:	bfb8      	it	lt
 800aebe:	f8c8 2000 	strlt.w	r2, [r8]
 800aec2:	ea33 0309 	bics.w	r3, r3, r9
 800aec6:	d119      	bne.n	800aefc <_dtoa_r+0xac>
 800aec8:	f242 730f 	movw	r3, #9999	; 0x270f
 800aecc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aed4:	4333      	orrs	r3, r6
 800aed6:	f000 8589 	beq.w	800b9ec <_dtoa_r+0xb9c>
 800aeda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aedc:	b953      	cbnz	r3, 800aef4 <_dtoa_r+0xa4>
 800aede:	4b95      	ldr	r3, [pc, #596]	; (800b134 <_dtoa_r+0x2e4>)
 800aee0:	e023      	b.n	800af2a <_dtoa_r+0xda>
 800aee2:	4b95      	ldr	r3, [pc, #596]	; (800b138 <_dtoa_r+0x2e8>)
 800aee4:	9303      	str	r3, [sp, #12]
 800aee6:	3308      	adds	r3, #8
 800aee8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aeea:	6013      	str	r3, [r2, #0]
 800aeec:	9803      	ldr	r0, [sp, #12]
 800aeee:	b019      	add	sp, #100	; 0x64
 800aef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef4:	4b8f      	ldr	r3, [pc, #572]	; (800b134 <_dtoa_r+0x2e4>)
 800aef6:	9303      	str	r3, [sp, #12]
 800aef8:	3303      	adds	r3, #3
 800aefa:	e7f5      	b.n	800aee8 <_dtoa_r+0x98>
 800aefc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800af00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800af04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af08:	2200      	movs	r2, #0
 800af0a:	2300      	movs	r3, #0
 800af0c:	f7f5 fd64 	bl	80009d8 <__aeabi_dcmpeq>
 800af10:	4680      	mov	r8, r0
 800af12:	b160      	cbz	r0, 800af2e <_dtoa_r+0xde>
 800af14:	2301      	movs	r3, #1
 800af16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af18:	6013      	str	r3, [r2, #0]
 800af1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f000 8562 	beq.w	800b9e6 <_dtoa_r+0xb96>
 800af22:	4b86      	ldr	r3, [pc, #536]	; (800b13c <_dtoa_r+0x2ec>)
 800af24:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800af26:	6013      	str	r3, [r2, #0]
 800af28:	3b01      	subs	r3, #1
 800af2a:	9303      	str	r3, [sp, #12]
 800af2c:	e7de      	b.n	800aeec <_dtoa_r+0x9c>
 800af2e:	ab16      	add	r3, sp, #88	; 0x58
 800af30:	9301      	str	r3, [sp, #4]
 800af32:	ab17      	add	r3, sp, #92	; 0x5c
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	4628      	mov	r0, r5
 800af38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800af3c:	f001 fcf4 	bl	800c928 <__d2b>
 800af40:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800af44:	4682      	mov	sl, r0
 800af46:	2c00      	cmp	r4, #0
 800af48:	d07e      	beq.n	800b048 <_dtoa_r+0x1f8>
 800af4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af50:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800af54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af58:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800af5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800af60:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800af64:	4619      	mov	r1, r3
 800af66:	2200      	movs	r2, #0
 800af68:	4b75      	ldr	r3, [pc, #468]	; (800b140 <_dtoa_r+0x2f0>)
 800af6a:	f7f5 f915 	bl	8000198 <__aeabi_dsub>
 800af6e:	a368      	add	r3, pc, #416	; (adr r3, 800b110 <_dtoa_r+0x2c0>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 fac8 	bl	8000508 <__aeabi_dmul>
 800af78:	a367      	add	r3, pc, #412	; (adr r3, 800b118 <_dtoa_r+0x2c8>)
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	f7f5 f90d 	bl	800019c <__adddf3>
 800af82:	4606      	mov	r6, r0
 800af84:	4620      	mov	r0, r4
 800af86:	460f      	mov	r7, r1
 800af88:	f7f5 fa54 	bl	8000434 <__aeabi_i2d>
 800af8c:	a364      	add	r3, pc, #400	; (adr r3, 800b120 <_dtoa_r+0x2d0>)
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	f7f5 fab9 	bl	8000508 <__aeabi_dmul>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	4630      	mov	r0, r6
 800af9c:	4639      	mov	r1, r7
 800af9e:	f7f5 f8fd 	bl	800019c <__adddf3>
 800afa2:	4606      	mov	r6, r0
 800afa4:	460f      	mov	r7, r1
 800afa6:	f7f5 fd5f 	bl	8000a68 <__aeabi_d2iz>
 800afaa:	2200      	movs	r2, #0
 800afac:	4683      	mov	fp, r0
 800afae:	2300      	movs	r3, #0
 800afb0:	4630      	mov	r0, r6
 800afb2:	4639      	mov	r1, r7
 800afb4:	f7f5 fd1a 	bl	80009ec <__aeabi_dcmplt>
 800afb8:	b148      	cbz	r0, 800afce <_dtoa_r+0x17e>
 800afba:	4658      	mov	r0, fp
 800afbc:	f7f5 fa3a 	bl	8000434 <__aeabi_i2d>
 800afc0:	4632      	mov	r2, r6
 800afc2:	463b      	mov	r3, r7
 800afc4:	f7f5 fd08 	bl	80009d8 <__aeabi_dcmpeq>
 800afc8:	b908      	cbnz	r0, 800afce <_dtoa_r+0x17e>
 800afca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800afce:	f1bb 0f16 	cmp.w	fp, #22
 800afd2:	d857      	bhi.n	800b084 <_dtoa_r+0x234>
 800afd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afd8:	4b5a      	ldr	r3, [pc, #360]	; (800b144 <_dtoa_r+0x2f4>)
 800afda:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800afde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe2:	f7f5 fd03 	bl	80009ec <__aeabi_dcmplt>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d04e      	beq.n	800b088 <_dtoa_r+0x238>
 800afea:	2300      	movs	r3, #0
 800afec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aff0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aff2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aff4:	1b1b      	subs	r3, r3, r4
 800aff6:	1e5a      	subs	r2, r3, #1
 800aff8:	bf46      	itte	mi
 800affa:	f1c3 0901 	rsbmi	r9, r3, #1
 800affe:	2300      	movmi	r3, #0
 800b000:	f04f 0900 	movpl.w	r9, #0
 800b004:	9209      	str	r2, [sp, #36]	; 0x24
 800b006:	bf48      	it	mi
 800b008:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b00a:	f1bb 0f00 	cmp.w	fp, #0
 800b00e:	db3d      	blt.n	800b08c <_dtoa_r+0x23c>
 800b010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b012:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b016:	445b      	add	r3, fp
 800b018:	9309      	str	r3, [sp, #36]	; 0x24
 800b01a:	2300      	movs	r3, #0
 800b01c:	930a      	str	r3, [sp, #40]	; 0x28
 800b01e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b020:	2b09      	cmp	r3, #9
 800b022:	d867      	bhi.n	800b0f4 <_dtoa_r+0x2a4>
 800b024:	2b05      	cmp	r3, #5
 800b026:	bfc4      	itt	gt
 800b028:	3b04      	subgt	r3, #4
 800b02a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b02c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b02e:	bfc8      	it	gt
 800b030:	2400      	movgt	r4, #0
 800b032:	f1a3 0302 	sub.w	r3, r3, #2
 800b036:	bfd8      	it	le
 800b038:	2401      	movle	r4, #1
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	f200 8086 	bhi.w	800b14c <_dtoa_r+0x2fc>
 800b040:	e8df f003 	tbb	[pc, r3]
 800b044:	5637392c 	.word	0x5637392c
 800b048:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b04c:	441c      	add	r4, r3
 800b04e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b052:	2b20      	cmp	r3, #32
 800b054:	bfc1      	itttt	gt
 800b056:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b05a:	fa09 f903 	lslgt.w	r9, r9, r3
 800b05e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800b062:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b066:	bfd6      	itet	le
 800b068:	f1c3 0320 	rsble	r3, r3, #32
 800b06c:	ea49 0003 	orrgt.w	r0, r9, r3
 800b070:	fa06 f003 	lslle.w	r0, r6, r3
 800b074:	f7f5 f9ce 	bl	8000414 <__aeabi_ui2d>
 800b078:	2201      	movs	r2, #1
 800b07a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b07e:	3c01      	subs	r4, #1
 800b080:	9213      	str	r2, [sp, #76]	; 0x4c
 800b082:	e76f      	b.n	800af64 <_dtoa_r+0x114>
 800b084:	2301      	movs	r3, #1
 800b086:	e7b3      	b.n	800aff0 <_dtoa_r+0x1a0>
 800b088:	900f      	str	r0, [sp, #60]	; 0x3c
 800b08a:	e7b2      	b.n	800aff2 <_dtoa_r+0x1a2>
 800b08c:	f1cb 0300 	rsb	r3, fp, #0
 800b090:	930a      	str	r3, [sp, #40]	; 0x28
 800b092:	2300      	movs	r3, #0
 800b094:	eba9 090b 	sub.w	r9, r9, fp
 800b098:	930e      	str	r3, [sp, #56]	; 0x38
 800b09a:	e7c0      	b.n	800b01e <_dtoa_r+0x1ce>
 800b09c:	2300      	movs	r3, #0
 800b09e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	dc55      	bgt.n	800b152 <_dtoa_r+0x302>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	9306      	str	r3, [sp, #24]
 800b0ac:	9308      	str	r3, [sp, #32]
 800b0ae:	9223      	str	r2, [sp, #140]	; 0x8c
 800b0b0:	e00b      	b.n	800b0ca <_dtoa_r+0x27a>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e7f3      	b.n	800b09e <_dtoa_r+0x24e>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0bc:	445b      	add	r3, fp
 800b0be:	9306      	str	r3, [sp, #24]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	9308      	str	r3, [sp, #32]
 800b0c6:	bfb8      	it	lt
 800b0c8:	2301      	movlt	r3, #1
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	2204      	movs	r2, #4
 800b0ce:	69e8      	ldr	r0, [r5, #28]
 800b0d0:	f102 0614 	add.w	r6, r2, #20
 800b0d4:	429e      	cmp	r6, r3
 800b0d6:	d940      	bls.n	800b15a <_dtoa_r+0x30a>
 800b0d8:	6041      	str	r1, [r0, #4]
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f001 f850 	bl	800c180 <_Balloc>
 800b0e0:	9003      	str	r0, [sp, #12]
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d13c      	bne.n	800b160 <_dtoa_r+0x310>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	f240 11af 	movw	r1, #431	; 0x1af
 800b0ec:	4b16      	ldr	r3, [pc, #88]	; (800b148 <_dtoa_r+0x2f8>)
 800b0ee:	e6c3      	b.n	800ae78 <_dtoa_r+0x28>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e7e1      	b.n	800b0b8 <_dtoa_r+0x268>
 800b0f4:	2401      	movs	r4, #1
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	940b      	str	r4, [sp, #44]	; 0x2c
 800b0fa:	9322      	str	r3, [sp, #136]	; 0x88
 800b0fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b100:	2200      	movs	r2, #0
 800b102:	9306      	str	r3, [sp, #24]
 800b104:	9308      	str	r3, [sp, #32]
 800b106:	2312      	movs	r3, #18
 800b108:	e7d1      	b.n	800b0ae <_dtoa_r+0x25e>
 800b10a:	bf00      	nop
 800b10c:	f3af 8000 	nop.w
 800b110:	636f4361 	.word	0x636f4361
 800b114:	3fd287a7 	.word	0x3fd287a7
 800b118:	8b60c8b3 	.word	0x8b60c8b3
 800b11c:	3fc68a28 	.word	0x3fc68a28
 800b120:	509f79fb 	.word	0x509f79fb
 800b124:	3fd34413 	.word	0x3fd34413
 800b128:	0800ea78 	.word	0x0800ea78
 800b12c:	0800ea8f 	.word	0x0800ea8f
 800b130:	7ff00000 	.word	0x7ff00000
 800b134:	0800ea74 	.word	0x0800ea74
 800b138:	0800ea6b 	.word	0x0800ea6b
 800b13c:	0800e3aa 	.word	0x0800e3aa
 800b140:	3ff80000 	.word	0x3ff80000
 800b144:	0800ebe0 	.word	0x0800ebe0
 800b148:	0800eae7 	.word	0x0800eae7
 800b14c:	2301      	movs	r3, #1
 800b14e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b150:	e7d4      	b.n	800b0fc <_dtoa_r+0x2ac>
 800b152:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b154:	9306      	str	r3, [sp, #24]
 800b156:	9308      	str	r3, [sp, #32]
 800b158:	e7b7      	b.n	800b0ca <_dtoa_r+0x27a>
 800b15a:	3101      	adds	r1, #1
 800b15c:	0052      	lsls	r2, r2, #1
 800b15e:	e7b7      	b.n	800b0d0 <_dtoa_r+0x280>
 800b160:	69eb      	ldr	r3, [r5, #28]
 800b162:	9a03      	ldr	r2, [sp, #12]
 800b164:	601a      	str	r2, [r3, #0]
 800b166:	9b08      	ldr	r3, [sp, #32]
 800b168:	2b0e      	cmp	r3, #14
 800b16a:	f200 80a8 	bhi.w	800b2be <_dtoa_r+0x46e>
 800b16e:	2c00      	cmp	r4, #0
 800b170:	f000 80a5 	beq.w	800b2be <_dtoa_r+0x46e>
 800b174:	f1bb 0f00 	cmp.w	fp, #0
 800b178:	dd34      	ble.n	800b1e4 <_dtoa_r+0x394>
 800b17a:	4b9a      	ldr	r3, [pc, #616]	; (800b3e4 <_dtoa_r+0x594>)
 800b17c:	f00b 020f 	and.w	r2, fp, #15
 800b180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b184:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b188:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b18c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b190:	ea4f 142b 	mov.w	r4, fp, asr #4
 800b194:	d016      	beq.n	800b1c4 <_dtoa_r+0x374>
 800b196:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b19a:	4b93      	ldr	r3, [pc, #588]	; (800b3e8 <_dtoa_r+0x598>)
 800b19c:	2703      	movs	r7, #3
 800b19e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1a2:	f7f5 fadb 	bl	800075c <__aeabi_ddiv>
 800b1a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1aa:	f004 040f 	and.w	r4, r4, #15
 800b1ae:	4e8e      	ldr	r6, [pc, #568]	; (800b3e8 <_dtoa_r+0x598>)
 800b1b0:	b954      	cbnz	r4, 800b1c8 <_dtoa_r+0x378>
 800b1b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1ba:	f7f5 facf 	bl	800075c <__aeabi_ddiv>
 800b1be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1c2:	e029      	b.n	800b218 <_dtoa_r+0x3c8>
 800b1c4:	2702      	movs	r7, #2
 800b1c6:	e7f2      	b.n	800b1ae <_dtoa_r+0x35e>
 800b1c8:	07e1      	lsls	r1, r4, #31
 800b1ca:	d508      	bpl.n	800b1de <_dtoa_r+0x38e>
 800b1cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b1d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1d4:	f7f5 f998 	bl	8000508 <__aeabi_dmul>
 800b1d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b1dc:	3701      	adds	r7, #1
 800b1de:	1064      	asrs	r4, r4, #1
 800b1e0:	3608      	adds	r6, #8
 800b1e2:	e7e5      	b.n	800b1b0 <_dtoa_r+0x360>
 800b1e4:	f000 80a5 	beq.w	800b332 <_dtoa_r+0x4e2>
 800b1e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1ec:	f1cb 0400 	rsb	r4, fp, #0
 800b1f0:	4b7c      	ldr	r3, [pc, #496]	; (800b3e4 <_dtoa_r+0x594>)
 800b1f2:	f004 020f 	and.w	r2, r4, #15
 800b1f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f7f5 f983 	bl	8000508 <__aeabi_dmul>
 800b202:	2702      	movs	r7, #2
 800b204:	2300      	movs	r3, #0
 800b206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b20a:	4e77      	ldr	r6, [pc, #476]	; (800b3e8 <_dtoa_r+0x598>)
 800b20c:	1124      	asrs	r4, r4, #4
 800b20e:	2c00      	cmp	r4, #0
 800b210:	f040 8084 	bne.w	800b31c <_dtoa_r+0x4cc>
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1d2      	bne.n	800b1be <_dtoa_r+0x36e>
 800b218:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b21c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b222:	2b00      	cmp	r3, #0
 800b224:	f000 8087 	beq.w	800b336 <_dtoa_r+0x4e6>
 800b228:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b22c:	2200      	movs	r2, #0
 800b22e:	4b6f      	ldr	r3, [pc, #444]	; (800b3ec <_dtoa_r+0x59c>)
 800b230:	f7f5 fbdc 	bl	80009ec <__aeabi_dcmplt>
 800b234:	2800      	cmp	r0, #0
 800b236:	d07e      	beq.n	800b336 <_dtoa_r+0x4e6>
 800b238:	9b08      	ldr	r3, [sp, #32]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d07b      	beq.n	800b336 <_dtoa_r+0x4e6>
 800b23e:	9b06      	ldr	r3, [sp, #24]
 800b240:	2b00      	cmp	r3, #0
 800b242:	dd38      	ble.n	800b2b6 <_dtoa_r+0x466>
 800b244:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b248:	2200      	movs	r2, #0
 800b24a:	4b69      	ldr	r3, [pc, #420]	; (800b3f0 <_dtoa_r+0x5a0>)
 800b24c:	f7f5 f95c 	bl	8000508 <__aeabi_dmul>
 800b250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b254:	9c06      	ldr	r4, [sp, #24]
 800b256:	f10b 38ff 	add.w	r8, fp, #4294967295
 800b25a:	3701      	adds	r7, #1
 800b25c:	4638      	mov	r0, r7
 800b25e:	f7f5 f8e9 	bl	8000434 <__aeabi_i2d>
 800b262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b266:	f7f5 f94f 	bl	8000508 <__aeabi_dmul>
 800b26a:	2200      	movs	r2, #0
 800b26c:	4b61      	ldr	r3, [pc, #388]	; (800b3f4 <_dtoa_r+0x5a4>)
 800b26e:	f7f4 ff95 	bl	800019c <__adddf3>
 800b272:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b276:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b27a:	9611      	str	r6, [sp, #68]	; 0x44
 800b27c:	2c00      	cmp	r4, #0
 800b27e:	d15d      	bne.n	800b33c <_dtoa_r+0x4ec>
 800b280:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b284:	2200      	movs	r2, #0
 800b286:	4b5c      	ldr	r3, [pc, #368]	; (800b3f8 <_dtoa_r+0x5a8>)
 800b288:	f7f4 ff86 	bl	8000198 <__aeabi_dsub>
 800b28c:	4602      	mov	r2, r0
 800b28e:	460b      	mov	r3, r1
 800b290:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b294:	4633      	mov	r3, r6
 800b296:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b298:	f7f5 fbc6 	bl	8000a28 <__aeabi_dcmpgt>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	f040 8295 	bne.w	800b7cc <_dtoa_r+0x97c>
 800b2a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b2a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b2ac:	f7f5 fb9e 	bl	80009ec <__aeabi_dcmplt>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	f040 8289 	bne.w	800b7c8 <_dtoa_r+0x978>
 800b2b6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b2ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b2be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f2c0 8151 	blt.w	800b568 <_dtoa_r+0x718>
 800b2c6:	f1bb 0f0e 	cmp.w	fp, #14
 800b2ca:	f300 814d 	bgt.w	800b568 <_dtoa_r+0x718>
 800b2ce:	4b45      	ldr	r3, [pc, #276]	; (800b3e4 <_dtoa_r+0x594>)
 800b2d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b2d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b2d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b2dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f280 80da 	bge.w	800b498 <_dtoa_r+0x648>
 800b2e4:	9b08      	ldr	r3, [sp, #32]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f300 80d6 	bgt.w	800b498 <_dtoa_r+0x648>
 800b2ec:	f040 826b 	bne.w	800b7c6 <_dtoa_r+0x976>
 800b2f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4b40      	ldr	r3, [pc, #256]	; (800b3f8 <_dtoa_r+0x5a8>)
 800b2f8:	f7f5 f906 	bl	8000508 <__aeabi_dmul>
 800b2fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b300:	f7f5 fb88 	bl	8000a14 <__aeabi_dcmpge>
 800b304:	9c08      	ldr	r4, [sp, #32]
 800b306:	4626      	mov	r6, r4
 800b308:	2800      	cmp	r0, #0
 800b30a:	f040 8241 	bne.w	800b790 <_dtoa_r+0x940>
 800b30e:	2331      	movs	r3, #49	; 0x31
 800b310:	9f03      	ldr	r7, [sp, #12]
 800b312:	f10b 0b01 	add.w	fp, fp, #1
 800b316:	f807 3b01 	strb.w	r3, [r7], #1
 800b31a:	e23d      	b.n	800b798 <_dtoa_r+0x948>
 800b31c:	07e2      	lsls	r2, r4, #31
 800b31e:	d505      	bpl.n	800b32c <_dtoa_r+0x4dc>
 800b320:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b324:	f7f5 f8f0 	bl	8000508 <__aeabi_dmul>
 800b328:	2301      	movs	r3, #1
 800b32a:	3701      	adds	r7, #1
 800b32c:	1064      	asrs	r4, r4, #1
 800b32e:	3608      	adds	r6, #8
 800b330:	e76d      	b.n	800b20e <_dtoa_r+0x3be>
 800b332:	2702      	movs	r7, #2
 800b334:	e770      	b.n	800b218 <_dtoa_r+0x3c8>
 800b336:	46d8      	mov	r8, fp
 800b338:	9c08      	ldr	r4, [sp, #32]
 800b33a:	e78f      	b.n	800b25c <_dtoa_r+0x40c>
 800b33c:	9903      	ldr	r1, [sp, #12]
 800b33e:	4b29      	ldr	r3, [pc, #164]	; (800b3e4 <_dtoa_r+0x594>)
 800b340:	4421      	add	r1, r4
 800b342:	9112      	str	r1, [sp, #72]	; 0x48
 800b344:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b346:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b34a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b34e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b352:	2900      	cmp	r1, #0
 800b354:	d054      	beq.n	800b400 <_dtoa_r+0x5b0>
 800b356:	2000      	movs	r0, #0
 800b358:	4928      	ldr	r1, [pc, #160]	; (800b3fc <_dtoa_r+0x5ac>)
 800b35a:	f7f5 f9ff 	bl	800075c <__aeabi_ddiv>
 800b35e:	463b      	mov	r3, r7
 800b360:	4632      	mov	r2, r6
 800b362:	f7f4 ff19 	bl	8000198 <__aeabi_dsub>
 800b366:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b36a:	9f03      	ldr	r7, [sp, #12]
 800b36c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b370:	f7f5 fb7a 	bl	8000a68 <__aeabi_d2iz>
 800b374:	4604      	mov	r4, r0
 800b376:	f7f5 f85d 	bl	8000434 <__aeabi_i2d>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b382:	f7f4 ff09 	bl	8000198 <__aeabi_dsub>
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	3430      	adds	r4, #48	; 0x30
 800b38c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b390:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b394:	f807 4b01 	strb.w	r4, [r7], #1
 800b398:	f7f5 fb28 	bl	80009ec <__aeabi_dcmplt>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	d173      	bne.n	800b488 <_dtoa_r+0x638>
 800b3a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	4911      	ldr	r1, [pc, #68]	; (800b3ec <_dtoa_r+0x59c>)
 800b3a8:	f7f4 fef6 	bl	8000198 <__aeabi_dsub>
 800b3ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b3b0:	f7f5 fb1c 	bl	80009ec <__aeabi_dcmplt>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	f040 80b6 	bne.w	800b526 <_dtoa_r+0x6d6>
 800b3ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b3bc:	429f      	cmp	r7, r3
 800b3be:	f43f af7a 	beq.w	800b2b6 <_dtoa_r+0x466>
 800b3c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <_dtoa_r+0x5a0>)
 800b3ca:	f7f5 f89d 	bl	8000508 <__aeabi_dmul>
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b3d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3d8:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <_dtoa_r+0x5a0>)
 800b3da:	f7f5 f895 	bl	8000508 <__aeabi_dmul>
 800b3de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3e2:	e7c3      	b.n	800b36c <_dtoa_r+0x51c>
 800b3e4:	0800ebe0 	.word	0x0800ebe0
 800b3e8:	0800ebb8 	.word	0x0800ebb8
 800b3ec:	3ff00000 	.word	0x3ff00000
 800b3f0:	40240000 	.word	0x40240000
 800b3f4:	401c0000 	.word	0x401c0000
 800b3f8:	40140000 	.word	0x40140000
 800b3fc:	3fe00000 	.word	0x3fe00000
 800b400:	4630      	mov	r0, r6
 800b402:	4639      	mov	r1, r7
 800b404:	f7f5 f880 	bl	8000508 <__aeabi_dmul>
 800b408:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b40a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b40e:	9c03      	ldr	r4, [sp, #12]
 800b410:	9314      	str	r3, [sp, #80]	; 0x50
 800b412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b416:	f7f5 fb27 	bl	8000a68 <__aeabi_d2iz>
 800b41a:	9015      	str	r0, [sp, #84]	; 0x54
 800b41c:	f7f5 f80a 	bl	8000434 <__aeabi_i2d>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b428:	f7f4 feb6 	bl	8000198 <__aeabi_dsub>
 800b42c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b42e:	4606      	mov	r6, r0
 800b430:	3330      	adds	r3, #48	; 0x30
 800b432:	f804 3b01 	strb.w	r3, [r4], #1
 800b436:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b438:	460f      	mov	r7, r1
 800b43a:	429c      	cmp	r4, r3
 800b43c:	f04f 0200 	mov.w	r2, #0
 800b440:	d124      	bne.n	800b48c <_dtoa_r+0x63c>
 800b442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b446:	4baf      	ldr	r3, [pc, #700]	; (800b704 <_dtoa_r+0x8b4>)
 800b448:	f7f4 fea8 	bl	800019c <__adddf3>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4630      	mov	r0, r6
 800b452:	4639      	mov	r1, r7
 800b454:	f7f5 fae8 	bl	8000a28 <__aeabi_dcmpgt>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d163      	bne.n	800b524 <_dtoa_r+0x6d4>
 800b45c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b460:	2000      	movs	r0, #0
 800b462:	49a8      	ldr	r1, [pc, #672]	; (800b704 <_dtoa_r+0x8b4>)
 800b464:	f7f4 fe98 	bl	8000198 <__aeabi_dsub>
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	4630      	mov	r0, r6
 800b46e:	4639      	mov	r1, r7
 800b470:	f7f5 fabc 	bl	80009ec <__aeabi_dcmplt>
 800b474:	2800      	cmp	r0, #0
 800b476:	f43f af1e 	beq.w	800b2b6 <_dtoa_r+0x466>
 800b47a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b47c:	1e7b      	subs	r3, r7, #1
 800b47e:	9314      	str	r3, [sp, #80]	; 0x50
 800b480:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b484:	2b30      	cmp	r3, #48	; 0x30
 800b486:	d0f8      	beq.n	800b47a <_dtoa_r+0x62a>
 800b488:	46c3      	mov	fp, r8
 800b48a:	e03b      	b.n	800b504 <_dtoa_r+0x6b4>
 800b48c:	4b9e      	ldr	r3, [pc, #632]	; (800b708 <_dtoa_r+0x8b8>)
 800b48e:	f7f5 f83b 	bl	8000508 <__aeabi_dmul>
 800b492:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b496:	e7bc      	b.n	800b412 <_dtoa_r+0x5c2>
 800b498:	9f03      	ldr	r7, [sp, #12]
 800b49a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b49e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4a2:	4640      	mov	r0, r8
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	f7f5 f959 	bl	800075c <__aeabi_ddiv>
 800b4aa:	f7f5 fadd 	bl	8000a68 <__aeabi_d2iz>
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	f7f4 ffc0 	bl	8000434 <__aeabi_i2d>
 800b4b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4b8:	f7f5 f826 	bl	8000508 <__aeabi_dmul>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4640      	mov	r0, r8
 800b4c2:	4649      	mov	r1, r9
 800b4c4:	f7f4 fe68 	bl	8000198 <__aeabi_dsub>
 800b4c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b4cc:	f807 6b01 	strb.w	r6, [r7], #1
 800b4d0:	9e03      	ldr	r6, [sp, #12]
 800b4d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b4d6:	1bbe      	subs	r6, r7, r6
 800b4d8:	45b4      	cmp	ip, r6
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	d136      	bne.n	800b54e <_dtoa_r+0x6fe>
 800b4e0:	f7f4 fe5c 	bl	800019c <__adddf3>
 800b4e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4e8:	4680      	mov	r8, r0
 800b4ea:	4689      	mov	r9, r1
 800b4ec:	f7f5 fa9c 	bl	8000a28 <__aeabi_dcmpgt>
 800b4f0:	bb58      	cbnz	r0, 800b54a <_dtoa_r+0x6fa>
 800b4f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	4649      	mov	r1, r9
 800b4fa:	f7f5 fa6d 	bl	80009d8 <__aeabi_dcmpeq>
 800b4fe:	b108      	cbz	r0, 800b504 <_dtoa_r+0x6b4>
 800b500:	07e3      	lsls	r3, r4, #31
 800b502:	d422      	bmi.n	800b54a <_dtoa_r+0x6fa>
 800b504:	4651      	mov	r1, sl
 800b506:	4628      	mov	r0, r5
 800b508:	f000 fe7a 	bl	800c200 <_Bfree>
 800b50c:	2300      	movs	r3, #0
 800b50e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b510:	703b      	strb	r3, [r7, #0]
 800b512:	f10b 0301 	add.w	r3, fp, #1
 800b516:	6013      	str	r3, [r2, #0]
 800b518:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f43f ace6 	beq.w	800aeec <_dtoa_r+0x9c>
 800b520:	601f      	str	r7, [r3, #0]
 800b522:	e4e3      	b.n	800aeec <_dtoa_r+0x9c>
 800b524:	4627      	mov	r7, r4
 800b526:	463b      	mov	r3, r7
 800b528:	461f      	mov	r7, r3
 800b52a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b52e:	2a39      	cmp	r2, #57	; 0x39
 800b530:	d107      	bne.n	800b542 <_dtoa_r+0x6f2>
 800b532:	9a03      	ldr	r2, [sp, #12]
 800b534:	429a      	cmp	r2, r3
 800b536:	d1f7      	bne.n	800b528 <_dtoa_r+0x6d8>
 800b538:	2230      	movs	r2, #48	; 0x30
 800b53a:	9903      	ldr	r1, [sp, #12]
 800b53c:	f108 0801 	add.w	r8, r8, #1
 800b540:	700a      	strb	r2, [r1, #0]
 800b542:	781a      	ldrb	r2, [r3, #0]
 800b544:	3201      	adds	r2, #1
 800b546:	701a      	strb	r2, [r3, #0]
 800b548:	e79e      	b.n	800b488 <_dtoa_r+0x638>
 800b54a:	46d8      	mov	r8, fp
 800b54c:	e7eb      	b.n	800b526 <_dtoa_r+0x6d6>
 800b54e:	2200      	movs	r2, #0
 800b550:	4b6d      	ldr	r3, [pc, #436]	; (800b708 <_dtoa_r+0x8b8>)
 800b552:	f7f4 ffd9 	bl	8000508 <__aeabi_dmul>
 800b556:	2200      	movs	r2, #0
 800b558:	2300      	movs	r3, #0
 800b55a:	4680      	mov	r8, r0
 800b55c:	4689      	mov	r9, r1
 800b55e:	f7f5 fa3b 	bl	80009d8 <__aeabi_dcmpeq>
 800b562:	2800      	cmp	r0, #0
 800b564:	d09b      	beq.n	800b49e <_dtoa_r+0x64e>
 800b566:	e7cd      	b.n	800b504 <_dtoa_r+0x6b4>
 800b568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b56a:	2a00      	cmp	r2, #0
 800b56c:	f000 80c4 	beq.w	800b6f8 <_dtoa_r+0x8a8>
 800b570:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b572:	2a01      	cmp	r2, #1
 800b574:	f300 80a8 	bgt.w	800b6c8 <_dtoa_r+0x878>
 800b578:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b57a:	2a00      	cmp	r2, #0
 800b57c:	f000 80a0 	beq.w	800b6c0 <_dtoa_r+0x870>
 800b580:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b584:	464f      	mov	r7, r9
 800b586:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b58a:	2101      	movs	r1, #1
 800b58c:	441a      	add	r2, r3
 800b58e:	4628      	mov	r0, r5
 800b590:	4499      	add	r9, r3
 800b592:	9209      	str	r2, [sp, #36]	; 0x24
 800b594:	f000 ff34 	bl	800c400 <__i2b>
 800b598:	4606      	mov	r6, r0
 800b59a:	b15f      	cbz	r7, 800b5b4 <_dtoa_r+0x764>
 800b59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	dd08      	ble.n	800b5b4 <_dtoa_r+0x764>
 800b5a2:	42bb      	cmp	r3, r7
 800b5a4:	bfa8      	it	ge
 800b5a6:	463b      	movge	r3, r7
 800b5a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5aa:	eba9 0903 	sub.w	r9, r9, r3
 800b5ae:	1aff      	subs	r7, r7, r3
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b6:	b1f3      	cbz	r3, 800b5f6 <_dtoa_r+0x7a6>
 800b5b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f000 80a0 	beq.w	800b700 <_dtoa_r+0x8b0>
 800b5c0:	2c00      	cmp	r4, #0
 800b5c2:	dd10      	ble.n	800b5e6 <_dtoa_r+0x796>
 800b5c4:	4631      	mov	r1, r6
 800b5c6:	4622      	mov	r2, r4
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	f000 ffd7 	bl	800c57c <__pow5mult>
 800b5ce:	4652      	mov	r2, sl
 800b5d0:	4601      	mov	r1, r0
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f000 ff29 	bl	800c42c <__multiply>
 800b5da:	4680      	mov	r8, r0
 800b5dc:	4651      	mov	r1, sl
 800b5de:	4628      	mov	r0, r5
 800b5e0:	f000 fe0e 	bl	800c200 <_Bfree>
 800b5e4:	46c2      	mov	sl, r8
 800b5e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5e8:	1b1a      	subs	r2, r3, r4
 800b5ea:	d004      	beq.n	800b5f6 <_dtoa_r+0x7a6>
 800b5ec:	4651      	mov	r1, sl
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f000 ffc4 	bl	800c57c <__pow5mult>
 800b5f4:	4682      	mov	sl, r0
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	f000 ff01 	bl	800c400 <__i2b>
 800b5fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b600:	4604      	mov	r4, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	f340 8082 	ble.w	800b70c <_dtoa_r+0x8bc>
 800b608:	461a      	mov	r2, r3
 800b60a:	4601      	mov	r1, r0
 800b60c:	4628      	mov	r0, r5
 800b60e:	f000 ffb5 	bl	800c57c <__pow5mult>
 800b612:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b614:	4604      	mov	r4, r0
 800b616:	2b01      	cmp	r3, #1
 800b618:	dd7b      	ble.n	800b712 <_dtoa_r+0x8c2>
 800b61a:	f04f 0800 	mov.w	r8, #0
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b624:	6918      	ldr	r0, [r3, #16]
 800b626:	f000 fe9d 	bl	800c364 <__hi0bits>
 800b62a:	f1c0 0020 	rsb	r0, r0, #32
 800b62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b630:	4418      	add	r0, r3
 800b632:	f010 001f 	ands.w	r0, r0, #31
 800b636:	f000 8092 	beq.w	800b75e <_dtoa_r+0x90e>
 800b63a:	f1c0 0320 	rsb	r3, r0, #32
 800b63e:	2b04      	cmp	r3, #4
 800b640:	f340 8085 	ble.w	800b74e <_dtoa_r+0x8fe>
 800b644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b646:	f1c0 001c 	rsb	r0, r0, #28
 800b64a:	4403      	add	r3, r0
 800b64c:	4481      	add	r9, r0
 800b64e:	4407      	add	r7, r0
 800b650:	9309      	str	r3, [sp, #36]	; 0x24
 800b652:	f1b9 0f00 	cmp.w	r9, #0
 800b656:	dd05      	ble.n	800b664 <_dtoa_r+0x814>
 800b658:	4651      	mov	r1, sl
 800b65a:	464a      	mov	r2, r9
 800b65c:	4628      	mov	r0, r5
 800b65e:	f000 ffe7 	bl	800c630 <__lshift>
 800b662:	4682      	mov	sl, r0
 800b664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b666:	2b00      	cmp	r3, #0
 800b668:	dd05      	ble.n	800b676 <_dtoa_r+0x826>
 800b66a:	4621      	mov	r1, r4
 800b66c:	461a      	mov	r2, r3
 800b66e:	4628      	mov	r0, r5
 800b670:	f000 ffde 	bl	800c630 <__lshift>
 800b674:	4604      	mov	r4, r0
 800b676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d072      	beq.n	800b762 <_dtoa_r+0x912>
 800b67c:	4621      	mov	r1, r4
 800b67e:	4650      	mov	r0, sl
 800b680:	f001 f842 	bl	800c708 <__mcmp>
 800b684:	2800      	cmp	r0, #0
 800b686:	da6c      	bge.n	800b762 <_dtoa_r+0x912>
 800b688:	2300      	movs	r3, #0
 800b68a:	4651      	mov	r1, sl
 800b68c:	220a      	movs	r2, #10
 800b68e:	4628      	mov	r0, r5
 800b690:	f000 fdd8 	bl	800c244 <__multadd>
 800b694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b696:	4682      	mov	sl, r0
 800b698:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 81ac 	beq.w	800b9fa <_dtoa_r+0xbaa>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	4631      	mov	r1, r6
 800b6a6:	220a      	movs	r2, #10
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f000 fdcb 	bl	800c244 <__multadd>
 800b6ae:	9b06      	ldr	r3, [sp, #24]
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f300 8093 	bgt.w	800b7de <_dtoa_r+0x98e>
 800b6b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6ba:	2b02      	cmp	r3, #2
 800b6bc:	dc59      	bgt.n	800b772 <_dtoa_r+0x922>
 800b6be:	e08e      	b.n	800b7de <_dtoa_r+0x98e>
 800b6c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b6c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b6c6:	e75d      	b.n	800b584 <_dtoa_r+0x734>
 800b6c8:	9b08      	ldr	r3, [sp, #32]
 800b6ca:	1e5c      	subs	r4, r3, #1
 800b6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ce:	42a3      	cmp	r3, r4
 800b6d0:	bfbf      	itttt	lt
 800b6d2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b6d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b6d6:	1ae3      	sublt	r3, r4, r3
 800b6d8:	18d2      	addlt	r2, r2, r3
 800b6da:	bfa8      	it	ge
 800b6dc:	1b1c      	subge	r4, r3, r4
 800b6de:	9b08      	ldr	r3, [sp, #32]
 800b6e0:	bfbe      	ittt	lt
 800b6e2:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b6e4:	920e      	strlt	r2, [sp, #56]	; 0x38
 800b6e6:	2400      	movlt	r4, #0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	bfb5      	itete	lt
 800b6ec:	eba9 0703 	sublt.w	r7, r9, r3
 800b6f0:	464f      	movge	r7, r9
 800b6f2:	2300      	movlt	r3, #0
 800b6f4:	9b08      	ldrge	r3, [sp, #32]
 800b6f6:	e747      	b.n	800b588 <_dtoa_r+0x738>
 800b6f8:	464f      	mov	r7, r9
 800b6fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b6fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b6fe:	e74c      	b.n	800b59a <_dtoa_r+0x74a>
 800b700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b702:	e773      	b.n	800b5ec <_dtoa_r+0x79c>
 800b704:	3fe00000 	.word	0x3fe00000
 800b708:	40240000 	.word	0x40240000
 800b70c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b70e:	2b01      	cmp	r3, #1
 800b710:	dc18      	bgt.n	800b744 <_dtoa_r+0x8f4>
 800b712:	9b04      	ldr	r3, [sp, #16]
 800b714:	b9b3      	cbnz	r3, 800b744 <_dtoa_r+0x8f4>
 800b716:	9b05      	ldr	r3, [sp, #20]
 800b718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b71c:	b993      	cbnz	r3, 800b744 <_dtoa_r+0x8f4>
 800b71e:	9b05      	ldr	r3, [sp, #20]
 800b720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b724:	0d1b      	lsrs	r3, r3, #20
 800b726:	051b      	lsls	r3, r3, #20
 800b728:	b17b      	cbz	r3, 800b74a <_dtoa_r+0x8fa>
 800b72a:	f04f 0801 	mov.w	r8, #1
 800b72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b730:	f109 0901 	add.w	r9, r9, #1
 800b734:	3301      	adds	r3, #1
 800b736:	9309      	str	r3, [sp, #36]	; 0x24
 800b738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f47f af6f 	bne.w	800b61e <_dtoa_r+0x7ce>
 800b740:	2001      	movs	r0, #1
 800b742:	e774      	b.n	800b62e <_dtoa_r+0x7de>
 800b744:	f04f 0800 	mov.w	r8, #0
 800b748:	e7f6      	b.n	800b738 <_dtoa_r+0x8e8>
 800b74a:	4698      	mov	r8, r3
 800b74c:	e7f4      	b.n	800b738 <_dtoa_r+0x8e8>
 800b74e:	d080      	beq.n	800b652 <_dtoa_r+0x802>
 800b750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b752:	331c      	adds	r3, #28
 800b754:	441a      	add	r2, r3
 800b756:	4499      	add	r9, r3
 800b758:	441f      	add	r7, r3
 800b75a:	9209      	str	r2, [sp, #36]	; 0x24
 800b75c:	e779      	b.n	800b652 <_dtoa_r+0x802>
 800b75e:	4603      	mov	r3, r0
 800b760:	e7f6      	b.n	800b750 <_dtoa_r+0x900>
 800b762:	9b08      	ldr	r3, [sp, #32]
 800b764:	2b00      	cmp	r3, #0
 800b766:	dc34      	bgt.n	800b7d2 <_dtoa_r+0x982>
 800b768:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b76a:	2b02      	cmp	r3, #2
 800b76c:	dd31      	ble.n	800b7d2 <_dtoa_r+0x982>
 800b76e:	9b08      	ldr	r3, [sp, #32]
 800b770:	9306      	str	r3, [sp, #24]
 800b772:	9b06      	ldr	r3, [sp, #24]
 800b774:	b963      	cbnz	r3, 800b790 <_dtoa_r+0x940>
 800b776:	4621      	mov	r1, r4
 800b778:	2205      	movs	r2, #5
 800b77a:	4628      	mov	r0, r5
 800b77c:	f000 fd62 	bl	800c244 <__multadd>
 800b780:	4601      	mov	r1, r0
 800b782:	4604      	mov	r4, r0
 800b784:	4650      	mov	r0, sl
 800b786:	f000 ffbf 	bl	800c708 <__mcmp>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	f73f adbf 	bgt.w	800b30e <_dtoa_r+0x4be>
 800b790:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b792:	9f03      	ldr	r7, [sp, #12]
 800b794:	ea6f 0b03 	mvn.w	fp, r3
 800b798:	f04f 0800 	mov.w	r8, #0
 800b79c:	4621      	mov	r1, r4
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f000 fd2e 	bl	800c200 <_Bfree>
 800b7a4:	2e00      	cmp	r6, #0
 800b7a6:	f43f aead 	beq.w	800b504 <_dtoa_r+0x6b4>
 800b7aa:	f1b8 0f00 	cmp.w	r8, #0
 800b7ae:	d005      	beq.n	800b7bc <_dtoa_r+0x96c>
 800b7b0:	45b0      	cmp	r8, r6
 800b7b2:	d003      	beq.n	800b7bc <_dtoa_r+0x96c>
 800b7b4:	4641      	mov	r1, r8
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	f000 fd22 	bl	800c200 <_Bfree>
 800b7bc:	4631      	mov	r1, r6
 800b7be:	4628      	mov	r0, r5
 800b7c0:	f000 fd1e 	bl	800c200 <_Bfree>
 800b7c4:	e69e      	b.n	800b504 <_dtoa_r+0x6b4>
 800b7c6:	2400      	movs	r4, #0
 800b7c8:	4626      	mov	r6, r4
 800b7ca:	e7e1      	b.n	800b790 <_dtoa_r+0x940>
 800b7cc:	46c3      	mov	fp, r8
 800b7ce:	4626      	mov	r6, r4
 800b7d0:	e59d      	b.n	800b30e <_dtoa_r+0x4be>
 800b7d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 80c8 	beq.w	800b96a <_dtoa_r+0xb1a>
 800b7da:	9b08      	ldr	r3, [sp, #32]
 800b7dc:	9306      	str	r3, [sp, #24]
 800b7de:	2f00      	cmp	r7, #0
 800b7e0:	dd05      	ble.n	800b7ee <_dtoa_r+0x99e>
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	463a      	mov	r2, r7
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	f000 ff22 	bl	800c630 <__lshift>
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	f1b8 0f00 	cmp.w	r8, #0
 800b7f2:	d05b      	beq.n	800b8ac <_dtoa_r+0xa5c>
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	6871      	ldr	r1, [r6, #4]
 800b7f8:	f000 fcc2 	bl	800c180 <_Balloc>
 800b7fc:	4607      	mov	r7, r0
 800b7fe:	b928      	cbnz	r0, 800b80c <_dtoa_r+0x9bc>
 800b800:	4602      	mov	r2, r0
 800b802:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b806:	4b81      	ldr	r3, [pc, #516]	; (800ba0c <_dtoa_r+0xbbc>)
 800b808:	f7ff bb36 	b.w	800ae78 <_dtoa_r+0x28>
 800b80c:	6932      	ldr	r2, [r6, #16]
 800b80e:	f106 010c 	add.w	r1, r6, #12
 800b812:	3202      	adds	r2, #2
 800b814:	0092      	lsls	r2, r2, #2
 800b816:	300c      	adds	r0, #12
 800b818:	f7ff fa79 	bl	800ad0e <memcpy>
 800b81c:	2201      	movs	r2, #1
 800b81e:	4639      	mov	r1, r7
 800b820:	4628      	mov	r0, r5
 800b822:	f000 ff05 	bl	800c630 <__lshift>
 800b826:	46b0      	mov	r8, r6
 800b828:	4606      	mov	r6, r0
 800b82a:	9b03      	ldr	r3, [sp, #12]
 800b82c:	9a03      	ldr	r2, [sp, #12]
 800b82e:	3301      	adds	r3, #1
 800b830:	9308      	str	r3, [sp, #32]
 800b832:	9b06      	ldr	r3, [sp, #24]
 800b834:	4413      	add	r3, r2
 800b836:	930b      	str	r3, [sp, #44]	; 0x2c
 800b838:	9b04      	ldr	r3, [sp, #16]
 800b83a:	f003 0301 	and.w	r3, r3, #1
 800b83e:	930a      	str	r3, [sp, #40]	; 0x28
 800b840:	9b08      	ldr	r3, [sp, #32]
 800b842:	4621      	mov	r1, r4
 800b844:	3b01      	subs	r3, #1
 800b846:	4650      	mov	r0, sl
 800b848:	9304      	str	r3, [sp, #16]
 800b84a:	f7ff fa75 	bl	800ad38 <quorem>
 800b84e:	4641      	mov	r1, r8
 800b850:	9006      	str	r0, [sp, #24]
 800b852:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b856:	4650      	mov	r0, sl
 800b858:	f000 ff56 	bl	800c708 <__mcmp>
 800b85c:	4632      	mov	r2, r6
 800b85e:	9009      	str	r0, [sp, #36]	; 0x24
 800b860:	4621      	mov	r1, r4
 800b862:	4628      	mov	r0, r5
 800b864:	f000 ff6c 	bl	800c740 <__mdiff>
 800b868:	68c2      	ldr	r2, [r0, #12]
 800b86a:	4607      	mov	r7, r0
 800b86c:	bb02      	cbnz	r2, 800b8b0 <_dtoa_r+0xa60>
 800b86e:	4601      	mov	r1, r0
 800b870:	4650      	mov	r0, sl
 800b872:	f000 ff49 	bl	800c708 <__mcmp>
 800b876:	4602      	mov	r2, r0
 800b878:	4639      	mov	r1, r7
 800b87a:	4628      	mov	r0, r5
 800b87c:	920c      	str	r2, [sp, #48]	; 0x30
 800b87e:	f000 fcbf 	bl	800c200 <_Bfree>
 800b882:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b884:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b886:	9f08      	ldr	r7, [sp, #32]
 800b888:	ea43 0102 	orr.w	r1, r3, r2
 800b88c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b88e:	4319      	orrs	r1, r3
 800b890:	d110      	bne.n	800b8b4 <_dtoa_r+0xa64>
 800b892:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b896:	d029      	beq.n	800b8ec <_dtoa_r+0xa9c>
 800b898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	dd02      	ble.n	800b8a4 <_dtoa_r+0xa54>
 800b89e:	9b06      	ldr	r3, [sp, #24]
 800b8a0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b8a4:	9b04      	ldr	r3, [sp, #16]
 800b8a6:	f883 9000 	strb.w	r9, [r3]
 800b8aa:	e777      	b.n	800b79c <_dtoa_r+0x94c>
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	e7ba      	b.n	800b826 <_dtoa_r+0x9d6>
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	e7e1      	b.n	800b878 <_dtoa_r+0xa28>
 800b8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	db04      	blt.n	800b8c4 <_dtoa_r+0xa74>
 800b8ba:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b8bc:	430b      	orrs	r3, r1
 800b8be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b8c0:	430b      	orrs	r3, r1
 800b8c2:	d120      	bne.n	800b906 <_dtoa_r+0xab6>
 800b8c4:	2a00      	cmp	r2, #0
 800b8c6:	dded      	ble.n	800b8a4 <_dtoa_r+0xa54>
 800b8c8:	4651      	mov	r1, sl
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f000 feaf 	bl	800c630 <__lshift>
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	4682      	mov	sl, r0
 800b8d6:	f000 ff17 	bl	800c708 <__mcmp>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	dc03      	bgt.n	800b8e6 <_dtoa_r+0xa96>
 800b8de:	d1e1      	bne.n	800b8a4 <_dtoa_r+0xa54>
 800b8e0:	f019 0f01 	tst.w	r9, #1
 800b8e4:	d0de      	beq.n	800b8a4 <_dtoa_r+0xa54>
 800b8e6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b8ea:	d1d8      	bne.n	800b89e <_dtoa_r+0xa4e>
 800b8ec:	2339      	movs	r3, #57	; 0x39
 800b8ee:	9a04      	ldr	r2, [sp, #16]
 800b8f0:	7013      	strb	r3, [r2, #0]
 800b8f2:	463b      	mov	r3, r7
 800b8f4:	461f      	mov	r7, r3
 800b8f6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	2a39      	cmp	r2, #57	; 0x39
 800b8fe:	d06b      	beq.n	800b9d8 <_dtoa_r+0xb88>
 800b900:	3201      	adds	r2, #1
 800b902:	701a      	strb	r2, [r3, #0]
 800b904:	e74a      	b.n	800b79c <_dtoa_r+0x94c>
 800b906:	2a00      	cmp	r2, #0
 800b908:	dd07      	ble.n	800b91a <_dtoa_r+0xaca>
 800b90a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b90e:	d0ed      	beq.n	800b8ec <_dtoa_r+0xa9c>
 800b910:	9a04      	ldr	r2, [sp, #16]
 800b912:	f109 0301 	add.w	r3, r9, #1
 800b916:	7013      	strb	r3, [r2, #0]
 800b918:	e740      	b.n	800b79c <_dtoa_r+0x94c>
 800b91a:	9b08      	ldr	r3, [sp, #32]
 800b91c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b91e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b922:	4293      	cmp	r3, r2
 800b924:	d042      	beq.n	800b9ac <_dtoa_r+0xb5c>
 800b926:	4651      	mov	r1, sl
 800b928:	2300      	movs	r3, #0
 800b92a:	220a      	movs	r2, #10
 800b92c:	4628      	mov	r0, r5
 800b92e:	f000 fc89 	bl	800c244 <__multadd>
 800b932:	45b0      	cmp	r8, r6
 800b934:	4682      	mov	sl, r0
 800b936:	f04f 0300 	mov.w	r3, #0
 800b93a:	f04f 020a 	mov.w	r2, #10
 800b93e:	4641      	mov	r1, r8
 800b940:	4628      	mov	r0, r5
 800b942:	d107      	bne.n	800b954 <_dtoa_r+0xb04>
 800b944:	f000 fc7e 	bl	800c244 <__multadd>
 800b948:	4680      	mov	r8, r0
 800b94a:	4606      	mov	r6, r0
 800b94c:	9b08      	ldr	r3, [sp, #32]
 800b94e:	3301      	adds	r3, #1
 800b950:	9308      	str	r3, [sp, #32]
 800b952:	e775      	b.n	800b840 <_dtoa_r+0x9f0>
 800b954:	f000 fc76 	bl	800c244 <__multadd>
 800b958:	4631      	mov	r1, r6
 800b95a:	4680      	mov	r8, r0
 800b95c:	2300      	movs	r3, #0
 800b95e:	220a      	movs	r2, #10
 800b960:	4628      	mov	r0, r5
 800b962:	f000 fc6f 	bl	800c244 <__multadd>
 800b966:	4606      	mov	r6, r0
 800b968:	e7f0      	b.n	800b94c <_dtoa_r+0xafc>
 800b96a:	9b08      	ldr	r3, [sp, #32]
 800b96c:	9306      	str	r3, [sp, #24]
 800b96e:	9f03      	ldr	r7, [sp, #12]
 800b970:	4621      	mov	r1, r4
 800b972:	4650      	mov	r0, sl
 800b974:	f7ff f9e0 	bl	800ad38 <quorem>
 800b978:	9b03      	ldr	r3, [sp, #12]
 800b97a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b97e:	f807 9b01 	strb.w	r9, [r7], #1
 800b982:	1afa      	subs	r2, r7, r3
 800b984:	9b06      	ldr	r3, [sp, #24]
 800b986:	4293      	cmp	r3, r2
 800b988:	dd07      	ble.n	800b99a <_dtoa_r+0xb4a>
 800b98a:	4651      	mov	r1, sl
 800b98c:	2300      	movs	r3, #0
 800b98e:	220a      	movs	r2, #10
 800b990:	4628      	mov	r0, r5
 800b992:	f000 fc57 	bl	800c244 <__multadd>
 800b996:	4682      	mov	sl, r0
 800b998:	e7ea      	b.n	800b970 <_dtoa_r+0xb20>
 800b99a:	9b06      	ldr	r3, [sp, #24]
 800b99c:	f04f 0800 	mov.w	r8, #0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	bfcc      	ite	gt
 800b9a4:	461f      	movgt	r7, r3
 800b9a6:	2701      	movle	r7, #1
 800b9a8:	9b03      	ldr	r3, [sp, #12]
 800b9aa:	441f      	add	r7, r3
 800b9ac:	4651      	mov	r1, sl
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	f000 fe3d 	bl	800c630 <__lshift>
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4682      	mov	sl, r0
 800b9ba:	f000 fea5 	bl	800c708 <__mcmp>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	dc97      	bgt.n	800b8f2 <_dtoa_r+0xaa2>
 800b9c2:	d102      	bne.n	800b9ca <_dtoa_r+0xb7a>
 800b9c4:	f019 0f01 	tst.w	r9, #1
 800b9c8:	d193      	bne.n	800b8f2 <_dtoa_r+0xaa2>
 800b9ca:	463b      	mov	r3, r7
 800b9cc:	461f      	mov	r7, r3
 800b9ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9d2:	2a30      	cmp	r2, #48	; 0x30
 800b9d4:	d0fa      	beq.n	800b9cc <_dtoa_r+0xb7c>
 800b9d6:	e6e1      	b.n	800b79c <_dtoa_r+0x94c>
 800b9d8:	9a03      	ldr	r2, [sp, #12]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d18a      	bne.n	800b8f4 <_dtoa_r+0xaa4>
 800b9de:	2331      	movs	r3, #49	; 0x31
 800b9e0:	f10b 0b01 	add.w	fp, fp, #1
 800b9e4:	e797      	b.n	800b916 <_dtoa_r+0xac6>
 800b9e6:	4b0a      	ldr	r3, [pc, #40]	; (800ba10 <_dtoa_r+0xbc0>)
 800b9e8:	f7ff ba9f 	b.w	800af2a <_dtoa_r+0xda>
 800b9ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f47f aa77 	bne.w	800aee2 <_dtoa_r+0x92>
 800b9f4:	4b07      	ldr	r3, [pc, #28]	; (800ba14 <_dtoa_r+0xbc4>)
 800b9f6:	f7ff ba98 	b.w	800af2a <_dtoa_r+0xda>
 800b9fa:	9b06      	ldr	r3, [sp, #24]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	dcb6      	bgt.n	800b96e <_dtoa_r+0xb1e>
 800ba00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	f73f aeb5 	bgt.w	800b772 <_dtoa_r+0x922>
 800ba08:	e7b1      	b.n	800b96e <_dtoa_r+0xb1e>
 800ba0a:	bf00      	nop
 800ba0c:	0800eae7 	.word	0x0800eae7
 800ba10:	0800e3a9 	.word	0x0800e3a9
 800ba14:	0800ea6b 	.word	0x0800ea6b

0800ba18 <_free_r>:
 800ba18:	b538      	push	{r3, r4, r5, lr}
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	2900      	cmp	r1, #0
 800ba1e:	d040      	beq.n	800baa2 <_free_r+0x8a>
 800ba20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba24:	1f0c      	subs	r4, r1, #4
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	bfb8      	it	lt
 800ba2a:	18e4      	addlt	r4, r4, r3
 800ba2c:	f7fc ff36 	bl	800889c <__malloc_lock>
 800ba30:	4a1c      	ldr	r2, [pc, #112]	; (800baa4 <_free_r+0x8c>)
 800ba32:	6813      	ldr	r3, [r2, #0]
 800ba34:	b933      	cbnz	r3, 800ba44 <_free_r+0x2c>
 800ba36:	6063      	str	r3, [r4, #4]
 800ba38:	6014      	str	r4, [r2, #0]
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba40:	f7fc bf32 	b.w	80088a8 <__malloc_unlock>
 800ba44:	42a3      	cmp	r3, r4
 800ba46:	d908      	bls.n	800ba5a <_free_r+0x42>
 800ba48:	6820      	ldr	r0, [r4, #0]
 800ba4a:	1821      	adds	r1, r4, r0
 800ba4c:	428b      	cmp	r3, r1
 800ba4e:	bf01      	itttt	eq
 800ba50:	6819      	ldreq	r1, [r3, #0]
 800ba52:	685b      	ldreq	r3, [r3, #4]
 800ba54:	1809      	addeq	r1, r1, r0
 800ba56:	6021      	streq	r1, [r4, #0]
 800ba58:	e7ed      	b.n	800ba36 <_free_r+0x1e>
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	b10b      	cbz	r3, 800ba64 <_free_r+0x4c>
 800ba60:	42a3      	cmp	r3, r4
 800ba62:	d9fa      	bls.n	800ba5a <_free_r+0x42>
 800ba64:	6811      	ldr	r1, [r2, #0]
 800ba66:	1850      	adds	r0, r2, r1
 800ba68:	42a0      	cmp	r0, r4
 800ba6a:	d10b      	bne.n	800ba84 <_free_r+0x6c>
 800ba6c:	6820      	ldr	r0, [r4, #0]
 800ba6e:	4401      	add	r1, r0
 800ba70:	1850      	adds	r0, r2, r1
 800ba72:	4283      	cmp	r3, r0
 800ba74:	6011      	str	r1, [r2, #0]
 800ba76:	d1e0      	bne.n	800ba3a <_free_r+0x22>
 800ba78:	6818      	ldr	r0, [r3, #0]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	4408      	add	r0, r1
 800ba7e:	6010      	str	r0, [r2, #0]
 800ba80:	6053      	str	r3, [r2, #4]
 800ba82:	e7da      	b.n	800ba3a <_free_r+0x22>
 800ba84:	d902      	bls.n	800ba8c <_free_r+0x74>
 800ba86:	230c      	movs	r3, #12
 800ba88:	602b      	str	r3, [r5, #0]
 800ba8a:	e7d6      	b.n	800ba3a <_free_r+0x22>
 800ba8c:	6820      	ldr	r0, [r4, #0]
 800ba8e:	1821      	adds	r1, r4, r0
 800ba90:	428b      	cmp	r3, r1
 800ba92:	bf01      	itttt	eq
 800ba94:	6819      	ldreq	r1, [r3, #0]
 800ba96:	685b      	ldreq	r3, [r3, #4]
 800ba98:	1809      	addeq	r1, r1, r0
 800ba9a:	6021      	streq	r1, [r4, #0]
 800ba9c:	6063      	str	r3, [r4, #4]
 800ba9e:	6054      	str	r4, [r2, #4]
 800baa0:	e7cb      	b.n	800ba3a <_free_r+0x22>
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	200005b4 	.word	0x200005b4

0800baa8 <rshift>:
 800baa8:	6903      	ldr	r3, [r0, #16]
 800baaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800baae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bab2:	f100 0414 	add.w	r4, r0, #20
 800bab6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800baba:	dd46      	ble.n	800bb4a <rshift+0xa2>
 800babc:	f011 011f 	ands.w	r1, r1, #31
 800bac0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bac4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bac8:	d10c      	bne.n	800bae4 <rshift+0x3c>
 800baca:	4629      	mov	r1, r5
 800bacc:	f100 0710 	add.w	r7, r0, #16
 800bad0:	42b1      	cmp	r1, r6
 800bad2:	d335      	bcc.n	800bb40 <rshift+0x98>
 800bad4:	1a9b      	subs	r3, r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	1eea      	subs	r2, r5, #3
 800bada:	4296      	cmp	r6, r2
 800badc:	bf38      	it	cc
 800bade:	2300      	movcc	r3, #0
 800bae0:	4423      	add	r3, r4
 800bae2:	e015      	b.n	800bb10 <rshift+0x68>
 800bae4:	46a1      	mov	r9, r4
 800bae6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800baea:	f1c1 0820 	rsb	r8, r1, #32
 800baee:	40cf      	lsrs	r7, r1
 800baf0:	f105 0e04 	add.w	lr, r5, #4
 800baf4:	4576      	cmp	r6, lr
 800baf6:	46f4      	mov	ip, lr
 800baf8:	d816      	bhi.n	800bb28 <rshift+0x80>
 800bafa:	1a9a      	subs	r2, r3, r2
 800bafc:	0092      	lsls	r2, r2, #2
 800bafe:	3a04      	subs	r2, #4
 800bb00:	3501      	adds	r5, #1
 800bb02:	42ae      	cmp	r6, r5
 800bb04:	bf38      	it	cc
 800bb06:	2200      	movcc	r2, #0
 800bb08:	18a3      	adds	r3, r4, r2
 800bb0a:	50a7      	str	r7, [r4, r2]
 800bb0c:	b107      	cbz	r7, 800bb10 <rshift+0x68>
 800bb0e:	3304      	adds	r3, #4
 800bb10:	42a3      	cmp	r3, r4
 800bb12:	eba3 0204 	sub.w	r2, r3, r4
 800bb16:	bf08      	it	eq
 800bb18:	2300      	moveq	r3, #0
 800bb1a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bb1e:	6102      	str	r2, [r0, #16]
 800bb20:	bf08      	it	eq
 800bb22:	6143      	streq	r3, [r0, #20]
 800bb24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb28:	f8dc c000 	ldr.w	ip, [ip]
 800bb2c:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb30:	ea4c 0707 	orr.w	r7, ip, r7
 800bb34:	f849 7b04 	str.w	r7, [r9], #4
 800bb38:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb3c:	40cf      	lsrs	r7, r1
 800bb3e:	e7d9      	b.n	800baf4 <rshift+0x4c>
 800bb40:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb44:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb48:	e7c2      	b.n	800bad0 <rshift+0x28>
 800bb4a:	4623      	mov	r3, r4
 800bb4c:	e7e0      	b.n	800bb10 <rshift+0x68>

0800bb4e <__hexdig_fun>:
 800bb4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bb52:	2b09      	cmp	r3, #9
 800bb54:	d802      	bhi.n	800bb5c <__hexdig_fun+0xe>
 800bb56:	3820      	subs	r0, #32
 800bb58:	b2c0      	uxtb	r0, r0
 800bb5a:	4770      	bx	lr
 800bb5c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bb60:	2b05      	cmp	r3, #5
 800bb62:	d801      	bhi.n	800bb68 <__hexdig_fun+0x1a>
 800bb64:	3847      	subs	r0, #71	; 0x47
 800bb66:	e7f7      	b.n	800bb58 <__hexdig_fun+0xa>
 800bb68:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bb6c:	2b05      	cmp	r3, #5
 800bb6e:	d801      	bhi.n	800bb74 <__hexdig_fun+0x26>
 800bb70:	3827      	subs	r0, #39	; 0x27
 800bb72:	e7f1      	b.n	800bb58 <__hexdig_fun+0xa>
 800bb74:	2000      	movs	r0, #0
 800bb76:	4770      	bx	lr

0800bb78 <__gethex>:
 800bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	4681      	mov	r9, r0
 800bb7e:	468a      	mov	sl, r1
 800bb80:	4617      	mov	r7, r2
 800bb82:	680a      	ldr	r2, [r1, #0]
 800bb84:	b085      	sub	sp, #20
 800bb86:	f102 0b02 	add.w	fp, r2, #2
 800bb8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb92:	9302      	str	r3, [sp, #8]
 800bb94:	32fe      	adds	r2, #254	; 0xfe
 800bb96:	eb02 030b 	add.w	r3, r2, fp
 800bb9a:	46d8      	mov	r8, fp
 800bb9c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	2830      	cmp	r0, #48	; 0x30
 800bba4:	d0f7      	beq.n	800bb96 <__gethex+0x1e>
 800bba6:	f7ff ffd2 	bl	800bb4e <__hexdig_fun>
 800bbaa:	4604      	mov	r4, r0
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d138      	bne.n	800bc22 <__gethex+0xaa>
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	4640      	mov	r0, r8
 800bbb4:	49a7      	ldr	r1, [pc, #668]	; (800be54 <__gethex+0x2dc>)
 800bbb6:	f7fe ffe5 	bl	800ab84 <strncmp>
 800bbba:	4606      	mov	r6, r0
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d169      	bne.n	800bc94 <__gethex+0x11c>
 800bbc0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bbc4:	465d      	mov	r5, fp
 800bbc6:	f7ff ffc2 	bl	800bb4e <__hexdig_fun>
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d064      	beq.n	800bc98 <__gethex+0x120>
 800bbce:	465a      	mov	r2, fp
 800bbd0:	7810      	ldrb	r0, [r2, #0]
 800bbd2:	4690      	mov	r8, r2
 800bbd4:	2830      	cmp	r0, #48	; 0x30
 800bbd6:	f102 0201 	add.w	r2, r2, #1
 800bbda:	d0f9      	beq.n	800bbd0 <__gethex+0x58>
 800bbdc:	f7ff ffb7 	bl	800bb4e <__hexdig_fun>
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	fab0 f480 	clz	r4, r0
 800bbe6:	465e      	mov	r6, fp
 800bbe8:	0964      	lsrs	r4, r4, #5
 800bbea:	9301      	str	r3, [sp, #4]
 800bbec:	4642      	mov	r2, r8
 800bbee:	4615      	mov	r5, r2
 800bbf0:	7828      	ldrb	r0, [r5, #0]
 800bbf2:	3201      	adds	r2, #1
 800bbf4:	f7ff ffab 	bl	800bb4e <__hexdig_fun>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d1f8      	bne.n	800bbee <__gethex+0x76>
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	4628      	mov	r0, r5
 800bc00:	4994      	ldr	r1, [pc, #592]	; (800be54 <__gethex+0x2dc>)
 800bc02:	f7fe ffbf 	bl	800ab84 <strncmp>
 800bc06:	b978      	cbnz	r0, 800bc28 <__gethex+0xb0>
 800bc08:	b946      	cbnz	r6, 800bc1c <__gethex+0xa4>
 800bc0a:	1c6e      	adds	r6, r5, #1
 800bc0c:	4632      	mov	r2, r6
 800bc0e:	4615      	mov	r5, r2
 800bc10:	7828      	ldrb	r0, [r5, #0]
 800bc12:	3201      	adds	r2, #1
 800bc14:	f7ff ff9b 	bl	800bb4e <__hexdig_fun>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d1f8      	bne.n	800bc0e <__gethex+0x96>
 800bc1c:	1b73      	subs	r3, r6, r5
 800bc1e:	009e      	lsls	r6, r3, #2
 800bc20:	e004      	b.n	800bc2c <__gethex+0xb4>
 800bc22:	2400      	movs	r4, #0
 800bc24:	4626      	mov	r6, r4
 800bc26:	e7e1      	b.n	800bbec <__gethex+0x74>
 800bc28:	2e00      	cmp	r6, #0
 800bc2a:	d1f7      	bne.n	800bc1c <__gethex+0xa4>
 800bc2c:	782b      	ldrb	r3, [r5, #0]
 800bc2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc32:	2b50      	cmp	r3, #80	; 0x50
 800bc34:	d13d      	bne.n	800bcb2 <__gethex+0x13a>
 800bc36:	786b      	ldrb	r3, [r5, #1]
 800bc38:	2b2b      	cmp	r3, #43	; 0x2b
 800bc3a:	d02f      	beq.n	800bc9c <__gethex+0x124>
 800bc3c:	2b2d      	cmp	r3, #45	; 0x2d
 800bc3e:	d031      	beq.n	800bca4 <__gethex+0x12c>
 800bc40:	f04f 0b00 	mov.w	fp, #0
 800bc44:	1c69      	adds	r1, r5, #1
 800bc46:	7808      	ldrb	r0, [r1, #0]
 800bc48:	f7ff ff81 	bl	800bb4e <__hexdig_fun>
 800bc4c:	1e42      	subs	r2, r0, #1
 800bc4e:	b2d2      	uxtb	r2, r2
 800bc50:	2a18      	cmp	r2, #24
 800bc52:	d82e      	bhi.n	800bcb2 <__gethex+0x13a>
 800bc54:	f1a0 0210 	sub.w	r2, r0, #16
 800bc58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc5c:	f7ff ff77 	bl	800bb4e <__hexdig_fun>
 800bc60:	f100 3cff 	add.w	ip, r0, #4294967295
 800bc64:	fa5f fc8c 	uxtb.w	ip, ip
 800bc68:	f1bc 0f18 	cmp.w	ip, #24
 800bc6c:	d91d      	bls.n	800bcaa <__gethex+0x132>
 800bc6e:	f1bb 0f00 	cmp.w	fp, #0
 800bc72:	d000      	beq.n	800bc76 <__gethex+0xfe>
 800bc74:	4252      	negs	r2, r2
 800bc76:	4416      	add	r6, r2
 800bc78:	f8ca 1000 	str.w	r1, [sl]
 800bc7c:	b1dc      	cbz	r4, 800bcb6 <__gethex+0x13e>
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	bf14      	ite	ne
 800bc84:	f04f 0800 	movne.w	r8, #0
 800bc88:	f04f 0806 	moveq.w	r8, #6
 800bc8c:	4640      	mov	r0, r8
 800bc8e:	b005      	add	sp, #20
 800bc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc94:	4645      	mov	r5, r8
 800bc96:	4626      	mov	r6, r4
 800bc98:	2401      	movs	r4, #1
 800bc9a:	e7c7      	b.n	800bc2c <__gethex+0xb4>
 800bc9c:	f04f 0b00 	mov.w	fp, #0
 800bca0:	1ca9      	adds	r1, r5, #2
 800bca2:	e7d0      	b.n	800bc46 <__gethex+0xce>
 800bca4:	f04f 0b01 	mov.w	fp, #1
 800bca8:	e7fa      	b.n	800bca0 <__gethex+0x128>
 800bcaa:	230a      	movs	r3, #10
 800bcac:	fb03 0002 	mla	r0, r3, r2, r0
 800bcb0:	e7d0      	b.n	800bc54 <__gethex+0xdc>
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	e7e0      	b.n	800bc78 <__gethex+0x100>
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	eba5 0308 	sub.w	r3, r5, r8
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	2b07      	cmp	r3, #7
 800bcc0:	dc0a      	bgt.n	800bcd8 <__gethex+0x160>
 800bcc2:	4648      	mov	r0, r9
 800bcc4:	f000 fa5c 	bl	800c180 <_Balloc>
 800bcc8:	4604      	mov	r4, r0
 800bcca:	b940      	cbnz	r0, 800bcde <__gethex+0x166>
 800bccc:	4602      	mov	r2, r0
 800bcce:	21e4      	movs	r1, #228	; 0xe4
 800bcd0:	4b61      	ldr	r3, [pc, #388]	; (800be58 <__gethex+0x2e0>)
 800bcd2:	4862      	ldr	r0, [pc, #392]	; (800be5c <__gethex+0x2e4>)
 800bcd4:	f001 fb12 	bl	800d2fc <__assert_func>
 800bcd8:	3101      	adds	r1, #1
 800bcda:	105b      	asrs	r3, r3, #1
 800bcdc:	e7ef      	b.n	800bcbe <__gethex+0x146>
 800bcde:	2300      	movs	r3, #0
 800bce0:	469b      	mov	fp, r3
 800bce2:	f100 0a14 	add.w	sl, r0, #20
 800bce6:	f8cd a004 	str.w	sl, [sp, #4]
 800bcea:	45a8      	cmp	r8, r5
 800bcec:	d344      	bcc.n	800bd78 <__gethex+0x200>
 800bcee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bcf2:	4658      	mov	r0, fp
 800bcf4:	f848 bb04 	str.w	fp, [r8], #4
 800bcf8:	eba8 080a 	sub.w	r8, r8, sl
 800bcfc:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800bd00:	6122      	str	r2, [r4, #16]
 800bd02:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800bd06:	f000 fb2d 	bl	800c364 <__hi0bits>
 800bd0a:	683d      	ldr	r5, [r7, #0]
 800bd0c:	eba8 0800 	sub.w	r8, r8, r0
 800bd10:	45a8      	cmp	r8, r5
 800bd12:	dd59      	ble.n	800bdc8 <__gethex+0x250>
 800bd14:	eba8 0805 	sub.w	r8, r8, r5
 800bd18:	4641      	mov	r1, r8
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f000 feab 	bl	800ca76 <__any_on>
 800bd20:	4683      	mov	fp, r0
 800bd22:	b1b8      	cbz	r0, 800bd54 <__gethex+0x1dc>
 800bd24:	f04f 0b01 	mov.w	fp, #1
 800bd28:	f108 33ff 	add.w	r3, r8, #4294967295
 800bd2c:	1159      	asrs	r1, r3, #5
 800bd2e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bd32:	f003 021f 	and.w	r2, r3, #31
 800bd36:	fa0b f202 	lsl.w	r2, fp, r2
 800bd3a:	420a      	tst	r2, r1
 800bd3c:	d00a      	beq.n	800bd54 <__gethex+0x1dc>
 800bd3e:	455b      	cmp	r3, fp
 800bd40:	dd06      	ble.n	800bd50 <__gethex+0x1d8>
 800bd42:	4620      	mov	r0, r4
 800bd44:	f1a8 0102 	sub.w	r1, r8, #2
 800bd48:	f000 fe95 	bl	800ca76 <__any_on>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d138      	bne.n	800bdc2 <__gethex+0x24a>
 800bd50:	f04f 0b02 	mov.w	fp, #2
 800bd54:	4641      	mov	r1, r8
 800bd56:	4620      	mov	r0, r4
 800bd58:	f7ff fea6 	bl	800baa8 <rshift>
 800bd5c:	4446      	add	r6, r8
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	42b3      	cmp	r3, r6
 800bd62:	da41      	bge.n	800bde8 <__gethex+0x270>
 800bd64:	4621      	mov	r1, r4
 800bd66:	4648      	mov	r0, r9
 800bd68:	f000 fa4a 	bl	800c200 <_Bfree>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd70:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	e789      	b.n	800bc8c <__gethex+0x114>
 800bd78:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bd7c:	2a2e      	cmp	r2, #46	; 0x2e
 800bd7e:	d014      	beq.n	800bdaa <__gethex+0x232>
 800bd80:	2b20      	cmp	r3, #32
 800bd82:	d106      	bne.n	800bd92 <__gethex+0x21a>
 800bd84:	9b01      	ldr	r3, [sp, #4]
 800bd86:	f843 bb04 	str.w	fp, [r3], #4
 800bd8a:	f04f 0b00 	mov.w	fp, #0
 800bd8e:	9301      	str	r3, [sp, #4]
 800bd90:	465b      	mov	r3, fp
 800bd92:	7828      	ldrb	r0, [r5, #0]
 800bd94:	9303      	str	r3, [sp, #12]
 800bd96:	f7ff feda 	bl	800bb4e <__hexdig_fun>
 800bd9a:	9b03      	ldr	r3, [sp, #12]
 800bd9c:	f000 000f 	and.w	r0, r0, #15
 800bda0:	4098      	lsls	r0, r3
 800bda2:	ea4b 0b00 	orr.w	fp, fp, r0
 800bda6:	3304      	adds	r3, #4
 800bda8:	e79f      	b.n	800bcea <__gethex+0x172>
 800bdaa:	45a8      	cmp	r8, r5
 800bdac:	d8e8      	bhi.n	800bd80 <__gethex+0x208>
 800bdae:	2201      	movs	r2, #1
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	4928      	ldr	r1, [pc, #160]	; (800be54 <__gethex+0x2dc>)
 800bdb4:	9303      	str	r3, [sp, #12]
 800bdb6:	f7fe fee5 	bl	800ab84 <strncmp>
 800bdba:	9b03      	ldr	r3, [sp, #12]
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d1df      	bne.n	800bd80 <__gethex+0x208>
 800bdc0:	e793      	b.n	800bcea <__gethex+0x172>
 800bdc2:	f04f 0b03 	mov.w	fp, #3
 800bdc6:	e7c5      	b.n	800bd54 <__gethex+0x1dc>
 800bdc8:	da0b      	bge.n	800bde2 <__gethex+0x26a>
 800bdca:	eba5 0808 	sub.w	r8, r5, r8
 800bdce:	4621      	mov	r1, r4
 800bdd0:	4642      	mov	r2, r8
 800bdd2:	4648      	mov	r0, r9
 800bdd4:	f000 fc2c 	bl	800c630 <__lshift>
 800bdd8:	4604      	mov	r4, r0
 800bdda:	eba6 0608 	sub.w	r6, r6, r8
 800bdde:	f100 0a14 	add.w	sl, r0, #20
 800bde2:	f04f 0b00 	mov.w	fp, #0
 800bde6:	e7ba      	b.n	800bd5e <__gethex+0x1e6>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	42b3      	cmp	r3, r6
 800bdec:	dd74      	ble.n	800bed8 <__gethex+0x360>
 800bdee:	1b9e      	subs	r6, r3, r6
 800bdf0:	42b5      	cmp	r5, r6
 800bdf2:	dc35      	bgt.n	800be60 <__gethex+0x2e8>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d023      	beq.n	800be42 <__gethex+0x2ca>
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d025      	beq.n	800be4a <__gethex+0x2d2>
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d115      	bne.n	800be2e <__gethex+0x2b6>
 800be02:	42b5      	cmp	r5, r6
 800be04:	d113      	bne.n	800be2e <__gethex+0x2b6>
 800be06:	2d01      	cmp	r5, #1
 800be08:	d10b      	bne.n	800be22 <__gethex+0x2aa>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	9a02      	ldr	r2, [sp, #8]
 800be0e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800be12:	6013      	str	r3, [r2, #0]
 800be14:	2301      	movs	r3, #1
 800be16:	6123      	str	r3, [r4, #16]
 800be18:	f8ca 3000 	str.w	r3, [sl]
 800be1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be1e:	601c      	str	r4, [r3, #0]
 800be20:	e734      	b.n	800bc8c <__gethex+0x114>
 800be22:	4620      	mov	r0, r4
 800be24:	1e69      	subs	r1, r5, #1
 800be26:	f000 fe26 	bl	800ca76 <__any_on>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d1ed      	bne.n	800be0a <__gethex+0x292>
 800be2e:	4621      	mov	r1, r4
 800be30:	4648      	mov	r0, r9
 800be32:	f000 f9e5 	bl	800c200 <_Bfree>
 800be36:	2300      	movs	r3, #0
 800be38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be3a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800be3e:	6013      	str	r3, [r2, #0]
 800be40:	e724      	b.n	800bc8c <__gethex+0x114>
 800be42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1f2      	bne.n	800be2e <__gethex+0x2b6>
 800be48:	e7df      	b.n	800be0a <__gethex+0x292>
 800be4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1dc      	bne.n	800be0a <__gethex+0x292>
 800be50:	e7ed      	b.n	800be2e <__gethex+0x2b6>
 800be52:	bf00      	nop
 800be54:	0800e246 	.word	0x0800e246
 800be58:	0800eae7 	.word	0x0800eae7
 800be5c:	0800eaf8 	.word	0x0800eaf8
 800be60:	f106 38ff 	add.w	r8, r6, #4294967295
 800be64:	f1bb 0f00 	cmp.w	fp, #0
 800be68:	d133      	bne.n	800bed2 <__gethex+0x35a>
 800be6a:	f1b8 0f00 	cmp.w	r8, #0
 800be6e:	d004      	beq.n	800be7a <__gethex+0x302>
 800be70:	4641      	mov	r1, r8
 800be72:	4620      	mov	r0, r4
 800be74:	f000 fdff 	bl	800ca76 <__any_on>
 800be78:	4683      	mov	fp, r0
 800be7a:	2301      	movs	r3, #1
 800be7c:	ea4f 1268 	mov.w	r2, r8, asr #5
 800be80:	f008 081f 	and.w	r8, r8, #31
 800be84:	fa03 f308 	lsl.w	r3, r3, r8
 800be88:	f04f 0802 	mov.w	r8, #2
 800be8c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800be90:	4631      	mov	r1, r6
 800be92:	4213      	tst	r3, r2
 800be94:	4620      	mov	r0, r4
 800be96:	bf18      	it	ne
 800be98:	f04b 0b02 	orrne.w	fp, fp, #2
 800be9c:	1bad      	subs	r5, r5, r6
 800be9e:	f7ff fe03 	bl	800baa8 <rshift>
 800bea2:	687e      	ldr	r6, [r7, #4]
 800bea4:	f1bb 0f00 	cmp.w	fp, #0
 800bea8:	d04a      	beq.n	800bf40 <__gethex+0x3c8>
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2b02      	cmp	r3, #2
 800beae:	d016      	beq.n	800bede <__gethex+0x366>
 800beb0:	2b03      	cmp	r3, #3
 800beb2:	d018      	beq.n	800bee6 <__gethex+0x36e>
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d109      	bne.n	800becc <__gethex+0x354>
 800beb8:	f01b 0f02 	tst.w	fp, #2
 800bebc:	d006      	beq.n	800becc <__gethex+0x354>
 800bebe:	f8da 3000 	ldr.w	r3, [sl]
 800bec2:	ea4b 0b03 	orr.w	fp, fp, r3
 800bec6:	f01b 0f01 	tst.w	fp, #1
 800beca:	d10f      	bne.n	800beec <__gethex+0x374>
 800becc:	f048 0810 	orr.w	r8, r8, #16
 800bed0:	e036      	b.n	800bf40 <__gethex+0x3c8>
 800bed2:	f04f 0b01 	mov.w	fp, #1
 800bed6:	e7d0      	b.n	800be7a <__gethex+0x302>
 800bed8:	f04f 0801 	mov.w	r8, #1
 800bedc:	e7e2      	b.n	800bea4 <__gethex+0x32c>
 800bede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bee0:	f1c3 0301 	rsb	r3, r3, #1
 800bee4:	930f      	str	r3, [sp, #60]	; 0x3c
 800bee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d0ef      	beq.n	800becc <__gethex+0x354>
 800beec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bef0:	f104 0214 	add.w	r2, r4, #20
 800bef4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bef8:	9301      	str	r3, [sp, #4]
 800befa:	2300      	movs	r3, #0
 800befc:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bf00:	4694      	mov	ip, r2
 800bf02:	f852 1b04 	ldr.w	r1, [r2], #4
 800bf06:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bf0a:	d01e      	beq.n	800bf4a <__gethex+0x3d2>
 800bf0c:	3101      	adds	r1, #1
 800bf0e:	f8cc 1000 	str.w	r1, [ip]
 800bf12:	f1b8 0f02 	cmp.w	r8, #2
 800bf16:	f104 0214 	add.w	r2, r4, #20
 800bf1a:	d13d      	bne.n	800bf98 <__gethex+0x420>
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	42ab      	cmp	r3, r5
 800bf22:	d10b      	bne.n	800bf3c <__gethex+0x3c4>
 800bf24:	2301      	movs	r3, #1
 800bf26:	1169      	asrs	r1, r5, #5
 800bf28:	f005 051f 	and.w	r5, r5, #31
 800bf2c:	fa03 f505 	lsl.w	r5, r3, r5
 800bf30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf34:	421d      	tst	r5, r3
 800bf36:	bf18      	it	ne
 800bf38:	f04f 0801 	movne.w	r8, #1
 800bf3c:	f048 0820 	orr.w	r8, r8, #32
 800bf40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf42:	601c      	str	r4, [r3, #0]
 800bf44:	9b02      	ldr	r3, [sp, #8]
 800bf46:	601e      	str	r6, [r3, #0]
 800bf48:	e6a0      	b.n	800bc8c <__gethex+0x114>
 800bf4a:	4290      	cmp	r0, r2
 800bf4c:	f842 3c04 	str.w	r3, [r2, #-4]
 800bf50:	d8d6      	bhi.n	800bf00 <__gethex+0x388>
 800bf52:	68a2      	ldr	r2, [r4, #8]
 800bf54:	4593      	cmp	fp, r2
 800bf56:	db17      	blt.n	800bf88 <__gethex+0x410>
 800bf58:	6861      	ldr	r1, [r4, #4]
 800bf5a:	4648      	mov	r0, r9
 800bf5c:	3101      	adds	r1, #1
 800bf5e:	f000 f90f 	bl	800c180 <_Balloc>
 800bf62:	4682      	mov	sl, r0
 800bf64:	b918      	cbnz	r0, 800bf6e <__gethex+0x3f6>
 800bf66:	4602      	mov	r2, r0
 800bf68:	2184      	movs	r1, #132	; 0x84
 800bf6a:	4b1a      	ldr	r3, [pc, #104]	; (800bfd4 <__gethex+0x45c>)
 800bf6c:	e6b1      	b.n	800bcd2 <__gethex+0x15a>
 800bf6e:	6922      	ldr	r2, [r4, #16]
 800bf70:	f104 010c 	add.w	r1, r4, #12
 800bf74:	3202      	adds	r2, #2
 800bf76:	0092      	lsls	r2, r2, #2
 800bf78:	300c      	adds	r0, #12
 800bf7a:	f7fe fec8 	bl	800ad0e <memcpy>
 800bf7e:	4621      	mov	r1, r4
 800bf80:	4648      	mov	r0, r9
 800bf82:	f000 f93d 	bl	800c200 <_Bfree>
 800bf86:	4654      	mov	r4, sl
 800bf88:	6922      	ldr	r2, [r4, #16]
 800bf8a:	1c51      	adds	r1, r2, #1
 800bf8c:	6121      	str	r1, [r4, #16]
 800bf8e:	2101      	movs	r1, #1
 800bf90:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bf94:	6151      	str	r1, [r2, #20]
 800bf96:	e7bc      	b.n	800bf12 <__gethex+0x39a>
 800bf98:	6921      	ldr	r1, [r4, #16]
 800bf9a:	4559      	cmp	r1, fp
 800bf9c:	dd0b      	ble.n	800bfb6 <__gethex+0x43e>
 800bf9e:	2101      	movs	r1, #1
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	f7ff fd81 	bl	800baa8 <rshift>
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	3601      	adds	r6, #1
 800bfaa:	42b3      	cmp	r3, r6
 800bfac:	f6ff aeda 	blt.w	800bd64 <__gethex+0x1ec>
 800bfb0:	f04f 0801 	mov.w	r8, #1
 800bfb4:	e7c2      	b.n	800bf3c <__gethex+0x3c4>
 800bfb6:	f015 051f 	ands.w	r5, r5, #31
 800bfba:	d0f9      	beq.n	800bfb0 <__gethex+0x438>
 800bfbc:	9b01      	ldr	r3, [sp, #4]
 800bfbe:	f1c5 0520 	rsb	r5, r5, #32
 800bfc2:	441a      	add	r2, r3
 800bfc4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bfc8:	f000 f9cc 	bl	800c364 <__hi0bits>
 800bfcc:	42a8      	cmp	r0, r5
 800bfce:	dbe6      	blt.n	800bf9e <__gethex+0x426>
 800bfd0:	e7ee      	b.n	800bfb0 <__gethex+0x438>
 800bfd2:	bf00      	nop
 800bfd4:	0800eae7 	.word	0x0800eae7

0800bfd8 <L_shift>:
 800bfd8:	f1c2 0208 	rsb	r2, r2, #8
 800bfdc:	0092      	lsls	r2, r2, #2
 800bfde:	b570      	push	{r4, r5, r6, lr}
 800bfe0:	f1c2 0620 	rsb	r6, r2, #32
 800bfe4:	6843      	ldr	r3, [r0, #4]
 800bfe6:	6804      	ldr	r4, [r0, #0]
 800bfe8:	fa03 f506 	lsl.w	r5, r3, r6
 800bfec:	432c      	orrs	r4, r5
 800bfee:	40d3      	lsrs	r3, r2
 800bff0:	6004      	str	r4, [r0, #0]
 800bff2:	f840 3f04 	str.w	r3, [r0, #4]!
 800bff6:	4288      	cmp	r0, r1
 800bff8:	d3f4      	bcc.n	800bfe4 <L_shift+0xc>
 800bffa:	bd70      	pop	{r4, r5, r6, pc}

0800bffc <__match>:
 800bffc:	b530      	push	{r4, r5, lr}
 800bffe:	6803      	ldr	r3, [r0, #0]
 800c000:	3301      	adds	r3, #1
 800c002:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c006:	b914      	cbnz	r4, 800c00e <__match+0x12>
 800c008:	6003      	str	r3, [r0, #0]
 800c00a:	2001      	movs	r0, #1
 800c00c:	bd30      	pop	{r4, r5, pc}
 800c00e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c012:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c016:	2d19      	cmp	r5, #25
 800c018:	bf98      	it	ls
 800c01a:	3220      	addls	r2, #32
 800c01c:	42a2      	cmp	r2, r4
 800c01e:	d0f0      	beq.n	800c002 <__match+0x6>
 800c020:	2000      	movs	r0, #0
 800c022:	e7f3      	b.n	800c00c <__match+0x10>

0800c024 <__hexnan>:
 800c024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c028:	2500      	movs	r5, #0
 800c02a:	680b      	ldr	r3, [r1, #0]
 800c02c:	4682      	mov	sl, r0
 800c02e:	115e      	asrs	r6, r3, #5
 800c030:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c034:	f013 031f 	ands.w	r3, r3, #31
 800c038:	bf18      	it	ne
 800c03a:	3604      	addne	r6, #4
 800c03c:	1f37      	subs	r7, r6, #4
 800c03e:	4690      	mov	r8, r2
 800c040:	46b9      	mov	r9, r7
 800c042:	463c      	mov	r4, r7
 800c044:	46ab      	mov	fp, r5
 800c046:	b087      	sub	sp, #28
 800c048:	6801      	ldr	r1, [r0, #0]
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	f846 5c04 	str.w	r5, [r6, #-4]
 800c050:	9502      	str	r5, [sp, #8]
 800c052:	784a      	ldrb	r2, [r1, #1]
 800c054:	1c4b      	adds	r3, r1, #1
 800c056:	9303      	str	r3, [sp, #12]
 800c058:	b342      	cbz	r2, 800c0ac <__hexnan+0x88>
 800c05a:	4610      	mov	r0, r2
 800c05c:	9105      	str	r1, [sp, #20]
 800c05e:	9204      	str	r2, [sp, #16]
 800c060:	f7ff fd75 	bl	800bb4e <__hexdig_fun>
 800c064:	2800      	cmp	r0, #0
 800c066:	d14f      	bne.n	800c108 <__hexnan+0xe4>
 800c068:	9a04      	ldr	r2, [sp, #16]
 800c06a:	9905      	ldr	r1, [sp, #20]
 800c06c:	2a20      	cmp	r2, #32
 800c06e:	d818      	bhi.n	800c0a2 <__hexnan+0x7e>
 800c070:	9b02      	ldr	r3, [sp, #8]
 800c072:	459b      	cmp	fp, r3
 800c074:	dd13      	ble.n	800c09e <__hexnan+0x7a>
 800c076:	454c      	cmp	r4, r9
 800c078:	d206      	bcs.n	800c088 <__hexnan+0x64>
 800c07a:	2d07      	cmp	r5, #7
 800c07c:	dc04      	bgt.n	800c088 <__hexnan+0x64>
 800c07e:	462a      	mov	r2, r5
 800c080:	4649      	mov	r1, r9
 800c082:	4620      	mov	r0, r4
 800c084:	f7ff ffa8 	bl	800bfd8 <L_shift>
 800c088:	4544      	cmp	r4, r8
 800c08a:	d950      	bls.n	800c12e <__hexnan+0x10a>
 800c08c:	2300      	movs	r3, #0
 800c08e:	f1a4 0904 	sub.w	r9, r4, #4
 800c092:	f844 3c04 	str.w	r3, [r4, #-4]
 800c096:	461d      	mov	r5, r3
 800c098:	464c      	mov	r4, r9
 800c09a:	f8cd b008 	str.w	fp, [sp, #8]
 800c09e:	9903      	ldr	r1, [sp, #12]
 800c0a0:	e7d7      	b.n	800c052 <__hexnan+0x2e>
 800c0a2:	2a29      	cmp	r2, #41	; 0x29
 800c0a4:	d155      	bne.n	800c152 <__hexnan+0x12e>
 800c0a6:	3102      	adds	r1, #2
 800c0a8:	f8ca 1000 	str.w	r1, [sl]
 800c0ac:	f1bb 0f00 	cmp.w	fp, #0
 800c0b0:	d04f      	beq.n	800c152 <__hexnan+0x12e>
 800c0b2:	454c      	cmp	r4, r9
 800c0b4:	d206      	bcs.n	800c0c4 <__hexnan+0xa0>
 800c0b6:	2d07      	cmp	r5, #7
 800c0b8:	dc04      	bgt.n	800c0c4 <__hexnan+0xa0>
 800c0ba:	462a      	mov	r2, r5
 800c0bc:	4649      	mov	r1, r9
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f7ff ff8a 	bl	800bfd8 <L_shift>
 800c0c4:	4544      	cmp	r4, r8
 800c0c6:	d934      	bls.n	800c132 <__hexnan+0x10e>
 800c0c8:	4623      	mov	r3, r4
 800c0ca:	f1a8 0204 	sub.w	r2, r8, #4
 800c0ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800c0d2:	429f      	cmp	r7, r3
 800c0d4:	f842 1f04 	str.w	r1, [r2, #4]!
 800c0d8:	d2f9      	bcs.n	800c0ce <__hexnan+0xaa>
 800c0da:	1b3b      	subs	r3, r7, r4
 800c0dc:	f023 0303 	bic.w	r3, r3, #3
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	3e03      	subs	r6, #3
 800c0e4:	3401      	adds	r4, #1
 800c0e6:	42a6      	cmp	r6, r4
 800c0e8:	bf38      	it	cc
 800c0ea:	2304      	movcc	r3, #4
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	4443      	add	r3, r8
 800c0f0:	f843 2b04 	str.w	r2, [r3], #4
 800c0f4:	429f      	cmp	r7, r3
 800c0f6:	d2fb      	bcs.n	800c0f0 <__hexnan+0xcc>
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	b91b      	cbnz	r3, 800c104 <__hexnan+0xe0>
 800c0fc:	4547      	cmp	r7, r8
 800c0fe:	d126      	bne.n	800c14e <__hexnan+0x12a>
 800c100:	2301      	movs	r3, #1
 800c102:	603b      	str	r3, [r7, #0]
 800c104:	2005      	movs	r0, #5
 800c106:	e025      	b.n	800c154 <__hexnan+0x130>
 800c108:	3501      	adds	r5, #1
 800c10a:	2d08      	cmp	r5, #8
 800c10c:	f10b 0b01 	add.w	fp, fp, #1
 800c110:	dd06      	ble.n	800c120 <__hexnan+0xfc>
 800c112:	4544      	cmp	r4, r8
 800c114:	d9c3      	bls.n	800c09e <__hexnan+0x7a>
 800c116:	2300      	movs	r3, #0
 800c118:	2501      	movs	r5, #1
 800c11a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c11e:	3c04      	subs	r4, #4
 800c120:	6822      	ldr	r2, [r4, #0]
 800c122:	f000 000f 	and.w	r0, r0, #15
 800c126:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c12a:	6020      	str	r0, [r4, #0]
 800c12c:	e7b7      	b.n	800c09e <__hexnan+0x7a>
 800c12e:	2508      	movs	r5, #8
 800c130:	e7b5      	b.n	800c09e <__hexnan+0x7a>
 800c132:	9b01      	ldr	r3, [sp, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d0df      	beq.n	800c0f8 <__hexnan+0xd4>
 800c138:	f04f 32ff 	mov.w	r2, #4294967295
 800c13c:	f1c3 0320 	rsb	r3, r3, #32
 800c140:	40da      	lsrs	r2, r3
 800c142:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c146:	4013      	ands	r3, r2
 800c148:	f846 3c04 	str.w	r3, [r6, #-4]
 800c14c:	e7d4      	b.n	800c0f8 <__hexnan+0xd4>
 800c14e:	3f04      	subs	r7, #4
 800c150:	e7d2      	b.n	800c0f8 <__hexnan+0xd4>
 800c152:	2004      	movs	r0, #4
 800c154:	b007      	add	sp, #28
 800c156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c15a <__ascii_mbtowc>:
 800c15a:	b082      	sub	sp, #8
 800c15c:	b901      	cbnz	r1, 800c160 <__ascii_mbtowc+0x6>
 800c15e:	a901      	add	r1, sp, #4
 800c160:	b142      	cbz	r2, 800c174 <__ascii_mbtowc+0x1a>
 800c162:	b14b      	cbz	r3, 800c178 <__ascii_mbtowc+0x1e>
 800c164:	7813      	ldrb	r3, [r2, #0]
 800c166:	600b      	str	r3, [r1, #0]
 800c168:	7812      	ldrb	r2, [r2, #0]
 800c16a:	1e10      	subs	r0, r2, #0
 800c16c:	bf18      	it	ne
 800c16e:	2001      	movne	r0, #1
 800c170:	b002      	add	sp, #8
 800c172:	4770      	bx	lr
 800c174:	4610      	mov	r0, r2
 800c176:	e7fb      	b.n	800c170 <__ascii_mbtowc+0x16>
 800c178:	f06f 0001 	mvn.w	r0, #1
 800c17c:	e7f8      	b.n	800c170 <__ascii_mbtowc+0x16>
	...

0800c180 <_Balloc>:
 800c180:	b570      	push	{r4, r5, r6, lr}
 800c182:	69c6      	ldr	r6, [r0, #28]
 800c184:	4604      	mov	r4, r0
 800c186:	460d      	mov	r5, r1
 800c188:	b976      	cbnz	r6, 800c1a8 <_Balloc+0x28>
 800c18a:	2010      	movs	r0, #16
 800c18c:	f7fc fad6 	bl	800873c <malloc>
 800c190:	4602      	mov	r2, r0
 800c192:	61e0      	str	r0, [r4, #28]
 800c194:	b920      	cbnz	r0, 800c1a0 <_Balloc+0x20>
 800c196:	216b      	movs	r1, #107	; 0x6b
 800c198:	4b17      	ldr	r3, [pc, #92]	; (800c1f8 <_Balloc+0x78>)
 800c19a:	4818      	ldr	r0, [pc, #96]	; (800c1fc <_Balloc+0x7c>)
 800c19c:	f001 f8ae 	bl	800d2fc <__assert_func>
 800c1a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1a4:	6006      	str	r6, [r0, #0]
 800c1a6:	60c6      	str	r6, [r0, #12]
 800c1a8:	69e6      	ldr	r6, [r4, #28]
 800c1aa:	68f3      	ldr	r3, [r6, #12]
 800c1ac:	b183      	cbz	r3, 800c1d0 <_Balloc+0x50>
 800c1ae:	69e3      	ldr	r3, [r4, #28]
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1b6:	b9b8      	cbnz	r0, 800c1e8 <_Balloc+0x68>
 800c1b8:	2101      	movs	r1, #1
 800c1ba:	fa01 f605 	lsl.w	r6, r1, r5
 800c1be:	1d72      	adds	r2, r6, #5
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	0092      	lsls	r2, r2, #2
 800c1c4:	f7fc faa6 	bl	8008714 <_calloc_r>
 800c1c8:	b160      	cbz	r0, 800c1e4 <_Balloc+0x64>
 800c1ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1ce:	e00e      	b.n	800c1ee <_Balloc+0x6e>
 800c1d0:	2221      	movs	r2, #33	; 0x21
 800c1d2:	2104      	movs	r1, #4
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f7fc fa9d 	bl	8008714 <_calloc_r>
 800c1da:	69e3      	ldr	r3, [r4, #28]
 800c1dc:	60f0      	str	r0, [r6, #12]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1e4      	bne.n	800c1ae <_Balloc+0x2e>
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	bd70      	pop	{r4, r5, r6, pc}
 800c1e8:	6802      	ldr	r2, [r0, #0]
 800c1ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c1f4:	e7f7      	b.n	800c1e6 <_Balloc+0x66>
 800c1f6:	bf00      	nop
 800c1f8:	0800ea78 	.word	0x0800ea78
 800c1fc:	0800eb58 	.word	0x0800eb58

0800c200 <_Bfree>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	69c6      	ldr	r6, [r0, #28]
 800c204:	4605      	mov	r5, r0
 800c206:	460c      	mov	r4, r1
 800c208:	b976      	cbnz	r6, 800c228 <_Bfree+0x28>
 800c20a:	2010      	movs	r0, #16
 800c20c:	f7fc fa96 	bl	800873c <malloc>
 800c210:	4602      	mov	r2, r0
 800c212:	61e8      	str	r0, [r5, #28]
 800c214:	b920      	cbnz	r0, 800c220 <_Bfree+0x20>
 800c216:	218f      	movs	r1, #143	; 0x8f
 800c218:	4b08      	ldr	r3, [pc, #32]	; (800c23c <_Bfree+0x3c>)
 800c21a:	4809      	ldr	r0, [pc, #36]	; (800c240 <_Bfree+0x40>)
 800c21c:	f001 f86e 	bl	800d2fc <__assert_func>
 800c220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c224:	6006      	str	r6, [r0, #0]
 800c226:	60c6      	str	r6, [r0, #12]
 800c228:	b13c      	cbz	r4, 800c23a <_Bfree+0x3a>
 800c22a:	69eb      	ldr	r3, [r5, #28]
 800c22c:	6862      	ldr	r2, [r4, #4]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c234:	6021      	str	r1, [r4, #0]
 800c236:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	0800ea78 	.word	0x0800ea78
 800c240:	0800eb58 	.word	0x0800eb58

0800c244 <__multadd>:
 800c244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c248:	4607      	mov	r7, r0
 800c24a:	460c      	mov	r4, r1
 800c24c:	461e      	mov	r6, r3
 800c24e:	2000      	movs	r0, #0
 800c250:	690d      	ldr	r5, [r1, #16]
 800c252:	f101 0c14 	add.w	ip, r1, #20
 800c256:	f8dc 3000 	ldr.w	r3, [ip]
 800c25a:	3001      	adds	r0, #1
 800c25c:	b299      	uxth	r1, r3
 800c25e:	fb02 6101 	mla	r1, r2, r1, r6
 800c262:	0c1e      	lsrs	r6, r3, #16
 800c264:	0c0b      	lsrs	r3, r1, #16
 800c266:	fb02 3306 	mla	r3, r2, r6, r3
 800c26a:	b289      	uxth	r1, r1
 800c26c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c270:	4285      	cmp	r5, r0
 800c272:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c276:	f84c 1b04 	str.w	r1, [ip], #4
 800c27a:	dcec      	bgt.n	800c256 <__multadd+0x12>
 800c27c:	b30e      	cbz	r6, 800c2c2 <__multadd+0x7e>
 800c27e:	68a3      	ldr	r3, [r4, #8]
 800c280:	42ab      	cmp	r3, r5
 800c282:	dc19      	bgt.n	800c2b8 <__multadd+0x74>
 800c284:	6861      	ldr	r1, [r4, #4]
 800c286:	4638      	mov	r0, r7
 800c288:	3101      	adds	r1, #1
 800c28a:	f7ff ff79 	bl	800c180 <_Balloc>
 800c28e:	4680      	mov	r8, r0
 800c290:	b928      	cbnz	r0, 800c29e <__multadd+0x5a>
 800c292:	4602      	mov	r2, r0
 800c294:	21ba      	movs	r1, #186	; 0xba
 800c296:	4b0c      	ldr	r3, [pc, #48]	; (800c2c8 <__multadd+0x84>)
 800c298:	480c      	ldr	r0, [pc, #48]	; (800c2cc <__multadd+0x88>)
 800c29a:	f001 f82f 	bl	800d2fc <__assert_func>
 800c29e:	6922      	ldr	r2, [r4, #16]
 800c2a0:	f104 010c 	add.w	r1, r4, #12
 800c2a4:	3202      	adds	r2, #2
 800c2a6:	0092      	lsls	r2, r2, #2
 800c2a8:	300c      	adds	r0, #12
 800c2aa:	f7fe fd30 	bl	800ad0e <memcpy>
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4638      	mov	r0, r7
 800c2b2:	f7ff ffa5 	bl	800c200 <_Bfree>
 800c2b6:	4644      	mov	r4, r8
 800c2b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2bc:	3501      	adds	r5, #1
 800c2be:	615e      	str	r6, [r3, #20]
 800c2c0:	6125      	str	r5, [r4, #16]
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c8:	0800eae7 	.word	0x0800eae7
 800c2cc:	0800eb58 	.word	0x0800eb58

0800c2d0 <__s2b>:
 800c2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d4:	4615      	mov	r5, r2
 800c2d6:	2209      	movs	r2, #9
 800c2d8:	461f      	mov	r7, r3
 800c2da:	3308      	adds	r3, #8
 800c2dc:	460c      	mov	r4, r1
 800c2de:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	db09      	blt.n	800c300 <__s2b+0x30>
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	f7ff ff47 	bl	800c180 <_Balloc>
 800c2f2:	b940      	cbnz	r0, 800c306 <__s2b+0x36>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	21d3      	movs	r1, #211	; 0xd3
 800c2f8:	4b18      	ldr	r3, [pc, #96]	; (800c35c <__s2b+0x8c>)
 800c2fa:	4819      	ldr	r0, [pc, #100]	; (800c360 <__s2b+0x90>)
 800c2fc:	f000 fffe 	bl	800d2fc <__assert_func>
 800c300:	0052      	lsls	r2, r2, #1
 800c302:	3101      	adds	r1, #1
 800c304:	e7f0      	b.n	800c2e8 <__s2b+0x18>
 800c306:	9b08      	ldr	r3, [sp, #32]
 800c308:	2d09      	cmp	r5, #9
 800c30a:	6143      	str	r3, [r0, #20]
 800c30c:	f04f 0301 	mov.w	r3, #1
 800c310:	6103      	str	r3, [r0, #16]
 800c312:	dd16      	ble.n	800c342 <__s2b+0x72>
 800c314:	f104 0909 	add.w	r9, r4, #9
 800c318:	46c8      	mov	r8, r9
 800c31a:	442c      	add	r4, r5
 800c31c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c320:	4601      	mov	r1, r0
 800c322:	220a      	movs	r2, #10
 800c324:	4630      	mov	r0, r6
 800c326:	3b30      	subs	r3, #48	; 0x30
 800c328:	f7ff ff8c 	bl	800c244 <__multadd>
 800c32c:	45a0      	cmp	r8, r4
 800c32e:	d1f5      	bne.n	800c31c <__s2b+0x4c>
 800c330:	f1a5 0408 	sub.w	r4, r5, #8
 800c334:	444c      	add	r4, r9
 800c336:	1b2d      	subs	r5, r5, r4
 800c338:	1963      	adds	r3, r4, r5
 800c33a:	42bb      	cmp	r3, r7
 800c33c:	db04      	blt.n	800c348 <__s2b+0x78>
 800c33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c342:	2509      	movs	r5, #9
 800c344:	340a      	adds	r4, #10
 800c346:	e7f6      	b.n	800c336 <__s2b+0x66>
 800c348:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c34c:	4601      	mov	r1, r0
 800c34e:	220a      	movs	r2, #10
 800c350:	4630      	mov	r0, r6
 800c352:	3b30      	subs	r3, #48	; 0x30
 800c354:	f7ff ff76 	bl	800c244 <__multadd>
 800c358:	e7ee      	b.n	800c338 <__s2b+0x68>
 800c35a:	bf00      	nop
 800c35c:	0800eae7 	.word	0x0800eae7
 800c360:	0800eb58 	.word	0x0800eb58

0800c364 <__hi0bits>:
 800c364:	0c02      	lsrs	r2, r0, #16
 800c366:	0412      	lsls	r2, r2, #16
 800c368:	4603      	mov	r3, r0
 800c36a:	b9ca      	cbnz	r2, 800c3a0 <__hi0bits+0x3c>
 800c36c:	0403      	lsls	r3, r0, #16
 800c36e:	2010      	movs	r0, #16
 800c370:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c374:	bf04      	itt	eq
 800c376:	021b      	lsleq	r3, r3, #8
 800c378:	3008      	addeq	r0, #8
 800c37a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c37e:	bf04      	itt	eq
 800c380:	011b      	lsleq	r3, r3, #4
 800c382:	3004      	addeq	r0, #4
 800c384:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c388:	bf04      	itt	eq
 800c38a:	009b      	lsleq	r3, r3, #2
 800c38c:	3002      	addeq	r0, #2
 800c38e:	2b00      	cmp	r3, #0
 800c390:	db05      	blt.n	800c39e <__hi0bits+0x3a>
 800c392:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c396:	f100 0001 	add.w	r0, r0, #1
 800c39a:	bf08      	it	eq
 800c39c:	2020      	moveq	r0, #32
 800c39e:	4770      	bx	lr
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	e7e5      	b.n	800c370 <__hi0bits+0xc>

0800c3a4 <__lo0bits>:
 800c3a4:	6803      	ldr	r3, [r0, #0]
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	f013 0007 	ands.w	r0, r3, #7
 800c3ac:	d00b      	beq.n	800c3c6 <__lo0bits+0x22>
 800c3ae:	07d9      	lsls	r1, r3, #31
 800c3b0:	d421      	bmi.n	800c3f6 <__lo0bits+0x52>
 800c3b2:	0798      	lsls	r0, r3, #30
 800c3b4:	bf49      	itett	mi
 800c3b6:	085b      	lsrmi	r3, r3, #1
 800c3b8:	089b      	lsrpl	r3, r3, #2
 800c3ba:	2001      	movmi	r0, #1
 800c3bc:	6013      	strmi	r3, [r2, #0]
 800c3be:	bf5c      	itt	pl
 800c3c0:	2002      	movpl	r0, #2
 800c3c2:	6013      	strpl	r3, [r2, #0]
 800c3c4:	4770      	bx	lr
 800c3c6:	b299      	uxth	r1, r3
 800c3c8:	b909      	cbnz	r1, 800c3ce <__lo0bits+0x2a>
 800c3ca:	2010      	movs	r0, #16
 800c3cc:	0c1b      	lsrs	r3, r3, #16
 800c3ce:	b2d9      	uxtb	r1, r3
 800c3d0:	b909      	cbnz	r1, 800c3d6 <__lo0bits+0x32>
 800c3d2:	3008      	adds	r0, #8
 800c3d4:	0a1b      	lsrs	r3, r3, #8
 800c3d6:	0719      	lsls	r1, r3, #28
 800c3d8:	bf04      	itt	eq
 800c3da:	091b      	lsreq	r3, r3, #4
 800c3dc:	3004      	addeq	r0, #4
 800c3de:	0799      	lsls	r1, r3, #30
 800c3e0:	bf04      	itt	eq
 800c3e2:	089b      	lsreq	r3, r3, #2
 800c3e4:	3002      	addeq	r0, #2
 800c3e6:	07d9      	lsls	r1, r3, #31
 800c3e8:	d403      	bmi.n	800c3f2 <__lo0bits+0x4e>
 800c3ea:	085b      	lsrs	r3, r3, #1
 800c3ec:	f100 0001 	add.w	r0, r0, #1
 800c3f0:	d003      	beq.n	800c3fa <__lo0bits+0x56>
 800c3f2:	6013      	str	r3, [r2, #0]
 800c3f4:	4770      	bx	lr
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	4770      	bx	lr
 800c3fa:	2020      	movs	r0, #32
 800c3fc:	4770      	bx	lr
	...

0800c400 <__i2b>:
 800c400:	b510      	push	{r4, lr}
 800c402:	460c      	mov	r4, r1
 800c404:	2101      	movs	r1, #1
 800c406:	f7ff febb 	bl	800c180 <_Balloc>
 800c40a:	4602      	mov	r2, r0
 800c40c:	b928      	cbnz	r0, 800c41a <__i2b+0x1a>
 800c40e:	f240 1145 	movw	r1, #325	; 0x145
 800c412:	4b04      	ldr	r3, [pc, #16]	; (800c424 <__i2b+0x24>)
 800c414:	4804      	ldr	r0, [pc, #16]	; (800c428 <__i2b+0x28>)
 800c416:	f000 ff71 	bl	800d2fc <__assert_func>
 800c41a:	2301      	movs	r3, #1
 800c41c:	6144      	str	r4, [r0, #20]
 800c41e:	6103      	str	r3, [r0, #16]
 800c420:	bd10      	pop	{r4, pc}
 800c422:	bf00      	nop
 800c424:	0800eae7 	.word	0x0800eae7
 800c428:	0800eb58 	.word	0x0800eb58

0800c42c <__multiply>:
 800c42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c430:	4691      	mov	r9, r2
 800c432:	690a      	ldr	r2, [r1, #16]
 800c434:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c438:	460c      	mov	r4, r1
 800c43a:	429a      	cmp	r2, r3
 800c43c:	bfbe      	ittt	lt
 800c43e:	460b      	movlt	r3, r1
 800c440:	464c      	movlt	r4, r9
 800c442:	4699      	movlt	r9, r3
 800c444:	6927      	ldr	r7, [r4, #16]
 800c446:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c44a:	68a3      	ldr	r3, [r4, #8]
 800c44c:	6861      	ldr	r1, [r4, #4]
 800c44e:	eb07 060a 	add.w	r6, r7, sl
 800c452:	42b3      	cmp	r3, r6
 800c454:	b085      	sub	sp, #20
 800c456:	bfb8      	it	lt
 800c458:	3101      	addlt	r1, #1
 800c45a:	f7ff fe91 	bl	800c180 <_Balloc>
 800c45e:	b930      	cbnz	r0, 800c46e <__multiply+0x42>
 800c460:	4602      	mov	r2, r0
 800c462:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c466:	4b43      	ldr	r3, [pc, #268]	; (800c574 <__multiply+0x148>)
 800c468:	4843      	ldr	r0, [pc, #268]	; (800c578 <__multiply+0x14c>)
 800c46a:	f000 ff47 	bl	800d2fc <__assert_func>
 800c46e:	f100 0514 	add.w	r5, r0, #20
 800c472:	462b      	mov	r3, r5
 800c474:	2200      	movs	r2, #0
 800c476:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c47a:	4543      	cmp	r3, r8
 800c47c:	d321      	bcc.n	800c4c2 <__multiply+0x96>
 800c47e:	f104 0314 	add.w	r3, r4, #20
 800c482:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c486:	f109 0314 	add.w	r3, r9, #20
 800c48a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c48e:	9202      	str	r2, [sp, #8]
 800c490:	1b3a      	subs	r2, r7, r4
 800c492:	3a15      	subs	r2, #21
 800c494:	f022 0203 	bic.w	r2, r2, #3
 800c498:	3204      	adds	r2, #4
 800c49a:	f104 0115 	add.w	r1, r4, #21
 800c49e:	428f      	cmp	r7, r1
 800c4a0:	bf38      	it	cc
 800c4a2:	2204      	movcc	r2, #4
 800c4a4:	9201      	str	r2, [sp, #4]
 800c4a6:	9a02      	ldr	r2, [sp, #8]
 800c4a8:	9303      	str	r3, [sp, #12]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d80c      	bhi.n	800c4c8 <__multiply+0x9c>
 800c4ae:	2e00      	cmp	r6, #0
 800c4b0:	dd03      	ble.n	800c4ba <__multiply+0x8e>
 800c4b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d05a      	beq.n	800c570 <__multiply+0x144>
 800c4ba:	6106      	str	r6, [r0, #16]
 800c4bc:	b005      	add	sp, #20
 800c4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c2:	f843 2b04 	str.w	r2, [r3], #4
 800c4c6:	e7d8      	b.n	800c47a <__multiply+0x4e>
 800c4c8:	f8b3 a000 	ldrh.w	sl, [r3]
 800c4cc:	f1ba 0f00 	cmp.w	sl, #0
 800c4d0:	d023      	beq.n	800c51a <__multiply+0xee>
 800c4d2:	46a9      	mov	r9, r5
 800c4d4:	f04f 0c00 	mov.w	ip, #0
 800c4d8:	f104 0e14 	add.w	lr, r4, #20
 800c4dc:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c4e0:	f8d9 1000 	ldr.w	r1, [r9]
 800c4e4:	fa1f fb82 	uxth.w	fp, r2
 800c4e8:	b289      	uxth	r1, r1
 800c4ea:	fb0a 110b 	mla	r1, sl, fp, r1
 800c4ee:	4461      	add	r1, ip
 800c4f0:	f8d9 c000 	ldr.w	ip, [r9]
 800c4f4:	0c12      	lsrs	r2, r2, #16
 800c4f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c4fa:	fb0a c202 	mla	r2, sl, r2, ip
 800c4fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c502:	b289      	uxth	r1, r1
 800c504:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c508:	4577      	cmp	r7, lr
 800c50a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c50e:	f849 1b04 	str.w	r1, [r9], #4
 800c512:	d8e3      	bhi.n	800c4dc <__multiply+0xb0>
 800c514:	9a01      	ldr	r2, [sp, #4]
 800c516:	f845 c002 	str.w	ip, [r5, r2]
 800c51a:	9a03      	ldr	r2, [sp, #12]
 800c51c:	3304      	adds	r3, #4
 800c51e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c522:	f1b9 0f00 	cmp.w	r9, #0
 800c526:	d021      	beq.n	800c56c <__multiply+0x140>
 800c528:	46ae      	mov	lr, r5
 800c52a:	f04f 0a00 	mov.w	sl, #0
 800c52e:	6829      	ldr	r1, [r5, #0]
 800c530:	f104 0c14 	add.w	ip, r4, #20
 800c534:	f8bc b000 	ldrh.w	fp, [ip]
 800c538:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c53c:	b289      	uxth	r1, r1
 800c53e:	fb09 220b 	mla	r2, r9, fp, r2
 800c542:	4452      	add	r2, sl
 800c544:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c548:	f84e 1b04 	str.w	r1, [lr], #4
 800c54c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c550:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c554:	f8be 1000 	ldrh.w	r1, [lr]
 800c558:	4567      	cmp	r7, ip
 800c55a:	fb09 110a 	mla	r1, r9, sl, r1
 800c55e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c562:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c566:	d8e5      	bhi.n	800c534 <__multiply+0x108>
 800c568:	9a01      	ldr	r2, [sp, #4]
 800c56a:	50a9      	str	r1, [r5, r2]
 800c56c:	3504      	adds	r5, #4
 800c56e:	e79a      	b.n	800c4a6 <__multiply+0x7a>
 800c570:	3e01      	subs	r6, #1
 800c572:	e79c      	b.n	800c4ae <__multiply+0x82>
 800c574:	0800eae7 	.word	0x0800eae7
 800c578:	0800eb58 	.word	0x0800eb58

0800c57c <__pow5mult>:
 800c57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c580:	4615      	mov	r5, r2
 800c582:	f012 0203 	ands.w	r2, r2, #3
 800c586:	4606      	mov	r6, r0
 800c588:	460f      	mov	r7, r1
 800c58a:	d007      	beq.n	800c59c <__pow5mult+0x20>
 800c58c:	4c25      	ldr	r4, [pc, #148]	; (800c624 <__pow5mult+0xa8>)
 800c58e:	3a01      	subs	r2, #1
 800c590:	2300      	movs	r3, #0
 800c592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c596:	f7ff fe55 	bl	800c244 <__multadd>
 800c59a:	4607      	mov	r7, r0
 800c59c:	10ad      	asrs	r5, r5, #2
 800c59e:	d03d      	beq.n	800c61c <__pow5mult+0xa0>
 800c5a0:	69f4      	ldr	r4, [r6, #28]
 800c5a2:	b97c      	cbnz	r4, 800c5c4 <__pow5mult+0x48>
 800c5a4:	2010      	movs	r0, #16
 800c5a6:	f7fc f8c9 	bl	800873c <malloc>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	61f0      	str	r0, [r6, #28]
 800c5ae:	b928      	cbnz	r0, 800c5bc <__pow5mult+0x40>
 800c5b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c5b4:	4b1c      	ldr	r3, [pc, #112]	; (800c628 <__pow5mult+0xac>)
 800c5b6:	481d      	ldr	r0, [pc, #116]	; (800c62c <__pow5mult+0xb0>)
 800c5b8:	f000 fea0 	bl	800d2fc <__assert_func>
 800c5bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5c0:	6004      	str	r4, [r0, #0]
 800c5c2:	60c4      	str	r4, [r0, #12]
 800c5c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c5c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c5cc:	b94c      	cbnz	r4, 800c5e2 <__pow5mult+0x66>
 800c5ce:	f240 2171 	movw	r1, #625	; 0x271
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f7ff ff14 	bl	800c400 <__i2b>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	4604      	mov	r4, r0
 800c5dc:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5e0:	6003      	str	r3, [r0, #0]
 800c5e2:	f04f 0900 	mov.w	r9, #0
 800c5e6:	07eb      	lsls	r3, r5, #31
 800c5e8:	d50a      	bpl.n	800c600 <__pow5mult+0x84>
 800c5ea:	4639      	mov	r1, r7
 800c5ec:	4622      	mov	r2, r4
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	f7ff ff1c 	bl	800c42c <__multiply>
 800c5f4:	4680      	mov	r8, r0
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f7ff fe01 	bl	800c200 <_Bfree>
 800c5fe:	4647      	mov	r7, r8
 800c600:	106d      	asrs	r5, r5, #1
 800c602:	d00b      	beq.n	800c61c <__pow5mult+0xa0>
 800c604:	6820      	ldr	r0, [r4, #0]
 800c606:	b938      	cbnz	r0, 800c618 <__pow5mult+0x9c>
 800c608:	4622      	mov	r2, r4
 800c60a:	4621      	mov	r1, r4
 800c60c:	4630      	mov	r0, r6
 800c60e:	f7ff ff0d 	bl	800c42c <__multiply>
 800c612:	6020      	str	r0, [r4, #0]
 800c614:	f8c0 9000 	str.w	r9, [r0]
 800c618:	4604      	mov	r4, r0
 800c61a:	e7e4      	b.n	800c5e6 <__pow5mult+0x6a>
 800c61c:	4638      	mov	r0, r7
 800c61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c622:	bf00      	nop
 800c624:	0800eca8 	.word	0x0800eca8
 800c628:	0800ea78 	.word	0x0800ea78
 800c62c:	0800eb58 	.word	0x0800eb58

0800c630 <__lshift>:
 800c630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c634:	460c      	mov	r4, r1
 800c636:	4607      	mov	r7, r0
 800c638:	4691      	mov	r9, r2
 800c63a:	6923      	ldr	r3, [r4, #16]
 800c63c:	6849      	ldr	r1, [r1, #4]
 800c63e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c642:	68a3      	ldr	r3, [r4, #8]
 800c644:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c648:	f108 0601 	add.w	r6, r8, #1
 800c64c:	42b3      	cmp	r3, r6
 800c64e:	db0b      	blt.n	800c668 <__lshift+0x38>
 800c650:	4638      	mov	r0, r7
 800c652:	f7ff fd95 	bl	800c180 <_Balloc>
 800c656:	4605      	mov	r5, r0
 800c658:	b948      	cbnz	r0, 800c66e <__lshift+0x3e>
 800c65a:	4602      	mov	r2, r0
 800c65c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c660:	4b27      	ldr	r3, [pc, #156]	; (800c700 <__lshift+0xd0>)
 800c662:	4828      	ldr	r0, [pc, #160]	; (800c704 <__lshift+0xd4>)
 800c664:	f000 fe4a 	bl	800d2fc <__assert_func>
 800c668:	3101      	adds	r1, #1
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	e7ee      	b.n	800c64c <__lshift+0x1c>
 800c66e:	2300      	movs	r3, #0
 800c670:	f100 0114 	add.w	r1, r0, #20
 800c674:	f100 0210 	add.w	r2, r0, #16
 800c678:	4618      	mov	r0, r3
 800c67a:	4553      	cmp	r3, sl
 800c67c:	db33      	blt.n	800c6e6 <__lshift+0xb6>
 800c67e:	6920      	ldr	r0, [r4, #16]
 800c680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c684:	f104 0314 	add.w	r3, r4, #20
 800c688:	f019 091f 	ands.w	r9, r9, #31
 800c68c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c690:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c694:	d02b      	beq.n	800c6ee <__lshift+0xbe>
 800c696:	468a      	mov	sl, r1
 800c698:	2200      	movs	r2, #0
 800c69a:	f1c9 0e20 	rsb	lr, r9, #32
 800c69e:	6818      	ldr	r0, [r3, #0]
 800c6a0:	fa00 f009 	lsl.w	r0, r0, r9
 800c6a4:	4310      	orrs	r0, r2
 800c6a6:	f84a 0b04 	str.w	r0, [sl], #4
 800c6aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ae:	459c      	cmp	ip, r3
 800c6b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c6b4:	d8f3      	bhi.n	800c69e <__lshift+0x6e>
 800c6b6:	ebac 0304 	sub.w	r3, ip, r4
 800c6ba:	3b15      	subs	r3, #21
 800c6bc:	f023 0303 	bic.w	r3, r3, #3
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	f104 0015 	add.w	r0, r4, #21
 800c6c6:	4584      	cmp	ip, r0
 800c6c8:	bf38      	it	cc
 800c6ca:	2304      	movcc	r3, #4
 800c6cc:	50ca      	str	r2, [r1, r3]
 800c6ce:	b10a      	cbz	r2, 800c6d4 <__lshift+0xa4>
 800c6d0:	f108 0602 	add.w	r6, r8, #2
 800c6d4:	3e01      	subs	r6, #1
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	4621      	mov	r1, r4
 800c6da:	612e      	str	r6, [r5, #16]
 800c6dc:	f7ff fd90 	bl	800c200 <_Bfree>
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	e7c5      	b.n	800c67a <__lshift+0x4a>
 800c6ee:	3904      	subs	r1, #4
 800c6f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6f4:	459c      	cmp	ip, r3
 800c6f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6fa:	d8f9      	bhi.n	800c6f0 <__lshift+0xc0>
 800c6fc:	e7ea      	b.n	800c6d4 <__lshift+0xa4>
 800c6fe:	bf00      	nop
 800c700:	0800eae7 	.word	0x0800eae7
 800c704:	0800eb58 	.word	0x0800eb58

0800c708 <__mcmp>:
 800c708:	4603      	mov	r3, r0
 800c70a:	690a      	ldr	r2, [r1, #16]
 800c70c:	6900      	ldr	r0, [r0, #16]
 800c70e:	b530      	push	{r4, r5, lr}
 800c710:	1a80      	subs	r0, r0, r2
 800c712:	d10d      	bne.n	800c730 <__mcmp+0x28>
 800c714:	3314      	adds	r3, #20
 800c716:	3114      	adds	r1, #20
 800c718:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c71c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c720:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c724:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c728:	4295      	cmp	r5, r2
 800c72a:	d002      	beq.n	800c732 <__mcmp+0x2a>
 800c72c:	d304      	bcc.n	800c738 <__mcmp+0x30>
 800c72e:	2001      	movs	r0, #1
 800c730:	bd30      	pop	{r4, r5, pc}
 800c732:	42a3      	cmp	r3, r4
 800c734:	d3f4      	bcc.n	800c720 <__mcmp+0x18>
 800c736:	e7fb      	b.n	800c730 <__mcmp+0x28>
 800c738:	f04f 30ff 	mov.w	r0, #4294967295
 800c73c:	e7f8      	b.n	800c730 <__mcmp+0x28>
	...

0800c740 <__mdiff>:
 800c740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	460d      	mov	r5, r1
 800c746:	4607      	mov	r7, r0
 800c748:	4611      	mov	r1, r2
 800c74a:	4628      	mov	r0, r5
 800c74c:	4614      	mov	r4, r2
 800c74e:	f7ff ffdb 	bl	800c708 <__mcmp>
 800c752:	1e06      	subs	r6, r0, #0
 800c754:	d111      	bne.n	800c77a <__mdiff+0x3a>
 800c756:	4631      	mov	r1, r6
 800c758:	4638      	mov	r0, r7
 800c75a:	f7ff fd11 	bl	800c180 <_Balloc>
 800c75e:	4602      	mov	r2, r0
 800c760:	b928      	cbnz	r0, 800c76e <__mdiff+0x2e>
 800c762:	f240 2137 	movw	r1, #567	; 0x237
 800c766:	4b3a      	ldr	r3, [pc, #232]	; (800c850 <__mdiff+0x110>)
 800c768:	483a      	ldr	r0, [pc, #232]	; (800c854 <__mdiff+0x114>)
 800c76a:	f000 fdc7 	bl	800d2fc <__assert_func>
 800c76e:	2301      	movs	r3, #1
 800c770:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c774:	4610      	mov	r0, r2
 800c776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77a:	bfa4      	itt	ge
 800c77c:	4623      	movge	r3, r4
 800c77e:	462c      	movge	r4, r5
 800c780:	4638      	mov	r0, r7
 800c782:	6861      	ldr	r1, [r4, #4]
 800c784:	bfa6      	itte	ge
 800c786:	461d      	movge	r5, r3
 800c788:	2600      	movge	r6, #0
 800c78a:	2601      	movlt	r6, #1
 800c78c:	f7ff fcf8 	bl	800c180 <_Balloc>
 800c790:	4602      	mov	r2, r0
 800c792:	b918      	cbnz	r0, 800c79c <__mdiff+0x5c>
 800c794:	f240 2145 	movw	r1, #581	; 0x245
 800c798:	4b2d      	ldr	r3, [pc, #180]	; (800c850 <__mdiff+0x110>)
 800c79a:	e7e5      	b.n	800c768 <__mdiff+0x28>
 800c79c:	f102 0814 	add.w	r8, r2, #20
 800c7a0:	46c2      	mov	sl, r8
 800c7a2:	f04f 0c00 	mov.w	ip, #0
 800c7a6:	6927      	ldr	r7, [r4, #16]
 800c7a8:	60c6      	str	r6, [r0, #12]
 800c7aa:	692e      	ldr	r6, [r5, #16]
 800c7ac:	f104 0014 	add.w	r0, r4, #20
 800c7b0:	f105 0914 	add.w	r9, r5, #20
 800c7b4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c7b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c7bc:	3410      	adds	r4, #16
 800c7be:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c7c2:	f859 3b04 	ldr.w	r3, [r9], #4
 800c7c6:	fa1f f18b 	uxth.w	r1, fp
 800c7ca:	4461      	add	r1, ip
 800c7cc:	fa1f fc83 	uxth.w	ip, r3
 800c7d0:	0c1b      	lsrs	r3, r3, #16
 800c7d2:	eba1 010c 	sub.w	r1, r1, ip
 800c7d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c7da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c7de:	b289      	uxth	r1, r1
 800c7e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c7e4:	454e      	cmp	r6, r9
 800c7e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c7ea:	f84a 1b04 	str.w	r1, [sl], #4
 800c7ee:	d8e6      	bhi.n	800c7be <__mdiff+0x7e>
 800c7f0:	1b73      	subs	r3, r6, r5
 800c7f2:	3b15      	subs	r3, #21
 800c7f4:	f023 0303 	bic.w	r3, r3, #3
 800c7f8:	3515      	adds	r5, #21
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	42ae      	cmp	r6, r5
 800c7fe:	bf38      	it	cc
 800c800:	2304      	movcc	r3, #4
 800c802:	4418      	add	r0, r3
 800c804:	4443      	add	r3, r8
 800c806:	461e      	mov	r6, r3
 800c808:	4605      	mov	r5, r0
 800c80a:	4575      	cmp	r5, lr
 800c80c:	d30e      	bcc.n	800c82c <__mdiff+0xec>
 800c80e:	f10e 0103 	add.w	r1, lr, #3
 800c812:	1a09      	subs	r1, r1, r0
 800c814:	f021 0103 	bic.w	r1, r1, #3
 800c818:	3803      	subs	r0, #3
 800c81a:	4586      	cmp	lr, r0
 800c81c:	bf38      	it	cc
 800c81e:	2100      	movcc	r1, #0
 800c820:	440b      	add	r3, r1
 800c822:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c826:	b189      	cbz	r1, 800c84c <__mdiff+0x10c>
 800c828:	6117      	str	r7, [r2, #16]
 800c82a:	e7a3      	b.n	800c774 <__mdiff+0x34>
 800c82c:	f855 8b04 	ldr.w	r8, [r5], #4
 800c830:	fa1f f188 	uxth.w	r1, r8
 800c834:	4461      	add	r1, ip
 800c836:	140c      	asrs	r4, r1, #16
 800c838:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c83c:	b289      	uxth	r1, r1
 800c83e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c842:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c846:	f846 1b04 	str.w	r1, [r6], #4
 800c84a:	e7de      	b.n	800c80a <__mdiff+0xca>
 800c84c:	3f01      	subs	r7, #1
 800c84e:	e7e8      	b.n	800c822 <__mdiff+0xe2>
 800c850:	0800eae7 	.word	0x0800eae7
 800c854:	0800eb58 	.word	0x0800eb58

0800c858 <__ulp>:
 800c858:	4b0e      	ldr	r3, [pc, #56]	; (800c894 <__ulp+0x3c>)
 800c85a:	400b      	ands	r3, r1
 800c85c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c860:	2b00      	cmp	r3, #0
 800c862:	dc08      	bgt.n	800c876 <__ulp+0x1e>
 800c864:	425b      	negs	r3, r3
 800c866:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c86a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c86e:	da04      	bge.n	800c87a <__ulp+0x22>
 800c870:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c874:	4113      	asrs	r3, r2
 800c876:	2200      	movs	r2, #0
 800c878:	e008      	b.n	800c88c <__ulp+0x34>
 800c87a:	f1a2 0314 	sub.w	r3, r2, #20
 800c87e:	2b1e      	cmp	r3, #30
 800c880:	bfd6      	itet	le
 800c882:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c886:	2201      	movgt	r2, #1
 800c888:	40da      	lsrle	r2, r3
 800c88a:	2300      	movs	r3, #0
 800c88c:	4619      	mov	r1, r3
 800c88e:	4610      	mov	r0, r2
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	7ff00000 	.word	0x7ff00000

0800c898 <__b2d>:
 800c898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89a:	6905      	ldr	r5, [r0, #16]
 800c89c:	f100 0714 	add.w	r7, r0, #20
 800c8a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c8a4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c8a8:	1f2e      	subs	r6, r5, #4
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f7ff fd5a 	bl	800c364 <__hi0bits>
 800c8b0:	f1c0 0220 	rsb	r2, r0, #32
 800c8b4:	280a      	cmp	r0, #10
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	f8df c068 	ldr.w	ip, [pc, #104]	; 800c924 <__b2d+0x8c>
 800c8bc:	600a      	str	r2, [r1, #0]
 800c8be:	dc12      	bgt.n	800c8e6 <__b2d+0x4e>
 800c8c0:	f1c0 0e0b 	rsb	lr, r0, #11
 800c8c4:	fa24 f20e 	lsr.w	r2, r4, lr
 800c8c8:	42b7      	cmp	r7, r6
 800c8ca:	ea42 010c 	orr.w	r1, r2, ip
 800c8ce:	bf2c      	ite	cs
 800c8d0:	2200      	movcs	r2, #0
 800c8d2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800c8d6:	3315      	adds	r3, #21
 800c8d8:	fa04 f303 	lsl.w	r3, r4, r3
 800c8dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c8e0:	431a      	orrs	r2, r3
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8e6:	42b7      	cmp	r7, r6
 800c8e8:	bf2e      	itee	cs
 800c8ea:	2200      	movcs	r2, #0
 800c8ec:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800c8f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800c8f4:	3b0b      	subs	r3, #11
 800c8f6:	d012      	beq.n	800c91e <__b2d+0x86>
 800c8f8:	f1c3 0520 	rsb	r5, r3, #32
 800c8fc:	fa22 f105 	lsr.w	r1, r2, r5
 800c900:	409c      	lsls	r4, r3
 800c902:	430c      	orrs	r4, r1
 800c904:	42be      	cmp	r6, r7
 800c906:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800c90a:	bf94      	ite	ls
 800c90c:	2400      	movls	r4, #0
 800c90e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c912:	409a      	lsls	r2, r3
 800c914:	40ec      	lsrs	r4, r5
 800c916:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c91a:	4322      	orrs	r2, r4
 800c91c:	e7e1      	b.n	800c8e2 <__b2d+0x4a>
 800c91e:	ea44 010c 	orr.w	r1, r4, ip
 800c922:	e7de      	b.n	800c8e2 <__b2d+0x4a>
 800c924:	3ff00000 	.word	0x3ff00000

0800c928 <__d2b>:
 800c928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c92a:	2101      	movs	r1, #1
 800c92c:	4617      	mov	r7, r2
 800c92e:	461c      	mov	r4, r3
 800c930:	9e08      	ldr	r6, [sp, #32]
 800c932:	f7ff fc25 	bl	800c180 <_Balloc>
 800c936:	4605      	mov	r5, r0
 800c938:	b930      	cbnz	r0, 800c948 <__d2b+0x20>
 800c93a:	4602      	mov	r2, r0
 800c93c:	f240 310f 	movw	r1, #783	; 0x30f
 800c940:	4b22      	ldr	r3, [pc, #136]	; (800c9cc <__d2b+0xa4>)
 800c942:	4823      	ldr	r0, [pc, #140]	; (800c9d0 <__d2b+0xa8>)
 800c944:	f000 fcda 	bl	800d2fc <__assert_func>
 800c948:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c94c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c950:	bb24      	cbnz	r4, 800c99c <__d2b+0x74>
 800c952:	2f00      	cmp	r7, #0
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	d026      	beq.n	800c9a6 <__d2b+0x7e>
 800c958:	4668      	mov	r0, sp
 800c95a:	9700      	str	r7, [sp, #0]
 800c95c:	f7ff fd22 	bl	800c3a4 <__lo0bits>
 800c960:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c964:	b1e8      	cbz	r0, 800c9a2 <__d2b+0x7a>
 800c966:	f1c0 0320 	rsb	r3, r0, #32
 800c96a:	fa02 f303 	lsl.w	r3, r2, r3
 800c96e:	430b      	orrs	r3, r1
 800c970:	40c2      	lsrs	r2, r0
 800c972:	616b      	str	r3, [r5, #20]
 800c974:	9201      	str	r2, [sp, #4]
 800c976:	9b01      	ldr	r3, [sp, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	bf14      	ite	ne
 800c97c:	2102      	movne	r1, #2
 800c97e:	2101      	moveq	r1, #1
 800c980:	61ab      	str	r3, [r5, #24]
 800c982:	6129      	str	r1, [r5, #16]
 800c984:	b1bc      	cbz	r4, 800c9b6 <__d2b+0x8e>
 800c986:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c98a:	4404      	add	r4, r0
 800c98c:	6034      	str	r4, [r6, #0]
 800c98e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c994:	6018      	str	r0, [r3, #0]
 800c996:	4628      	mov	r0, r5
 800c998:	b003      	add	sp, #12
 800c99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c99c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9a0:	e7d7      	b.n	800c952 <__d2b+0x2a>
 800c9a2:	6169      	str	r1, [r5, #20]
 800c9a4:	e7e7      	b.n	800c976 <__d2b+0x4e>
 800c9a6:	a801      	add	r0, sp, #4
 800c9a8:	f7ff fcfc 	bl	800c3a4 <__lo0bits>
 800c9ac:	9b01      	ldr	r3, [sp, #4]
 800c9ae:	2101      	movs	r1, #1
 800c9b0:	616b      	str	r3, [r5, #20]
 800c9b2:	3020      	adds	r0, #32
 800c9b4:	e7e5      	b.n	800c982 <__d2b+0x5a>
 800c9b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c9ba:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800c9be:	6030      	str	r0, [r6, #0]
 800c9c0:	6918      	ldr	r0, [r3, #16]
 800c9c2:	f7ff fccf 	bl	800c364 <__hi0bits>
 800c9c6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c9ca:	e7e2      	b.n	800c992 <__d2b+0x6a>
 800c9cc:	0800eae7 	.word	0x0800eae7
 800c9d0:	0800eb58 	.word	0x0800eb58

0800c9d4 <__ratio>:
 800c9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d8:	4688      	mov	r8, r1
 800c9da:	4669      	mov	r1, sp
 800c9dc:	4681      	mov	r9, r0
 800c9de:	f7ff ff5b 	bl	800c898 <__b2d>
 800c9e2:	460f      	mov	r7, r1
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	460d      	mov	r5, r1
 800c9e8:	4640      	mov	r0, r8
 800c9ea:	a901      	add	r1, sp, #4
 800c9ec:	f7ff ff54 	bl	800c898 <__b2d>
 800c9f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c9f8:	468b      	mov	fp, r1
 800c9fa:	eba3 0c02 	sub.w	ip, r3, r2
 800c9fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ca02:	1a9b      	subs	r3, r3, r2
 800ca04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	bfd5      	itete	le
 800ca0c:	460a      	movle	r2, r1
 800ca0e:	462a      	movgt	r2, r5
 800ca10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ca14:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ca18:	bfd8      	it	le
 800ca1a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ca1e:	465b      	mov	r3, fp
 800ca20:	4602      	mov	r2, r0
 800ca22:	4639      	mov	r1, r7
 800ca24:	4620      	mov	r0, r4
 800ca26:	f7f3 fe99 	bl	800075c <__aeabi_ddiv>
 800ca2a:	b003      	add	sp, #12
 800ca2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca30 <__copybits>:
 800ca30:	3901      	subs	r1, #1
 800ca32:	b570      	push	{r4, r5, r6, lr}
 800ca34:	1149      	asrs	r1, r1, #5
 800ca36:	6914      	ldr	r4, [r2, #16]
 800ca38:	3101      	adds	r1, #1
 800ca3a:	f102 0314 	add.w	r3, r2, #20
 800ca3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca46:	1f05      	subs	r5, r0, #4
 800ca48:	42a3      	cmp	r3, r4
 800ca4a:	d30c      	bcc.n	800ca66 <__copybits+0x36>
 800ca4c:	1aa3      	subs	r3, r4, r2
 800ca4e:	3b11      	subs	r3, #17
 800ca50:	f023 0303 	bic.w	r3, r3, #3
 800ca54:	3211      	adds	r2, #17
 800ca56:	42a2      	cmp	r2, r4
 800ca58:	bf88      	it	hi
 800ca5a:	2300      	movhi	r3, #0
 800ca5c:	4418      	add	r0, r3
 800ca5e:	2300      	movs	r3, #0
 800ca60:	4288      	cmp	r0, r1
 800ca62:	d305      	bcc.n	800ca70 <__copybits+0x40>
 800ca64:	bd70      	pop	{r4, r5, r6, pc}
 800ca66:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca6a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca6e:	e7eb      	b.n	800ca48 <__copybits+0x18>
 800ca70:	f840 3b04 	str.w	r3, [r0], #4
 800ca74:	e7f4      	b.n	800ca60 <__copybits+0x30>

0800ca76 <__any_on>:
 800ca76:	f100 0214 	add.w	r2, r0, #20
 800ca7a:	6900      	ldr	r0, [r0, #16]
 800ca7c:	114b      	asrs	r3, r1, #5
 800ca7e:	4298      	cmp	r0, r3
 800ca80:	b510      	push	{r4, lr}
 800ca82:	db11      	blt.n	800caa8 <__any_on+0x32>
 800ca84:	dd0a      	ble.n	800ca9c <__any_on+0x26>
 800ca86:	f011 011f 	ands.w	r1, r1, #31
 800ca8a:	d007      	beq.n	800ca9c <__any_on+0x26>
 800ca8c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca90:	fa24 f001 	lsr.w	r0, r4, r1
 800ca94:	fa00 f101 	lsl.w	r1, r0, r1
 800ca98:	428c      	cmp	r4, r1
 800ca9a:	d10b      	bne.n	800cab4 <__any_on+0x3e>
 800ca9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d803      	bhi.n	800caac <__any_on+0x36>
 800caa4:	2000      	movs	r0, #0
 800caa6:	bd10      	pop	{r4, pc}
 800caa8:	4603      	mov	r3, r0
 800caaa:	e7f7      	b.n	800ca9c <__any_on+0x26>
 800caac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cab0:	2900      	cmp	r1, #0
 800cab2:	d0f5      	beq.n	800caa0 <__any_on+0x2a>
 800cab4:	2001      	movs	r0, #1
 800cab6:	e7f6      	b.n	800caa6 <__any_on+0x30>

0800cab8 <_malloc_usable_size_r>:
 800cab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cabc:	1f18      	subs	r0, r3, #4
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	bfbc      	itt	lt
 800cac2:	580b      	ldrlt	r3, [r1, r0]
 800cac4:	18c0      	addlt	r0, r0, r3
 800cac6:	4770      	bx	lr

0800cac8 <__ascii_wctomb>:
 800cac8:	4603      	mov	r3, r0
 800caca:	4608      	mov	r0, r1
 800cacc:	b141      	cbz	r1, 800cae0 <__ascii_wctomb+0x18>
 800cace:	2aff      	cmp	r2, #255	; 0xff
 800cad0:	d904      	bls.n	800cadc <__ascii_wctomb+0x14>
 800cad2:	228a      	movs	r2, #138	; 0x8a
 800cad4:	f04f 30ff 	mov.w	r0, #4294967295
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	4770      	bx	lr
 800cadc:	2001      	movs	r0, #1
 800cade:	700a      	strb	r2, [r1, #0]
 800cae0:	4770      	bx	lr

0800cae2 <__ssputs_r>:
 800cae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cae6:	461f      	mov	r7, r3
 800cae8:	688e      	ldr	r6, [r1, #8]
 800caea:	4682      	mov	sl, r0
 800caec:	42be      	cmp	r6, r7
 800caee:	460c      	mov	r4, r1
 800caf0:	4690      	mov	r8, r2
 800caf2:	680b      	ldr	r3, [r1, #0]
 800caf4:	d82c      	bhi.n	800cb50 <__ssputs_r+0x6e>
 800caf6:	898a      	ldrh	r2, [r1, #12]
 800caf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cafc:	d026      	beq.n	800cb4c <__ssputs_r+0x6a>
 800cafe:	6965      	ldr	r5, [r4, #20]
 800cb00:	6909      	ldr	r1, [r1, #16]
 800cb02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb06:	eba3 0901 	sub.w	r9, r3, r1
 800cb0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb0e:	1c7b      	adds	r3, r7, #1
 800cb10:	444b      	add	r3, r9
 800cb12:	106d      	asrs	r5, r5, #1
 800cb14:	429d      	cmp	r5, r3
 800cb16:	bf38      	it	cc
 800cb18:	461d      	movcc	r5, r3
 800cb1a:	0553      	lsls	r3, r2, #21
 800cb1c:	d527      	bpl.n	800cb6e <__ssputs_r+0x8c>
 800cb1e:	4629      	mov	r1, r5
 800cb20:	f7fb fe3c 	bl	800879c <_malloc_r>
 800cb24:	4606      	mov	r6, r0
 800cb26:	b360      	cbz	r0, 800cb82 <__ssputs_r+0xa0>
 800cb28:	464a      	mov	r2, r9
 800cb2a:	6921      	ldr	r1, [r4, #16]
 800cb2c:	f7fe f8ef 	bl	800ad0e <memcpy>
 800cb30:	89a3      	ldrh	r3, [r4, #12]
 800cb32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb3a:	81a3      	strh	r3, [r4, #12]
 800cb3c:	6126      	str	r6, [r4, #16]
 800cb3e:	444e      	add	r6, r9
 800cb40:	6026      	str	r6, [r4, #0]
 800cb42:	463e      	mov	r6, r7
 800cb44:	6165      	str	r5, [r4, #20]
 800cb46:	eba5 0509 	sub.w	r5, r5, r9
 800cb4a:	60a5      	str	r5, [r4, #8]
 800cb4c:	42be      	cmp	r6, r7
 800cb4e:	d900      	bls.n	800cb52 <__ssputs_r+0x70>
 800cb50:	463e      	mov	r6, r7
 800cb52:	4632      	mov	r2, r6
 800cb54:	4641      	mov	r1, r8
 800cb56:	6820      	ldr	r0, [r4, #0]
 800cb58:	f000 fb93 	bl	800d282 <memmove>
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	68a3      	ldr	r3, [r4, #8]
 800cb60:	1b9b      	subs	r3, r3, r6
 800cb62:	60a3      	str	r3, [r4, #8]
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	4433      	add	r3, r6
 800cb68:	6023      	str	r3, [r4, #0]
 800cb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb6e:	462a      	mov	r2, r5
 800cb70:	f7fb fea8 	bl	80088c4 <_realloc_r>
 800cb74:	4606      	mov	r6, r0
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d1e0      	bne.n	800cb3c <__ssputs_r+0x5a>
 800cb7a:	4650      	mov	r0, sl
 800cb7c:	6921      	ldr	r1, [r4, #16]
 800cb7e:	f7fe ff4b 	bl	800ba18 <_free_r>
 800cb82:	230c      	movs	r3, #12
 800cb84:	f8ca 3000 	str.w	r3, [sl]
 800cb88:	89a3      	ldrh	r3, [r4, #12]
 800cb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb92:	81a3      	strh	r3, [r4, #12]
 800cb94:	e7e9      	b.n	800cb6a <__ssputs_r+0x88>
	...

0800cb98 <_svfiprintf_r>:
 800cb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9c:	4698      	mov	r8, r3
 800cb9e:	898b      	ldrh	r3, [r1, #12]
 800cba0:	4607      	mov	r7, r0
 800cba2:	061b      	lsls	r3, r3, #24
 800cba4:	460d      	mov	r5, r1
 800cba6:	4614      	mov	r4, r2
 800cba8:	b09d      	sub	sp, #116	; 0x74
 800cbaa:	d50e      	bpl.n	800cbca <_svfiprintf_r+0x32>
 800cbac:	690b      	ldr	r3, [r1, #16]
 800cbae:	b963      	cbnz	r3, 800cbca <_svfiprintf_r+0x32>
 800cbb0:	2140      	movs	r1, #64	; 0x40
 800cbb2:	f7fb fdf3 	bl	800879c <_malloc_r>
 800cbb6:	6028      	str	r0, [r5, #0]
 800cbb8:	6128      	str	r0, [r5, #16]
 800cbba:	b920      	cbnz	r0, 800cbc6 <_svfiprintf_r+0x2e>
 800cbbc:	230c      	movs	r3, #12
 800cbbe:	603b      	str	r3, [r7, #0]
 800cbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc4:	e0d0      	b.n	800cd68 <_svfiprintf_r+0x1d0>
 800cbc6:	2340      	movs	r3, #64	; 0x40
 800cbc8:	616b      	str	r3, [r5, #20]
 800cbca:	2300      	movs	r3, #0
 800cbcc:	9309      	str	r3, [sp, #36]	; 0x24
 800cbce:	2320      	movs	r3, #32
 800cbd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbd4:	2330      	movs	r3, #48	; 0x30
 800cbd6:	f04f 0901 	mov.w	r9, #1
 800cbda:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbde:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800cd80 <_svfiprintf_r+0x1e8>
 800cbe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbe6:	4623      	mov	r3, r4
 800cbe8:	469a      	mov	sl, r3
 800cbea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbee:	b10a      	cbz	r2, 800cbf4 <_svfiprintf_r+0x5c>
 800cbf0:	2a25      	cmp	r2, #37	; 0x25
 800cbf2:	d1f9      	bne.n	800cbe8 <_svfiprintf_r+0x50>
 800cbf4:	ebba 0b04 	subs.w	fp, sl, r4
 800cbf8:	d00b      	beq.n	800cc12 <_svfiprintf_r+0x7a>
 800cbfa:	465b      	mov	r3, fp
 800cbfc:	4622      	mov	r2, r4
 800cbfe:	4629      	mov	r1, r5
 800cc00:	4638      	mov	r0, r7
 800cc02:	f7ff ff6e 	bl	800cae2 <__ssputs_r>
 800cc06:	3001      	adds	r0, #1
 800cc08:	f000 80a9 	beq.w	800cd5e <_svfiprintf_r+0x1c6>
 800cc0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc0e:	445a      	add	r2, fp
 800cc10:	9209      	str	r2, [sp, #36]	; 0x24
 800cc12:	f89a 3000 	ldrb.w	r3, [sl]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f000 80a1 	beq.w	800cd5e <_svfiprintf_r+0x1c6>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc26:	f10a 0a01 	add.w	sl, sl, #1
 800cc2a:	9304      	str	r3, [sp, #16]
 800cc2c:	9307      	str	r3, [sp, #28]
 800cc2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc32:	931a      	str	r3, [sp, #104]	; 0x68
 800cc34:	4654      	mov	r4, sl
 800cc36:	2205      	movs	r2, #5
 800cc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc3c:	4850      	ldr	r0, [pc, #320]	; (800cd80 <_svfiprintf_r+0x1e8>)
 800cc3e:	f7fe f858 	bl	800acf2 <memchr>
 800cc42:	9a04      	ldr	r2, [sp, #16]
 800cc44:	b9d8      	cbnz	r0, 800cc7e <_svfiprintf_r+0xe6>
 800cc46:	06d0      	lsls	r0, r2, #27
 800cc48:	bf44      	itt	mi
 800cc4a:	2320      	movmi	r3, #32
 800cc4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc50:	0711      	lsls	r1, r2, #28
 800cc52:	bf44      	itt	mi
 800cc54:	232b      	movmi	r3, #43	; 0x2b
 800cc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc5e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc60:	d015      	beq.n	800cc8e <_svfiprintf_r+0xf6>
 800cc62:	4654      	mov	r4, sl
 800cc64:	2000      	movs	r0, #0
 800cc66:	f04f 0c0a 	mov.w	ip, #10
 800cc6a:	9a07      	ldr	r2, [sp, #28]
 800cc6c:	4621      	mov	r1, r4
 800cc6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc72:	3b30      	subs	r3, #48	; 0x30
 800cc74:	2b09      	cmp	r3, #9
 800cc76:	d94d      	bls.n	800cd14 <_svfiprintf_r+0x17c>
 800cc78:	b1b0      	cbz	r0, 800cca8 <_svfiprintf_r+0x110>
 800cc7a:	9207      	str	r2, [sp, #28]
 800cc7c:	e014      	b.n	800cca8 <_svfiprintf_r+0x110>
 800cc7e:	eba0 0308 	sub.w	r3, r0, r8
 800cc82:	fa09 f303 	lsl.w	r3, r9, r3
 800cc86:	4313      	orrs	r3, r2
 800cc88:	46a2      	mov	sl, r4
 800cc8a:	9304      	str	r3, [sp, #16]
 800cc8c:	e7d2      	b.n	800cc34 <_svfiprintf_r+0x9c>
 800cc8e:	9b03      	ldr	r3, [sp, #12]
 800cc90:	1d19      	adds	r1, r3, #4
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	9103      	str	r1, [sp, #12]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	bfbb      	ittet	lt
 800cc9a:	425b      	neglt	r3, r3
 800cc9c:	f042 0202 	orrlt.w	r2, r2, #2
 800cca0:	9307      	strge	r3, [sp, #28]
 800cca2:	9307      	strlt	r3, [sp, #28]
 800cca4:	bfb8      	it	lt
 800cca6:	9204      	strlt	r2, [sp, #16]
 800cca8:	7823      	ldrb	r3, [r4, #0]
 800ccaa:	2b2e      	cmp	r3, #46	; 0x2e
 800ccac:	d10c      	bne.n	800ccc8 <_svfiprintf_r+0x130>
 800ccae:	7863      	ldrb	r3, [r4, #1]
 800ccb0:	2b2a      	cmp	r3, #42	; 0x2a
 800ccb2:	d134      	bne.n	800cd1e <_svfiprintf_r+0x186>
 800ccb4:	9b03      	ldr	r3, [sp, #12]
 800ccb6:	3402      	adds	r4, #2
 800ccb8:	1d1a      	adds	r2, r3, #4
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	9203      	str	r2, [sp, #12]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	bfb8      	it	lt
 800ccc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccc6:	9305      	str	r3, [sp, #20]
 800ccc8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800cd84 <_svfiprintf_r+0x1ec>
 800cccc:	2203      	movs	r2, #3
 800ccce:	4650      	mov	r0, sl
 800ccd0:	7821      	ldrb	r1, [r4, #0]
 800ccd2:	f7fe f80e 	bl	800acf2 <memchr>
 800ccd6:	b138      	cbz	r0, 800cce8 <_svfiprintf_r+0x150>
 800ccd8:	2240      	movs	r2, #64	; 0x40
 800ccda:	9b04      	ldr	r3, [sp, #16]
 800ccdc:	eba0 000a 	sub.w	r0, r0, sl
 800cce0:	4082      	lsls	r2, r0
 800cce2:	4313      	orrs	r3, r2
 800cce4:	3401      	adds	r4, #1
 800cce6:	9304      	str	r3, [sp, #16]
 800cce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccec:	2206      	movs	r2, #6
 800ccee:	4826      	ldr	r0, [pc, #152]	; (800cd88 <_svfiprintf_r+0x1f0>)
 800ccf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccf4:	f7fd fffd 	bl	800acf2 <memchr>
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	d038      	beq.n	800cd6e <_svfiprintf_r+0x1d6>
 800ccfc:	4b23      	ldr	r3, [pc, #140]	; (800cd8c <_svfiprintf_r+0x1f4>)
 800ccfe:	bb1b      	cbnz	r3, 800cd48 <_svfiprintf_r+0x1b0>
 800cd00:	9b03      	ldr	r3, [sp, #12]
 800cd02:	3307      	adds	r3, #7
 800cd04:	f023 0307 	bic.w	r3, r3, #7
 800cd08:	3308      	adds	r3, #8
 800cd0a:	9303      	str	r3, [sp, #12]
 800cd0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd0e:	4433      	add	r3, r6
 800cd10:	9309      	str	r3, [sp, #36]	; 0x24
 800cd12:	e768      	b.n	800cbe6 <_svfiprintf_r+0x4e>
 800cd14:	460c      	mov	r4, r1
 800cd16:	2001      	movs	r0, #1
 800cd18:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd1c:	e7a6      	b.n	800cc6c <_svfiprintf_r+0xd4>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	f04f 0c0a 	mov.w	ip, #10
 800cd24:	4619      	mov	r1, r3
 800cd26:	3401      	adds	r4, #1
 800cd28:	9305      	str	r3, [sp, #20]
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd30:	3a30      	subs	r2, #48	; 0x30
 800cd32:	2a09      	cmp	r2, #9
 800cd34:	d903      	bls.n	800cd3e <_svfiprintf_r+0x1a6>
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d0c6      	beq.n	800ccc8 <_svfiprintf_r+0x130>
 800cd3a:	9105      	str	r1, [sp, #20]
 800cd3c:	e7c4      	b.n	800ccc8 <_svfiprintf_r+0x130>
 800cd3e:	4604      	mov	r4, r0
 800cd40:	2301      	movs	r3, #1
 800cd42:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd46:	e7f0      	b.n	800cd2a <_svfiprintf_r+0x192>
 800cd48:	ab03      	add	r3, sp, #12
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	462a      	mov	r2, r5
 800cd4e:	4638      	mov	r0, r7
 800cd50:	4b0f      	ldr	r3, [pc, #60]	; (800cd90 <_svfiprintf_r+0x1f8>)
 800cd52:	a904      	add	r1, sp, #16
 800cd54:	f7fc feb6 	bl	8009ac4 <_printf_float>
 800cd58:	1c42      	adds	r2, r0, #1
 800cd5a:	4606      	mov	r6, r0
 800cd5c:	d1d6      	bne.n	800cd0c <_svfiprintf_r+0x174>
 800cd5e:	89ab      	ldrh	r3, [r5, #12]
 800cd60:	065b      	lsls	r3, r3, #25
 800cd62:	f53f af2d 	bmi.w	800cbc0 <_svfiprintf_r+0x28>
 800cd66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd68:	b01d      	add	sp, #116	; 0x74
 800cd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd6e:	ab03      	add	r3, sp, #12
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	462a      	mov	r2, r5
 800cd74:	4638      	mov	r0, r7
 800cd76:	4b06      	ldr	r3, [pc, #24]	; (800cd90 <_svfiprintf_r+0x1f8>)
 800cd78:	a904      	add	r1, sp, #16
 800cd7a:	f7fd f943 	bl	800a004 <_printf_i>
 800cd7e:	e7eb      	b.n	800cd58 <_svfiprintf_r+0x1c0>
 800cd80:	0800ecb4 	.word	0x0800ecb4
 800cd84:	0800ecba 	.word	0x0800ecba
 800cd88:	0800ecbe 	.word	0x0800ecbe
 800cd8c:	08009ac5 	.word	0x08009ac5
 800cd90:	0800cae3 	.word	0x0800cae3

0800cd94 <__sfputc_r>:
 800cd94:	6893      	ldr	r3, [r2, #8]
 800cd96:	b410      	push	{r4}
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	6093      	str	r3, [r2, #8]
 800cd9e:	da07      	bge.n	800cdb0 <__sfputc_r+0x1c>
 800cda0:	6994      	ldr	r4, [r2, #24]
 800cda2:	42a3      	cmp	r3, r4
 800cda4:	db01      	blt.n	800cdaa <__sfputc_r+0x16>
 800cda6:	290a      	cmp	r1, #10
 800cda8:	d102      	bne.n	800cdb0 <__sfputc_r+0x1c>
 800cdaa:	bc10      	pop	{r4}
 800cdac:	f7fd bc59 	b.w	800a662 <__swbuf_r>
 800cdb0:	6813      	ldr	r3, [r2, #0]
 800cdb2:	1c58      	adds	r0, r3, #1
 800cdb4:	6010      	str	r0, [r2, #0]
 800cdb6:	7019      	strb	r1, [r3, #0]
 800cdb8:	4608      	mov	r0, r1
 800cdba:	bc10      	pop	{r4}
 800cdbc:	4770      	bx	lr

0800cdbe <__sfputs_r>:
 800cdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc0:	4606      	mov	r6, r0
 800cdc2:	460f      	mov	r7, r1
 800cdc4:	4614      	mov	r4, r2
 800cdc6:	18d5      	adds	r5, r2, r3
 800cdc8:	42ac      	cmp	r4, r5
 800cdca:	d101      	bne.n	800cdd0 <__sfputs_r+0x12>
 800cdcc:	2000      	movs	r0, #0
 800cdce:	e007      	b.n	800cde0 <__sfputs_r+0x22>
 800cdd0:	463a      	mov	r2, r7
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd8:	f7ff ffdc 	bl	800cd94 <__sfputc_r>
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d1f3      	bne.n	800cdc8 <__sfputs_r+0xa>
 800cde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cde4 <_vfiprintf_r>:
 800cde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde8:	460d      	mov	r5, r1
 800cdea:	4614      	mov	r4, r2
 800cdec:	4698      	mov	r8, r3
 800cdee:	4606      	mov	r6, r0
 800cdf0:	b09d      	sub	sp, #116	; 0x74
 800cdf2:	b118      	cbz	r0, 800cdfc <_vfiprintf_r+0x18>
 800cdf4:	6a03      	ldr	r3, [r0, #32]
 800cdf6:	b90b      	cbnz	r3, 800cdfc <_vfiprintf_r+0x18>
 800cdf8:	f7fd fab2 	bl	800a360 <__sinit>
 800cdfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdfe:	07d9      	lsls	r1, r3, #31
 800ce00:	d405      	bmi.n	800ce0e <_vfiprintf_r+0x2a>
 800ce02:	89ab      	ldrh	r3, [r5, #12]
 800ce04:	059a      	lsls	r2, r3, #22
 800ce06:	d402      	bmi.n	800ce0e <_vfiprintf_r+0x2a>
 800ce08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce0a:	f7fd ff68 	bl	800acde <__retarget_lock_acquire_recursive>
 800ce0e:	89ab      	ldrh	r3, [r5, #12]
 800ce10:	071b      	lsls	r3, r3, #28
 800ce12:	d501      	bpl.n	800ce18 <_vfiprintf_r+0x34>
 800ce14:	692b      	ldr	r3, [r5, #16]
 800ce16:	b99b      	cbnz	r3, 800ce40 <_vfiprintf_r+0x5c>
 800ce18:	4629      	mov	r1, r5
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	f7fd fc5e 	bl	800a6dc <__swsetup_r>
 800ce20:	b170      	cbz	r0, 800ce40 <_vfiprintf_r+0x5c>
 800ce22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce24:	07dc      	lsls	r4, r3, #31
 800ce26:	d504      	bpl.n	800ce32 <_vfiprintf_r+0x4e>
 800ce28:	f04f 30ff 	mov.w	r0, #4294967295
 800ce2c:	b01d      	add	sp, #116	; 0x74
 800ce2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce32:	89ab      	ldrh	r3, [r5, #12]
 800ce34:	0598      	lsls	r0, r3, #22
 800ce36:	d4f7      	bmi.n	800ce28 <_vfiprintf_r+0x44>
 800ce38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce3a:	f7fd ff51 	bl	800ace0 <__retarget_lock_release_recursive>
 800ce3e:	e7f3      	b.n	800ce28 <_vfiprintf_r+0x44>
 800ce40:	2300      	movs	r3, #0
 800ce42:	9309      	str	r3, [sp, #36]	; 0x24
 800ce44:	2320      	movs	r3, #32
 800ce46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce4a:	2330      	movs	r3, #48	; 0x30
 800ce4c:	f04f 0901 	mov.w	r9, #1
 800ce50:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce54:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d004 <_vfiprintf_r+0x220>
 800ce58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce5c:	4623      	mov	r3, r4
 800ce5e:	469a      	mov	sl, r3
 800ce60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce64:	b10a      	cbz	r2, 800ce6a <_vfiprintf_r+0x86>
 800ce66:	2a25      	cmp	r2, #37	; 0x25
 800ce68:	d1f9      	bne.n	800ce5e <_vfiprintf_r+0x7a>
 800ce6a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce6e:	d00b      	beq.n	800ce88 <_vfiprintf_r+0xa4>
 800ce70:	465b      	mov	r3, fp
 800ce72:	4622      	mov	r2, r4
 800ce74:	4629      	mov	r1, r5
 800ce76:	4630      	mov	r0, r6
 800ce78:	f7ff ffa1 	bl	800cdbe <__sfputs_r>
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	f000 80a9 	beq.w	800cfd4 <_vfiprintf_r+0x1f0>
 800ce82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce84:	445a      	add	r2, fp
 800ce86:	9209      	str	r2, [sp, #36]	; 0x24
 800ce88:	f89a 3000 	ldrb.w	r3, [sl]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f000 80a1 	beq.w	800cfd4 <_vfiprintf_r+0x1f0>
 800ce92:	2300      	movs	r3, #0
 800ce94:	f04f 32ff 	mov.w	r2, #4294967295
 800ce98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce9c:	f10a 0a01 	add.w	sl, sl, #1
 800cea0:	9304      	str	r3, [sp, #16]
 800cea2:	9307      	str	r3, [sp, #28]
 800cea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cea8:	931a      	str	r3, [sp, #104]	; 0x68
 800ceaa:	4654      	mov	r4, sl
 800ceac:	2205      	movs	r2, #5
 800ceae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceb2:	4854      	ldr	r0, [pc, #336]	; (800d004 <_vfiprintf_r+0x220>)
 800ceb4:	f7fd ff1d 	bl	800acf2 <memchr>
 800ceb8:	9a04      	ldr	r2, [sp, #16]
 800ceba:	b9d8      	cbnz	r0, 800cef4 <_vfiprintf_r+0x110>
 800cebc:	06d1      	lsls	r1, r2, #27
 800cebe:	bf44      	itt	mi
 800cec0:	2320      	movmi	r3, #32
 800cec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cec6:	0713      	lsls	r3, r2, #28
 800cec8:	bf44      	itt	mi
 800ceca:	232b      	movmi	r3, #43	; 0x2b
 800cecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ced0:	f89a 3000 	ldrb.w	r3, [sl]
 800ced4:	2b2a      	cmp	r3, #42	; 0x2a
 800ced6:	d015      	beq.n	800cf04 <_vfiprintf_r+0x120>
 800ced8:	4654      	mov	r4, sl
 800ceda:	2000      	movs	r0, #0
 800cedc:	f04f 0c0a 	mov.w	ip, #10
 800cee0:	9a07      	ldr	r2, [sp, #28]
 800cee2:	4621      	mov	r1, r4
 800cee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cee8:	3b30      	subs	r3, #48	; 0x30
 800ceea:	2b09      	cmp	r3, #9
 800ceec:	d94d      	bls.n	800cf8a <_vfiprintf_r+0x1a6>
 800ceee:	b1b0      	cbz	r0, 800cf1e <_vfiprintf_r+0x13a>
 800cef0:	9207      	str	r2, [sp, #28]
 800cef2:	e014      	b.n	800cf1e <_vfiprintf_r+0x13a>
 800cef4:	eba0 0308 	sub.w	r3, r0, r8
 800cef8:	fa09 f303 	lsl.w	r3, r9, r3
 800cefc:	4313      	orrs	r3, r2
 800cefe:	46a2      	mov	sl, r4
 800cf00:	9304      	str	r3, [sp, #16]
 800cf02:	e7d2      	b.n	800ceaa <_vfiprintf_r+0xc6>
 800cf04:	9b03      	ldr	r3, [sp, #12]
 800cf06:	1d19      	adds	r1, r3, #4
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	9103      	str	r1, [sp, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	bfbb      	ittet	lt
 800cf10:	425b      	neglt	r3, r3
 800cf12:	f042 0202 	orrlt.w	r2, r2, #2
 800cf16:	9307      	strge	r3, [sp, #28]
 800cf18:	9307      	strlt	r3, [sp, #28]
 800cf1a:	bfb8      	it	lt
 800cf1c:	9204      	strlt	r2, [sp, #16]
 800cf1e:	7823      	ldrb	r3, [r4, #0]
 800cf20:	2b2e      	cmp	r3, #46	; 0x2e
 800cf22:	d10c      	bne.n	800cf3e <_vfiprintf_r+0x15a>
 800cf24:	7863      	ldrb	r3, [r4, #1]
 800cf26:	2b2a      	cmp	r3, #42	; 0x2a
 800cf28:	d134      	bne.n	800cf94 <_vfiprintf_r+0x1b0>
 800cf2a:	9b03      	ldr	r3, [sp, #12]
 800cf2c:	3402      	adds	r4, #2
 800cf2e:	1d1a      	adds	r2, r3, #4
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	9203      	str	r2, [sp, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	bfb8      	it	lt
 800cf38:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf3c:	9305      	str	r3, [sp, #20]
 800cf3e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d008 <_vfiprintf_r+0x224>
 800cf42:	2203      	movs	r2, #3
 800cf44:	4650      	mov	r0, sl
 800cf46:	7821      	ldrb	r1, [r4, #0]
 800cf48:	f7fd fed3 	bl	800acf2 <memchr>
 800cf4c:	b138      	cbz	r0, 800cf5e <_vfiprintf_r+0x17a>
 800cf4e:	2240      	movs	r2, #64	; 0x40
 800cf50:	9b04      	ldr	r3, [sp, #16]
 800cf52:	eba0 000a 	sub.w	r0, r0, sl
 800cf56:	4082      	lsls	r2, r0
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	3401      	adds	r4, #1
 800cf5c:	9304      	str	r3, [sp, #16]
 800cf5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf62:	2206      	movs	r2, #6
 800cf64:	4829      	ldr	r0, [pc, #164]	; (800d00c <_vfiprintf_r+0x228>)
 800cf66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf6a:	f7fd fec2 	bl	800acf2 <memchr>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	d03f      	beq.n	800cff2 <_vfiprintf_r+0x20e>
 800cf72:	4b27      	ldr	r3, [pc, #156]	; (800d010 <_vfiprintf_r+0x22c>)
 800cf74:	bb1b      	cbnz	r3, 800cfbe <_vfiprintf_r+0x1da>
 800cf76:	9b03      	ldr	r3, [sp, #12]
 800cf78:	3307      	adds	r3, #7
 800cf7a:	f023 0307 	bic.w	r3, r3, #7
 800cf7e:	3308      	adds	r3, #8
 800cf80:	9303      	str	r3, [sp, #12]
 800cf82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf84:	443b      	add	r3, r7
 800cf86:	9309      	str	r3, [sp, #36]	; 0x24
 800cf88:	e768      	b.n	800ce5c <_vfiprintf_r+0x78>
 800cf8a:	460c      	mov	r4, r1
 800cf8c:	2001      	movs	r0, #1
 800cf8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf92:	e7a6      	b.n	800cee2 <_vfiprintf_r+0xfe>
 800cf94:	2300      	movs	r3, #0
 800cf96:	f04f 0c0a 	mov.w	ip, #10
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	3401      	adds	r4, #1
 800cf9e:	9305      	str	r3, [sp, #20]
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfa6:	3a30      	subs	r2, #48	; 0x30
 800cfa8:	2a09      	cmp	r2, #9
 800cfaa:	d903      	bls.n	800cfb4 <_vfiprintf_r+0x1d0>
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d0c6      	beq.n	800cf3e <_vfiprintf_r+0x15a>
 800cfb0:	9105      	str	r1, [sp, #20]
 800cfb2:	e7c4      	b.n	800cf3e <_vfiprintf_r+0x15a>
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfbc:	e7f0      	b.n	800cfa0 <_vfiprintf_r+0x1bc>
 800cfbe:	ab03      	add	r3, sp, #12
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	462a      	mov	r2, r5
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	4b13      	ldr	r3, [pc, #76]	; (800d014 <_vfiprintf_r+0x230>)
 800cfc8:	a904      	add	r1, sp, #16
 800cfca:	f7fc fd7b 	bl	8009ac4 <_printf_float>
 800cfce:	4607      	mov	r7, r0
 800cfd0:	1c78      	adds	r0, r7, #1
 800cfd2:	d1d6      	bne.n	800cf82 <_vfiprintf_r+0x19e>
 800cfd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfd6:	07d9      	lsls	r1, r3, #31
 800cfd8:	d405      	bmi.n	800cfe6 <_vfiprintf_r+0x202>
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	059a      	lsls	r2, r3, #22
 800cfde:	d402      	bmi.n	800cfe6 <_vfiprintf_r+0x202>
 800cfe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfe2:	f7fd fe7d 	bl	800ace0 <__retarget_lock_release_recursive>
 800cfe6:	89ab      	ldrh	r3, [r5, #12]
 800cfe8:	065b      	lsls	r3, r3, #25
 800cfea:	f53f af1d 	bmi.w	800ce28 <_vfiprintf_r+0x44>
 800cfee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cff0:	e71c      	b.n	800ce2c <_vfiprintf_r+0x48>
 800cff2:	ab03      	add	r3, sp, #12
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	462a      	mov	r2, r5
 800cff8:	4630      	mov	r0, r6
 800cffa:	4b06      	ldr	r3, [pc, #24]	; (800d014 <_vfiprintf_r+0x230>)
 800cffc:	a904      	add	r1, sp, #16
 800cffe:	f7fd f801 	bl	800a004 <_printf_i>
 800d002:	e7e4      	b.n	800cfce <_vfiprintf_r+0x1ea>
 800d004:	0800ecb4 	.word	0x0800ecb4
 800d008:	0800ecba 	.word	0x0800ecba
 800d00c:	0800ecbe 	.word	0x0800ecbe
 800d010:	08009ac5 	.word	0x08009ac5
 800d014:	0800cdbf 	.word	0x0800cdbf

0800d018 <__sflush_r>:
 800d018:	898a      	ldrh	r2, [r1, #12]
 800d01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01c:	4605      	mov	r5, r0
 800d01e:	0710      	lsls	r0, r2, #28
 800d020:	460c      	mov	r4, r1
 800d022:	d457      	bmi.n	800d0d4 <__sflush_r+0xbc>
 800d024:	684b      	ldr	r3, [r1, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	dc04      	bgt.n	800d034 <__sflush_r+0x1c>
 800d02a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	dc01      	bgt.n	800d034 <__sflush_r+0x1c>
 800d030:	2000      	movs	r0, #0
 800d032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d036:	2e00      	cmp	r6, #0
 800d038:	d0fa      	beq.n	800d030 <__sflush_r+0x18>
 800d03a:	2300      	movs	r3, #0
 800d03c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d040:	682f      	ldr	r7, [r5, #0]
 800d042:	6a21      	ldr	r1, [r4, #32]
 800d044:	602b      	str	r3, [r5, #0]
 800d046:	d032      	beq.n	800d0ae <__sflush_r+0x96>
 800d048:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d04a:	89a3      	ldrh	r3, [r4, #12]
 800d04c:	075a      	lsls	r2, r3, #29
 800d04e:	d505      	bpl.n	800d05c <__sflush_r+0x44>
 800d050:	6863      	ldr	r3, [r4, #4]
 800d052:	1ac0      	subs	r0, r0, r3
 800d054:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d056:	b10b      	cbz	r3, 800d05c <__sflush_r+0x44>
 800d058:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d05a:	1ac0      	subs	r0, r0, r3
 800d05c:	2300      	movs	r3, #0
 800d05e:	4602      	mov	r2, r0
 800d060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d062:	4628      	mov	r0, r5
 800d064:	6a21      	ldr	r1, [r4, #32]
 800d066:	47b0      	blx	r6
 800d068:	1c43      	adds	r3, r0, #1
 800d06a:	89a3      	ldrh	r3, [r4, #12]
 800d06c:	d106      	bne.n	800d07c <__sflush_r+0x64>
 800d06e:	6829      	ldr	r1, [r5, #0]
 800d070:	291d      	cmp	r1, #29
 800d072:	d82b      	bhi.n	800d0cc <__sflush_r+0xb4>
 800d074:	4a28      	ldr	r2, [pc, #160]	; (800d118 <__sflush_r+0x100>)
 800d076:	410a      	asrs	r2, r1
 800d078:	07d6      	lsls	r6, r2, #31
 800d07a:	d427      	bmi.n	800d0cc <__sflush_r+0xb4>
 800d07c:	2200      	movs	r2, #0
 800d07e:	6062      	str	r2, [r4, #4]
 800d080:	6922      	ldr	r2, [r4, #16]
 800d082:	04d9      	lsls	r1, r3, #19
 800d084:	6022      	str	r2, [r4, #0]
 800d086:	d504      	bpl.n	800d092 <__sflush_r+0x7a>
 800d088:	1c42      	adds	r2, r0, #1
 800d08a:	d101      	bne.n	800d090 <__sflush_r+0x78>
 800d08c:	682b      	ldr	r3, [r5, #0]
 800d08e:	b903      	cbnz	r3, 800d092 <__sflush_r+0x7a>
 800d090:	6560      	str	r0, [r4, #84]	; 0x54
 800d092:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d094:	602f      	str	r7, [r5, #0]
 800d096:	2900      	cmp	r1, #0
 800d098:	d0ca      	beq.n	800d030 <__sflush_r+0x18>
 800d09a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d09e:	4299      	cmp	r1, r3
 800d0a0:	d002      	beq.n	800d0a8 <__sflush_r+0x90>
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f7fe fcb8 	bl	800ba18 <_free_r>
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	6360      	str	r0, [r4, #52]	; 0x34
 800d0ac:	e7c1      	b.n	800d032 <__sflush_r+0x1a>
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	47b0      	blx	r6
 800d0b4:	1c41      	adds	r1, r0, #1
 800d0b6:	d1c8      	bne.n	800d04a <__sflush_r+0x32>
 800d0b8:	682b      	ldr	r3, [r5, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d0c5      	beq.n	800d04a <__sflush_r+0x32>
 800d0be:	2b1d      	cmp	r3, #29
 800d0c0:	d001      	beq.n	800d0c6 <__sflush_r+0xae>
 800d0c2:	2b16      	cmp	r3, #22
 800d0c4:	d101      	bne.n	800d0ca <__sflush_r+0xb2>
 800d0c6:	602f      	str	r7, [r5, #0]
 800d0c8:	e7b2      	b.n	800d030 <__sflush_r+0x18>
 800d0ca:	89a3      	ldrh	r3, [r4, #12]
 800d0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0d0:	81a3      	strh	r3, [r4, #12]
 800d0d2:	e7ae      	b.n	800d032 <__sflush_r+0x1a>
 800d0d4:	690f      	ldr	r7, [r1, #16]
 800d0d6:	2f00      	cmp	r7, #0
 800d0d8:	d0aa      	beq.n	800d030 <__sflush_r+0x18>
 800d0da:	0793      	lsls	r3, r2, #30
 800d0dc:	bf18      	it	ne
 800d0de:	2300      	movne	r3, #0
 800d0e0:	680e      	ldr	r6, [r1, #0]
 800d0e2:	bf08      	it	eq
 800d0e4:	694b      	ldreq	r3, [r1, #20]
 800d0e6:	1bf6      	subs	r6, r6, r7
 800d0e8:	600f      	str	r7, [r1, #0]
 800d0ea:	608b      	str	r3, [r1, #8]
 800d0ec:	2e00      	cmp	r6, #0
 800d0ee:	dd9f      	ble.n	800d030 <__sflush_r+0x18>
 800d0f0:	4633      	mov	r3, r6
 800d0f2:	463a      	mov	r2, r7
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	6a21      	ldr	r1, [r4, #32]
 800d0f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d0fc:	47e0      	blx	ip
 800d0fe:	2800      	cmp	r0, #0
 800d100:	dc06      	bgt.n	800d110 <__sflush_r+0xf8>
 800d102:	89a3      	ldrh	r3, [r4, #12]
 800d104:	f04f 30ff 	mov.w	r0, #4294967295
 800d108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d10c:	81a3      	strh	r3, [r4, #12]
 800d10e:	e790      	b.n	800d032 <__sflush_r+0x1a>
 800d110:	4407      	add	r7, r0
 800d112:	1a36      	subs	r6, r6, r0
 800d114:	e7ea      	b.n	800d0ec <__sflush_r+0xd4>
 800d116:	bf00      	nop
 800d118:	dfbffffe 	.word	0xdfbffffe

0800d11c <_fflush_r>:
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	690b      	ldr	r3, [r1, #16]
 800d120:	4605      	mov	r5, r0
 800d122:	460c      	mov	r4, r1
 800d124:	b913      	cbnz	r3, 800d12c <_fflush_r+0x10>
 800d126:	2500      	movs	r5, #0
 800d128:	4628      	mov	r0, r5
 800d12a:	bd38      	pop	{r3, r4, r5, pc}
 800d12c:	b118      	cbz	r0, 800d136 <_fflush_r+0x1a>
 800d12e:	6a03      	ldr	r3, [r0, #32]
 800d130:	b90b      	cbnz	r3, 800d136 <_fflush_r+0x1a>
 800d132:	f7fd f915 	bl	800a360 <__sinit>
 800d136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d0f3      	beq.n	800d126 <_fflush_r+0xa>
 800d13e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d140:	07d0      	lsls	r0, r2, #31
 800d142:	d404      	bmi.n	800d14e <_fflush_r+0x32>
 800d144:	0599      	lsls	r1, r3, #22
 800d146:	d402      	bmi.n	800d14e <_fflush_r+0x32>
 800d148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d14a:	f7fd fdc8 	bl	800acde <__retarget_lock_acquire_recursive>
 800d14e:	4628      	mov	r0, r5
 800d150:	4621      	mov	r1, r4
 800d152:	f7ff ff61 	bl	800d018 <__sflush_r>
 800d156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d158:	4605      	mov	r5, r0
 800d15a:	07da      	lsls	r2, r3, #31
 800d15c:	d4e4      	bmi.n	800d128 <_fflush_r+0xc>
 800d15e:	89a3      	ldrh	r3, [r4, #12]
 800d160:	059b      	lsls	r3, r3, #22
 800d162:	d4e1      	bmi.n	800d128 <_fflush_r+0xc>
 800d164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d166:	f7fd fdbb 	bl	800ace0 <__retarget_lock_release_recursive>
 800d16a:	e7dd      	b.n	800d128 <_fflush_r+0xc>

0800d16c <fileno>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	4d13      	ldr	r5, [pc, #76]	; (800d1bc <fileno+0x50>)
 800d170:	4604      	mov	r4, r0
 800d172:	6828      	ldr	r0, [r5, #0]
 800d174:	b118      	cbz	r0, 800d17e <fileno+0x12>
 800d176:	6a03      	ldr	r3, [r0, #32]
 800d178:	b90b      	cbnz	r3, 800d17e <fileno+0x12>
 800d17a:	f7fd f8f1 	bl	800a360 <__sinit>
 800d17e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d180:	07d8      	lsls	r0, r3, #31
 800d182:	d405      	bmi.n	800d190 <fileno+0x24>
 800d184:	89a3      	ldrh	r3, [r4, #12]
 800d186:	0599      	lsls	r1, r3, #22
 800d188:	d402      	bmi.n	800d190 <fileno+0x24>
 800d18a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d18c:	f7fd fda7 	bl	800acde <__retarget_lock_acquire_recursive>
 800d190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d194:	b15b      	cbz	r3, 800d1ae <fileno+0x42>
 800d196:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800d19a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d19c:	07d2      	lsls	r2, r2, #31
 800d19e:	d404      	bmi.n	800d1aa <fileno+0x3e>
 800d1a0:	059b      	lsls	r3, r3, #22
 800d1a2:	d402      	bmi.n	800d1aa <fileno+0x3e>
 800d1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1a6:	f7fd fd9b 	bl	800ace0 <__retarget_lock_release_recursive>
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	bd38      	pop	{r3, r4, r5, pc}
 800d1ae:	2109      	movs	r1, #9
 800d1b0:	682a      	ldr	r2, [r5, #0]
 800d1b2:	f04f 35ff 	mov.w	r5, #4294967295
 800d1b6:	6011      	str	r1, [r2, #0]
 800d1b8:	e7ef      	b.n	800d19a <fileno+0x2e>
 800d1ba:	bf00      	nop
 800d1bc:	200001ec 	.word	0x200001ec

0800d1c0 <__swhatbuf_r>:
 800d1c0:	b570      	push	{r4, r5, r6, lr}
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1c8:	4615      	mov	r5, r2
 800d1ca:	2900      	cmp	r1, #0
 800d1cc:	461e      	mov	r6, r3
 800d1ce:	b096      	sub	sp, #88	; 0x58
 800d1d0:	da0c      	bge.n	800d1ec <__swhatbuf_r+0x2c>
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	2100      	movs	r1, #0
 800d1d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d1da:	bf0c      	ite	eq
 800d1dc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d1e0:	2340      	movne	r3, #64	; 0x40
 800d1e2:	2000      	movs	r0, #0
 800d1e4:	6031      	str	r1, [r6, #0]
 800d1e6:	602b      	str	r3, [r5, #0]
 800d1e8:	b016      	add	sp, #88	; 0x58
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}
 800d1ec:	466a      	mov	r2, sp
 800d1ee:	f000 f863 	bl	800d2b8 <_fstat_r>
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	dbed      	blt.n	800d1d2 <__swhatbuf_r+0x12>
 800d1f6:	9901      	ldr	r1, [sp, #4]
 800d1f8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d1fc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d200:	4259      	negs	r1, r3
 800d202:	4159      	adcs	r1, r3
 800d204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d208:	e7eb      	b.n	800d1e2 <__swhatbuf_r+0x22>

0800d20a <__smakebuf_r>:
 800d20a:	898b      	ldrh	r3, [r1, #12]
 800d20c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d20e:	079d      	lsls	r5, r3, #30
 800d210:	4606      	mov	r6, r0
 800d212:	460c      	mov	r4, r1
 800d214:	d507      	bpl.n	800d226 <__smakebuf_r+0x1c>
 800d216:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d21a:	6023      	str	r3, [r4, #0]
 800d21c:	6123      	str	r3, [r4, #16]
 800d21e:	2301      	movs	r3, #1
 800d220:	6163      	str	r3, [r4, #20]
 800d222:	b002      	add	sp, #8
 800d224:	bd70      	pop	{r4, r5, r6, pc}
 800d226:	466a      	mov	r2, sp
 800d228:	ab01      	add	r3, sp, #4
 800d22a:	f7ff ffc9 	bl	800d1c0 <__swhatbuf_r>
 800d22e:	9900      	ldr	r1, [sp, #0]
 800d230:	4605      	mov	r5, r0
 800d232:	4630      	mov	r0, r6
 800d234:	f7fb fab2 	bl	800879c <_malloc_r>
 800d238:	b948      	cbnz	r0, 800d24e <__smakebuf_r+0x44>
 800d23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d23e:	059a      	lsls	r2, r3, #22
 800d240:	d4ef      	bmi.n	800d222 <__smakebuf_r+0x18>
 800d242:	f023 0303 	bic.w	r3, r3, #3
 800d246:	f043 0302 	orr.w	r3, r3, #2
 800d24a:	81a3      	strh	r3, [r4, #12]
 800d24c:	e7e3      	b.n	800d216 <__smakebuf_r+0xc>
 800d24e:	89a3      	ldrh	r3, [r4, #12]
 800d250:	6020      	str	r0, [r4, #0]
 800d252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d256:	81a3      	strh	r3, [r4, #12]
 800d258:	9b00      	ldr	r3, [sp, #0]
 800d25a:	6120      	str	r0, [r4, #16]
 800d25c:	6163      	str	r3, [r4, #20]
 800d25e:	9b01      	ldr	r3, [sp, #4]
 800d260:	b15b      	cbz	r3, 800d27a <__smakebuf_r+0x70>
 800d262:	4630      	mov	r0, r6
 800d264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d268:	f000 f838 	bl	800d2dc <_isatty_r>
 800d26c:	b128      	cbz	r0, 800d27a <__smakebuf_r+0x70>
 800d26e:	89a3      	ldrh	r3, [r4, #12]
 800d270:	f023 0303 	bic.w	r3, r3, #3
 800d274:	f043 0301 	orr.w	r3, r3, #1
 800d278:	81a3      	strh	r3, [r4, #12]
 800d27a:	89a3      	ldrh	r3, [r4, #12]
 800d27c:	431d      	orrs	r5, r3
 800d27e:	81a5      	strh	r5, [r4, #12]
 800d280:	e7cf      	b.n	800d222 <__smakebuf_r+0x18>

0800d282 <memmove>:
 800d282:	4288      	cmp	r0, r1
 800d284:	b510      	push	{r4, lr}
 800d286:	eb01 0402 	add.w	r4, r1, r2
 800d28a:	d902      	bls.n	800d292 <memmove+0x10>
 800d28c:	4284      	cmp	r4, r0
 800d28e:	4623      	mov	r3, r4
 800d290:	d807      	bhi.n	800d2a2 <memmove+0x20>
 800d292:	1e43      	subs	r3, r0, #1
 800d294:	42a1      	cmp	r1, r4
 800d296:	d008      	beq.n	800d2aa <memmove+0x28>
 800d298:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d29c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2a0:	e7f8      	b.n	800d294 <memmove+0x12>
 800d2a2:	4601      	mov	r1, r0
 800d2a4:	4402      	add	r2, r0
 800d2a6:	428a      	cmp	r2, r1
 800d2a8:	d100      	bne.n	800d2ac <memmove+0x2a>
 800d2aa:	bd10      	pop	{r4, pc}
 800d2ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2b4:	e7f7      	b.n	800d2a6 <memmove+0x24>
	...

0800d2b8 <_fstat_r>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	4d06      	ldr	r5, [pc, #24]	; (800d2d8 <_fstat_r+0x20>)
 800d2be:	4604      	mov	r4, r0
 800d2c0:	4608      	mov	r0, r1
 800d2c2:	4611      	mov	r1, r2
 800d2c4:	602b      	str	r3, [r5, #0]
 800d2c6:	f7f4 ff34 	bl	8002132 <_fstat>
 800d2ca:	1c43      	adds	r3, r0, #1
 800d2cc:	d102      	bne.n	800d2d4 <_fstat_r+0x1c>
 800d2ce:	682b      	ldr	r3, [r5, #0]
 800d2d0:	b103      	cbz	r3, 800d2d4 <_fstat_r+0x1c>
 800d2d2:	6023      	str	r3, [r4, #0]
 800d2d4:	bd38      	pop	{r3, r4, r5, pc}
 800d2d6:	bf00      	nop
 800d2d8:	200006f8 	.word	0x200006f8

0800d2dc <_isatty_r>:
 800d2dc:	b538      	push	{r3, r4, r5, lr}
 800d2de:	2300      	movs	r3, #0
 800d2e0:	4d05      	ldr	r5, [pc, #20]	; (800d2f8 <_isatty_r+0x1c>)
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	4608      	mov	r0, r1
 800d2e6:	602b      	str	r3, [r5, #0]
 800d2e8:	f7f4 ff32 	bl	8002150 <_isatty>
 800d2ec:	1c43      	adds	r3, r0, #1
 800d2ee:	d102      	bne.n	800d2f6 <_isatty_r+0x1a>
 800d2f0:	682b      	ldr	r3, [r5, #0]
 800d2f2:	b103      	cbz	r3, 800d2f6 <_isatty_r+0x1a>
 800d2f4:	6023      	str	r3, [r4, #0]
 800d2f6:	bd38      	pop	{r3, r4, r5, pc}
 800d2f8:	200006f8 	.word	0x200006f8

0800d2fc <__assert_func>:
 800d2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2fe:	4614      	mov	r4, r2
 800d300:	461a      	mov	r2, r3
 800d302:	4b09      	ldr	r3, [pc, #36]	; (800d328 <__assert_func+0x2c>)
 800d304:	4605      	mov	r5, r0
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	68d8      	ldr	r0, [r3, #12]
 800d30a:	b14c      	cbz	r4, 800d320 <__assert_func+0x24>
 800d30c:	4b07      	ldr	r3, [pc, #28]	; (800d32c <__assert_func+0x30>)
 800d30e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d312:	9100      	str	r1, [sp, #0]
 800d314:	462b      	mov	r3, r5
 800d316:	4906      	ldr	r1, [pc, #24]	; (800d330 <__assert_func+0x34>)
 800d318:	f000 f80e 	bl	800d338 <fiprintf>
 800d31c:	f000 f81e 	bl	800d35c <abort>
 800d320:	4b04      	ldr	r3, [pc, #16]	; (800d334 <__assert_func+0x38>)
 800d322:	461c      	mov	r4, r3
 800d324:	e7f3      	b.n	800d30e <__assert_func+0x12>
 800d326:	bf00      	nop
 800d328:	200001ec 	.word	0x200001ec
 800d32c:	0800ecc5 	.word	0x0800ecc5
 800d330:	0800ecd2 	.word	0x0800ecd2
 800d334:	0800ed00 	.word	0x0800ed00

0800d338 <fiprintf>:
 800d338:	b40e      	push	{r1, r2, r3}
 800d33a:	b503      	push	{r0, r1, lr}
 800d33c:	4601      	mov	r1, r0
 800d33e:	ab03      	add	r3, sp, #12
 800d340:	4805      	ldr	r0, [pc, #20]	; (800d358 <fiprintf+0x20>)
 800d342:	f853 2b04 	ldr.w	r2, [r3], #4
 800d346:	6800      	ldr	r0, [r0, #0]
 800d348:	9301      	str	r3, [sp, #4]
 800d34a:	f7ff fd4b 	bl	800cde4 <_vfiprintf_r>
 800d34e:	b002      	add	sp, #8
 800d350:	f85d eb04 	ldr.w	lr, [sp], #4
 800d354:	b003      	add	sp, #12
 800d356:	4770      	bx	lr
 800d358:	200001ec 	.word	0x200001ec

0800d35c <abort>:
 800d35c:	2006      	movs	r0, #6
 800d35e:	b508      	push	{r3, lr}
 800d360:	f000 f82c 	bl	800d3bc <raise>
 800d364:	2001      	movs	r0, #1
 800d366:	f7f4 fe96 	bl	8002096 <_exit>

0800d36a <_raise_r>:
 800d36a:	291f      	cmp	r1, #31
 800d36c:	b538      	push	{r3, r4, r5, lr}
 800d36e:	4604      	mov	r4, r0
 800d370:	460d      	mov	r5, r1
 800d372:	d904      	bls.n	800d37e <_raise_r+0x14>
 800d374:	2316      	movs	r3, #22
 800d376:	6003      	str	r3, [r0, #0]
 800d378:	f04f 30ff 	mov.w	r0, #4294967295
 800d37c:	bd38      	pop	{r3, r4, r5, pc}
 800d37e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d380:	b112      	cbz	r2, 800d388 <_raise_r+0x1e>
 800d382:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d386:	b94b      	cbnz	r3, 800d39c <_raise_r+0x32>
 800d388:	4620      	mov	r0, r4
 800d38a:	f000 f831 	bl	800d3f0 <_getpid_r>
 800d38e:	462a      	mov	r2, r5
 800d390:	4601      	mov	r1, r0
 800d392:	4620      	mov	r0, r4
 800d394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d398:	f000 b818 	b.w	800d3cc <_kill_r>
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d00a      	beq.n	800d3b6 <_raise_r+0x4c>
 800d3a0:	1c59      	adds	r1, r3, #1
 800d3a2:	d103      	bne.n	800d3ac <_raise_r+0x42>
 800d3a4:	2316      	movs	r3, #22
 800d3a6:	6003      	str	r3, [r0, #0]
 800d3a8:	2001      	movs	r0, #1
 800d3aa:	e7e7      	b.n	800d37c <_raise_r+0x12>
 800d3ac:	2400      	movs	r4, #0
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d3b4:	4798      	blx	r3
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	e7e0      	b.n	800d37c <_raise_r+0x12>
	...

0800d3bc <raise>:
 800d3bc:	4b02      	ldr	r3, [pc, #8]	; (800d3c8 <raise+0xc>)
 800d3be:	4601      	mov	r1, r0
 800d3c0:	6818      	ldr	r0, [r3, #0]
 800d3c2:	f7ff bfd2 	b.w	800d36a <_raise_r>
 800d3c6:	bf00      	nop
 800d3c8:	200001ec 	.word	0x200001ec

0800d3cc <_kill_r>:
 800d3cc:	b538      	push	{r3, r4, r5, lr}
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	4d06      	ldr	r5, [pc, #24]	; (800d3ec <_kill_r+0x20>)
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	4608      	mov	r0, r1
 800d3d6:	4611      	mov	r1, r2
 800d3d8:	602b      	str	r3, [r5, #0]
 800d3da:	f7f4 fe4c 	bl	8002076 <_kill>
 800d3de:	1c43      	adds	r3, r0, #1
 800d3e0:	d102      	bne.n	800d3e8 <_kill_r+0x1c>
 800d3e2:	682b      	ldr	r3, [r5, #0]
 800d3e4:	b103      	cbz	r3, 800d3e8 <_kill_r+0x1c>
 800d3e6:	6023      	str	r3, [r4, #0]
 800d3e8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ea:	bf00      	nop
 800d3ec:	200006f8 	.word	0x200006f8

0800d3f0 <_getpid_r>:
 800d3f0:	f7f4 be3a 	b.w	8002068 <_getpid>

0800d3f4 <sinf>:
 800d3f4:	b507      	push	{r0, r1, r2, lr}
 800d3f6:	4a1b      	ldr	r2, [pc, #108]	; (800d464 <sinf+0x70>)
 800d3f8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	4601      	mov	r1, r0
 800d400:	dc06      	bgt.n	800d410 <sinf+0x1c>
 800d402:	2200      	movs	r2, #0
 800d404:	2100      	movs	r1, #0
 800d406:	b003      	add	sp, #12
 800d408:	f85d eb04 	ldr.w	lr, [sp], #4
 800d40c:	f000 b8f2 	b.w	800d5f4 <__kernel_sinf>
 800d410:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d414:	db04      	blt.n	800d420 <sinf+0x2c>
 800d416:	f7f3 fbc3 	bl	8000ba0 <__aeabi_fsub>
 800d41a:	b003      	add	sp, #12
 800d41c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d420:	4669      	mov	r1, sp
 800d422:	f000 f95d 	bl	800d6e0 <__ieee754_rem_pio2f>
 800d426:	f000 0003 	and.w	r0, r0, #3
 800d42a:	2801      	cmp	r0, #1
 800d42c:	d008      	beq.n	800d440 <sinf+0x4c>
 800d42e:	2802      	cmp	r0, #2
 800d430:	d00b      	beq.n	800d44a <sinf+0x56>
 800d432:	b990      	cbnz	r0, 800d45a <sinf+0x66>
 800d434:	2201      	movs	r2, #1
 800d436:	9901      	ldr	r1, [sp, #4]
 800d438:	9800      	ldr	r0, [sp, #0]
 800d43a:	f000 f8db 	bl	800d5f4 <__kernel_sinf>
 800d43e:	e7ec      	b.n	800d41a <sinf+0x26>
 800d440:	9901      	ldr	r1, [sp, #4]
 800d442:	9800      	ldr	r0, [sp, #0]
 800d444:	f000 f856 	bl	800d4f4 <__kernel_cosf>
 800d448:	e7e7      	b.n	800d41a <sinf+0x26>
 800d44a:	2201      	movs	r2, #1
 800d44c:	9901      	ldr	r1, [sp, #4]
 800d44e:	9800      	ldr	r0, [sp, #0]
 800d450:	f000 f8d0 	bl	800d5f4 <__kernel_sinf>
 800d454:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d458:	e7df      	b.n	800d41a <sinf+0x26>
 800d45a:	9901      	ldr	r1, [sp, #4]
 800d45c:	9800      	ldr	r0, [sp, #0]
 800d45e:	f000 f849 	bl	800d4f4 <__kernel_cosf>
 800d462:	e7f7      	b.n	800d454 <sinf+0x60>
 800d464:	3f490fd8 	.word	0x3f490fd8

0800d468 <round>:
 800d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d46e:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 800d472:	2a13      	cmp	r2, #19
 800d474:	460b      	mov	r3, r1
 800d476:	4605      	mov	r5, r0
 800d478:	460c      	mov	r4, r1
 800d47a:	dc18      	bgt.n	800d4ae <round+0x46>
 800d47c:	2a00      	cmp	r2, #0
 800d47e:	da09      	bge.n	800d494 <round+0x2c>
 800d480:	3201      	adds	r2, #1
 800d482:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d486:	d103      	bne.n	800d490 <round+0x28>
 800d488:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d48c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d490:	2200      	movs	r2, #0
 800d492:	e029      	b.n	800d4e8 <round+0x80>
 800d494:	4816      	ldr	r0, [pc, #88]	; (800d4f0 <round+0x88>)
 800d496:	4110      	asrs	r0, r2
 800d498:	4001      	ands	r1, r0
 800d49a:	4329      	orrs	r1, r5
 800d49c:	d011      	beq.n	800d4c2 <round+0x5a>
 800d49e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d4a2:	fa41 f202 	asr.w	r2, r1, r2
 800d4a6:	4413      	add	r3, r2
 800d4a8:	ea23 0300 	bic.w	r3, r3, r0
 800d4ac:	e7f0      	b.n	800d490 <round+0x28>
 800d4ae:	2a33      	cmp	r2, #51	; 0x33
 800d4b0:	dd0a      	ble.n	800d4c8 <round+0x60>
 800d4b2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d4b6:	d104      	bne.n	800d4c2 <round+0x5a>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	f7f2 fe6f 	bl	800019c <__adddf3>
 800d4be:	4605      	mov	r5, r0
 800d4c0:	460c      	mov	r4, r1
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4cc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d4d0:	40f8      	lsrs	r0, r7
 800d4d2:	4228      	tst	r0, r5
 800d4d4:	d0f5      	beq.n	800d4c2 <round+0x5a>
 800d4d6:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 800d4da:	2201      	movs	r2, #1
 800d4dc:	408a      	lsls	r2, r1
 800d4de:	1952      	adds	r2, r2, r5
 800d4e0:	bf28      	it	cs
 800d4e2:	3301      	addcs	r3, #1
 800d4e4:	ea22 0200 	bic.w	r2, r2, r0
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	e7e7      	b.n	800d4be <round+0x56>
 800d4ee:	bf00      	nop
 800d4f0:	000fffff 	.word	0x000fffff

0800d4f4 <__kernel_cosf>:
 800d4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f8:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800d4fc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800d500:	4606      	mov	r6, r0
 800d502:	4688      	mov	r8, r1
 800d504:	da03      	bge.n	800d50e <__kernel_cosf+0x1a>
 800d506:	f7f3 fe1b 	bl	8001140 <__aeabi_f2iz>
 800d50a:	2800      	cmp	r0, #0
 800d50c:	d05c      	beq.n	800d5c8 <__kernel_cosf+0xd4>
 800d50e:	4631      	mov	r1, r6
 800d510:	4630      	mov	r0, r6
 800d512:	f7f3 fc4f 	bl	8000db4 <__aeabi_fmul>
 800d516:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d51a:	4605      	mov	r5, r0
 800d51c:	f7f3 fc4a 	bl	8000db4 <__aeabi_fmul>
 800d520:	492b      	ldr	r1, [pc, #172]	; (800d5d0 <__kernel_cosf+0xdc>)
 800d522:	4607      	mov	r7, r0
 800d524:	4628      	mov	r0, r5
 800d526:	f7f3 fc45 	bl	8000db4 <__aeabi_fmul>
 800d52a:	492a      	ldr	r1, [pc, #168]	; (800d5d4 <__kernel_cosf+0xe0>)
 800d52c:	f7f3 fb3a 	bl	8000ba4 <__addsf3>
 800d530:	4629      	mov	r1, r5
 800d532:	f7f3 fc3f 	bl	8000db4 <__aeabi_fmul>
 800d536:	4928      	ldr	r1, [pc, #160]	; (800d5d8 <__kernel_cosf+0xe4>)
 800d538:	f7f3 fb32 	bl	8000ba0 <__aeabi_fsub>
 800d53c:	4629      	mov	r1, r5
 800d53e:	f7f3 fc39 	bl	8000db4 <__aeabi_fmul>
 800d542:	4926      	ldr	r1, [pc, #152]	; (800d5dc <__kernel_cosf+0xe8>)
 800d544:	f7f3 fb2e 	bl	8000ba4 <__addsf3>
 800d548:	4629      	mov	r1, r5
 800d54a:	f7f3 fc33 	bl	8000db4 <__aeabi_fmul>
 800d54e:	4924      	ldr	r1, [pc, #144]	; (800d5e0 <__kernel_cosf+0xec>)
 800d550:	f7f3 fb26 	bl	8000ba0 <__aeabi_fsub>
 800d554:	4629      	mov	r1, r5
 800d556:	f7f3 fc2d 	bl	8000db4 <__aeabi_fmul>
 800d55a:	4922      	ldr	r1, [pc, #136]	; (800d5e4 <__kernel_cosf+0xf0>)
 800d55c:	f7f3 fb22 	bl	8000ba4 <__addsf3>
 800d560:	4629      	mov	r1, r5
 800d562:	f7f3 fc27 	bl	8000db4 <__aeabi_fmul>
 800d566:	4629      	mov	r1, r5
 800d568:	f7f3 fc24 	bl	8000db4 <__aeabi_fmul>
 800d56c:	4641      	mov	r1, r8
 800d56e:	4605      	mov	r5, r0
 800d570:	4630      	mov	r0, r6
 800d572:	f7f3 fc1f 	bl	8000db4 <__aeabi_fmul>
 800d576:	4601      	mov	r1, r0
 800d578:	4628      	mov	r0, r5
 800d57a:	f7f3 fb11 	bl	8000ba0 <__aeabi_fsub>
 800d57e:	4b1a      	ldr	r3, [pc, #104]	; (800d5e8 <__kernel_cosf+0xf4>)
 800d580:	4605      	mov	r5, r0
 800d582:	429c      	cmp	r4, r3
 800d584:	dc0a      	bgt.n	800d59c <__kernel_cosf+0xa8>
 800d586:	4601      	mov	r1, r0
 800d588:	4638      	mov	r0, r7
 800d58a:	f7f3 fb09 	bl	8000ba0 <__aeabi_fsub>
 800d58e:	4601      	mov	r1, r0
 800d590:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d594:	f7f3 fb04 	bl	8000ba0 <__aeabi_fsub>
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59c:	4b13      	ldr	r3, [pc, #76]	; (800d5ec <__kernel_cosf+0xf8>)
 800d59e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d5a2:	429c      	cmp	r4, r3
 800d5a4:	bfcc      	ite	gt
 800d5a6:	4c12      	ldrgt	r4, [pc, #72]	; (800d5f0 <__kernel_cosf+0xfc>)
 800d5a8:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800d5ac:	4621      	mov	r1, r4
 800d5ae:	f7f3 faf7 	bl	8000ba0 <__aeabi_fsub>
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	4606      	mov	r6, r0
 800d5b6:	4638      	mov	r0, r7
 800d5b8:	f7f3 faf2 	bl	8000ba0 <__aeabi_fsub>
 800d5bc:	4629      	mov	r1, r5
 800d5be:	f7f3 faef 	bl	8000ba0 <__aeabi_fsub>
 800d5c2:	4601      	mov	r1, r0
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	e7e5      	b.n	800d594 <__kernel_cosf+0xa0>
 800d5c8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d5cc:	e7e4      	b.n	800d598 <__kernel_cosf+0xa4>
 800d5ce:	bf00      	nop
 800d5d0:	ad47d74e 	.word	0xad47d74e
 800d5d4:	310f74f6 	.word	0x310f74f6
 800d5d8:	3493f27c 	.word	0x3493f27c
 800d5dc:	37d00d01 	.word	0x37d00d01
 800d5e0:	3ab60b61 	.word	0x3ab60b61
 800d5e4:	3d2aaaab 	.word	0x3d2aaaab
 800d5e8:	3e999999 	.word	0x3e999999
 800d5ec:	3f480000 	.word	0x3f480000
 800d5f0:	3e900000 	.word	0x3e900000

0800d5f4 <__kernel_sinf>:
 800d5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5f8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d5fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d600:	4604      	mov	r4, r0
 800d602:	460f      	mov	r7, r1
 800d604:	4691      	mov	r9, r2
 800d606:	da03      	bge.n	800d610 <__kernel_sinf+0x1c>
 800d608:	f7f3 fd9a 	bl	8001140 <__aeabi_f2iz>
 800d60c:	2800      	cmp	r0, #0
 800d60e:	d035      	beq.n	800d67c <__kernel_sinf+0x88>
 800d610:	4621      	mov	r1, r4
 800d612:	4620      	mov	r0, r4
 800d614:	f7f3 fbce 	bl	8000db4 <__aeabi_fmul>
 800d618:	4605      	mov	r5, r0
 800d61a:	4601      	mov	r1, r0
 800d61c:	4620      	mov	r0, r4
 800d61e:	f7f3 fbc9 	bl	8000db4 <__aeabi_fmul>
 800d622:	4929      	ldr	r1, [pc, #164]	; (800d6c8 <__kernel_sinf+0xd4>)
 800d624:	4606      	mov	r6, r0
 800d626:	4628      	mov	r0, r5
 800d628:	f7f3 fbc4 	bl	8000db4 <__aeabi_fmul>
 800d62c:	4927      	ldr	r1, [pc, #156]	; (800d6cc <__kernel_sinf+0xd8>)
 800d62e:	f7f3 fab7 	bl	8000ba0 <__aeabi_fsub>
 800d632:	4629      	mov	r1, r5
 800d634:	f7f3 fbbe 	bl	8000db4 <__aeabi_fmul>
 800d638:	4925      	ldr	r1, [pc, #148]	; (800d6d0 <__kernel_sinf+0xdc>)
 800d63a:	f7f3 fab3 	bl	8000ba4 <__addsf3>
 800d63e:	4629      	mov	r1, r5
 800d640:	f7f3 fbb8 	bl	8000db4 <__aeabi_fmul>
 800d644:	4923      	ldr	r1, [pc, #140]	; (800d6d4 <__kernel_sinf+0xe0>)
 800d646:	f7f3 faab 	bl	8000ba0 <__aeabi_fsub>
 800d64a:	4629      	mov	r1, r5
 800d64c:	f7f3 fbb2 	bl	8000db4 <__aeabi_fmul>
 800d650:	4921      	ldr	r1, [pc, #132]	; (800d6d8 <__kernel_sinf+0xe4>)
 800d652:	f7f3 faa7 	bl	8000ba4 <__addsf3>
 800d656:	4680      	mov	r8, r0
 800d658:	f1b9 0f00 	cmp.w	r9, #0
 800d65c:	d111      	bne.n	800d682 <__kernel_sinf+0x8e>
 800d65e:	4601      	mov	r1, r0
 800d660:	4628      	mov	r0, r5
 800d662:	f7f3 fba7 	bl	8000db4 <__aeabi_fmul>
 800d666:	491d      	ldr	r1, [pc, #116]	; (800d6dc <__kernel_sinf+0xe8>)
 800d668:	f7f3 fa9a 	bl	8000ba0 <__aeabi_fsub>
 800d66c:	4631      	mov	r1, r6
 800d66e:	f7f3 fba1 	bl	8000db4 <__aeabi_fmul>
 800d672:	4601      	mov	r1, r0
 800d674:	4620      	mov	r0, r4
 800d676:	f7f3 fa95 	bl	8000ba4 <__addsf3>
 800d67a:	4604      	mov	r4, r0
 800d67c:	4620      	mov	r0, r4
 800d67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d682:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d686:	4638      	mov	r0, r7
 800d688:	f7f3 fb94 	bl	8000db4 <__aeabi_fmul>
 800d68c:	4641      	mov	r1, r8
 800d68e:	4681      	mov	r9, r0
 800d690:	4630      	mov	r0, r6
 800d692:	f7f3 fb8f 	bl	8000db4 <__aeabi_fmul>
 800d696:	4601      	mov	r1, r0
 800d698:	4648      	mov	r0, r9
 800d69a:	f7f3 fa81 	bl	8000ba0 <__aeabi_fsub>
 800d69e:	4629      	mov	r1, r5
 800d6a0:	f7f3 fb88 	bl	8000db4 <__aeabi_fmul>
 800d6a4:	4639      	mov	r1, r7
 800d6a6:	f7f3 fa7b 	bl	8000ba0 <__aeabi_fsub>
 800d6aa:	490c      	ldr	r1, [pc, #48]	; (800d6dc <__kernel_sinf+0xe8>)
 800d6ac:	4605      	mov	r5, r0
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	f7f3 fb80 	bl	8000db4 <__aeabi_fmul>
 800d6b4:	4601      	mov	r1, r0
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	f7f3 fa74 	bl	8000ba4 <__addsf3>
 800d6bc:	4601      	mov	r1, r0
 800d6be:	4620      	mov	r0, r4
 800d6c0:	f7f3 fa6e 	bl	8000ba0 <__aeabi_fsub>
 800d6c4:	e7d9      	b.n	800d67a <__kernel_sinf+0x86>
 800d6c6:	bf00      	nop
 800d6c8:	2f2ec9d3 	.word	0x2f2ec9d3
 800d6cc:	32d72f34 	.word	0x32d72f34
 800d6d0:	3638ef1b 	.word	0x3638ef1b
 800d6d4:	39500d01 	.word	0x39500d01
 800d6d8:	3c088889 	.word	0x3c088889
 800d6dc:	3e2aaaab 	.word	0x3e2aaaab

0800d6e0 <__ieee754_rem_pio2f>:
 800d6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e4:	4aa0      	ldr	r2, [pc, #640]	; (800d968 <__ieee754_rem_pio2f+0x288>)
 800d6e6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800d6ea:	4296      	cmp	r6, r2
 800d6ec:	460c      	mov	r4, r1
 800d6ee:	4682      	mov	sl, r0
 800d6f0:	b087      	sub	sp, #28
 800d6f2:	dc04      	bgt.n	800d6fe <__ieee754_rem_pio2f+0x1e>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	6008      	str	r0, [r1, #0]
 800d6f8:	604b      	str	r3, [r1, #4]
 800d6fa:	2500      	movs	r5, #0
 800d6fc:	e01a      	b.n	800d734 <__ieee754_rem_pio2f+0x54>
 800d6fe:	4a9b      	ldr	r2, [pc, #620]	; (800d96c <__ieee754_rem_pio2f+0x28c>)
 800d700:	4296      	cmp	r6, r2
 800d702:	dc4b      	bgt.n	800d79c <__ieee754_rem_pio2f+0xbc>
 800d704:	2800      	cmp	r0, #0
 800d706:	499a      	ldr	r1, [pc, #616]	; (800d970 <__ieee754_rem_pio2f+0x290>)
 800d708:	4f9a      	ldr	r7, [pc, #616]	; (800d974 <__ieee754_rem_pio2f+0x294>)
 800d70a:	f026 060f 	bic.w	r6, r6, #15
 800d70e:	dd23      	ble.n	800d758 <__ieee754_rem_pio2f+0x78>
 800d710:	f7f3 fa46 	bl	8000ba0 <__aeabi_fsub>
 800d714:	42be      	cmp	r6, r7
 800d716:	4605      	mov	r5, r0
 800d718:	d010      	beq.n	800d73c <__ieee754_rem_pio2f+0x5c>
 800d71a:	4997      	ldr	r1, [pc, #604]	; (800d978 <__ieee754_rem_pio2f+0x298>)
 800d71c:	f7f3 fa40 	bl	8000ba0 <__aeabi_fsub>
 800d720:	4601      	mov	r1, r0
 800d722:	6020      	str	r0, [r4, #0]
 800d724:	4628      	mov	r0, r5
 800d726:	f7f3 fa3b 	bl	8000ba0 <__aeabi_fsub>
 800d72a:	4993      	ldr	r1, [pc, #588]	; (800d978 <__ieee754_rem_pio2f+0x298>)
 800d72c:	f7f3 fa38 	bl	8000ba0 <__aeabi_fsub>
 800d730:	2501      	movs	r5, #1
 800d732:	6060      	str	r0, [r4, #4]
 800d734:	4628      	mov	r0, r5
 800d736:	b007      	add	sp, #28
 800d738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73c:	498f      	ldr	r1, [pc, #572]	; (800d97c <__ieee754_rem_pio2f+0x29c>)
 800d73e:	f7f3 fa2f 	bl	8000ba0 <__aeabi_fsub>
 800d742:	498f      	ldr	r1, [pc, #572]	; (800d980 <__ieee754_rem_pio2f+0x2a0>)
 800d744:	4605      	mov	r5, r0
 800d746:	f7f3 fa2b 	bl	8000ba0 <__aeabi_fsub>
 800d74a:	4601      	mov	r1, r0
 800d74c:	6020      	str	r0, [r4, #0]
 800d74e:	4628      	mov	r0, r5
 800d750:	f7f3 fa26 	bl	8000ba0 <__aeabi_fsub>
 800d754:	498a      	ldr	r1, [pc, #552]	; (800d980 <__ieee754_rem_pio2f+0x2a0>)
 800d756:	e7e9      	b.n	800d72c <__ieee754_rem_pio2f+0x4c>
 800d758:	f7f3 fa24 	bl	8000ba4 <__addsf3>
 800d75c:	42be      	cmp	r6, r7
 800d75e:	4605      	mov	r5, r0
 800d760:	d00e      	beq.n	800d780 <__ieee754_rem_pio2f+0xa0>
 800d762:	4985      	ldr	r1, [pc, #532]	; (800d978 <__ieee754_rem_pio2f+0x298>)
 800d764:	f7f3 fa1e 	bl	8000ba4 <__addsf3>
 800d768:	4601      	mov	r1, r0
 800d76a:	6020      	str	r0, [r4, #0]
 800d76c:	4628      	mov	r0, r5
 800d76e:	f7f3 fa17 	bl	8000ba0 <__aeabi_fsub>
 800d772:	4981      	ldr	r1, [pc, #516]	; (800d978 <__ieee754_rem_pio2f+0x298>)
 800d774:	f7f3 fa16 	bl	8000ba4 <__addsf3>
 800d778:	f04f 35ff 	mov.w	r5, #4294967295
 800d77c:	6060      	str	r0, [r4, #4]
 800d77e:	e7d9      	b.n	800d734 <__ieee754_rem_pio2f+0x54>
 800d780:	497e      	ldr	r1, [pc, #504]	; (800d97c <__ieee754_rem_pio2f+0x29c>)
 800d782:	f7f3 fa0f 	bl	8000ba4 <__addsf3>
 800d786:	497e      	ldr	r1, [pc, #504]	; (800d980 <__ieee754_rem_pio2f+0x2a0>)
 800d788:	4605      	mov	r5, r0
 800d78a:	f7f3 fa0b 	bl	8000ba4 <__addsf3>
 800d78e:	4601      	mov	r1, r0
 800d790:	6020      	str	r0, [r4, #0]
 800d792:	4628      	mov	r0, r5
 800d794:	f7f3 fa04 	bl	8000ba0 <__aeabi_fsub>
 800d798:	4979      	ldr	r1, [pc, #484]	; (800d980 <__ieee754_rem_pio2f+0x2a0>)
 800d79a:	e7eb      	b.n	800d774 <__ieee754_rem_pio2f+0x94>
 800d79c:	4a79      	ldr	r2, [pc, #484]	; (800d984 <__ieee754_rem_pio2f+0x2a4>)
 800d79e:	4296      	cmp	r6, r2
 800d7a0:	f300 8091 	bgt.w	800d8c6 <__ieee754_rem_pio2f+0x1e6>
 800d7a4:	f000 f8fa 	bl	800d99c <fabsf>
 800d7a8:	4977      	ldr	r1, [pc, #476]	; (800d988 <__ieee754_rem_pio2f+0x2a8>)
 800d7aa:	4607      	mov	r7, r0
 800d7ac:	f7f3 fb02 	bl	8000db4 <__aeabi_fmul>
 800d7b0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d7b4:	f7f3 f9f6 	bl	8000ba4 <__addsf3>
 800d7b8:	f7f3 fcc2 	bl	8001140 <__aeabi_f2iz>
 800d7bc:	4605      	mov	r5, r0
 800d7be:	f7f3 faa5 	bl	8000d0c <__aeabi_i2f>
 800d7c2:	496b      	ldr	r1, [pc, #428]	; (800d970 <__ieee754_rem_pio2f+0x290>)
 800d7c4:	4681      	mov	r9, r0
 800d7c6:	f7f3 faf5 	bl	8000db4 <__aeabi_fmul>
 800d7ca:	4601      	mov	r1, r0
 800d7cc:	4638      	mov	r0, r7
 800d7ce:	f7f3 f9e7 	bl	8000ba0 <__aeabi_fsub>
 800d7d2:	4969      	ldr	r1, [pc, #420]	; (800d978 <__ieee754_rem_pio2f+0x298>)
 800d7d4:	4680      	mov	r8, r0
 800d7d6:	4648      	mov	r0, r9
 800d7d8:	f7f3 faec 	bl	8000db4 <__aeabi_fmul>
 800d7dc:	2d1f      	cmp	r5, #31
 800d7de:	4607      	mov	r7, r0
 800d7e0:	dc0c      	bgt.n	800d7fc <__ieee754_rem_pio2f+0x11c>
 800d7e2:	4a6a      	ldr	r2, [pc, #424]	; (800d98c <__ieee754_rem_pio2f+0x2ac>)
 800d7e4:	1e69      	subs	r1, r5, #1
 800d7e6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d7ea:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d004      	beq.n	800d7fc <__ieee754_rem_pio2f+0x11c>
 800d7f2:	4639      	mov	r1, r7
 800d7f4:	4640      	mov	r0, r8
 800d7f6:	f7f3 f9d3 	bl	8000ba0 <__aeabi_fsub>
 800d7fa:	e00b      	b.n	800d814 <__ieee754_rem_pio2f+0x134>
 800d7fc:	4639      	mov	r1, r7
 800d7fe:	4640      	mov	r0, r8
 800d800:	f7f3 f9ce 	bl	8000ba0 <__aeabi_fsub>
 800d804:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d808:	ebc3 53d6 	rsb	r3, r3, r6, lsr #23
 800d80c:	2b08      	cmp	r3, #8
 800d80e:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800d812:	dc01      	bgt.n	800d818 <__ieee754_rem_pio2f+0x138>
 800d814:	6020      	str	r0, [r4, #0]
 800d816:	e026      	b.n	800d866 <__ieee754_rem_pio2f+0x186>
 800d818:	4958      	ldr	r1, [pc, #352]	; (800d97c <__ieee754_rem_pio2f+0x29c>)
 800d81a:	4648      	mov	r0, r9
 800d81c:	f7f3 faca 	bl	8000db4 <__aeabi_fmul>
 800d820:	4607      	mov	r7, r0
 800d822:	4601      	mov	r1, r0
 800d824:	4640      	mov	r0, r8
 800d826:	f7f3 f9bb 	bl	8000ba0 <__aeabi_fsub>
 800d82a:	4601      	mov	r1, r0
 800d82c:	4606      	mov	r6, r0
 800d82e:	4640      	mov	r0, r8
 800d830:	f7f3 f9b6 	bl	8000ba0 <__aeabi_fsub>
 800d834:	4639      	mov	r1, r7
 800d836:	f7f3 f9b3 	bl	8000ba0 <__aeabi_fsub>
 800d83a:	4607      	mov	r7, r0
 800d83c:	4950      	ldr	r1, [pc, #320]	; (800d980 <__ieee754_rem_pio2f+0x2a0>)
 800d83e:	4648      	mov	r0, r9
 800d840:	f7f3 fab8 	bl	8000db4 <__aeabi_fmul>
 800d844:	4639      	mov	r1, r7
 800d846:	f7f3 f9ab 	bl	8000ba0 <__aeabi_fsub>
 800d84a:	4601      	mov	r1, r0
 800d84c:	4607      	mov	r7, r0
 800d84e:	4630      	mov	r0, r6
 800d850:	f7f3 f9a6 	bl	8000ba0 <__aeabi_fsub>
 800d854:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d858:	ebab 0b03 	sub.w	fp, fp, r3
 800d85c:	f1bb 0f19 	cmp.w	fp, #25
 800d860:	dc16      	bgt.n	800d890 <__ieee754_rem_pio2f+0x1b0>
 800d862:	46b0      	mov	r8, r6
 800d864:	6020      	str	r0, [r4, #0]
 800d866:	6826      	ldr	r6, [r4, #0]
 800d868:	4640      	mov	r0, r8
 800d86a:	4631      	mov	r1, r6
 800d86c:	f7f3 f998 	bl	8000ba0 <__aeabi_fsub>
 800d870:	4639      	mov	r1, r7
 800d872:	f7f3 f995 	bl	8000ba0 <__aeabi_fsub>
 800d876:	f1ba 0f00 	cmp.w	sl, #0
 800d87a:	6060      	str	r0, [r4, #4]
 800d87c:	f6bf af5a 	bge.w	800d734 <__ieee754_rem_pio2f+0x54>
 800d880:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800d884:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d888:	6026      	str	r6, [r4, #0]
 800d88a:	6060      	str	r0, [r4, #4]
 800d88c:	426d      	negs	r5, r5
 800d88e:	e751      	b.n	800d734 <__ieee754_rem_pio2f+0x54>
 800d890:	493f      	ldr	r1, [pc, #252]	; (800d990 <__ieee754_rem_pio2f+0x2b0>)
 800d892:	4648      	mov	r0, r9
 800d894:	f7f3 fa8e 	bl	8000db4 <__aeabi_fmul>
 800d898:	4607      	mov	r7, r0
 800d89a:	4601      	mov	r1, r0
 800d89c:	4630      	mov	r0, r6
 800d89e:	f7f3 f97f 	bl	8000ba0 <__aeabi_fsub>
 800d8a2:	4601      	mov	r1, r0
 800d8a4:	4680      	mov	r8, r0
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	f7f3 f97a 	bl	8000ba0 <__aeabi_fsub>
 800d8ac:	4639      	mov	r1, r7
 800d8ae:	f7f3 f977 	bl	8000ba0 <__aeabi_fsub>
 800d8b2:	4606      	mov	r6, r0
 800d8b4:	4937      	ldr	r1, [pc, #220]	; (800d994 <__ieee754_rem_pio2f+0x2b4>)
 800d8b6:	4648      	mov	r0, r9
 800d8b8:	f7f3 fa7c 	bl	8000db4 <__aeabi_fmul>
 800d8bc:	4631      	mov	r1, r6
 800d8be:	f7f3 f96f 	bl	8000ba0 <__aeabi_fsub>
 800d8c2:	4607      	mov	r7, r0
 800d8c4:	e795      	b.n	800d7f2 <__ieee754_rem_pio2f+0x112>
 800d8c6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800d8ca:	db05      	blt.n	800d8d8 <__ieee754_rem_pio2f+0x1f8>
 800d8cc:	4601      	mov	r1, r0
 800d8ce:	f7f3 f967 	bl	8000ba0 <__aeabi_fsub>
 800d8d2:	6060      	str	r0, [r4, #4]
 800d8d4:	6020      	str	r0, [r4, #0]
 800d8d6:	e710      	b.n	800d6fa <__ieee754_rem_pio2f+0x1a>
 800d8d8:	15f7      	asrs	r7, r6, #23
 800d8da:	3f86      	subs	r7, #134	; 0x86
 800d8dc:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	f7f3 fc2d 	bl	8001140 <__aeabi_f2iz>
 800d8e6:	f7f3 fa11 	bl	8000d0c <__aeabi_i2f>
 800d8ea:	4601      	mov	r1, r0
 800d8ec:	9003      	str	r0, [sp, #12]
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f7f3 f956 	bl	8000ba0 <__aeabi_fsub>
 800d8f4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d8f8:	f7f3 fa5c 	bl	8000db4 <__aeabi_fmul>
 800d8fc:	4606      	mov	r6, r0
 800d8fe:	f7f3 fc1f 	bl	8001140 <__aeabi_f2iz>
 800d902:	f7f3 fa03 	bl	8000d0c <__aeabi_i2f>
 800d906:	4601      	mov	r1, r0
 800d908:	9004      	str	r0, [sp, #16]
 800d90a:	4605      	mov	r5, r0
 800d90c:	4630      	mov	r0, r6
 800d90e:	f7f3 f947 	bl	8000ba0 <__aeabi_fsub>
 800d912:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d916:	f7f3 fa4d 	bl	8000db4 <__aeabi_fmul>
 800d91a:	2100      	movs	r1, #0
 800d91c:	9005      	str	r0, [sp, #20]
 800d91e:	f7f3 fbdd 	bl	80010dc <__aeabi_fcmpeq>
 800d922:	b1f0      	cbz	r0, 800d962 <__ieee754_rem_pio2f+0x282>
 800d924:	2100      	movs	r1, #0
 800d926:	4628      	mov	r0, r5
 800d928:	f7f3 fbd8 	bl	80010dc <__aeabi_fcmpeq>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	bf14      	ite	ne
 800d930:	2301      	movne	r3, #1
 800d932:	2302      	moveq	r3, #2
 800d934:	4a18      	ldr	r2, [pc, #96]	; (800d998 <__ieee754_rem_pio2f+0x2b8>)
 800d936:	4621      	mov	r1, r4
 800d938:	9201      	str	r2, [sp, #4]
 800d93a:	2202      	movs	r2, #2
 800d93c:	a803      	add	r0, sp, #12
 800d93e:	9200      	str	r2, [sp, #0]
 800d940:	463a      	mov	r2, r7
 800d942:	f000 f82f 	bl	800d9a4 <__kernel_rem_pio2f>
 800d946:	f1ba 0f00 	cmp.w	sl, #0
 800d94a:	4605      	mov	r5, r0
 800d94c:	f6bf aef2 	bge.w	800d734 <__ieee754_rem_pio2f+0x54>
 800d950:	6823      	ldr	r3, [r4, #0]
 800d952:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d956:	6023      	str	r3, [r4, #0]
 800d958:	6863      	ldr	r3, [r4, #4]
 800d95a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d95e:	6063      	str	r3, [r4, #4]
 800d960:	e794      	b.n	800d88c <__ieee754_rem_pio2f+0x1ac>
 800d962:	2303      	movs	r3, #3
 800d964:	e7e6      	b.n	800d934 <__ieee754_rem_pio2f+0x254>
 800d966:	bf00      	nop
 800d968:	3f490fd8 	.word	0x3f490fd8
 800d96c:	4016cbe3 	.word	0x4016cbe3
 800d970:	3fc90f80 	.word	0x3fc90f80
 800d974:	3fc90fd0 	.word	0x3fc90fd0
 800d978:	37354443 	.word	0x37354443
 800d97c:	37354400 	.word	0x37354400
 800d980:	2e85a308 	.word	0x2e85a308
 800d984:	43490f80 	.word	0x43490f80
 800d988:	3f22f984 	.word	0x3f22f984
 800d98c:	0800ed04 	.word	0x0800ed04
 800d990:	2e85a300 	.word	0x2e85a300
 800d994:	248d3132 	.word	0x248d3132
 800d998:	0800ed84 	.word	0x0800ed84

0800d99c <fabsf>:
 800d99c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d9a0:	4770      	bx	lr
	...

0800d9a4 <__kernel_rem_pio2f>:
 800d9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a8:	b0db      	sub	sp, #364	; 0x16c
 800d9aa:	9202      	str	r2, [sp, #8]
 800d9ac:	9304      	str	r3, [sp, #16]
 800d9ae:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d9b0:	4bbb      	ldr	r3, [pc, #748]	; (800dca0 <__kernel_rem_pio2f+0x2fc>)
 800d9b2:	9005      	str	r0, [sp, #20]
 800d9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b8:	9100      	str	r1, [sp, #0]
 800d9ba:	9301      	str	r3, [sp, #4]
 800d9bc:	9b04      	ldr	r3, [sp, #16]
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	9303      	str	r3, [sp, #12]
 800d9c2:	9b02      	ldr	r3, [sp, #8]
 800d9c4:	1d1a      	adds	r2, r3, #4
 800d9c6:	f2c0 809b 	blt.w	800db00 <__kernel_rem_pio2f+0x15c>
 800d9ca:	1edc      	subs	r4, r3, #3
 800d9cc:	bf48      	it	mi
 800d9ce:	1d1c      	addmi	r4, r3, #4
 800d9d0:	10e4      	asrs	r4, r4, #3
 800d9d2:	2500      	movs	r5, #0
 800d9d4:	f04f 0b00 	mov.w	fp, #0
 800d9d8:	1c67      	adds	r7, r4, #1
 800d9da:	00fb      	lsls	r3, r7, #3
 800d9dc:	9306      	str	r3, [sp, #24]
 800d9de:	9b02      	ldr	r3, [sp, #8]
 800d9e0:	9a03      	ldr	r2, [sp, #12]
 800d9e2:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800d9e6:	9b01      	ldr	r3, [sp, #4]
 800d9e8:	eba4 0802 	sub.w	r8, r4, r2
 800d9ec:	eb03 0902 	add.w	r9, r3, r2
 800d9f0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800d9f2:	ae1e      	add	r6, sp, #120	; 0x78
 800d9f4:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800d9f8:	454d      	cmp	r5, r9
 800d9fa:	f340 8083 	ble.w	800db04 <__kernel_rem_pio2f+0x160>
 800d9fe:	9a04      	ldr	r2, [sp, #16]
 800da00:	ab1e      	add	r3, sp, #120	; 0x78
 800da02:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800da06:	f04f 0900 	mov.w	r9, #0
 800da0a:	2300      	movs	r3, #0
 800da0c:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 800da10:	9a01      	ldr	r2, [sp, #4]
 800da12:	4591      	cmp	r9, r2
 800da14:	f340 809e 	ble.w	800db54 <__kernel_rem_pio2f+0x1b0>
 800da18:	4613      	mov	r3, r2
 800da1a:	aa0a      	add	r2, sp, #40	; 0x28
 800da1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da20:	9308      	str	r3, [sp, #32]
 800da22:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800da24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800da28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800da2c:	9307      	str	r3, [sp, #28]
 800da2e:	ac0a      	add	r4, sp, #40	; 0x28
 800da30:	4626      	mov	r6, r4
 800da32:	46c3      	mov	fp, r8
 800da34:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800da38:	ab5a      	add	r3, sp, #360	; 0x168
 800da3a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800da3e:	f853 5c50 	ldr.w	r5, [r3, #-80]
 800da42:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800da46:	f1bb 0f00 	cmp.w	fp, #0
 800da4a:	f300 8088 	bgt.w	800db5e <__kernel_rem_pio2f+0x1ba>
 800da4e:	4639      	mov	r1, r7
 800da50:	4628      	mov	r0, r5
 800da52:	f000 fa5b 	bl	800df0c <scalbnf>
 800da56:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800da5a:	4605      	mov	r5, r0
 800da5c:	f7f3 f9aa 	bl	8000db4 <__aeabi_fmul>
 800da60:	f000 faa0 	bl	800dfa4 <floorf>
 800da64:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800da68:	f7f3 f9a4 	bl	8000db4 <__aeabi_fmul>
 800da6c:	4601      	mov	r1, r0
 800da6e:	4628      	mov	r0, r5
 800da70:	f7f3 f896 	bl	8000ba0 <__aeabi_fsub>
 800da74:	4605      	mov	r5, r0
 800da76:	f7f3 fb63 	bl	8001140 <__aeabi_f2iz>
 800da7a:	4606      	mov	r6, r0
 800da7c:	f7f3 f946 	bl	8000d0c <__aeabi_i2f>
 800da80:	4601      	mov	r1, r0
 800da82:	4628      	mov	r0, r5
 800da84:	f7f3 f88c 	bl	8000ba0 <__aeabi_fsub>
 800da88:	2f00      	cmp	r7, #0
 800da8a:	4681      	mov	r9, r0
 800da8c:	f340 8086 	ble.w	800db9c <__kernel_rem_pio2f+0x1f8>
 800da90:	f108 32ff 	add.w	r2, r8, #4294967295
 800da94:	ab0a      	add	r3, sp, #40	; 0x28
 800da96:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800da9a:	f1c7 0108 	rsb	r1, r7, #8
 800da9e:	fa45 f301 	asr.w	r3, r5, r1
 800daa2:	441e      	add	r6, r3
 800daa4:	408b      	lsls	r3, r1
 800daa6:	1aed      	subs	r5, r5, r3
 800daa8:	ab0a      	add	r3, sp, #40	; 0x28
 800daaa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800daae:	f1c7 0307 	rsb	r3, r7, #7
 800dab2:	411d      	asrs	r5, r3
 800dab4:	2d00      	cmp	r5, #0
 800dab6:	dd7f      	ble.n	800dbb8 <__kernel_rem_pio2f+0x214>
 800dab8:	2200      	movs	r2, #0
 800daba:	4692      	mov	sl, r2
 800dabc:	3601      	adds	r6, #1
 800dabe:	4590      	cmp	r8, r2
 800dac0:	f300 80b0 	bgt.w	800dc24 <__kernel_rem_pio2f+0x280>
 800dac4:	2f00      	cmp	r7, #0
 800dac6:	dd05      	ble.n	800dad4 <__kernel_rem_pio2f+0x130>
 800dac8:	2f01      	cmp	r7, #1
 800daca:	f000 80bd 	beq.w	800dc48 <__kernel_rem_pio2f+0x2a4>
 800dace:	2f02      	cmp	r7, #2
 800dad0:	f000 80c5 	beq.w	800dc5e <__kernel_rem_pio2f+0x2ba>
 800dad4:	2d02      	cmp	r5, #2
 800dad6:	d16f      	bne.n	800dbb8 <__kernel_rem_pio2f+0x214>
 800dad8:	4649      	mov	r1, r9
 800dada:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dade:	f7f3 f85f 	bl	8000ba0 <__aeabi_fsub>
 800dae2:	4681      	mov	r9, r0
 800dae4:	f1ba 0f00 	cmp.w	sl, #0
 800dae8:	d066      	beq.n	800dbb8 <__kernel_rem_pio2f+0x214>
 800daea:	4639      	mov	r1, r7
 800daec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800daf0:	f000 fa0c 	bl	800df0c <scalbnf>
 800daf4:	4601      	mov	r1, r0
 800daf6:	4648      	mov	r0, r9
 800daf8:	f7f3 f852 	bl	8000ba0 <__aeabi_fsub>
 800dafc:	4681      	mov	r9, r0
 800dafe:	e05b      	b.n	800dbb8 <__kernel_rem_pio2f+0x214>
 800db00:	2400      	movs	r4, #0
 800db02:	e766      	b.n	800d9d2 <__kernel_rem_pio2f+0x2e>
 800db04:	eb18 0f05 	cmn.w	r8, r5
 800db08:	d407      	bmi.n	800db1a <__kernel_rem_pio2f+0x176>
 800db0a:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800db0e:	f7f3 f8fd 	bl	8000d0c <__aeabi_i2f>
 800db12:	f846 0b04 	str.w	r0, [r6], #4
 800db16:	3501      	adds	r5, #1
 800db18:	e76e      	b.n	800d9f8 <__kernel_rem_pio2f+0x54>
 800db1a:	4658      	mov	r0, fp
 800db1c:	e7f9      	b.n	800db12 <__kernel_rem_pio2f+0x16e>
 800db1e:	9307      	str	r3, [sp, #28]
 800db20:	9b05      	ldr	r3, [sp, #20]
 800db22:	f8da 1000 	ldr.w	r1, [sl]
 800db26:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800db2a:	f7f3 f943 	bl	8000db4 <__aeabi_fmul>
 800db2e:	4601      	mov	r1, r0
 800db30:	4630      	mov	r0, r6
 800db32:	f7f3 f837 	bl	8000ba4 <__addsf3>
 800db36:	4606      	mov	r6, r0
 800db38:	9b07      	ldr	r3, [sp, #28]
 800db3a:	f108 0801 	add.w	r8, r8, #1
 800db3e:	9a03      	ldr	r2, [sp, #12]
 800db40:	f1aa 0a04 	sub.w	sl, sl, #4
 800db44:	4590      	cmp	r8, r2
 800db46:	ddea      	ble.n	800db1e <__kernel_rem_pio2f+0x17a>
 800db48:	f84b 6b04 	str.w	r6, [fp], #4
 800db4c:	f109 0901 	add.w	r9, r9, #1
 800db50:	3504      	adds	r5, #4
 800db52:	e75d      	b.n	800da10 <__kernel_rem_pio2f+0x6c>
 800db54:	46aa      	mov	sl, r5
 800db56:	461e      	mov	r6, r3
 800db58:	f04f 0800 	mov.w	r8, #0
 800db5c:	e7ef      	b.n	800db3e <__kernel_rem_pio2f+0x19a>
 800db5e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800db62:	4628      	mov	r0, r5
 800db64:	f7f3 f926 	bl	8000db4 <__aeabi_fmul>
 800db68:	f7f3 faea 	bl	8001140 <__aeabi_f2iz>
 800db6c:	f7f3 f8ce 	bl	8000d0c <__aeabi_i2f>
 800db70:	4649      	mov	r1, r9
 800db72:	9009      	str	r0, [sp, #36]	; 0x24
 800db74:	f7f3 f91e 	bl	8000db4 <__aeabi_fmul>
 800db78:	4601      	mov	r1, r0
 800db7a:	4628      	mov	r0, r5
 800db7c:	f7f3 f810 	bl	8000ba0 <__aeabi_fsub>
 800db80:	f7f3 fade 	bl	8001140 <__aeabi_f2iz>
 800db84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db86:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db8a:	f846 0b04 	str.w	r0, [r6], #4
 800db8e:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800db92:	4618      	mov	r0, r3
 800db94:	f7f3 f806 	bl	8000ba4 <__addsf3>
 800db98:	4605      	mov	r5, r0
 800db9a:	e754      	b.n	800da46 <__kernel_rem_pio2f+0xa2>
 800db9c:	d106      	bne.n	800dbac <__kernel_rem_pio2f+0x208>
 800db9e:	f108 33ff 	add.w	r3, r8, #4294967295
 800dba2:	aa0a      	add	r2, sp, #40	; 0x28
 800dba4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800dba8:	11ed      	asrs	r5, r5, #7
 800dbaa:	e783      	b.n	800dab4 <__kernel_rem_pio2f+0x110>
 800dbac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dbb0:	f7f3 fab2 	bl	8001118 <__aeabi_fcmpge>
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	bb98      	cbnz	r0, 800dc20 <__kernel_rem_pio2f+0x27c>
 800dbb8:	2100      	movs	r1, #0
 800dbba:	4648      	mov	r0, r9
 800dbbc:	f7f3 fa8e 	bl	80010dc <__aeabi_fcmpeq>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	f000 8098 	beq.w	800dcf6 <__kernel_rem_pio2f+0x352>
 800dbc6:	f108 34ff 	add.w	r4, r8, #4294967295
 800dbca:	4623      	mov	r3, r4
 800dbcc:	2200      	movs	r2, #0
 800dbce:	9901      	ldr	r1, [sp, #4]
 800dbd0:	428b      	cmp	r3, r1
 800dbd2:	da4c      	bge.n	800dc6e <__kernel_rem_pio2f+0x2ca>
 800dbd4:	2a00      	cmp	r2, #0
 800dbd6:	d067      	beq.n	800dca8 <__kernel_rem_pio2f+0x304>
 800dbd8:	ab0a      	add	r3, sp, #40	; 0x28
 800dbda:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800dbde:	3f08      	subs	r7, #8
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	f000 8086 	beq.w	800dcf2 <__kernel_rem_pio2f+0x34e>
 800dbe6:	4639      	mov	r1, r7
 800dbe8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dbec:	f000 f98e 	bl	800df0c <scalbnf>
 800dbf0:	46a2      	mov	sl, r4
 800dbf2:	4681      	mov	r9, r0
 800dbf4:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800dbf8:	af46      	add	r7, sp, #280	; 0x118
 800dbfa:	f1ba 0f00 	cmp.w	sl, #0
 800dbfe:	f280 80af 	bge.w	800dd60 <__kernel_rem_pio2f+0x3bc>
 800dc02:	4627      	mov	r7, r4
 800dc04:	2200      	movs	r2, #0
 800dc06:	2f00      	cmp	r7, #0
 800dc08:	f2c0 80d9 	blt.w	800ddbe <__kernel_rem_pio2f+0x41a>
 800dc0c:	a946      	add	r1, sp, #280	; 0x118
 800dc0e:	4690      	mov	r8, r2
 800dc10:	f04f 0a00 	mov.w	sl, #0
 800dc14:	4b23      	ldr	r3, [pc, #140]	; (800dca4 <__kernel_rem_pio2f+0x300>)
 800dc16:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800dc1a:	eba4 0907 	sub.w	r9, r4, r7
 800dc1e:	e0c2      	b.n	800dda6 <__kernel_rem_pio2f+0x402>
 800dc20:	2502      	movs	r5, #2
 800dc22:	e749      	b.n	800dab8 <__kernel_rem_pio2f+0x114>
 800dc24:	6823      	ldr	r3, [r4, #0]
 800dc26:	f1ba 0f00 	cmp.w	sl, #0
 800dc2a:	d108      	bne.n	800dc3e <__kernel_rem_pio2f+0x29a>
 800dc2c:	b11b      	cbz	r3, 800dc36 <__kernel_rem_pio2f+0x292>
 800dc2e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800dc32:	6023      	str	r3, [r4, #0]
 800dc34:	2301      	movs	r3, #1
 800dc36:	469a      	mov	sl, r3
 800dc38:	3201      	adds	r2, #1
 800dc3a:	3404      	adds	r4, #4
 800dc3c:	e73f      	b.n	800dabe <__kernel_rem_pio2f+0x11a>
 800dc3e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800dc42:	6023      	str	r3, [r4, #0]
 800dc44:	4653      	mov	r3, sl
 800dc46:	e7f6      	b.n	800dc36 <__kernel_rem_pio2f+0x292>
 800dc48:	f108 32ff 	add.w	r2, r8, #4294967295
 800dc4c:	ab0a      	add	r3, sp, #40	; 0x28
 800dc4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc56:	a90a      	add	r1, sp, #40	; 0x28
 800dc58:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dc5c:	e73a      	b.n	800dad4 <__kernel_rem_pio2f+0x130>
 800dc5e:	f108 32ff 	add.w	r2, r8, #4294967295
 800dc62:	ab0a      	add	r3, sp, #40	; 0x28
 800dc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc6c:	e7f3      	b.n	800dc56 <__kernel_rem_pio2f+0x2b2>
 800dc6e:	a90a      	add	r1, sp, #40	; 0x28
 800dc70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dc74:	3b01      	subs	r3, #1
 800dc76:	430a      	orrs	r2, r1
 800dc78:	e7a9      	b.n	800dbce <__kernel_rem_pio2f+0x22a>
 800dc7a:	3401      	adds	r4, #1
 800dc7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dc80:	2a00      	cmp	r2, #0
 800dc82:	d0fa      	beq.n	800dc7a <__kernel_rem_pio2f+0x2d6>
 800dc84:	9b04      	ldr	r3, [sp, #16]
 800dc86:	aa1e      	add	r2, sp, #120	; 0x78
 800dc88:	4443      	add	r3, r8
 800dc8a:	f108 0601 	add.w	r6, r8, #1
 800dc8e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800dc92:	4444      	add	r4, r8
 800dc94:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800dc98:	42b4      	cmp	r4, r6
 800dc9a:	da08      	bge.n	800dcae <__kernel_rem_pio2f+0x30a>
 800dc9c:	46a0      	mov	r8, r4
 800dc9e:	e6c6      	b.n	800da2e <__kernel_rem_pio2f+0x8a>
 800dca0:	0800f0c8 	.word	0x0800f0c8
 800dca4:	0800f09c 	.word	0x0800f09c
 800dca8:	2401      	movs	r4, #1
 800dcaa:	9b08      	ldr	r3, [sp, #32]
 800dcac:	e7e6      	b.n	800dc7c <__kernel_rem_pio2f+0x2d8>
 800dcae:	9b07      	ldr	r3, [sp, #28]
 800dcb0:	46ab      	mov	fp, r5
 800dcb2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dcb6:	f7f3 f829 	bl	8000d0c <__aeabi_i2f>
 800dcba:	f04f 0a00 	mov.w	sl, #0
 800dcbe:	f04f 0800 	mov.w	r8, #0
 800dcc2:	6028      	str	r0, [r5, #0]
 800dcc4:	9b03      	ldr	r3, [sp, #12]
 800dcc6:	459a      	cmp	sl, r3
 800dcc8:	dd04      	ble.n	800dcd4 <__kernel_rem_pio2f+0x330>
 800dcca:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800dcce:	3504      	adds	r5, #4
 800dcd0:	3601      	adds	r6, #1
 800dcd2:	e7e1      	b.n	800dc98 <__kernel_rem_pio2f+0x2f4>
 800dcd4:	9b05      	ldr	r3, [sp, #20]
 800dcd6:	f85b 0904 	ldr.w	r0, [fp], #-4
 800dcda:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800dcde:	f7f3 f869 	bl	8000db4 <__aeabi_fmul>
 800dce2:	4601      	mov	r1, r0
 800dce4:	4640      	mov	r0, r8
 800dce6:	f7f2 ff5d 	bl	8000ba4 <__addsf3>
 800dcea:	f10a 0a01 	add.w	sl, sl, #1
 800dcee:	4680      	mov	r8, r0
 800dcf0:	e7e8      	b.n	800dcc4 <__kernel_rem_pio2f+0x320>
 800dcf2:	3c01      	subs	r4, #1
 800dcf4:	e770      	b.n	800dbd8 <__kernel_rem_pio2f+0x234>
 800dcf6:	9b06      	ldr	r3, [sp, #24]
 800dcf8:	9a02      	ldr	r2, [sp, #8]
 800dcfa:	4648      	mov	r0, r9
 800dcfc:	1a99      	subs	r1, r3, r2
 800dcfe:	f000 f905 	bl	800df0c <scalbnf>
 800dd02:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800dd06:	4604      	mov	r4, r0
 800dd08:	f7f3 fa06 	bl	8001118 <__aeabi_fcmpge>
 800dd0c:	b300      	cbz	r0, 800dd50 <__kernel_rem_pio2f+0x3ac>
 800dd0e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800dd12:	4620      	mov	r0, r4
 800dd14:	f7f3 f84e 	bl	8000db4 <__aeabi_fmul>
 800dd18:	f7f3 fa12 	bl	8001140 <__aeabi_f2iz>
 800dd1c:	f7f2 fff6 	bl	8000d0c <__aeabi_i2f>
 800dd20:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800dd24:	4681      	mov	r9, r0
 800dd26:	f7f3 f845 	bl	8000db4 <__aeabi_fmul>
 800dd2a:	4601      	mov	r1, r0
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	f7f2 ff37 	bl	8000ba0 <__aeabi_fsub>
 800dd32:	f7f3 fa05 	bl	8001140 <__aeabi_f2iz>
 800dd36:	ab0a      	add	r3, sp, #40	; 0x28
 800dd38:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dd3c:	4648      	mov	r0, r9
 800dd3e:	f7f3 f9ff 	bl	8001140 <__aeabi_f2iz>
 800dd42:	f108 0401 	add.w	r4, r8, #1
 800dd46:	ab0a      	add	r3, sp, #40	; 0x28
 800dd48:	3708      	adds	r7, #8
 800dd4a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dd4e:	e74a      	b.n	800dbe6 <__kernel_rem_pio2f+0x242>
 800dd50:	4620      	mov	r0, r4
 800dd52:	f7f3 f9f5 	bl	8001140 <__aeabi_f2iz>
 800dd56:	ab0a      	add	r3, sp, #40	; 0x28
 800dd58:	4644      	mov	r4, r8
 800dd5a:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dd5e:	e742      	b.n	800dbe6 <__kernel_rem_pio2f+0x242>
 800dd60:	ab0a      	add	r3, sp, #40	; 0x28
 800dd62:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800dd66:	f7f2 ffd1 	bl	8000d0c <__aeabi_i2f>
 800dd6a:	4649      	mov	r1, r9
 800dd6c:	f7f3 f822 	bl	8000db4 <__aeabi_fmul>
 800dd70:	4641      	mov	r1, r8
 800dd72:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800dd76:	4648      	mov	r0, r9
 800dd78:	f7f3 f81c 	bl	8000db4 <__aeabi_fmul>
 800dd7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd80:	4681      	mov	r9, r0
 800dd82:	e73a      	b.n	800dbfa <__kernel_rem_pio2f+0x256>
 800dd84:	f853 0b04 	ldr.w	r0, [r3], #4
 800dd88:	f85b 1b04 	ldr.w	r1, [fp], #4
 800dd8c:	9203      	str	r2, [sp, #12]
 800dd8e:	9302      	str	r3, [sp, #8]
 800dd90:	f7f3 f810 	bl	8000db4 <__aeabi_fmul>
 800dd94:	4601      	mov	r1, r0
 800dd96:	4640      	mov	r0, r8
 800dd98:	f7f2 ff04 	bl	8000ba4 <__addsf3>
 800dd9c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dda0:	4680      	mov	r8, r0
 800dda2:	f10a 0a01 	add.w	sl, sl, #1
 800dda6:	9901      	ldr	r1, [sp, #4]
 800dda8:	458a      	cmp	sl, r1
 800ddaa:	dc01      	bgt.n	800ddb0 <__kernel_rem_pio2f+0x40c>
 800ddac:	45ca      	cmp	sl, r9
 800ddae:	dde9      	ble.n	800dd84 <__kernel_rem_pio2f+0x3e0>
 800ddb0:	ab5a      	add	r3, sp, #360	; 0x168
 800ddb2:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800ddb6:	f849 8ca0 	str.w	r8, [r9, #-160]
 800ddba:	3f01      	subs	r7, #1
 800ddbc:	e723      	b.n	800dc06 <__kernel_rem_pio2f+0x262>
 800ddbe:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800ddc0:	2b02      	cmp	r3, #2
 800ddc2:	dc07      	bgt.n	800ddd4 <__kernel_rem_pio2f+0x430>
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	dc4e      	bgt.n	800de66 <__kernel_rem_pio2f+0x4c2>
 800ddc8:	d02e      	beq.n	800de28 <__kernel_rem_pio2f+0x484>
 800ddca:	f006 0007 	and.w	r0, r6, #7
 800ddce:	b05b      	add	sp, #364	; 0x16c
 800ddd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800ddd6:	2b03      	cmp	r3, #3
 800ddd8:	d1f7      	bne.n	800ddca <__kernel_rem_pio2f+0x426>
 800ddda:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800ddde:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800dde2:	46b8      	mov	r8, r7
 800dde4:	46a2      	mov	sl, r4
 800dde6:	f1ba 0f00 	cmp.w	sl, #0
 800ddea:	dc49      	bgt.n	800de80 <__kernel_rem_pio2f+0x4dc>
 800ddec:	46a1      	mov	r9, r4
 800ddee:	f1b9 0f01 	cmp.w	r9, #1
 800ddf2:	dc60      	bgt.n	800deb6 <__kernel_rem_pio2f+0x512>
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	2c01      	cmp	r4, #1
 800ddf8:	dc76      	bgt.n	800dee8 <__kernel_rem_pio2f+0x544>
 800ddfa:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800ddfc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800ddfe:	2d00      	cmp	r5, #0
 800de00:	d178      	bne.n	800def4 <__kernel_rem_pio2f+0x550>
 800de02:	9900      	ldr	r1, [sp, #0]
 800de04:	600a      	str	r2, [r1, #0]
 800de06:	460a      	mov	r2, r1
 800de08:	604b      	str	r3, [r1, #4]
 800de0a:	6090      	str	r0, [r2, #8]
 800de0c:	e7dd      	b.n	800ddca <__kernel_rem_pio2f+0x426>
 800de0e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800de12:	f7f2 fec7 	bl	8000ba4 <__addsf3>
 800de16:	3c01      	subs	r4, #1
 800de18:	2c00      	cmp	r4, #0
 800de1a:	daf8      	bge.n	800de0e <__kernel_rem_pio2f+0x46a>
 800de1c:	b10d      	cbz	r5, 800de22 <__kernel_rem_pio2f+0x47e>
 800de1e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800de22:	9b00      	ldr	r3, [sp, #0]
 800de24:	6018      	str	r0, [r3, #0]
 800de26:	e7d0      	b.n	800ddca <__kernel_rem_pio2f+0x426>
 800de28:	2000      	movs	r0, #0
 800de2a:	af32      	add	r7, sp, #200	; 0xc8
 800de2c:	e7f4      	b.n	800de18 <__kernel_rem_pio2f+0x474>
 800de2e:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800de32:	f7f2 feb7 	bl	8000ba4 <__addsf3>
 800de36:	f108 38ff 	add.w	r8, r8, #4294967295
 800de3a:	f1b8 0f00 	cmp.w	r8, #0
 800de3e:	daf6      	bge.n	800de2e <__kernel_rem_pio2f+0x48a>
 800de40:	b1ad      	cbz	r5, 800de6e <__kernel_rem_pio2f+0x4ca>
 800de42:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800de46:	9a00      	ldr	r2, [sp, #0]
 800de48:	4601      	mov	r1, r0
 800de4a:	6013      	str	r3, [r2, #0]
 800de4c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800de4e:	f7f2 fea7 	bl	8000ba0 <__aeabi_fsub>
 800de52:	f04f 0801 	mov.w	r8, #1
 800de56:	4544      	cmp	r4, r8
 800de58:	da0b      	bge.n	800de72 <__kernel_rem_pio2f+0x4ce>
 800de5a:	b10d      	cbz	r5, 800de60 <__kernel_rem_pio2f+0x4bc>
 800de5c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800de60:	9b00      	ldr	r3, [sp, #0]
 800de62:	6058      	str	r0, [r3, #4]
 800de64:	e7b1      	b.n	800ddca <__kernel_rem_pio2f+0x426>
 800de66:	46a0      	mov	r8, r4
 800de68:	2000      	movs	r0, #0
 800de6a:	af32      	add	r7, sp, #200	; 0xc8
 800de6c:	e7e5      	b.n	800de3a <__kernel_rem_pio2f+0x496>
 800de6e:	4603      	mov	r3, r0
 800de70:	e7e9      	b.n	800de46 <__kernel_rem_pio2f+0x4a2>
 800de72:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800de76:	f7f2 fe95 	bl	8000ba4 <__addsf3>
 800de7a:	f108 0801 	add.w	r8, r8, #1
 800de7e:	e7ea      	b.n	800de56 <__kernel_rem_pio2f+0x4b2>
 800de80:	f8d8 3000 	ldr.w	r3, [r8]
 800de84:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800de88:	4619      	mov	r1, r3
 800de8a:	4610      	mov	r0, r2
 800de8c:	9302      	str	r3, [sp, #8]
 800de8e:	9201      	str	r2, [sp, #4]
 800de90:	f7f2 fe88 	bl	8000ba4 <__addsf3>
 800de94:	9a01      	ldr	r2, [sp, #4]
 800de96:	4601      	mov	r1, r0
 800de98:	4681      	mov	r9, r0
 800de9a:	4610      	mov	r0, r2
 800de9c:	f7f2 fe80 	bl	8000ba0 <__aeabi_fsub>
 800dea0:	9b02      	ldr	r3, [sp, #8]
 800dea2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dea6:	4619      	mov	r1, r3
 800dea8:	f7f2 fe7c 	bl	8000ba4 <__addsf3>
 800deac:	f848 0904 	str.w	r0, [r8], #-4
 800deb0:	f8c8 9000 	str.w	r9, [r8]
 800deb4:	e797      	b.n	800dde6 <__kernel_rem_pio2f+0x442>
 800deb6:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800deba:	f8d7 a000 	ldr.w	sl, [r7]
 800debe:	4618      	mov	r0, r3
 800dec0:	4651      	mov	r1, sl
 800dec2:	9301      	str	r3, [sp, #4]
 800dec4:	f7f2 fe6e 	bl	8000ba4 <__addsf3>
 800dec8:	9b01      	ldr	r3, [sp, #4]
 800deca:	4601      	mov	r1, r0
 800decc:	4680      	mov	r8, r0
 800dece:	4618      	mov	r0, r3
 800ded0:	f7f2 fe66 	bl	8000ba0 <__aeabi_fsub>
 800ded4:	4651      	mov	r1, sl
 800ded6:	f7f2 fe65 	bl	8000ba4 <__addsf3>
 800deda:	f847 0904 	str.w	r0, [r7], #-4
 800dede:	f109 39ff 	add.w	r9, r9, #4294967295
 800dee2:	f8c7 8000 	str.w	r8, [r7]
 800dee6:	e782      	b.n	800ddee <__kernel_rem_pio2f+0x44a>
 800dee8:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800deec:	f7f2 fe5a 	bl	8000ba4 <__addsf3>
 800def0:	3c01      	subs	r4, #1
 800def2:	e780      	b.n	800ddf6 <__kernel_rem_pio2f+0x452>
 800def4:	9900      	ldr	r1, [sp, #0]
 800def6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800defa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800defe:	600a      	str	r2, [r1, #0]
 800df00:	604b      	str	r3, [r1, #4]
 800df02:	460a      	mov	r2, r1
 800df04:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800df08:	e77f      	b.n	800de0a <__kernel_rem_pio2f+0x466>
 800df0a:	bf00      	nop

0800df0c <scalbnf>:
 800df0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800df10:	b538      	push	{r3, r4, r5, lr}
 800df12:	4603      	mov	r3, r0
 800df14:	460d      	mov	r5, r1
 800df16:	4604      	mov	r4, r0
 800df18:	d02e      	beq.n	800df78 <scalbnf+0x6c>
 800df1a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800df1e:	d304      	bcc.n	800df2a <scalbnf+0x1e>
 800df20:	4601      	mov	r1, r0
 800df22:	f7f2 fe3f 	bl	8000ba4 <__addsf3>
 800df26:	4603      	mov	r3, r0
 800df28:	e026      	b.n	800df78 <scalbnf+0x6c>
 800df2a:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800df2e:	d118      	bne.n	800df62 <scalbnf+0x56>
 800df30:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800df34:	f7f2 ff3e 	bl	8000db4 <__aeabi_fmul>
 800df38:	4a17      	ldr	r2, [pc, #92]	; (800df98 <scalbnf+0x8c>)
 800df3a:	4603      	mov	r3, r0
 800df3c:	4295      	cmp	r5, r2
 800df3e:	db0c      	blt.n	800df5a <scalbnf+0x4e>
 800df40:	4604      	mov	r4, r0
 800df42:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800df46:	3a19      	subs	r2, #25
 800df48:	f24c 3150 	movw	r1, #50000	; 0xc350
 800df4c:	428d      	cmp	r5, r1
 800df4e:	dd0a      	ble.n	800df66 <scalbnf+0x5a>
 800df50:	4912      	ldr	r1, [pc, #72]	; (800df9c <scalbnf+0x90>)
 800df52:	4618      	mov	r0, r3
 800df54:	f361 001e 	bfi	r0, r1, #0, #31
 800df58:	e000      	b.n	800df5c <scalbnf+0x50>
 800df5a:	4911      	ldr	r1, [pc, #68]	; (800dfa0 <scalbnf+0x94>)
 800df5c:	f7f2 ff2a 	bl	8000db4 <__aeabi_fmul>
 800df60:	e7e1      	b.n	800df26 <scalbnf+0x1a>
 800df62:	0dd2      	lsrs	r2, r2, #23
 800df64:	e7f0      	b.n	800df48 <scalbnf+0x3c>
 800df66:	1951      	adds	r1, r2, r5
 800df68:	29fe      	cmp	r1, #254	; 0xfe
 800df6a:	dcf1      	bgt.n	800df50 <scalbnf+0x44>
 800df6c:	2900      	cmp	r1, #0
 800df6e:	dd05      	ble.n	800df7c <scalbnf+0x70>
 800df70:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800df74:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800df78:	4618      	mov	r0, r3
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	f111 0f16 	cmn.w	r1, #22
 800df80:	da01      	bge.n	800df86 <scalbnf+0x7a>
 800df82:	4907      	ldr	r1, [pc, #28]	; (800dfa0 <scalbnf+0x94>)
 800df84:	e7e5      	b.n	800df52 <scalbnf+0x46>
 800df86:	f101 0019 	add.w	r0, r1, #25
 800df8a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800df8e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800df92:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800df96:	e7e1      	b.n	800df5c <scalbnf+0x50>
 800df98:	ffff3cb0 	.word	0xffff3cb0
 800df9c:	7149f2ca 	.word	0x7149f2ca
 800dfa0:	0da24260 	.word	0x0da24260

0800dfa4 <floorf>:
 800dfa4:	b570      	push	{r4, r5, r6, lr}
 800dfa6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800dfaa:	3d7f      	subs	r5, #127	; 0x7f
 800dfac:	2d16      	cmp	r5, #22
 800dfae:	4601      	mov	r1, r0
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800dfb6:	dc25      	bgt.n	800e004 <floorf+0x60>
 800dfb8:	2d00      	cmp	r5, #0
 800dfba:	da0e      	bge.n	800dfda <floorf+0x36>
 800dfbc:	4916      	ldr	r1, [pc, #88]	; (800e018 <floorf+0x74>)
 800dfbe:	f7f2 fdf1 	bl	8000ba4 <__addsf3>
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	f7f3 f8b2 	bl	800112c <__aeabi_fcmpgt>
 800dfc8:	b128      	cbz	r0, 800dfd6 <floorf+0x32>
 800dfca:	2c00      	cmp	r4, #0
 800dfcc:	da22      	bge.n	800e014 <floorf+0x70>
 800dfce:	4b13      	ldr	r3, [pc, #76]	; (800e01c <floorf+0x78>)
 800dfd0:	2e00      	cmp	r6, #0
 800dfd2:	bf18      	it	ne
 800dfd4:	461c      	movne	r4, r3
 800dfd6:	4621      	mov	r1, r4
 800dfd8:	e01a      	b.n	800e010 <floorf+0x6c>
 800dfda:	4e11      	ldr	r6, [pc, #68]	; (800e020 <floorf+0x7c>)
 800dfdc:	412e      	asrs	r6, r5
 800dfde:	4230      	tst	r0, r6
 800dfe0:	d016      	beq.n	800e010 <floorf+0x6c>
 800dfe2:	490d      	ldr	r1, [pc, #52]	; (800e018 <floorf+0x74>)
 800dfe4:	f7f2 fdde 	bl	8000ba4 <__addsf3>
 800dfe8:	2100      	movs	r1, #0
 800dfea:	f7f3 f89f 	bl	800112c <__aeabi_fcmpgt>
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d0f1      	beq.n	800dfd6 <floorf+0x32>
 800dff2:	2c00      	cmp	r4, #0
 800dff4:	bfbe      	ittt	lt
 800dff6:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800dffa:	412b      	asrlt	r3, r5
 800dffc:	18e4      	addlt	r4, r4, r3
 800dffe:	ea24 0406 	bic.w	r4, r4, r6
 800e002:	e7e8      	b.n	800dfd6 <floorf+0x32>
 800e004:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e008:	d302      	bcc.n	800e010 <floorf+0x6c>
 800e00a:	f7f2 fdcb 	bl	8000ba4 <__addsf3>
 800e00e:	4601      	mov	r1, r0
 800e010:	4608      	mov	r0, r1
 800e012:	bd70      	pop	{r4, r5, r6, pc}
 800e014:	2400      	movs	r4, #0
 800e016:	e7de      	b.n	800dfd6 <floorf+0x32>
 800e018:	7149f2ca 	.word	0x7149f2ca
 800e01c:	bf800000 	.word	0xbf800000
 800e020:	007fffff 	.word	0x007fffff

0800e024 <_init>:
 800e024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e026:	bf00      	nop
 800e028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e02a:	bc08      	pop	{r3}
 800e02c:	469e      	mov	lr, r3
 800e02e:	4770      	bx	lr

0800e030 <_fini>:
 800e030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e032:	bf00      	nop
 800e034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e036:	bc08      	pop	{r3}
 800e038:	469e      	mov	lr, r3
 800e03a:	4770      	bx	lr
