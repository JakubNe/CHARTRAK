
CHARTRAK2v3_controllerRETARGETED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a134  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  0800a248  0800a248  0000b248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa28  0800aa28  0000c1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa28  0800aa28  0000ba28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa30  0800aa30  0000c1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa30  0800aa30  0000ba30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa34  0800aa34  0000ba34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800aa38  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200001f0  0800ac28  0000c1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  0800ac28  0000c570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011125  00000000  00000000  0000c219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f08  00000000  00000000  0001d33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00020248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8c  00000000  00000000  00021140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a096  00000000  00000000  00021ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014eb3  00000000  00000000  0003bd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e4e7  00000000  00000000  00050c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df0fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000521c  00000000  00000000  000df140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e435c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a22c 	.word	0x0800a22c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800a22c 	.word	0x0800a22c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr
 800115c:	0000      	movs	r0, r0
	...

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b099      	sub	sp, #100	@ 0x64
 8001164:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f000 fddb 	bl	8001d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f000 f8fb 	bl	8001364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116e:	f000 fa21 	bl	80015b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001172:	f000 f953 	bl	800141c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001176:	f000 f98f 	bl	8001498 <MX_I2C1_Init>
  MX_SPI1_Init();
 800117a:	f000 f9bb 	bl	80014f4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800117e:	f000 f9ef 	bl	8001560 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  	//GPIO SETUP
    HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001188:	4863      	ldr	r0, [pc, #396]	@ (8001318 <main+0x1b8>)
 800118a:	f001 fbbc 	bl	8002906 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 800118e:	2201      	movs	r2, #1
 8001190:	2110      	movs	r1, #16
 8001192:	4862      	ldr	r0, [pc, #392]	@ (800131c <main+0x1bc>)
 8001194:	f001 fbb7 	bl	8002906 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800119e:	485e      	ldr	r0, [pc, #376]	@ (8001318 <main+0x1b8>)
 80011a0:	f001 fbb1 	bl	8002906 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, Voltage_output);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011aa:	485d      	ldr	r0, [pc, #372]	@ (8001320 <main+0x1c0>)
 80011ac:	f001 fbab 	bl	8002906 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2120      	movs	r1, #32
 80011b4:	485a      	ldr	r0, [pc, #360]	@ (8001320 <main+0x1c0>)
 80011b6:	f001 fba6 	bl	8002906 <HAL_GPIO_WritePin>

    // ADC board expander setup
    TCA_Init(0b0100001, hi2c1);
 80011ba:	4c5a      	ldr	r4, [pc, #360]	@ (8001324 <main+0x1c4>)
 80011bc:	4668      	mov	r0, sp
 80011be:	f104 030c 	add.w	r3, r4, #12
 80011c2:	2248      	movs	r2, #72	@ 0x48
 80011c4:	4619      	mov	r1, r3
 80011c6:	f006 fae8 	bl	800779a <memcpy>
 80011ca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80011ce:	2021      	movs	r0, #33	@ 0x21
 80011d0:	f005 f9fa 	bl	80065c8 <TCA_Init>

    TCA_PinMode(P07, 0);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2007      	movs	r0, #7
 80011d8:	f005 fa1c 	bl	8006614 <TCA_PinMode>
    TCA_PinMode(P11, 0);
 80011dc:	2100      	movs	r1, #0
 80011de:	2009      	movs	r0, #9
 80011e0:	f005 fa18 	bl	8006614 <TCA_PinMode>
    TCA_PinMode(P12, 0);
 80011e4:	2100      	movs	r1, #0
 80011e6:	200a      	movs	r0, #10
 80011e8:	f005 fa14 	bl	8006614 <TCA_PinMode>

    TCA_WritePin(P07, 1);
 80011ec:	2101      	movs	r1, #1
 80011ee:	2007      	movs	r0, #7
 80011f0:	f005 fa68 	bl	80066c4 <TCA_WritePin>
    TCA_WritePin(P11, 0);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2009      	movs	r0, #9
 80011f8:	f005 fa64 	bl	80066c4 <TCA_WritePin>
    TCA_WritePin(P12, 0);
 80011fc:	2100      	movs	r1, #0
 80011fe:	200a      	movs	r0, #10
 8001200:	f005 fa60 	bl	80066c4 <TCA_WritePin>

    // High-speed DAC setup
    DACREF(0.0);
 8001204:	f04f 0000 	mov.w	r0, #0
 8001208:	f004 fdbc 	bl	8005d84 <DACREF>
    DACOFFS(0.0);
 800120c:	f04f 0000 	mov.w	r0, #0
 8001210:	f004 fe18 	bl	8005e44 <DACOFFS>

    // High-speed ADC setup
    ADCREF(2.0);
 8001214:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001218:	f004 fe7c 	bl	8005f14 <ADCREF>
    ADCOFFS(0.0);
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	f004 fed4 	bl	8005fcc <ADCOFFS>

    // RS485 receive interrupt setup
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 8001224:	2220      	movs	r2, #32
 8001226:	4940      	ldr	r1, [pc, #256]	@ (8001328 <main+0x1c8>)
 8001228:	4840      	ldr	r0, [pc, #256]	@ (800132c <main+0x1cc>)
 800122a:	f003 fb52 	bl	80048d2 <HAL_UARTEx_ReceiveToIdle_IT>

    //SCPI setup
    Function Lolafunctions[] = { {.name = "FID", .run = SCPIC_FID} };
 800122e:	4a40      	ldr	r2, [pc, #256]	@ (8001330 <main+0x1d0>)
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001238:	e883 0003 	stmia.w	r3, {r0, r1}
    Class Lolaclass = { .name = "LOLA", .functions = Lolafunctions, .functionsLength = 1 };
 800123c:	4b3d      	ldr	r3, [pc, #244]	@ (8001334 <main+0x1d4>)
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
    addClass(&Lolaclass, 0);
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f005 f962 	bl	8006518 <addClass>

    //SPARTAN3 SETUP
    LOLA1.Config = JTAG;
 8001254:	4b38      	ldr	r3, [pc, #224]	@ (8001338 <main+0x1d8>)
 8001256:	2206      	movs	r2, #6
 8001258:	705a      	strb	r2, [r3, #1]
    LOLA1.Trials = 10;
 800125a:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <main+0x1d8>)
 800125c:	220a      	movs	r2, #10
 800125e:	805a      	strh	r2, [r3, #2]
    LOLA1.compatibleFirmwareID = 0xF103;
 8001260:	4b35      	ldr	r3, [pc, #212]	@ (8001338 <main+0x1d8>)
 8001262:	f24f 1203 	movw	r2, #61699	@ 0xf103
 8001266:	809a      	strh	r2, [r3, #4]

    RS485_Transmit("awaiting FPGA config\r\n");
 8001268:	4834      	ldr	r0, [pc, #208]	@ (800133c <main+0x1dc>)
 800126a:	f004 ff17 	bl	800609c <RS485_Transmit>
    LOLA_Init(LOLA1);
 800126e:	4b32      	ldr	r3, [pc, #200]	@ (8001338 <main+0x1d8>)
 8001270:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001274:	f004 fc06 	bl	8005a84 <LOLA_Init>
    RS485_Transmit("FPGA config done\r\n");
 8001278:	4831      	ldr	r0, [pc, #196]	@ (8001340 <main+0x1e0>)
 800127a:	f004 ff0f 	bl	800609c <RS485_Transmit>

    //CharTrak setup
    CHT1.Enable = 0;
 800127e:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <main+0x1e4>)
 8001280:	2200      	movs	r2, #0
 8001282:	705a      	strb	r2, [r3, #1]
    CHT1.characteristic = Open;
 8001284:	4b2f      	ldr	r3, [pc, #188]	@ (8001344 <main+0x1e4>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
    CHT1.Upp = 0;
 800128a:	4b2e      	ldr	r3, [pc, #184]	@ (8001344 <main+0x1e4>)
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	605a      	str	r2, [r3, #4]

    // Arbitrary waveform generator setup
    AWG1.Enable = 0;
 8001292:	4b2d      	ldr	r3, [pc, #180]	@ (8001348 <main+0x1e8>)
 8001294:	2200      	movs	r2, #0
 8001296:	705a      	strb	r2, [r3, #1]
    AWG1.waveform = Sine;
 8001298:	4b2b      	ldr	r3, [pc, #172]	@ (8001348 <main+0x1e8>)
 800129a:	2202      	movs	r2, #2
 800129c:	701a      	strb	r2, [r3, #0]
    AWG1.Uavg = 0.0;
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <main+0x1e8>)
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
    AWG1.Upp = 5.0;
 80012a6:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <main+0x1e8>)
 80012a8:	4a28      	ldr	r2, [pc, #160]	@ (800134c <main+0x1ec>)
 80012aa:	609a      	str	r2, [r3, #8]
    AWG1.DutyCycle = 20.0;
 80012ac:	4b26      	ldr	r3, [pc, #152]	@ (8001348 <main+0x1e8>)
 80012ae:	4a28      	ldr	r2, [pc, #160]	@ (8001350 <main+0x1f0>)
 80012b0:	60da      	str	r2, [r3, #12]
    AWG1.Freq = 100.0;
 80012b2:	4925      	ldr	r1, [pc, #148]	@ (8001348 <main+0x1e8>)
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b26      	ldr	r3, [pc, #152]	@ (8001354 <main+0x1f4>)
 80012ba:	e9c1 2304 	strd	r2, r3, [r1, #16]

    // Noise generator setup
    NOISE1.Enable = 0;
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <main+0x1f8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
    NOISE1.Freq = 10000.0;
 80012c4:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <main+0x1f8>)
 80012c6:	4a25      	ldr	r2, [pc, #148]	@ (800135c <main+0x1fc>)
 80012c8:	609a      	str	r2, [r3, #8]
    NOISE1.Upp = 1.0;
 80012ca:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <main+0x1f8>)
 80012cc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80012d0:	605a      	str	r2, [r3, #4]
    NOISE1.Seed = 0x800f000f000f0001;
 80012d2:	4921      	ldr	r1, [pc, #132]	@ (8001358 <main+0x1f8>)
 80012d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001310 <main+0x1b0>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	e9c1 2304 	strd	r2, r3, [r1, #16]

    LOLA_enable_features(ALL_EN, 0); // disable all features
 80012de:	2100      	movs	r1, #0
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f004 fc40 	bl	8005b68 <LOLA_enable_features>
    LOLA_SET_MAX_AMPLITUDE(6.0);
 80012e8:	481d      	ldr	r0, [pc, #116]	@ (8001360 <main+0x200>)
 80012ea:	f004 fcd9 	bl	8005ca0 <LOLA_SET_MAX_AMPLITUDE>
    DAC_DIRECT_DATA(0.0);
 80012ee:	f04f 0000 	mov.w	r0, #0
 80012f2:	f004 fcff 	bl	8005cf4 <DAC_DIRECT_DATA>
    AWG_Load_Waveform(AWG1);
 80012f6:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <main+0x1e8>)
 80012f8:	466c      	mov	r4, sp
 80012fa:	f103 0210 	add.w	r2, r3, #16
 80012fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001302:	e884 0003 	stmia.w	r4, {r0, r1}
 8001306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001308:	f004 f8be 	bl	8005488 <AWG_Load_Waveform>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <main+0x1ac>
 8001310:	000f0001 	.word	0x000f0001
 8001314:	800f000f 	.word	0x800f000f
 8001318:	40011000 	.word	0x40011000
 800131c:	40010800 	.word	0x40010800
 8001320:	40010c00 	.word	0x40010c00
 8001324:	2000023c 	.word	0x2000023c
 8001328:	200003a4 	.word	0x200003a4
 800132c:	200002e8 	.word	0x200002e8
 8001330:	0800a280 	.word	0x0800a280
 8001334:	0800a248 	.word	0x0800a248
 8001338:	20000368 	.word	0x20000368
 800133c:	0800a250 	.word	0x0800a250
 8001340:	0800a268 	.word	0x0800a268
 8001344:	20000360 	.word	0x20000360
 8001348:	20000330 	.word	0x20000330
 800134c:	40a00000 	.word	0x40a00000
 8001350:	41a00000 	.word	0x41a00000
 8001354:	40590000 	.word	0x40590000
 8001358:	20000348 	.word	0x20000348
 800135c:	461c4000 	.word	0x461c4000
 8001360:	40c00000 	.word	0x40c00000

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b094      	sub	sp, #80	@ 0x50
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800136e:	2228      	movs	r2, #40	@ 0x28
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f006 f94f 	bl	8007616 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001394:	2301      	movs	r3, #1
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800139c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a2:	2301      	movs	r3, #1
 80013a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a6:	2302      	movs	r3, #2
 80013a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 ff68 	bl	8003290 <HAL_RCC_OscConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013c6:	f000 fa17 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ca:	230f      	movs	r3, #15
 80013cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2101      	movs	r1, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 f9d4 	bl	8003794 <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013f2:	f000 fa01 	bl	80017f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013f6:	2302      	movs	r3, #2
 80013f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80013fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fb54 	bl	8003ab0 <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800140e:	f000 f9f3 	bl	80017f8 <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3750      	adds	r7, #80	@ 0x50
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_ADC1_Init+0x74>)
 800142e:	4a19      	ldr	r2, [pc, #100]	@ (8001494 <MX_ADC1_Init+0x78>)
 8001430:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <MX_ADC1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <MX_ADC1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <MX_ADC1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <MX_ADC1_Init+0x74>)
 8001446:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800144a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <MX_ADC1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001452:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_ADC1_Init+0x74>)
 8001454:	2201      	movs	r2, #1
 8001456:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001458:	480d      	ldr	r0, [pc, #52]	@ (8001490 <MX_ADC1_Init+0x74>)
 800145a:	f000 fce7 	bl	8001e2c <HAL_ADC_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001464:	f000 f9c8 	bl	80017f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800146c:	2301      	movs	r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_ADC1_Init+0x74>)
 800147a:	f000 fdaf 	bl	8001fdc <HAL_ADC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001484:	f000 f9b8 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000020c 	.word	0x2000020c
 8001494:	40012400 	.word	0x40012400

08001498 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <MX_I2C1_Init+0x50>)
 800149e:	4a13      	ldr	r2, [pc, #76]	@ (80014ec <MX_I2C1_Init+0x54>)
 80014a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_I2C1_Init+0x50>)
 80014a4:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <MX_I2C1_Init+0x58>)
 80014a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <MX_I2C1_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_I2C1_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_I2C1_Init+0x50>)
 80014b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <MX_I2C1_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_I2C1_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c8:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <MX_I2C1_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_I2C1_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <MX_I2C1_Init+0x50>)
 80014d6:	f001 fa2f 	bl	8002938 <HAL_I2C_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014e0:	f000 f98a 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000023c 	.word	0x2000023c
 80014ec:	40005400 	.word	0x40005400
 80014f0:	000186a0 	.word	0x000186a0

080014f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014f8:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <MX_SPI1_Init+0x64>)
 80014fa:	4a18      	ldr	r2, [pc, #96]	@ (800155c <MX_SPI1_Init+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014fe:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <MX_SPI1_Init+0x64>)
 8001500:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001504:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <MX_SPI1_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <MX_SPI1_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_SPI1_Init+0x64>)
 8001514:	2202      	movs	r2, #2
 8001516:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001518:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_SPI1_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_SPI1_Init+0x64>)
 8001520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001524:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <MX_SPI1_Init+0x64>)
 8001528:	2228      	movs	r2, #40	@ 0x28
 800152a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800152c:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <MX_SPI1_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <MX_SPI1_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <MX_SPI1_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <MX_SPI1_Init+0x64>)
 8001540:	220a      	movs	r2, #10
 8001542:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001544:	4804      	ldr	r0, [pc, #16]	@ (8001558 <MX_SPI1_Init+0x64>)
 8001546:	f002 fb69 	bl	8003c1c <HAL_SPI_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001550:	f000 f952 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000290 	.word	0x20000290
 800155c:	40013000 	.word	0x40013000

08001560 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <MX_USART1_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 8001598:	f003 f8c8 	bl	800472c <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f929 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200002e8 	.word	0x200002e8
 80015b0:	40013800 	.word	0x40013800

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c8:	4b4b      	ldr	r3, [pc, #300]	@ (80016f8 <MX_GPIO_Init+0x144>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a4a      	ldr	r2, [pc, #296]	@ (80016f8 <MX_GPIO_Init+0x144>)
 80015ce:	f043 0310 	orr.w	r3, r3, #16
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b48      	ldr	r3, [pc, #288]	@ (80016f8 <MX_GPIO_Init+0x144>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e0:	4b45      	ldr	r3, [pc, #276]	@ (80016f8 <MX_GPIO_Init+0x144>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a44      	ldr	r2, [pc, #272]	@ (80016f8 <MX_GPIO_Init+0x144>)
 80015e6:	f043 0320 	orr.w	r3, r3, #32
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b42      	ldr	r3, [pc, #264]	@ (80016f8 <MX_GPIO_Init+0x144>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0320 	and.w	r3, r3, #32
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b3f      	ldr	r3, [pc, #252]	@ (80016f8 <MX_GPIO_Init+0x144>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a3e      	ldr	r2, [pc, #248]	@ (80016f8 <MX_GPIO_Init+0x144>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b3c      	ldr	r3, [pc, #240]	@ (80016f8 <MX_GPIO_Init+0x144>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b39      	ldr	r3, [pc, #228]	@ (80016f8 <MX_GPIO_Init+0x144>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a38      	ldr	r2, [pc, #224]	@ (80016f8 <MX_GPIO_Init+0x144>)
 8001616:	f043 0308 	orr.w	r3, r3, #8
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b36      	ldr	r3, [pc, #216]	@ (80016f8 <MX_GPIO_Init+0x144>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_DACS_Pin|LDAC_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800162e:	4833      	ldr	r0, [pc, #204]	@ (80016fc <MX_GPIO_Init+0x148>)
 8001630:	f001 f969 	bl	8002906 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	211e      	movs	r1, #30
 8001638:	4831      	ldr	r0, [pc, #196]	@ (8001700 <MX_GPIO_Init+0x14c>)
 800163a:	f001 f964 	bl	8002906 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 800163e:	2200      	movs	r2, #0
 8001640:	f24f 4127 	movw	r1, #62503	@ 0xf427
 8001644:	482f      	ldr	r0, [pc, #188]	@ (8001704 <MX_GPIO_Init+0x150>)
 8001646:	f001 f95e 	bl	8002906 <HAL_GPIO_WritePin>
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SPI1_DACS_Pin LDAC_Pin */
  GPIO_InitStruct.Pin = SPI1_DACS_Pin|LDAC_Pin;
 800164a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800164e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2302      	movs	r3, #2
 800165a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	4619      	mov	r1, r3
 8001662:	4826      	ldr	r0, [pc, #152]	@ (80016fc <MX_GPIO_Init+0x148>)
 8001664:	f000 ffb4 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VselC0_Pin VselC1_Pin PROGB_Pin SPI1_FPGAS_Pin */
  GPIO_InitStruct.Pin = VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin;
 8001668:	231e      	movs	r3, #30
 800166a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2302      	movs	r3, #2
 8001676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4619      	mov	r1, r3
 800167e:	4820      	ldr	r0, [pc, #128]	@ (8001700 <MX_GPIO_Init+0x14c>)
 8001680:	f000 ffa6 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VselB1_Pin VselB0_Pin VselA1_Pin VselA0_Pin
                           MODE_Pin M2_Pin M1_Pin M0_Pin
                           DIR_Pin */
  GPIO_InitStruct.Pin = VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 8001684:	f24f 4327 	movw	r3, #62503	@ 0xf427
 8001688:	613b      	str	r3, [r7, #16]
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2302      	movs	r3, #2
 8001694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	4619      	mov	r1, r3
 800169c:	4819      	ldr	r0, [pc, #100]	@ (8001704 <MX_GPIO_Init+0x150>)
 800169e:	f000 ff97 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FPGA_IRQ_Pin USB_detect_Pin */
  GPIO_InitStruct.Pin = FPGA_IRQ_Pin|USB_detect_Pin;
 80016a2:	f640 0308 	movw	r3, #2056	@ 0x808
 80016a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a8:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <MX_GPIO_Init+0x154>)
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	4813      	ldr	r0, [pc, #76]	@ (8001704 <MX_GPIO_Init+0x150>)
 80016b8:	f000 ff8a 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DONE_Pin INITB_Pin */
  GPIO_InitStruct.Pin = DONE_Pin|INITB_Pin;
 80016bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4619      	mov	r1, r3
 80016d0:	480b      	ldr	r0, [pc, #44]	@ (8001700 <MX_GPIO_Init+0x14c>)
 80016d2:	f000 ff7d 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_IRQ_Pin */
  GPIO_InitStruct.Pin = UI_IRQ_Pin;
 80016d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <MX_GPIO_Init+0x154>)
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UI_IRQ_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	4619      	mov	r1, r3
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_GPIO_Init+0x14c>)
 80016ec:	f000 ff70 	bl	80025d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f0:	bf00      	nop
 80016f2:	3720      	adds	r7, #32
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40011000 	.word	0x40011000
 8001700:	40010800 	.word	0x40010800
 8001704:	40010c00 	.word	0x40010c00
 8001708:	10110000 	.word	0x10110000

0800170c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
	ReformatString(RXbuff, RS485BUFFSIZE);
 8001718:	2120      	movs	r1, #32
 800171a:	4832      	ldr	r0, [pc, #200]	@ (80017e4 <HAL_UARTEx_RxEventCallback+0xd8>)
 800171c:	f004 fd16 	bl	800614c <ReformatString>

	strcpy(TXbuff, "ERR\r\n");
 8001720:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001722:	4a32      	ldr	r2, [pc, #200]	@ (80017ec <HAL_UARTEx_RxEventCallback+0xe0>)
 8001724:	6810      	ldr	r0, [r2, #0]
 8001726:	6018      	str	r0, [r3, #0]
 8001728:	8892      	ldrh	r2, [r2, #4]
 800172a:	809a      	strh	r2, [r3, #4]

	Word* word = generateWordDirect(RXbuff);
 800172c:	482d      	ldr	r0, [pc, #180]	@ (80017e4 <HAL_UARTEx_RxEventCallback+0xd8>)
 800172e:	f004 fddd 	bl	80062ec <generateWordDirect>
 8001732:	60b8      	str	r0, [r7, #8]

	if(word->address == RackID || word->address == 1) executeWord(word);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a2d      	ldr	r2, [pc, #180]	@ (80017f0 <HAL_UARTEx_RxEventCallback+0xe4>)
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	4293      	cmp	r3, r2
 800173e:	d003      	beq.n	8001748 <HAL_UARTEx_RxEventCallback+0x3c>
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d102      	bne.n	800174e <HAL_UARTEx_RxEventCallback+0x42>
 8001748:	68b8      	ldr	r0, [r7, #8]
 800174a:	f004 feab 	bl	80064a4 <executeWord>

	for(int i = word->subwordsCount; i > 0 ; i--)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	e02e      	b.n	80017b4 <HAL_UARTEx_RxEventCallback+0xa8>
	{
		if (word->subwords[i].paramType == OTHER_P && word->subwords[i].otherParam != NULL)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	6899      	ldr	r1, [r3, #8]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	7a1b      	ldrb	r3, [r3, #8]
 8001768:	2b04      	cmp	r3, #4
 800176a:	d120      	bne.n	80017ae <HAL_UARTEx_RxEventCallback+0xa2>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	6899      	ldr	r1, [r3, #8]
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d015      	beq.n	80017ae <HAL_UARTEx_RxEventCallback+0xa2>
		{
			free(word->subwords[i].otherParam);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	4618      	mov	r0, r3
 8001796:	f005 f84d 	bl	8006834 <free>
			word->subwords[i].otherParam = NULL;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	6899      	ldr	r1, [r3, #8]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
	for(int i = word->subwordsCount; i > 0 ; i--)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dccd      	bgt.n	8001756 <HAL_UARTEx_RxEventCallback+0x4a>
		}
	}
	free(word->subwords);
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 f838 	bl	8006834 <free>
	word->subwords = NULL;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]

	RS485_Transmit(TXbuff);
 80017ca:	4807      	ldr	r0, [pc, #28]	@ (80017e8 <HAL_UARTEx_RxEventCallback+0xdc>)
 80017cc:	f004 fc66 	bl	800609c <RS485_Transmit>

	//SCPIencode(TXbuff, RXbuff, AWG1, NOISE1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 80017d0:	2220      	movs	r2, #32
 80017d2:	4904      	ldr	r1, [pc, #16]	@ (80017e4 <HAL_UARTEx_RxEventCallback+0xd8>)
 80017d4:	4807      	ldr	r0, [pc, #28]	@ (80017f4 <HAL_UARTEx_RxEventCallback+0xe8>)
 80017d6:	f003 f87c 	bl	80048d2 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200003a4 	.word	0x200003a4
 80017e8:	20000384 	.word	0x20000384
 80017ec:	0800a288 	.word	0x0800a288
 80017f0:	2000036e 	.word	0x2000036e
 80017f4:	200002e8 	.word	0x200002e8

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <Error_Handler+0x8>

08001804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <HAL_MspInit+0x5c>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	4a14      	ldr	r2, [pc, #80]	@ (8001860 <HAL_MspInit+0x5c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6193      	str	r3, [r2, #24]
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <HAL_MspInit+0x5c>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <HAL_MspInit+0x5c>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	4a0e      	ldr	r2, [pc, #56]	@ (8001860 <HAL_MspInit+0x5c>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800182c:	61d3      	str	r3, [r2, #28]
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <HAL_MspInit+0x5c>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <HAL_MspInit+0x60>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <HAL_MspInit+0x60>)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000

08001868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <HAL_ADC_MspInit+0x6c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d121      	bne.n	80018cc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001888:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <HAL_ADC_MspInit+0x70>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <HAL_ADC_MspInit+0x70>)
 800188e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <HAL_ADC_MspInit+0x70>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <HAL_ADC_MspInit+0x70>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a0c      	ldr	r2, [pc, #48]	@ (80018d8 <HAL_ADC_MspInit+0x70>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <HAL_ADC_MspInit+0x70>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Ain_Pin;
 80018b8:	2301      	movs	r3, #1
 80018ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018bc:	2303      	movs	r3, #3
 80018be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Ain_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4619      	mov	r1, r3
 80018c6:	4805      	ldr	r0, [pc, #20]	@ (80018dc <HAL_ADC_MspInit+0x74>)
 80018c8:	f000 fe82 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40012400 	.word	0x40012400
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010800 	.word	0x40010800

080018e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	@ 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001970 <HAL_I2C_MspInit+0x90>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d132      	bne.n	8001966 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_I2C_MspInit+0x94>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a1b      	ldr	r2, [pc, #108]	@ (8001974 <HAL_I2C_MspInit+0x94>)
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_I2C_MspInit+0x94>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001918:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191e:	2312      	movs	r3, #18
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4812      	ldr	r0, [pc, #72]	@ (8001978 <HAL_I2C_MspInit+0x98>)
 800192e:	f000 fe4f 	bl	80025d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_I2C_MspInit+0x9c>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
 8001948:	4a0c      	ldr	r2, [pc, #48]	@ (800197c <HAL_I2C_MspInit+0x9c>)
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_I2C_MspInit+0x94>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	4a08      	ldr	r2, [pc, #32]	@ (8001974 <HAL_I2C_MspInit+0x94>)
 8001954:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001958:	61d3      	str	r3, [r2, #28]
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_I2C_MspInit+0x94>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	@ 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40005400 	.word	0x40005400
 8001974:	40021000 	.word	0x40021000
 8001978:	40010c00 	.word	0x40010c00
 800197c:	40010000 	.word	0x40010000

08001980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1b      	ldr	r2, [pc, #108]	@ (8001a08 <HAL_SPI_MspInit+0x88>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d12f      	bne.n	8001a00 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <HAL_SPI_MspInit+0x8c>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a19      	ldr	r2, [pc, #100]	@ (8001a0c <HAL_SPI_MspInit+0x8c>)
 80019a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <HAL_SPI_MspInit+0x8c>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_SPI_MspInit+0x8c>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a13      	ldr	r2, [pc, #76]	@ (8001a0c <HAL_SPI_MspInit+0x8c>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <HAL_SPI_MspInit+0x8c>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019d0:	23a0      	movs	r3, #160	@ 0xa0
 80019d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4619      	mov	r1, r3
 80019e2:	480b      	ldr	r0, [pc, #44]	@ (8001a10 <HAL_SPI_MspInit+0x90>)
 80019e4:	f000 fdf4 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019e8:	2340      	movs	r3, #64	@ 0x40
 80019ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4619      	mov	r1, r3
 80019fa:	4805      	ldr	r0, [pc, #20]	@ (8001a10 <HAL_SPI_MspInit+0x90>)
 80019fc:	f000 fde8 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a00:	bf00      	nop
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40013000 	.word	0x40013000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010800 	.word	0x40010800

08001a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a26      	ldr	r2, [pc, #152]	@ (8001ac8 <HAL_UART_MspInit+0xb4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d145      	bne.n	8001ac0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a34:	4b25      	ldr	r3, [pc, #148]	@ (8001acc <HAL_UART_MspInit+0xb8>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a24      	ldr	r2, [pc, #144]	@ (8001acc <HAL_UART_MspInit+0xb8>)
 8001a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <HAL_UART_MspInit+0xb8>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <HAL_UART_MspInit+0xb8>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a1e      	ldr	r2, [pc, #120]	@ (8001acc <HAL_UART_MspInit+0xb8>)
 8001a52:	f043 0308 	orr.w	r3, r3, #8
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <HAL_UART_MspInit+0xb8>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a64:	2340      	movs	r3, #64	@ 0x40
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4816      	ldr	r0, [pc, #88]	@ (8001ad0 <HAL_UART_MspInit+0xbc>)
 8001a78:	f000 fdaa 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4810      	ldr	r0, [pc, #64]	@ (8001ad0 <HAL_UART_MspInit+0xbc>)
 8001a90:	f000 fd9e 	bl	80025d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001a94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <HAL_UART_MspInit+0xc0>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <HAL_UART_MspInit+0xc0>)
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2025      	movs	r0, #37	@ 0x25
 8001ab6:	f000 fca2 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aba:	2025      	movs	r0, #37	@ 0x25
 8001abc:	f000 fcbb 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	@ 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010c00 	.word	0x40010c00
 8001ad4:	40010000 	.word	0x40010000

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <NMI_Handler+0x4>

08001ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <MemManage_Handler+0x4>

08001af0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <UsageFault_Handler+0x4>

08001b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f000 f940 	bl	8001dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <USART1_IRQHandler+0x10>)
 8001b36:	f002 ff29 	bl	800498c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200002e8 	.word	0x200002e8

08001b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return 1;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <_kill>:

int _kill(int pid, int sig)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b5c:	f005 fde2 	bl	8007724 <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2216      	movs	r2, #22
 8001b64:	601a      	str	r2, [r3, #0]
  return -1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_exit>:

void _exit (int status)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffe7 	bl	8001b52 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <_exit+0x12>

08001b88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e00a      	b.n	8001bb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b9a:	f3af 8000 	nop.w
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	60ba      	str	r2, [r7, #8]
 8001ba6:	b2ca      	uxtb	r2, r1
 8001ba8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	dbf0      	blt.n	8001b9a <_read+0x12>
  }

  return len;
 8001bb8:	687b      	ldr	r3, [r7, #4]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	e009      	b.n	8001be8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	60ba      	str	r2, [r7, #8]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	dbf1      	blt.n	8001bd4 <_write+0x12>
  }
  return len;
 8001bf0:	687b      	ldr	r3, [r7, #4]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <_close>:

int _close(int file)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c20:	605a      	str	r2, [r3, #4]
  return 0;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <_isatty>:

int _isatty(int file)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b085      	sub	sp, #20
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
	...

08001c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c64:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <_sbrk+0x5c>)
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <_sbrk+0x60>)
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <_sbrk+0x64>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	@ (8001cc4 <_sbrk+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d207      	bcs.n	8001c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c8c:	f005 fd4a 	bl	8007724 <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	220c      	movs	r2, #12
 8001c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	e009      	b.n	8001cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <_sbrk+0x64>)
 8001cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20005000 	.word	0x20005000
 8001cbc:	00000400 	.word	0x00000400
 8001cc0:	20000370 	.word	0x20000370
 8001cc4:	20000570 	.word	0x20000570

08001cc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd4:	f7ff fff8 	bl	8001cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd8:	480b      	ldr	r0, [pc, #44]	@ (8001d08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cda:	490c      	ldr	r1, [pc, #48]	@ (8001d0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8001d10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce0:	e002      	b.n	8001ce8 <LoopCopyDataInit>

08001ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce6:	3304      	adds	r3, #4

08001ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cec:	d3f9      	bcc.n	8001ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cee:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cf0:	4c09      	ldr	r4, [pc, #36]	@ (8001d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf4:	e001      	b.n	8001cfa <LoopFillZerobss>

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf8:	3204      	adds	r2, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfe:	f005 fd17 	bl	8007730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d02:	f7ff fa2d 	bl	8001160 <main>
  bx lr
 8001d06:	4770      	bx	lr
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001d10:	0800aa38 	.word	0x0800aa38
  ldr r2, =_sbss
 8001d14:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001d18:	20000570 	.word	0x20000570

08001d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC1_2_IRQHandler>
	...

08001d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d24:	4b08      	ldr	r3, [pc, #32]	@ (8001d48 <HAL_Init+0x28>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a07      	ldr	r2, [pc, #28]	@ (8001d48 <HAL_Init+0x28>)
 8001d2a:	f043 0310 	orr.w	r3, r3, #16
 8001d2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f000 fb59 	bl	80023e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d36:	200f      	movs	r0, #15
 8001d38:	f000 f808 	bl	8001d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d3c:	f7ff fd62 	bl	8001804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40022000 	.word	0x40022000

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d54:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <HAL_InitTick+0x54>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_InitTick+0x58>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fb71 	bl	8002452 <HAL_SYSTICK_Config>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00e      	b.n	8001d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b0f      	cmp	r3, #15
 8001d7e:	d80a      	bhi.n	8001d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d80:	2200      	movs	r2, #0
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f000 fb39 	bl	80023fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d8c:	4a06      	ldr	r2, [pc, #24]	@ (8001da8 <HAL_InitTick+0x5c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000008 	.word	0x20000008
 8001da8:	20000004 	.word	0x20000004

08001dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_IncTick+0x1c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <HAL_IncTick+0x20>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a03      	ldr	r2, [pc, #12]	@ (8001dcc <HAL_IncTick+0x20>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	20000374 	.word	0x20000374

08001dd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd4:	4b02      	ldr	r3, [pc, #8]	@ (8001de0 <HAL_GetTick+0x10>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	20000374 	.word	0x20000374

08001de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff fff0 	bl	8001dd0 <HAL_GetTick>
 8001df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d005      	beq.n	8001e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_Delay+0x44>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e0a:	bf00      	nop
 8001e0c:	f7ff ffe0 	bl	8001dd0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d8f7      	bhi.n	8001e0c <HAL_Delay+0x28>
  {
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0be      	b.n	8001fcc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fcfc 	bl	8001868 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f9ab 	bl	80021cc <ADC_ConversionStop_Disable>
 8001e76:	4603      	mov	r3, r0
 8001e78:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 8099 	bne.w	8001fba <HAL_ADC_Init+0x18e>
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 8095 	bne.w	8001fba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e98:	f023 0302 	bic.w	r3, r3, #2
 8001e9c:	f043 0202 	orr.w	r2, r3, #2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7b1b      	ldrb	r3, [r3, #12]
 8001eb2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001eb4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ec4:	d003      	beq.n	8001ece <HAL_ADC_Init+0xa2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <HAL_ADC_Init+0xa8>
 8001ece:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ed2:	e000      	b.n	8001ed6 <HAL_ADC_Init+0xaa>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7d1b      	ldrb	r3, [r3, #20]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d119      	bne.n	8001f18 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7b1b      	ldrb	r3, [r3, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d109      	bne.n	8001f00 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	035a      	lsls	r2, r3, #13
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	e00b      	b.n	8001f18 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <HAL_ADC_Init+0x1a8>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f48:	d003      	beq.n	8001f52 <HAL_ADC_Init+0x126>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d104      	bne.n	8001f5c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	051b      	lsls	r3, r3, #20
 8001f5a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f62:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <HAL_ADC_Init+0x1ac>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d10b      	bne.n	8001f98 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8a:	f023 0303 	bic.w	r3, r3, #3
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f96:	e018      	b.n	8001fca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	f023 0312 	bic.w	r3, r3, #18
 8001fa0:	f043 0210 	orr.w	r2, r3, #16
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fb8:	e007      	b.n	8001fca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbe:	f043 0210 	orr.w	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	ffe1f7fd 	.word	0xffe1f7fd
 8001fd8:	ff1f0efe 	.word	0xff1f0efe

08001fdc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x20>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e0dc      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x1da>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b06      	cmp	r3, #6
 800200a:	d81c      	bhi.n	8002046 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	3b05      	subs	r3, #5
 800201e:	221f      	movs	r2, #31
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	4019      	ands	r1, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	3b05      	subs	r3, #5
 8002038:	fa00 f203 	lsl.w	r2, r0, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	635a      	str	r2, [r3, #52]	@ 0x34
 8002044:	e03c      	b.n	80020c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d81c      	bhi.n	8002088 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3b23      	subs	r3, #35	@ 0x23
 8002060:	221f      	movs	r2, #31
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	4019      	ands	r1, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b23      	subs	r3, #35	@ 0x23
 800207a:	fa00 f203 	lsl.w	r2, r0, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	631a      	str	r2, [r3, #48]	@ 0x30
 8002086:	e01b      	b.n	80020c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	3b41      	subs	r3, #65	@ 0x41
 800209a:	221f      	movs	r2, #31
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	4019      	ands	r1, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	3b41      	subs	r3, #65	@ 0x41
 80020b4:	fa00 f203 	lsl.w	r2, r0, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b09      	cmp	r3, #9
 80020c6:	d91c      	bls.n	8002102 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68d9      	ldr	r1, [r3, #12]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	3b1e      	subs	r3, #30
 80020da:	2207      	movs	r2, #7
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4019      	ands	r1, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6898      	ldr	r0, [r3, #8]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	3b1e      	subs	r3, #30
 80020f4:	fa00 f203 	lsl.w	r2, r0, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	e019      	b.n	8002136 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6919      	ldr	r1, [r3, #16]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	2207      	movs	r2, #7
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	4019      	ands	r1, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6898      	ldr	r0, [r3, #8]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	fa00 f203 	lsl.w	r2, r0, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b10      	cmp	r3, #16
 800213c:	d003      	beq.n	8002146 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002142:	2b11      	cmp	r3, #17
 8002144:	d132      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1d      	ldr	r2, [pc, #116]	@ (80021c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d125      	bne.n	800219c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d126      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800216c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b10      	cmp	r3, #16
 8002174:	d11a      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002176:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a13      	ldr	r2, [pc, #76]	@ (80021c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	0c9a      	lsrs	r2, r3, #18
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800218c:	e002      	b.n	8002194 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3b01      	subs	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f9      	bne.n	800218e <HAL_ADC_ConfigChannel+0x1b2>
 800219a:	e007      	b.n	80021ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a0:	f043 0220 	orr.w	r2, r3, #32
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	40012400 	.word	0x40012400
 80021c4:	20000000 	.word	0x20000000
 80021c8:	431bde83 	.word	0x431bde83

080021cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d12e      	bne.n	8002244 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021f6:	f7ff fdeb 	bl	8001dd0 <HAL_GetTick>
 80021fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021fc:	e01b      	b.n	8002236 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021fe:	f7ff fde7 	bl	8001dd0 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d914      	bls.n	8002236 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b01      	cmp	r3, #1
 8002218:	d10d      	bne.n	8002236 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221e:	f043 0210 	orr.w	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e007      	b.n	8002246 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d0dc      	beq.n	80021fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800226c:	4013      	ands	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002278:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800227c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002282:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	60d3      	str	r3, [r2, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800229c:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <__NVIC_GetPriorityGrouping+0x18>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	f003 0307 	and.w	r3, r3, #7
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	db0b      	blt.n	80022de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	4906      	ldr	r1, [pc, #24]	@ (80022e8 <__NVIC_EnableIRQ+0x34>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	2001      	movs	r0, #1
 80022d6:	fa00 f202 	lsl.w	r2, r0, r2
 80022da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	@ (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	@ (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	@ 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
         );
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	@ 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023b4:	d301      	bcc.n	80023ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00f      	b.n	80023da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <SysTick_Config+0x40>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c2:	210f      	movs	r1, #15
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f7ff ff90 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <SysTick_Config+0x40>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d2:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <SysTick_Config+0x40>)
 80023d4:	2207      	movs	r2, #7
 80023d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff2d 	bl	8002250 <__NVIC_SetPriorityGrouping>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002410:	f7ff ff42 	bl	8002298 <__NVIC_GetPriorityGrouping>
 8002414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7ff ff90 	bl	8002340 <NVIC_EncodePriority>
 8002420:	4602      	mov	r2, r0
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff5f 	bl	80022ec <__NVIC_SetPriority>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff35 	bl	80022b4 <__NVIC_EnableIRQ>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffa2 	bl	80023a4 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d008      	beq.n	8002494 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2204      	movs	r2, #4
 8002486:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e020      	b.n	80024d6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 020e 	bic.w	r2, r2, #14
 80024a2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024bc:	2101      	movs	r1, #1
 80024be:	fa01 f202 	lsl.w	r2, r1, r2
 80024c2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d005      	beq.n	8002504 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2204      	movs	r2, #4
 80024fc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	e051      	b.n	80025a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 020e 	bic.w	r2, r2, #14
 8002512:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a22      	ldr	r2, [pc, #136]	@ (80025b4 <HAL_DMA_Abort_IT+0xd4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d029      	beq.n	8002582 <HAL_DMA_Abort_IT+0xa2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a21      	ldr	r2, [pc, #132]	@ (80025b8 <HAL_DMA_Abort_IT+0xd8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d022      	beq.n	800257e <HAL_DMA_Abort_IT+0x9e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1f      	ldr	r2, [pc, #124]	@ (80025bc <HAL_DMA_Abort_IT+0xdc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01a      	beq.n	8002578 <HAL_DMA_Abort_IT+0x98>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1e      	ldr	r2, [pc, #120]	@ (80025c0 <HAL_DMA_Abort_IT+0xe0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d012      	beq.n	8002572 <HAL_DMA_Abort_IT+0x92>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <HAL_DMA_Abort_IT+0xe4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00a      	beq.n	800256c <HAL_DMA_Abort_IT+0x8c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1b      	ldr	r2, [pc, #108]	@ (80025c8 <HAL_DMA_Abort_IT+0xe8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d102      	bne.n	8002566 <HAL_DMA_Abort_IT+0x86>
 8002560:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002564:	e00e      	b.n	8002584 <HAL_DMA_Abort_IT+0xa4>
 8002566:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800256a:	e00b      	b.n	8002584 <HAL_DMA_Abort_IT+0xa4>
 800256c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002570:	e008      	b.n	8002584 <HAL_DMA_Abort_IT+0xa4>
 8002572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002576:	e005      	b.n	8002584 <HAL_DMA_Abort_IT+0xa4>
 8002578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800257c:	e002      	b.n	8002584 <HAL_DMA_Abort_IT+0xa4>
 800257e:	2310      	movs	r3, #16
 8002580:	e000      	b.n	8002584 <HAL_DMA_Abort_IT+0xa4>
 8002582:	2301      	movs	r3, #1
 8002584:	4a11      	ldr	r2, [pc, #68]	@ (80025cc <HAL_DMA_Abort_IT+0xec>)
 8002586:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	4798      	blx	r3
    } 
  }
  return status;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40020008 	.word	0x40020008
 80025b8:	4002001c 	.word	0x4002001c
 80025bc:	40020030 	.word	0x40020030
 80025c0:	40020044 	.word	0x40020044
 80025c4:	40020058 	.word	0x40020058
 80025c8:	4002006c 	.word	0x4002006c
 80025cc:	40020000 	.word	0x40020000

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b08b      	sub	sp, #44	@ 0x2c
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	e169      	b.n	80028b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025e4:	2201      	movs	r2, #1
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f040 8158 	bne.w	80028b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a9a      	ldr	r2, [pc, #616]	@ (8002870 <HAL_GPIO_Init+0x2a0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d05e      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 800260c:	4a98      	ldr	r2, [pc, #608]	@ (8002870 <HAL_GPIO_Init+0x2a0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d875      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 8002612:	4a98      	ldr	r2, [pc, #608]	@ (8002874 <HAL_GPIO_Init+0x2a4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d058      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 8002618:	4a96      	ldr	r2, [pc, #600]	@ (8002874 <HAL_GPIO_Init+0x2a4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d86f      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 800261e:	4a96      	ldr	r2, [pc, #600]	@ (8002878 <HAL_GPIO_Init+0x2a8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d052      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 8002624:	4a94      	ldr	r2, [pc, #592]	@ (8002878 <HAL_GPIO_Init+0x2a8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d869      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 800262a:	4a94      	ldr	r2, [pc, #592]	@ (800287c <HAL_GPIO_Init+0x2ac>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d04c      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 8002630:	4a92      	ldr	r2, [pc, #584]	@ (800287c <HAL_GPIO_Init+0x2ac>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d863      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 8002636:	4a92      	ldr	r2, [pc, #584]	@ (8002880 <HAL_GPIO_Init+0x2b0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d046      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 800263c:	4a90      	ldr	r2, [pc, #576]	@ (8002880 <HAL_GPIO_Init+0x2b0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d85d      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 8002642:	2b12      	cmp	r3, #18
 8002644:	d82a      	bhi.n	800269c <HAL_GPIO_Init+0xcc>
 8002646:	2b12      	cmp	r3, #18
 8002648:	d859      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 800264a:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <HAL_GPIO_Init+0x80>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	080026cb 	.word	0x080026cb
 8002654:	080026a5 	.word	0x080026a5
 8002658:	080026b7 	.word	0x080026b7
 800265c:	080026f9 	.word	0x080026f9
 8002660:	080026ff 	.word	0x080026ff
 8002664:	080026ff 	.word	0x080026ff
 8002668:	080026ff 	.word	0x080026ff
 800266c:	080026ff 	.word	0x080026ff
 8002670:	080026ff 	.word	0x080026ff
 8002674:	080026ff 	.word	0x080026ff
 8002678:	080026ff 	.word	0x080026ff
 800267c:	080026ff 	.word	0x080026ff
 8002680:	080026ff 	.word	0x080026ff
 8002684:	080026ff 	.word	0x080026ff
 8002688:	080026ff 	.word	0x080026ff
 800268c:	080026ff 	.word	0x080026ff
 8002690:	080026ff 	.word	0x080026ff
 8002694:	080026ad 	.word	0x080026ad
 8002698:	080026c1 	.word	0x080026c1
 800269c:	4a79      	ldr	r2, [pc, #484]	@ (8002884 <HAL_GPIO_Init+0x2b4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026a2:	e02c      	b.n	80026fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	623b      	str	r3, [r7, #32]
          break;
 80026aa:	e029      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	3304      	adds	r3, #4
 80026b2:	623b      	str	r3, [r7, #32]
          break;
 80026b4:	e024      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	3308      	adds	r3, #8
 80026bc:	623b      	str	r3, [r7, #32]
          break;
 80026be:	e01f      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	330c      	adds	r3, #12
 80026c6:	623b      	str	r3, [r7, #32]
          break;
 80026c8:	e01a      	b.n	8002700 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026d2:	2304      	movs	r3, #4
 80026d4:	623b      	str	r3, [r7, #32]
          break;
 80026d6:	e013      	b.n	8002700 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e0:	2308      	movs	r3, #8
 80026e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	611a      	str	r2, [r3, #16]
          break;
 80026ea:	e009      	b.n	8002700 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026ec:	2308      	movs	r3, #8
 80026ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	615a      	str	r2, [r3, #20]
          break;
 80026f6:	e003      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026f8:	2300      	movs	r3, #0
 80026fa:	623b      	str	r3, [r7, #32]
          break;
 80026fc:	e000      	b.n	8002700 <HAL_GPIO_Init+0x130>
          break;
 80026fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2bff      	cmp	r3, #255	@ 0xff
 8002704:	d801      	bhi.n	800270a <HAL_GPIO_Init+0x13a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	e001      	b.n	800270e <HAL_GPIO_Init+0x13e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2bff      	cmp	r3, #255	@ 0xff
 8002714:	d802      	bhi.n	800271c <HAL_GPIO_Init+0x14c>
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	e002      	b.n	8002722 <HAL_GPIO_Init+0x152>
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	3b08      	subs	r3, #8
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	210f      	movs	r1, #15
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	6a39      	ldr	r1, [r7, #32]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	431a      	orrs	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80b1 	beq.w	80028b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002750:	4b4d      	ldr	r3, [pc, #308]	@ (8002888 <HAL_GPIO_Init+0x2b8>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	4a4c      	ldr	r2, [pc, #304]	@ (8002888 <HAL_GPIO_Init+0x2b8>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6193      	str	r3, [r2, #24]
 800275c:	4b4a      	ldr	r3, [pc, #296]	@ (8002888 <HAL_GPIO_Init+0x2b8>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002768:	4a48      	ldr	r2, [pc, #288]	@ (800288c <HAL_GPIO_Init+0x2bc>)
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a40      	ldr	r2, [pc, #256]	@ (8002890 <HAL_GPIO_Init+0x2c0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_GPIO_Init+0x1ec>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a3f      	ldr	r2, [pc, #252]	@ (8002894 <HAL_GPIO_Init+0x2c4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00d      	beq.n	80027b8 <HAL_GPIO_Init+0x1e8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a3e      	ldr	r2, [pc, #248]	@ (8002898 <HAL_GPIO_Init+0x2c8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <HAL_GPIO_Init+0x1e4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a3d      	ldr	r2, [pc, #244]	@ (800289c <HAL_GPIO_Init+0x2cc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_GPIO_Init+0x1e0>
 80027ac:	2303      	movs	r3, #3
 80027ae:	e006      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027b0:	2304      	movs	r3, #4
 80027b2:	e004      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e002      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027bc:	2300      	movs	r3, #0
 80027be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c0:	f002 0203 	and.w	r2, r2, #3
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	4093      	lsls	r3, r2
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027ce:	492f      	ldr	r1, [pc, #188]	@ (800288c <HAL_GPIO_Init+0x2bc>)
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027e8:	4b2d      	ldr	r3, [pc, #180]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	492c      	ldr	r1, [pc, #176]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027f6:	4b2a      	ldr	r3, [pc, #168]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	4928      	ldr	r1, [pc, #160]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002800:	4013      	ands	r3, r2
 8002802:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002810:	4b23      	ldr	r3, [pc, #140]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4922      	ldr	r1, [pc, #136]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	60cb      	str	r3, [r1, #12]
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	43db      	mvns	r3, r3
 8002826:	491e      	ldr	r1, [pc, #120]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002828:	4013      	ands	r3, r2
 800282a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4918      	ldr	r1, [pc, #96]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002846:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	43db      	mvns	r3, r3
 800284e:	4914      	ldr	r1, [pc, #80]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002850:	4013      	ands	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d021      	beq.n	80028a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002860:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	490e      	ldr	r1, [pc, #56]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	600b      	str	r3, [r1, #0]
 800286c:	e021      	b.n	80028b2 <HAL_GPIO_Init+0x2e2>
 800286e:	bf00      	nop
 8002870:	10320000 	.word	0x10320000
 8002874:	10310000 	.word	0x10310000
 8002878:	10220000 	.word	0x10220000
 800287c:	10210000 	.word	0x10210000
 8002880:	10120000 	.word	0x10120000
 8002884:	10110000 	.word	0x10110000
 8002888:	40021000 	.word	0x40021000
 800288c:	40010000 	.word	0x40010000
 8002890:	40010800 	.word	0x40010800
 8002894:	40010c00 	.word	0x40010c00
 8002898:	40011000 	.word	0x40011000
 800289c:	40011400 	.word	0x40011400
 80028a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <HAL_GPIO_Init+0x304>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	4909      	ldr	r1, [pc, #36]	@ (80028d4 <HAL_GPIO_Init+0x304>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	fa22 f303 	lsr.w	r3, r2, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f47f ae8e 	bne.w	80025e4 <HAL_GPIO_Init+0x14>
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	372c      	adds	r7, #44	@ 0x2c
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40010400 	.word	0x40010400

080028d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	887b      	ldrh	r3, [r7, #2]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e001      	b.n	80028fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	807b      	strh	r3, [r7, #2]
 8002912:	4613      	mov	r3, r2
 8002914:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002916:	787b      	ldrb	r3, [r7, #1]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291c:	887a      	ldrh	r2, [r7, #2]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002922:	e003      	b.n	800292c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002924:	887b      	ldrh	r3, [r7, #2]
 8002926:	041a      	lsls	r2, r3, #16
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	611a      	str	r2, [r3, #16]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
	...

08002938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e12b      	b.n	8002ba2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe ffbe 	bl	80018e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2224      	movs	r2, #36	@ 0x24
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800298a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800299a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800299c:	f001 f842 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 80029a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4a81      	ldr	r2, [pc, #516]	@ (8002bac <HAL_I2C_Init+0x274>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d807      	bhi.n	80029bc <HAL_I2C_Init+0x84>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a80      	ldr	r2, [pc, #512]	@ (8002bb0 <HAL_I2C_Init+0x278>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	bf94      	ite	ls
 80029b4:	2301      	movls	r3, #1
 80029b6:	2300      	movhi	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e006      	b.n	80029ca <HAL_I2C_Init+0x92>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a7d      	ldr	r2, [pc, #500]	@ (8002bb4 <HAL_I2C_Init+0x27c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	bf94      	ite	ls
 80029c4:	2301      	movls	r3, #1
 80029c6:	2300      	movhi	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0e7      	b.n	8002ba2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4a78      	ldr	r2, [pc, #480]	@ (8002bb8 <HAL_I2C_Init+0x280>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0c9b      	lsrs	r3, r3, #18
 80029dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a6a      	ldr	r2, [pc, #424]	@ (8002bac <HAL_I2C_Init+0x274>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d802      	bhi.n	8002a0c <HAL_I2C_Init+0xd4>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	e009      	b.n	8002a20 <HAL_I2C_Init+0xe8>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	4a69      	ldr	r2, [pc, #420]	@ (8002bbc <HAL_I2C_Init+0x284>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	3301      	adds	r3, #1
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	495c      	ldr	r1, [pc, #368]	@ (8002bac <HAL_I2C_Init+0x274>)
 8002a3c:	428b      	cmp	r3, r1
 8002a3e:	d819      	bhi.n	8002a74 <HAL_I2C_Init+0x13c>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1e59      	subs	r1, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a4e:	1c59      	adds	r1, r3, #1
 8002a50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a54:	400b      	ands	r3, r1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_I2C_Init+0x138>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1e59      	subs	r1, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6e:	e051      	b.n	8002b14 <HAL_I2C_Init+0x1dc>
 8002a70:	2304      	movs	r3, #4
 8002a72:	e04f      	b.n	8002b14 <HAL_I2C_Init+0x1dc>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d111      	bne.n	8002aa0 <HAL_I2C_Init+0x168>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e58      	subs	r0, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	440b      	add	r3, r1
 8002a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf0c      	ite	eq
 8002a98:	2301      	moveq	r3, #1
 8002a9a:	2300      	movne	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e012      	b.n	8002ac6 <HAL_I2C_Init+0x18e>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e58      	subs	r0, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	0099      	lsls	r1, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Init+0x196>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e022      	b.n	8002b14 <HAL_I2C_Init+0x1dc>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10e      	bne.n	8002af4 <HAL_I2C_Init+0x1bc>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1e58      	subs	r0, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	440b      	add	r3, r1
 8002ae4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002af2:	e00f      	b.n	8002b14 <HAL_I2C_Init+0x1dc>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	0099      	lsls	r1, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	6809      	ldr	r1, [r1, #0]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69da      	ldr	r2, [r3, #28]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6911      	ldr	r1, [r2, #16]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68d2      	ldr	r2, [r2, #12]
 8002b4e:	4311      	orrs	r1, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	430b      	orrs	r3, r1
 8002b56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	000186a0 	.word	0x000186a0
 8002bb0:	001e847f 	.word	0x001e847f
 8002bb4:	003d08ff 	.word	0x003d08ff
 8002bb8:	431bde83 	.word	0x431bde83
 8002bbc:	10624dd3 	.word	0x10624dd3

08002bc0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	4608      	mov	r0, r1
 8002bca:	4611      	mov	r1, r2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	817b      	strh	r3, [r7, #10]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	813b      	strh	r3, [r7, #8]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bda:	f7ff f8f9 	bl	8001dd0 <HAL_GetTick>
 8002bde:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	f040 80d9 	bne.w	8002da0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2319      	movs	r3, #25
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	496d      	ldr	r1, [pc, #436]	@ (8002dac <HAL_I2C_Mem_Write+0x1ec>)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f971 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	e0cc      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_I2C_Mem_Write+0x56>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e0c5      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1e2>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d007      	beq.n	8002c3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2221      	movs	r2, #33	@ 0x21
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a4d      	ldr	r2, [pc, #308]	@ (8002db0 <HAL_I2C_Mem_Write+0x1f0>)
 8002c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c7e:	88f8      	ldrh	r0, [r7, #6]
 8002c80:	893a      	ldrh	r2, [r7, #8]
 8002c82:	8979      	ldrh	r1, [r7, #10]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f890 	bl	8002db4 <I2C_RequestMemoryWrite>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d052      	beq.n	8002d40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e081      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fa36 	bl	8003114 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00d      	beq.n	8002cca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d107      	bne.n	8002cc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e06b      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	781a      	ldrb	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d11b      	bne.n	8002d40 <HAL_I2C_Mem_Write+0x180>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d017      	beq.n	8002d40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1aa      	bne.n	8002c9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fa29 	bl	80031a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00d      	beq.n	8002d74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d107      	bne.n	8002d70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e016      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e000      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002da0:	2302      	movs	r3, #2
  }
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	00100002 	.word	0x00100002
 8002db0:	ffff0000 	.word	0xffff0000

08002db4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	817b      	strh	r3, [r7, #10]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	813b      	strh	r3, [r7, #8]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f878 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00d      	beq.n	8002e12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e04:	d103      	bne.n	8002e0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e05f      	b.n	8002ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	6a3a      	ldr	r2, [r7, #32]
 8002e26:	492d      	ldr	r1, [pc, #180]	@ (8002edc <I2C_RequestMemoryWrite+0x128>)
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f8d3 	bl	8002fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e04c      	b.n	8002ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e50:	6a39      	ldr	r1, [r7, #32]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f95e 	bl	8003114 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00d      	beq.n	8002e7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d107      	bne.n	8002e76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e02b      	b.n	8002ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e80:	893b      	ldrh	r3, [r7, #8]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	611a      	str	r2, [r3, #16]
 8002e8a:	e021      	b.n	8002ed0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e8c:	893b      	ldrh	r3, [r7, #8]
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e9c:	6a39      	ldr	r1, [r7, #32]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f938 	bl	8003114 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d107      	bne.n	8002ec2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e005      	b.n	8002ed2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec6:	893b      	ldrh	r3, [r7, #8]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	00010002 	.word	0x00010002

08002ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef0:	e048      	b.n	8002f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d044      	beq.n	8002f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7fe ff69 	bl	8001dd0 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d302      	bcc.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d139      	bne.n	8002f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	0c1b      	lsrs	r3, r3, #16
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d10d      	bne.n	8002f36 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	43da      	mvns	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4013      	ands	r3, r2
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	e00c      	b.n	8002f50 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d116      	bne.n	8002f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e023      	b.n	8002fcc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	0c1b      	lsrs	r3, r3, #16
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d10d      	bne.n	8002faa <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	43da      	mvns	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	e00c      	b.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d093      	beq.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe2:	e071      	b.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff2:	d123      	bne.n	800303c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003002:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800300c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	f043 0204 	orr.w	r2, r3, #4
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e067      	b.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003042:	d041      	beq.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003044:	f7fe fec4 	bl	8001dd0 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	429a      	cmp	r2, r3
 8003052:	d302      	bcc.n	800305a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d136      	bne.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10c      	bne.n	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4013      	ands	r3, r2
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	e00b      	b.n	8003096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	43da      	mvns	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4013      	ands	r3, r2
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d016      	beq.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e021      	b.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10c      	bne.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	43da      	mvns	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4013      	ands	r3, r2
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e00b      	b.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	43da      	mvns	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bf14      	ite	ne
 80030fe:	2301      	movne	r3, #1
 8003100:	2300      	moveq	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	f47f af6d 	bne.w	8002fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003120:	e034      	b.n	800318c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f886 	bl	8003234 <I2C_IsAcknowledgeFailed>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e034      	b.n	800319c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d028      	beq.n	800318c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7fe fe49 	bl	8001dd0 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d11d      	bne.n	800318c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315a:	2b80      	cmp	r3, #128	@ 0x80
 800315c:	d016      	beq.n	800318c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	f043 0220 	orr.w	r2, r3, #32
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e007      	b.n	800319c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003196:	2b80      	cmp	r3, #128	@ 0x80
 8003198:	d1c3      	bne.n	8003122 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031b0:	e034      	b.n	800321c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f83e 	bl	8003234 <I2C_IsAcknowledgeFailed>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e034      	b.n	800322c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d028      	beq.n	800321c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ca:	f7fe fe01 	bl	8001dd0 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d11d      	bne.n	800321c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d016      	beq.n	800321c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e007      	b.n	800322c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b04      	cmp	r3, #4
 8003228:	d1c3      	bne.n	80031b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800324a:	d11b      	bne.n	8003284 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003254:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	f043 0204 	orr.w	r2, r3, #4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e272      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8087 	beq.w	80033be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032b0:	4b92      	ldr	r3, [pc, #584]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d00c      	beq.n	80032d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032bc:	4b8f      	ldr	r3, [pc, #572]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d112      	bne.n	80032ee <HAL_RCC_OscConfig+0x5e>
 80032c8:	4b8c      	ldr	r3, [pc, #560]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d4:	d10b      	bne.n	80032ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d6:	4b89      	ldr	r3, [pc, #548]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d06c      	beq.n	80033bc <HAL_RCC_OscConfig+0x12c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d168      	bne.n	80033bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e24c      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f6:	d106      	bne.n	8003306 <HAL_RCC_OscConfig+0x76>
 80032f8:	4b80      	ldr	r3, [pc, #512]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a7f      	ldr	r2, [pc, #508]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 80032fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	e02e      	b.n	8003364 <HAL_RCC_OscConfig+0xd4>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0x98>
 800330e:	4b7b      	ldr	r3, [pc, #492]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7a      	ldr	r2, [pc, #488]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003314:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b78      	ldr	r3, [pc, #480]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a77      	ldr	r2, [pc, #476]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003320:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e01d      	b.n	8003364 <HAL_RCC_OscConfig+0xd4>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0xbc>
 8003332:	4b72      	ldr	r3, [pc, #456]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a71      	ldr	r2, [pc, #452]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b6f      	ldr	r3, [pc, #444]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6e      	ldr	r2, [pc, #440]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0xd4>
 800334c:	4b6b      	ldr	r3, [pc, #428]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a6a      	ldr	r2, [pc, #424]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	4b68      	ldr	r3, [pc, #416]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a67      	ldr	r2, [pc, #412]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 800335e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003362:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d013      	beq.n	8003394 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe fd30 	bl	8001dd0 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003374:	f7fe fd2c 	bl	8001dd0 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	@ 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e200      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	4b5d      	ldr	r3, [pc, #372]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0xe4>
 8003392:	e014      	b.n	80033be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe fd1c 	bl	8001dd0 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800339c:	f7fe fd18 	bl	8001dd0 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	@ 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1ec      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ae:	4b53      	ldr	r3, [pc, #332]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x10c>
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d063      	beq.n	8003492 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ca:	4b4c      	ldr	r3, [pc, #304]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00b      	beq.n	80033ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033d6:	4b49      	ldr	r3, [pc, #292]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d11c      	bne.n	800341c <HAL_RCC_OscConfig+0x18c>
 80033e2:	4b46      	ldr	r3, [pc, #280]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d116      	bne.n	800341c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	4b43      	ldr	r3, [pc, #268]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <HAL_RCC_OscConfig+0x176>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d001      	beq.n	8003406 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e1c0      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003406:	4b3d      	ldr	r3, [pc, #244]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4939      	ldr	r1, [pc, #228]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341a:	e03a      	b.n	8003492 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003424:	4b36      	ldr	r3, [pc, #216]	@ (8003500 <HAL_RCC_OscConfig+0x270>)
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7fe fcd1 	bl	8001dd0 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003432:	f7fe fccd 	bl	8001dd0 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e1a1      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003444:	4b2d      	ldr	r3, [pc, #180]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003450:	4b2a      	ldr	r3, [pc, #168]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4927      	ldr	r1, [pc, #156]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003460:	4313      	orrs	r3, r2
 8003462:	600b      	str	r3, [r1, #0]
 8003464:	e015      	b.n	8003492 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003466:	4b26      	ldr	r3, [pc, #152]	@ (8003500 <HAL_RCC_OscConfig+0x270>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fcb0 	bl	8001dd0 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003474:	f7fe fcac 	bl	8001dd0 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e180      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003486:	4b1d      	ldr	r3, [pc, #116]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d03a      	beq.n	8003514 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d019      	beq.n	80034da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a6:	4b17      	ldr	r3, [pc, #92]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ac:	f7fe fc90 	bl	8001dd0 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fe fc8c 	bl	8001dd0 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e160      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c6:	4b0d      	ldr	r3, [pc, #52]	@ (80034fc <HAL_RCC_OscConfig+0x26c>)
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034d2:	2001      	movs	r0, #1
 80034d4:	f000 face 	bl	8003a74 <RCC_Delay>
 80034d8:	e01c      	b.n	8003514 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034da:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e0:	f7fe fc76 	bl	8001dd0 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e6:	e00f      	b.n	8003508 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e8:	f7fe fc72 	bl	8001dd0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d908      	bls.n	8003508 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e146      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	42420000 	.word	0x42420000
 8003504:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	4b92      	ldr	r3, [pc, #584]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e9      	bne.n	80034e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80a6 	beq.w	800366e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003526:	4b8b      	ldr	r3, [pc, #556]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10d      	bne.n	800354e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	4b88      	ldr	r3, [pc, #544]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	4a87      	ldr	r2, [pc, #540]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 8003538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800353c:	61d3      	str	r3, [r2, #28]
 800353e:	4b85      	ldr	r3, [pc, #532]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354e:	4b82      	ldr	r3, [pc, #520]	@ (8003758 <HAL_RCC_OscConfig+0x4c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d118      	bne.n	800358c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355a:	4b7f      	ldr	r3, [pc, #508]	@ (8003758 <HAL_RCC_OscConfig+0x4c8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a7e      	ldr	r2, [pc, #504]	@ (8003758 <HAL_RCC_OscConfig+0x4c8>)
 8003560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003566:	f7fe fc33 	bl	8001dd0 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356e:	f7fe fc2f 	bl	8001dd0 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b64      	cmp	r3, #100	@ 0x64
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e103      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003580:	4b75      	ldr	r3, [pc, #468]	@ (8003758 <HAL_RCC_OscConfig+0x4c8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f0      	beq.n	800356e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_OscConfig+0x312>
 8003594:	4b6f      	ldr	r3, [pc, #444]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	4a6e      	ldr	r2, [pc, #440]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	6213      	str	r3, [r2, #32]
 80035a0:	e02d      	b.n	80035fe <HAL_RCC_OscConfig+0x36e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x334>
 80035aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	4a69      	ldr	r2, [pc, #420]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	6213      	str	r3, [r2, #32]
 80035b6:	4b67      	ldr	r3, [pc, #412]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	4a66      	ldr	r2, [pc, #408]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	f023 0304 	bic.w	r3, r3, #4
 80035c0:	6213      	str	r3, [r2, #32]
 80035c2:	e01c      	b.n	80035fe <HAL_RCC_OscConfig+0x36e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	d10c      	bne.n	80035e6 <HAL_RCC_OscConfig+0x356>
 80035cc:	4b61      	ldr	r3, [pc, #388]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4a60      	ldr	r2, [pc, #384]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	f043 0304 	orr.w	r3, r3, #4
 80035d6:	6213      	str	r3, [r2, #32]
 80035d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6213      	str	r3, [r2, #32]
 80035e4:	e00b      	b.n	80035fe <HAL_RCC_OscConfig+0x36e>
 80035e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4a5a      	ldr	r2, [pc, #360]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	6213      	str	r3, [r2, #32]
 80035f2:	4b58      	ldr	r3, [pc, #352]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4a57      	ldr	r2, [pc, #348]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	f023 0304 	bic.w	r3, r3, #4
 80035fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d015      	beq.n	8003632 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003606:	f7fe fbe3 	bl	8001dd0 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360c:	e00a      	b.n	8003624 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fe fbdf 	bl	8001dd0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0b1      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	4b4b      	ldr	r3, [pc, #300]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ee      	beq.n	800360e <HAL_RCC_OscConfig+0x37e>
 8003630:	e014      	b.n	800365c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003632:	f7fe fbcd 	bl	8001dd0 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003638:	e00a      	b.n	8003650 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f7fe fbc9 	bl	8001dd0 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e09b      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003650:	4b40      	ldr	r3, [pc, #256]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ee      	bne.n	800363a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d105      	bne.n	800366e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003662:	4b3c      	ldr	r3, [pc, #240]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4a3b      	ldr	r2, [pc, #236]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800366c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8087 	beq.w	8003786 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003678:	4b36      	ldr	r3, [pc, #216]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 030c 	and.w	r3, r3, #12
 8003680:	2b08      	cmp	r3, #8
 8003682:	d061      	beq.n	8003748 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d146      	bne.n	800371a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368c:	4b33      	ldr	r3, [pc, #204]	@ (800375c <HAL_RCC_OscConfig+0x4cc>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003692:	f7fe fb9d 	bl	8001dd0 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369a:	f7fe fb99 	bl	8001dd0 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e06d      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ac:	4b29      	ldr	r3, [pc, #164]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f0      	bne.n	800369a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c0:	d108      	bne.n	80036d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036c2:	4b24      	ldr	r3, [pc, #144]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	4921      	ldr	r1, [pc, #132]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a19      	ldr	r1, [r3, #32]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	430b      	orrs	r3, r1
 80036e6:	491b      	ldr	r1, [pc, #108]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ec:	4b1b      	ldr	r3, [pc, #108]	@ (800375c <HAL_RCC_OscConfig+0x4cc>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe fb6d 	bl	8001dd0 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fe fb69 	bl	8001dd0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e03d      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800370c:	4b11      	ldr	r3, [pc, #68]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x46a>
 8003718:	e035      	b.n	8003786 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	4b10      	ldr	r3, [pc, #64]	@ (800375c <HAL_RCC_OscConfig+0x4cc>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fe fb56 	bl	8001dd0 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003728:	f7fe fb52 	bl	8001dd0 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e026      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x498>
 8003746:	e01e      	b.n	8003786 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d107      	bne.n	8003760 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e019      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
 8003754:	40021000 	.word	0x40021000
 8003758:	40007000 	.word	0x40007000
 800375c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <HAL_RCC_OscConfig+0x500>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	429a      	cmp	r2, r3
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d001      	beq.n	8003786 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000

08003794 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0d0      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d910      	bls.n	80037d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b67      	ldr	r3, [pc, #412]	@ (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 0207 	bic.w	r2, r3, #7
 80037be:	4965      	ldr	r1, [pc, #404]	@ (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b63      	ldr	r3, [pc, #396]	@ (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0b8      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f0:	4b59      	ldr	r3, [pc, #356]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a58      	ldr	r2, [pc, #352]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003808:	4b53      	ldr	r3, [pc, #332]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a52      	ldr	r2, [pc, #328]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003812:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b50      	ldr	r3, [pc, #320]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	494d      	ldr	r1, [pc, #308]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d040      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b47      	ldr	r3, [pc, #284]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d115      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e07f      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	4b41      	ldr	r3, [pc, #260]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e073      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003862:	4b3d      	ldr	r3, [pc, #244]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e06b      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003872:	4b39      	ldr	r3, [pc, #228]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f023 0203 	bic.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4936      	ldr	r1, [pc, #216]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003884:	f7fe faa4 	bl	8001dd0 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388c:	f7fe faa0 	bl	8001dd0 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e053      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 020c 	and.w	r2, r3, #12
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1eb      	bne.n	800388c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038b4:	4b27      	ldr	r3, [pc, #156]	@ (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d210      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b24      	ldr	r3, [pc, #144]	@ (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 0207 	bic.w	r2, r3, #7
 80038ca:	4922      	ldr	r1, [pc, #136]	@ (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e032      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f0:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4916      	ldr	r1, [pc, #88]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800390e:	4b12      	ldr	r3, [pc, #72]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	490e      	ldr	r1, [pc, #56]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003922:	f000 f821 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003926:	4602      	mov	r2, r0
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	490a      	ldr	r1, [pc, #40]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	5ccb      	ldrb	r3, [r1, r3]
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
 800393a:	4a09      	ldr	r2, [pc, #36]	@ (8003960 <HAL_RCC_ClockConfig+0x1cc>)
 800393c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800393e:	4b09      	ldr	r3, [pc, #36]	@ (8003964 <HAL_RCC_ClockConfig+0x1d0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe fa02 	bl	8001d4c <HAL_InitTick>

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40022000 	.word	0x40022000
 8003958:	40021000 	.word	0x40021000
 800395c:	0800a2b8 	.word	0x0800a2b8
 8003960:	20000000 	.word	0x20000000
 8003964:	20000004 	.word	0x20000004

08003968 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003982:	4b1e      	ldr	r3, [pc, #120]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x94>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b04      	cmp	r3, #4
 8003990:	d002      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x30>
 8003992:	2b08      	cmp	r3, #8
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0x36>
 8003996:	e027      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003998:	4b19      	ldr	r3, [pc, #100]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x98>)
 800399a:	613b      	str	r3, [r7, #16]
      break;
 800399c:	e027      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	0c9b      	lsrs	r3, r3, #18
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	4a17      	ldr	r2, [pc, #92]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039a8:	5cd3      	ldrb	r3, [r2, r3]
 80039aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d010      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039b6:	4b11      	ldr	r3, [pc, #68]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x94>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	0c5b      	lsrs	r3, r3, #17
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	4a11      	ldr	r2, [pc, #68]	@ (8003a08 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039c2:	5cd3      	ldrb	r3, [r2, r3]
 80039c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ca:	fb03 f202 	mul.w	r2, r3, r2
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	e004      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a0c      	ldr	r2, [pc, #48]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0xa4>)
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	613b      	str	r3, [r7, #16]
      break;
 80039e6:	e002      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ea:	613b      	str	r3, [r7, #16]
      break;
 80039ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ee:	693b      	ldr	r3, [r7, #16]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	007a1200 	.word	0x007a1200
 8003a04:	0800a2d0 	.word	0x0800a2d0
 8003a08:	0800a2e0 	.word	0x0800a2e0
 8003a0c:	003d0900 	.word	0x003d0900

08003a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b02      	ldr	r3, [pc, #8]	@ (8003a20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	20000000 	.word	0x20000000

08003a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a28:	f7ff fff2 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4903      	ldr	r1, [pc, #12]	@ (8003a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	0800a2c8 	.word	0x0800a2c8

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a50:	f7ff ffde 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	0adb      	lsrs	r3, r3, #11
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4903      	ldr	r1, [pc, #12]	@ (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	0800a2c8 	.word	0x0800a2c8

08003a74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa8 <RCC_Delay+0x34>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0a      	ldr	r2, [pc, #40]	@ (8003aac <RCC_Delay+0x38>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	0a5b      	lsrs	r3, r3, #9
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a90:	bf00      	nop
  }
  while (Delay --);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	60fa      	str	r2, [r7, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f9      	bne.n	8003a90 <RCC_Delay+0x1c>
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	20000000 	.word	0x20000000
 8003aac:	10624dd3 	.word	0x10624dd3

08003ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d07d      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003acc:	2300      	movs	r3, #0
 8003ace:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad0:	4b4f      	ldr	r3, [pc, #316]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10d      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	4b4c      	ldr	r3, [pc, #304]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	4a4b      	ldr	r2, [pc, #300]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	61d3      	str	r3, [r2, #28]
 8003ae8:	4b49      	ldr	r3, [pc, #292]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af4:	2301      	movs	r3, #1
 8003af6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	4b46      	ldr	r3, [pc, #280]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d118      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b04:	4b43      	ldr	r3, [pc, #268]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a42      	ldr	r2, [pc, #264]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b10:	f7fe f95e 	bl	8001dd0 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	e008      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b18:	f7fe f95a 	bl	8001dd0 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	@ 0x64
 8003b24:	d901      	bls.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e06d      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b36:	4b36      	ldr	r3, [pc, #216]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d02e      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d027      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b54:	4b2e      	ldr	r3, [pc, #184]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b64:	4b2c      	ldr	r3, [pc, #176]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b6a:	4a29      	ldr	r2, [pc, #164]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d014      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7a:	f7fe f929 	bl	8001dd0 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fe f925 	bl	8001dd0 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e036      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	4b1d      	ldr	r3, [pc, #116]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ee      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4917      	ldr	r1, [pc, #92]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbc:	4b14      	ldr	r3, [pc, #80]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	4a13      	ldr	r2, [pc, #76]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	490b      	ldr	r1, [pc, #44]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bf2:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4904      	ldr	r1, [pc, #16]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40007000 	.word	0x40007000
 8003c18:	42420440 	.word	0x42420440

08003c1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e076      	b.n	8003d1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c3e:	d009      	beq.n	8003c54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	61da      	str	r2, [r3, #28]
 8003c46:	e005      	b.n	8003c54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd fe86 	bl	8001980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd8:	ea42 0103 	orr.w	r1, r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	0c1a      	lsrs	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f002 0204 	and.w	r2, r2, #4
 8003cfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_SPI_Transmit+0x22>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e12d      	b.n	8003fa2 <HAL_SPI_Transmit+0x27e>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d4e:	f7fe f83f 	bl	8001dd0 <HAL_GetTick>
 8003d52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d002      	beq.n	8003d6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
 8003d66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d68:	e116      	b.n	8003f98 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_SPI_Transmit+0x52>
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d7a:	e10d      	b.n	8003f98 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2203      	movs	r2, #3
 8003d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	88fa      	ldrh	r2, [r7, #6]
 8003d9a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc2:	d10f      	bne.n	8003de4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003de2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dee:	2b40      	cmp	r3, #64	@ 0x40
 8003df0:	d007      	beq.n	8003e02 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e0a:	d14f      	bne.n	8003eac <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_SPI_Transmit+0xf6>
 8003e14:	8afb      	ldrh	r3, [r7, #22]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d142      	bne.n	8003ea0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	881a      	ldrh	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	1c9a      	adds	r2, r3, #2
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e3e:	e02f      	b.n	8003ea0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d112      	bne.n	8003e74 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	881a      	ldrh	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	1c9a      	adds	r2, r3, #2
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e72:	e015      	b.n	8003ea0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e74:	f7fd ffac 	bl	8001dd0 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d803      	bhi.n	8003e8c <HAL_SPI_Transmit+0x168>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8a:	d102      	bne.n	8003e92 <HAL_SPI_Transmit+0x16e>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003e9e:	e07b      	b.n	8003f98 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ca      	bne.n	8003e40 <HAL_SPI_Transmit+0x11c>
 8003eaa:	e050      	b.n	8003f4e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_SPI_Transmit+0x196>
 8003eb4:	8afb      	ldrh	r3, [r7, #22]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d144      	bne.n	8003f44 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ee0:	e030      	b.n	8003f44 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d113      	bne.n	8003f18 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	330c      	adds	r3, #12
 8003efa:	7812      	ldrb	r2, [r2, #0]
 8003efc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f16:	e015      	b.n	8003f44 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f18:	f7fd ff5a 	bl	8001dd0 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d803      	bhi.n	8003f30 <HAL_SPI_Transmit+0x20c>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d102      	bne.n	8003f36 <HAL_SPI_Transmit+0x212>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003f42:	e029      	b.n	8003f98 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1c9      	bne.n	8003ee2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	6839      	ldr	r1, [r7, #0]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fbcc 	bl	80046f0 <SPI_EndRxTxTransaction>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	77fb      	strb	r3, [r7, #31]
 8003f8e:	e003      	b.n	8003f98 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003fa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3720      	adds	r7, #32
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b088      	sub	sp, #32
 8003fae:	af02      	add	r7, sp, #8
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d002      	beq.n	8003fd0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fce:	e0fb      	b.n	80041c8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fd8:	d112      	bne.n	8004000 <HAL_SPI_Receive+0x56>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10e      	bne.n	8004000 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f8ef 	bl	80041da <HAL_SPI_TransmitReceive>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	e0e8      	b.n	80041d2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_SPI_Receive+0x64>
 800400a:	2302      	movs	r3, #2
 800400c:	e0e1      	b.n	80041d2 <HAL_SPI_Receive+0x228>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004016:	f7fd fedb 	bl	8001dd0 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_SPI_Receive+0x7e>
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800402c:	e0cc      	b.n	80041c8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2204      	movs	r2, #4
 8004032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	88fa      	ldrh	r2, [r7, #6]
 8004046:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004074:	d10f      	bne.n	8004096 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004084:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004094:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a0:	2b40      	cmp	r3, #64	@ 0x40
 80040a2:	d007      	beq.n	80040b4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d16a      	bne.n	8004192 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80040bc:	e032      	b.n	8004124 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d115      	bne.n	80040f8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f103 020c 	add.w	r2, r3, #12
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	7812      	ldrb	r2, [r2, #0]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040f6:	e015      	b.n	8004124 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040f8:	f7fd fe6a 	bl	8001dd0 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d803      	bhi.n	8004110 <HAL_SPI_Receive+0x166>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d102      	bne.n	8004116 <HAL_SPI_Receive+0x16c>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004122:	e051      	b.n	80041c8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1c7      	bne.n	80040be <HAL_SPI_Receive+0x114>
 800412e:	e035      	b.n	800419c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b01      	cmp	r3, #1
 800413c:	d113      	bne.n	8004166 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004148:	b292      	uxth	r2, r2
 800414a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004150:	1c9a      	adds	r2, r3, #2
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004164:	e015      	b.n	8004192 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004166:	f7fd fe33 	bl	8001dd0 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d803      	bhi.n	800417e <HAL_SPI_Receive+0x1d4>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d102      	bne.n	8004184 <HAL_SPI_Receive+0x1da>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004190:	e01a      	b.n	80041c8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1c9      	bne.n	8004130 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	6839      	ldr	r1, [r7, #0]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fa53 	bl	800464c <SPI_EndRxTransaction>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
 80041be:	e003      	b.n	80041c8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b08c      	sub	sp, #48	@ 0x30
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041e8:	2301      	movs	r3, #1
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_SPI_TransmitReceive+0x26>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e198      	b.n	8004532 <HAL_SPI_TransmitReceive+0x358>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004208:	f7fd fde2 	bl	8001dd0 <HAL_GetTick>
 800420c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004214:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004222:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004226:	2b01      	cmp	r3, #1
 8004228:	d00f      	beq.n	800424a <HAL_SPI_TransmitReceive+0x70>
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004230:	d107      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d103      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x68>
 800423a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800423e:	2b04      	cmp	r3, #4
 8004240:	d003      	beq.n	800424a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004242:	2302      	movs	r3, #2
 8004244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004248:	e16d      	b.n	8004526 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_SPI_TransmitReceive+0x82>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_SPI_TransmitReceive+0x82>
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d103      	bne.n	8004264 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004262:	e160      	b.n	8004526 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b04      	cmp	r3, #4
 800426e:	d003      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2205      	movs	r2, #5
 8004274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	887a      	ldrh	r2, [r7, #2]
 8004288:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	887a      	ldrh	r2, [r7, #2]
 800428e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	887a      	ldrh	r2, [r7, #2]
 800429a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	887a      	ldrh	r2, [r7, #2]
 80042a0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d007      	beq.n	80042cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042d4:	d17c      	bne.n	80043d0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_SPI_TransmitReceive+0x10a>
 80042de:	8b7b      	ldrh	r3, [r7, #26]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d16a      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e8:	881a      	ldrh	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f4:	1c9a      	adds	r2, r3, #2
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004308:	e057      	b.n	80043ba <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b02      	cmp	r3, #2
 8004316:	d11b      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x176>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d016      	beq.n	8004350 <HAL_SPI_TransmitReceive+0x176>
 8004322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d113      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	881a      	ldrh	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004338:	1c9a      	adds	r2, r3, #2
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b01      	cmp	r3, #1
 800435c:	d119      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x1b8>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d014      	beq.n	8004392 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004372:	b292      	uxth	r2, r2
 8004374:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437a:	1c9a      	adds	r2, r3, #2
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800438e:	2301      	movs	r3, #1
 8004390:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004392:	f7fd fd1d 	bl	8001dd0 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800439e:	429a      	cmp	r2, r3
 80043a0:	d80b      	bhi.n	80043ba <HAL_SPI_TransmitReceive+0x1e0>
 80043a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d007      	beq.n	80043ba <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80043b8:	e0b5      	b.n	8004526 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1a2      	bne.n	800430a <HAL_SPI_TransmitReceive+0x130>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d19d      	bne.n	800430a <HAL_SPI_TransmitReceive+0x130>
 80043ce:	e080      	b.n	80044d2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <HAL_SPI_TransmitReceive+0x204>
 80043d8:	8b7b      	ldrh	r3, [r7, #26]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d16f      	bne.n	80044be <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	330c      	adds	r3, #12
 80043e8:	7812      	ldrb	r2, [r2, #0]
 80043ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004404:	e05b      	b.n	80044be <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b02      	cmp	r3, #2
 8004412:	d11c      	bne.n	800444e <HAL_SPI_TransmitReceive+0x274>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d017      	beq.n	800444e <HAL_SPI_TransmitReceive+0x274>
 800441e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d114      	bne.n	800444e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d119      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x2b6>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d014      	beq.n	8004490 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800448c:	2301      	movs	r3, #1
 800448e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004490:	f7fd fc9e 	bl	8001dd0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800449c:	429a      	cmp	r2, r3
 800449e:	d803      	bhi.n	80044a8 <HAL_SPI_TransmitReceive+0x2ce>
 80044a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d102      	bne.n	80044ae <HAL_SPI_TransmitReceive+0x2d4>
 80044a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d107      	bne.n	80044be <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80044bc:	e033      	b.n	8004526 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d19e      	bne.n	8004406 <HAL_SPI_TransmitReceive+0x22c>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d199      	bne.n	8004406 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f90a 	bl	80046f0 <SPI_EndRxTxTransaction>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d006      	beq.n	80044f0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80044ee:	e01a      	b.n	8004526 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800451c:	e003      	b.n	8004526 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800452e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004532:	4618      	mov	r0, r3
 8004534:	3730      	adds	r7, #48	@ 0x30
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800454c:	f7fd fc40 	bl	8001dd0 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	4413      	add	r3, r2
 800455a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800455c:	f7fd fc38 	bl	8001dd0 <HAL_GetTick>
 8004560:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004562:	4b39      	ldr	r3, [pc, #228]	@ (8004648 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	015b      	lsls	r3, r3, #5
 8004568:	0d1b      	lsrs	r3, r3, #20
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	fb02 f303 	mul.w	r3, r2, r3
 8004570:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004572:	e054      	b.n	800461e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d050      	beq.n	800461e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800457c:	f7fd fc28 	bl	8001dd0 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	429a      	cmp	r2, r3
 800458a:	d902      	bls.n	8004592 <SPI_WaitFlagStateUntilTimeout+0x56>
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d13d      	bne.n	800460e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045aa:	d111      	bne.n	80045d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b4:	d004      	beq.n	80045c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045be:	d107      	bne.n	80045d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045d8:	d10f      	bne.n	80045fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e017      	b.n	800463e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	3b01      	subs	r3, #1
 800461c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4013      	ands	r3, r2
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	bf0c      	ite	eq
 800462e:	2301      	moveq	r3, #1
 8004630:	2300      	movne	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	429a      	cmp	r2, r3
 800463a:	d19b      	bne.n	8004574 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000000 	.word	0x20000000

0800464c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004660:	d111      	bne.n	8004686 <SPI_EndRxTransaction+0x3a>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800466a:	d004      	beq.n	8004676 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004674:	d107      	bne.n	8004686 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004684:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800468e:	d117      	bne.n	80046c0 <SPI_EndRxTransaction+0x74>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004698:	d112      	bne.n	80046c0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2101      	movs	r1, #1
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff ff49 	bl	800453c <SPI_WaitFlagStateUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01a      	beq.n	80046e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e013      	b.n	80046e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2200      	movs	r2, #0
 80046c8:	2180      	movs	r1, #128	@ 0x80
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff ff36 	bl	800453c <SPI_WaitFlagStateUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046da:	f043 0220 	orr.w	r2, r3, #32
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e000      	b.n	80046e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	2180      	movs	r1, #128	@ 0x80
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff ff18 	bl	800453c <SPI_WaitFlagStateUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004716:	f043 0220 	orr.w	r2, r3, #32
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e000      	b.n	8004724 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e042      	b.n	80047c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fd f95e 	bl	8001a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2224      	movs	r2, #36	@ 0x24
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800476e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fdfb 	bl	800536c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	@ 0x28
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d16d      	bne.n	80048c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_UART_Transmit+0x2c>
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e066      	b.n	80048ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2221      	movs	r2, #33	@ 0x21
 8004806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800480a:	f7fd fae1 	bl	8001dd0 <HAL_GetTick>
 800480e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	88fa      	ldrh	r2, [r7, #6]
 8004814:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	88fa      	ldrh	r2, [r7, #6]
 800481a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004824:	d108      	bne.n	8004838 <HAL_UART_Transmit+0x6c>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d104      	bne.n	8004838 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e003      	b.n	8004840 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004840:	e02a      	b.n	8004898 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2200      	movs	r2, #0
 800484a:	2180      	movs	r1, #128	@ 0x80
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 fb4a 	bl	8004ee6 <UART_WaitOnFlagUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e036      	b.n	80048ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004870:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	3302      	adds	r3, #2
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	e007      	b.n	800488a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	781a      	ldrb	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	3301      	adds	r3, #1
 8004888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1cf      	bne.n	8004842 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2200      	movs	r2, #0
 80048aa:	2140      	movs	r1, #64	@ 0x40
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 fb1a 	bl	8004ee6 <UART_WaitOnFlagUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e006      	b.n	80048ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b08c      	sub	sp, #48	@ 0x30
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	4613      	mov	r3, r2
 80048de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d14a      	bne.n	8004982 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80048f2:	88fb      	ldrh	r3, [r7, #6]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e043      	b.n	8004984 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	461a      	mov	r2, r3
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 fb57 	bl	8004fc2 <UART_Start_Receive_IT>
 8004914:	4603      	mov	r3, r0
 8004916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800491a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800491e:	2b00      	cmp	r3, #0
 8004920:	d12c      	bne.n	800497c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004926:	2b01      	cmp	r3, #1
 8004928:	d125      	bne.n	8004976 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800492a:	2300      	movs	r3, #0
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	617b      	str	r3, [r7, #20]
   return(result);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f043 0310 	orr.w	r3, r3, #16
 8004956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	330c      	adds	r3, #12
 800495e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004960:	627a      	str	r2, [r7, #36]	@ 0x24
 8004962:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	6a39      	ldr	r1, [r7, #32]
 8004966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	61fb      	str	r3, [r7, #28]
   return(result);
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e5      	bne.n	8004940 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004974:	e002      	b.n	800497c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800497c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004980:	e000      	b.n	8004984 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3730      	adds	r7, #48	@ 0x30
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b0ba      	sub	sp, #232	@ 0xe8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80049ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10f      	bne.n	80049f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <HAL_UART_IRQHandler+0x66>
 80049de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fbff 	bl	80051ee <UART_Receive_IT>
      return;
 80049f0:	e25b      	b.n	8004eaa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80de 	beq.w	8004bb8 <HAL_UART_IRQHandler+0x22c>
 80049fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80d1 	beq.w	8004bb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00b      	beq.n	8004a3a <HAL_UART_IRQHandler+0xae>
 8004a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a32:	f043 0201 	orr.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <HAL_UART_IRQHandler+0xd2>
 8004a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a56:	f043 0202 	orr.w	r2, r3, #2
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <HAL_UART_IRQHandler+0xf6>
 8004a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7a:	f043 0204 	orr.w	r2, r3, #4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d011      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x126>
 8004a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d105      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d005      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	f043 0208 	orr.w	r2, r3, #8
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 81f2 	beq.w	8004ea0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_UART_IRQHandler+0x14e>
 8004ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fb8a 	bl	80051ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <HAL_UART_IRQHandler+0x17a>
 8004afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d04f      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fa94 	bl	8005034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d041      	beq.n	8004b9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3314      	adds	r3, #20
 8004b20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3314      	adds	r3, #20
 8004b42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1d9      	bne.n	8004b1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d013      	beq.n	8004b96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b72:	4a7e      	ldr	r2, [pc, #504]	@ (8004d6c <HAL_UART_IRQHandler+0x3e0>)
 8004b74:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fd fcb0 	bl	80024e0 <HAL_DMA_Abort_IT>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d016      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b90:	4610      	mov	r0, r2
 8004b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b94:	e00e      	b.n	8004bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f99c 	bl	8004ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9c:	e00a      	b.n	8004bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f998 	bl	8004ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba4:	e006      	b.n	8004bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f994 	bl	8004ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004bb2:	e175      	b.n	8004ea0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb4:	bf00      	nop
    return;
 8004bb6:	e173      	b.n	8004ea0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	f040 814f 	bne.w	8004e60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 8148 	beq.w	8004e60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8141 	beq.w	8004e60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bde:	2300      	movs	r3, #0
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 80b6 	beq.w	8004d70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8145 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c22:	429a      	cmp	r2, r3
 8004c24:	f080 813e 	bcs.w	8004ea4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	f000 8088 	beq.w	8004d4c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	330c      	adds	r3, #12
 8004c42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c68:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c74:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1d9      	bne.n	8004c3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3314      	adds	r3, #20
 8004c8e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3314      	adds	r3, #20
 8004ca8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cac:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004cb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004cb8:	e841 2300 	strex	r3, r2, [r1]
 8004cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e1      	bne.n	8004c88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3314      	adds	r3, #20
 8004ce4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ce8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e3      	bne.n	8004cc4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	330c      	adds	r3, #12
 8004d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d1c:	f023 0310 	bic.w	r3, r3, #16
 8004d20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d2e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d30:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e3      	bne.n	8004d0a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fd fb8f 	bl	800246a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fc fcd2 	bl	800170c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d68:	e09c      	b.n	8004ea4 <HAL_UART_IRQHandler+0x518>
 8004d6a:	bf00      	nop
 8004d6c:	080050f9 	.word	0x080050f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 808e 	beq.w	8004ea8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 8089 	beq.w	8004ea8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	330c      	adds	r3, #12
 8004db6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004dba:	647a      	str	r2, [r7, #68]	@ 0x44
 8004dbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e3      	bne.n	8004d96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3314      	adds	r3, #20
 8004dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	e853 3f00 	ldrex	r3, [r3]
 8004ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3314      	adds	r3, #20
 8004dee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004df2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e3      	bne.n	8004dce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0310 	bic.w	r3, r3, #16
 8004e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	330c      	adds	r3, #12
 8004e34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e38:	61fa      	str	r2, [r7, #28]
 8004e3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	69b9      	ldr	r1, [r7, #24]
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	617b      	str	r3, [r7, #20]
   return(result);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e3      	bne.n	8004e14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fc fc57 	bl	800170c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e5e:	e023      	b.n	8004ea8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_UART_IRQHandler+0x4f4>
 8004e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f951 	bl	8005120 <UART_Transmit_IT>
    return;
 8004e7e:	e014      	b.n	8004eaa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00e      	beq.n	8004eaa <HAL_UART_IRQHandler+0x51e>
 8004e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f990 	bl	80051be <UART_EndTransmit_IT>
    return;
 8004e9e:	e004      	b.n	8004eaa <HAL_UART_IRQHandler+0x51e>
    return;
 8004ea0:	bf00      	nop
 8004ea2:	e002      	b.n	8004eaa <HAL_UART_IRQHandler+0x51e>
      return;
 8004ea4:	bf00      	nop
 8004ea6:	e000      	b.n	8004eaa <HAL_UART_IRQHandler+0x51e>
      return;
 8004ea8:	bf00      	nop
  }
}
 8004eaa:	37e8      	adds	r7, #232	@ 0xe8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr

08004ee6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b090      	sub	sp, #64	@ 0x40
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef6:	e050      	b.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d04c      	beq.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f06:	f7fc ff63 	bl	8001dd0 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d241      	bcs.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f36:	637a      	str	r2, [r7, #52]	@ 0x34
 8004f38:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e5      	bne.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3314      	adds	r3, #20
 8004f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	613b      	str	r3, [r7, #16]
   return(result);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3314      	adds	r3, #20
 8004f68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f6a:	623a      	str	r2, [r7, #32]
 8004f6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	69f9      	ldr	r1, [r7, #28]
 8004f70:	6a3a      	ldr	r2, [r7, #32]
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e5      	bne.n	8004f4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e00f      	b.n	8004fba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d09f      	beq.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3740      	adds	r7, #64	@ 0x40
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	88fa      	ldrh	r2, [r7, #6]
 8004fda:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	88fa      	ldrh	r2, [r7, #6]
 8004fe0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2222      	movs	r2, #34	@ 0x22
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005006:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0220 	orr.w	r2, r2, #32
 8005026:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005034:	b480      	push	{r7}
 8005036:	b095      	sub	sp, #84	@ 0x54
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800505c:	643a      	str	r2, [r7, #64]	@ 0x40
 800505e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005062:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e5      	bne.n	800503c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3314      	adds	r3, #20
 8005076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3314      	adds	r3, #20
 800508e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005090:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d119      	bne.n	80050e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	330c      	adds	r3, #12
 80050b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f023 0310 	bic.w	r3, r3, #16
 80050c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	330c      	adds	r3, #12
 80050ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050cc:	61ba      	str	r2, [r7, #24]
 80050ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6979      	ldr	r1, [r7, #20]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	613b      	str	r3, [r7, #16]
   return(result);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e5      	bne.n	80050ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050ee:	bf00      	nop
 80050f0:	3754      	adds	r7, #84	@ 0x54
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr

080050f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7ff fede 	bl	8004ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b21      	cmp	r3, #33	@ 0x21
 8005132:	d13e      	bne.n	80051b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800513c:	d114      	bne.n	8005168 <UART_Transmit_IT+0x48>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d110      	bne.n	8005168 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800515a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	1c9a      	adds	r2, r3, #2
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	621a      	str	r2, [r3, #32]
 8005166:	e008      	b.n	800517a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	1c59      	adds	r1, r3, #1
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6211      	str	r1, [r2, #32]
 8005172:	781a      	ldrb	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29b      	uxth	r3, r3
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	4619      	mov	r1, r3
 8005188:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10f      	bne.n	80051ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800519c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e000      	b.n	80051b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051b2:	2302      	movs	r3, #2
  }
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr

080051be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff fe66 	bl	8004eb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b08c      	sub	sp, #48	@ 0x30
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b22      	cmp	r3, #34	@ 0x22
 8005200:	f040 80ae 	bne.w	8005360 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800520c:	d117      	bne.n	800523e <UART_Receive_IT+0x50>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d113      	bne.n	800523e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	b29b      	uxth	r3, r3
 8005228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522c:	b29a      	uxth	r2, r3
 800522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005230:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	1c9a      	adds	r2, r3, #2
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	629a      	str	r2, [r3, #40]	@ 0x28
 800523c:	e026      	b.n	800528c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005242:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005244:	2300      	movs	r3, #0
 8005246:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005250:	d007      	beq.n	8005262 <UART_Receive_IT+0x74>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10a      	bne.n	8005270 <UART_Receive_IT+0x82>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	b2da      	uxtb	r2, r3
 800526a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e008      	b.n	8005282 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800527c:	b2da      	uxtb	r2, r3
 800527e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005280:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29b      	uxth	r3, r3
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4619      	mov	r1, r3
 800529a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800529c:	2b00      	cmp	r3, #0
 800529e:	d15d      	bne.n	800535c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0220 	bic.w	r2, r2, #32
 80052ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0201 	bic.w	r2, r2, #1
 80052ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d135      	bne.n	8005352 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	613b      	str	r3, [r7, #16]
   return(result);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f023 0310 	bic.w	r3, r3, #16
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	330c      	adds	r3, #12
 800530a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530c:	623a      	str	r2, [r7, #32]
 800530e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	69f9      	ldr	r1, [r7, #28]
 8005312:	6a3a      	ldr	r2, [r7, #32]
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	61bb      	str	r3, [r7, #24]
   return(result);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e5      	bne.n	80052ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	2b10      	cmp	r3, #16
 800532c:	d10a      	bne.n	8005344 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005348:	4619      	mov	r1, r3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fc f9de 	bl	800170c <HAL_UARTEx_RxEventCallback>
 8005350:	e002      	b.n	8005358 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff fdb5 	bl	8004ec2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	e002      	b.n	8005362 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	e000      	b.n	8005362 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005360:	2302      	movs	r3, #2
  }
}
 8005362:	4618      	mov	r0, r3
 8005364:	3730      	adds	r7, #48	@ 0x30
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80053a6:	f023 030c 	bic.w	r3, r3, #12
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	430b      	orrs	r3, r1
 80053b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005480 <UART_SetConfig+0x114>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d103      	bne.n	80053dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053d4:	f7fe fb3a 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	e002      	b.n	80053e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053dc:	f7fe fb22 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 80053e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	009a      	lsls	r2, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f8:	4a22      	ldr	r2, [pc, #136]	@ (8005484 <UART_SetConfig+0x118>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	0119      	lsls	r1, r3, #4
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009a      	lsls	r2, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	fbb2 f2f3 	udiv	r2, r2, r3
 8005418:	4b1a      	ldr	r3, [pc, #104]	@ (8005484 <UART_SetConfig+0x118>)
 800541a:	fba3 0302 	umull	r0, r3, r3, r2
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	2064      	movs	r0, #100	@ 0x64
 8005422:	fb00 f303 	mul.w	r3, r0, r3
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	3332      	adds	r3, #50	@ 0x32
 800542c:	4a15      	ldr	r2, [pc, #84]	@ (8005484 <UART_SetConfig+0x118>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005438:	4419      	add	r1, r3
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	009a      	lsls	r2, r3, #2
 8005444:	441a      	add	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005450:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <UART_SetConfig+0x118>)
 8005452:	fba3 0302 	umull	r0, r3, r3, r2
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	2064      	movs	r0, #100	@ 0x64
 800545a:	fb00 f303 	mul.w	r3, r0, r3
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	3332      	adds	r3, #50	@ 0x32
 8005464:	4a07      	ldr	r2, [pc, #28]	@ (8005484 <UART_SetConfig+0x118>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	f003 020f 	and.w	r2, r3, #15
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	440a      	add	r2, r1
 8005476:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005478:	bf00      	nop
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40013800 	.word	0x40013800
 8005484:	51eb851f 	.word	0x51eb851f

08005488 <AWG_Load_Waveform>:
#include "math.h"

#define MaxDepth 2048 // max AWG samples

void AWG_Load_Waveform(AWG_setup_struct AWG1)
{
 8005488:	b084      	sub	sp, #16
 800548a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8005496:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOLA_enable_features(AWG_EN, 0); // disable AWG
 800549a:	2100      	movs	r1, #0
 800549c:	2002      	movs	r0, #2
 800549e:	f000 fb63 	bl	8005b68 <LOLA_enable_features>

	uint8_t byte[4];
	int16_t data;

	uint16_t depth = trimInt((int)round(DACmaxFreq/AWG1.Freq), 1, (MaxDepth-1));
 80054a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054a6:	a1b0      	add	r1, pc, #704	@ (adr r1, 8005768 <AWG_Load_Waveform+0x2e0>)
 80054a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054ac:	f7fb f93e 	bl	800072c <__aeabi_ddiv>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4610      	mov	r0, r2
 80054b6:	4619      	mov	r1, r3
 80054b8:	f004 f8e4 	bl	8009684 <round>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4610      	mov	r0, r2
 80054c2:	4619      	mov	r1, r3
 80054c4:	f7fb fab8 	bl	8000a38 <__aeabi_d2iz>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80054ce:	2101      	movs	r1, #1
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 f94f 	bl	8006774 <trimInt>
 80054d6:	4603      	mov	r3, r0
 80054d8:	827b      	strh	r3, [r7, #18]


	uint16_t DepthPos = trimInt((int)round(depth*AWG1.DutyCycle/100), 1, (MaxDepth-1));
 80054da:	8a7b      	ldrh	r3, [r7, #18]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fb fbfd 	bl	8000cdc <__aeabi_i2f>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f7fb fc4b 	bl	8000d84 <__aeabi_fmul>
 80054ee:	4603      	mov	r3, r0
 80054f0:	49a1      	ldr	r1, [pc, #644]	@ (8005778 <AWG_Load_Waveform+0x2f0>)
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fb fcfa 	bl	8000eec <__aeabi_fdiv>
 80054f8:	4603      	mov	r3, r0
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fa ff94 	bl	8000428 <__aeabi_f2d>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4610      	mov	r0, r2
 8005506:	4619      	mov	r1, r3
 8005508:	f004 f8bc 	bl	8009684 <round>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4610      	mov	r0, r2
 8005512:	4619      	mov	r1, r3
 8005514:	f7fb fa90 	bl	8000a38 <__aeabi_d2iz>
 8005518:	4603      	mov	r3, r0
 800551a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800551e:	2101      	movs	r1, #1
 8005520:	4618      	mov	r0, r3
 8005522:	f001 f927 	bl	8006774 <trimInt>
 8005526:	4603      	mov	r3, r0
 8005528:	823b      	strh	r3, [r7, #16]
	uint16_t DepthNeg = trimInt((int)(depth-DepthPos), 1, (MaxDepth-1));
 800552a:	8a7a      	ldrh	r2, [r7, #18]
 800552c:	8a3b      	ldrh	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005534:	2101      	movs	r1, #1
 8005536:	4618      	mov	r0, r3
 8005538:	f001 f91c 	bl	8006774 <trimInt>
 800553c:	4603      	mov	r3, r0
 800553e:	81fb      	strh	r3, [r7, #14]

	// setting sample count
	byte[0] = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	703b      	strb	r3, [r7, #0]
	byte[1] = (uint8_t)((depth>>8)&0x00ff);
 8005544:	8a7b      	ldrh	r3, [r7, #18]
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	b29b      	uxth	r3, r3
 800554a:	b2db      	uxtb	r3, r3
 800554c:	707b      	strb	r3, [r7, #1]
	byte[2] = (uint8_t)(depth&0x00ff);
 800554e:	8a7b      	ldrh	r3, [r7, #18]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	70bb      	strb	r3, [r7, #2]
	byte[3] = (uint8_t)AWG_MAXADRESS;
 8005554:	2306      	movs	r3, #6
 8005556:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005558:	4639      	mov	r1, r7
 800555a:	2364      	movs	r3, #100	@ 0x64
 800555c:	2204      	movs	r2, #4
 800555e:	4887      	ldr	r0, [pc, #540]	@ (800577c <AWG_Load_Waveform+0x2f4>)
 8005560:	f7fe fbe0 	bl	8003d24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005564:	2200      	movs	r2, #0
 8005566:	2110      	movs	r1, #16
 8005568:	4885      	ldr	r0, [pc, #532]	@ (8005780 <AWG_Load_Waveform+0x2f8>)
 800556a:	f7fd f9cc 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 800556e:	2201      	movs	r2, #1
 8005570:	2110      	movs	r1, #16
 8005572:	4883      	ldr	r0, [pc, #524]	@ (8005780 <AWG_Load_Waveform+0x2f8>)
 8005574:	f7fd f9c7 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005578:	2200      	movs	r2, #0
 800557a:	2110      	movs	r1, #16
 800557c:	4880      	ldr	r0, [pc, #512]	@ (8005780 <AWG_Load_Waveform+0x2f8>)
 800557e:	f7fd f9c2 	bl	8002906 <HAL_GPIO_WritePin>

	//Setting up clock
	uint32_t D = (uint32_t)round(MCLKfreq/(depth*AWG1.Freq));
 8005582:	8a7b      	ldrh	r3, [r7, #18]
 8005584:	4618      	mov	r0, r3
 8005586:	f7fa ff3d 	bl	8000404 <__aeabi_i2d>
 800558a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800558e:	f7fa ffa3 	bl	80004d8 <__aeabi_dmul>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	a176      	add	r1, pc, #472	@ (adr r1, 8005770 <AWG_Load_Waveform+0x2e8>)
 8005598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800559c:	f7fb f8c6 	bl	800072c <__aeabi_ddiv>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4610      	mov	r0, r2
 80055a6:	4619      	mov	r1, r3
 80055a8:	f004 f86c 	bl	8009684 <round>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4610      	mov	r0, r2
 80055b2:	4619      	mov	r1, r3
 80055b4:	f7fb fa68 	bl	8000a88 <__aeabi_d2uiz>
 80055b8:	4603      	mov	r3, r0
 80055ba:	60bb      	str	r3, [r7, #8]

	data = D;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	82fb      	strh	r3, [r7, #22]

	byte[0] = (uint8_t)((data>>16)&0x00ff);
 80055c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055c4:	141b      	asrs	r3, r3, #16
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	703b      	strb	r3, [r7, #0]
	byte[1] = (uint8_t)((data>>8)&0x00ff);
 80055ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055ce:	121b      	asrs	r3, r3, #8
 80055d0:	b21b      	sxth	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	707b      	strb	r3, [r7, #1]
	byte[2] = (uint8_t)(data&0x00ff);
 80055d6:	8afb      	ldrh	r3, [r7, #22]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	70bb      	strb	r3, [r7, #2]
	byte[3] = (uint8_t)AWG_D;
 80055dc:	2302      	movs	r3, #2
 80055de:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80055e0:	4639      	mov	r1, r7
 80055e2:	2364      	movs	r3, #100	@ 0x64
 80055e4:	2204      	movs	r2, #4
 80055e6:	4865      	ldr	r0, [pc, #404]	@ (800577c <AWG_Load_Waveform+0x2f4>)
 80055e8:	f7fe fb9c 	bl	8003d24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80055ec:	2201      	movs	r2, #1
 80055ee:	2110      	movs	r1, #16
 80055f0:	4863      	ldr	r0, [pc, #396]	@ (8005780 <AWG_Load_Waveform+0x2f8>)
 80055f2:	f7fd f988 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80055f6:	2200      	movs	r2, #0
 80055f8:	2110      	movs	r1, #16
 80055fa:	4861      	ldr	r0, [pc, #388]	@ (8005780 <AWG_Load_Waveform+0x2f8>)
 80055fc:	f7fd f983 	bl	8002906 <HAL_GPIO_WritePin>

	// loading waveform
	float relativeDACcode = 2047*AWG1.Upp/(2*MAX_AMPLITUDE); // multiply any number from -1 to 1 and you will get direct code for DAC
 8005600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005602:	4960      	ldr	r1, [pc, #384]	@ (8005784 <AWG_Load_Waveform+0x2fc>)
 8005604:	4618      	mov	r0, r3
 8005606:	f7fb fbbd 	bl	8000d84 <__aeabi_fmul>
 800560a:	4603      	mov	r3, r0
 800560c:	461c      	mov	r4, r3
 800560e:	4b5e      	ldr	r3, [pc, #376]	@ (8005788 <AWG_Load_Waveform+0x300>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4619      	mov	r1, r3
 8005614:	4618      	mov	r0, r3
 8005616:	f7fb faad 	bl	8000b74 <__addsf3>
 800561a:	4603      	mov	r3, r0
 800561c:	4619      	mov	r1, r3
 800561e:	4620      	mov	r0, r4
 8005620:	f7fb fc64 	bl	8000eec <__aeabi_fdiv>
 8005624:	4603      	mov	r3, r0
 8005626:	607b      	str	r3, [r7, #4]

	for(int16_t addr = 0; addr < depth; addr++)
 8005628:	2300      	movs	r3, #0
 800562a:	82bb      	strh	r3, [r7, #20]
 800562c:	e16b      	b.n	8005906 <AWG_Load_Waveform+0x47e>
	{

		switch(AWG1.waveform)
 800562e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005632:	2b03      	cmp	r3, #3
 8005634:	f200 8133 	bhi.w	800589e <AWG_Load_Waveform+0x416>
 8005638:	a201      	add	r2, pc, #4	@ (adr r2, 8005640 <AWG_Load_Waveform+0x1b8>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08005651 	.word	0x08005651
 8005644:	080056e5 	.word	0x080056e5
 8005648:	0800581b 	.word	0x0800581b
 800564c:	0800589f 	.word	0x0800589f
		{
			case Square: data = (int16_t)round((addr>=(depth*AWG1.DutyCycle/100))*relativeDACcode-(relativeDACcode/2.0)); break;
 8005650:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005654:	4618      	mov	r0, r3
 8005656:	f7fb fb41 	bl	8000cdc <__aeabi_i2f>
 800565a:	4604      	mov	r4, r0
 800565c:	8a7b      	ldrh	r3, [r7, #18]
 800565e:	4618      	mov	r0, r3
 8005660:	f7fb fb3c 	bl	8000cdc <__aeabi_i2f>
 8005664:	4602      	mov	r2, r0
 8005666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	f7fb fb8a 	bl	8000d84 <__aeabi_fmul>
 8005670:	4603      	mov	r3, r0
 8005672:	4941      	ldr	r1, [pc, #260]	@ (8005778 <AWG_Load_Waveform+0x2f0>)
 8005674:	4618      	mov	r0, r3
 8005676:	f7fb fc39 	bl	8000eec <__aeabi_fdiv>
 800567a:	4603      	mov	r3, r0
 800567c:	4619      	mov	r1, r3
 800567e:	4620      	mov	r0, r4
 8005680:	f7fb fd32 	bl	80010e8 <__aeabi_fcmpge>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <AWG_Load_Waveform+0x208>
 800568a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800568e:	e001      	b.n	8005694 <AWG_Load_Waveform+0x20c>
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	f7fb fb74 	bl	8000d84 <__aeabi_fmul>
 800569c:	4603      	mov	r3, r0
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fa fec2 	bl	8000428 <__aeabi_f2d>
 80056a4:	4604      	mov	r4, r0
 80056a6:	460d      	mov	r5, r1
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7fa febd 	bl	8000428 <__aeabi_f2d>
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80056b6:	f7fb f839 	bl	800072c <__aeabi_ddiv>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4620      	mov	r0, r4
 80056c0:	4629      	mov	r1, r5
 80056c2:	f7fa fd51 	bl	8000168 <__aeabi_dsub>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4610      	mov	r0, r2
 80056cc:	4619      	mov	r1, r3
 80056ce:	f003 ffd9 	bl	8009684 <round>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4610      	mov	r0, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	f7fb f9ad 	bl	8000a38 <__aeabi_d2iz>
 80056de:	4603      	mov	r3, r0
 80056e0:	82fb      	strh	r3, [r7, #22]
 80056e2:	e0dc      	b.n	800589e <AWG_Load_Waveform+0x416>

			case Triangle:	if(addr <= DepthPos) data = (int16_t)round(relativeDACcode*addr/(DepthPos*1.0)-(relativeDACcode/2.0)); // rising edge
 80056e4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80056e8:	8a3b      	ldrh	r3, [r7, #16]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	dc4e      	bgt.n	800578c <AWG_Load_Waveform+0x304>
 80056ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fb faf2 	bl	8000cdc <__aeabi_i2f>
 80056f8:	4603      	mov	r3, r0
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fb fb41 	bl	8000d84 <__aeabi_fmul>
 8005702:	4603      	mov	r3, r0
 8005704:	4618      	mov	r0, r3
 8005706:	f7fa fe8f 	bl	8000428 <__aeabi_f2d>
 800570a:	4604      	mov	r4, r0
 800570c:	460d      	mov	r5, r1
 800570e:	8a3b      	ldrh	r3, [r7, #16]
 8005710:	4618      	mov	r0, r3
 8005712:	f7fa fe77 	bl	8000404 <__aeabi_i2d>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4620      	mov	r0, r4
 800571c:	4629      	mov	r1, r5
 800571e:	f7fb f805 	bl	800072c <__aeabi_ddiv>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4614      	mov	r4, r2
 8005728:	461d      	mov	r5, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fa fe7c 	bl	8000428 <__aeabi_f2d>
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005738:	f7fa fff8 	bl	800072c <__aeabi_ddiv>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4620      	mov	r0, r4
 8005742:	4629      	mov	r1, r5
 8005744:	f7fa fd10 	bl	8000168 <__aeabi_dsub>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4610      	mov	r0, r2
 800574e:	4619      	mov	r1, r3
 8005750:	f003 ff98 	bl	8009684 <round>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4610      	mov	r0, r2
 800575a:	4619      	mov	r1, r3
 800575c:	f7fb f96c 	bl	8000a38 <__aeabi_d2iz>
 8005760:	4603      	mov	r3, r0
 8005762:	82fb      	strh	r3, [r7, #22]
							else data = (int16_t)round(relativeDACcode*(1-(addr-DepthPos)/(DepthNeg*1.0))-(relativeDACcode/2.0)); break; // falling edge
 8005764:	e09b      	b.n	800589e <AWG_Load_Waveform+0x416>
 8005766:	bf00      	nop
 8005768:	00000000 	.word	0x00000000
 800576c:	417312d0 	.word	0x417312d0
 8005770:	00000000 	.word	0x00000000
 8005774:	41b0b076 	.word	0x41b0b076
 8005778:	42c80000 	.word	0x42c80000
 800577c:	20000290 	.word	0x20000290
 8005780:	40010800 	.word	0x40010800
 8005784:	44ffe000 	.word	0x44ffe000
 8005788:	2000037c 	.word	0x2000037c
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7fa fe4b 	bl	8000428 <__aeabi_f2d>
 8005792:	4604      	mov	r4, r0
 8005794:	460d      	mov	r5, r1
 8005796:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800579a:	8a3b      	ldrh	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fa fe30 	bl	8000404 <__aeabi_i2d>
 80057a4:	4680      	mov	r8, r0
 80057a6:	4689      	mov	r9, r1
 80057a8:	89fb      	ldrh	r3, [r7, #14]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fa fe2a 	bl	8000404 <__aeabi_i2d>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4640      	mov	r0, r8
 80057b6:	4649      	mov	r1, r9
 80057b8:	f7fa ffb8 	bl	800072c <__aeabi_ddiv>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	f04f 0000 	mov.w	r0, #0
 80057c4:	495a      	ldr	r1, [pc, #360]	@ (8005930 <AWG_Load_Waveform+0x4a8>)
 80057c6:	f7fa fccf 	bl	8000168 <__aeabi_dsub>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4620      	mov	r0, r4
 80057d0:	4629      	mov	r1, r5
 80057d2:	f7fa fe81 	bl	80004d8 <__aeabi_dmul>
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	4614      	mov	r4, r2
 80057dc:	461d      	mov	r5, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fa fe22 	bl	8000428 <__aeabi_f2d>
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80057ec:	f7fa ff9e 	bl	800072c <__aeabi_ddiv>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4620      	mov	r0, r4
 80057f6:	4629      	mov	r1, r5
 80057f8:	f7fa fcb6 	bl	8000168 <__aeabi_dsub>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4610      	mov	r0, r2
 8005802:	4619      	mov	r1, r3
 8005804:	f003 ff3e 	bl	8009684 <round>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4610      	mov	r0, r2
 800580e:	4619      	mov	r1, r3
 8005810:	f7fb f912 	bl	8000a38 <__aeabi_d2iz>
 8005814:	4603      	mov	r3, r0
 8005816:	82fb      	strh	r3, [r7, #22]
 8005818:	e041      	b.n	800589e <AWG_Load_Waveform+0x416>

			case Sine: data = (int16_t)round(relativeDACcode*sinf((addr*3.14159*2)/(1.0*depth))); break;
 800581a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800581e:	4618      	mov	r0, r3
 8005820:	f7fa fdf0 	bl	8000404 <__aeabi_i2d>
 8005824:	a340      	add	r3, pc, #256	@ (adr r3, 8005928 <AWG_Load_Waveform+0x4a0>)
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f7fa fe55 	bl	80004d8 <__aeabi_dmul>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4610      	mov	r0, r2
 8005834:	4619      	mov	r1, r3
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	f7fa fc97 	bl	800016c <__adddf3>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4614      	mov	r4, r2
 8005844:	461d      	mov	r5, r3
 8005846:	8a7b      	ldrh	r3, [r7, #18]
 8005848:	4618      	mov	r0, r3
 800584a:	f7fa fddb 	bl	8000404 <__aeabi_i2d>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4620      	mov	r0, r4
 8005854:	4629      	mov	r1, r5
 8005856:	f7fa ff69 	bl	800072c <__aeabi_ddiv>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4610      	mov	r0, r2
 8005860:	4619      	mov	r1, r3
 8005862:	f7fb f931 	bl	8000ac8 <__aeabi_d2f>
 8005866:	4603      	mov	r3, r0
 8005868:	4618      	mov	r0, r3
 800586a:	f003 fed1 	bl	8009610 <sinf>
 800586e:	4603      	mov	r3, r0
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fb fa86 	bl	8000d84 <__aeabi_fmul>
 8005878:	4603      	mov	r3, r0
 800587a:	4618      	mov	r0, r3
 800587c:	f7fa fdd4 	bl	8000428 <__aeabi_f2d>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4610      	mov	r0, r2
 8005886:	4619      	mov	r1, r3
 8005888:	f003 fefc 	bl	8009684 <round>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4610      	mov	r0, r2
 8005892:	4619      	mov	r1, r3
 8005894:	f7fb f8d0 	bl	8000a38 <__aeabi_d2iz>
 8005898:	4603      	mov	r3, r0
 800589a:	82fb      	strh	r3, [r7, #22]
 800589c:	bf00      	nop

			case Func: break;
		}

		byte[0] = (int8_t)((addr>>4)&0x00ff);
 800589e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80058a2:	111b      	asrs	r3, r3, #4
 80058a4:	b21b      	sxth	r3, r3
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	703b      	strb	r3, [r7, #0]
		byte[1] = (int8_t)(((data>>8)&0x000f)|((addr<<4)&0x00f0));
 80058aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80058ae:	121b      	asrs	r3, r3, #8
 80058b0:	b21b      	sxth	r3, r3
 80058b2:	b25b      	sxtb	r3, r3
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	b25a      	sxtb	r2, r3
 80058ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	b25b      	sxtb	r3, r3
 80058c2:	f023 030f 	bic.w	r3, r3, #15
 80058c6:	b25b      	sxtb	r3, r3
 80058c8:	4313      	orrs	r3, r2
 80058ca:	b25b      	sxtb	r3, r3
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	707b      	strb	r3, [r7, #1]
		byte[2] = (int8_t)(data&0x00ff);
 80058d0:	8afb      	ldrh	r3, [r7, #22]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	70bb      	strb	r3, [r7, #2]
		byte[3] = (int8_t)AWG_DATA;
 80058d6:	2305      	movs	r3, #5
 80058d8:	70fb      	strb	r3, [r7, #3]

		HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80058da:	4639      	mov	r1, r7
 80058dc:	2364      	movs	r3, #100	@ 0x64
 80058de:	2204      	movs	r2, #4
 80058e0:	4814      	ldr	r0, [pc, #80]	@ (8005934 <AWG_Load_Waveform+0x4ac>)
 80058e2:	f7fe fa1f 	bl	8003d24 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80058e6:	2201      	movs	r2, #1
 80058e8:	2110      	movs	r1, #16
 80058ea:	4813      	ldr	r0, [pc, #76]	@ (8005938 <AWG_Load_Waveform+0x4b0>)
 80058ec:	f7fd f80b 	bl	8002906 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80058f0:	2200      	movs	r2, #0
 80058f2:	2110      	movs	r1, #16
 80058f4:	4810      	ldr	r0, [pc, #64]	@ (8005938 <AWG_Load_Waveform+0x4b0>)
 80058f6:	f7fd f806 	bl	8002906 <HAL_GPIO_WritePin>
	for(int16_t addr = 0; addr < depth; addr++)
 80058fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3301      	adds	r3, #1
 8005902:	b29b      	uxth	r3, r3
 8005904:	82bb      	strh	r3, [r7, #20]
 8005906:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800590a:	8a7b      	ldrh	r3, [r7, #18]
 800590c:	429a      	cmp	r2, r3
 800590e:	f6ff ae8e 	blt.w	800562e <AWG_Load_Waveform+0x1a6>
	}
		LOLA_enable_features(AWG_EN, 1); // enable AWG
 8005912:	2101      	movs	r1, #1
 8005914:	2002      	movs	r0, #2
 8005916:	f000 f927 	bl	8005b68 <LOLA_enable_features>
}
 800591a:	bf00      	nop
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8005924:	b004      	add	sp, #16
 8005926:	4770      	bx	lr
 8005928:	f01b866e 	.word	0xf01b866e
 800592c:	400921f9 	.word	0x400921f9
 8005930:	3ff00000 	.word	0x3ff00000
 8005934:	20000290 	.word	0x20000290
 8005938:	40010800 	.word	0x40010800

0800593c <LOLA_CFG_SEL>:
#include "main.h"
#include "board.h"
#include "ProgRef.h"

void LOLA_CFG_SEL(InitType t)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	71fb      	strb	r3, [r7, #7]
	switch(t)
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	2b05      	cmp	r3, #5
 800594a:	f200 8081 	bhi.w	8005a50 <LOLA_CFG_SEL+0x114>
 800594e:	a201      	add	r2, pc, #4	@ (adr r2, 8005954 <LOLA_CFG_SEL+0x18>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	0800596d 	.word	0x0800596d
 8005958:	08005993 	.word	0x08005993
 800595c:	080059b9 	.word	0x080059b9
 8005960:	080059df 	.word	0x080059df
 8005964:	08005a05 	.word	0x08005a05
 8005968:	08005a2b 	.word	0x08005a2b
		{
			// reference: http://dangerousprototypes.com/docs/Xilinx_Spartan_3_FPGA_quick_start#Boot_configuration
			case Master_Serial:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 800596c:	2200      	movs	r2, #0
 800596e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005972:	4843      	ldr	r0, [pc, #268]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 8005974:	f7fc ffc7 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 8005978:	2200      	movs	r2, #0
 800597a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800597e:	4840      	ldr	r0, [pc, #256]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 8005980:	f7fc ffc1 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 8005984:	2200      	movs	r2, #0
 8005986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800598a:	483d      	ldr	r0, [pc, #244]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 800598c:	f7fc ffbb 	bl	8002906 <HAL_GPIO_WritePin>
			break;
 8005990:	e071      	b.n	8005a76 <LOLA_CFG_SEL+0x13a>

			case SPI_FLASH:	// SPI FLASH
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 8005992:	2200      	movs	r2, #0
 8005994:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005998:	4839      	ldr	r0, [pc, #228]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 800599a:	f7fc ffb4 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 800599e:	2200      	movs	r2, #0
 80059a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80059a4:	4836      	ldr	r0, [pc, #216]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 80059a6:	f7fc ffae 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 80059aa:	2201      	movs	r2, #1
 80059ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059b0:	4833      	ldr	r0, [pc, #204]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 80059b2:	f7fc ffa8 	bl	8002906 <HAL_GPIO_WritePin>
			break;
 80059b6:	e05e      	b.n	8005a76 <LOLA_CFG_SEL+0x13a>

			case BPI_Up:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80059b8:	2200      	movs	r2, #0
 80059ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80059be:	4830      	ldr	r0, [pc, #192]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 80059c0:	f7fc ffa1 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 80059c4:	2201      	movs	r2, #1
 80059c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80059ca:	482d      	ldr	r0, [pc, #180]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 80059cc:	f7fc ff9b 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 80059d0:	2200      	movs	r2, #0
 80059d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059d6:	482a      	ldr	r0, [pc, #168]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 80059d8:	f7fc ff95 	bl	8002906 <HAL_GPIO_WritePin>
			break;
 80059dc:	e04b      	b.n	8005a76 <LOLA_CFG_SEL+0x13a>

			case BPI_Down:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80059de:	2200      	movs	r2, #0
 80059e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80059e4:	4826      	ldr	r0, [pc, #152]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 80059e6:	f7fc ff8e 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 80059ea:	2201      	movs	r2, #1
 80059ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80059f0:	4823      	ldr	r0, [pc, #140]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 80059f2:	f7fc ff88 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 80059f6:	2201      	movs	r2, #1
 80059f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059fc:	4820      	ldr	r0, [pc, #128]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 80059fe:	f7fc ff82 	bl	8002906 <HAL_GPIO_WritePin>
			break;
 8005a02:	e038      	b.n	8005a76 <LOLA_CFG_SEL+0x13a>

			case Slave_parallel:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8005a04:	2201      	movs	r2, #1
 8005a06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005a0a:	481d      	ldr	r0, [pc, #116]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 8005a0c:	f7fc ff7b 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8005a10:	2201      	movs	r2, #1
 8005a12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005a16:	481a      	ldr	r0, [pc, #104]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 8005a18:	f7fc ff75 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a22:	4817      	ldr	r0, [pc, #92]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 8005a24:	f7fc ff6f 	bl	8002906 <HAL_GPIO_WritePin>
			break;
 8005a28:	e025      	b.n	8005a76 <LOLA_CFG_SEL+0x13a>

			case Slave_Serial:
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005a30:	4813      	ldr	r0, [pc, #76]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 8005a32:	f7fc ff68 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8005a36:	2201      	movs	r2, #1
 8005a38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005a3c:	4810      	ldr	r0, [pc, #64]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 8005a3e:	f7fc ff62 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8005a42:	2201      	movs	r2, #1
 8005a44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a48:	480d      	ldr	r0, [pc, #52]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 8005a4a:	f7fc ff5c 	bl	8002906 <HAL_GPIO_WritePin>
			break;
 8005a4e:	e012      	b.n	8005a76 <LOLA_CFG_SEL+0x13a>

			default: // JTAG on default
				HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8005a50:	2201      	movs	r2, #1
 8005a52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005a56:	480a      	ldr	r0, [pc, #40]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 8005a58:	f7fc ff55 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005a62:	4807      	ldr	r0, [pc, #28]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 8005a64:	f7fc ff4f 	bl	8002906 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a6e:	4804      	ldr	r0, [pc, #16]	@ (8005a80 <LOLA_CFG_SEL+0x144>)
 8005a70:	f7fc ff49 	bl	8002906 <HAL_GPIO_WritePin>
			break;
 8005a74:	bf00      	nop
		}
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40010c00 	.word	0x40010c00

08005a84 <LOLA_Init>:

uint8_t LOLA_Init(LOLAconfig_struct LOLAconfig) // waits forever if maxatempts > 10000
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t AttemptsLeft;
	uint16_t FID = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	817b      	strh	r3, [r7, #10]
	uint16_t TrialsLeft = LOLAconfig.Trials;
 8005a94:	887b      	ldrh	r3, [r7, #2]
 8005a96:	81bb      	strh	r3, [r7, #12]

	LOLAconfig.Status = NO_FIRMWARE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	703b      	strb	r3, [r7, #0]

	do{

		LOLA_Reset();
 8005a9c:	f000 f854 	bl	8005b48 <LOLA_Reset>

		HAL_Delay(100);
 8005aa0:	2064      	movs	r0, #100	@ 0x64
 8005aa2:	f7fc f99f 	bl	8001de4 <HAL_Delay>

		LOLA_CFG_SEL(LOLAconfig.Config);
 8005aa6:	787b      	ldrb	r3, [r7, #1]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff ff47 	bl	800593c <LOLA_CFG_SEL>

		AttemptsLeft = 20;
 8005aae:	2314      	movs	r3, #20
 8005ab0:	81fb      	strh	r3, [r7, #14]

		if(LOLAconfig.Config == JTAG)	// unlimited timer for manual JTAG configuration
 8005ab2:	787b      	ldrb	r3, [r7, #1]
 8005ab4:	2b06      	cmp	r3, #6
 8005ab6:	d10f      	bne.n	8005ad8 <LOLA_Init+0x54>
			while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin)){}
 8005ab8:	bf00      	nop
 8005aba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005abe:	4821      	ldr	r0, [pc, #132]	@ (8005b44 <LOLA_Init+0xc0>)
 8005ac0:	f7fc ff0a 	bl	80028d8 <HAL_GPIO_ReadPin>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f7      	bne.n	8005aba <LOLA_Init+0x36>
 8005aca:	e010      	b.n	8005aee <LOLA_Init+0x6a>
		else
			while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin) && AttemptsLeft > 0)
			{
				AttemptsLeft--;
 8005acc:	89fb      	ldrh	r3, [r7, #14]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	81fb      	strh	r3, [r7, #14]
				HAL_Delay(100);
 8005ad2:	2064      	movs	r0, #100	@ 0x64
 8005ad4:	f7fc f986 	bl	8001de4 <HAL_Delay>
			while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin) && AttemptsLeft > 0)
 8005ad8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005adc:	4819      	ldr	r0, [pc, #100]	@ (8005b44 <LOLA_Init+0xc0>)
 8005ade:	f7fc fefb 	bl	80028d8 <HAL_GPIO_ReadPin>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <LOLA_Init+0x6a>
 8005ae8:	89fb      	ldrh	r3, [r7, #14]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1ee      	bne.n	8005acc <LOLA_Init+0x48>
			}

		if(AttemptsLeft > 0)
 8005aee:	89fb      	ldrh	r3, [r7, #14]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d012      	beq.n	8005b1a <LOLA_Init+0x96>
		{
			HAL_Delay(1000);
 8005af4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005af8:	f7fc f974 	bl	8001de4 <HAL_Delay>
			FID = LOLA_GET_FIRMWAREID();
 8005afc:	f000 f892 	bl	8005c24 <LOLA_GET_FIRMWAREID>
 8005b00:	4603      	mov	r3, r0
 8005b02:	817b      	strh	r3, [r7, #10]

			if(LOLAconfig.compatibleFirmwareID = FID) LOLAconfig.Status = FIRMWARE_OK;
 8005b04:	897b      	ldrh	r3, [r7, #10]
 8005b06:	80bb      	strh	r3, [r7, #4]
 8005b08:	88bb      	ldrh	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <LOLA_Init+0x90>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	703b      	strb	r3, [r7, #0]
 8005b12:	e004      	b.n	8005b1e <LOLA_Init+0x9a>
			else LOLAconfig.Status = INVALID_FIRMWARE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	703b      	strb	r3, [r7, #0]
 8005b18:	e001      	b.n	8005b1e <LOLA_Init+0x9a>
		}
		else LOLAconfig.Status = NO_FIRMWARE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	703b      	strb	r3, [r7, #0]

		TrialsLeft--;
 8005b1e:	89bb      	ldrh	r3, [r7, #12]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	81bb      	strh	r3, [r7, #12]

	}while(TrialsLeft > 0 && LOLAconfig.Status != FIRMWARE_OK);
 8005b24:	89bb      	ldrh	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <LOLA_Init+0xac>
 8005b2a:	783b      	ldrb	r3, [r7, #0]
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d1b5      	bne.n	8005a9c <LOLA_Init+0x18>

	if(LOLAconfig.Status == FIRMWARE_OK) return 1;	// sucesfull configuration
 8005b30:	783b      	ldrb	r3, [r7, #0]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d101      	bne.n	8005b3a <LOLA_Init+0xb6>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <LOLA_Init+0xb8>
	else return 0; // timer ran out
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40010800 	.word	0x40010800

08005b48 <LOLA_Reset>:

void LOLA_Reset()
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 0);
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2108      	movs	r1, #8
 8005b50:	4804      	ldr	r0, [pc, #16]	@ (8005b64 <LOLA_Reset+0x1c>)
 8005b52:	f7fc fed8 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 1);
 8005b56:	2201      	movs	r2, #1
 8005b58:	2108      	movs	r1, #8
 8005b5a:	4802      	ldr	r0, [pc, #8]	@ (8005b64 <LOLA_Reset+0x1c>)
 8005b5c:	f7fc fed3 	bl	8002906 <HAL_GPIO_WritePin>
}
 8005b60:	bf00      	nop
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40010800 	.word	0x40010800

08005b68 <LOLA_enable_features>:
}*/

uint16_t enablersReg = 0;

void LOLA_enable_features(LOLAfeatures LOLAfeatures1, uint8_t ENABLE)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	460a      	mov	r2, r1
 8005b72:	71fb      	strb	r3, [r7, #7]
 8005b74:	4613      	mov	r3, r2
 8005b76:	71bb      	strb	r3, [r7, #6]
	uint16_t enablersMask = 0x0001 << LOLAfeatures1;
 8005b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	if((uint16_t)LOLAfeatures1 == (uint16_t)ALL_EN) 	enablersMask = 0xffff;
 8005b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d102      	bne.n	8005b98 <LOLA_enable_features+0x30>
 8005b92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b96:	81fb      	strh	r3, [r7, #14]

	if(ENABLE) 	enablersReg |= enablersMask;
 8005b98:	79bb      	ldrb	r3, [r7, #6]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <LOLA_enable_features+0x46>
 8005b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c18 <LOLA_enable_features+0xb0>)
 8005ba0:	881a      	ldrh	r2, [r3, #0]
 8005ba2:	89fb      	ldrh	r3, [r7, #14]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c18 <LOLA_enable_features+0xb0>)
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	e00b      	b.n	8005bc6 <LOLA_enable_features+0x5e>
	else 		enablersReg &= ~enablersMask;
 8005bae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	b21a      	sxth	r2, r3
 8005bb6:	4b18      	ldr	r3, [pc, #96]	@ (8005c18 <LOLA_enable_features+0xb0>)
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b21b      	sxth	r3, r3
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	b21b      	sxth	r3, r3
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	4b15      	ldr	r3, [pc, #84]	@ (8005c18 <LOLA_enable_features+0xb0>)
 8005bc4:	801a      	strh	r2, [r3, #0]

	byte[0] = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((enablersReg>>8)&0x00ff);
 8005bca:	4b13      	ldr	r3, [pc, #76]	@ (8005c18 <LOLA_enable_features+0xb0>)
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	0a1b      	lsrs	r3, r3, #8
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(enablersReg&0x00ff);
 8005bd6:	4b10      	ldr	r3, [pc, #64]	@ (8005c18 <LOLA_enable_features+0xb0>)
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)ENABLERS;
 8005bde:	2303      	movs	r3, #3
 8005be0:	72fb      	strb	r3, [r7, #11]


	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005be2:	f107 0108 	add.w	r1, r7, #8
 8005be6:	2364      	movs	r3, #100	@ 0x64
 8005be8:	2204      	movs	r2, #4
 8005bea:	480c      	ldr	r0, [pc, #48]	@ (8005c1c <LOLA_enable_features+0xb4>)
 8005bec:	f7fe f89a 	bl	8003d24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2110      	movs	r1, #16
 8005bf4:	480a      	ldr	r0, [pc, #40]	@ (8005c20 <LOLA_enable_features+0xb8>)
 8005bf6:	f7fc fe86 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	2110      	movs	r1, #16
 8005bfe:	4808      	ldr	r0, [pc, #32]	@ (8005c20 <LOLA_enable_features+0xb8>)
 8005c00:	f7fc fe81 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005c04:	2200      	movs	r2, #0
 8005c06:	2110      	movs	r1, #16
 8005c08:	4805      	ldr	r0, [pc, #20]	@ (8005c20 <LOLA_enable_features+0xb8>)
 8005c0a:	f7fc fe7c 	bl	8002906 <HAL_GPIO_WritePin>
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000378 	.word	0x20000378
 8005c1c:	20000290 	.word	0x20000290
 8005c20:	40010800 	.word	0x40010800

08005c24 <LOLA_GET_FIRMWAREID>:

uint16_t LOLA_GET_FIRMWAREID()
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
	uint16_t FirmwareID = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	byte[0] = (int8_t)0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)FIRMWARE_ID;
 8005c3a:	2313      	movs	r3, #19
 8005c3c:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005c3e:	f107 0108 	add.w	r1, r7, #8
 8005c42:	2364      	movs	r3, #100	@ 0x64
 8005c44:	2204      	movs	r2, #4
 8005c46:	4814      	ldr	r0, [pc, #80]	@ (8005c98 <LOLA_GET_FIRMWAREID+0x74>)
 8005c48:	f7fe f86c 	bl	8003d24 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2110      	movs	r1, #16
 8005c50:	4812      	ldr	r0, [pc, #72]	@ (8005c9c <LOLA_GET_FIRMWAREID+0x78>)
 8005c52:	f7fc fe58 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8005c56:	2201      	movs	r2, #1
 8005c58:	2110      	movs	r1, #16
 8005c5a:	4810      	ldr	r0, [pc, #64]	@ (8005c9c <LOLA_GET_FIRMWAREID+0x78>)
 8005c5c:	f7fc fe53 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005c60:	2200      	movs	r2, #0
 8005c62:	2110      	movs	r1, #16
 8005c64:	480d      	ldr	r0, [pc, #52]	@ (8005c9c <LOLA_GET_FIRMWAREID+0x78>)
 8005c66:	f7fc fe4e 	bl	8002906 <HAL_GPIO_WritePin>

	uint8_t rxBuffer[4];

	 // Receive 4 bytes
	if (HAL_SPI_Receive(&hspi1, rxBuffer, 4, HAL_MAX_DELAY) == HAL_OK) FirmwareID = (rxBuffer[2] << 8) | rxBuffer[3];
 8005c6a:	1d39      	adds	r1, r7, #4
 8005c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c70:	2204      	movs	r2, #4
 8005c72:	4809      	ldr	r0, [pc, #36]	@ (8005c98 <LOLA_GET_FIRMWAREID+0x74>)
 8005c74:	f7fe f999 	bl	8003faa <HAL_SPI_Receive>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d107      	bne.n	8005c8e <LOLA_GET_FIRMWAREID+0x6a>
 8005c7e:	79bb      	ldrb	r3, [r7, #6]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	b21a      	sxth	r2, r3
 8005c84:	79fb      	ldrb	r3, [r7, #7]
 8005c86:	b21b      	sxth	r3, r3
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	b21b      	sxth	r3, r3
 8005c8c:	81fb      	strh	r3, [r7, #14]

	return FirmwareID;
 8005c8e:	89fb      	ldrh	r3, [r7, #14]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000290 	.word	0x20000290
 8005c9c:	40010800 	.word	0x40010800

08005ca0 <LOLA_SET_MAX_AMPLITUDE>:

float MAX_AMPLITUDE = 0;

void LOLA_SET_MAX_AMPLITUDE(float value)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	DACREF((value)*2/6.4);	// setting DAC Voltage reference
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4619      	mov	r1, r3
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fa ff61 	bl	8000b74 <__addsf3>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fa fbb7 	bl	8000428 <__aeabi_f2d>
 8005cba:	a30b      	add	r3, pc, #44	@ (adr r3, 8005ce8 <LOLA_SET_MAX_AMPLITUDE+0x48>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa fd34 	bl	800072c <__aeabi_ddiv>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4619      	mov	r1, r3
 8005ccc:	f7fa fefc 	bl	8000ac8 <__aeabi_d2f>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 f856 	bl	8005d84 <DACREF>
	MAX_AMPLITUDE = value;
 8005cd8:	4a05      	ldr	r2, [pc, #20]	@ (8005cf0 <LOLA_SET_MAX_AMPLITUDE+0x50>)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6013      	str	r3, [r2, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	9999999a 	.word	0x9999999a
 8005cec:	40199999 	.word	0x40199999
 8005cf0:	2000037c 	.word	0x2000037c

08005cf4 <DAC_DIRECT_DATA>:

void DAC_DIRECT_DATA(float value)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	uint8_t byte[4];

	int16_t data = (int16_t)(2048*value/MAX_AMPLITUDE);
 8005cfc:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7fb f83f 	bl	8000d84 <__aeabi_fmul>
 8005d06:	4603      	mov	r3, r0
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005d78 <DAC_DIRECT_DATA+0x84>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f7fb f8eb 	bl	8000eec <__aeabi_fdiv>
 8005d16:	4603      	mov	r3, r0
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fb f9f9 	bl	8001110 <__aeabi_f2iz>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	81fb      	strh	r3, [r7, #14]

	byte[0] = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)((data>>8)&0x000f);
 8005d26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d2a:	121b      	asrs	r3, r3, #8
 8005d2c:	b21b      	sxth	r3, r3
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)(data&0x00ff);
 8005d38:	89fb      	ldrh	r3, [r7, #14]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)DAC_DIRECTDATA;
 8005d3e:	2304      	movs	r3, #4
 8005d40:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005d42:	f107 0108 	add.w	r1, r7, #8
 8005d46:	2364      	movs	r3, #100	@ 0x64
 8005d48:	2204      	movs	r2, #4
 8005d4a:	480c      	ldr	r0, [pc, #48]	@ (8005d7c <DAC_DIRECT_DATA+0x88>)
 8005d4c:	f7fd ffea 	bl	8003d24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005d50:	2200      	movs	r2, #0
 8005d52:	2110      	movs	r1, #16
 8005d54:	480a      	ldr	r0, [pc, #40]	@ (8005d80 <DAC_DIRECT_DATA+0x8c>)
 8005d56:	f7fc fdd6 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	2110      	movs	r1, #16
 8005d5e:	4808      	ldr	r0, [pc, #32]	@ (8005d80 <DAC_DIRECT_DATA+0x8c>)
 8005d60:	f7fc fdd1 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005d64:	2200      	movs	r2, #0
 8005d66:	2110      	movs	r1, #16
 8005d68:	4805      	ldr	r0, [pc, #20]	@ (8005d80 <DAC_DIRECT_DATA+0x8c>)
 8005d6a:	f7fc fdcc 	bl	8002906 <HAL_GPIO_WritePin>
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	2000037c 	.word	0x2000037c
 8005d7c:	20000290 	.word	0x20000290
 8005d80:	40010800 	.word	0x40010800

08005d84 <DACREF>:
#include "trim.h"

float DACref = 0;

void DACREF(float v) // 0 <= v <= 2.5
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 8005d8c:	4a27      	ldr	r2, [pc, #156]	@ (8005e2c <DACREF+0xa8>)
 8005d8e:	f04f 0100 	mov.w	r1, #0
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fd07 	bl	80067a6 <trimFloat>
 8005d98:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 8005d9a:	4924      	ldr	r1, [pc, #144]	@ (8005e2c <DACREF+0xa8>)
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7fb f985 	bl	80010ac <__aeabi_fcmpeq>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <DACREF+0x2c>
 8005da8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005dac:	81fb      	strh	r3, [r7, #14]
 8005dae:	e018      	b.n	8005de2 <DACREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7fa fb39 	bl	8000428 <__aeabi_f2d>
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	4b1d      	ldr	r3, [pc, #116]	@ (8005e30 <DACREF+0xac>)
 8005dbc:	f7fa fcb6 	bl	800072c <__aeabi_ddiv>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	4b19      	ldr	r3, [pc, #100]	@ (8005e34 <DACREF+0xb0>)
 8005dce:	f7fa fb83 	bl	80004d8 <__aeabi_dmul>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f7fa fe55 	bl	8000a88 <__aeabi_d2uiz>
 8005dde:	4603      	mov	r3, r0
 8005de0:	81fb      	strh	r3, [r7, #14]

	DACref = v;
 8005de2:	4a15      	ldr	r2, [pc, #84]	@ (8005e38 <DACREF+0xb4>)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6013      	str	r3, [r2, #0]

	uint8_t byte[3];

	byte[0] = (3<<1)|(1<<4);	//3 shifted=channel D	1 shifted=load
 8005de8:	2316      	movs	r3, #22
 8005dea:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8005dec:	89fb      	ldrh	r3, [r7, #14]
 8005dee:	099b      	lsrs	r3, r3, #6
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8005df6:	89fb      	ldrh	r3, [r7, #14]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e04:	480d      	ldr	r0, [pc, #52]	@ (8005e3c <DACREF+0xb8>)
 8005e06:	f7fc fd7e 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8005e0a:	f107 0108 	add.w	r1, r7, #8
 8005e0e:	2364      	movs	r3, #100	@ 0x64
 8005e10:	2203      	movs	r2, #3
 8005e12:	480b      	ldr	r0, [pc, #44]	@ (8005e40 <DACREF+0xbc>)
 8005e14:	f7fd ff86 	bl	8003d24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e1e:	4807      	ldr	r0, [pc, #28]	@ (8005e3c <DACREF+0xb8>)
 8005e20:	f7fc fd71 	bl	8002906 <HAL_GPIO_WritePin>
}
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40200000 	.word	0x40200000
 8005e30:	40040000 	.word	0x40040000
 8005e34:	40d00000 	.word	0x40d00000
 8005e38:	20000380 	.word	0x20000380
 8005e3c:	40011000 	.word	0x40011000
 8005e40:	20000290 	.word	0x20000290

08005e44 <DACOFFS>:

void DACOFFS(float v) // -12.5 <= v <= 12.5
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 8005e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef8 <DACOFFS+0xb4>)
 8005e4e:	492b      	ldr	r1, [pc, #172]	@ (8005efc <DACOFFS+0xb8>)
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fca8 	bl	80067a6 <trimFloat>
 8005e56:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 8005e58:	4927      	ldr	r1, [pc, #156]	@ (8005ef8 <DACOFFS+0xb4>)
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fb f926 	bl	80010ac <__aeabi_fcmpeq>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <DACOFFS+0x2a>
 8005e66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e6a:	81fb      	strh	r3, [r7, #14]
 8005e6c:	e021      	b.n	8005eb2 <DACOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fa fada 	bl	8000428 <__aeabi_f2d>
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	4b21      	ldr	r3, [pc, #132]	@ (8005f00 <DACOFFS+0xbc>)
 8005e7a:	f7fa f977 	bl	800016c <__adddf3>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4610      	mov	r0, r2
 8005e84:	4619      	mov	r1, r3
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005f04 <DACOFFS+0xc0>)
 8005e8c:	f7fa fc4e 	bl	800072c <__aeabi_ddiv>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4610      	mov	r0, r2
 8005e96:	4619      	mov	r1, r3
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f08 <DACOFFS+0xc4>)
 8005e9e:	f7fa fb1b 	bl	80004d8 <__aeabi_dmul>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	f7fa fded 	bl	8000a88 <__aeabi_d2uiz>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (2<<1)|(1<<4);	//2 shifted=channel C	1 shifted=load
 8005eb2:	2314      	movs	r3, #20
 8005eb4:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8005eb6:	89fb      	ldrh	r3, [r7, #14]
 8005eb8:	099b      	lsrs	r3, r3, #6
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8005ec0:	89fb      	ldrh	r3, [r7, #14]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005ece:	480f      	ldr	r0, [pc, #60]	@ (8005f0c <DACOFFS+0xc8>)
 8005ed0:	f7fc fd19 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8005ed4:	f107 0108 	add.w	r1, r7, #8
 8005ed8:	2364      	movs	r3, #100	@ 0x64
 8005eda:	2203      	movs	r2, #3
 8005edc:	480c      	ldr	r0, [pc, #48]	@ (8005f10 <DACOFFS+0xcc>)
 8005ede:	f7fd ff21 	bl	8003d24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005ee8:	4808      	ldr	r0, [pc, #32]	@ (8005f0c <DACOFFS+0xc8>)
 8005eea:	f7fc fd0c 	bl	8002906 <HAL_GPIO_WritePin>
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	41480000 	.word	0x41480000
 8005efc:	c1480000 	.word	0xc1480000
 8005f00:	40290000 	.word	0x40290000
 8005f04:	40390000 	.word	0x40390000
 8005f08:	40d00000 	.word	0x40d00000
 8005f0c:	40011000 	.word	0x40011000
 8005f10:	20000290 	.word	0x20000290

08005f14 <ADCREF>:

void ADCREF(float v) // 0 <= v <= 2.5
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 8005f1c:	4a26      	ldr	r2, [pc, #152]	@ (8005fb8 <ADCREF+0xa4>)
 8005f1e:	f04f 0100 	mov.w	r1, #0
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fc3f 	bl	80067a6 <trimFloat>
 8005f28:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 8005f2a:	4923      	ldr	r1, [pc, #140]	@ (8005fb8 <ADCREF+0xa4>)
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fb f8bd 	bl	80010ac <__aeabi_fcmpeq>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <ADCREF+0x2c>
 8005f38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f3c:	81fb      	strh	r3, [r7, #14]
 8005f3e:	e018      	b.n	8005f72 <ADCREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7fa fa71 	bl	8000428 <__aeabi_f2d>
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005fbc <ADCREF+0xa8>)
 8005f4c:	f7fa fbee 	bl	800072c <__aeabi_ddiv>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4610      	mov	r0, r2
 8005f56:	4619      	mov	r1, r3
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	4b18      	ldr	r3, [pc, #96]	@ (8005fc0 <ADCREF+0xac>)
 8005f5e:	f7fa fabb 	bl	80004d8 <__aeabi_dmul>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4610      	mov	r0, r2
 8005f68:	4619      	mov	r1, r3
 8005f6a:	f7fa fd8d 	bl	8000a88 <__aeabi_d2uiz>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<1)|(1<<4); //1 shifted=channel B	1 shifted=load
 8005f72:	2312      	movs	r3, #18
 8005f74:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8005f76:	89fb      	ldrh	r3, [r7, #14]
 8005f78:	099b      	lsrs	r3, r3, #6
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8005f80:	89fb      	ldrh	r3, [r7, #14]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005f8e:	480d      	ldr	r0, [pc, #52]	@ (8005fc4 <ADCREF+0xb0>)
 8005f90:	f7fc fcb9 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8005f94:	f107 0108 	add.w	r1, r7, #8
 8005f98:	2364      	movs	r3, #100	@ 0x64
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	480a      	ldr	r0, [pc, #40]	@ (8005fc8 <ADCREF+0xb4>)
 8005f9e:	f7fd fec1 	bl	8003d24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005fa8:	4806      	ldr	r0, [pc, #24]	@ (8005fc4 <ADCREF+0xb0>)
 8005faa:	f7fc fcac 	bl	8002906 <HAL_GPIO_WritePin>
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40200000 	.word	0x40200000
 8005fbc:	40040000 	.word	0x40040000
 8005fc0:	40d00000 	.word	0x40d00000
 8005fc4:	40011000 	.word	0x40011000
 8005fc8:	20000290 	.word	0x20000290

08005fcc <ADCOFFS>:

void ADCOFFS(float v) // -12.5 <= v <= 12.5
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 8005fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8006080 <ADCOFFS+0xb4>)
 8005fd6:	492b      	ldr	r1, [pc, #172]	@ (8006084 <ADCOFFS+0xb8>)
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fbe4 	bl	80067a6 <trimFloat>
 8005fde:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 8005fe0:	4927      	ldr	r1, [pc, #156]	@ (8006080 <ADCOFFS+0xb4>)
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fb f862 	bl	80010ac <__aeabi_fcmpeq>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <ADCOFFS+0x2a>
 8005fee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ff2:	81fb      	strh	r3, [r7, #14]
 8005ff4:	e021      	b.n	800603a <ADCOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fa fa16 	bl	8000428 <__aeabi_f2d>
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	4b21      	ldr	r3, [pc, #132]	@ (8006088 <ADCOFFS+0xbc>)
 8006002:	f7fa f8b3 	bl	800016c <__adddf3>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4610      	mov	r0, r2
 800600c:	4619      	mov	r1, r3
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	4b1e      	ldr	r3, [pc, #120]	@ (800608c <ADCOFFS+0xc0>)
 8006014:	f7fa fb8a 	bl	800072c <__aeabi_ddiv>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4610      	mov	r0, r2
 800601e:	4619      	mov	r1, r3
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	4b1a      	ldr	r3, [pc, #104]	@ (8006090 <ADCOFFS+0xc4>)
 8006026:	f7fa fa57 	bl	80004d8 <__aeabi_dmul>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4610      	mov	r0, r2
 8006030:	4619      	mov	r1, r3
 8006032:	f7fa fd29 	bl	8000a88 <__aeabi_d2uiz>
 8006036:	4603      	mov	r3, r0
 8006038:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<4); //none shifted=channel A	1 shifted=load
 800603a:	2310      	movs	r3, #16
 800603c:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 800603e:	89fb      	ldrh	r3, [r7, #14]
 8006040:	099b      	lsrs	r3, r3, #6
 8006042:	b29b      	uxth	r3, r3
 8006044:	b2db      	uxtb	r3, r3
 8006046:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8006048:	89fb      	ldrh	r3, [r7, #14]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	b2db      	uxtb	r3, r3
 800604e:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8006050:	2200      	movs	r2, #0
 8006052:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006056:	480f      	ldr	r0, [pc, #60]	@ (8006094 <ADCOFFS+0xc8>)
 8006058:	f7fc fc55 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 800605c:	f107 0108 	add.w	r1, r7, #8
 8006060:	2364      	movs	r3, #100	@ 0x64
 8006062:	2203      	movs	r2, #3
 8006064:	480c      	ldr	r0, [pc, #48]	@ (8006098 <ADCOFFS+0xcc>)
 8006066:	f7fd fe5d 	bl	8003d24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 800606a:	2201      	movs	r2, #1
 800606c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006070:	4808      	ldr	r0, [pc, #32]	@ (8006094 <ADCOFFS+0xc8>)
 8006072:	f7fc fc48 	bl	8002906 <HAL_GPIO_WritePin>
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	41480000 	.word	0x41480000
 8006084:	c1480000 	.word	0xc1480000
 8006088:	40290000 	.word	0x40290000
 800608c:	40390000 	.word	0x40390000
 8006090:	40d00000 	.word	0x40d00000
 8006094:	40011000 	.word	0x40011000
 8006098:	20000290 	.word	0x20000290

0800609c <RS485_Transmit>:

char TXbuff[RS485BUFFSIZE] = {0};
char RXbuff[RS485BUFFSIZE] = {0};

void RS485_Transmit(char *message)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
	//strcat(message, "\r\n");

	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);	// Enable Driver
 80060a4:	2201      	movs	r2, #1
 80060a6:	2120      	movs	r1, #32
 80060a8:	480a      	ldr	r0, [pc, #40]	@ (80060d4 <RS485_Transmit+0x38>)
 80060aa:	f7fc fc2c 	bl	8002906 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, message, strlen(message), 100);	// Transmit
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fa f84e 	bl	8000150 <strlen>
 80060b4:	4603      	mov	r3, r0
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	2364      	movs	r3, #100	@ 0x64
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	4806      	ldr	r0, [pc, #24]	@ (80060d8 <RS485_Transmit+0x3c>)
 80060be:	f7fe fb85 	bl	80047cc <HAL_UART_Transmit>
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);	// Disable Driver
 80060c2:	2200      	movs	r2, #0
 80060c4:	2120      	movs	r1, #32
 80060c6:	4803      	ldr	r0, [pc, #12]	@ (80060d4 <RS485_Transmit+0x38>)
 80060c8:	f7fc fc1d 	bl	8002906 <HAL_GPIO_WritePin>
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40010c00 	.word	0x40010c00
 80060d8:	200002e8 	.word	0x200002e8

080060dc <SCPIC_FID>:

#include "SCPI_Commands.h"


void SCPIC_FID(struct subword* subwords, int length)
{
 80060dc:	b5b0      	push	{r4, r5, r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d122      	bne.n	8006132 <SCPIC_FID+0x56>
	if(subwords->type != params) return;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d120      	bne.n	8006136 <SCPIC_FID+0x5a>
	Subword subword = *subwords;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f107 0408 	add.w	r4, r7, #8
 80060fa:	461d      	mov	r5, r3
 80060fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	6023      	str	r3, [r4, #0]
	strcpy(TXbuff,"OK\r\n");
 8006104:	4b0e      	ldr	r3, [pc, #56]	@ (8006140 <SCPIC_FID+0x64>)
 8006106:	4a0f      	ldr	r2, [pc, #60]	@ (8006144 <SCPIC_FID+0x68>)
 8006108:	6810      	ldr	r0, [r2, #0]
 800610a:	6018      	str	r0, [r3, #0]
 800610c:	7912      	ldrb	r2, [r2, #4]
 800610e:	711a      	strb	r2, [r3, #4]

	if(subword.type == params && subword.paramType == EVAL_P)
 8006110:	7a3b      	ldrb	r3, [r7, #8]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d110      	bne.n	8006138 <SCPIC_FID+0x5c>
 8006116:	7c3b      	ldrb	r3, [r7, #16]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d10d      	bne.n	8006138 <SCPIC_FID+0x5c>
	{
		uint16_t id = LOLA_GET_FIRMWAREID();
 800611c:	f7ff fd82 	bl	8005c24 <LOLA_GET_FIRMWAREID>
 8006120:	4603      	mov	r3, r0
 8006122:	83fb      	strh	r3, [r7, #30]
		sprintf(TXbuff, "%x\r\n", id);
 8006124:	8bfb      	ldrh	r3, [r7, #30]
 8006126:	461a      	mov	r2, r3
 8006128:	4907      	ldr	r1, [pc, #28]	@ (8006148 <SCPIC_FID+0x6c>)
 800612a:	4805      	ldr	r0, [pc, #20]	@ (8006140 <SCPIC_FID+0x64>)
 800612c:	f001 fa10 	bl	8007550 <siprintf>
 8006130:	e002      	b.n	8006138 <SCPIC_FID+0x5c>
	if(length != 1) return;
 8006132:	bf00      	nop
 8006134:	e000      	b.n	8006138 <SCPIC_FID+0x5c>
	if(subwords->type != params) return;
 8006136:	bf00      	nop

		default:

			break;
	}*/
}
 8006138:	3720      	adds	r7, #32
 800613a:	46bd      	mov	sp, r7
 800613c:	bdb0      	pop	{r4, r5, r7, pc}
 800613e:	bf00      	nop
 8006140:	20000384 	.word	0x20000384
 8006144:	0800a290 	.word	0x0800a290
 8006148:	0800a298 	.word	0x0800a298

0800614c <ReformatString>:
//int defaultClassIndex;
int classLength = 0;
int defaultClassIndex = -1;

void ReformatString(char* chararr, int arrMaxSize)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	e014      	b.n	8006186 <ReformatString+0x3a>
	{
		if (chararr[i] == '\r' || chararr[i] == '\n')
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b0d      	cmp	r3, #13
 8006166:	d005      	beq.n	8006174 <ReformatString+0x28>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b0a      	cmp	r3, #10
 8006172:	d105      	bne.n	8006180 <ReformatString+0x34>
		{
			chararr[i] = '\0';
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4413      	add	r3, r2
 800617a:	2200      	movs	r2, #0
 800617c:	701a      	strb	r2, [r3, #0]
			return;
 800617e:	e00c      	b.n	800619a <ReformatString+0x4e>
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	da05      	bge.n	800619a <ReformatString+0x4e>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	4413      	add	r3, r2
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e0      	bne.n	800615c <ReformatString+0x10>
		}
	}
}
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	bc80      	pop	{r7}
 80061a0:	4770      	bx	lr
	...

080061a4 <generateSubwordn>:

Subword* generateSubwordn(char* subcommand, int length, Class* class)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08c      	sub	sp, #48	@ 0x30
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
	Subword finalSubword = { .type = params, .integerParam = 0, .otherParam = NULL, .paramType = 0 };
 80061b0:	f107 0310 	add.w	r3, r7, #16
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	609a      	str	r2, [r3, #8]
 80061bc:	60da      	str	r2, [r3, #12]
 80061be:	611a      	str	r2, [r3, #16]
 80061c0:	2301      	movs	r3, #1
 80061c2:	743b      	strb	r3, [r7, #16]

	for (int i = 0; i < class->functionsLength; i++)
 80061c4:	2300      	movs	r3, #0
 80061c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061c8:	e016      	b.n	80061f8 <generateSubwordn+0x54>
	{
		if (!strncmp(subcommand, class->functions[i].name, length))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	4413      	add	r3, r2
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	4619      	mov	r1, r3
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f001 fa23 	bl	8007626 <strncmp>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d105      	bne.n	80061f2 <generateSubwordn+0x4e>
		{
			finalSubword.type = function;
 80061e6:	2300      	movs	r3, #0
 80061e8:	743b      	strb	r3, [r7, #16]
			finalSubword.functionIndex = i;
 80061ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ec:	617b      	str	r3, [r7, #20]
			return &finalSubword;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e044      	b.n	800627c <generateSubwordn+0xd8>
	for (int i = 0; i < class->functionsLength; i++)
 80061f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f4:	3301      	adds	r3, #1
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061fe:	429a      	cmp	r2, r3
 8006200:	dbe3      	blt.n	80061ca <generateSubwordn+0x26>
		}
	}

	for (int i = 0; i < paramsLength; i++)
 8006202:	2300      	movs	r3, #0
 8006204:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006206:	e013      	b.n	8006230 <generateSubwordn+0x8c>
	{
		if (!strncmp(subcommand, paramsList[i], length))
 8006208:	4a1e      	ldr	r2, [pc, #120]	@ (8006284 <generateSubwordn+0xe0>)
 800620a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	4619      	mov	r1, r3
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f001 fa06 	bl	8007626 <strncmp>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d104      	bne.n	800622a <generateSubwordn+0x86>
		{
			finalSubword.paramType = (ParamTypes)i;
 8006220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006222:	b2db      	uxtb	r3, r3
 8006224:	763b      	strb	r3, [r7, #24]
			return &finalSubword;
 8006226:	2300      	movs	r3, #0
 8006228:	e028      	b.n	800627c <generateSubwordn+0xd8>
	for (int i = 0; i < paramsLength; i++)
 800622a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622c:	3301      	adds	r3, #1
 800622e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006230:	4b15      	ldr	r3, [pc, #84]	@ (8006288 <generateSubwordn+0xe4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006236:	429a      	cmp	r2, r3
 8006238:	dbe6      	blt.n	8006208 <generateSubwordn+0x64>
		}
	}

	int n;
	if ((n = atoi(subcommand)))
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 fad1 	bl	80067e2 <atoi>
 8006240:	6278      	str	r0, [r7, #36]	@ 0x24
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <generateSubwordn+0xb0>
	{
		finalSubword.paramType = INT_P;
 8006248:	2303      	movs	r3, #3
 800624a:	763b      	strb	r3, [r7, #24]
		finalSubword.integerParam = n;
 800624c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624e:	61fb      	str	r3, [r7, #28]
		return &finalSubword;
 8006250:	2300      	movs	r3, #0
 8006252:	e013      	b.n	800627c <generateSubwordn+0xd8>
	}

	finalSubword.paramType = OTHER_P;
 8006254:	2304      	movs	r3, #4
 8006256:	763b      	strb	r3, [r7, #24]
	finalSubword.otherParam = (char*)calloc(length + 1, sizeof(char));
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	3301      	adds	r3, #1
 800625c:	2101      	movs	r1, #1
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fac4 	bl	80067ec <calloc>
 8006264:	4603      	mov	r3, r0
 8006266:	623b      	str	r3, [r7, #32]
	if (finalSubword.otherParam != NULL) strncpy(finalSubword.otherParam, subcommand, length);
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d005      	beq.n	800627a <generateSubwordn+0xd6>
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	68f9      	ldr	r1, [r7, #12]
 8006274:	4618      	mov	r0, r3
 8006276:	f001 f9e8 	bl	800764a <strncpy>
	return &finalSubword;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3730      	adds	r7, #48	@ 0x30
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	2000000c 	.word	0x2000000c
 8006288:	20000018 	.word	0x20000018

0800628c <findClassIndex>:

int findClassIndex(char* subcommand, int length)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < classLength; i++)
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	e015      	b.n	80062c8 <findClassIndex+0x3c>
	{
		if (!strncmp(subcommand, classList[i].name, length))
 800629c:	4b10      	ldr	r3, [pc, #64]	@ (80062e0 <findClassIndex+0x54>)
 800629e:	6819      	ldr	r1, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4613      	mov	r3, r2
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 f9b7 	bl	8007626 <strncmp>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <findClassIndex+0x36>
		{
			return i;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	e009      	b.n	80062d6 <findClassIndex+0x4a>
	for (int i = 0; i < classLength; i++)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	4b06      	ldr	r3, [pc, #24]	@ (80062e4 <findClassIndex+0x58>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	dbe4      	blt.n	800629c <findClassIndex+0x10>
		}
	}

	return defaultClassIndex;
 80062d2:	4b05      	ldr	r3, [pc, #20]	@ (80062e8 <findClassIndex+0x5c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	200003c4 	.word	0x200003c4
 80062e4:	200003c8 	.word	0x200003c8
 80062e8:	2000001c 	.word	0x2000001c

080062ec <generateWordDirect>:

Word* generateWordDirect(char* command)
{
 80062ec:	b5b0      	push	{r4, r5, r7, lr}
 80062ee:	b090      	sub	sp, #64	@ 0x40
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	Word finalWord = { .address = -1, .subwords = NULL, .subwordsCount = 0 };
 80062f4:	f107 030c 	add.w	r3, r7, #12
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	605a      	str	r2, [r3, #4]
 80062fe:	609a      	str	r2, [r3, #8]
 8006300:	60da      	str	r2, [r3, #12]
 8006302:	f04f 33ff 	mov.w	r3, #4294967295
 8006306:	60fb      	str	r3, [r7, #12]

	char* currSymbol = command;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int intermediateLength = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	63bb      	str	r3, [r7, #56]	@ 0x38
	Class* currentClass = classList;
 8006310:	4b61      	ldr	r3, [pc, #388]	@ (8006498 <generateWordDirect+0x1ac>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	637b      	str	r3, [r7, #52]	@ 0x34
	int currentClassIndex = defaultClassIndex;
 8006316:	4b61      	ldr	r3, [pc, #388]	@ (800649c <generateWordDirect+0x1b0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	62bb      	str	r3, [r7, #40]	@ 0x28

	int isLast = 0;
 800631c:	2300      	movs	r3, #0
 800631e:	633b      	str	r3, [r7, #48]	@ 0x30
	int firstSubWord = 1;
 8006320:	2301      	movs	r3, #1
 8006322:	62fb      	str	r3, [r7, #44]	@ 0x2c

	while (!isLast)
 8006324:	e0af      	b.n	8006486 <generateWordDirect+0x19a>
	{
		isLast = *currSymbol == '\0';
 8006326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	bf0c      	ite	eq
 800632e:	2301      	moveq	r3, #1
 8006330:	2300      	movne	r3, #0
 8006332:	b2db      	uxtb	r3, r3
 8006334:	633b      	str	r3, [r7, #48]	@ 0x30
		switch (*currSymbol)
 8006336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b3f      	cmp	r3, #63	@ 0x3f
 800633c:	d005      	beq.n	800634a <generateWordDirect+0x5e>
 800633e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006340:	dc66      	bgt.n	8006410 <generateWordDirect+0x124>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <generateWordDirect+0x5e>
 8006346:	2b3a      	cmp	r3, #58	@ 0x3a
 8006348:	d162      	bne.n	8006410 <generateWordDirect+0x124>
		{
		case ':':
		case '\0':
		case '?':

			if (intermediateLength == 0) break;
 800634a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634c:	2b00      	cmp	r3, #0
 800634e:	d063      	beq.n	8006418 <generateWordDirect+0x12c>
			if (finalWord.address == -1)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006356:	d109      	bne.n	800636c <generateWordDirect+0x80>
			{
				finalWord.address = atoi(currSymbol - intermediateLength);
 8006358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635a:	425b      	negs	r3, r3
 800635c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800635e:	4413      	add	r3, r2
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fa3e 	bl	80067e2 <atoi>
 8006366:	4603      	mov	r3, r0
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e04e      	b.n	800640a <generateWordDirect+0x11e>
			}

			else
			{
				if (firstSubWord)
 800636c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01f      	beq.n	80063b2 <generateWordDirect+0xc6>
				{
					int index = findClassIndex(currSymbol - intermediateLength, intermediateLength);
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	425b      	negs	r3, r3
 8006376:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006378:	4413      	add	r3, r2
 800637a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff ff85 	bl	800628c <findClassIndex>
 8006382:	6278      	str	r0, [r7, #36]	@ 0x24
					currentClass = &classList[index];
 8006384:	4b44      	ldr	r3, [pc, #272]	@ (8006498 <generateWordDirect+0x1ac>)
 8006386:	6819      	ldr	r1, [r3, #0]
 8006388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800638a:	4613      	mov	r3, r2
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	637b      	str	r3, [r7, #52]	@ 0x34
					finalWord.classIndex = index;
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	613b      	str	r3, [r7, #16]
					currentClassIndex = index;
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	62bb      	str	r3, [r7, #40]	@ 0x28
					firstSubWord = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if (currentClassIndex != defaultClassIndex)
 80063a2:	4b3e      	ldr	r3, [pc, #248]	@ (800649c <generateWordDirect+0x1b0>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d002      	beq.n	80063b2 <generateWordDirect+0xc6>
					{
						intermediateLength = 0;
 80063ac:	2300      	movs	r3, #0
 80063ae:	63bb      	str	r3, [r7, #56]	@ 0x38
						break;
 80063b0:	e033      	b.n	800641a <generateWordDirect+0x12e>
					}
				}

				finalWord.subwordsCount++;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	3301      	adds	r3, #1
 80063b6:	61bb      	str	r3, [r7, #24]
				Subword* intermediate = (Subword*)realloc(finalWord.subwords, finalWord.subwordsCount * sizeof(Subword));
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	4619      	mov	r1, r3
 80063be:	460b      	mov	r3, r1
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	440b      	add	r3, r1
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f000 fae9 	bl	80069a0 <realloc>
 80063ce:	6238      	str	r0, [r7, #32]
				if (intermediate != NULL)
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d019      	beq.n	800640a <generateWordDirect+0x11e>
				{
					finalWord.subwords = intermediate;																				///??????
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	617b      	str	r3, [r7, #20]
					finalWord.subwords[finalWord.subwordsCount - 1] = *generateSubwordn(currSymbol - intermediateLength, intermediateLength, currentClass);
 80063da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063dc:	425b      	negs	r3, r3
 80063de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80063e0:	4413      	add	r3, r2
 80063e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff fedc 	bl	80061a4 <generateSubwordn>
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	4619      	mov	r1, r3
 80063f2:	460b      	mov	r3, r1
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	440b      	add	r3, r1
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	3b14      	subs	r3, #20
 80063fc:	4413      	add	r3, r2
 80063fe:	461c      	mov	r4, r3
 8006400:	4605      	mov	r5, r0
 8006402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006406:	682b      	ldr	r3, [r5, #0]
 8006408:	6023      	str	r3, [r4, #0]
				}
			}

			intermediateLength = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	63bb      	str	r3, [r7, #56]	@ 0x38

			break;
 800640e:	e004      	b.n	800641a <generateWordDirect+0x12e>

		default:
			intermediateLength++;
 8006410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006412:	3301      	adds	r3, #1
 8006414:	63bb      	str	r3, [r7, #56]	@ 0x38
			break;
 8006416:	e000      	b.n	800641a <generateWordDirect+0x12e>
			if (intermediateLength == 0) break;
 8006418:	bf00      	nop

		}

		if (*currSymbol == '?')
 800641a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006420:	d127      	bne.n	8006472 <generateWordDirect+0x186>
		{
			finalWord.subwordsCount++;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	3301      	adds	r3, #1
 8006426:	61bb      	str	r3, [r7, #24]
			Subword* intermediate = (Subword*)realloc(finalWord.subwords, finalWord.subwordsCount * sizeof(Subword));
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	4619      	mov	r1, r3
 800642e:	460b      	mov	r3, r1
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f000 fab1 	bl	80069a0 <realloc>
 800643e:	61f8      	str	r0, [r7, #28]
			if (intermediate != NULL)
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d015      	beq.n	8006472 <generateWordDirect+0x186>
			{
				finalWord.subwords = intermediate;																						///??????
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	617b      	str	r3, [r7, #20]
				finalWord.subwords[finalWord.subwordsCount - 1] = *generateSubwordn("?", 1, currentClass);
 800644a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800644c:	2101      	movs	r1, #1
 800644e:	4814      	ldr	r0, [pc, #80]	@ (80064a0 <generateWordDirect+0x1b4>)
 8006450:	f7ff fea8 	bl	80061a4 <generateSubwordn>
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	4619      	mov	r1, r3
 800645a:	460b      	mov	r3, r1
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	440b      	add	r3, r1
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	3b14      	subs	r3, #20
 8006464:	4413      	add	r3, r2
 8006466:	461c      	mov	r4, r3
 8006468:	4605      	mov	r5, r0
 800646a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800646c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800646e:	682b      	ldr	r3, [r5, #0]
 8006470:	6023      	str	r3, [r4, #0]
			}
		}

		currSymbol += !isLast;
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	2b00      	cmp	r3, #0
 8006476:	bf0c      	ite	eq
 8006478:	2301      	moveq	r3, #1
 800647a:	2300      	movne	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	461a      	mov	r2, r3
 8006480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006482:	4413      	add	r3, r2
 8006484:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (!isLast)
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	2b00      	cmp	r3, #0
 800648a:	f43f af4c 	beq.w	8006326 <generateWordDirect+0x3a>
	}

	return &finalWord;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3740      	adds	r7, #64	@ 0x40
 8006494:	46bd      	mov	sp, r7
 8006496:	bdb0      	pop	{r4, r5, r7, pc}
 8006498:	200003c4 	.word	0x200003c4
 800649c:	2000001c 	.word	0x2000001c
 80064a0:	0800a2ac 	.word	0x0800a2ac

080064a4 <executeWord>:

void executeWord(Word* word)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	if (word->subwordsCount < 1) return;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	dd26      	ble.n	8006502 <executeWord+0x5e>
	if (word->subwords == NULL) return;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d024      	beq.n	8006506 <executeWord+0x62>
	if (word->subwords[0].type != function) return;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d121      	bne.n	800650a <executeWord+0x66>
	int classIndex = word->classIndex;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	60fb      	str	r3, [r7, #12]
	int functionIndex = word->subwords[0].functionIndex;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	60bb      	str	r3, [r7, #8]
	classList[classIndex].functions[functionIndex].run(word->subwords + 1, word->subwordsCount - 1);
 80064d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006514 <executeWord+0x70>)
 80064d6:	6819      	ldr	r1, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4613      	mov	r3, r2
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	4413      	add	r3, r2
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6892      	ldr	r2, [r2, #8]
 80064f2:	f102 0014 	add.w	r0, r2, #20
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	68d2      	ldr	r2, [r2, #12]
 80064fa:	3a01      	subs	r2, #1
 80064fc:	4611      	mov	r1, r2
 80064fe:	4798      	blx	r3
 8006500:	e004      	b.n	800650c <executeWord+0x68>
	if (word->subwordsCount < 1) return;
 8006502:	bf00      	nop
 8006504:	e002      	b.n	800650c <executeWord+0x68>
	if (word->subwords == NULL) return;
 8006506:	bf00      	nop
 8006508:	e000      	b.n	800650c <executeWord+0x68>
	if (word->subwords[0].type != function) return;
 800650a:	bf00      	nop
}
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	200003c4 	.word	0x200003c4

08006518 <addClass>:
	if (isDefault) defaultClassIndex = classLength;
	classLength++;
}

void addClass(Class* class, int isDefault)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
	classList = (Class*)realloc(classList, (classLength + 1) * sizeof(Class));
 8006522:	4b17      	ldr	r3, [pc, #92]	@ (8006580 <addClass+0x68>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4b17      	ldr	r3, [pc, #92]	@ (8006584 <addClass+0x6c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	4619      	mov	r1, r3
 800652e:	460b      	mov	r3, r1
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	440b      	add	r3, r1
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f000 fa31 	bl	80069a0 <realloc>
 800653e:	4603      	mov	r3, r0
 8006540:	4a0f      	ldr	r2, [pc, #60]	@ (8006580 <addClass+0x68>)
 8006542:	6013      	str	r3, [r2, #0]
	classList[classLength] = *class;
 8006544:	4b0e      	ldr	r3, [pc, #56]	@ (8006580 <addClass+0x68>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b0e      	ldr	r3, [pc, #56]	@ (8006584 <addClass+0x6c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4619      	mov	r1, r3
 800654e:	460b      	mov	r3, r1
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	440b      	add	r3, r1
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	ca07      	ldmia	r2, {r0, r1, r2}
 800655c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (isDefault) defaultClassIndex = classLength;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <addClass+0x56>
 8006566:	4b07      	ldr	r3, [pc, #28]	@ (8006584 <addClass+0x6c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a07      	ldr	r2, [pc, #28]	@ (8006588 <addClass+0x70>)
 800656c:	6013      	str	r3, [r2, #0]
	classLength++;
 800656e:	4b05      	ldr	r3, [pc, #20]	@ (8006584 <addClass+0x6c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	4a03      	ldr	r2, [pc, #12]	@ (8006584 <addClass+0x6c>)
 8006576:	6013      	str	r3, [r2, #0]
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	200003c4 	.word	0x200003c4
 8006584:	200003c8 	.word	0x200003c8
 8006588:	2000001c 	.word	0x2000001c

0800658c <writeToRegister>:
uint8_t is_initialised = 0;

I2C_HandleTypeDef I2CHandle;

void writeToRegister(uint16_t device_address, uint16_t memory_address, uint8_t *data)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af04      	add	r7, sp, #16
 8006592:	4603      	mov	r3, r0
 8006594:	603a      	str	r2, [r7, #0]
 8006596:	80fb      	strh	r3, [r7, #6]
 8006598:	460b      	mov	r3, r1
 800659a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&I2CHandle, (device_address<<1), memory_address, 1, data, 1, 1000);
 800659c:	88fb      	ldrh	r3, [r7, #6]
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	b299      	uxth	r1, r3
 80065a2:	88ba      	ldrh	r2, [r7, #4]
 80065a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80065a8:	9302      	str	r3, [sp, #8]
 80065aa:	2301      	movs	r3, #1
 80065ac:	9301      	str	r3, [sp, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	2301      	movs	r3, #1
 80065b4:	4803      	ldr	r0, [pc, #12]	@ (80065c4 <writeToRegister+0x38>)
 80065b6:	f7fc fb03 	bl	8002bc0 <HAL_I2C_Mem_Write>
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	200003d0 	.word	0x200003d0

080065c8 <TCA_Init>:

void TCA_Init(uint8_t address, I2C_HandleTypeDef handle)
{
 80065c8:	b084      	sub	sp, #16
 80065ca:	b590      	push	{r4, r7, lr}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	4604      	mov	r4, r0
 80065d2:	f107 001c 	add.w	r0, r7, #28
 80065d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80065da:	4623      	mov	r3, r4
 80065dc:	71fb      	strb	r3, [r7, #7]
	TCA_address = address;
 80065de:	4a0a      	ldr	r2, [pc, #40]	@ (8006608 <TCA_Init+0x40>)
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	7013      	strb	r3, [r2, #0]
	I2CHandle = handle;
 80065e4:	4b09      	ldr	r3, [pc, #36]	@ (800660c <TCA_Init+0x44>)
 80065e6:	4618      	mov	r0, r3
 80065e8:	f107 031c 	add.w	r3, r7, #28
 80065ec:	2254      	movs	r2, #84	@ 0x54
 80065ee:	4619      	mov	r1, r3
 80065f0:	f001 f8d3 	bl	800779a <memcpy>
	is_initialised = 1;
 80065f4:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <TCA_Init+0x48>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006604:	b004      	add	sp, #16
 8006606:	4770      	bx	lr
 8006608:	20000024 	.word	0x20000024
 800660c:	200003d0 	.word	0x200003d0
 8006610:	200003cc 	.word	0x200003cc

08006614 <TCA_PinMode>:

void TCA_PinMode(uint32_t pin, uint32_t mode)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 800661e:	4b25      	ldr	r3, [pc, #148]	@ (80066b4 <TCA_PinMode+0xa0>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d03d      	beq.n	80066a2 <TCA_PinMode+0x8e>
	if(pin > 15) return;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b0f      	cmp	r3, #15
 800662a:	d83c      	bhi.n	80066a6 <TCA_PinMode+0x92>
	if(mode != 0 && mode != 1) return;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <TCA_PinMode+0x24>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d138      	bne.n	80066aa <TCA_PinMode+0x96>

	uint8_t mask =  1 << (pin % 8);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	2201      	movs	r2, #1
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? PINMODE_REGISTER_LOW : PINMODE_REGISTER_HIGH;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b07      	cmp	r3, #7
 800664a:	d801      	bhi.n	8006650 <TCA_PinMode+0x3c>
 800664c:	2306      	movs	r3, #6
 800664e:	e000      	b.n	8006652 <TCA_PinMode+0x3e>
 8006650:	2307      	movs	r3, #7
 8006652:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &pinmode_register_state_low : &pinmode_register_state_high;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b07      	cmp	r3, #7
 8006658:	d801      	bhi.n	800665e <TCA_PinMode+0x4a>
 800665a:	4b17      	ldr	r3, [pc, #92]	@ (80066b8 <TCA_PinMode+0xa4>)
 800665c:	e000      	b.n	8006660 <TCA_PinMode+0x4c>
 800665e:	4b17      	ldr	r3, [pc, #92]	@ (80066bc <TCA_PinMode+0xa8>)
 8006660:	60bb      	str	r3, [r7, #8]

	if (mode) 	*data |= mask;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d007      	beq.n	8006678 <TCA_PinMode+0x64>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	4313      	orrs	r3, r2
 8006670:	b2da      	uxtb	r2, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	e00b      	b.n	8006690 <TCA_PinMode+0x7c>
	else 		*data &= ~mask;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	b25a      	sxtb	r2, r3
 800667e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006682:	43db      	mvns	r3, r3
 8006684:	b25b      	sxtb	r3, r3
 8006686:	4013      	ands	r3, r2
 8006688:	b25b      	sxtb	r3, r3
 800668a:	b2da      	uxtb	r2, r3
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 8006690:	4b0b      	ldr	r3, [pc, #44]	@ (80066c0 <TCA_PinMode+0xac>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	4618      	mov	r0, r3
 8006696:	89bb      	ldrh	r3, [r7, #12]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	4619      	mov	r1, r3
 800669c:	f7ff ff76 	bl	800658c <writeToRegister>
 80066a0:	e004      	b.n	80066ac <TCA_PinMode+0x98>
	if(!is_initialised) return;
 80066a2:	bf00      	nop
 80066a4:	e002      	b.n	80066ac <TCA_PinMode+0x98>
	if(pin > 15) return;
 80066a6:	bf00      	nop
 80066a8:	e000      	b.n	80066ac <TCA_PinMode+0x98>
	if(mode != 0 && mode != 1) return;
 80066aa:	bf00      	nop
}
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	200003cc 	.word	0x200003cc
 80066b8:	20000022 	.word	0x20000022
 80066bc:	20000023 	.word	0x20000023
 80066c0:	20000024 	.word	0x20000024

080066c4 <TCA_WritePin>:

	writeToRegister(TCA_address, memory_address, data);
}

void TCA_WritePin(uint32_t pin, uint32_t value)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 80066ce:	4b25      	ldr	r3, [pc, #148]	@ (8006764 <TCA_WritePin+0xa0>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d03d      	beq.n	8006752 <TCA_WritePin+0x8e>
	if(pin > 15) return;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b0f      	cmp	r3, #15
 80066da:	d83c      	bhi.n	8006756 <TCA_WritePin+0x92>
	if(value != 0 && value != 1) return;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <TCA_WritePin+0x24>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d138      	bne.n	800675a <TCA_WritePin+0x96>

	uint8_t mask =  1 << (pin % 8);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	2201      	movs	r2, #1
 80066f0:	fa02 f303 	lsl.w	r3, r2, r3
 80066f4:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? OUTPUT_REGISTER_LOW : OUTPUT_REGISTER_HIGH;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b07      	cmp	r3, #7
 80066fa:	d801      	bhi.n	8006700 <TCA_WritePin+0x3c>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e000      	b.n	8006702 <TCA_WritePin+0x3e>
 8006700:	2303      	movs	r3, #3
 8006702:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &output_register_state_low : &output_register_state_high;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b07      	cmp	r3, #7
 8006708:	d801      	bhi.n	800670e <TCA_WritePin+0x4a>
 800670a:	4b17      	ldr	r3, [pc, #92]	@ (8006768 <TCA_WritePin+0xa4>)
 800670c:	e000      	b.n	8006710 <TCA_WritePin+0x4c>
 800670e:	4b17      	ldr	r3, [pc, #92]	@ (800676c <TCA_WritePin+0xa8>)
 8006710:	60bb      	str	r3, [r7, #8]

	if (value)	*data |= mask;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <TCA_WritePin+0x64>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	781a      	ldrb	r2, [r3, #0]
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	4313      	orrs	r3, r2
 8006720:	b2da      	uxtb	r2, r3
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	e00b      	b.n	8006740 <TCA_WritePin+0x7c>
	else 		*data &= ~mask;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	b25a      	sxtb	r2, r3
 800672e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006732:	43db      	mvns	r3, r3
 8006734:	b25b      	sxtb	r3, r3
 8006736:	4013      	ands	r3, r2
 8006738:	b25b      	sxtb	r3, r3
 800673a:	b2da      	uxtb	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 8006740:	4b0b      	ldr	r3, [pc, #44]	@ (8006770 <TCA_WritePin+0xac>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	4618      	mov	r0, r3
 8006746:	89bb      	ldrh	r3, [r7, #12]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	4619      	mov	r1, r3
 800674c:	f7ff ff1e 	bl	800658c <writeToRegister>
 8006750:	e004      	b.n	800675c <TCA_WritePin+0x98>
	if(!is_initialised) return;
 8006752:	bf00      	nop
 8006754:	e002      	b.n	800675c <TCA_WritePin+0x98>
	if(pin > 15) return;
 8006756:	bf00      	nop
 8006758:	e000      	b.n	800675c <TCA_WritePin+0x98>
	if(value != 0 && value != 1) return;
 800675a:	bf00      	nop
}
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	200003cc 	.word	0x200003cc
 8006768:	20000020 	.word	0x20000020
 800676c:	20000021 	.word	0x20000021
 8006770:	20000024 	.word	0x20000024

08006774 <trimInt>:
 */

#include "stdint.h"

int trimInt(int integer, int min, int max)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
	if(integer>max) integer = max;
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	dd02      	ble.n	800678e <trimInt+0x1a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	e005      	b.n	800679a <trimInt+0x26>
	else if(integer<min) integer = min;
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	429a      	cmp	r2, r3
 8006794:	da01      	bge.n	800679a <trimInt+0x26>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	60fb      	str	r3, [r7, #12]
	return integer;
 800679a:	68fb      	ldr	r3, [r7, #12]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr

080067a6 <trimFloat>:

float trimFloat(float floating, float min, float max)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
	if(floating>max) floating = max;
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7fa fca1 	bl	80010fc <__aeabi_fcmpgt>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <trimFloat+0x20>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	e008      	b.n	80067d8 <trimFloat+0x32>
	else if(floating<min) floating = min;
 80067c6:	68b9      	ldr	r1, [r7, #8]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f7fa fc79 	bl	80010c0 <__aeabi_fcmplt>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <trimFloat+0x32>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	60fb      	str	r3, [r7, #12]
	return floating;
 80067d8:	68fb      	ldr	r3, [r7, #12]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <atoi>:
 80067e2:	220a      	movs	r2, #10
 80067e4:	2100      	movs	r1, #0
 80067e6:	f000 b98b 	b.w	8006b00 <strtol>
	...

080067ec <calloc>:
 80067ec:	4b02      	ldr	r3, [pc, #8]	@ (80067f8 <calloc+0xc>)
 80067ee:	460a      	mov	r2, r1
 80067f0:	4601      	mov	r1, r0
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	f000 b802 	b.w	80067fc <_calloc_r>
 80067f8:	20000034 	.word	0x20000034

080067fc <_calloc_r>:
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	fba1 5402 	umull	r5, r4, r1, r2
 8006802:	b93c      	cbnz	r4, 8006814 <_calloc_r+0x18>
 8006804:	4629      	mov	r1, r5
 8006806:	f000 f83f 	bl	8006888 <_malloc_r>
 800680a:	4606      	mov	r6, r0
 800680c:	b928      	cbnz	r0, 800681a <_calloc_r+0x1e>
 800680e:	2600      	movs	r6, #0
 8006810:	4630      	mov	r0, r6
 8006812:	bd70      	pop	{r4, r5, r6, pc}
 8006814:	220c      	movs	r2, #12
 8006816:	6002      	str	r2, [r0, #0]
 8006818:	e7f9      	b.n	800680e <_calloc_r+0x12>
 800681a:	462a      	mov	r2, r5
 800681c:	4621      	mov	r1, r4
 800681e:	f000 fefa 	bl	8007616 <memset>
 8006822:	e7f5      	b.n	8006810 <_calloc_r+0x14>

08006824 <malloc>:
 8006824:	4b02      	ldr	r3, [pc, #8]	@ (8006830 <malloc+0xc>)
 8006826:	4601      	mov	r1, r0
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	f000 b82d 	b.w	8006888 <_malloc_r>
 800682e:	bf00      	nop
 8006830:	20000034 	.word	0x20000034

08006834 <free>:
 8006834:	4b02      	ldr	r3, [pc, #8]	@ (8006840 <free+0xc>)
 8006836:	4601      	mov	r1, r0
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	f001 be0d 	b.w	8008458 <_free_r>
 800683e:	bf00      	nop
 8006840:	20000034 	.word	0x20000034

08006844 <sbrk_aligned>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	4e0f      	ldr	r6, [pc, #60]	@ (8006884 <sbrk_aligned+0x40>)
 8006848:	460c      	mov	r4, r1
 800684a:	6831      	ldr	r1, [r6, #0]
 800684c:	4605      	mov	r5, r0
 800684e:	b911      	cbnz	r1, 8006856 <sbrk_aligned+0x12>
 8006850:	f000 ff46 	bl	80076e0 <_sbrk_r>
 8006854:	6030      	str	r0, [r6, #0]
 8006856:	4621      	mov	r1, r4
 8006858:	4628      	mov	r0, r5
 800685a:	f000 ff41 	bl	80076e0 <_sbrk_r>
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	d103      	bne.n	800686a <sbrk_aligned+0x26>
 8006862:	f04f 34ff 	mov.w	r4, #4294967295
 8006866:	4620      	mov	r0, r4
 8006868:	bd70      	pop	{r4, r5, r6, pc}
 800686a:	1cc4      	adds	r4, r0, #3
 800686c:	f024 0403 	bic.w	r4, r4, #3
 8006870:	42a0      	cmp	r0, r4
 8006872:	d0f8      	beq.n	8006866 <sbrk_aligned+0x22>
 8006874:	1a21      	subs	r1, r4, r0
 8006876:	4628      	mov	r0, r5
 8006878:	f000 ff32 	bl	80076e0 <_sbrk_r>
 800687c:	3001      	adds	r0, #1
 800687e:	d1f2      	bne.n	8006866 <sbrk_aligned+0x22>
 8006880:	e7ef      	b.n	8006862 <sbrk_aligned+0x1e>
 8006882:	bf00      	nop
 8006884:	20000424 	.word	0x20000424

08006888 <_malloc_r>:
 8006888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800688c:	1ccd      	adds	r5, r1, #3
 800688e:	f025 0503 	bic.w	r5, r5, #3
 8006892:	3508      	adds	r5, #8
 8006894:	2d0c      	cmp	r5, #12
 8006896:	bf38      	it	cc
 8006898:	250c      	movcc	r5, #12
 800689a:	2d00      	cmp	r5, #0
 800689c:	4606      	mov	r6, r0
 800689e:	db01      	blt.n	80068a4 <_malloc_r+0x1c>
 80068a0:	42a9      	cmp	r1, r5
 80068a2:	d904      	bls.n	80068ae <_malloc_r+0x26>
 80068a4:	230c      	movs	r3, #12
 80068a6:	6033      	str	r3, [r6, #0]
 80068a8:	2000      	movs	r0, #0
 80068aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006984 <_malloc_r+0xfc>
 80068b2:	f000 f869 	bl	8006988 <__malloc_lock>
 80068b6:	f8d8 3000 	ldr.w	r3, [r8]
 80068ba:	461c      	mov	r4, r3
 80068bc:	bb44      	cbnz	r4, 8006910 <_malloc_r+0x88>
 80068be:	4629      	mov	r1, r5
 80068c0:	4630      	mov	r0, r6
 80068c2:	f7ff ffbf 	bl	8006844 <sbrk_aligned>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	4604      	mov	r4, r0
 80068ca:	d158      	bne.n	800697e <_malloc_r+0xf6>
 80068cc:	f8d8 4000 	ldr.w	r4, [r8]
 80068d0:	4627      	mov	r7, r4
 80068d2:	2f00      	cmp	r7, #0
 80068d4:	d143      	bne.n	800695e <_malloc_r+0xd6>
 80068d6:	2c00      	cmp	r4, #0
 80068d8:	d04b      	beq.n	8006972 <_malloc_r+0xea>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	4639      	mov	r1, r7
 80068de:	4630      	mov	r0, r6
 80068e0:	eb04 0903 	add.w	r9, r4, r3
 80068e4:	f000 fefc 	bl	80076e0 <_sbrk_r>
 80068e8:	4581      	cmp	r9, r0
 80068ea:	d142      	bne.n	8006972 <_malloc_r+0xea>
 80068ec:	6821      	ldr	r1, [r4, #0]
 80068ee:	4630      	mov	r0, r6
 80068f0:	1a6d      	subs	r5, r5, r1
 80068f2:	4629      	mov	r1, r5
 80068f4:	f7ff ffa6 	bl	8006844 <sbrk_aligned>
 80068f8:	3001      	adds	r0, #1
 80068fa:	d03a      	beq.n	8006972 <_malloc_r+0xea>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	442b      	add	r3, r5
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	f8d8 3000 	ldr.w	r3, [r8]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	bb62      	cbnz	r2, 8006964 <_malloc_r+0xdc>
 800690a:	f8c8 7000 	str.w	r7, [r8]
 800690e:	e00f      	b.n	8006930 <_malloc_r+0xa8>
 8006910:	6822      	ldr	r2, [r4, #0]
 8006912:	1b52      	subs	r2, r2, r5
 8006914:	d420      	bmi.n	8006958 <_malloc_r+0xd0>
 8006916:	2a0b      	cmp	r2, #11
 8006918:	d917      	bls.n	800694a <_malloc_r+0xc2>
 800691a:	1961      	adds	r1, r4, r5
 800691c:	42a3      	cmp	r3, r4
 800691e:	6025      	str	r5, [r4, #0]
 8006920:	bf18      	it	ne
 8006922:	6059      	strne	r1, [r3, #4]
 8006924:	6863      	ldr	r3, [r4, #4]
 8006926:	bf08      	it	eq
 8006928:	f8c8 1000 	streq.w	r1, [r8]
 800692c:	5162      	str	r2, [r4, r5]
 800692e:	604b      	str	r3, [r1, #4]
 8006930:	4630      	mov	r0, r6
 8006932:	f000 f82f 	bl	8006994 <__malloc_unlock>
 8006936:	f104 000b 	add.w	r0, r4, #11
 800693a:	1d23      	adds	r3, r4, #4
 800693c:	f020 0007 	bic.w	r0, r0, #7
 8006940:	1ac2      	subs	r2, r0, r3
 8006942:	bf1c      	itt	ne
 8006944:	1a1b      	subne	r3, r3, r0
 8006946:	50a3      	strne	r3, [r4, r2]
 8006948:	e7af      	b.n	80068aa <_malloc_r+0x22>
 800694a:	6862      	ldr	r2, [r4, #4]
 800694c:	42a3      	cmp	r3, r4
 800694e:	bf0c      	ite	eq
 8006950:	f8c8 2000 	streq.w	r2, [r8]
 8006954:	605a      	strne	r2, [r3, #4]
 8006956:	e7eb      	b.n	8006930 <_malloc_r+0xa8>
 8006958:	4623      	mov	r3, r4
 800695a:	6864      	ldr	r4, [r4, #4]
 800695c:	e7ae      	b.n	80068bc <_malloc_r+0x34>
 800695e:	463c      	mov	r4, r7
 8006960:	687f      	ldr	r7, [r7, #4]
 8006962:	e7b6      	b.n	80068d2 <_malloc_r+0x4a>
 8006964:	461a      	mov	r2, r3
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	42a3      	cmp	r3, r4
 800696a:	d1fb      	bne.n	8006964 <_malloc_r+0xdc>
 800696c:	2300      	movs	r3, #0
 800696e:	6053      	str	r3, [r2, #4]
 8006970:	e7de      	b.n	8006930 <_malloc_r+0xa8>
 8006972:	230c      	movs	r3, #12
 8006974:	4630      	mov	r0, r6
 8006976:	6033      	str	r3, [r6, #0]
 8006978:	f000 f80c 	bl	8006994 <__malloc_unlock>
 800697c:	e794      	b.n	80068a8 <_malloc_r+0x20>
 800697e:	6005      	str	r5, [r0, #0]
 8006980:	e7d6      	b.n	8006930 <_malloc_r+0xa8>
 8006982:	bf00      	nop
 8006984:	20000428 	.word	0x20000428

08006988 <__malloc_lock>:
 8006988:	4801      	ldr	r0, [pc, #4]	@ (8006990 <__malloc_lock+0x8>)
 800698a:	f000 bef6 	b.w	800777a <__retarget_lock_acquire_recursive>
 800698e:	bf00      	nop
 8006990:	2000056c 	.word	0x2000056c

08006994 <__malloc_unlock>:
 8006994:	4801      	ldr	r0, [pc, #4]	@ (800699c <__malloc_unlock+0x8>)
 8006996:	f000 bef1 	b.w	800777c <__retarget_lock_release_recursive>
 800699a:	bf00      	nop
 800699c:	2000056c 	.word	0x2000056c

080069a0 <realloc>:
 80069a0:	4b02      	ldr	r3, [pc, #8]	@ (80069ac <realloc+0xc>)
 80069a2:	460a      	mov	r2, r1
 80069a4:	4601      	mov	r1, r0
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	f000 b802 	b.w	80069b0 <_realloc_r>
 80069ac:	20000034 	.word	0x20000034

080069b0 <_realloc_r>:
 80069b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b4:	4680      	mov	r8, r0
 80069b6:	4615      	mov	r5, r2
 80069b8:	460c      	mov	r4, r1
 80069ba:	b921      	cbnz	r1, 80069c6 <_realloc_r+0x16>
 80069bc:	4611      	mov	r1, r2
 80069be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069c2:	f7ff bf61 	b.w	8006888 <_malloc_r>
 80069c6:	b92a      	cbnz	r2, 80069d4 <_realloc_r+0x24>
 80069c8:	f001 fd46 	bl	8008458 <_free_r>
 80069cc:	2400      	movs	r4, #0
 80069ce:	4620      	mov	r0, r4
 80069d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d4:	f002 f908 	bl	8008be8 <_malloc_usable_size_r>
 80069d8:	4285      	cmp	r5, r0
 80069da:	4606      	mov	r6, r0
 80069dc:	d802      	bhi.n	80069e4 <_realloc_r+0x34>
 80069de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80069e2:	d8f4      	bhi.n	80069ce <_realloc_r+0x1e>
 80069e4:	4629      	mov	r1, r5
 80069e6:	4640      	mov	r0, r8
 80069e8:	f7ff ff4e 	bl	8006888 <_malloc_r>
 80069ec:	4607      	mov	r7, r0
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d0ec      	beq.n	80069cc <_realloc_r+0x1c>
 80069f2:	42b5      	cmp	r5, r6
 80069f4:	462a      	mov	r2, r5
 80069f6:	4621      	mov	r1, r4
 80069f8:	bf28      	it	cs
 80069fa:	4632      	movcs	r2, r6
 80069fc:	f000 fecd 	bl	800779a <memcpy>
 8006a00:	4621      	mov	r1, r4
 8006a02:	4640      	mov	r0, r8
 8006a04:	f001 fd28 	bl	8008458 <_free_r>
 8006a08:	463c      	mov	r4, r7
 8006a0a:	e7e0      	b.n	80069ce <_realloc_r+0x1e>

08006a0c <_strtol_l.constprop.0>:
 8006a0c:	2b24      	cmp	r3, #36	@ 0x24
 8006a0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a12:	4686      	mov	lr, r0
 8006a14:	4690      	mov	r8, r2
 8006a16:	d801      	bhi.n	8006a1c <_strtol_l.constprop.0+0x10>
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d106      	bne.n	8006a2a <_strtol_l.constprop.0+0x1e>
 8006a1c:	f000 fe82 	bl	8007724 <__errno>
 8006a20:	2316      	movs	r3, #22
 8006a22:	6003      	str	r3, [r0, #0]
 8006a24:	2000      	movs	r0, #0
 8006a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2a:	460d      	mov	r5, r1
 8006a2c:	4833      	ldr	r0, [pc, #204]	@ (8006afc <_strtol_l.constprop.0+0xf0>)
 8006a2e:	462a      	mov	r2, r5
 8006a30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a34:	5d06      	ldrb	r6, [r0, r4]
 8006a36:	f016 0608 	ands.w	r6, r6, #8
 8006a3a:	d1f8      	bne.n	8006a2e <_strtol_l.constprop.0+0x22>
 8006a3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006a3e:	d12d      	bne.n	8006a9c <_strtol_l.constprop.0+0x90>
 8006a40:	2601      	movs	r6, #1
 8006a42:	782c      	ldrb	r4, [r5, #0]
 8006a44:	1c95      	adds	r5, r2, #2
 8006a46:	f033 0210 	bics.w	r2, r3, #16
 8006a4a:	d109      	bne.n	8006a60 <_strtol_l.constprop.0+0x54>
 8006a4c:	2c30      	cmp	r4, #48	@ 0x30
 8006a4e:	d12a      	bne.n	8006aa6 <_strtol_l.constprop.0+0x9a>
 8006a50:	782a      	ldrb	r2, [r5, #0]
 8006a52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006a56:	2a58      	cmp	r2, #88	@ 0x58
 8006a58:	d125      	bne.n	8006aa6 <_strtol_l.constprop.0+0x9a>
 8006a5a:	2310      	movs	r3, #16
 8006a5c:	786c      	ldrb	r4, [r5, #1]
 8006a5e:	3502      	adds	r5, #2
 8006a60:	2200      	movs	r2, #0
 8006a62:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006a66:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006a6a:	fbbc f9f3 	udiv	r9, ip, r3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	fb03 ca19 	mls	sl, r3, r9, ip
 8006a74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006a78:	2f09      	cmp	r7, #9
 8006a7a:	d81b      	bhi.n	8006ab4 <_strtol_l.constprop.0+0xa8>
 8006a7c:	463c      	mov	r4, r7
 8006a7e:	42a3      	cmp	r3, r4
 8006a80:	dd27      	ble.n	8006ad2 <_strtol_l.constprop.0+0xc6>
 8006a82:	1c57      	adds	r7, r2, #1
 8006a84:	d007      	beq.n	8006a96 <_strtol_l.constprop.0+0x8a>
 8006a86:	4581      	cmp	r9, r0
 8006a88:	d320      	bcc.n	8006acc <_strtol_l.constprop.0+0xc0>
 8006a8a:	d101      	bne.n	8006a90 <_strtol_l.constprop.0+0x84>
 8006a8c:	45a2      	cmp	sl, r4
 8006a8e:	db1d      	blt.n	8006acc <_strtol_l.constprop.0+0xc0>
 8006a90:	2201      	movs	r2, #1
 8006a92:	fb00 4003 	mla	r0, r0, r3, r4
 8006a96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a9a:	e7eb      	b.n	8006a74 <_strtol_l.constprop.0+0x68>
 8006a9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8006a9e:	bf04      	itt	eq
 8006aa0:	782c      	ldrbeq	r4, [r5, #0]
 8006aa2:	1c95      	addeq	r5, r2, #2
 8006aa4:	e7cf      	b.n	8006a46 <_strtol_l.constprop.0+0x3a>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1da      	bne.n	8006a60 <_strtol_l.constprop.0+0x54>
 8006aaa:	2c30      	cmp	r4, #48	@ 0x30
 8006aac:	bf0c      	ite	eq
 8006aae:	2308      	moveq	r3, #8
 8006ab0:	230a      	movne	r3, #10
 8006ab2:	e7d5      	b.n	8006a60 <_strtol_l.constprop.0+0x54>
 8006ab4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006ab8:	2f19      	cmp	r7, #25
 8006aba:	d801      	bhi.n	8006ac0 <_strtol_l.constprop.0+0xb4>
 8006abc:	3c37      	subs	r4, #55	@ 0x37
 8006abe:	e7de      	b.n	8006a7e <_strtol_l.constprop.0+0x72>
 8006ac0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006ac4:	2f19      	cmp	r7, #25
 8006ac6:	d804      	bhi.n	8006ad2 <_strtol_l.constprop.0+0xc6>
 8006ac8:	3c57      	subs	r4, #87	@ 0x57
 8006aca:	e7d8      	b.n	8006a7e <_strtol_l.constprop.0+0x72>
 8006acc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad0:	e7e1      	b.n	8006a96 <_strtol_l.constprop.0+0x8a>
 8006ad2:	1c53      	adds	r3, r2, #1
 8006ad4:	d108      	bne.n	8006ae8 <_strtol_l.constprop.0+0xdc>
 8006ad6:	2322      	movs	r3, #34	@ 0x22
 8006ad8:	4660      	mov	r0, ip
 8006ada:	f8ce 3000 	str.w	r3, [lr]
 8006ade:	f1b8 0f00 	cmp.w	r8, #0
 8006ae2:	d0a0      	beq.n	8006a26 <_strtol_l.constprop.0+0x1a>
 8006ae4:	1e69      	subs	r1, r5, #1
 8006ae6:	e006      	b.n	8006af6 <_strtol_l.constprop.0+0xea>
 8006ae8:	b106      	cbz	r6, 8006aec <_strtol_l.constprop.0+0xe0>
 8006aea:	4240      	negs	r0, r0
 8006aec:	f1b8 0f00 	cmp.w	r8, #0
 8006af0:	d099      	beq.n	8006a26 <_strtol_l.constprop.0+0x1a>
 8006af2:	2a00      	cmp	r2, #0
 8006af4:	d1f6      	bne.n	8006ae4 <_strtol_l.constprop.0+0xd8>
 8006af6:	f8c8 1000 	str.w	r1, [r8]
 8006afa:	e794      	b.n	8006a26 <_strtol_l.constprop.0+0x1a>
 8006afc:	0800a2e3 	.word	0x0800a2e3

08006b00 <strtol>:
 8006b00:	4613      	mov	r3, r2
 8006b02:	460a      	mov	r2, r1
 8006b04:	4601      	mov	r1, r0
 8006b06:	4802      	ldr	r0, [pc, #8]	@ (8006b10 <strtol+0x10>)
 8006b08:	6800      	ldr	r0, [r0, #0]
 8006b0a:	f7ff bf7f 	b.w	8006a0c <_strtol_l.constprop.0>
 8006b0e:	bf00      	nop
 8006b10:	20000034 	.word	0x20000034

08006b14 <__cvt>:
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1a:	461d      	mov	r5, r3
 8006b1c:	bfbb      	ittet	lt
 8006b1e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006b22:	461d      	movlt	r5, r3
 8006b24:	2300      	movge	r3, #0
 8006b26:	232d      	movlt	r3, #45	@ 0x2d
 8006b28:	b088      	sub	sp, #32
 8006b2a:	4614      	mov	r4, r2
 8006b2c:	bfb8      	it	lt
 8006b2e:	4614      	movlt	r4, r2
 8006b30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006b32:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006b34:	7013      	strb	r3, [r2, #0]
 8006b36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b38:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006b3c:	f023 0820 	bic.w	r8, r3, #32
 8006b40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b44:	d005      	beq.n	8006b52 <__cvt+0x3e>
 8006b46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006b4a:	d100      	bne.n	8006b4e <__cvt+0x3a>
 8006b4c:	3601      	adds	r6, #1
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e000      	b.n	8006b54 <__cvt+0x40>
 8006b52:	2303      	movs	r3, #3
 8006b54:	aa07      	add	r2, sp, #28
 8006b56:	9204      	str	r2, [sp, #16]
 8006b58:	aa06      	add	r2, sp, #24
 8006b5a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006b5e:	e9cd 3600 	strd	r3, r6, [sp]
 8006b62:	4622      	mov	r2, r4
 8006b64:	462b      	mov	r3, r5
 8006b66:	f000 feaf 	bl	80078c8 <_dtoa_r>
 8006b6a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b6e:	4607      	mov	r7, r0
 8006b70:	d119      	bne.n	8006ba6 <__cvt+0x92>
 8006b72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b74:	07db      	lsls	r3, r3, #31
 8006b76:	d50e      	bpl.n	8006b96 <__cvt+0x82>
 8006b78:	eb00 0906 	add.w	r9, r0, r6
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2300      	movs	r3, #0
 8006b80:	4620      	mov	r0, r4
 8006b82:	4629      	mov	r1, r5
 8006b84:	f7f9 ff10 	bl	80009a8 <__aeabi_dcmpeq>
 8006b88:	b108      	cbz	r0, 8006b8e <__cvt+0x7a>
 8006b8a:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b8e:	2230      	movs	r2, #48	@ 0x30
 8006b90:	9b07      	ldr	r3, [sp, #28]
 8006b92:	454b      	cmp	r3, r9
 8006b94:	d31e      	bcc.n	8006bd4 <__cvt+0xc0>
 8006b96:	4638      	mov	r0, r7
 8006b98:	9b07      	ldr	r3, [sp, #28]
 8006b9a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006b9c:	1bdb      	subs	r3, r3, r7
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	b008      	add	sp, #32
 8006ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006baa:	eb00 0906 	add.w	r9, r0, r6
 8006bae:	d1e5      	bne.n	8006b7c <__cvt+0x68>
 8006bb0:	7803      	ldrb	r3, [r0, #0]
 8006bb2:	2b30      	cmp	r3, #48	@ 0x30
 8006bb4:	d10a      	bne.n	8006bcc <__cvt+0xb8>
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2300      	movs	r3, #0
 8006bba:	4620      	mov	r0, r4
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	f7f9 fef3 	bl	80009a8 <__aeabi_dcmpeq>
 8006bc2:	b918      	cbnz	r0, 8006bcc <__cvt+0xb8>
 8006bc4:	f1c6 0601 	rsb	r6, r6, #1
 8006bc8:	f8ca 6000 	str.w	r6, [sl]
 8006bcc:	f8da 3000 	ldr.w	r3, [sl]
 8006bd0:	4499      	add	r9, r3
 8006bd2:	e7d3      	b.n	8006b7c <__cvt+0x68>
 8006bd4:	1c59      	adds	r1, r3, #1
 8006bd6:	9107      	str	r1, [sp, #28]
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	e7d9      	b.n	8006b90 <__cvt+0x7c>

08006bdc <__exponent>:
 8006bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bde:	2900      	cmp	r1, #0
 8006be0:	bfb6      	itet	lt
 8006be2:	232d      	movlt	r3, #45	@ 0x2d
 8006be4:	232b      	movge	r3, #43	@ 0x2b
 8006be6:	4249      	neglt	r1, r1
 8006be8:	2909      	cmp	r1, #9
 8006bea:	7002      	strb	r2, [r0, #0]
 8006bec:	7043      	strb	r3, [r0, #1]
 8006bee:	dd29      	ble.n	8006c44 <__exponent+0x68>
 8006bf0:	f10d 0307 	add.w	r3, sp, #7
 8006bf4:	461d      	mov	r5, r3
 8006bf6:	270a      	movs	r7, #10
 8006bf8:	fbb1 f6f7 	udiv	r6, r1, r7
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	fb07 1416 	mls	r4, r7, r6, r1
 8006c02:	3430      	adds	r4, #48	@ 0x30
 8006c04:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c08:	460c      	mov	r4, r1
 8006c0a:	2c63      	cmp	r4, #99	@ 0x63
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c12:	dcf1      	bgt.n	8006bf8 <__exponent+0x1c>
 8006c14:	3130      	adds	r1, #48	@ 0x30
 8006c16:	1e94      	subs	r4, r2, #2
 8006c18:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	1c41      	adds	r1, r0, #1
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	d30a      	bcc.n	8006c3a <__exponent+0x5e>
 8006c24:	f10d 0309 	add.w	r3, sp, #9
 8006c28:	1a9b      	subs	r3, r3, r2
 8006c2a:	42ac      	cmp	r4, r5
 8006c2c:	bf88      	it	hi
 8006c2e:	2300      	movhi	r3, #0
 8006c30:	3302      	adds	r3, #2
 8006c32:	4403      	add	r3, r0
 8006c34:	1a18      	subs	r0, r3, r0
 8006c36:	b003      	add	sp, #12
 8006c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c3a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c3e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c42:	e7ed      	b.n	8006c20 <__exponent+0x44>
 8006c44:	2330      	movs	r3, #48	@ 0x30
 8006c46:	3130      	adds	r1, #48	@ 0x30
 8006c48:	7083      	strb	r3, [r0, #2]
 8006c4a:	70c1      	strb	r1, [r0, #3]
 8006c4c:	1d03      	adds	r3, r0, #4
 8006c4e:	e7f1      	b.n	8006c34 <__exponent+0x58>

08006c50 <_printf_float>:
 8006c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c54:	b091      	sub	sp, #68	@ 0x44
 8006c56:	460c      	mov	r4, r1
 8006c58:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006c5c:	4616      	mov	r6, r2
 8006c5e:	461f      	mov	r7, r3
 8006c60:	4605      	mov	r5, r0
 8006c62:	f000 fd05 	bl	8007670 <_localeconv_r>
 8006c66:	6803      	ldr	r3, [r0, #0]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	9308      	str	r3, [sp, #32]
 8006c6c:	f7f9 fa70 	bl	8000150 <strlen>
 8006c70:	2300      	movs	r3, #0
 8006c72:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c74:	f8d8 3000 	ldr.w	r3, [r8]
 8006c78:	9009      	str	r0, [sp, #36]	@ 0x24
 8006c7a:	3307      	adds	r3, #7
 8006c7c:	f023 0307 	bic.w	r3, r3, #7
 8006c80:	f103 0208 	add.w	r2, r3, #8
 8006c84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c88:	f8d4 b000 	ldr.w	fp, [r4]
 8006c8c:	f8c8 2000 	str.w	r2, [r8]
 8006c90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c9a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006ca6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006caa:	4b9c      	ldr	r3, [pc, #624]	@ (8006f1c <_printf_float+0x2cc>)
 8006cac:	f7f9 feae 	bl	8000a0c <__aeabi_dcmpun>
 8006cb0:	bb70      	cbnz	r0, 8006d10 <_printf_float+0xc0>
 8006cb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cba:	4b98      	ldr	r3, [pc, #608]	@ (8006f1c <_printf_float+0x2cc>)
 8006cbc:	f7f9 fe88 	bl	80009d0 <__aeabi_dcmple>
 8006cc0:	bb30      	cbnz	r0, 8006d10 <_printf_float+0xc0>
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	4640      	mov	r0, r8
 8006cc8:	4649      	mov	r1, r9
 8006cca:	f7f9 fe77 	bl	80009bc <__aeabi_dcmplt>
 8006cce:	b110      	cbz	r0, 8006cd6 <_printf_float+0x86>
 8006cd0:	232d      	movs	r3, #45	@ 0x2d
 8006cd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cd6:	4a92      	ldr	r2, [pc, #584]	@ (8006f20 <_printf_float+0x2d0>)
 8006cd8:	4b92      	ldr	r3, [pc, #584]	@ (8006f24 <_printf_float+0x2d4>)
 8006cda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006cde:	bf94      	ite	ls
 8006ce0:	4690      	movls	r8, r2
 8006ce2:	4698      	movhi	r8, r3
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	f04f 0900 	mov.w	r9, #0
 8006cea:	6123      	str	r3, [r4, #16]
 8006cec:	f02b 0304 	bic.w	r3, fp, #4
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	4633      	mov	r3, r6
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	9700      	str	r7, [sp, #0]
 8006cfa:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006cfc:	f000 f9d4 	bl	80070a8 <_printf_common>
 8006d00:	3001      	adds	r0, #1
 8006d02:	f040 8090 	bne.w	8006e26 <_printf_float+0x1d6>
 8006d06:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0a:	b011      	add	sp, #68	@ 0x44
 8006d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d10:	4642      	mov	r2, r8
 8006d12:	464b      	mov	r3, r9
 8006d14:	4640      	mov	r0, r8
 8006d16:	4649      	mov	r1, r9
 8006d18:	f7f9 fe78 	bl	8000a0c <__aeabi_dcmpun>
 8006d1c:	b148      	cbz	r0, 8006d32 <_printf_float+0xe2>
 8006d1e:	464b      	mov	r3, r9
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bfb8      	it	lt
 8006d24:	232d      	movlt	r3, #45	@ 0x2d
 8006d26:	4a80      	ldr	r2, [pc, #512]	@ (8006f28 <_printf_float+0x2d8>)
 8006d28:	bfb8      	it	lt
 8006d2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8006f2c <_printf_float+0x2dc>)
 8006d30:	e7d3      	b.n	8006cda <_printf_float+0x8a>
 8006d32:	6863      	ldr	r3, [r4, #4]
 8006d34:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	d13f      	bne.n	8006dbc <_printf_float+0x16c>
 8006d3c:	2306      	movs	r3, #6
 8006d3e:	6063      	str	r3, [r4, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	9206      	str	r2, [sp, #24]
 8006d4a:	aa0e      	add	r2, sp, #56	@ 0x38
 8006d4c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006d50:	aa0d      	add	r2, sp, #52	@ 0x34
 8006d52:	9203      	str	r2, [sp, #12]
 8006d54:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006d58:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006d5c:	6863      	ldr	r3, [r4, #4]
 8006d5e:	4642      	mov	r2, r8
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	4628      	mov	r0, r5
 8006d64:	464b      	mov	r3, r9
 8006d66:	910a      	str	r1, [sp, #40]	@ 0x28
 8006d68:	f7ff fed4 	bl	8006b14 <__cvt>
 8006d6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d6e:	4680      	mov	r8, r0
 8006d70:	2947      	cmp	r1, #71	@ 0x47
 8006d72:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006d74:	d128      	bne.n	8006dc8 <_printf_float+0x178>
 8006d76:	1cc8      	adds	r0, r1, #3
 8006d78:	db02      	blt.n	8006d80 <_printf_float+0x130>
 8006d7a:	6863      	ldr	r3, [r4, #4]
 8006d7c:	4299      	cmp	r1, r3
 8006d7e:	dd40      	ble.n	8006e02 <_printf_float+0x1b2>
 8006d80:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d84:	fa5f fa8a 	uxtb.w	sl, sl
 8006d88:	4652      	mov	r2, sl
 8006d8a:	3901      	subs	r1, #1
 8006d8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d90:	910d      	str	r1, [sp, #52]	@ 0x34
 8006d92:	f7ff ff23 	bl	8006bdc <__exponent>
 8006d96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d98:	4681      	mov	r9, r0
 8006d9a:	1813      	adds	r3, r2, r0
 8006d9c:	2a01      	cmp	r2, #1
 8006d9e:	6123      	str	r3, [r4, #16]
 8006da0:	dc02      	bgt.n	8006da8 <_printf_float+0x158>
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	07d2      	lsls	r2, r2, #31
 8006da6:	d501      	bpl.n	8006dac <_printf_float+0x15c>
 8006da8:	3301      	adds	r3, #1
 8006daa:	6123      	str	r3, [r4, #16]
 8006dac:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d09e      	beq.n	8006cf2 <_printf_float+0xa2>
 8006db4:	232d      	movs	r3, #45	@ 0x2d
 8006db6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dba:	e79a      	b.n	8006cf2 <_printf_float+0xa2>
 8006dbc:	2947      	cmp	r1, #71	@ 0x47
 8006dbe:	d1bf      	bne.n	8006d40 <_printf_float+0xf0>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1bd      	bne.n	8006d40 <_printf_float+0xf0>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e7ba      	b.n	8006d3e <_printf_float+0xee>
 8006dc8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006dcc:	d9dc      	bls.n	8006d88 <_printf_float+0x138>
 8006dce:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006dd2:	d118      	bne.n	8006e06 <_printf_float+0x1b6>
 8006dd4:	2900      	cmp	r1, #0
 8006dd6:	6863      	ldr	r3, [r4, #4]
 8006dd8:	dd0b      	ble.n	8006df2 <_printf_float+0x1a2>
 8006dda:	6121      	str	r1, [r4, #16]
 8006ddc:	b913      	cbnz	r3, 8006de4 <_printf_float+0x194>
 8006dde:	6822      	ldr	r2, [r4, #0]
 8006de0:	07d0      	lsls	r0, r2, #31
 8006de2:	d502      	bpl.n	8006dea <_printf_float+0x19a>
 8006de4:	3301      	adds	r3, #1
 8006de6:	440b      	add	r3, r1
 8006de8:	6123      	str	r3, [r4, #16]
 8006dea:	f04f 0900 	mov.w	r9, #0
 8006dee:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006df0:	e7dc      	b.n	8006dac <_printf_float+0x15c>
 8006df2:	b913      	cbnz	r3, 8006dfa <_printf_float+0x1aa>
 8006df4:	6822      	ldr	r2, [r4, #0]
 8006df6:	07d2      	lsls	r2, r2, #31
 8006df8:	d501      	bpl.n	8006dfe <_printf_float+0x1ae>
 8006dfa:	3302      	adds	r3, #2
 8006dfc:	e7f4      	b.n	8006de8 <_printf_float+0x198>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e7f2      	b.n	8006de8 <_printf_float+0x198>
 8006e02:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e08:	4299      	cmp	r1, r3
 8006e0a:	db05      	blt.n	8006e18 <_printf_float+0x1c8>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	6121      	str	r1, [r4, #16]
 8006e10:	07d8      	lsls	r0, r3, #31
 8006e12:	d5ea      	bpl.n	8006dea <_printf_float+0x19a>
 8006e14:	1c4b      	adds	r3, r1, #1
 8006e16:	e7e7      	b.n	8006de8 <_printf_float+0x198>
 8006e18:	2900      	cmp	r1, #0
 8006e1a:	bfcc      	ite	gt
 8006e1c:	2201      	movgt	r2, #1
 8006e1e:	f1c1 0202 	rsble	r2, r1, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	e7e0      	b.n	8006de8 <_printf_float+0x198>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	055a      	lsls	r2, r3, #21
 8006e2a:	d407      	bmi.n	8006e3c <_printf_float+0x1ec>
 8006e2c:	6923      	ldr	r3, [r4, #16]
 8006e2e:	4642      	mov	r2, r8
 8006e30:	4631      	mov	r1, r6
 8006e32:	4628      	mov	r0, r5
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	d12b      	bne.n	8006e92 <_printf_float+0x242>
 8006e3a:	e764      	b.n	8006d06 <_printf_float+0xb6>
 8006e3c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e40:	f240 80dc 	bls.w	8006ffc <_printf_float+0x3ac>
 8006e44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f7f9 fdac 	bl	80009a8 <__aeabi_dcmpeq>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d033      	beq.n	8006ebc <_printf_float+0x26c>
 8006e54:	2301      	movs	r3, #1
 8006e56:	4631      	mov	r1, r6
 8006e58:	4628      	mov	r0, r5
 8006e5a:	4a35      	ldr	r2, [pc, #212]	@ (8006f30 <_printf_float+0x2e0>)
 8006e5c:	47b8      	blx	r7
 8006e5e:	3001      	adds	r0, #1
 8006e60:	f43f af51 	beq.w	8006d06 <_printf_float+0xb6>
 8006e64:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006e68:	4543      	cmp	r3, r8
 8006e6a:	db02      	blt.n	8006e72 <_printf_float+0x222>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	07d8      	lsls	r0, r3, #31
 8006e70:	d50f      	bpl.n	8006e92 <_printf_float+0x242>
 8006e72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f43f af42 	beq.w	8006d06 <_printf_float+0xb6>
 8006e82:	f04f 0900 	mov.w	r9, #0
 8006e86:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e8a:	f104 0a1a 	add.w	sl, r4, #26
 8006e8e:	45c8      	cmp	r8, r9
 8006e90:	dc09      	bgt.n	8006ea6 <_printf_float+0x256>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	079b      	lsls	r3, r3, #30
 8006e96:	f100 8102 	bmi.w	800709e <_printf_float+0x44e>
 8006e9a:	68e0      	ldr	r0, [r4, #12]
 8006e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	bfb8      	it	lt
 8006ea2:	4618      	movlt	r0, r3
 8006ea4:	e731      	b.n	8006d0a <_printf_float+0xba>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4652      	mov	r2, sl
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f af28 	beq.w	8006d06 <_printf_float+0xb6>
 8006eb6:	f109 0901 	add.w	r9, r9, #1
 8006eba:	e7e8      	b.n	8006e8e <_printf_float+0x23e>
 8006ebc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	dc38      	bgt.n	8006f34 <_printf_float+0x2e4>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	4a19      	ldr	r2, [pc, #100]	@ (8006f30 <_printf_float+0x2e0>)
 8006eca:	47b8      	blx	r7
 8006ecc:	3001      	adds	r0, #1
 8006ece:	f43f af1a 	beq.w	8006d06 <_printf_float+0xb6>
 8006ed2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006ed6:	ea59 0303 	orrs.w	r3, r9, r3
 8006eda:	d102      	bne.n	8006ee2 <_printf_float+0x292>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	07d9      	lsls	r1, r3, #31
 8006ee0:	d5d7      	bpl.n	8006e92 <_printf_float+0x242>
 8006ee2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	4628      	mov	r0, r5
 8006eea:	47b8      	blx	r7
 8006eec:	3001      	adds	r0, #1
 8006eee:	f43f af0a 	beq.w	8006d06 <_printf_float+0xb6>
 8006ef2:	f04f 0a00 	mov.w	sl, #0
 8006ef6:	f104 0b1a 	add.w	fp, r4, #26
 8006efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006efc:	425b      	negs	r3, r3
 8006efe:	4553      	cmp	r3, sl
 8006f00:	dc01      	bgt.n	8006f06 <_printf_float+0x2b6>
 8006f02:	464b      	mov	r3, r9
 8006f04:	e793      	b.n	8006e2e <_printf_float+0x1de>
 8006f06:	2301      	movs	r3, #1
 8006f08:	465a      	mov	r2, fp
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	47b8      	blx	r7
 8006f10:	3001      	adds	r0, #1
 8006f12:	f43f aef8 	beq.w	8006d06 <_printf_float+0xb6>
 8006f16:	f10a 0a01 	add.w	sl, sl, #1
 8006f1a:	e7ee      	b.n	8006efa <_printf_float+0x2aa>
 8006f1c:	7fefffff 	.word	0x7fefffff
 8006f20:	0800a3e3 	.word	0x0800a3e3
 8006f24:	0800a3e7 	.word	0x0800a3e7
 8006f28:	0800a3eb 	.word	0x0800a3eb
 8006f2c:	0800a3ef 	.word	0x0800a3ef
 8006f30:	0800a3f3 	.word	0x0800a3f3
 8006f34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f36:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006f3a:	4553      	cmp	r3, sl
 8006f3c:	bfa8      	it	ge
 8006f3e:	4653      	movge	r3, sl
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	4699      	mov	r9, r3
 8006f44:	dc36      	bgt.n	8006fb4 <_printf_float+0x364>
 8006f46:	f04f 0b00 	mov.w	fp, #0
 8006f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f4e:	f104 021a 	add.w	r2, r4, #26
 8006f52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f54:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f56:	eba3 0309 	sub.w	r3, r3, r9
 8006f5a:	455b      	cmp	r3, fp
 8006f5c:	dc31      	bgt.n	8006fc2 <_printf_float+0x372>
 8006f5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f60:	459a      	cmp	sl, r3
 8006f62:	dc3a      	bgt.n	8006fda <_printf_float+0x38a>
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	07da      	lsls	r2, r3, #31
 8006f68:	d437      	bmi.n	8006fda <_printf_float+0x38a>
 8006f6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f6c:	ebaa 0903 	sub.w	r9, sl, r3
 8006f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f72:	ebaa 0303 	sub.w	r3, sl, r3
 8006f76:	4599      	cmp	r9, r3
 8006f78:	bfa8      	it	ge
 8006f7a:	4699      	movge	r9, r3
 8006f7c:	f1b9 0f00 	cmp.w	r9, #0
 8006f80:	dc33      	bgt.n	8006fea <_printf_float+0x39a>
 8006f82:	f04f 0800 	mov.w	r8, #0
 8006f86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f8a:	f104 0b1a 	add.w	fp, r4, #26
 8006f8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f90:	ebaa 0303 	sub.w	r3, sl, r3
 8006f94:	eba3 0309 	sub.w	r3, r3, r9
 8006f98:	4543      	cmp	r3, r8
 8006f9a:	f77f af7a 	ble.w	8006e92 <_printf_float+0x242>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	465a      	mov	r2, fp
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b8      	blx	r7
 8006fa8:	3001      	adds	r0, #1
 8006faa:	f43f aeac 	beq.w	8006d06 <_printf_float+0xb6>
 8006fae:	f108 0801 	add.w	r8, r8, #1
 8006fb2:	e7ec      	b.n	8006f8e <_printf_float+0x33e>
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	4628      	mov	r0, r5
 8006fba:	47b8      	blx	r7
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d1c2      	bne.n	8006f46 <_printf_float+0x2f6>
 8006fc0:	e6a1      	b.n	8006d06 <_printf_float+0xb6>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	920a      	str	r2, [sp, #40]	@ 0x28
 8006fca:	47b8      	blx	r7
 8006fcc:	3001      	adds	r0, #1
 8006fce:	f43f ae9a 	beq.w	8006d06 <_printf_float+0xb6>
 8006fd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fd4:	f10b 0b01 	add.w	fp, fp, #1
 8006fd8:	e7bb      	b.n	8006f52 <_printf_float+0x302>
 8006fda:	4631      	mov	r1, r6
 8006fdc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b8      	blx	r7
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d1c0      	bne.n	8006f6a <_printf_float+0x31a>
 8006fe8:	e68d      	b.n	8006d06 <_printf_float+0xb6>
 8006fea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fec:	464b      	mov	r3, r9
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	4442      	add	r2, r8
 8006ff4:	47b8      	blx	r7
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d1c3      	bne.n	8006f82 <_printf_float+0x332>
 8006ffa:	e684      	b.n	8006d06 <_printf_float+0xb6>
 8006ffc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007000:	f1ba 0f01 	cmp.w	sl, #1
 8007004:	dc01      	bgt.n	800700a <_printf_float+0x3ba>
 8007006:	07db      	lsls	r3, r3, #31
 8007008:	d536      	bpl.n	8007078 <_printf_float+0x428>
 800700a:	2301      	movs	r3, #1
 800700c:	4642      	mov	r2, r8
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	f43f ae76 	beq.w	8006d06 <_printf_float+0xb6>
 800701a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800701e:	4631      	mov	r1, r6
 8007020:	4628      	mov	r0, r5
 8007022:	47b8      	blx	r7
 8007024:	3001      	adds	r0, #1
 8007026:	f43f ae6e 	beq.w	8006d06 <_printf_float+0xb6>
 800702a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800702e:	2200      	movs	r2, #0
 8007030:	2300      	movs	r3, #0
 8007032:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007036:	f7f9 fcb7 	bl	80009a8 <__aeabi_dcmpeq>
 800703a:	b9c0      	cbnz	r0, 800706e <_printf_float+0x41e>
 800703c:	4653      	mov	r3, sl
 800703e:	f108 0201 	add.w	r2, r8, #1
 8007042:	4631      	mov	r1, r6
 8007044:	4628      	mov	r0, r5
 8007046:	47b8      	blx	r7
 8007048:	3001      	adds	r0, #1
 800704a:	d10c      	bne.n	8007066 <_printf_float+0x416>
 800704c:	e65b      	b.n	8006d06 <_printf_float+0xb6>
 800704e:	2301      	movs	r3, #1
 8007050:	465a      	mov	r2, fp
 8007052:	4631      	mov	r1, r6
 8007054:	4628      	mov	r0, r5
 8007056:	47b8      	blx	r7
 8007058:	3001      	adds	r0, #1
 800705a:	f43f ae54 	beq.w	8006d06 <_printf_float+0xb6>
 800705e:	f108 0801 	add.w	r8, r8, #1
 8007062:	45d0      	cmp	r8, sl
 8007064:	dbf3      	blt.n	800704e <_printf_float+0x3fe>
 8007066:	464b      	mov	r3, r9
 8007068:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800706c:	e6e0      	b.n	8006e30 <_printf_float+0x1e0>
 800706e:	f04f 0800 	mov.w	r8, #0
 8007072:	f104 0b1a 	add.w	fp, r4, #26
 8007076:	e7f4      	b.n	8007062 <_printf_float+0x412>
 8007078:	2301      	movs	r3, #1
 800707a:	4642      	mov	r2, r8
 800707c:	e7e1      	b.n	8007042 <_printf_float+0x3f2>
 800707e:	2301      	movs	r3, #1
 8007080:	464a      	mov	r2, r9
 8007082:	4631      	mov	r1, r6
 8007084:	4628      	mov	r0, r5
 8007086:	47b8      	blx	r7
 8007088:	3001      	adds	r0, #1
 800708a:	f43f ae3c 	beq.w	8006d06 <_printf_float+0xb6>
 800708e:	f108 0801 	add.w	r8, r8, #1
 8007092:	68e3      	ldr	r3, [r4, #12]
 8007094:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007096:	1a5b      	subs	r3, r3, r1
 8007098:	4543      	cmp	r3, r8
 800709a:	dcf0      	bgt.n	800707e <_printf_float+0x42e>
 800709c:	e6fd      	b.n	8006e9a <_printf_float+0x24a>
 800709e:	f04f 0800 	mov.w	r8, #0
 80070a2:	f104 0919 	add.w	r9, r4, #25
 80070a6:	e7f4      	b.n	8007092 <_printf_float+0x442>

080070a8 <_printf_common>:
 80070a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	4616      	mov	r6, r2
 80070ae:	4698      	mov	r8, r3
 80070b0:	688a      	ldr	r2, [r1, #8]
 80070b2:	690b      	ldr	r3, [r1, #16]
 80070b4:	4607      	mov	r7, r0
 80070b6:	4293      	cmp	r3, r2
 80070b8:	bfb8      	it	lt
 80070ba:	4613      	movlt	r3, r2
 80070bc:	6033      	str	r3, [r6, #0]
 80070be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070c2:	460c      	mov	r4, r1
 80070c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070c8:	b10a      	cbz	r2, 80070ce <_printf_common+0x26>
 80070ca:	3301      	adds	r3, #1
 80070cc:	6033      	str	r3, [r6, #0]
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	0699      	lsls	r1, r3, #26
 80070d2:	bf42      	ittt	mi
 80070d4:	6833      	ldrmi	r3, [r6, #0]
 80070d6:	3302      	addmi	r3, #2
 80070d8:	6033      	strmi	r3, [r6, #0]
 80070da:	6825      	ldr	r5, [r4, #0]
 80070dc:	f015 0506 	ands.w	r5, r5, #6
 80070e0:	d106      	bne.n	80070f0 <_printf_common+0x48>
 80070e2:	f104 0a19 	add.w	sl, r4, #25
 80070e6:	68e3      	ldr	r3, [r4, #12]
 80070e8:	6832      	ldr	r2, [r6, #0]
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	42ab      	cmp	r3, r5
 80070ee:	dc2b      	bgt.n	8007148 <_printf_common+0xa0>
 80070f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070f4:	6822      	ldr	r2, [r4, #0]
 80070f6:	3b00      	subs	r3, #0
 80070f8:	bf18      	it	ne
 80070fa:	2301      	movne	r3, #1
 80070fc:	0692      	lsls	r2, r2, #26
 80070fe:	d430      	bmi.n	8007162 <_printf_common+0xba>
 8007100:	4641      	mov	r1, r8
 8007102:	4638      	mov	r0, r7
 8007104:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007108:	47c8      	blx	r9
 800710a:	3001      	adds	r0, #1
 800710c:	d023      	beq.n	8007156 <_printf_common+0xae>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	6922      	ldr	r2, [r4, #16]
 8007112:	f003 0306 	and.w	r3, r3, #6
 8007116:	2b04      	cmp	r3, #4
 8007118:	bf14      	ite	ne
 800711a:	2500      	movne	r5, #0
 800711c:	6833      	ldreq	r3, [r6, #0]
 800711e:	f04f 0600 	mov.w	r6, #0
 8007122:	bf08      	it	eq
 8007124:	68e5      	ldreq	r5, [r4, #12]
 8007126:	f104 041a 	add.w	r4, r4, #26
 800712a:	bf08      	it	eq
 800712c:	1aed      	subeq	r5, r5, r3
 800712e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007132:	bf08      	it	eq
 8007134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007138:	4293      	cmp	r3, r2
 800713a:	bfc4      	itt	gt
 800713c:	1a9b      	subgt	r3, r3, r2
 800713e:	18ed      	addgt	r5, r5, r3
 8007140:	42b5      	cmp	r5, r6
 8007142:	d11a      	bne.n	800717a <_printf_common+0xd2>
 8007144:	2000      	movs	r0, #0
 8007146:	e008      	b.n	800715a <_printf_common+0xb2>
 8007148:	2301      	movs	r3, #1
 800714a:	4652      	mov	r2, sl
 800714c:	4641      	mov	r1, r8
 800714e:	4638      	mov	r0, r7
 8007150:	47c8      	blx	r9
 8007152:	3001      	adds	r0, #1
 8007154:	d103      	bne.n	800715e <_printf_common+0xb6>
 8007156:	f04f 30ff 	mov.w	r0, #4294967295
 800715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715e:	3501      	adds	r5, #1
 8007160:	e7c1      	b.n	80070e6 <_printf_common+0x3e>
 8007162:	2030      	movs	r0, #48	@ 0x30
 8007164:	18e1      	adds	r1, r4, r3
 8007166:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007170:	4422      	add	r2, r4
 8007172:	3302      	adds	r3, #2
 8007174:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007178:	e7c2      	b.n	8007100 <_printf_common+0x58>
 800717a:	2301      	movs	r3, #1
 800717c:	4622      	mov	r2, r4
 800717e:	4641      	mov	r1, r8
 8007180:	4638      	mov	r0, r7
 8007182:	47c8      	blx	r9
 8007184:	3001      	adds	r0, #1
 8007186:	d0e6      	beq.n	8007156 <_printf_common+0xae>
 8007188:	3601      	adds	r6, #1
 800718a:	e7d9      	b.n	8007140 <_printf_common+0x98>

0800718c <_printf_i>:
 800718c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007190:	7e0f      	ldrb	r7, [r1, #24]
 8007192:	4691      	mov	r9, r2
 8007194:	2f78      	cmp	r7, #120	@ 0x78
 8007196:	4680      	mov	r8, r0
 8007198:	460c      	mov	r4, r1
 800719a:	469a      	mov	sl, r3
 800719c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800719e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071a2:	d807      	bhi.n	80071b4 <_printf_i+0x28>
 80071a4:	2f62      	cmp	r7, #98	@ 0x62
 80071a6:	d80a      	bhi.n	80071be <_printf_i+0x32>
 80071a8:	2f00      	cmp	r7, #0
 80071aa:	f000 80d3 	beq.w	8007354 <_printf_i+0x1c8>
 80071ae:	2f58      	cmp	r7, #88	@ 0x58
 80071b0:	f000 80ba 	beq.w	8007328 <_printf_i+0x19c>
 80071b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071bc:	e03a      	b.n	8007234 <_printf_i+0xa8>
 80071be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071c2:	2b15      	cmp	r3, #21
 80071c4:	d8f6      	bhi.n	80071b4 <_printf_i+0x28>
 80071c6:	a101      	add	r1, pc, #4	@ (adr r1, 80071cc <_printf_i+0x40>)
 80071c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071cc:	08007225 	.word	0x08007225
 80071d0:	08007239 	.word	0x08007239
 80071d4:	080071b5 	.word	0x080071b5
 80071d8:	080071b5 	.word	0x080071b5
 80071dc:	080071b5 	.word	0x080071b5
 80071e0:	080071b5 	.word	0x080071b5
 80071e4:	08007239 	.word	0x08007239
 80071e8:	080071b5 	.word	0x080071b5
 80071ec:	080071b5 	.word	0x080071b5
 80071f0:	080071b5 	.word	0x080071b5
 80071f4:	080071b5 	.word	0x080071b5
 80071f8:	0800733b 	.word	0x0800733b
 80071fc:	08007263 	.word	0x08007263
 8007200:	080072f5 	.word	0x080072f5
 8007204:	080071b5 	.word	0x080071b5
 8007208:	080071b5 	.word	0x080071b5
 800720c:	0800735d 	.word	0x0800735d
 8007210:	080071b5 	.word	0x080071b5
 8007214:	08007263 	.word	0x08007263
 8007218:	080071b5 	.word	0x080071b5
 800721c:	080071b5 	.word	0x080071b5
 8007220:	080072fd 	.word	0x080072fd
 8007224:	6833      	ldr	r3, [r6, #0]
 8007226:	1d1a      	adds	r2, r3, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6032      	str	r2, [r6, #0]
 800722c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007230:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007234:	2301      	movs	r3, #1
 8007236:	e09e      	b.n	8007376 <_printf_i+0x1ea>
 8007238:	6833      	ldr	r3, [r6, #0]
 800723a:	6820      	ldr	r0, [r4, #0]
 800723c:	1d19      	adds	r1, r3, #4
 800723e:	6031      	str	r1, [r6, #0]
 8007240:	0606      	lsls	r6, r0, #24
 8007242:	d501      	bpl.n	8007248 <_printf_i+0xbc>
 8007244:	681d      	ldr	r5, [r3, #0]
 8007246:	e003      	b.n	8007250 <_printf_i+0xc4>
 8007248:	0645      	lsls	r5, r0, #25
 800724a:	d5fb      	bpl.n	8007244 <_printf_i+0xb8>
 800724c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007250:	2d00      	cmp	r5, #0
 8007252:	da03      	bge.n	800725c <_printf_i+0xd0>
 8007254:	232d      	movs	r3, #45	@ 0x2d
 8007256:	426d      	negs	r5, r5
 8007258:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800725c:	230a      	movs	r3, #10
 800725e:	4859      	ldr	r0, [pc, #356]	@ (80073c4 <_printf_i+0x238>)
 8007260:	e011      	b.n	8007286 <_printf_i+0xfa>
 8007262:	6821      	ldr	r1, [r4, #0]
 8007264:	6833      	ldr	r3, [r6, #0]
 8007266:	0608      	lsls	r0, r1, #24
 8007268:	f853 5b04 	ldr.w	r5, [r3], #4
 800726c:	d402      	bmi.n	8007274 <_printf_i+0xe8>
 800726e:	0649      	lsls	r1, r1, #25
 8007270:	bf48      	it	mi
 8007272:	b2ad      	uxthmi	r5, r5
 8007274:	2f6f      	cmp	r7, #111	@ 0x6f
 8007276:	6033      	str	r3, [r6, #0]
 8007278:	bf14      	ite	ne
 800727a:	230a      	movne	r3, #10
 800727c:	2308      	moveq	r3, #8
 800727e:	4851      	ldr	r0, [pc, #324]	@ (80073c4 <_printf_i+0x238>)
 8007280:	2100      	movs	r1, #0
 8007282:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007286:	6866      	ldr	r6, [r4, #4]
 8007288:	2e00      	cmp	r6, #0
 800728a:	bfa8      	it	ge
 800728c:	6821      	ldrge	r1, [r4, #0]
 800728e:	60a6      	str	r6, [r4, #8]
 8007290:	bfa4      	itt	ge
 8007292:	f021 0104 	bicge.w	r1, r1, #4
 8007296:	6021      	strge	r1, [r4, #0]
 8007298:	b90d      	cbnz	r5, 800729e <_printf_i+0x112>
 800729a:	2e00      	cmp	r6, #0
 800729c:	d04b      	beq.n	8007336 <_printf_i+0x1aa>
 800729e:	4616      	mov	r6, r2
 80072a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80072a4:	fb03 5711 	mls	r7, r3, r1, r5
 80072a8:	5dc7      	ldrb	r7, [r0, r7]
 80072aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072ae:	462f      	mov	r7, r5
 80072b0:	42bb      	cmp	r3, r7
 80072b2:	460d      	mov	r5, r1
 80072b4:	d9f4      	bls.n	80072a0 <_printf_i+0x114>
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d10b      	bne.n	80072d2 <_printf_i+0x146>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	07df      	lsls	r7, r3, #31
 80072be:	d508      	bpl.n	80072d2 <_printf_i+0x146>
 80072c0:	6923      	ldr	r3, [r4, #16]
 80072c2:	6861      	ldr	r1, [r4, #4]
 80072c4:	4299      	cmp	r1, r3
 80072c6:	bfde      	ittt	le
 80072c8:	2330      	movle	r3, #48	@ 0x30
 80072ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072d2:	1b92      	subs	r2, r2, r6
 80072d4:	6122      	str	r2, [r4, #16]
 80072d6:	464b      	mov	r3, r9
 80072d8:	4621      	mov	r1, r4
 80072da:	4640      	mov	r0, r8
 80072dc:	f8cd a000 	str.w	sl, [sp]
 80072e0:	aa03      	add	r2, sp, #12
 80072e2:	f7ff fee1 	bl	80070a8 <_printf_common>
 80072e6:	3001      	adds	r0, #1
 80072e8:	d14a      	bne.n	8007380 <_printf_i+0x1f4>
 80072ea:	f04f 30ff 	mov.w	r0, #4294967295
 80072ee:	b004      	add	sp, #16
 80072f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	f043 0320 	orr.w	r3, r3, #32
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	2778      	movs	r7, #120	@ 0x78
 80072fe:	4832      	ldr	r0, [pc, #200]	@ (80073c8 <_printf_i+0x23c>)
 8007300:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	6831      	ldr	r1, [r6, #0]
 8007308:	061f      	lsls	r7, r3, #24
 800730a:	f851 5b04 	ldr.w	r5, [r1], #4
 800730e:	d402      	bmi.n	8007316 <_printf_i+0x18a>
 8007310:	065f      	lsls	r7, r3, #25
 8007312:	bf48      	it	mi
 8007314:	b2ad      	uxthmi	r5, r5
 8007316:	6031      	str	r1, [r6, #0]
 8007318:	07d9      	lsls	r1, r3, #31
 800731a:	bf44      	itt	mi
 800731c:	f043 0320 	orrmi.w	r3, r3, #32
 8007320:	6023      	strmi	r3, [r4, #0]
 8007322:	b11d      	cbz	r5, 800732c <_printf_i+0x1a0>
 8007324:	2310      	movs	r3, #16
 8007326:	e7ab      	b.n	8007280 <_printf_i+0xf4>
 8007328:	4826      	ldr	r0, [pc, #152]	@ (80073c4 <_printf_i+0x238>)
 800732a:	e7e9      	b.n	8007300 <_printf_i+0x174>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	f023 0320 	bic.w	r3, r3, #32
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	e7f6      	b.n	8007324 <_printf_i+0x198>
 8007336:	4616      	mov	r6, r2
 8007338:	e7bd      	b.n	80072b6 <_printf_i+0x12a>
 800733a:	6833      	ldr	r3, [r6, #0]
 800733c:	6825      	ldr	r5, [r4, #0]
 800733e:	1d18      	adds	r0, r3, #4
 8007340:	6961      	ldr	r1, [r4, #20]
 8007342:	6030      	str	r0, [r6, #0]
 8007344:	062e      	lsls	r6, r5, #24
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	d501      	bpl.n	800734e <_printf_i+0x1c2>
 800734a:	6019      	str	r1, [r3, #0]
 800734c:	e002      	b.n	8007354 <_printf_i+0x1c8>
 800734e:	0668      	lsls	r0, r5, #25
 8007350:	d5fb      	bpl.n	800734a <_printf_i+0x1be>
 8007352:	8019      	strh	r1, [r3, #0]
 8007354:	2300      	movs	r3, #0
 8007356:	4616      	mov	r6, r2
 8007358:	6123      	str	r3, [r4, #16]
 800735a:	e7bc      	b.n	80072d6 <_printf_i+0x14a>
 800735c:	6833      	ldr	r3, [r6, #0]
 800735e:	2100      	movs	r1, #0
 8007360:	1d1a      	adds	r2, r3, #4
 8007362:	6032      	str	r2, [r6, #0]
 8007364:	681e      	ldr	r6, [r3, #0]
 8007366:	6862      	ldr	r2, [r4, #4]
 8007368:	4630      	mov	r0, r6
 800736a:	f000 fa08 	bl	800777e <memchr>
 800736e:	b108      	cbz	r0, 8007374 <_printf_i+0x1e8>
 8007370:	1b80      	subs	r0, r0, r6
 8007372:	6060      	str	r0, [r4, #4]
 8007374:	6863      	ldr	r3, [r4, #4]
 8007376:	6123      	str	r3, [r4, #16]
 8007378:	2300      	movs	r3, #0
 800737a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800737e:	e7aa      	b.n	80072d6 <_printf_i+0x14a>
 8007380:	4632      	mov	r2, r6
 8007382:	4649      	mov	r1, r9
 8007384:	4640      	mov	r0, r8
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	47d0      	blx	sl
 800738a:	3001      	adds	r0, #1
 800738c:	d0ad      	beq.n	80072ea <_printf_i+0x15e>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	079b      	lsls	r3, r3, #30
 8007392:	d413      	bmi.n	80073bc <_printf_i+0x230>
 8007394:	68e0      	ldr	r0, [r4, #12]
 8007396:	9b03      	ldr	r3, [sp, #12]
 8007398:	4298      	cmp	r0, r3
 800739a:	bfb8      	it	lt
 800739c:	4618      	movlt	r0, r3
 800739e:	e7a6      	b.n	80072ee <_printf_i+0x162>
 80073a0:	2301      	movs	r3, #1
 80073a2:	4632      	mov	r2, r6
 80073a4:	4649      	mov	r1, r9
 80073a6:	4640      	mov	r0, r8
 80073a8:	47d0      	blx	sl
 80073aa:	3001      	adds	r0, #1
 80073ac:	d09d      	beq.n	80072ea <_printf_i+0x15e>
 80073ae:	3501      	adds	r5, #1
 80073b0:	68e3      	ldr	r3, [r4, #12]
 80073b2:	9903      	ldr	r1, [sp, #12]
 80073b4:	1a5b      	subs	r3, r3, r1
 80073b6:	42ab      	cmp	r3, r5
 80073b8:	dcf2      	bgt.n	80073a0 <_printf_i+0x214>
 80073ba:	e7eb      	b.n	8007394 <_printf_i+0x208>
 80073bc:	2500      	movs	r5, #0
 80073be:	f104 0619 	add.w	r6, r4, #25
 80073c2:	e7f5      	b.n	80073b0 <_printf_i+0x224>
 80073c4:	0800a3f5 	.word	0x0800a3f5
 80073c8:	0800a406 	.word	0x0800a406

080073cc <std>:
 80073cc:	2300      	movs	r3, #0
 80073ce:	b510      	push	{r4, lr}
 80073d0:	4604      	mov	r4, r0
 80073d2:	e9c0 3300 	strd	r3, r3, [r0]
 80073d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073da:	6083      	str	r3, [r0, #8]
 80073dc:	8181      	strh	r1, [r0, #12]
 80073de:	6643      	str	r3, [r0, #100]	@ 0x64
 80073e0:	81c2      	strh	r2, [r0, #14]
 80073e2:	6183      	str	r3, [r0, #24]
 80073e4:	4619      	mov	r1, r3
 80073e6:	2208      	movs	r2, #8
 80073e8:	305c      	adds	r0, #92	@ 0x5c
 80073ea:	f000 f914 	bl	8007616 <memset>
 80073ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007424 <std+0x58>)
 80073f0:	6224      	str	r4, [r4, #32]
 80073f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80073f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <std+0x5c>)
 80073f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80073f8:	4b0c      	ldr	r3, [pc, #48]	@ (800742c <std+0x60>)
 80073fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80073fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007430 <std+0x64>)
 80073fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8007400:	4b0c      	ldr	r3, [pc, #48]	@ (8007434 <std+0x68>)
 8007402:	429c      	cmp	r4, r3
 8007404:	d006      	beq.n	8007414 <std+0x48>
 8007406:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800740a:	4294      	cmp	r4, r2
 800740c:	d002      	beq.n	8007414 <std+0x48>
 800740e:	33d0      	adds	r3, #208	@ 0xd0
 8007410:	429c      	cmp	r4, r3
 8007412:	d105      	bne.n	8007420 <std+0x54>
 8007414:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800741c:	f000 b9ac 	b.w	8007778 <__retarget_lock_init_recursive>
 8007420:	bd10      	pop	{r4, pc}
 8007422:	bf00      	nop
 8007424:	08007591 	.word	0x08007591
 8007428:	080075b3 	.word	0x080075b3
 800742c:	080075eb 	.word	0x080075eb
 8007430:	0800760f 	.word	0x0800760f
 8007434:	2000042c 	.word	0x2000042c

08007438 <stdio_exit_handler>:
 8007438:	4a02      	ldr	r2, [pc, #8]	@ (8007444 <stdio_exit_handler+0xc>)
 800743a:	4903      	ldr	r1, [pc, #12]	@ (8007448 <stdio_exit_handler+0x10>)
 800743c:	4803      	ldr	r0, [pc, #12]	@ (800744c <stdio_exit_handler+0x14>)
 800743e:	f000 b869 	b.w	8007514 <_fwalk_sglue>
 8007442:	bf00      	nop
 8007444:	20000028 	.word	0x20000028
 8007448:	08008fa9 	.word	0x08008fa9
 800744c:	20000038 	.word	0x20000038

08007450 <cleanup_stdio>:
 8007450:	6841      	ldr	r1, [r0, #4]
 8007452:	4b0c      	ldr	r3, [pc, #48]	@ (8007484 <cleanup_stdio+0x34>)
 8007454:	b510      	push	{r4, lr}
 8007456:	4299      	cmp	r1, r3
 8007458:	4604      	mov	r4, r0
 800745a:	d001      	beq.n	8007460 <cleanup_stdio+0x10>
 800745c:	f001 fda4 	bl	8008fa8 <_fflush_r>
 8007460:	68a1      	ldr	r1, [r4, #8]
 8007462:	4b09      	ldr	r3, [pc, #36]	@ (8007488 <cleanup_stdio+0x38>)
 8007464:	4299      	cmp	r1, r3
 8007466:	d002      	beq.n	800746e <cleanup_stdio+0x1e>
 8007468:	4620      	mov	r0, r4
 800746a:	f001 fd9d 	bl	8008fa8 <_fflush_r>
 800746e:	68e1      	ldr	r1, [r4, #12]
 8007470:	4b06      	ldr	r3, [pc, #24]	@ (800748c <cleanup_stdio+0x3c>)
 8007472:	4299      	cmp	r1, r3
 8007474:	d004      	beq.n	8007480 <cleanup_stdio+0x30>
 8007476:	4620      	mov	r0, r4
 8007478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800747c:	f001 bd94 	b.w	8008fa8 <_fflush_r>
 8007480:	bd10      	pop	{r4, pc}
 8007482:	bf00      	nop
 8007484:	2000042c 	.word	0x2000042c
 8007488:	20000494 	.word	0x20000494
 800748c:	200004fc 	.word	0x200004fc

08007490 <global_stdio_init.part.0>:
 8007490:	b510      	push	{r4, lr}
 8007492:	4b0b      	ldr	r3, [pc, #44]	@ (80074c0 <global_stdio_init.part.0+0x30>)
 8007494:	4c0b      	ldr	r4, [pc, #44]	@ (80074c4 <global_stdio_init.part.0+0x34>)
 8007496:	4a0c      	ldr	r2, [pc, #48]	@ (80074c8 <global_stdio_init.part.0+0x38>)
 8007498:	4620      	mov	r0, r4
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	2104      	movs	r1, #4
 800749e:	2200      	movs	r2, #0
 80074a0:	f7ff ff94 	bl	80073cc <std>
 80074a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074a8:	2201      	movs	r2, #1
 80074aa:	2109      	movs	r1, #9
 80074ac:	f7ff ff8e 	bl	80073cc <std>
 80074b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074b4:	2202      	movs	r2, #2
 80074b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ba:	2112      	movs	r1, #18
 80074bc:	f7ff bf86 	b.w	80073cc <std>
 80074c0:	20000564 	.word	0x20000564
 80074c4:	2000042c 	.word	0x2000042c
 80074c8:	08007439 	.word	0x08007439

080074cc <__sfp_lock_acquire>:
 80074cc:	4801      	ldr	r0, [pc, #4]	@ (80074d4 <__sfp_lock_acquire+0x8>)
 80074ce:	f000 b954 	b.w	800777a <__retarget_lock_acquire_recursive>
 80074d2:	bf00      	nop
 80074d4:	2000056d 	.word	0x2000056d

080074d8 <__sfp_lock_release>:
 80074d8:	4801      	ldr	r0, [pc, #4]	@ (80074e0 <__sfp_lock_release+0x8>)
 80074da:	f000 b94f 	b.w	800777c <__retarget_lock_release_recursive>
 80074de:	bf00      	nop
 80074e0:	2000056d 	.word	0x2000056d

080074e4 <__sinit>:
 80074e4:	b510      	push	{r4, lr}
 80074e6:	4604      	mov	r4, r0
 80074e8:	f7ff fff0 	bl	80074cc <__sfp_lock_acquire>
 80074ec:	6a23      	ldr	r3, [r4, #32]
 80074ee:	b11b      	cbz	r3, 80074f8 <__sinit+0x14>
 80074f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f4:	f7ff bff0 	b.w	80074d8 <__sfp_lock_release>
 80074f8:	4b04      	ldr	r3, [pc, #16]	@ (800750c <__sinit+0x28>)
 80074fa:	6223      	str	r3, [r4, #32]
 80074fc:	4b04      	ldr	r3, [pc, #16]	@ (8007510 <__sinit+0x2c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1f5      	bne.n	80074f0 <__sinit+0xc>
 8007504:	f7ff ffc4 	bl	8007490 <global_stdio_init.part.0>
 8007508:	e7f2      	b.n	80074f0 <__sinit+0xc>
 800750a:	bf00      	nop
 800750c:	08007451 	.word	0x08007451
 8007510:	20000564 	.word	0x20000564

08007514 <_fwalk_sglue>:
 8007514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007518:	4607      	mov	r7, r0
 800751a:	4688      	mov	r8, r1
 800751c:	4614      	mov	r4, r2
 800751e:	2600      	movs	r6, #0
 8007520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007524:	f1b9 0901 	subs.w	r9, r9, #1
 8007528:	d505      	bpl.n	8007536 <_fwalk_sglue+0x22>
 800752a:	6824      	ldr	r4, [r4, #0]
 800752c:	2c00      	cmp	r4, #0
 800752e:	d1f7      	bne.n	8007520 <_fwalk_sglue+0xc>
 8007530:	4630      	mov	r0, r6
 8007532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007536:	89ab      	ldrh	r3, [r5, #12]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d907      	bls.n	800754c <_fwalk_sglue+0x38>
 800753c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007540:	3301      	adds	r3, #1
 8007542:	d003      	beq.n	800754c <_fwalk_sglue+0x38>
 8007544:	4629      	mov	r1, r5
 8007546:	4638      	mov	r0, r7
 8007548:	47c0      	blx	r8
 800754a:	4306      	orrs	r6, r0
 800754c:	3568      	adds	r5, #104	@ 0x68
 800754e:	e7e9      	b.n	8007524 <_fwalk_sglue+0x10>

08007550 <siprintf>:
 8007550:	b40e      	push	{r1, r2, r3}
 8007552:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007556:	b500      	push	{lr}
 8007558:	b09c      	sub	sp, #112	@ 0x70
 800755a:	ab1d      	add	r3, sp, #116	@ 0x74
 800755c:	9002      	str	r0, [sp, #8]
 800755e:	9006      	str	r0, [sp, #24]
 8007560:	9107      	str	r1, [sp, #28]
 8007562:	9104      	str	r1, [sp, #16]
 8007564:	4808      	ldr	r0, [pc, #32]	@ (8007588 <siprintf+0x38>)
 8007566:	4909      	ldr	r1, [pc, #36]	@ (800758c <siprintf+0x3c>)
 8007568:	f853 2b04 	ldr.w	r2, [r3], #4
 800756c:	9105      	str	r1, [sp, #20]
 800756e:	6800      	ldr	r0, [r0, #0]
 8007570:	a902      	add	r1, sp, #8
 8007572:	9301      	str	r3, [sp, #4]
 8007574:	f001 fb9c 	bl	8008cb0 <_svfiprintf_r>
 8007578:	2200      	movs	r2, #0
 800757a:	9b02      	ldr	r3, [sp, #8]
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	b01c      	add	sp, #112	@ 0x70
 8007580:	f85d eb04 	ldr.w	lr, [sp], #4
 8007584:	b003      	add	sp, #12
 8007586:	4770      	bx	lr
 8007588:	20000034 	.word	0x20000034
 800758c:	ffff0208 	.word	0xffff0208

08007590 <__sread>:
 8007590:	b510      	push	{r4, lr}
 8007592:	460c      	mov	r4, r1
 8007594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007598:	f000 f890 	bl	80076bc <_read_r>
 800759c:	2800      	cmp	r0, #0
 800759e:	bfab      	itete	ge
 80075a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80075a2:	89a3      	ldrhlt	r3, [r4, #12]
 80075a4:	181b      	addge	r3, r3, r0
 80075a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80075aa:	bfac      	ite	ge
 80075ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80075ae:	81a3      	strhlt	r3, [r4, #12]
 80075b0:	bd10      	pop	{r4, pc}

080075b2 <__swrite>:
 80075b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b6:	461f      	mov	r7, r3
 80075b8:	898b      	ldrh	r3, [r1, #12]
 80075ba:	4605      	mov	r5, r0
 80075bc:	05db      	lsls	r3, r3, #23
 80075be:	460c      	mov	r4, r1
 80075c0:	4616      	mov	r6, r2
 80075c2:	d505      	bpl.n	80075d0 <__swrite+0x1e>
 80075c4:	2302      	movs	r3, #2
 80075c6:	2200      	movs	r2, #0
 80075c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075cc:	f000 f864 	bl	8007698 <_lseek_r>
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	4632      	mov	r2, r6
 80075d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075d8:	81a3      	strh	r3, [r4, #12]
 80075da:	4628      	mov	r0, r5
 80075dc:	463b      	mov	r3, r7
 80075de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075e6:	f000 b88b 	b.w	8007700 <_write_r>

080075ea <__sseek>:
 80075ea:	b510      	push	{r4, lr}
 80075ec:	460c      	mov	r4, r1
 80075ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f2:	f000 f851 	bl	8007698 <_lseek_r>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	bf15      	itete	ne
 80075fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80075fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007602:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007606:	81a3      	strheq	r3, [r4, #12]
 8007608:	bf18      	it	ne
 800760a:	81a3      	strhne	r3, [r4, #12]
 800760c:	bd10      	pop	{r4, pc}

0800760e <__sclose>:
 800760e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007612:	f000 b831 	b.w	8007678 <_close_r>

08007616 <memset>:
 8007616:	4603      	mov	r3, r0
 8007618:	4402      	add	r2, r0
 800761a:	4293      	cmp	r3, r2
 800761c:	d100      	bne.n	8007620 <memset+0xa>
 800761e:	4770      	bx	lr
 8007620:	f803 1b01 	strb.w	r1, [r3], #1
 8007624:	e7f9      	b.n	800761a <memset+0x4>

08007626 <strncmp>:
 8007626:	b510      	push	{r4, lr}
 8007628:	b16a      	cbz	r2, 8007646 <strncmp+0x20>
 800762a:	3901      	subs	r1, #1
 800762c:	1884      	adds	r4, r0, r2
 800762e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007632:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007636:	429a      	cmp	r2, r3
 8007638:	d103      	bne.n	8007642 <strncmp+0x1c>
 800763a:	42a0      	cmp	r0, r4
 800763c:	d001      	beq.n	8007642 <strncmp+0x1c>
 800763e:	2a00      	cmp	r2, #0
 8007640:	d1f5      	bne.n	800762e <strncmp+0x8>
 8007642:	1ad0      	subs	r0, r2, r3
 8007644:	bd10      	pop	{r4, pc}
 8007646:	4610      	mov	r0, r2
 8007648:	e7fc      	b.n	8007644 <strncmp+0x1e>

0800764a <strncpy>:
 800764a:	4603      	mov	r3, r0
 800764c:	b510      	push	{r4, lr}
 800764e:	3901      	subs	r1, #1
 8007650:	b132      	cbz	r2, 8007660 <strncpy+0x16>
 8007652:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007656:	3a01      	subs	r2, #1
 8007658:	f803 4b01 	strb.w	r4, [r3], #1
 800765c:	2c00      	cmp	r4, #0
 800765e:	d1f7      	bne.n	8007650 <strncpy+0x6>
 8007660:	2100      	movs	r1, #0
 8007662:	441a      	add	r2, r3
 8007664:	4293      	cmp	r3, r2
 8007666:	d100      	bne.n	800766a <strncpy+0x20>
 8007668:	bd10      	pop	{r4, pc}
 800766a:	f803 1b01 	strb.w	r1, [r3], #1
 800766e:	e7f9      	b.n	8007664 <strncpy+0x1a>

08007670 <_localeconv_r>:
 8007670:	4800      	ldr	r0, [pc, #0]	@ (8007674 <_localeconv_r+0x4>)
 8007672:	4770      	bx	lr
 8007674:	20000174 	.word	0x20000174

08007678 <_close_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	2300      	movs	r3, #0
 800767c:	4d05      	ldr	r5, [pc, #20]	@ (8007694 <_close_r+0x1c>)
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	602b      	str	r3, [r5, #0]
 8007684:	f7fa fab9 	bl	8001bfa <_close>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_close_r+0x1a>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	b103      	cbz	r3, 8007692 <_close_r+0x1a>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	20000568 	.word	0x20000568

08007698 <_lseek_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	2200      	movs	r2, #0
 80076a2:	4d05      	ldr	r5, [pc, #20]	@ (80076b8 <_lseek_r+0x20>)
 80076a4:	602a      	str	r2, [r5, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	f7fa facb 	bl	8001c42 <_lseek>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_lseek_r+0x1e>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_lseek_r+0x1e>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	20000568 	.word	0x20000568

080076bc <_read_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4604      	mov	r4, r0
 80076c0:	4608      	mov	r0, r1
 80076c2:	4611      	mov	r1, r2
 80076c4:	2200      	movs	r2, #0
 80076c6:	4d05      	ldr	r5, [pc, #20]	@ (80076dc <_read_r+0x20>)
 80076c8:	602a      	str	r2, [r5, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	f7fa fa5c 	bl	8001b88 <_read>
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	d102      	bne.n	80076da <_read_r+0x1e>
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	b103      	cbz	r3, 80076da <_read_r+0x1e>
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	20000568 	.word	0x20000568

080076e0 <_sbrk_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	2300      	movs	r3, #0
 80076e4:	4d05      	ldr	r5, [pc, #20]	@ (80076fc <_sbrk_r+0x1c>)
 80076e6:	4604      	mov	r4, r0
 80076e8:	4608      	mov	r0, r1
 80076ea:	602b      	str	r3, [r5, #0]
 80076ec:	f7fa fab6 	bl	8001c5c <_sbrk>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d102      	bne.n	80076fa <_sbrk_r+0x1a>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	b103      	cbz	r3, 80076fa <_sbrk_r+0x1a>
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	20000568 	.word	0x20000568

08007700 <_write_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	4611      	mov	r1, r2
 8007708:	2200      	movs	r2, #0
 800770a:	4d05      	ldr	r5, [pc, #20]	@ (8007720 <_write_r+0x20>)
 800770c:	602a      	str	r2, [r5, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	f7fa fa57 	bl	8001bc2 <_write>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	d102      	bne.n	800771e <_write_r+0x1e>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	b103      	cbz	r3, 800771e <_write_r+0x1e>
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	20000568 	.word	0x20000568

08007724 <__errno>:
 8007724:	4b01      	ldr	r3, [pc, #4]	@ (800772c <__errno+0x8>)
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20000034 	.word	0x20000034

08007730 <__libc_init_array>:
 8007730:	b570      	push	{r4, r5, r6, lr}
 8007732:	2600      	movs	r6, #0
 8007734:	4d0c      	ldr	r5, [pc, #48]	@ (8007768 <__libc_init_array+0x38>)
 8007736:	4c0d      	ldr	r4, [pc, #52]	@ (800776c <__libc_init_array+0x3c>)
 8007738:	1b64      	subs	r4, r4, r5
 800773a:	10a4      	asrs	r4, r4, #2
 800773c:	42a6      	cmp	r6, r4
 800773e:	d109      	bne.n	8007754 <__libc_init_array+0x24>
 8007740:	f002 fd74 	bl	800a22c <_init>
 8007744:	2600      	movs	r6, #0
 8007746:	4d0a      	ldr	r5, [pc, #40]	@ (8007770 <__libc_init_array+0x40>)
 8007748:	4c0a      	ldr	r4, [pc, #40]	@ (8007774 <__libc_init_array+0x44>)
 800774a:	1b64      	subs	r4, r4, r5
 800774c:	10a4      	asrs	r4, r4, #2
 800774e:	42a6      	cmp	r6, r4
 8007750:	d105      	bne.n	800775e <__libc_init_array+0x2e>
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	f855 3b04 	ldr.w	r3, [r5], #4
 8007758:	4798      	blx	r3
 800775a:	3601      	adds	r6, #1
 800775c:	e7ee      	b.n	800773c <__libc_init_array+0xc>
 800775e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007762:	4798      	blx	r3
 8007764:	3601      	adds	r6, #1
 8007766:	e7f2      	b.n	800774e <__libc_init_array+0x1e>
 8007768:	0800aa30 	.word	0x0800aa30
 800776c:	0800aa30 	.word	0x0800aa30
 8007770:	0800aa30 	.word	0x0800aa30
 8007774:	0800aa34 	.word	0x0800aa34

08007778 <__retarget_lock_init_recursive>:
 8007778:	4770      	bx	lr

0800777a <__retarget_lock_acquire_recursive>:
 800777a:	4770      	bx	lr

0800777c <__retarget_lock_release_recursive>:
 800777c:	4770      	bx	lr

0800777e <memchr>:
 800777e:	4603      	mov	r3, r0
 8007780:	b510      	push	{r4, lr}
 8007782:	b2c9      	uxtb	r1, r1
 8007784:	4402      	add	r2, r0
 8007786:	4293      	cmp	r3, r2
 8007788:	4618      	mov	r0, r3
 800778a:	d101      	bne.n	8007790 <memchr+0x12>
 800778c:	2000      	movs	r0, #0
 800778e:	e003      	b.n	8007798 <memchr+0x1a>
 8007790:	7804      	ldrb	r4, [r0, #0]
 8007792:	3301      	adds	r3, #1
 8007794:	428c      	cmp	r4, r1
 8007796:	d1f6      	bne.n	8007786 <memchr+0x8>
 8007798:	bd10      	pop	{r4, pc}

0800779a <memcpy>:
 800779a:	440a      	add	r2, r1
 800779c:	4291      	cmp	r1, r2
 800779e:	f100 33ff 	add.w	r3, r0, #4294967295
 80077a2:	d100      	bne.n	80077a6 <memcpy+0xc>
 80077a4:	4770      	bx	lr
 80077a6:	b510      	push	{r4, lr}
 80077a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ac:	4291      	cmp	r1, r2
 80077ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077b2:	d1f9      	bne.n	80077a8 <memcpy+0xe>
 80077b4:	bd10      	pop	{r4, pc}

080077b6 <quorem>:
 80077b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	6903      	ldr	r3, [r0, #16]
 80077bc:	690c      	ldr	r4, [r1, #16]
 80077be:	4607      	mov	r7, r0
 80077c0:	42a3      	cmp	r3, r4
 80077c2:	db7e      	blt.n	80078c2 <quorem+0x10c>
 80077c4:	3c01      	subs	r4, #1
 80077c6:	00a3      	lsls	r3, r4, #2
 80077c8:	f100 0514 	add.w	r5, r0, #20
 80077cc:	f101 0814 	add.w	r8, r1, #20
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077e0:	3301      	adds	r3, #1
 80077e2:	429a      	cmp	r2, r3
 80077e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80077e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077ec:	d32e      	bcc.n	800784c <quorem+0x96>
 80077ee:	f04f 0a00 	mov.w	sl, #0
 80077f2:	46c4      	mov	ip, r8
 80077f4:	46ae      	mov	lr, r5
 80077f6:	46d3      	mov	fp, sl
 80077f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077fc:	b298      	uxth	r0, r3
 80077fe:	fb06 a000 	mla	r0, r6, r0, sl
 8007802:	0c1b      	lsrs	r3, r3, #16
 8007804:	0c02      	lsrs	r2, r0, #16
 8007806:	fb06 2303 	mla	r3, r6, r3, r2
 800780a:	f8de 2000 	ldr.w	r2, [lr]
 800780e:	b280      	uxth	r0, r0
 8007810:	b292      	uxth	r2, r2
 8007812:	1a12      	subs	r2, r2, r0
 8007814:	445a      	add	r2, fp
 8007816:	f8de 0000 	ldr.w	r0, [lr]
 800781a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800781e:	b29b      	uxth	r3, r3
 8007820:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007824:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007828:	b292      	uxth	r2, r2
 800782a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800782e:	45e1      	cmp	r9, ip
 8007830:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007834:	f84e 2b04 	str.w	r2, [lr], #4
 8007838:	d2de      	bcs.n	80077f8 <quorem+0x42>
 800783a:	9b00      	ldr	r3, [sp, #0]
 800783c:	58eb      	ldr	r3, [r5, r3]
 800783e:	b92b      	cbnz	r3, 800784c <quorem+0x96>
 8007840:	9b01      	ldr	r3, [sp, #4]
 8007842:	3b04      	subs	r3, #4
 8007844:	429d      	cmp	r5, r3
 8007846:	461a      	mov	r2, r3
 8007848:	d32f      	bcc.n	80078aa <quorem+0xf4>
 800784a:	613c      	str	r4, [r7, #16]
 800784c:	4638      	mov	r0, r7
 800784e:	f001 f8c3 	bl	80089d8 <__mcmp>
 8007852:	2800      	cmp	r0, #0
 8007854:	db25      	blt.n	80078a2 <quorem+0xec>
 8007856:	4629      	mov	r1, r5
 8007858:	2000      	movs	r0, #0
 800785a:	f858 2b04 	ldr.w	r2, [r8], #4
 800785e:	f8d1 c000 	ldr.w	ip, [r1]
 8007862:	fa1f fe82 	uxth.w	lr, r2
 8007866:	fa1f f38c 	uxth.w	r3, ip
 800786a:	eba3 030e 	sub.w	r3, r3, lr
 800786e:	4403      	add	r3, r0
 8007870:	0c12      	lsrs	r2, r2, #16
 8007872:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007876:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800787a:	b29b      	uxth	r3, r3
 800787c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007880:	45c1      	cmp	r9, r8
 8007882:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007886:	f841 3b04 	str.w	r3, [r1], #4
 800788a:	d2e6      	bcs.n	800785a <quorem+0xa4>
 800788c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007890:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007894:	b922      	cbnz	r2, 80078a0 <quorem+0xea>
 8007896:	3b04      	subs	r3, #4
 8007898:	429d      	cmp	r5, r3
 800789a:	461a      	mov	r2, r3
 800789c:	d30b      	bcc.n	80078b6 <quorem+0x100>
 800789e:	613c      	str	r4, [r7, #16]
 80078a0:	3601      	adds	r6, #1
 80078a2:	4630      	mov	r0, r6
 80078a4:	b003      	add	sp, #12
 80078a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	3b04      	subs	r3, #4
 80078ae:	2a00      	cmp	r2, #0
 80078b0:	d1cb      	bne.n	800784a <quorem+0x94>
 80078b2:	3c01      	subs	r4, #1
 80078b4:	e7c6      	b.n	8007844 <quorem+0x8e>
 80078b6:	6812      	ldr	r2, [r2, #0]
 80078b8:	3b04      	subs	r3, #4
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	d1ef      	bne.n	800789e <quorem+0xe8>
 80078be:	3c01      	subs	r4, #1
 80078c0:	e7ea      	b.n	8007898 <quorem+0xe2>
 80078c2:	2000      	movs	r0, #0
 80078c4:	e7ee      	b.n	80078a4 <quorem+0xee>
	...

080078c8 <_dtoa_r>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	4614      	mov	r4, r2
 80078ce:	461d      	mov	r5, r3
 80078d0:	69c7      	ldr	r7, [r0, #28]
 80078d2:	b097      	sub	sp, #92	@ 0x5c
 80078d4:	4683      	mov	fp, r0
 80078d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80078da:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80078dc:	b97f      	cbnz	r7, 80078fe <_dtoa_r+0x36>
 80078de:	2010      	movs	r0, #16
 80078e0:	f7fe ffa0 	bl	8006824 <malloc>
 80078e4:	4602      	mov	r2, r0
 80078e6:	f8cb 001c 	str.w	r0, [fp, #28]
 80078ea:	b920      	cbnz	r0, 80078f6 <_dtoa_r+0x2e>
 80078ec:	21ef      	movs	r1, #239	@ 0xef
 80078ee:	4ba8      	ldr	r3, [pc, #672]	@ (8007b90 <_dtoa_r+0x2c8>)
 80078f0:	48a8      	ldr	r0, [pc, #672]	@ (8007b94 <_dtoa_r+0x2cc>)
 80078f2:	f001 fb9b 	bl	800902c <__assert_func>
 80078f6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078fa:	6007      	str	r7, [r0, #0]
 80078fc:	60c7      	str	r7, [r0, #12]
 80078fe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007902:	6819      	ldr	r1, [r3, #0]
 8007904:	b159      	cbz	r1, 800791e <_dtoa_r+0x56>
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	2301      	movs	r3, #1
 800790a:	4093      	lsls	r3, r2
 800790c:	604a      	str	r2, [r1, #4]
 800790e:	608b      	str	r3, [r1, #8]
 8007910:	4658      	mov	r0, fp
 8007912:	f000 fe29 	bl	8008568 <_Bfree>
 8007916:	2200      	movs	r2, #0
 8007918:	f8db 301c 	ldr.w	r3, [fp, #28]
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	1e2b      	subs	r3, r5, #0
 8007920:	bfaf      	iteee	ge
 8007922:	2300      	movge	r3, #0
 8007924:	2201      	movlt	r2, #1
 8007926:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800792a:	9303      	strlt	r3, [sp, #12]
 800792c:	bfa8      	it	ge
 800792e:	6033      	strge	r3, [r6, #0]
 8007930:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007934:	4b98      	ldr	r3, [pc, #608]	@ (8007b98 <_dtoa_r+0x2d0>)
 8007936:	bfb8      	it	lt
 8007938:	6032      	strlt	r2, [r6, #0]
 800793a:	ea33 0308 	bics.w	r3, r3, r8
 800793e:	d112      	bne.n	8007966 <_dtoa_r+0x9e>
 8007940:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007944:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007946:	6013      	str	r3, [r2, #0]
 8007948:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800794c:	4323      	orrs	r3, r4
 800794e:	f000 8550 	beq.w	80083f2 <_dtoa_r+0xb2a>
 8007952:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007954:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007b9c <_dtoa_r+0x2d4>
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 8552 	beq.w	8008402 <_dtoa_r+0xb3a>
 800795e:	f10a 0303 	add.w	r3, sl, #3
 8007962:	f000 bd4c 	b.w	80083fe <_dtoa_r+0xb36>
 8007966:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800796a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800796e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007972:	2200      	movs	r2, #0
 8007974:	2300      	movs	r3, #0
 8007976:	f7f9 f817 	bl	80009a8 <__aeabi_dcmpeq>
 800797a:	4607      	mov	r7, r0
 800797c:	b158      	cbz	r0, 8007996 <_dtoa_r+0xce>
 800797e:	2301      	movs	r3, #1
 8007980:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007986:	b113      	cbz	r3, 800798e <_dtoa_r+0xc6>
 8007988:	4b85      	ldr	r3, [pc, #532]	@ (8007ba0 <_dtoa_r+0x2d8>)
 800798a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007ba4 <_dtoa_r+0x2dc>
 8007992:	f000 bd36 	b.w	8008402 <_dtoa_r+0xb3a>
 8007996:	ab14      	add	r3, sp, #80	@ 0x50
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	ab15      	add	r3, sp, #84	@ 0x54
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	4658      	mov	r0, fp
 80079a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80079a4:	f001 f8c8 	bl	8008b38 <__d2b>
 80079a8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80079ac:	4681      	mov	r9, r0
 80079ae:	2e00      	cmp	r6, #0
 80079b0:	d077      	beq.n	8007aa2 <_dtoa_r+0x1da>
 80079b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079b8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80079bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079c0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80079c4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80079c8:	9712      	str	r7, [sp, #72]	@ 0x48
 80079ca:	4619      	mov	r1, r3
 80079cc:	2200      	movs	r2, #0
 80079ce:	4b76      	ldr	r3, [pc, #472]	@ (8007ba8 <_dtoa_r+0x2e0>)
 80079d0:	f7f8 fbca 	bl	8000168 <__aeabi_dsub>
 80079d4:	a368      	add	r3, pc, #416	@ (adr r3, 8007b78 <_dtoa_r+0x2b0>)
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	f7f8 fd7d 	bl	80004d8 <__aeabi_dmul>
 80079de:	a368      	add	r3, pc, #416	@ (adr r3, 8007b80 <_dtoa_r+0x2b8>)
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f7f8 fbc2 	bl	800016c <__adddf3>
 80079e8:	4604      	mov	r4, r0
 80079ea:	4630      	mov	r0, r6
 80079ec:	460d      	mov	r5, r1
 80079ee:	f7f8 fd09 	bl	8000404 <__aeabi_i2d>
 80079f2:	a365      	add	r3, pc, #404	@ (adr r3, 8007b88 <_dtoa_r+0x2c0>)
 80079f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f8:	f7f8 fd6e 	bl	80004d8 <__aeabi_dmul>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4620      	mov	r0, r4
 8007a02:	4629      	mov	r1, r5
 8007a04:	f7f8 fbb2 	bl	800016c <__adddf3>
 8007a08:	4604      	mov	r4, r0
 8007a0a:	460d      	mov	r5, r1
 8007a0c:	f7f9 f814 	bl	8000a38 <__aeabi_d2iz>
 8007a10:	2200      	movs	r2, #0
 8007a12:	4607      	mov	r7, r0
 8007a14:	2300      	movs	r3, #0
 8007a16:	4620      	mov	r0, r4
 8007a18:	4629      	mov	r1, r5
 8007a1a:	f7f8 ffcf 	bl	80009bc <__aeabi_dcmplt>
 8007a1e:	b140      	cbz	r0, 8007a32 <_dtoa_r+0x16a>
 8007a20:	4638      	mov	r0, r7
 8007a22:	f7f8 fcef 	bl	8000404 <__aeabi_i2d>
 8007a26:	4622      	mov	r2, r4
 8007a28:	462b      	mov	r3, r5
 8007a2a:	f7f8 ffbd 	bl	80009a8 <__aeabi_dcmpeq>
 8007a2e:	b900      	cbnz	r0, 8007a32 <_dtoa_r+0x16a>
 8007a30:	3f01      	subs	r7, #1
 8007a32:	2f16      	cmp	r7, #22
 8007a34:	d853      	bhi.n	8007ade <_dtoa_r+0x216>
 8007a36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a3a:	4b5c      	ldr	r3, [pc, #368]	@ (8007bac <_dtoa_r+0x2e4>)
 8007a3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a44:	f7f8 ffba 	bl	80009bc <__aeabi_dcmplt>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d04a      	beq.n	8007ae2 <_dtoa_r+0x21a>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	3f01      	subs	r7, #1
 8007a50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a54:	1b9b      	subs	r3, r3, r6
 8007a56:	1e5a      	subs	r2, r3, #1
 8007a58:	bf46      	itte	mi
 8007a5a:	f1c3 0801 	rsbmi	r8, r3, #1
 8007a5e:	2300      	movmi	r3, #0
 8007a60:	f04f 0800 	movpl.w	r8, #0
 8007a64:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a66:	bf48      	it	mi
 8007a68:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007a6a:	2f00      	cmp	r7, #0
 8007a6c:	db3b      	blt.n	8007ae6 <_dtoa_r+0x21e>
 8007a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a70:	970e      	str	r7, [sp, #56]	@ 0x38
 8007a72:	443b      	add	r3, r7
 8007a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a76:	2300      	movs	r3, #0
 8007a78:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a7c:	2b09      	cmp	r3, #9
 8007a7e:	d866      	bhi.n	8007b4e <_dtoa_r+0x286>
 8007a80:	2b05      	cmp	r3, #5
 8007a82:	bfc4      	itt	gt
 8007a84:	3b04      	subgt	r3, #4
 8007a86:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007a88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a8a:	bfc8      	it	gt
 8007a8c:	2400      	movgt	r4, #0
 8007a8e:	f1a3 0302 	sub.w	r3, r3, #2
 8007a92:	bfd8      	it	le
 8007a94:	2401      	movle	r4, #1
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d864      	bhi.n	8007b64 <_dtoa_r+0x29c>
 8007a9a:	e8df f003 	tbb	[pc, r3]
 8007a9e:	382b      	.short	0x382b
 8007aa0:	5636      	.short	0x5636
 8007aa2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007aa6:	441e      	add	r6, r3
 8007aa8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007aac:	2b20      	cmp	r3, #32
 8007aae:	bfc1      	itttt	gt
 8007ab0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ab4:	fa08 f803 	lslgt.w	r8, r8, r3
 8007ab8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007abc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ac0:	bfd6      	itet	le
 8007ac2:	f1c3 0320 	rsble	r3, r3, #32
 8007ac6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007aca:	fa04 f003 	lslle.w	r0, r4, r3
 8007ace:	f7f8 fc89 	bl	80003e4 <__aeabi_ui2d>
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007ad8:	3e01      	subs	r6, #1
 8007ada:	9212      	str	r2, [sp, #72]	@ 0x48
 8007adc:	e775      	b.n	80079ca <_dtoa_r+0x102>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e7b6      	b.n	8007a50 <_dtoa_r+0x188>
 8007ae2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007ae4:	e7b5      	b.n	8007a52 <_dtoa_r+0x18a>
 8007ae6:	427b      	negs	r3, r7
 8007ae8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aea:	2300      	movs	r3, #0
 8007aec:	eba8 0807 	sub.w	r8, r8, r7
 8007af0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007af2:	e7c2      	b.n	8007a7a <_dtoa_r+0x1b2>
 8007af4:	2300      	movs	r3, #0
 8007af6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007af8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	dc35      	bgt.n	8007b6a <_dtoa_r+0x2a2>
 8007afe:	2301      	movs	r3, #1
 8007b00:	461a      	mov	r2, r3
 8007b02:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007b06:	9221      	str	r2, [sp, #132]	@ 0x84
 8007b08:	e00b      	b.n	8007b22 <_dtoa_r+0x25a>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e7f3      	b.n	8007af6 <_dtoa_r+0x22e>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b14:	18fb      	adds	r3, r7, r3
 8007b16:	9308      	str	r3, [sp, #32]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	9307      	str	r3, [sp, #28]
 8007b1e:	bfb8      	it	lt
 8007b20:	2301      	movlt	r3, #1
 8007b22:	2100      	movs	r1, #0
 8007b24:	2204      	movs	r2, #4
 8007b26:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007b2a:	f102 0514 	add.w	r5, r2, #20
 8007b2e:	429d      	cmp	r5, r3
 8007b30:	d91f      	bls.n	8007b72 <_dtoa_r+0x2aa>
 8007b32:	6041      	str	r1, [r0, #4]
 8007b34:	4658      	mov	r0, fp
 8007b36:	f000 fcd7 	bl	80084e8 <_Balloc>
 8007b3a:	4682      	mov	sl, r0
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d139      	bne.n	8007bb4 <_dtoa_r+0x2ec>
 8007b40:	4602      	mov	r2, r0
 8007b42:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b46:	4b1a      	ldr	r3, [pc, #104]	@ (8007bb0 <_dtoa_r+0x2e8>)
 8007b48:	e6d2      	b.n	80078f0 <_dtoa_r+0x28>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e7e0      	b.n	8007b10 <_dtoa_r+0x248>
 8007b4e:	2401      	movs	r4, #1
 8007b50:	2300      	movs	r3, #0
 8007b52:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b54:	9320      	str	r3, [sp, #128]	@ 0x80
 8007b56:	f04f 33ff 	mov.w	r3, #4294967295
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007b60:	2312      	movs	r3, #18
 8007b62:	e7d0      	b.n	8007b06 <_dtoa_r+0x23e>
 8007b64:	2301      	movs	r3, #1
 8007b66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b68:	e7f5      	b.n	8007b56 <_dtoa_r+0x28e>
 8007b6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b6c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007b70:	e7d7      	b.n	8007b22 <_dtoa_r+0x25a>
 8007b72:	3101      	adds	r1, #1
 8007b74:	0052      	lsls	r2, r2, #1
 8007b76:	e7d8      	b.n	8007b2a <_dtoa_r+0x262>
 8007b78:	636f4361 	.word	0x636f4361
 8007b7c:	3fd287a7 	.word	0x3fd287a7
 8007b80:	8b60c8b3 	.word	0x8b60c8b3
 8007b84:	3fc68a28 	.word	0x3fc68a28
 8007b88:	509f79fb 	.word	0x509f79fb
 8007b8c:	3fd34413 	.word	0x3fd34413
 8007b90:	0800a424 	.word	0x0800a424
 8007b94:	0800a43b 	.word	0x0800a43b
 8007b98:	7ff00000 	.word	0x7ff00000
 8007b9c:	0800a420 	.word	0x0800a420
 8007ba0:	0800a3f4 	.word	0x0800a3f4
 8007ba4:	0800a3f3 	.word	0x0800a3f3
 8007ba8:	3ff80000 	.word	0x3ff80000
 8007bac:	0800a538 	.word	0x0800a538
 8007bb0:	0800a493 	.word	0x0800a493
 8007bb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bb8:	6018      	str	r0, [r3, #0]
 8007bba:	9b07      	ldr	r3, [sp, #28]
 8007bbc:	2b0e      	cmp	r3, #14
 8007bbe:	f200 80a4 	bhi.w	8007d0a <_dtoa_r+0x442>
 8007bc2:	2c00      	cmp	r4, #0
 8007bc4:	f000 80a1 	beq.w	8007d0a <_dtoa_r+0x442>
 8007bc8:	2f00      	cmp	r7, #0
 8007bca:	dd33      	ble.n	8007c34 <_dtoa_r+0x36c>
 8007bcc:	4b86      	ldr	r3, [pc, #536]	@ (8007de8 <_dtoa_r+0x520>)
 8007bce:	f007 020f 	and.w	r2, r7, #15
 8007bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bd6:	05f8      	lsls	r0, r7, #23
 8007bd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bdc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007be0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007be4:	d516      	bpl.n	8007c14 <_dtoa_r+0x34c>
 8007be6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bea:	4b80      	ldr	r3, [pc, #512]	@ (8007dec <_dtoa_r+0x524>)
 8007bec:	2603      	movs	r6, #3
 8007bee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bf2:	f7f8 fd9b 	bl	800072c <__aeabi_ddiv>
 8007bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bfa:	f004 040f 	and.w	r4, r4, #15
 8007bfe:	4d7b      	ldr	r5, [pc, #492]	@ (8007dec <_dtoa_r+0x524>)
 8007c00:	b954      	cbnz	r4, 8007c18 <_dtoa_r+0x350>
 8007c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c0a:	f7f8 fd8f 	bl	800072c <__aeabi_ddiv>
 8007c0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c12:	e028      	b.n	8007c66 <_dtoa_r+0x39e>
 8007c14:	2602      	movs	r6, #2
 8007c16:	e7f2      	b.n	8007bfe <_dtoa_r+0x336>
 8007c18:	07e1      	lsls	r1, r4, #31
 8007c1a:	d508      	bpl.n	8007c2e <_dtoa_r+0x366>
 8007c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c24:	f7f8 fc58 	bl	80004d8 <__aeabi_dmul>
 8007c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	1064      	asrs	r4, r4, #1
 8007c30:	3508      	adds	r5, #8
 8007c32:	e7e5      	b.n	8007c00 <_dtoa_r+0x338>
 8007c34:	f000 80d2 	beq.w	8007ddc <_dtoa_r+0x514>
 8007c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c3c:	427c      	negs	r4, r7
 8007c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8007de8 <_dtoa_r+0x520>)
 8007c40:	f004 020f 	and.w	r2, r4, #15
 8007c44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f7f8 fc44 	bl	80004d8 <__aeabi_dmul>
 8007c50:	2602      	movs	r6, #2
 8007c52:	2300      	movs	r3, #0
 8007c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c58:	4d64      	ldr	r5, [pc, #400]	@ (8007dec <_dtoa_r+0x524>)
 8007c5a:	1124      	asrs	r4, r4, #4
 8007c5c:	2c00      	cmp	r4, #0
 8007c5e:	f040 80b2 	bne.w	8007dc6 <_dtoa_r+0x4fe>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1d3      	bne.n	8007c0e <_dtoa_r+0x346>
 8007c66:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 80b7 	beq.w	8007de0 <_dtoa_r+0x518>
 8007c72:	2200      	movs	r2, #0
 8007c74:	4620      	mov	r0, r4
 8007c76:	4629      	mov	r1, r5
 8007c78:	4b5d      	ldr	r3, [pc, #372]	@ (8007df0 <_dtoa_r+0x528>)
 8007c7a:	f7f8 fe9f 	bl	80009bc <__aeabi_dcmplt>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	f000 80ae 	beq.w	8007de0 <_dtoa_r+0x518>
 8007c84:	9b07      	ldr	r3, [sp, #28]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80aa 	beq.w	8007de0 <_dtoa_r+0x518>
 8007c8c:	9b08      	ldr	r3, [sp, #32]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	dd37      	ble.n	8007d02 <_dtoa_r+0x43a>
 8007c92:	1e7b      	subs	r3, r7, #1
 8007c94:	4620      	mov	r0, r4
 8007c96:	9304      	str	r3, [sp, #16]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	4b55      	ldr	r3, [pc, #340]	@ (8007df4 <_dtoa_r+0x52c>)
 8007c9e:	f7f8 fc1b 	bl	80004d8 <__aeabi_dmul>
 8007ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ca6:	9c08      	ldr	r4, [sp, #32]
 8007ca8:	3601      	adds	r6, #1
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7f8 fbaa 	bl	8000404 <__aeabi_i2d>
 8007cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cb4:	f7f8 fc10 	bl	80004d8 <__aeabi_dmul>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4b4f      	ldr	r3, [pc, #316]	@ (8007df8 <_dtoa_r+0x530>)
 8007cbc:	f7f8 fa56 	bl	800016c <__adddf3>
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007cc6:	2c00      	cmp	r4, #0
 8007cc8:	f040 809a 	bne.w	8007e00 <_dtoa_r+0x538>
 8007ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8007dfc <_dtoa_r+0x534>)
 8007cd4:	f7f8 fa48 	bl	8000168 <__aeabi_dsub>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	4633      	mov	r3, r6
 8007ce4:	f7f8 fe88 	bl	80009f8 <__aeabi_dcmpgt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	f040 828e 	bne.w	800820a <_dtoa_r+0x942>
 8007cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cf2:	462a      	mov	r2, r5
 8007cf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007cf8:	f7f8 fe60 	bl	80009bc <__aeabi_dcmplt>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	f040 8127 	bne.w	8007f50 <_dtoa_r+0x688>
 8007d02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007d0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f2c0 8163 	blt.w	8007fd8 <_dtoa_r+0x710>
 8007d12:	2f0e      	cmp	r7, #14
 8007d14:	f300 8160 	bgt.w	8007fd8 <_dtoa_r+0x710>
 8007d18:	4b33      	ldr	r3, [pc, #204]	@ (8007de8 <_dtoa_r+0x520>)
 8007d1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d22:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	da03      	bge.n	8007d34 <_dtoa_r+0x46c>
 8007d2c:	9b07      	ldr	r3, [sp, #28]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f340 8100 	ble.w	8007f34 <_dtoa_r+0x66c>
 8007d34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d38:	4656      	mov	r6, sl
 8007d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4629      	mov	r1, r5
 8007d42:	f7f8 fcf3 	bl	800072c <__aeabi_ddiv>
 8007d46:	f7f8 fe77 	bl	8000a38 <__aeabi_d2iz>
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	f7f8 fb5a 	bl	8000404 <__aeabi_i2d>
 8007d50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d54:	f7f8 fbc0 	bl	80004d8 <__aeabi_dmul>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	4629      	mov	r1, r5
 8007d60:	f7f8 fa02 	bl	8000168 <__aeabi_dsub>
 8007d64:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d68:	9d07      	ldr	r5, [sp, #28]
 8007d6a:	f806 4b01 	strb.w	r4, [r6], #1
 8007d6e:	eba6 040a 	sub.w	r4, r6, sl
 8007d72:	42a5      	cmp	r5, r4
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	f040 8116 	bne.w	8007fa8 <_dtoa_r+0x6e0>
 8007d7c:	f7f8 f9f6 	bl	800016c <__adddf3>
 8007d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d84:	4604      	mov	r4, r0
 8007d86:	460d      	mov	r5, r1
 8007d88:	f7f8 fe36 	bl	80009f8 <__aeabi_dcmpgt>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	f040 80f8 	bne.w	8007f82 <_dtoa_r+0x6ba>
 8007d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d96:	4620      	mov	r0, r4
 8007d98:	4629      	mov	r1, r5
 8007d9a:	f7f8 fe05 	bl	80009a8 <__aeabi_dcmpeq>
 8007d9e:	b118      	cbz	r0, 8007da8 <_dtoa_r+0x4e0>
 8007da0:	f018 0f01 	tst.w	r8, #1
 8007da4:	f040 80ed 	bne.w	8007f82 <_dtoa_r+0x6ba>
 8007da8:	4649      	mov	r1, r9
 8007daa:	4658      	mov	r0, fp
 8007dac:	f000 fbdc 	bl	8008568 <_Bfree>
 8007db0:	2300      	movs	r3, #0
 8007db2:	7033      	strb	r3, [r6, #0]
 8007db4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007db6:	3701      	adds	r7, #1
 8007db8:	601f      	str	r7, [r3, #0]
 8007dba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 8320 	beq.w	8008402 <_dtoa_r+0xb3a>
 8007dc2:	601e      	str	r6, [r3, #0]
 8007dc4:	e31d      	b.n	8008402 <_dtoa_r+0xb3a>
 8007dc6:	07e2      	lsls	r2, r4, #31
 8007dc8:	d505      	bpl.n	8007dd6 <_dtoa_r+0x50e>
 8007dca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dce:	f7f8 fb83 	bl	80004d8 <__aeabi_dmul>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	3601      	adds	r6, #1
 8007dd6:	1064      	asrs	r4, r4, #1
 8007dd8:	3508      	adds	r5, #8
 8007dda:	e73f      	b.n	8007c5c <_dtoa_r+0x394>
 8007ddc:	2602      	movs	r6, #2
 8007dde:	e742      	b.n	8007c66 <_dtoa_r+0x39e>
 8007de0:	9c07      	ldr	r4, [sp, #28]
 8007de2:	9704      	str	r7, [sp, #16]
 8007de4:	e761      	b.n	8007caa <_dtoa_r+0x3e2>
 8007de6:	bf00      	nop
 8007de8:	0800a538 	.word	0x0800a538
 8007dec:	0800a510 	.word	0x0800a510
 8007df0:	3ff00000 	.word	0x3ff00000
 8007df4:	40240000 	.word	0x40240000
 8007df8:	401c0000 	.word	0x401c0000
 8007dfc:	40140000 	.word	0x40140000
 8007e00:	4b70      	ldr	r3, [pc, #448]	@ (8007fc4 <_dtoa_r+0x6fc>)
 8007e02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e0c:	4454      	add	r4, sl
 8007e0e:	2900      	cmp	r1, #0
 8007e10:	d045      	beq.n	8007e9e <_dtoa_r+0x5d6>
 8007e12:	2000      	movs	r0, #0
 8007e14:	496c      	ldr	r1, [pc, #432]	@ (8007fc8 <_dtoa_r+0x700>)
 8007e16:	f7f8 fc89 	bl	800072c <__aeabi_ddiv>
 8007e1a:	4633      	mov	r3, r6
 8007e1c:	462a      	mov	r2, r5
 8007e1e:	f7f8 f9a3 	bl	8000168 <__aeabi_dsub>
 8007e22:	4656      	mov	r6, sl
 8007e24:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e2c:	f7f8 fe04 	bl	8000a38 <__aeabi_d2iz>
 8007e30:	4605      	mov	r5, r0
 8007e32:	f7f8 fae7 	bl	8000404 <__aeabi_i2d>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e3e:	f7f8 f993 	bl	8000168 <__aeabi_dsub>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	3530      	adds	r5, #48	@ 0x30
 8007e48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e50:	f806 5b01 	strb.w	r5, [r6], #1
 8007e54:	f7f8 fdb2 	bl	80009bc <__aeabi_dcmplt>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d163      	bne.n	8007f24 <_dtoa_r+0x65c>
 8007e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e60:	2000      	movs	r0, #0
 8007e62:	495a      	ldr	r1, [pc, #360]	@ (8007fcc <_dtoa_r+0x704>)
 8007e64:	f7f8 f980 	bl	8000168 <__aeabi_dsub>
 8007e68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e6c:	f7f8 fda6 	bl	80009bc <__aeabi_dcmplt>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f040 8087 	bne.w	8007f84 <_dtoa_r+0x6bc>
 8007e76:	42a6      	cmp	r6, r4
 8007e78:	f43f af43 	beq.w	8007d02 <_dtoa_r+0x43a>
 8007e7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e80:	2200      	movs	r2, #0
 8007e82:	4b53      	ldr	r3, [pc, #332]	@ (8007fd0 <_dtoa_r+0x708>)
 8007e84:	f7f8 fb28 	bl	80004d8 <__aeabi_dmul>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e92:	4b4f      	ldr	r3, [pc, #316]	@ (8007fd0 <_dtoa_r+0x708>)
 8007e94:	f7f8 fb20 	bl	80004d8 <__aeabi_dmul>
 8007e98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e9c:	e7c4      	b.n	8007e28 <_dtoa_r+0x560>
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f7f8 fb19 	bl	80004d8 <__aeabi_dmul>
 8007ea6:	4656      	mov	r6, sl
 8007ea8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007eac:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eb2:	f7f8 fdc1 	bl	8000a38 <__aeabi_d2iz>
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	f7f8 faa4 	bl	8000404 <__aeabi_i2d>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ec4:	f7f8 f950 	bl	8000168 <__aeabi_dsub>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	3530      	adds	r5, #48	@ 0x30
 8007ece:	f806 5b01 	strb.w	r5, [r6], #1
 8007ed2:	42a6      	cmp	r6, r4
 8007ed4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	d124      	bne.n	8007f28 <_dtoa_r+0x660>
 8007ede:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ee2:	4b39      	ldr	r3, [pc, #228]	@ (8007fc8 <_dtoa_r+0x700>)
 8007ee4:	f7f8 f942 	bl	800016c <__adddf3>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef0:	f7f8 fd82 	bl	80009f8 <__aeabi_dcmpgt>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d145      	bne.n	8007f84 <_dtoa_r+0x6bc>
 8007ef8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007efc:	2000      	movs	r0, #0
 8007efe:	4932      	ldr	r1, [pc, #200]	@ (8007fc8 <_dtoa_r+0x700>)
 8007f00:	f7f8 f932 	bl	8000168 <__aeabi_dsub>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f0c:	f7f8 fd56 	bl	80009bc <__aeabi_dcmplt>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	f43f aef6 	beq.w	8007d02 <_dtoa_r+0x43a>
 8007f16:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007f18:	1e73      	subs	r3, r6, #1
 8007f1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f20:	2b30      	cmp	r3, #48	@ 0x30
 8007f22:	d0f8      	beq.n	8007f16 <_dtoa_r+0x64e>
 8007f24:	9f04      	ldr	r7, [sp, #16]
 8007f26:	e73f      	b.n	8007da8 <_dtoa_r+0x4e0>
 8007f28:	4b29      	ldr	r3, [pc, #164]	@ (8007fd0 <_dtoa_r+0x708>)
 8007f2a:	f7f8 fad5 	bl	80004d8 <__aeabi_dmul>
 8007f2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f32:	e7bc      	b.n	8007eae <_dtoa_r+0x5e6>
 8007f34:	d10c      	bne.n	8007f50 <_dtoa_r+0x688>
 8007f36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4b25      	ldr	r3, [pc, #148]	@ (8007fd4 <_dtoa_r+0x70c>)
 8007f3e:	f7f8 facb 	bl	80004d8 <__aeabi_dmul>
 8007f42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f46:	f7f8 fd4d 	bl	80009e4 <__aeabi_dcmpge>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	f000 815b 	beq.w	8008206 <_dtoa_r+0x93e>
 8007f50:	2400      	movs	r4, #0
 8007f52:	4625      	mov	r5, r4
 8007f54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f56:	4656      	mov	r6, sl
 8007f58:	43db      	mvns	r3, r3
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	2700      	movs	r7, #0
 8007f5e:	4621      	mov	r1, r4
 8007f60:	4658      	mov	r0, fp
 8007f62:	f000 fb01 	bl	8008568 <_Bfree>
 8007f66:	2d00      	cmp	r5, #0
 8007f68:	d0dc      	beq.n	8007f24 <_dtoa_r+0x65c>
 8007f6a:	b12f      	cbz	r7, 8007f78 <_dtoa_r+0x6b0>
 8007f6c:	42af      	cmp	r7, r5
 8007f6e:	d003      	beq.n	8007f78 <_dtoa_r+0x6b0>
 8007f70:	4639      	mov	r1, r7
 8007f72:	4658      	mov	r0, fp
 8007f74:	f000 faf8 	bl	8008568 <_Bfree>
 8007f78:	4629      	mov	r1, r5
 8007f7a:	4658      	mov	r0, fp
 8007f7c:	f000 faf4 	bl	8008568 <_Bfree>
 8007f80:	e7d0      	b.n	8007f24 <_dtoa_r+0x65c>
 8007f82:	9704      	str	r7, [sp, #16]
 8007f84:	4633      	mov	r3, r6
 8007f86:	461e      	mov	r6, r3
 8007f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f8c:	2a39      	cmp	r2, #57	@ 0x39
 8007f8e:	d107      	bne.n	8007fa0 <_dtoa_r+0x6d8>
 8007f90:	459a      	cmp	sl, r3
 8007f92:	d1f8      	bne.n	8007f86 <_dtoa_r+0x6be>
 8007f94:	9a04      	ldr	r2, [sp, #16]
 8007f96:	3201      	adds	r2, #1
 8007f98:	9204      	str	r2, [sp, #16]
 8007f9a:	2230      	movs	r2, #48	@ 0x30
 8007f9c:	f88a 2000 	strb.w	r2, [sl]
 8007fa0:	781a      	ldrb	r2, [r3, #0]
 8007fa2:	3201      	adds	r2, #1
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	e7bd      	b.n	8007f24 <_dtoa_r+0x65c>
 8007fa8:	2200      	movs	r2, #0
 8007faa:	4b09      	ldr	r3, [pc, #36]	@ (8007fd0 <_dtoa_r+0x708>)
 8007fac:	f7f8 fa94 	bl	80004d8 <__aeabi_dmul>
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	460d      	mov	r5, r1
 8007fb8:	f7f8 fcf6 	bl	80009a8 <__aeabi_dcmpeq>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	f43f aebc 	beq.w	8007d3a <_dtoa_r+0x472>
 8007fc2:	e6f1      	b.n	8007da8 <_dtoa_r+0x4e0>
 8007fc4:	0800a538 	.word	0x0800a538
 8007fc8:	3fe00000 	.word	0x3fe00000
 8007fcc:	3ff00000 	.word	0x3ff00000
 8007fd0:	40240000 	.word	0x40240000
 8007fd4:	40140000 	.word	0x40140000
 8007fd8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	f000 80db 	beq.w	8008196 <_dtoa_r+0x8ce>
 8007fe0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007fe2:	2a01      	cmp	r2, #1
 8007fe4:	f300 80bf 	bgt.w	8008166 <_dtoa_r+0x89e>
 8007fe8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007fea:	2a00      	cmp	r2, #0
 8007fec:	f000 80b7 	beq.w	800815e <_dtoa_r+0x896>
 8007ff0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ff4:	4646      	mov	r6, r8
 8007ff6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ff8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	441a      	add	r2, r3
 8007ffe:	4658      	mov	r0, fp
 8008000:	4498      	add	r8, r3
 8008002:	9209      	str	r2, [sp, #36]	@ 0x24
 8008004:	f000 fb64 	bl	80086d0 <__i2b>
 8008008:	4605      	mov	r5, r0
 800800a:	b15e      	cbz	r6, 8008024 <_dtoa_r+0x75c>
 800800c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800800e:	2b00      	cmp	r3, #0
 8008010:	dd08      	ble.n	8008024 <_dtoa_r+0x75c>
 8008012:	42b3      	cmp	r3, r6
 8008014:	bfa8      	it	ge
 8008016:	4633      	movge	r3, r6
 8008018:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800801a:	eba8 0803 	sub.w	r8, r8, r3
 800801e:	1af6      	subs	r6, r6, r3
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	9309      	str	r3, [sp, #36]	@ 0x24
 8008024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008026:	b1f3      	cbz	r3, 8008066 <_dtoa_r+0x79e>
 8008028:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 80b7 	beq.w	800819e <_dtoa_r+0x8d6>
 8008030:	b18c      	cbz	r4, 8008056 <_dtoa_r+0x78e>
 8008032:	4629      	mov	r1, r5
 8008034:	4622      	mov	r2, r4
 8008036:	4658      	mov	r0, fp
 8008038:	f000 fc08 	bl	800884c <__pow5mult>
 800803c:	464a      	mov	r2, r9
 800803e:	4601      	mov	r1, r0
 8008040:	4605      	mov	r5, r0
 8008042:	4658      	mov	r0, fp
 8008044:	f000 fb5a 	bl	80086fc <__multiply>
 8008048:	4649      	mov	r1, r9
 800804a:	9004      	str	r0, [sp, #16]
 800804c:	4658      	mov	r0, fp
 800804e:	f000 fa8b 	bl	8008568 <_Bfree>
 8008052:	9b04      	ldr	r3, [sp, #16]
 8008054:	4699      	mov	r9, r3
 8008056:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008058:	1b1a      	subs	r2, r3, r4
 800805a:	d004      	beq.n	8008066 <_dtoa_r+0x79e>
 800805c:	4649      	mov	r1, r9
 800805e:	4658      	mov	r0, fp
 8008060:	f000 fbf4 	bl	800884c <__pow5mult>
 8008064:	4681      	mov	r9, r0
 8008066:	2101      	movs	r1, #1
 8008068:	4658      	mov	r0, fp
 800806a:	f000 fb31 	bl	80086d0 <__i2b>
 800806e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008070:	4604      	mov	r4, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 81c9 	beq.w	800840a <_dtoa_r+0xb42>
 8008078:	461a      	mov	r2, r3
 800807a:	4601      	mov	r1, r0
 800807c:	4658      	mov	r0, fp
 800807e:	f000 fbe5 	bl	800884c <__pow5mult>
 8008082:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008084:	4604      	mov	r4, r0
 8008086:	2b01      	cmp	r3, #1
 8008088:	f300 808f 	bgt.w	80081aa <_dtoa_r+0x8e2>
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	f040 8087 	bne.w	80081a2 <_dtoa_r+0x8da>
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800809a:	2b00      	cmp	r3, #0
 800809c:	f040 8083 	bne.w	80081a6 <_dtoa_r+0x8de>
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080a6:	0d1b      	lsrs	r3, r3, #20
 80080a8:	051b      	lsls	r3, r3, #20
 80080aa:	b12b      	cbz	r3, 80080b8 <_dtoa_r+0x7f0>
 80080ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ae:	f108 0801 	add.w	r8, r8, #1
 80080b2:	3301      	adds	r3, #1
 80080b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b6:	2301      	movs	r3, #1
 80080b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80080ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 81aa 	beq.w	8008416 <_dtoa_r+0xb4e>
 80080c2:	6923      	ldr	r3, [r4, #16]
 80080c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080c8:	6918      	ldr	r0, [r3, #16]
 80080ca:	f000 fab5 	bl	8008638 <__hi0bits>
 80080ce:	f1c0 0020 	rsb	r0, r0, #32
 80080d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d4:	4418      	add	r0, r3
 80080d6:	f010 001f 	ands.w	r0, r0, #31
 80080da:	d071      	beq.n	80081c0 <_dtoa_r+0x8f8>
 80080dc:	f1c0 0320 	rsb	r3, r0, #32
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	dd65      	ble.n	80081b0 <_dtoa_r+0x8e8>
 80080e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e6:	f1c0 001c 	rsb	r0, r0, #28
 80080ea:	4403      	add	r3, r0
 80080ec:	4480      	add	r8, r0
 80080ee:	4406      	add	r6, r0
 80080f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080f2:	f1b8 0f00 	cmp.w	r8, #0
 80080f6:	dd05      	ble.n	8008104 <_dtoa_r+0x83c>
 80080f8:	4649      	mov	r1, r9
 80080fa:	4642      	mov	r2, r8
 80080fc:	4658      	mov	r0, fp
 80080fe:	f000 fbff 	bl	8008900 <__lshift>
 8008102:	4681      	mov	r9, r0
 8008104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008106:	2b00      	cmp	r3, #0
 8008108:	dd05      	ble.n	8008116 <_dtoa_r+0x84e>
 800810a:	4621      	mov	r1, r4
 800810c:	461a      	mov	r2, r3
 800810e:	4658      	mov	r0, fp
 8008110:	f000 fbf6 	bl	8008900 <__lshift>
 8008114:	4604      	mov	r4, r0
 8008116:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008118:	2b00      	cmp	r3, #0
 800811a:	d053      	beq.n	80081c4 <_dtoa_r+0x8fc>
 800811c:	4621      	mov	r1, r4
 800811e:	4648      	mov	r0, r9
 8008120:	f000 fc5a 	bl	80089d8 <__mcmp>
 8008124:	2800      	cmp	r0, #0
 8008126:	da4d      	bge.n	80081c4 <_dtoa_r+0x8fc>
 8008128:	1e7b      	subs	r3, r7, #1
 800812a:	4649      	mov	r1, r9
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	220a      	movs	r2, #10
 8008130:	2300      	movs	r3, #0
 8008132:	4658      	mov	r0, fp
 8008134:	f000 fa3a 	bl	80085ac <__multadd>
 8008138:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800813a:	4681      	mov	r9, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 816c 	beq.w	800841a <_dtoa_r+0xb52>
 8008142:	2300      	movs	r3, #0
 8008144:	4629      	mov	r1, r5
 8008146:	220a      	movs	r2, #10
 8008148:	4658      	mov	r0, fp
 800814a:	f000 fa2f 	bl	80085ac <__multadd>
 800814e:	9b08      	ldr	r3, [sp, #32]
 8008150:	4605      	mov	r5, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	dc61      	bgt.n	800821a <_dtoa_r+0x952>
 8008156:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008158:	2b02      	cmp	r3, #2
 800815a:	dc3b      	bgt.n	80081d4 <_dtoa_r+0x90c>
 800815c:	e05d      	b.n	800821a <_dtoa_r+0x952>
 800815e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008160:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008164:	e746      	b.n	8007ff4 <_dtoa_r+0x72c>
 8008166:	9b07      	ldr	r3, [sp, #28]
 8008168:	1e5c      	subs	r4, r3, #1
 800816a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800816c:	42a3      	cmp	r3, r4
 800816e:	bfbf      	itttt	lt
 8008170:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008172:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008174:	1ae3      	sublt	r3, r4, r3
 8008176:	18d2      	addlt	r2, r2, r3
 8008178:	bfa8      	it	ge
 800817a:	1b1c      	subge	r4, r3, r4
 800817c:	9b07      	ldr	r3, [sp, #28]
 800817e:	bfbe      	ittt	lt
 8008180:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008182:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008184:	2400      	movlt	r4, #0
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfb5      	itete	lt
 800818a:	eba8 0603 	sublt.w	r6, r8, r3
 800818e:	4646      	movge	r6, r8
 8008190:	2300      	movlt	r3, #0
 8008192:	9b07      	ldrge	r3, [sp, #28]
 8008194:	e730      	b.n	8007ff8 <_dtoa_r+0x730>
 8008196:	4646      	mov	r6, r8
 8008198:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800819a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800819c:	e735      	b.n	800800a <_dtoa_r+0x742>
 800819e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081a0:	e75c      	b.n	800805c <_dtoa_r+0x794>
 80081a2:	2300      	movs	r3, #0
 80081a4:	e788      	b.n	80080b8 <_dtoa_r+0x7f0>
 80081a6:	9b02      	ldr	r3, [sp, #8]
 80081a8:	e786      	b.n	80080b8 <_dtoa_r+0x7f0>
 80081aa:	2300      	movs	r3, #0
 80081ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80081ae:	e788      	b.n	80080c2 <_dtoa_r+0x7fa>
 80081b0:	d09f      	beq.n	80080f2 <_dtoa_r+0x82a>
 80081b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081b4:	331c      	adds	r3, #28
 80081b6:	441a      	add	r2, r3
 80081b8:	4498      	add	r8, r3
 80081ba:	441e      	add	r6, r3
 80081bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80081be:	e798      	b.n	80080f2 <_dtoa_r+0x82a>
 80081c0:	4603      	mov	r3, r0
 80081c2:	e7f6      	b.n	80081b2 <_dtoa_r+0x8ea>
 80081c4:	9b07      	ldr	r3, [sp, #28]
 80081c6:	9704      	str	r7, [sp, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dc20      	bgt.n	800820e <_dtoa_r+0x946>
 80081cc:	9308      	str	r3, [sp, #32]
 80081ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	dd1e      	ble.n	8008212 <_dtoa_r+0x94a>
 80081d4:	9b08      	ldr	r3, [sp, #32]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f47f aebc 	bne.w	8007f54 <_dtoa_r+0x68c>
 80081dc:	4621      	mov	r1, r4
 80081de:	2205      	movs	r2, #5
 80081e0:	4658      	mov	r0, fp
 80081e2:	f000 f9e3 	bl	80085ac <__multadd>
 80081e6:	4601      	mov	r1, r0
 80081e8:	4604      	mov	r4, r0
 80081ea:	4648      	mov	r0, r9
 80081ec:	f000 fbf4 	bl	80089d8 <__mcmp>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	f77f aeaf 	ble.w	8007f54 <_dtoa_r+0x68c>
 80081f6:	2331      	movs	r3, #49	@ 0x31
 80081f8:	4656      	mov	r6, sl
 80081fa:	f806 3b01 	strb.w	r3, [r6], #1
 80081fe:	9b04      	ldr	r3, [sp, #16]
 8008200:	3301      	adds	r3, #1
 8008202:	9304      	str	r3, [sp, #16]
 8008204:	e6aa      	b.n	8007f5c <_dtoa_r+0x694>
 8008206:	9c07      	ldr	r4, [sp, #28]
 8008208:	9704      	str	r7, [sp, #16]
 800820a:	4625      	mov	r5, r4
 800820c:	e7f3      	b.n	80081f6 <_dtoa_r+0x92e>
 800820e:	9b07      	ldr	r3, [sp, #28]
 8008210:	9308      	str	r3, [sp, #32]
 8008212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8104 	beq.w	8008422 <_dtoa_r+0xb5a>
 800821a:	2e00      	cmp	r6, #0
 800821c:	dd05      	ble.n	800822a <_dtoa_r+0x962>
 800821e:	4629      	mov	r1, r5
 8008220:	4632      	mov	r2, r6
 8008222:	4658      	mov	r0, fp
 8008224:	f000 fb6c 	bl	8008900 <__lshift>
 8008228:	4605      	mov	r5, r0
 800822a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800822c:	2b00      	cmp	r3, #0
 800822e:	d05a      	beq.n	80082e6 <_dtoa_r+0xa1e>
 8008230:	4658      	mov	r0, fp
 8008232:	6869      	ldr	r1, [r5, #4]
 8008234:	f000 f958 	bl	80084e8 <_Balloc>
 8008238:	4606      	mov	r6, r0
 800823a:	b928      	cbnz	r0, 8008248 <_dtoa_r+0x980>
 800823c:	4602      	mov	r2, r0
 800823e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008242:	4b83      	ldr	r3, [pc, #524]	@ (8008450 <_dtoa_r+0xb88>)
 8008244:	f7ff bb54 	b.w	80078f0 <_dtoa_r+0x28>
 8008248:	692a      	ldr	r2, [r5, #16]
 800824a:	f105 010c 	add.w	r1, r5, #12
 800824e:	3202      	adds	r2, #2
 8008250:	0092      	lsls	r2, r2, #2
 8008252:	300c      	adds	r0, #12
 8008254:	f7ff faa1 	bl	800779a <memcpy>
 8008258:	2201      	movs	r2, #1
 800825a:	4631      	mov	r1, r6
 800825c:	4658      	mov	r0, fp
 800825e:	f000 fb4f 	bl	8008900 <__lshift>
 8008262:	462f      	mov	r7, r5
 8008264:	4605      	mov	r5, r0
 8008266:	f10a 0301 	add.w	r3, sl, #1
 800826a:	9307      	str	r3, [sp, #28]
 800826c:	9b08      	ldr	r3, [sp, #32]
 800826e:	4453      	add	r3, sl
 8008270:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008272:	9b02      	ldr	r3, [sp, #8]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	930a      	str	r3, [sp, #40]	@ 0x28
 800827a:	9b07      	ldr	r3, [sp, #28]
 800827c:	4621      	mov	r1, r4
 800827e:	3b01      	subs	r3, #1
 8008280:	4648      	mov	r0, r9
 8008282:	9302      	str	r3, [sp, #8]
 8008284:	f7ff fa97 	bl	80077b6 <quorem>
 8008288:	4639      	mov	r1, r7
 800828a:	9008      	str	r0, [sp, #32]
 800828c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008290:	4648      	mov	r0, r9
 8008292:	f000 fba1 	bl	80089d8 <__mcmp>
 8008296:	462a      	mov	r2, r5
 8008298:	9009      	str	r0, [sp, #36]	@ 0x24
 800829a:	4621      	mov	r1, r4
 800829c:	4658      	mov	r0, fp
 800829e:	f000 fbb7 	bl	8008a10 <__mdiff>
 80082a2:	68c2      	ldr	r2, [r0, #12]
 80082a4:	4606      	mov	r6, r0
 80082a6:	bb02      	cbnz	r2, 80082ea <_dtoa_r+0xa22>
 80082a8:	4601      	mov	r1, r0
 80082aa:	4648      	mov	r0, r9
 80082ac:	f000 fb94 	bl	80089d8 <__mcmp>
 80082b0:	4602      	mov	r2, r0
 80082b2:	4631      	mov	r1, r6
 80082b4:	4658      	mov	r0, fp
 80082b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80082b8:	f000 f956 	bl	8008568 <_Bfree>
 80082bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80082c0:	9e07      	ldr	r6, [sp, #28]
 80082c2:	ea43 0102 	orr.w	r1, r3, r2
 80082c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082c8:	4319      	orrs	r1, r3
 80082ca:	d110      	bne.n	80082ee <_dtoa_r+0xa26>
 80082cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082d0:	d029      	beq.n	8008326 <_dtoa_r+0xa5e>
 80082d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	dd02      	ble.n	80082de <_dtoa_r+0xa16>
 80082d8:	9b08      	ldr	r3, [sp, #32]
 80082da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80082de:	9b02      	ldr	r3, [sp, #8]
 80082e0:	f883 8000 	strb.w	r8, [r3]
 80082e4:	e63b      	b.n	8007f5e <_dtoa_r+0x696>
 80082e6:	4628      	mov	r0, r5
 80082e8:	e7bb      	b.n	8008262 <_dtoa_r+0x99a>
 80082ea:	2201      	movs	r2, #1
 80082ec:	e7e1      	b.n	80082b2 <_dtoa_r+0x9ea>
 80082ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	db04      	blt.n	80082fe <_dtoa_r+0xa36>
 80082f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80082f6:	430b      	orrs	r3, r1
 80082f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082fa:	430b      	orrs	r3, r1
 80082fc:	d120      	bne.n	8008340 <_dtoa_r+0xa78>
 80082fe:	2a00      	cmp	r2, #0
 8008300:	dded      	ble.n	80082de <_dtoa_r+0xa16>
 8008302:	4649      	mov	r1, r9
 8008304:	2201      	movs	r2, #1
 8008306:	4658      	mov	r0, fp
 8008308:	f000 fafa 	bl	8008900 <__lshift>
 800830c:	4621      	mov	r1, r4
 800830e:	4681      	mov	r9, r0
 8008310:	f000 fb62 	bl	80089d8 <__mcmp>
 8008314:	2800      	cmp	r0, #0
 8008316:	dc03      	bgt.n	8008320 <_dtoa_r+0xa58>
 8008318:	d1e1      	bne.n	80082de <_dtoa_r+0xa16>
 800831a:	f018 0f01 	tst.w	r8, #1
 800831e:	d0de      	beq.n	80082de <_dtoa_r+0xa16>
 8008320:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008324:	d1d8      	bne.n	80082d8 <_dtoa_r+0xa10>
 8008326:	2339      	movs	r3, #57	@ 0x39
 8008328:	9a02      	ldr	r2, [sp, #8]
 800832a:	7013      	strb	r3, [r2, #0]
 800832c:	4633      	mov	r3, r6
 800832e:	461e      	mov	r6, r3
 8008330:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008334:	3b01      	subs	r3, #1
 8008336:	2a39      	cmp	r2, #57	@ 0x39
 8008338:	d052      	beq.n	80083e0 <_dtoa_r+0xb18>
 800833a:	3201      	adds	r2, #1
 800833c:	701a      	strb	r2, [r3, #0]
 800833e:	e60e      	b.n	8007f5e <_dtoa_r+0x696>
 8008340:	2a00      	cmp	r2, #0
 8008342:	dd07      	ble.n	8008354 <_dtoa_r+0xa8c>
 8008344:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008348:	d0ed      	beq.n	8008326 <_dtoa_r+0xa5e>
 800834a:	9a02      	ldr	r2, [sp, #8]
 800834c:	f108 0301 	add.w	r3, r8, #1
 8008350:	7013      	strb	r3, [r2, #0]
 8008352:	e604      	b.n	8007f5e <_dtoa_r+0x696>
 8008354:	9b07      	ldr	r3, [sp, #28]
 8008356:	9a07      	ldr	r2, [sp, #28]
 8008358:	f803 8c01 	strb.w	r8, [r3, #-1]
 800835c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800835e:	4293      	cmp	r3, r2
 8008360:	d028      	beq.n	80083b4 <_dtoa_r+0xaec>
 8008362:	4649      	mov	r1, r9
 8008364:	2300      	movs	r3, #0
 8008366:	220a      	movs	r2, #10
 8008368:	4658      	mov	r0, fp
 800836a:	f000 f91f 	bl	80085ac <__multadd>
 800836e:	42af      	cmp	r7, r5
 8008370:	4681      	mov	r9, r0
 8008372:	f04f 0300 	mov.w	r3, #0
 8008376:	f04f 020a 	mov.w	r2, #10
 800837a:	4639      	mov	r1, r7
 800837c:	4658      	mov	r0, fp
 800837e:	d107      	bne.n	8008390 <_dtoa_r+0xac8>
 8008380:	f000 f914 	bl	80085ac <__multadd>
 8008384:	4607      	mov	r7, r0
 8008386:	4605      	mov	r5, r0
 8008388:	9b07      	ldr	r3, [sp, #28]
 800838a:	3301      	adds	r3, #1
 800838c:	9307      	str	r3, [sp, #28]
 800838e:	e774      	b.n	800827a <_dtoa_r+0x9b2>
 8008390:	f000 f90c 	bl	80085ac <__multadd>
 8008394:	4629      	mov	r1, r5
 8008396:	4607      	mov	r7, r0
 8008398:	2300      	movs	r3, #0
 800839a:	220a      	movs	r2, #10
 800839c:	4658      	mov	r0, fp
 800839e:	f000 f905 	bl	80085ac <__multadd>
 80083a2:	4605      	mov	r5, r0
 80083a4:	e7f0      	b.n	8008388 <_dtoa_r+0xac0>
 80083a6:	9b08      	ldr	r3, [sp, #32]
 80083a8:	2700      	movs	r7, #0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	bfcc      	ite	gt
 80083ae:	461e      	movgt	r6, r3
 80083b0:	2601      	movle	r6, #1
 80083b2:	4456      	add	r6, sl
 80083b4:	4649      	mov	r1, r9
 80083b6:	2201      	movs	r2, #1
 80083b8:	4658      	mov	r0, fp
 80083ba:	f000 faa1 	bl	8008900 <__lshift>
 80083be:	4621      	mov	r1, r4
 80083c0:	4681      	mov	r9, r0
 80083c2:	f000 fb09 	bl	80089d8 <__mcmp>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	dcb0      	bgt.n	800832c <_dtoa_r+0xa64>
 80083ca:	d102      	bne.n	80083d2 <_dtoa_r+0xb0a>
 80083cc:	f018 0f01 	tst.w	r8, #1
 80083d0:	d1ac      	bne.n	800832c <_dtoa_r+0xa64>
 80083d2:	4633      	mov	r3, r6
 80083d4:	461e      	mov	r6, r3
 80083d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083da:	2a30      	cmp	r2, #48	@ 0x30
 80083dc:	d0fa      	beq.n	80083d4 <_dtoa_r+0xb0c>
 80083de:	e5be      	b.n	8007f5e <_dtoa_r+0x696>
 80083e0:	459a      	cmp	sl, r3
 80083e2:	d1a4      	bne.n	800832e <_dtoa_r+0xa66>
 80083e4:	9b04      	ldr	r3, [sp, #16]
 80083e6:	3301      	adds	r3, #1
 80083e8:	9304      	str	r3, [sp, #16]
 80083ea:	2331      	movs	r3, #49	@ 0x31
 80083ec:	f88a 3000 	strb.w	r3, [sl]
 80083f0:	e5b5      	b.n	8007f5e <_dtoa_r+0x696>
 80083f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80083f4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008454 <_dtoa_r+0xb8c>
 80083f8:	b11b      	cbz	r3, 8008402 <_dtoa_r+0xb3a>
 80083fa:	f10a 0308 	add.w	r3, sl, #8
 80083fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	4650      	mov	r0, sl
 8008404:	b017      	add	sp, #92	@ 0x5c
 8008406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800840c:	2b01      	cmp	r3, #1
 800840e:	f77f ae3d 	ble.w	800808c <_dtoa_r+0x7c4>
 8008412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008414:	930a      	str	r3, [sp, #40]	@ 0x28
 8008416:	2001      	movs	r0, #1
 8008418:	e65b      	b.n	80080d2 <_dtoa_r+0x80a>
 800841a:	9b08      	ldr	r3, [sp, #32]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f77f aed6 	ble.w	80081ce <_dtoa_r+0x906>
 8008422:	4656      	mov	r6, sl
 8008424:	4621      	mov	r1, r4
 8008426:	4648      	mov	r0, r9
 8008428:	f7ff f9c5 	bl	80077b6 <quorem>
 800842c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008430:	9b08      	ldr	r3, [sp, #32]
 8008432:	f806 8b01 	strb.w	r8, [r6], #1
 8008436:	eba6 020a 	sub.w	r2, r6, sl
 800843a:	4293      	cmp	r3, r2
 800843c:	ddb3      	ble.n	80083a6 <_dtoa_r+0xade>
 800843e:	4649      	mov	r1, r9
 8008440:	2300      	movs	r3, #0
 8008442:	220a      	movs	r2, #10
 8008444:	4658      	mov	r0, fp
 8008446:	f000 f8b1 	bl	80085ac <__multadd>
 800844a:	4681      	mov	r9, r0
 800844c:	e7ea      	b.n	8008424 <_dtoa_r+0xb5c>
 800844e:	bf00      	nop
 8008450:	0800a493 	.word	0x0800a493
 8008454:	0800a417 	.word	0x0800a417

08008458 <_free_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4605      	mov	r5, r0
 800845c:	2900      	cmp	r1, #0
 800845e:	d040      	beq.n	80084e2 <_free_r+0x8a>
 8008460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008464:	1f0c      	subs	r4, r1, #4
 8008466:	2b00      	cmp	r3, #0
 8008468:	bfb8      	it	lt
 800846a:	18e4      	addlt	r4, r4, r3
 800846c:	f7fe fa8c 	bl	8006988 <__malloc_lock>
 8008470:	4a1c      	ldr	r2, [pc, #112]	@ (80084e4 <_free_r+0x8c>)
 8008472:	6813      	ldr	r3, [r2, #0]
 8008474:	b933      	cbnz	r3, 8008484 <_free_r+0x2c>
 8008476:	6063      	str	r3, [r4, #4]
 8008478:	6014      	str	r4, [r2, #0]
 800847a:	4628      	mov	r0, r5
 800847c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008480:	f7fe ba88 	b.w	8006994 <__malloc_unlock>
 8008484:	42a3      	cmp	r3, r4
 8008486:	d908      	bls.n	800849a <_free_r+0x42>
 8008488:	6820      	ldr	r0, [r4, #0]
 800848a:	1821      	adds	r1, r4, r0
 800848c:	428b      	cmp	r3, r1
 800848e:	bf01      	itttt	eq
 8008490:	6819      	ldreq	r1, [r3, #0]
 8008492:	685b      	ldreq	r3, [r3, #4]
 8008494:	1809      	addeq	r1, r1, r0
 8008496:	6021      	streq	r1, [r4, #0]
 8008498:	e7ed      	b.n	8008476 <_free_r+0x1e>
 800849a:	461a      	mov	r2, r3
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	b10b      	cbz	r3, 80084a4 <_free_r+0x4c>
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	d9fa      	bls.n	800849a <_free_r+0x42>
 80084a4:	6811      	ldr	r1, [r2, #0]
 80084a6:	1850      	adds	r0, r2, r1
 80084a8:	42a0      	cmp	r0, r4
 80084aa:	d10b      	bne.n	80084c4 <_free_r+0x6c>
 80084ac:	6820      	ldr	r0, [r4, #0]
 80084ae:	4401      	add	r1, r0
 80084b0:	1850      	adds	r0, r2, r1
 80084b2:	4283      	cmp	r3, r0
 80084b4:	6011      	str	r1, [r2, #0]
 80084b6:	d1e0      	bne.n	800847a <_free_r+0x22>
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	4408      	add	r0, r1
 80084be:	6010      	str	r0, [r2, #0]
 80084c0:	6053      	str	r3, [r2, #4]
 80084c2:	e7da      	b.n	800847a <_free_r+0x22>
 80084c4:	d902      	bls.n	80084cc <_free_r+0x74>
 80084c6:	230c      	movs	r3, #12
 80084c8:	602b      	str	r3, [r5, #0]
 80084ca:	e7d6      	b.n	800847a <_free_r+0x22>
 80084cc:	6820      	ldr	r0, [r4, #0]
 80084ce:	1821      	adds	r1, r4, r0
 80084d0:	428b      	cmp	r3, r1
 80084d2:	bf01      	itttt	eq
 80084d4:	6819      	ldreq	r1, [r3, #0]
 80084d6:	685b      	ldreq	r3, [r3, #4]
 80084d8:	1809      	addeq	r1, r1, r0
 80084da:	6021      	streq	r1, [r4, #0]
 80084dc:	6063      	str	r3, [r4, #4]
 80084de:	6054      	str	r4, [r2, #4]
 80084e0:	e7cb      	b.n	800847a <_free_r+0x22>
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	20000428 	.word	0x20000428

080084e8 <_Balloc>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	69c6      	ldr	r6, [r0, #28]
 80084ec:	4604      	mov	r4, r0
 80084ee:	460d      	mov	r5, r1
 80084f0:	b976      	cbnz	r6, 8008510 <_Balloc+0x28>
 80084f2:	2010      	movs	r0, #16
 80084f4:	f7fe f996 	bl	8006824 <malloc>
 80084f8:	4602      	mov	r2, r0
 80084fa:	61e0      	str	r0, [r4, #28]
 80084fc:	b920      	cbnz	r0, 8008508 <_Balloc+0x20>
 80084fe:	216b      	movs	r1, #107	@ 0x6b
 8008500:	4b17      	ldr	r3, [pc, #92]	@ (8008560 <_Balloc+0x78>)
 8008502:	4818      	ldr	r0, [pc, #96]	@ (8008564 <_Balloc+0x7c>)
 8008504:	f000 fd92 	bl	800902c <__assert_func>
 8008508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800850c:	6006      	str	r6, [r0, #0]
 800850e:	60c6      	str	r6, [r0, #12]
 8008510:	69e6      	ldr	r6, [r4, #28]
 8008512:	68f3      	ldr	r3, [r6, #12]
 8008514:	b183      	cbz	r3, 8008538 <_Balloc+0x50>
 8008516:	69e3      	ldr	r3, [r4, #28]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800851e:	b9b8      	cbnz	r0, 8008550 <_Balloc+0x68>
 8008520:	2101      	movs	r1, #1
 8008522:	fa01 f605 	lsl.w	r6, r1, r5
 8008526:	1d72      	adds	r2, r6, #5
 8008528:	4620      	mov	r0, r4
 800852a:	0092      	lsls	r2, r2, #2
 800852c:	f7fe f966 	bl	80067fc <_calloc_r>
 8008530:	b160      	cbz	r0, 800854c <_Balloc+0x64>
 8008532:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008536:	e00e      	b.n	8008556 <_Balloc+0x6e>
 8008538:	2221      	movs	r2, #33	@ 0x21
 800853a:	2104      	movs	r1, #4
 800853c:	4620      	mov	r0, r4
 800853e:	f7fe f95d 	bl	80067fc <_calloc_r>
 8008542:	69e3      	ldr	r3, [r4, #28]
 8008544:	60f0      	str	r0, [r6, #12]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e4      	bne.n	8008516 <_Balloc+0x2e>
 800854c:	2000      	movs	r0, #0
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	6802      	ldr	r2, [r0, #0]
 8008552:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008556:	2300      	movs	r3, #0
 8008558:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800855c:	e7f7      	b.n	800854e <_Balloc+0x66>
 800855e:	bf00      	nop
 8008560:	0800a424 	.word	0x0800a424
 8008564:	0800a4a4 	.word	0x0800a4a4

08008568 <_Bfree>:
 8008568:	b570      	push	{r4, r5, r6, lr}
 800856a:	69c6      	ldr	r6, [r0, #28]
 800856c:	4605      	mov	r5, r0
 800856e:	460c      	mov	r4, r1
 8008570:	b976      	cbnz	r6, 8008590 <_Bfree+0x28>
 8008572:	2010      	movs	r0, #16
 8008574:	f7fe f956 	bl	8006824 <malloc>
 8008578:	4602      	mov	r2, r0
 800857a:	61e8      	str	r0, [r5, #28]
 800857c:	b920      	cbnz	r0, 8008588 <_Bfree+0x20>
 800857e:	218f      	movs	r1, #143	@ 0x8f
 8008580:	4b08      	ldr	r3, [pc, #32]	@ (80085a4 <_Bfree+0x3c>)
 8008582:	4809      	ldr	r0, [pc, #36]	@ (80085a8 <_Bfree+0x40>)
 8008584:	f000 fd52 	bl	800902c <__assert_func>
 8008588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800858c:	6006      	str	r6, [r0, #0]
 800858e:	60c6      	str	r6, [r0, #12]
 8008590:	b13c      	cbz	r4, 80085a2 <_Bfree+0x3a>
 8008592:	69eb      	ldr	r3, [r5, #28]
 8008594:	6862      	ldr	r2, [r4, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800859c:	6021      	str	r1, [r4, #0]
 800859e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085a2:	bd70      	pop	{r4, r5, r6, pc}
 80085a4:	0800a424 	.word	0x0800a424
 80085a8:	0800a4a4 	.word	0x0800a4a4

080085ac <__multadd>:
 80085ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b0:	4607      	mov	r7, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	461e      	mov	r6, r3
 80085b6:	2000      	movs	r0, #0
 80085b8:	690d      	ldr	r5, [r1, #16]
 80085ba:	f101 0c14 	add.w	ip, r1, #20
 80085be:	f8dc 3000 	ldr.w	r3, [ip]
 80085c2:	3001      	adds	r0, #1
 80085c4:	b299      	uxth	r1, r3
 80085c6:	fb02 6101 	mla	r1, r2, r1, r6
 80085ca:	0c1e      	lsrs	r6, r3, #16
 80085cc:	0c0b      	lsrs	r3, r1, #16
 80085ce:	fb02 3306 	mla	r3, r2, r6, r3
 80085d2:	b289      	uxth	r1, r1
 80085d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085d8:	4285      	cmp	r5, r0
 80085da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085de:	f84c 1b04 	str.w	r1, [ip], #4
 80085e2:	dcec      	bgt.n	80085be <__multadd+0x12>
 80085e4:	b30e      	cbz	r6, 800862a <__multadd+0x7e>
 80085e6:	68a3      	ldr	r3, [r4, #8]
 80085e8:	42ab      	cmp	r3, r5
 80085ea:	dc19      	bgt.n	8008620 <__multadd+0x74>
 80085ec:	6861      	ldr	r1, [r4, #4]
 80085ee:	4638      	mov	r0, r7
 80085f0:	3101      	adds	r1, #1
 80085f2:	f7ff ff79 	bl	80084e8 <_Balloc>
 80085f6:	4680      	mov	r8, r0
 80085f8:	b928      	cbnz	r0, 8008606 <__multadd+0x5a>
 80085fa:	4602      	mov	r2, r0
 80085fc:	21ba      	movs	r1, #186	@ 0xba
 80085fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008630 <__multadd+0x84>)
 8008600:	480c      	ldr	r0, [pc, #48]	@ (8008634 <__multadd+0x88>)
 8008602:	f000 fd13 	bl	800902c <__assert_func>
 8008606:	6922      	ldr	r2, [r4, #16]
 8008608:	f104 010c 	add.w	r1, r4, #12
 800860c:	3202      	adds	r2, #2
 800860e:	0092      	lsls	r2, r2, #2
 8008610:	300c      	adds	r0, #12
 8008612:	f7ff f8c2 	bl	800779a <memcpy>
 8008616:	4621      	mov	r1, r4
 8008618:	4638      	mov	r0, r7
 800861a:	f7ff ffa5 	bl	8008568 <_Bfree>
 800861e:	4644      	mov	r4, r8
 8008620:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008624:	3501      	adds	r5, #1
 8008626:	615e      	str	r6, [r3, #20]
 8008628:	6125      	str	r5, [r4, #16]
 800862a:	4620      	mov	r0, r4
 800862c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008630:	0800a493 	.word	0x0800a493
 8008634:	0800a4a4 	.word	0x0800a4a4

08008638 <__hi0bits>:
 8008638:	4603      	mov	r3, r0
 800863a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800863e:	bf3a      	itte	cc
 8008640:	0403      	lslcc	r3, r0, #16
 8008642:	2010      	movcc	r0, #16
 8008644:	2000      	movcs	r0, #0
 8008646:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800864a:	bf3c      	itt	cc
 800864c:	021b      	lslcc	r3, r3, #8
 800864e:	3008      	addcc	r0, #8
 8008650:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008654:	bf3c      	itt	cc
 8008656:	011b      	lslcc	r3, r3, #4
 8008658:	3004      	addcc	r0, #4
 800865a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800865e:	bf3c      	itt	cc
 8008660:	009b      	lslcc	r3, r3, #2
 8008662:	3002      	addcc	r0, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	db05      	blt.n	8008674 <__hi0bits+0x3c>
 8008668:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800866c:	f100 0001 	add.w	r0, r0, #1
 8008670:	bf08      	it	eq
 8008672:	2020      	moveq	r0, #32
 8008674:	4770      	bx	lr

08008676 <__lo0bits>:
 8008676:	6803      	ldr	r3, [r0, #0]
 8008678:	4602      	mov	r2, r0
 800867a:	f013 0007 	ands.w	r0, r3, #7
 800867e:	d00b      	beq.n	8008698 <__lo0bits+0x22>
 8008680:	07d9      	lsls	r1, r3, #31
 8008682:	d421      	bmi.n	80086c8 <__lo0bits+0x52>
 8008684:	0798      	lsls	r0, r3, #30
 8008686:	bf49      	itett	mi
 8008688:	085b      	lsrmi	r3, r3, #1
 800868a:	089b      	lsrpl	r3, r3, #2
 800868c:	2001      	movmi	r0, #1
 800868e:	6013      	strmi	r3, [r2, #0]
 8008690:	bf5c      	itt	pl
 8008692:	2002      	movpl	r0, #2
 8008694:	6013      	strpl	r3, [r2, #0]
 8008696:	4770      	bx	lr
 8008698:	b299      	uxth	r1, r3
 800869a:	b909      	cbnz	r1, 80086a0 <__lo0bits+0x2a>
 800869c:	2010      	movs	r0, #16
 800869e:	0c1b      	lsrs	r3, r3, #16
 80086a0:	b2d9      	uxtb	r1, r3
 80086a2:	b909      	cbnz	r1, 80086a8 <__lo0bits+0x32>
 80086a4:	3008      	adds	r0, #8
 80086a6:	0a1b      	lsrs	r3, r3, #8
 80086a8:	0719      	lsls	r1, r3, #28
 80086aa:	bf04      	itt	eq
 80086ac:	091b      	lsreq	r3, r3, #4
 80086ae:	3004      	addeq	r0, #4
 80086b0:	0799      	lsls	r1, r3, #30
 80086b2:	bf04      	itt	eq
 80086b4:	089b      	lsreq	r3, r3, #2
 80086b6:	3002      	addeq	r0, #2
 80086b8:	07d9      	lsls	r1, r3, #31
 80086ba:	d403      	bmi.n	80086c4 <__lo0bits+0x4e>
 80086bc:	085b      	lsrs	r3, r3, #1
 80086be:	f100 0001 	add.w	r0, r0, #1
 80086c2:	d003      	beq.n	80086cc <__lo0bits+0x56>
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	4770      	bx	lr
 80086c8:	2000      	movs	r0, #0
 80086ca:	4770      	bx	lr
 80086cc:	2020      	movs	r0, #32
 80086ce:	4770      	bx	lr

080086d0 <__i2b>:
 80086d0:	b510      	push	{r4, lr}
 80086d2:	460c      	mov	r4, r1
 80086d4:	2101      	movs	r1, #1
 80086d6:	f7ff ff07 	bl	80084e8 <_Balloc>
 80086da:	4602      	mov	r2, r0
 80086dc:	b928      	cbnz	r0, 80086ea <__i2b+0x1a>
 80086de:	f240 1145 	movw	r1, #325	@ 0x145
 80086e2:	4b04      	ldr	r3, [pc, #16]	@ (80086f4 <__i2b+0x24>)
 80086e4:	4804      	ldr	r0, [pc, #16]	@ (80086f8 <__i2b+0x28>)
 80086e6:	f000 fca1 	bl	800902c <__assert_func>
 80086ea:	2301      	movs	r3, #1
 80086ec:	6144      	str	r4, [r0, #20]
 80086ee:	6103      	str	r3, [r0, #16]
 80086f0:	bd10      	pop	{r4, pc}
 80086f2:	bf00      	nop
 80086f4:	0800a493 	.word	0x0800a493
 80086f8:	0800a4a4 	.word	0x0800a4a4

080086fc <__multiply>:
 80086fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	4614      	mov	r4, r2
 8008702:	690a      	ldr	r2, [r1, #16]
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	460f      	mov	r7, r1
 8008708:	429a      	cmp	r2, r3
 800870a:	bfa2      	ittt	ge
 800870c:	4623      	movge	r3, r4
 800870e:	460c      	movge	r4, r1
 8008710:	461f      	movge	r7, r3
 8008712:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008716:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800871a:	68a3      	ldr	r3, [r4, #8]
 800871c:	6861      	ldr	r1, [r4, #4]
 800871e:	eb0a 0609 	add.w	r6, sl, r9
 8008722:	42b3      	cmp	r3, r6
 8008724:	b085      	sub	sp, #20
 8008726:	bfb8      	it	lt
 8008728:	3101      	addlt	r1, #1
 800872a:	f7ff fedd 	bl	80084e8 <_Balloc>
 800872e:	b930      	cbnz	r0, 800873e <__multiply+0x42>
 8008730:	4602      	mov	r2, r0
 8008732:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008736:	4b43      	ldr	r3, [pc, #268]	@ (8008844 <__multiply+0x148>)
 8008738:	4843      	ldr	r0, [pc, #268]	@ (8008848 <__multiply+0x14c>)
 800873a:	f000 fc77 	bl	800902c <__assert_func>
 800873e:	f100 0514 	add.w	r5, r0, #20
 8008742:	462b      	mov	r3, r5
 8008744:	2200      	movs	r2, #0
 8008746:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800874a:	4543      	cmp	r3, r8
 800874c:	d321      	bcc.n	8008792 <__multiply+0x96>
 800874e:	f107 0114 	add.w	r1, r7, #20
 8008752:	f104 0214 	add.w	r2, r4, #20
 8008756:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800875a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800875e:	9302      	str	r3, [sp, #8]
 8008760:	1b13      	subs	r3, r2, r4
 8008762:	3b15      	subs	r3, #21
 8008764:	f023 0303 	bic.w	r3, r3, #3
 8008768:	3304      	adds	r3, #4
 800876a:	f104 0715 	add.w	r7, r4, #21
 800876e:	42ba      	cmp	r2, r7
 8008770:	bf38      	it	cc
 8008772:	2304      	movcc	r3, #4
 8008774:	9301      	str	r3, [sp, #4]
 8008776:	9b02      	ldr	r3, [sp, #8]
 8008778:	9103      	str	r1, [sp, #12]
 800877a:	428b      	cmp	r3, r1
 800877c:	d80c      	bhi.n	8008798 <__multiply+0x9c>
 800877e:	2e00      	cmp	r6, #0
 8008780:	dd03      	ble.n	800878a <__multiply+0x8e>
 8008782:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008786:	2b00      	cmp	r3, #0
 8008788:	d05a      	beq.n	8008840 <__multiply+0x144>
 800878a:	6106      	str	r6, [r0, #16]
 800878c:	b005      	add	sp, #20
 800878e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008792:	f843 2b04 	str.w	r2, [r3], #4
 8008796:	e7d8      	b.n	800874a <__multiply+0x4e>
 8008798:	f8b1 a000 	ldrh.w	sl, [r1]
 800879c:	f1ba 0f00 	cmp.w	sl, #0
 80087a0:	d023      	beq.n	80087ea <__multiply+0xee>
 80087a2:	46a9      	mov	r9, r5
 80087a4:	f04f 0c00 	mov.w	ip, #0
 80087a8:	f104 0e14 	add.w	lr, r4, #20
 80087ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087b0:	f8d9 3000 	ldr.w	r3, [r9]
 80087b4:	fa1f fb87 	uxth.w	fp, r7
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	fb0a 330b 	mla	r3, sl, fp, r3
 80087be:	4463      	add	r3, ip
 80087c0:	f8d9 c000 	ldr.w	ip, [r9]
 80087c4:	0c3f      	lsrs	r7, r7, #16
 80087c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80087ca:	fb0a c707 	mla	r7, sl, r7, ip
 80087ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087d8:	4572      	cmp	r2, lr
 80087da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087de:	f849 3b04 	str.w	r3, [r9], #4
 80087e2:	d8e3      	bhi.n	80087ac <__multiply+0xb0>
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	f845 c003 	str.w	ip, [r5, r3]
 80087ea:	9b03      	ldr	r3, [sp, #12]
 80087ec:	3104      	adds	r1, #4
 80087ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80087f2:	f1b9 0f00 	cmp.w	r9, #0
 80087f6:	d021      	beq.n	800883c <__multiply+0x140>
 80087f8:	46ae      	mov	lr, r5
 80087fa:	f04f 0a00 	mov.w	sl, #0
 80087fe:	682b      	ldr	r3, [r5, #0]
 8008800:	f104 0c14 	add.w	ip, r4, #20
 8008804:	f8bc b000 	ldrh.w	fp, [ip]
 8008808:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800880c:	b29b      	uxth	r3, r3
 800880e:	fb09 770b 	mla	r7, r9, fp, r7
 8008812:	4457      	add	r7, sl
 8008814:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008818:	f84e 3b04 	str.w	r3, [lr], #4
 800881c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008820:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008824:	f8be 3000 	ldrh.w	r3, [lr]
 8008828:	4562      	cmp	r2, ip
 800882a:	fb09 330a 	mla	r3, r9, sl, r3
 800882e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008832:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008836:	d8e5      	bhi.n	8008804 <__multiply+0x108>
 8008838:	9f01      	ldr	r7, [sp, #4]
 800883a:	51eb      	str	r3, [r5, r7]
 800883c:	3504      	adds	r5, #4
 800883e:	e79a      	b.n	8008776 <__multiply+0x7a>
 8008840:	3e01      	subs	r6, #1
 8008842:	e79c      	b.n	800877e <__multiply+0x82>
 8008844:	0800a493 	.word	0x0800a493
 8008848:	0800a4a4 	.word	0x0800a4a4

0800884c <__pow5mult>:
 800884c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008850:	4615      	mov	r5, r2
 8008852:	f012 0203 	ands.w	r2, r2, #3
 8008856:	4607      	mov	r7, r0
 8008858:	460e      	mov	r6, r1
 800885a:	d007      	beq.n	800886c <__pow5mult+0x20>
 800885c:	4c25      	ldr	r4, [pc, #148]	@ (80088f4 <__pow5mult+0xa8>)
 800885e:	3a01      	subs	r2, #1
 8008860:	2300      	movs	r3, #0
 8008862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008866:	f7ff fea1 	bl	80085ac <__multadd>
 800886a:	4606      	mov	r6, r0
 800886c:	10ad      	asrs	r5, r5, #2
 800886e:	d03d      	beq.n	80088ec <__pow5mult+0xa0>
 8008870:	69fc      	ldr	r4, [r7, #28]
 8008872:	b97c      	cbnz	r4, 8008894 <__pow5mult+0x48>
 8008874:	2010      	movs	r0, #16
 8008876:	f7fd ffd5 	bl	8006824 <malloc>
 800887a:	4602      	mov	r2, r0
 800887c:	61f8      	str	r0, [r7, #28]
 800887e:	b928      	cbnz	r0, 800888c <__pow5mult+0x40>
 8008880:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008884:	4b1c      	ldr	r3, [pc, #112]	@ (80088f8 <__pow5mult+0xac>)
 8008886:	481d      	ldr	r0, [pc, #116]	@ (80088fc <__pow5mult+0xb0>)
 8008888:	f000 fbd0 	bl	800902c <__assert_func>
 800888c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008890:	6004      	str	r4, [r0, #0]
 8008892:	60c4      	str	r4, [r0, #12]
 8008894:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800889c:	b94c      	cbnz	r4, 80088b2 <__pow5mult+0x66>
 800889e:	f240 2171 	movw	r1, #625	@ 0x271
 80088a2:	4638      	mov	r0, r7
 80088a4:	f7ff ff14 	bl	80086d0 <__i2b>
 80088a8:	2300      	movs	r3, #0
 80088aa:	4604      	mov	r4, r0
 80088ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80088b0:	6003      	str	r3, [r0, #0]
 80088b2:	f04f 0900 	mov.w	r9, #0
 80088b6:	07eb      	lsls	r3, r5, #31
 80088b8:	d50a      	bpl.n	80088d0 <__pow5mult+0x84>
 80088ba:	4631      	mov	r1, r6
 80088bc:	4622      	mov	r2, r4
 80088be:	4638      	mov	r0, r7
 80088c0:	f7ff ff1c 	bl	80086fc <__multiply>
 80088c4:	4680      	mov	r8, r0
 80088c6:	4631      	mov	r1, r6
 80088c8:	4638      	mov	r0, r7
 80088ca:	f7ff fe4d 	bl	8008568 <_Bfree>
 80088ce:	4646      	mov	r6, r8
 80088d0:	106d      	asrs	r5, r5, #1
 80088d2:	d00b      	beq.n	80088ec <__pow5mult+0xa0>
 80088d4:	6820      	ldr	r0, [r4, #0]
 80088d6:	b938      	cbnz	r0, 80088e8 <__pow5mult+0x9c>
 80088d8:	4622      	mov	r2, r4
 80088da:	4621      	mov	r1, r4
 80088dc:	4638      	mov	r0, r7
 80088de:	f7ff ff0d 	bl	80086fc <__multiply>
 80088e2:	6020      	str	r0, [r4, #0]
 80088e4:	f8c0 9000 	str.w	r9, [r0]
 80088e8:	4604      	mov	r4, r0
 80088ea:	e7e4      	b.n	80088b6 <__pow5mult+0x6a>
 80088ec:	4630      	mov	r0, r6
 80088ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f2:	bf00      	nop
 80088f4:	0800a500 	.word	0x0800a500
 80088f8:	0800a424 	.word	0x0800a424
 80088fc:	0800a4a4 	.word	0x0800a4a4

08008900 <__lshift>:
 8008900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008904:	460c      	mov	r4, r1
 8008906:	4607      	mov	r7, r0
 8008908:	4691      	mov	r9, r2
 800890a:	6923      	ldr	r3, [r4, #16]
 800890c:	6849      	ldr	r1, [r1, #4]
 800890e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008912:	68a3      	ldr	r3, [r4, #8]
 8008914:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008918:	f108 0601 	add.w	r6, r8, #1
 800891c:	42b3      	cmp	r3, r6
 800891e:	db0b      	blt.n	8008938 <__lshift+0x38>
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff fde1 	bl	80084e8 <_Balloc>
 8008926:	4605      	mov	r5, r0
 8008928:	b948      	cbnz	r0, 800893e <__lshift+0x3e>
 800892a:	4602      	mov	r2, r0
 800892c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008930:	4b27      	ldr	r3, [pc, #156]	@ (80089d0 <__lshift+0xd0>)
 8008932:	4828      	ldr	r0, [pc, #160]	@ (80089d4 <__lshift+0xd4>)
 8008934:	f000 fb7a 	bl	800902c <__assert_func>
 8008938:	3101      	adds	r1, #1
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	e7ee      	b.n	800891c <__lshift+0x1c>
 800893e:	2300      	movs	r3, #0
 8008940:	f100 0114 	add.w	r1, r0, #20
 8008944:	f100 0210 	add.w	r2, r0, #16
 8008948:	4618      	mov	r0, r3
 800894a:	4553      	cmp	r3, sl
 800894c:	db33      	blt.n	80089b6 <__lshift+0xb6>
 800894e:	6920      	ldr	r0, [r4, #16]
 8008950:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008954:	f104 0314 	add.w	r3, r4, #20
 8008958:	f019 091f 	ands.w	r9, r9, #31
 800895c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008960:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008964:	d02b      	beq.n	80089be <__lshift+0xbe>
 8008966:	468a      	mov	sl, r1
 8008968:	2200      	movs	r2, #0
 800896a:	f1c9 0e20 	rsb	lr, r9, #32
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	fa00 f009 	lsl.w	r0, r0, r9
 8008974:	4310      	orrs	r0, r2
 8008976:	f84a 0b04 	str.w	r0, [sl], #4
 800897a:	f853 2b04 	ldr.w	r2, [r3], #4
 800897e:	459c      	cmp	ip, r3
 8008980:	fa22 f20e 	lsr.w	r2, r2, lr
 8008984:	d8f3      	bhi.n	800896e <__lshift+0x6e>
 8008986:	ebac 0304 	sub.w	r3, ip, r4
 800898a:	3b15      	subs	r3, #21
 800898c:	f023 0303 	bic.w	r3, r3, #3
 8008990:	3304      	adds	r3, #4
 8008992:	f104 0015 	add.w	r0, r4, #21
 8008996:	4584      	cmp	ip, r0
 8008998:	bf38      	it	cc
 800899a:	2304      	movcc	r3, #4
 800899c:	50ca      	str	r2, [r1, r3]
 800899e:	b10a      	cbz	r2, 80089a4 <__lshift+0xa4>
 80089a0:	f108 0602 	add.w	r6, r8, #2
 80089a4:	3e01      	subs	r6, #1
 80089a6:	4638      	mov	r0, r7
 80089a8:	4621      	mov	r1, r4
 80089aa:	612e      	str	r6, [r5, #16]
 80089ac:	f7ff fddc 	bl	8008568 <_Bfree>
 80089b0:	4628      	mov	r0, r5
 80089b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80089ba:	3301      	adds	r3, #1
 80089bc:	e7c5      	b.n	800894a <__lshift+0x4a>
 80089be:	3904      	subs	r1, #4
 80089c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c4:	459c      	cmp	ip, r3
 80089c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80089ca:	d8f9      	bhi.n	80089c0 <__lshift+0xc0>
 80089cc:	e7ea      	b.n	80089a4 <__lshift+0xa4>
 80089ce:	bf00      	nop
 80089d0:	0800a493 	.word	0x0800a493
 80089d4:	0800a4a4 	.word	0x0800a4a4

080089d8 <__mcmp>:
 80089d8:	4603      	mov	r3, r0
 80089da:	690a      	ldr	r2, [r1, #16]
 80089dc:	6900      	ldr	r0, [r0, #16]
 80089de:	b530      	push	{r4, r5, lr}
 80089e0:	1a80      	subs	r0, r0, r2
 80089e2:	d10e      	bne.n	8008a02 <__mcmp+0x2a>
 80089e4:	3314      	adds	r3, #20
 80089e6:	3114      	adds	r1, #20
 80089e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80089ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089f8:	4295      	cmp	r5, r2
 80089fa:	d003      	beq.n	8008a04 <__mcmp+0x2c>
 80089fc:	d205      	bcs.n	8008a0a <__mcmp+0x32>
 80089fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008a02:	bd30      	pop	{r4, r5, pc}
 8008a04:	42a3      	cmp	r3, r4
 8008a06:	d3f3      	bcc.n	80089f0 <__mcmp+0x18>
 8008a08:	e7fb      	b.n	8008a02 <__mcmp+0x2a>
 8008a0a:	2001      	movs	r0, #1
 8008a0c:	e7f9      	b.n	8008a02 <__mcmp+0x2a>
	...

08008a10 <__mdiff>:
 8008a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	4689      	mov	r9, r1
 8008a16:	4606      	mov	r6, r0
 8008a18:	4611      	mov	r1, r2
 8008a1a:	4648      	mov	r0, r9
 8008a1c:	4614      	mov	r4, r2
 8008a1e:	f7ff ffdb 	bl	80089d8 <__mcmp>
 8008a22:	1e05      	subs	r5, r0, #0
 8008a24:	d112      	bne.n	8008a4c <__mdiff+0x3c>
 8008a26:	4629      	mov	r1, r5
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f7ff fd5d 	bl	80084e8 <_Balloc>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	b928      	cbnz	r0, 8008a3e <__mdiff+0x2e>
 8008a32:	f240 2137 	movw	r1, #567	@ 0x237
 8008a36:	4b3e      	ldr	r3, [pc, #248]	@ (8008b30 <__mdiff+0x120>)
 8008a38:	483e      	ldr	r0, [pc, #248]	@ (8008b34 <__mdiff+0x124>)
 8008a3a:	f000 faf7 	bl	800902c <__assert_func>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a44:	4610      	mov	r0, r2
 8008a46:	b003      	add	sp, #12
 8008a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4c:	bfbc      	itt	lt
 8008a4e:	464b      	movlt	r3, r9
 8008a50:	46a1      	movlt	r9, r4
 8008a52:	4630      	mov	r0, r6
 8008a54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a58:	bfba      	itte	lt
 8008a5a:	461c      	movlt	r4, r3
 8008a5c:	2501      	movlt	r5, #1
 8008a5e:	2500      	movge	r5, #0
 8008a60:	f7ff fd42 	bl	80084e8 <_Balloc>
 8008a64:	4602      	mov	r2, r0
 8008a66:	b918      	cbnz	r0, 8008a70 <__mdiff+0x60>
 8008a68:	f240 2145 	movw	r1, #581	@ 0x245
 8008a6c:	4b30      	ldr	r3, [pc, #192]	@ (8008b30 <__mdiff+0x120>)
 8008a6e:	e7e3      	b.n	8008a38 <__mdiff+0x28>
 8008a70:	f100 0b14 	add.w	fp, r0, #20
 8008a74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a78:	f109 0310 	add.w	r3, r9, #16
 8008a7c:	60c5      	str	r5, [r0, #12]
 8008a7e:	f04f 0c00 	mov.w	ip, #0
 8008a82:	f109 0514 	add.w	r5, r9, #20
 8008a86:	46d9      	mov	r9, fp
 8008a88:	6926      	ldr	r6, [r4, #16]
 8008a8a:	f104 0e14 	add.w	lr, r4, #20
 8008a8e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a92:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a96:	9301      	str	r3, [sp, #4]
 8008a98:	9b01      	ldr	r3, [sp, #4]
 8008a9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008aa2:	b281      	uxth	r1, r0
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	fa1f f38a 	uxth.w	r3, sl
 8008aaa:	1a5b      	subs	r3, r3, r1
 8008aac:	0c00      	lsrs	r0, r0, #16
 8008aae:	4463      	add	r3, ip
 8008ab0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ab4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008abe:	4576      	cmp	r6, lr
 8008ac0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ac4:	f849 3b04 	str.w	r3, [r9], #4
 8008ac8:	d8e6      	bhi.n	8008a98 <__mdiff+0x88>
 8008aca:	1b33      	subs	r3, r6, r4
 8008acc:	3b15      	subs	r3, #21
 8008ace:	f023 0303 	bic.w	r3, r3, #3
 8008ad2:	3415      	adds	r4, #21
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	42a6      	cmp	r6, r4
 8008ad8:	bf38      	it	cc
 8008ada:	2304      	movcc	r3, #4
 8008adc:	441d      	add	r5, r3
 8008ade:	445b      	add	r3, fp
 8008ae0:	461e      	mov	r6, r3
 8008ae2:	462c      	mov	r4, r5
 8008ae4:	4544      	cmp	r4, r8
 8008ae6:	d30e      	bcc.n	8008b06 <__mdiff+0xf6>
 8008ae8:	f108 0103 	add.w	r1, r8, #3
 8008aec:	1b49      	subs	r1, r1, r5
 8008aee:	f021 0103 	bic.w	r1, r1, #3
 8008af2:	3d03      	subs	r5, #3
 8008af4:	45a8      	cmp	r8, r5
 8008af6:	bf38      	it	cc
 8008af8:	2100      	movcc	r1, #0
 8008afa:	440b      	add	r3, r1
 8008afc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b00:	b199      	cbz	r1, 8008b2a <__mdiff+0x11a>
 8008b02:	6117      	str	r7, [r2, #16]
 8008b04:	e79e      	b.n	8008a44 <__mdiff+0x34>
 8008b06:	46e6      	mov	lr, ip
 8008b08:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b0c:	fa1f fc81 	uxth.w	ip, r1
 8008b10:	44f4      	add	ip, lr
 8008b12:	0c08      	lsrs	r0, r1, #16
 8008b14:	4471      	add	r1, lr
 8008b16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b1a:	b289      	uxth	r1, r1
 8008b1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b24:	f846 1b04 	str.w	r1, [r6], #4
 8008b28:	e7dc      	b.n	8008ae4 <__mdiff+0xd4>
 8008b2a:	3f01      	subs	r7, #1
 8008b2c:	e7e6      	b.n	8008afc <__mdiff+0xec>
 8008b2e:	bf00      	nop
 8008b30:	0800a493 	.word	0x0800a493
 8008b34:	0800a4a4 	.word	0x0800a4a4

08008b38 <__d2b>:
 8008b38:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	4690      	mov	r8, r2
 8008b40:	4699      	mov	r9, r3
 8008b42:	9e08      	ldr	r6, [sp, #32]
 8008b44:	f7ff fcd0 	bl	80084e8 <_Balloc>
 8008b48:	4604      	mov	r4, r0
 8008b4a:	b930      	cbnz	r0, 8008b5a <__d2b+0x22>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b52:	4b23      	ldr	r3, [pc, #140]	@ (8008be0 <__d2b+0xa8>)
 8008b54:	4823      	ldr	r0, [pc, #140]	@ (8008be4 <__d2b+0xac>)
 8008b56:	f000 fa69 	bl	800902c <__assert_func>
 8008b5a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b5e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b62:	b10d      	cbz	r5, 8008b68 <__d2b+0x30>
 8008b64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	f1b8 0300 	subs.w	r3, r8, #0
 8008b6e:	d024      	beq.n	8008bba <__d2b+0x82>
 8008b70:	4668      	mov	r0, sp
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	f7ff fd7f 	bl	8008676 <__lo0bits>
 8008b78:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b7c:	b1d8      	cbz	r0, 8008bb6 <__d2b+0x7e>
 8008b7e:	f1c0 0320 	rsb	r3, r0, #32
 8008b82:	fa02 f303 	lsl.w	r3, r2, r3
 8008b86:	430b      	orrs	r3, r1
 8008b88:	40c2      	lsrs	r2, r0
 8008b8a:	6163      	str	r3, [r4, #20]
 8008b8c:	9201      	str	r2, [sp, #4]
 8008b8e:	9b01      	ldr	r3, [sp, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	bf0c      	ite	eq
 8008b94:	2201      	moveq	r2, #1
 8008b96:	2202      	movne	r2, #2
 8008b98:	61a3      	str	r3, [r4, #24]
 8008b9a:	6122      	str	r2, [r4, #16]
 8008b9c:	b1ad      	cbz	r5, 8008bca <__d2b+0x92>
 8008b9e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ba2:	4405      	add	r5, r0
 8008ba4:	6035      	str	r5, [r6, #0]
 8008ba6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bac:	6018      	str	r0, [r3, #0]
 8008bae:	4620      	mov	r0, r4
 8008bb0:	b002      	add	sp, #8
 8008bb2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008bb6:	6161      	str	r1, [r4, #20]
 8008bb8:	e7e9      	b.n	8008b8e <__d2b+0x56>
 8008bba:	a801      	add	r0, sp, #4
 8008bbc:	f7ff fd5b 	bl	8008676 <__lo0bits>
 8008bc0:	9b01      	ldr	r3, [sp, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	6163      	str	r3, [r4, #20]
 8008bc6:	3020      	adds	r0, #32
 8008bc8:	e7e7      	b.n	8008b9a <__d2b+0x62>
 8008bca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008bce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bd2:	6030      	str	r0, [r6, #0]
 8008bd4:	6918      	ldr	r0, [r3, #16]
 8008bd6:	f7ff fd2f 	bl	8008638 <__hi0bits>
 8008bda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bde:	e7e4      	b.n	8008baa <__d2b+0x72>
 8008be0:	0800a493 	.word	0x0800a493
 8008be4:	0800a4a4 	.word	0x0800a4a4

08008be8 <_malloc_usable_size_r>:
 8008be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bec:	1f18      	subs	r0, r3, #4
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	bfbc      	itt	lt
 8008bf2:	580b      	ldrlt	r3, [r1, r0]
 8008bf4:	18c0      	addlt	r0, r0, r3
 8008bf6:	4770      	bx	lr

08008bf8 <__ssputs_r>:
 8008bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	461f      	mov	r7, r3
 8008bfe:	688e      	ldr	r6, [r1, #8]
 8008c00:	4682      	mov	sl, r0
 8008c02:	42be      	cmp	r6, r7
 8008c04:	460c      	mov	r4, r1
 8008c06:	4690      	mov	r8, r2
 8008c08:	680b      	ldr	r3, [r1, #0]
 8008c0a:	d82d      	bhi.n	8008c68 <__ssputs_r+0x70>
 8008c0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c14:	d026      	beq.n	8008c64 <__ssputs_r+0x6c>
 8008c16:	6965      	ldr	r5, [r4, #20]
 8008c18:	6909      	ldr	r1, [r1, #16]
 8008c1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c1e:	eba3 0901 	sub.w	r9, r3, r1
 8008c22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c26:	1c7b      	adds	r3, r7, #1
 8008c28:	444b      	add	r3, r9
 8008c2a:	106d      	asrs	r5, r5, #1
 8008c2c:	429d      	cmp	r5, r3
 8008c2e:	bf38      	it	cc
 8008c30:	461d      	movcc	r5, r3
 8008c32:	0553      	lsls	r3, r2, #21
 8008c34:	d527      	bpl.n	8008c86 <__ssputs_r+0x8e>
 8008c36:	4629      	mov	r1, r5
 8008c38:	f7fd fe26 	bl	8006888 <_malloc_r>
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	b360      	cbz	r0, 8008c9a <__ssputs_r+0xa2>
 8008c40:	464a      	mov	r2, r9
 8008c42:	6921      	ldr	r1, [r4, #16]
 8008c44:	f7fe fda9 	bl	800779a <memcpy>
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c52:	81a3      	strh	r3, [r4, #12]
 8008c54:	6126      	str	r6, [r4, #16]
 8008c56:	444e      	add	r6, r9
 8008c58:	6026      	str	r6, [r4, #0]
 8008c5a:	463e      	mov	r6, r7
 8008c5c:	6165      	str	r5, [r4, #20]
 8008c5e:	eba5 0509 	sub.w	r5, r5, r9
 8008c62:	60a5      	str	r5, [r4, #8]
 8008c64:	42be      	cmp	r6, r7
 8008c66:	d900      	bls.n	8008c6a <__ssputs_r+0x72>
 8008c68:	463e      	mov	r6, r7
 8008c6a:	4632      	mov	r2, r6
 8008c6c:	4641      	mov	r1, r8
 8008c6e:	6820      	ldr	r0, [r4, #0]
 8008c70:	f000 f9c2 	bl	8008ff8 <memmove>
 8008c74:	2000      	movs	r0, #0
 8008c76:	68a3      	ldr	r3, [r4, #8]
 8008c78:	1b9b      	subs	r3, r3, r6
 8008c7a:	60a3      	str	r3, [r4, #8]
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	4433      	add	r3, r6
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c86:	462a      	mov	r2, r5
 8008c88:	f7fd fe92 	bl	80069b0 <_realloc_r>
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d1e0      	bne.n	8008c54 <__ssputs_r+0x5c>
 8008c92:	4650      	mov	r0, sl
 8008c94:	6921      	ldr	r1, [r4, #16]
 8008c96:	f7ff fbdf 	bl	8008458 <_free_r>
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	f8ca 3000 	str.w	r3, [sl]
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008caa:	81a3      	strh	r3, [r4, #12]
 8008cac:	e7e9      	b.n	8008c82 <__ssputs_r+0x8a>
	...

08008cb0 <_svfiprintf_r>:
 8008cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	4698      	mov	r8, r3
 8008cb6:	898b      	ldrh	r3, [r1, #12]
 8008cb8:	4607      	mov	r7, r0
 8008cba:	061b      	lsls	r3, r3, #24
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	4614      	mov	r4, r2
 8008cc0:	b09d      	sub	sp, #116	@ 0x74
 8008cc2:	d510      	bpl.n	8008ce6 <_svfiprintf_r+0x36>
 8008cc4:	690b      	ldr	r3, [r1, #16]
 8008cc6:	b973      	cbnz	r3, 8008ce6 <_svfiprintf_r+0x36>
 8008cc8:	2140      	movs	r1, #64	@ 0x40
 8008cca:	f7fd fddd 	bl	8006888 <_malloc_r>
 8008cce:	6028      	str	r0, [r5, #0]
 8008cd0:	6128      	str	r0, [r5, #16]
 8008cd2:	b930      	cbnz	r0, 8008ce2 <_svfiprintf_r+0x32>
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cdc:	b01d      	add	sp, #116	@ 0x74
 8008cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce2:	2340      	movs	r3, #64	@ 0x40
 8008ce4:	616b      	str	r3, [r5, #20]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cea:	2320      	movs	r3, #32
 8008cec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cf0:	2330      	movs	r3, #48	@ 0x30
 8008cf2:	f04f 0901 	mov.w	r9, #1
 8008cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cfa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008e94 <_svfiprintf_r+0x1e4>
 8008cfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d02:	4623      	mov	r3, r4
 8008d04:	469a      	mov	sl, r3
 8008d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d0a:	b10a      	cbz	r2, 8008d10 <_svfiprintf_r+0x60>
 8008d0c:	2a25      	cmp	r2, #37	@ 0x25
 8008d0e:	d1f9      	bne.n	8008d04 <_svfiprintf_r+0x54>
 8008d10:	ebba 0b04 	subs.w	fp, sl, r4
 8008d14:	d00b      	beq.n	8008d2e <_svfiprintf_r+0x7e>
 8008d16:	465b      	mov	r3, fp
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f7ff ff6b 	bl	8008bf8 <__ssputs_r>
 8008d22:	3001      	adds	r0, #1
 8008d24:	f000 80a7 	beq.w	8008e76 <_svfiprintf_r+0x1c6>
 8008d28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d2a:	445a      	add	r2, fp
 8008d2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 809f 	beq.w	8008e76 <_svfiprintf_r+0x1c6>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d42:	f10a 0a01 	add.w	sl, sl, #1
 8008d46:	9304      	str	r3, [sp, #16]
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d50:	4654      	mov	r4, sl
 8008d52:	2205      	movs	r2, #5
 8008d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d58:	484e      	ldr	r0, [pc, #312]	@ (8008e94 <_svfiprintf_r+0x1e4>)
 8008d5a:	f7fe fd10 	bl	800777e <memchr>
 8008d5e:	9a04      	ldr	r2, [sp, #16]
 8008d60:	b9d8      	cbnz	r0, 8008d9a <_svfiprintf_r+0xea>
 8008d62:	06d0      	lsls	r0, r2, #27
 8008d64:	bf44      	itt	mi
 8008d66:	2320      	movmi	r3, #32
 8008d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d6c:	0711      	lsls	r1, r2, #28
 8008d6e:	bf44      	itt	mi
 8008d70:	232b      	movmi	r3, #43	@ 0x2b
 8008d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d76:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d7c:	d015      	beq.n	8008daa <_svfiprintf_r+0xfa>
 8008d7e:	4654      	mov	r4, sl
 8008d80:	2000      	movs	r0, #0
 8008d82:	f04f 0c0a 	mov.w	ip, #10
 8008d86:	9a07      	ldr	r2, [sp, #28]
 8008d88:	4621      	mov	r1, r4
 8008d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d8e:	3b30      	subs	r3, #48	@ 0x30
 8008d90:	2b09      	cmp	r3, #9
 8008d92:	d94b      	bls.n	8008e2c <_svfiprintf_r+0x17c>
 8008d94:	b1b0      	cbz	r0, 8008dc4 <_svfiprintf_r+0x114>
 8008d96:	9207      	str	r2, [sp, #28]
 8008d98:	e014      	b.n	8008dc4 <_svfiprintf_r+0x114>
 8008d9a:	eba0 0308 	sub.w	r3, r0, r8
 8008d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8008da2:	4313      	orrs	r3, r2
 8008da4:	46a2      	mov	sl, r4
 8008da6:	9304      	str	r3, [sp, #16]
 8008da8:	e7d2      	b.n	8008d50 <_svfiprintf_r+0xa0>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	1d19      	adds	r1, r3, #4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	9103      	str	r1, [sp, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bfbb      	ittet	lt
 8008db6:	425b      	neglt	r3, r3
 8008db8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dbc:	9307      	strge	r3, [sp, #28]
 8008dbe:	9307      	strlt	r3, [sp, #28]
 8008dc0:	bfb8      	it	lt
 8008dc2:	9204      	strlt	r2, [sp, #16]
 8008dc4:	7823      	ldrb	r3, [r4, #0]
 8008dc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dc8:	d10a      	bne.n	8008de0 <_svfiprintf_r+0x130>
 8008dca:	7863      	ldrb	r3, [r4, #1]
 8008dcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dce:	d132      	bne.n	8008e36 <_svfiprintf_r+0x186>
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	3402      	adds	r4, #2
 8008dd4:	1d1a      	adds	r2, r3, #4
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	9203      	str	r2, [sp, #12]
 8008dda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dde:	9305      	str	r3, [sp, #20]
 8008de0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008e98 <_svfiprintf_r+0x1e8>
 8008de4:	2203      	movs	r2, #3
 8008de6:	4650      	mov	r0, sl
 8008de8:	7821      	ldrb	r1, [r4, #0]
 8008dea:	f7fe fcc8 	bl	800777e <memchr>
 8008dee:	b138      	cbz	r0, 8008e00 <_svfiprintf_r+0x150>
 8008df0:	2240      	movs	r2, #64	@ 0x40
 8008df2:	9b04      	ldr	r3, [sp, #16]
 8008df4:	eba0 000a 	sub.w	r0, r0, sl
 8008df8:	4082      	lsls	r2, r0
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	3401      	adds	r4, #1
 8008dfe:	9304      	str	r3, [sp, #16]
 8008e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e04:	2206      	movs	r2, #6
 8008e06:	4825      	ldr	r0, [pc, #148]	@ (8008e9c <_svfiprintf_r+0x1ec>)
 8008e08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e0c:	f7fe fcb7 	bl	800777e <memchr>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d036      	beq.n	8008e82 <_svfiprintf_r+0x1d2>
 8008e14:	4b22      	ldr	r3, [pc, #136]	@ (8008ea0 <_svfiprintf_r+0x1f0>)
 8008e16:	bb1b      	cbnz	r3, 8008e60 <_svfiprintf_r+0x1b0>
 8008e18:	9b03      	ldr	r3, [sp, #12]
 8008e1a:	3307      	adds	r3, #7
 8008e1c:	f023 0307 	bic.w	r3, r3, #7
 8008e20:	3308      	adds	r3, #8
 8008e22:	9303      	str	r3, [sp, #12]
 8008e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e26:	4433      	add	r3, r6
 8008e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e2a:	e76a      	b.n	8008d02 <_svfiprintf_r+0x52>
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	2001      	movs	r0, #1
 8008e30:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e34:	e7a8      	b.n	8008d88 <_svfiprintf_r+0xd8>
 8008e36:	2300      	movs	r3, #0
 8008e38:	f04f 0c0a 	mov.w	ip, #10
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	3401      	adds	r4, #1
 8008e40:	9305      	str	r3, [sp, #20]
 8008e42:	4620      	mov	r0, r4
 8008e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e48:	3a30      	subs	r2, #48	@ 0x30
 8008e4a:	2a09      	cmp	r2, #9
 8008e4c:	d903      	bls.n	8008e56 <_svfiprintf_r+0x1a6>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0c6      	beq.n	8008de0 <_svfiprintf_r+0x130>
 8008e52:	9105      	str	r1, [sp, #20]
 8008e54:	e7c4      	b.n	8008de0 <_svfiprintf_r+0x130>
 8008e56:	4604      	mov	r4, r0
 8008e58:	2301      	movs	r3, #1
 8008e5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e5e:	e7f0      	b.n	8008e42 <_svfiprintf_r+0x192>
 8008e60:	ab03      	add	r3, sp, #12
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	462a      	mov	r2, r5
 8008e66:	4638      	mov	r0, r7
 8008e68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea4 <_svfiprintf_r+0x1f4>)
 8008e6a:	a904      	add	r1, sp, #16
 8008e6c:	f7fd fef0 	bl	8006c50 <_printf_float>
 8008e70:	1c42      	adds	r2, r0, #1
 8008e72:	4606      	mov	r6, r0
 8008e74:	d1d6      	bne.n	8008e24 <_svfiprintf_r+0x174>
 8008e76:	89ab      	ldrh	r3, [r5, #12]
 8008e78:	065b      	lsls	r3, r3, #25
 8008e7a:	f53f af2d 	bmi.w	8008cd8 <_svfiprintf_r+0x28>
 8008e7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e80:	e72c      	b.n	8008cdc <_svfiprintf_r+0x2c>
 8008e82:	ab03      	add	r3, sp, #12
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	462a      	mov	r2, r5
 8008e88:	4638      	mov	r0, r7
 8008e8a:	4b06      	ldr	r3, [pc, #24]	@ (8008ea4 <_svfiprintf_r+0x1f4>)
 8008e8c:	a904      	add	r1, sp, #16
 8008e8e:	f7fe f97d 	bl	800718c <_printf_i>
 8008e92:	e7ed      	b.n	8008e70 <_svfiprintf_r+0x1c0>
 8008e94:	0800a600 	.word	0x0800a600
 8008e98:	0800a606 	.word	0x0800a606
 8008e9c:	0800a60a 	.word	0x0800a60a
 8008ea0:	08006c51 	.word	0x08006c51
 8008ea4:	08008bf9 	.word	0x08008bf9

08008ea8 <__sflush_r>:
 8008ea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	0716      	lsls	r6, r2, #28
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	d454      	bmi.n	8008f60 <__sflush_r+0xb8>
 8008eb6:	684b      	ldr	r3, [r1, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	dc02      	bgt.n	8008ec2 <__sflush_r+0x1a>
 8008ebc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	dd48      	ble.n	8008f54 <__sflush_r+0xac>
 8008ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ec4:	2e00      	cmp	r6, #0
 8008ec6:	d045      	beq.n	8008f54 <__sflush_r+0xac>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ece:	682f      	ldr	r7, [r5, #0]
 8008ed0:	6a21      	ldr	r1, [r4, #32]
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	d030      	beq.n	8008f38 <__sflush_r+0x90>
 8008ed6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	0759      	lsls	r1, r3, #29
 8008edc:	d505      	bpl.n	8008eea <__sflush_r+0x42>
 8008ede:	6863      	ldr	r3, [r4, #4]
 8008ee0:	1ad2      	subs	r2, r2, r3
 8008ee2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ee4:	b10b      	cbz	r3, 8008eea <__sflush_r+0x42>
 8008ee6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ee8:	1ad2      	subs	r2, r2, r3
 8008eea:	2300      	movs	r3, #0
 8008eec:	4628      	mov	r0, r5
 8008eee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ef0:	6a21      	ldr	r1, [r4, #32]
 8008ef2:	47b0      	blx	r6
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	d106      	bne.n	8008f08 <__sflush_r+0x60>
 8008efa:	6829      	ldr	r1, [r5, #0]
 8008efc:	291d      	cmp	r1, #29
 8008efe:	d82b      	bhi.n	8008f58 <__sflush_r+0xb0>
 8008f00:	4a28      	ldr	r2, [pc, #160]	@ (8008fa4 <__sflush_r+0xfc>)
 8008f02:	410a      	asrs	r2, r1
 8008f04:	07d6      	lsls	r6, r2, #31
 8008f06:	d427      	bmi.n	8008f58 <__sflush_r+0xb0>
 8008f08:	2200      	movs	r2, #0
 8008f0a:	6062      	str	r2, [r4, #4]
 8008f0c:	6922      	ldr	r2, [r4, #16]
 8008f0e:	04d9      	lsls	r1, r3, #19
 8008f10:	6022      	str	r2, [r4, #0]
 8008f12:	d504      	bpl.n	8008f1e <__sflush_r+0x76>
 8008f14:	1c42      	adds	r2, r0, #1
 8008f16:	d101      	bne.n	8008f1c <__sflush_r+0x74>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b903      	cbnz	r3, 8008f1e <__sflush_r+0x76>
 8008f1c:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f20:	602f      	str	r7, [r5, #0]
 8008f22:	b1b9      	cbz	r1, 8008f54 <__sflush_r+0xac>
 8008f24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f28:	4299      	cmp	r1, r3
 8008f2a:	d002      	beq.n	8008f32 <__sflush_r+0x8a>
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f7ff fa93 	bl	8008458 <_free_r>
 8008f32:	2300      	movs	r3, #0
 8008f34:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f36:	e00d      	b.n	8008f54 <__sflush_r+0xac>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	47b0      	blx	r6
 8008f3e:	4602      	mov	r2, r0
 8008f40:	1c50      	adds	r0, r2, #1
 8008f42:	d1c9      	bne.n	8008ed8 <__sflush_r+0x30>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d0c6      	beq.n	8008ed8 <__sflush_r+0x30>
 8008f4a:	2b1d      	cmp	r3, #29
 8008f4c:	d001      	beq.n	8008f52 <__sflush_r+0xaa>
 8008f4e:	2b16      	cmp	r3, #22
 8008f50:	d11d      	bne.n	8008f8e <__sflush_r+0xe6>
 8008f52:	602f      	str	r7, [r5, #0]
 8008f54:	2000      	movs	r0, #0
 8008f56:	e021      	b.n	8008f9c <__sflush_r+0xf4>
 8008f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f5c:	b21b      	sxth	r3, r3
 8008f5e:	e01a      	b.n	8008f96 <__sflush_r+0xee>
 8008f60:	690f      	ldr	r7, [r1, #16]
 8008f62:	2f00      	cmp	r7, #0
 8008f64:	d0f6      	beq.n	8008f54 <__sflush_r+0xac>
 8008f66:	0793      	lsls	r3, r2, #30
 8008f68:	bf18      	it	ne
 8008f6a:	2300      	movne	r3, #0
 8008f6c:	680e      	ldr	r6, [r1, #0]
 8008f6e:	bf08      	it	eq
 8008f70:	694b      	ldreq	r3, [r1, #20]
 8008f72:	1bf6      	subs	r6, r6, r7
 8008f74:	600f      	str	r7, [r1, #0]
 8008f76:	608b      	str	r3, [r1, #8]
 8008f78:	2e00      	cmp	r6, #0
 8008f7a:	ddeb      	ble.n	8008f54 <__sflush_r+0xac>
 8008f7c:	4633      	mov	r3, r6
 8008f7e:	463a      	mov	r2, r7
 8008f80:	4628      	mov	r0, r5
 8008f82:	6a21      	ldr	r1, [r4, #32]
 8008f84:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008f88:	47e0      	blx	ip
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	dc07      	bgt.n	8008f9e <__sflush_r+0xf6>
 8008f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f96:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f9e:	4407      	add	r7, r0
 8008fa0:	1a36      	subs	r6, r6, r0
 8008fa2:	e7e9      	b.n	8008f78 <__sflush_r+0xd0>
 8008fa4:	dfbffffe 	.word	0xdfbffffe

08008fa8 <_fflush_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	690b      	ldr	r3, [r1, #16]
 8008fac:	4605      	mov	r5, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	b913      	cbnz	r3, 8008fb8 <_fflush_r+0x10>
 8008fb2:	2500      	movs	r5, #0
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	b118      	cbz	r0, 8008fc2 <_fflush_r+0x1a>
 8008fba:	6a03      	ldr	r3, [r0, #32]
 8008fbc:	b90b      	cbnz	r3, 8008fc2 <_fflush_r+0x1a>
 8008fbe:	f7fe fa91 	bl	80074e4 <__sinit>
 8008fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d0f3      	beq.n	8008fb2 <_fflush_r+0xa>
 8008fca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008fcc:	07d0      	lsls	r0, r2, #31
 8008fce:	d404      	bmi.n	8008fda <_fflush_r+0x32>
 8008fd0:	0599      	lsls	r1, r3, #22
 8008fd2:	d402      	bmi.n	8008fda <_fflush_r+0x32>
 8008fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fd6:	f7fe fbd0 	bl	800777a <__retarget_lock_acquire_recursive>
 8008fda:	4628      	mov	r0, r5
 8008fdc:	4621      	mov	r1, r4
 8008fde:	f7ff ff63 	bl	8008ea8 <__sflush_r>
 8008fe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	07da      	lsls	r2, r3, #31
 8008fe8:	d4e4      	bmi.n	8008fb4 <_fflush_r+0xc>
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	059b      	lsls	r3, r3, #22
 8008fee:	d4e1      	bmi.n	8008fb4 <_fflush_r+0xc>
 8008ff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ff2:	f7fe fbc3 	bl	800777c <__retarget_lock_release_recursive>
 8008ff6:	e7dd      	b.n	8008fb4 <_fflush_r+0xc>

08008ff8 <memmove>:
 8008ff8:	4288      	cmp	r0, r1
 8008ffa:	b510      	push	{r4, lr}
 8008ffc:	eb01 0402 	add.w	r4, r1, r2
 8009000:	d902      	bls.n	8009008 <memmove+0x10>
 8009002:	4284      	cmp	r4, r0
 8009004:	4623      	mov	r3, r4
 8009006:	d807      	bhi.n	8009018 <memmove+0x20>
 8009008:	1e43      	subs	r3, r0, #1
 800900a:	42a1      	cmp	r1, r4
 800900c:	d008      	beq.n	8009020 <memmove+0x28>
 800900e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009016:	e7f8      	b.n	800900a <memmove+0x12>
 8009018:	4601      	mov	r1, r0
 800901a:	4402      	add	r2, r0
 800901c:	428a      	cmp	r2, r1
 800901e:	d100      	bne.n	8009022 <memmove+0x2a>
 8009020:	bd10      	pop	{r4, pc}
 8009022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800902a:	e7f7      	b.n	800901c <memmove+0x24>

0800902c <__assert_func>:
 800902c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800902e:	4614      	mov	r4, r2
 8009030:	461a      	mov	r2, r3
 8009032:	4b09      	ldr	r3, [pc, #36]	@ (8009058 <__assert_func+0x2c>)
 8009034:	4605      	mov	r5, r0
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68d8      	ldr	r0, [r3, #12]
 800903a:	b954      	cbnz	r4, 8009052 <__assert_func+0x26>
 800903c:	4b07      	ldr	r3, [pc, #28]	@ (800905c <__assert_func+0x30>)
 800903e:	461c      	mov	r4, r3
 8009040:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009044:	9100      	str	r1, [sp, #0]
 8009046:	462b      	mov	r3, r5
 8009048:	4905      	ldr	r1, [pc, #20]	@ (8009060 <__assert_func+0x34>)
 800904a:	f000 f82d 	bl	80090a8 <fiprintf>
 800904e:	f000 f83d 	bl	80090cc <abort>
 8009052:	4b04      	ldr	r3, [pc, #16]	@ (8009064 <__assert_func+0x38>)
 8009054:	e7f4      	b.n	8009040 <__assert_func+0x14>
 8009056:	bf00      	nop
 8009058:	20000034 	.word	0x20000034
 800905c:	0800a656 	.word	0x0800a656
 8009060:	0800a628 	.word	0x0800a628
 8009064:	0800a61b 	.word	0x0800a61b

08009068 <__ascii_mbtowc>:
 8009068:	b082      	sub	sp, #8
 800906a:	b901      	cbnz	r1, 800906e <__ascii_mbtowc+0x6>
 800906c:	a901      	add	r1, sp, #4
 800906e:	b142      	cbz	r2, 8009082 <__ascii_mbtowc+0x1a>
 8009070:	b14b      	cbz	r3, 8009086 <__ascii_mbtowc+0x1e>
 8009072:	7813      	ldrb	r3, [r2, #0]
 8009074:	600b      	str	r3, [r1, #0]
 8009076:	7812      	ldrb	r2, [r2, #0]
 8009078:	1e10      	subs	r0, r2, #0
 800907a:	bf18      	it	ne
 800907c:	2001      	movne	r0, #1
 800907e:	b002      	add	sp, #8
 8009080:	4770      	bx	lr
 8009082:	4610      	mov	r0, r2
 8009084:	e7fb      	b.n	800907e <__ascii_mbtowc+0x16>
 8009086:	f06f 0001 	mvn.w	r0, #1
 800908a:	e7f8      	b.n	800907e <__ascii_mbtowc+0x16>

0800908c <__ascii_wctomb>:
 800908c:	4603      	mov	r3, r0
 800908e:	4608      	mov	r0, r1
 8009090:	b141      	cbz	r1, 80090a4 <__ascii_wctomb+0x18>
 8009092:	2aff      	cmp	r2, #255	@ 0xff
 8009094:	d904      	bls.n	80090a0 <__ascii_wctomb+0x14>
 8009096:	228a      	movs	r2, #138	@ 0x8a
 8009098:	f04f 30ff 	mov.w	r0, #4294967295
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	4770      	bx	lr
 80090a0:	2001      	movs	r0, #1
 80090a2:	700a      	strb	r2, [r1, #0]
 80090a4:	4770      	bx	lr
	...

080090a8 <fiprintf>:
 80090a8:	b40e      	push	{r1, r2, r3}
 80090aa:	b503      	push	{r0, r1, lr}
 80090ac:	4601      	mov	r1, r0
 80090ae:	ab03      	add	r3, sp, #12
 80090b0:	4805      	ldr	r0, [pc, #20]	@ (80090c8 <fiprintf+0x20>)
 80090b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b6:	6800      	ldr	r0, [r0, #0]
 80090b8:	9301      	str	r3, [sp, #4]
 80090ba:	f000 f835 	bl	8009128 <_vfiprintf_r>
 80090be:	b002      	add	sp, #8
 80090c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090c4:	b003      	add	sp, #12
 80090c6:	4770      	bx	lr
 80090c8:	20000034 	.word	0x20000034

080090cc <abort>:
 80090cc:	2006      	movs	r0, #6
 80090ce:	b508      	push	{r3, lr}
 80090d0:	f000 f9fe 	bl	80094d0 <raise>
 80090d4:	2001      	movs	r0, #1
 80090d6:	f7f8 fd4c 	bl	8001b72 <_exit>

080090da <__sfputc_r>:
 80090da:	6893      	ldr	r3, [r2, #8]
 80090dc:	b410      	push	{r4}
 80090de:	3b01      	subs	r3, #1
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	6093      	str	r3, [r2, #8]
 80090e4:	da07      	bge.n	80090f6 <__sfputc_r+0x1c>
 80090e6:	6994      	ldr	r4, [r2, #24]
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	db01      	blt.n	80090f0 <__sfputc_r+0x16>
 80090ec:	290a      	cmp	r1, #10
 80090ee:	d102      	bne.n	80090f6 <__sfputc_r+0x1c>
 80090f0:	bc10      	pop	{r4}
 80090f2:	f000 b931 	b.w	8009358 <__swbuf_r>
 80090f6:	6813      	ldr	r3, [r2, #0]
 80090f8:	1c58      	adds	r0, r3, #1
 80090fa:	6010      	str	r0, [r2, #0]
 80090fc:	7019      	strb	r1, [r3, #0]
 80090fe:	4608      	mov	r0, r1
 8009100:	bc10      	pop	{r4}
 8009102:	4770      	bx	lr

08009104 <__sfputs_r>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	4606      	mov	r6, r0
 8009108:	460f      	mov	r7, r1
 800910a:	4614      	mov	r4, r2
 800910c:	18d5      	adds	r5, r2, r3
 800910e:	42ac      	cmp	r4, r5
 8009110:	d101      	bne.n	8009116 <__sfputs_r+0x12>
 8009112:	2000      	movs	r0, #0
 8009114:	e007      	b.n	8009126 <__sfputs_r+0x22>
 8009116:	463a      	mov	r2, r7
 8009118:	4630      	mov	r0, r6
 800911a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911e:	f7ff ffdc 	bl	80090da <__sfputc_r>
 8009122:	1c43      	adds	r3, r0, #1
 8009124:	d1f3      	bne.n	800910e <__sfputs_r+0xa>
 8009126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009128 <_vfiprintf_r>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	460d      	mov	r5, r1
 800912e:	4614      	mov	r4, r2
 8009130:	4698      	mov	r8, r3
 8009132:	4606      	mov	r6, r0
 8009134:	b09d      	sub	sp, #116	@ 0x74
 8009136:	b118      	cbz	r0, 8009140 <_vfiprintf_r+0x18>
 8009138:	6a03      	ldr	r3, [r0, #32]
 800913a:	b90b      	cbnz	r3, 8009140 <_vfiprintf_r+0x18>
 800913c:	f7fe f9d2 	bl	80074e4 <__sinit>
 8009140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009142:	07d9      	lsls	r1, r3, #31
 8009144:	d405      	bmi.n	8009152 <_vfiprintf_r+0x2a>
 8009146:	89ab      	ldrh	r3, [r5, #12]
 8009148:	059a      	lsls	r2, r3, #22
 800914a:	d402      	bmi.n	8009152 <_vfiprintf_r+0x2a>
 800914c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800914e:	f7fe fb14 	bl	800777a <__retarget_lock_acquire_recursive>
 8009152:	89ab      	ldrh	r3, [r5, #12]
 8009154:	071b      	lsls	r3, r3, #28
 8009156:	d501      	bpl.n	800915c <_vfiprintf_r+0x34>
 8009158:	692b      	ldr	r3, [r5, #16]
 800915a:	b99b      	cbnz	r3, 8009184 <_vfiprintf_r+0x5c>
 800915c:	4629      	mov	r1, r5
 800915e:	4630      	mov	r0, r6
 8009160:	f000 f938 	bl	80093d4 <__swsetup_r>
 8009164:	b170      	cbz	r0, 8009184 <_vfiprintf_r+0x5c>
 8009166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009168:	07dc      	lsls	r4, r3, #31
 800916a:	d504      	bpl.n	8009176 <_vfiprintf_r+0x4e>
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	b01d      	add	sp, #116	@ 0x74
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	89ab      	ldrh	r3, [r5, #12]
 8009178:	0598      	lsls	r0, r3, #22
 800917a:	d4f7      	bmi.n	800916c <_vfiprintf_r+0x44>
 800917c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800917e:	f7fe fafd 	bl	800777c <__retarget_lock_release_recursive>
 8009182:	e7f3      	b.n	800916c <_vfiprintf_r+0x44>
 8009184:	2300      	movs	r3, #0
 8009186:	9309      	str	r3, [sp, #36]	@ 0x24
 8009188:	2320      	movs	r3, #32
 800918a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800918e:	2330      	movs	r3, #48	@ 0x30
 8009190:	f04f 0901 	mov.w	r9, #1
 8009194:	f8cd 800c 	str.w	r8, [sp, #12]
 8009198:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009344 <_vfiprintf_r+0x21c>
 800919c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091a0:	4623      	mov	r3, r4
 80091a2:	469a      	mov	sl, r3
 80091a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091a8:	b10a      	cbz	r2, 80091ae <_vfiprintf_r+0x86>
 80091aa:	2a25      	cmp	r2, #37	@ 0x25
 80091ac:	d1f9      	bne.n	80091a2 <_vfiprintf_r+0x7a>
 80091ae:	ebba 0b04 	subs.w	fp, sl, r4
 80091b2:	d00b      	beq.n	80091cc <_vfiprintf_r+0xa4>
 80091b4:	465b      	mov	r3, fp
 80091b6:	4622      	mov	r2, r4
 80091b8:	4629      	mov	r1, r5
 80091ba:	4630      	mov	r0, r6
 80091bc:	f7ff ffa2 	bl	8009104 <__sfputs_r>
 80091c0:	3001      	adds	r0, #1
 80091c2:	f000 80a7 	beq.w	8009314 <_vfiprintf_r+0x1ec>
 80091c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091c8:	445a      	add	r2, fp
 80091ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80091cc:	f89a 3000 	ldrb.w	r3, [sl]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 809f 	beq.w	8009314 <_vfiprintf_r+0x1ec>
 80091d6:	2300      	movs	r3, #0
 80091d8:	f04f 32ff 	mov.w	r2, #4294967295
 80091dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091e0:	f10a 0a01 	add.w	sl, sl, #1
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	9307      	str	r3, [sp, #28]
 80091e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80091ee:	4654      	mov	r4, sl
 80091f0:	2205      	movs	r2, #5
 80091f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f6:	4853      	ldr	r0, [pc, #332]	@ (8009344 <_vfiprintf_r+0x21c>)
 80091f8:	f7fe fac1 	bl	800777e <memchr>
 80091fc:	9a04      	ldr	r2, [sp, #16]
 80091fe:	b9d8      	cbnz	r0, 8009238 <_vfiprintf_r+0x110>
 8009200:	06d1      	lsls	r1, r2, #27
 8009202:	bf44      	itt	mi
 8009204:	2320      	movmi	r3, #32
 8009206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800920a:	0713      	lsls	r3, r2, #28
 800920c:	bf44      	itt	mi
 800920e:	232b      	movmi	r3, #43	@ 0x2b
 8009210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009214:	f89a 3000 	ldrb.w	r3, [sl]
 8009218:	2b2a      	cmp	r3, #42	@ 0x2a
 800921a:	d015      	beq.n	8009248 <_vfiprintf_r+0x120>
 800921c:	4654      	mov	r4, sl
 800921e:	2000      	movs	r0, #0
 8009220:	f04f 0c0a 	mov.w	ip, #10
 8009224:	9a07      	ldr	r2, [sp, #28]
 8009226:	4621      	mov	r1, r4
 8009228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800922c:	3b30      	subs	r3, #48	@ 0x30
 800922e:	2b09      	cmp	r3, #9
 8009230:	d94b      	bls.n	80092ca <_vfiprintf_r+0x1a2>
 8009232:	b1b0      	cbz	r0, 8009262 <_vfiprintf_r+0x13a>
 8009234:	9207      	str	r2, [sp, #28]
 8009236:	e014      	b.n	8009262 <_vfiprintf_r+0x13a>
 8009238:	eba0 0308 	sub.w	r3, r0, r8
 800923c:	fa09 f303 	lsl.w	r3, r9, r3
 8009240:	4313      	orrs	r3, r2
 8009242:	46a2      	mov	sl, r4
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	e7d2      	b.n	80091ee <_vfiprintf_r+0xc6>
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	1d19      	adds	r1, r3, #4
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	9103      	str	r1, [sp, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	bfbb      	ittet	lt
 8009254:	425b      	neglt	r3, r3
 8009256:	f042 0202 	orrlt.w	r2, r2, #2
 800925a:	9307      	strge	r3, [sp, #28]
 800925c:	9307      	strlt	r3, [sp, #28]
 800925e:	bfb8      	it	lt
 8009260:	9204      	strlt	r2, [sp, #16]
 8009262:	7823      	ldrb	r3, [r4, #0]
 8009264:	2b2e      	cmp	r3, #46	@ 0x2e
 8009266:	d10a      	bne.n	800927e <_vfiprintf_r+0x156>
 8009268:	7863      	ldrb	r3, [r4, #1]
 800926a:	2b2a      	cmp	r3, #42	@ 0x2a
 800926c:	d132      	bne.n	80092d4 <_vfiprintf_r+0x1ac>
 800926e:	9b03      	ldr	r3, [sp, #12]
 8009270:	3402      	adds	r4, #2
 8009272:	1d1a      	adds	r2, r3, #4
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	9203      	str	r2, [sp, #12]
 8009278:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800927c:	9305      	str	r3, [sp, #20]
 800927e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009348 <_vfiprintf_r+0x220>
 8009282:	2203      	movs	r2, #3
 8009284:	4650      	mov	r0, sl
 8009286:	7821      	ldrb	r1, [r4, #0]
 8009288:	f7fe fa79 	bl	800777e <memchr>
 800928c:	b138      	cbz	r0, 800929e <_vfiprintf_r+0x176>
 800928e:	2240      	movs	r2, #64	@ 0x40
 8009290:	9b04      	ldr	r3, [sp, #16]
 8009292:	eba0 000a 	sub.w	r0, r0, sl
 8009296:	4082      	lsls	r2, r0
 8009298:	4313      	orrs	r3, r2
 800929a:	3401      	adds	r4, #1
 800929c:	9304      	str	r3, [sp, #16]
 800929e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a2:	2206      	movs	r2, #6
 80092a4:	4829      	ldr	r0, [pc, #164]	@ (800934c <_vfiprintf_r+0x224>)
 80092a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092aa:	f7fe fa68 	bl	800777e <memchr>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d03f      	beq.n	8009332 <_vfiprintf_r+0x20a>
 80092b2:	4b27      	ldr	r3, [pc, #156]	@ (8009350 <_vfiprintf_r+0x228>)
 80092b4:	bb1b      	cbnz	r3, 80092fe <_vfiprintf_r+0x1d6>
 80092b6:	9b03      	ldr	r3, [sp, #12]
 80092b8:	3307      	adds	r3, #7
 80092ba:	f023 0307 	bic.w	r3, r3, #7
 80092be:	3308      	adds	r3, #8
 80092c0:	9303      	str	r3, [sp, #12]
 80092c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092c4:	443b      	add	r3, r7
 80092c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80092c8:	e76a      	b.n	80091a0 <_vfiprintf_r+0x78>
 80092ca:	460c      	mov	r4, r1
 80092cc:	2001      	movs	r0, #1
 80092ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80092d2:	e7a8      	b.n	8009226 <_vfiprintf_r+0xfe>
 80092d4:	2300      	movs	r3, #0
 80092d6:	f04f 0c0a 	mov.w	ip, #10
 80092da:	4619      	mov	r1, r3
 80092dc:	3401      	adds	r4, #1
 80092de:	9305      	str	r3, [sp, #20]
 80092e0:	4620      	mov	r0, r4
 80092e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092e6:	3a30      	subs	r2, #48	@ 0x30
 80092e8:	2a09      	cmp	r2, #9
 80092ea:	d903      	bls.n	80092f4 <_vfiprintf_r+0x1cc>
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d0c6      	beq.n	800927e <_vfiprintf_r+0x156>
 80092f0:	9105      	str	r1, [sp, #20]
 80092f2:	e7c4      	b.n	800927e <_vfiprintf_r+0x156>
 80092f4:	4604      	mov	r4, r0
 80092f6:	2301      	movs	r3, #1
 80092f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80092fc:	e7f0      	b.n	80092e0 <_vfiprintf_r+0x1b8>
 80092fe:	ab03      	add	r3, sp, #12
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	462a      	mov	r2, r5
 8009304:	4630      	mov	r0, r6
 8009306:	4b13      	ldr	r3, [pc, #76]	@ (8009354 <_vfiprintf_r+0x22c>)
 8009308:	a904      	add	r1, sp, #16
 800930a:	f7fd fca1 	bl	8006c50 <_printf_float>
 800930e:	4607      	mov	r7, r0
 8009310:	1c78      	adds	r0, r7, #1
 8009312:	d1d6      	bne.n	80092c2 <_vfiprintf_r+0x19a>
 8009314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009316:	07d9      	lsls	r1, r3, #31
 8009318:	d405      	bmi.n	8009326 <_vfiprintf_r+0x1fe>
 800931a:	89ab      	ldrh	r3, [r5, #12]
 800931c:	059a      	lsls	r2, r3, #22
 800931e:	d402      	bmi.n	8009326 <_vfiprintf_r+0x1fe>
 8009320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009322:	f7fe fa2b 	bl	800777c <__retarget_lock_release_recursive>
 8009326:	89ab      	ldrh	r3, [r5, #12]
 8009328:	065b      	lsls	r3, r3, #25
 800932a:	f53f af1f 	bmi.w	800916c <_vfiprintf_r+0x44>
 800932e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009330:	e71e      	b.n	8009170 <_vfiprintf_r+0x48>
 8009332:	ab03      	add	r3, sp, #12
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	462a      	mov	r2, r5
 8009338:	4630      	mov	r0, r6
 800933a:	4b06      	ldr	r3, [pc, #24]	@ (8009354 <_vfiprintf_r+0x22c>)
 800933c:	a904      	add	r1, sp, #16
 800933e:	f7fd ff25 	bl	800718c <_printf_i>
 8009342:	e7e4      	b.n	800930e <_vfiprintf_r+0x1e6>
 8009344:	0800a600 	.word	0x0800a600
 8009348:	0800a606 	.word	0x0800a606
 800934c:	0800a60a 	.word	0x0800a60a
 8009350:	08006c51 	.word	0x08006c51
 8009354:	08009105 	.word	0x08009105

08009358 <__swbuf_r>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	460e      	mov	r6, r1
 800935c:	4614      	mov	r4, r2
 800935e:	4605      	mov	r5, r0
 8009360:	b118      	cbz	r0, 800936a <__swbuf_r+0x12>
 8009362:	6a03      	ldr	r3, [r0, #32]
 8009364:	b90b      	cbnz	r3, 800936a <__swbuf_r+0x12>
 8009366:	f7fe f8bd 	bl	80074e4 <__sinit>
 800936a:	69a3      	ldr	r3, [r4, #24]
 800936c:	60a3      	str	r3, [r4, #8]
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	071a      	lsls	r2, r3, #28
 8009372:	d501      	bpl.n	8009378 <__swbuf_r+0x20>
 8009374:	6923      	ldr	r3, [r4, #16]
 8009376:	b943      	cbnz	r3, 800938a <__swbuf_r+0x32>
 8009378:	4621      	mov	r1, r4
 800937a:	4628      	mov	r0, r5
 800937c:	f000 f82a 	bl	80093d4 <__swsetup_r>
 8009380:	b118      	cbz	r0, 800938a <__swbuf_r+0x32>
 8009382:	f04f 37ff 	mov.w	r7, #4294967295
 8009386:	4638      	mov	r0, r7
 8009388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	6922      	ldr	r2, [r4, #16]
 800938e:	b2f6      	uxtb	r6, r6
 8009390:	1a98      	subs	r0, r3, r2
 8009392:	6963      	ldr	r3, [r4, #20]
 8009394:	4637      	mov	r7, r6
 8009396:	4283      	cmp	r3, r0
 8009398:	dc05      	bgt.n	80093a6 <__swbuf_r+0x4e>
 800939a:	4621      	mov	r1, r4
 800939c:	4628      	mov	r0, r5
 800939e:	f7ff fe03 	bl	8008fa8 <_fflush_r>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d1ed      	bne.n	8009382 <__swbuf_r+0x2a>
 80093a6:	68a3      	ldr	r3, [r4, #8]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	60a3      	str	r3, [r4, #8]
 80093ac:	6823      	ldr	r3, [r4, #0]
 80093ae:	1c5a      	adds	r2, r3, #1
 80093b0:	6022      	str	r2, [r4, #0]
 80093b2:	701e      	strb	r6, [r3, #0]
 80093b4:	6962      	ldr	r2, [r4, #20]
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d004      	beq.n	80093c6 <__swbuf_r+0x6e>
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	07db      	lsls	r3, r3, #31
 80093c0:	d5e1      	bpl.n	8009386 <__swbuf_r+0x2e>
 80093c2:	2e0a      	cmp	r6, #10
 80093c4:	d1df      	bne.n	8009386 <__swbuf_r+0x2e>
 80093c6:	4621      	mov	r1, r4
 80093c8:	4628      	mov	r0, r5
 80093ca:	f7ff fded 	bl	8008fa8 <_fflush_r>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d0d9      	beq.n	8009386 <__swbuf_r+0x2e>
 80093d2:	e7d6      	b.n	8009382 <__swbuf_r+0x2a>

080093d4 <__swsetup_r>:
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	4b29      	ldr	r3, [pc, #164]	@ (800947c <__swsetup_r+0xa8>)
 80093d8:	4605      	mov	r5, r0
 80093da:	6818      	ldr	r0, [r3, #0]
 80093dc:	460c      	mov	r4, r1
 80093de:	b118      	cbz	r0, 80093e8 <__swsetup_r+0x14>
 80093e0:	6a03      	ldr	r3, [r0, #32]
 80093e2:	b90b      	cbnz	r3, 80093e8 <__swsetup_r+0x14>
 80093e4:	f7fe f87e 	bl	80074e4 <__sinit>
 80093e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ec:	0719      	lsls	r1, r3, #28
 80093ee:	d422      	bmi.n	8009436 <__swsetup_r+0x62>
 80093f0:	06da      	lsls	r2, r3, #27
 80093f2:	d407      	bmi.n	8009404 <__swsetup_r+0x30>
 80093f4:	2209      	movs	r2, #9
 80093f6:	602a      	str	r2, [r5, #0]
 80093f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009400:	81a3      	strh	r3, [r4, #12]
 8009402:	e033      	b.n	800946c <__swsetup_r+0x98>
 8009404:	0758      	lsls	r0, r3, #29
 8009406:	d512      	bpl.n	800942e <__swsetup_r+0x5a>
 8009408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800940a:	b141      	cbz	r1, 800941e <__swsetup_r+0x4a>
 800940c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009410:	4299      	cmp	r1, r3
 8009412:	d002      	beq.n	800941a <__swsetup_r+0x46>
 8009414:	4628      	mov	r0, r5
 8009416:	f7ff f81f 	bl	8008458 <_free_r>
 800941a:	2300      	movs	r3, #0
 800941c:	6363      	str	r3, [r4, #52]	@ 0x34
 800941e:	89a3      	ldrh	r3, [r4, #12]
 8009420:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009424:	81a3      	strh	r3, [r4, #12]
 8009426:	2300      	movs	r3, #0
 8009428:	6063      	str	r3, [r4, #4]
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	f043 0308 	orr.w	r3, r3, #8
 8009434:	81a3      	strh	r3, [r4, #12]
 8009436:	6923      	ldr	r3, [r4, #16]
 8009438:	b94b      	cbnz	r3, 800944e <__swsetup_r+0x7a>
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009444:	d003      	beq.n	800944e <__swsetup_r+0x7a>
 8009446:	4621      	mov	r1, r4
 8009448:	4628      	mov	r0, r5
 800944a:	f000 f882 	bl	8009552 <__smakebuf_r>
 800944e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009452:	f013 0201 	ands.w	r2, r3, #1
 8009456:	d00a      	beq.n	800946e <__swsetup_r+0x9a>
 8009458:	2200      	movs	r2, #0
 800945a:	60a2      	str	r2, [r4, #8]
 800945c:	6962      	ldr	r2, [r4, #20]
 800945e:	4252      	negs	r2, r2
 8009460:	61a2      	str	r2, [r4, #24]
 8009462:	6922      	ldr	r2, [r4, #16]
 8009464:	b942      	cbnz	r2, 8009478 <__swsetup_r+0xa4>
 8009466:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800946a:	d1c5      	bne.n	80093f8 <__swsetup_r+0x24>
 800946c:	bd38      	pop	{r3, r4, r5, pc}
 800946e:	0799      	lsls	r1, r3, #30
 8009470:	bf58      	it	pl
 8009472:	6962      	ldrpl	r2, [r4, #20]
 8009474:	60a2      	str	r2, [r4, #8]
 8009476:	e7f4      	b.n	8009462 <__swsetup_r+0x8e>
 8009478:	2000      	movs	r0, #0
 800947a:	e7f7      	b.n	800946c <__swsetup_r+0x98>
 800947c:	20000034 	.word	0x20000034

08009480 <_raise_r>:
 8009480:	291f      	cmp	r1, #31
 8009482:	b538      	push	{r3, r4, r5, lr}
 8009484:	4605      	mov	r5, r0
 8009486:	460c      	mov	r4, r1
 8009488:	d904      	bls.n	8009494 <_raise_r+0x14>
 800948a:	2316      	movs	r3, #22
 800948c:	6003      	str	r3, [r0, #0]
 800948e:	f04f 30ff 	mov.w	r0, #4294967295
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009496:	b112      	cbz	r2, 800949e <_raise_r+0x1e>
 8009498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800949c:	b94b      	cbnz	r3, 80094b2 <_raise_r+0x32>
 800949e:	4628      	mov	r0, r5
 80094a0:	f000 f830 	bl	8009504 <_getpid_r>
 80094a4:	4622      	mov	r2, r4
 80094a6:	4601      	mov	r1, r0
 80094a8:	4628      	mov	r0, r5
 80094aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ae:	f000 b817 	b.w	80094e0 <_kill_r>
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d00a      	beq.n	80094cc <_raise_r+0x4c>
 80094b6:	1c59      	adds	r1, r3, #1
 80094b8:	d103      	bne.n	80094c2 <_raise_r+0x42>
 80094ba:	2316      	movs	r3, #22
 80094bc:	6003      	str	r3, [r0, #0]
 80094be:	2001      	movs	r0, #1
 80094c0:	e7e7      	b.n	8009492 <_raise_r+0x12>
 80094c2:	2100      	movs	r1, #0
 80094c4:	4620      	mov	r0, r4
 80094c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80094ca:	4798      	blx	r3
 80094cc:	2000      	movs	r0, #0
 80094ce:	e7e0      	b.n	8009492 <_raise_r+0x12>

080094d0 <raise>:
 80094d0:	4b02      	ldr	r3, [pc, #8]	@ (80094dc <raise+0xc>)
 80094d2:	4601      	mov	r1, r0
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	f7ff bfd3 	b.w	8009480 <_raise_r>
 80094da:	bf00      	nop
 80094dc:	20000034 	.word	0x20000034

080094e0 <_kill_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	2300      	movs	r3, #0
 80094e4:	4d06      	ldr	r5, [pc, #24]	@ (8009500 <_kill_r+0x20>)
 80094e6:	4604      	mov	r4, r0
 80094e8:	4608      	mov	r0, r1
 80094ea:	4611      	mov	r1, r2
 80094ec:	602b      	str	r3, [r5, #0]
 80094ee:	f7f8 fb30 	bl	8001b52 <_kill>
 80094f2:	1c43      	adds	r3, r0, #1
 80094f4:	d102      	bne.n	80094fc <_kill_r+0x1c>
 80094f6:	682b      	ldr	r3, [r5, #0]
 80094f8:	b103      	cbz	r3, 80094fc <_kill_r+0x1c>
 80094fa:	6023      	str	r3, [r4, #0]
 80094fc:	bd38      	pop	{r3, r4, r5, pc}
 80094fe:	bf00      	nop
 8009500:	20000568 	.word	0x20000568

08009504 <_getpid_r>:
 8009504:	f7f8 bb1e 	b.w	8001b44 <_getpid>

08009508 <__swhatbuf_r>:
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	460c      	mov	r4, r1
 800950c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009510:	4615      	mov	r5, r2
 8009512:	2900      	cmp	r1, #0
 8009514:	461e      	mov	r6, r3
 8009516:	b096      	sub	sp, #88	@ 0x58
 8009518:	da0c      	bge.n	8009534 <__swhatbuf_r+0x2c>
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	2100      	movs	r1, #0
 800951e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009522:	bf14      	ite	ne
 8009524:	2340      	movne	r3, #64	@ 0x40
 8009526:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800952a:	2000      	movs	r0, #0
 800952c:	6031      	str	r1, [r6, #0]
 800952e:	602b      	str	r3, [r5, #0]
 8009530:	b016      	add	sp, #88	@ 0x58
 8009532:	bd70      	pop	{r4, r5, r6, pc}
 8009534:	466a      	mov	r2, sp
 8009536:	f000 f849 	bl	80095cc <_fstat_r>
 800953a:	2800      	cmp	r0, #0
 800953c:	dbed      	blt.n	800951a <__swhatbuf_r+0x12>
 800953e:	9901      	ldr	r1, [sp, #4]
 8009540:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009544:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009548:	4259      	negs	r1, r3
 800954a:	4159      	adcs	r1, r3
 800954c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009550:	e7eb      	b.n	800952a <__swhatbuf_r+0x22>

08009552 <__smakebuf_r>:
 8009552:	898b      	ldrh	r3, [r1, #12]
 8009554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009556:	079d      	lsls	r5, r3, #30
 8009558:	4606      	mov	r6, r0
 800955a:	460c      	mov	r4, r1
 800955c:	d507      	bpl.n	800956e <__smakebuf_r+0x1c>
 800955e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	6123      	str	r3, [r4, #16]
 8009566:	2301      	movs	r3, #1
 8009568:	6163      	str	r3, [r4, #20]
 800956a:	b003      	add	sp, #12
 800956c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800956e:	466a      	mov	r2, sp
 8009570:	ab01      	add	r3, sp, #4
 8009572:	f7ff ffc9 	bl	8009508 <__swhatbuf_r>
 8009576:	9f00      	ldr	r7, [sp, #0]
 8009578:	4605      	mov	r5, r0
 800957a:	4639      	mov	r1, r7
 800957c:	4630      	mov	r0, r6
 800957e:	f7fd f983 	bl	8006888 <_malloc_r>
 8009582:	b948      	cbnz	r0, 8009598 <__smakebuf_r+0x46>
 8009584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009588:	059a      	lsls	r2, r3, #22
 800958a:	d4ee      	bmi.n	800956a <__smakebuf_r+0x18>
 800958c:	f023 0303 	bic.w	r3, r3, #3
 8009590:	f043 0302 	orr.w	r3, r3, #2
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	e7e2      	b.n	800955e <__smakebuf_r+0xc>
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800959e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095a2:	81a3      	strh	r3, [r4, #12]
 80095a4:	9b01      	ldr	r3, [sp, #4]
 80095a6:	6020      	str	r0, [r4, #0]
 80095a8:	b15b      	cbz	r3, 80095c2 <__smakebuf_r+0x70>
 80095aa:	4630      	mov	r0, r6
 80095ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095b0:	f000 f81e 	bl	80095f0 <_isatty_r>
 80095b4:	b128      	cbz	r0, 80095c2 <__smakebuf_r+0x70>
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	f023 0303 	bic.w	r3, r3, #3
 80095bc:	f043 0301 	orr.w	r3, r3, #1
 80095c0:	81a3      	strh	r3, [r4, #12]
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	431d      	orrs	r5, r3
 80095c6:	81a5      	strh	r5, [r4, #12]
 80095c8:	e7cf      	b.n	800956a <__smakebuf_r+0x18>
	...

080095cc <_fstat_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	2300      	movs	r3, #0
 80095d0:	4d06      	ldr	r5, [pc, #24]	@ (80095ec <_fstat_r+0x20>)
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	4611      	mov	r1, r2
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	f7f8 fb19 	bl	8001c10 <_fstat>
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	d102      	bne.n	80095e8 <_fstat_r+0x1c>
 80095e2:	682b      	ldr	r3, [r5, #0]
 80095e4:	b103      	cbz	r3, 80095e8 <_fstat_r+0x1c>
 80095e6:	6023      	str	r3, [r4, #0]
 80095e8:	bd38      	pop	{r3, r4, r5, pc}
 80095ea:	bf00      	nop
 80095ec:	20000568 	.word	0x20000568

080095f0 <_isatty_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	2300      	movs	r3, #0
 80095f4:	4d05      	ldr	r5, [pc, #20]	@ (800960c <_isatty_r+0x1c>)
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	602b      	str	r3, [r5, #0]
 80095fc:	f7f8 fb17 	bl	8001c2e <_isatty>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d102      	bne.n	800960a <_isatty_r+0x1a>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b103      	cbz	r3, 800960a <_isatty_r+0x1a>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	20000568 	.word	0x20000568

08009610 <sinf>:
 8009610:	b507      	push	{r0, r1, r2, lr}
 8009612:	4a1b      	ldr	r2, [pc, #108]	@ (8009680 <sinf+0x70>)
 8009614:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009618:	4293      	cmp	r3, r2
 800961a:	4601      	mov	r1, r0
 800961c:	d806      	bhi.n	800962c <sinf+0x1c>
 800961e:	2200      	movs	r2, #0
 8009620:	2100      	movs	r1, #0
 8009622:	b003      	add	sp, #12
 8009624:	f85d eb04 	ldr.w	lr, [sp], #4
 8009628:	f000 b8f2 	b.w	8009810 <__kernel_sinf>
 800962c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009630:	d304      	bcc.n	800963c <sinf+0x2c>
 8009632:	f7f7 fa9d 	bl	8000b70 <__aeabi_fsub>
 8009636:	b003      	add	sp, #12
 8009638:	f85d fb04 	ldr.w	pc, [sp], #4
 800963c:	4669      	mov	r1, sp
 800963e:	f000 f95d 	bl	80098fc <__ieee754_rem_pio2f>
 8009642:	f000 0003 	and.w	r0, r0, #3
 8009646:	2801      	cmp	r0, #1
 8009648:	d008      	beq.n	800965c <sinf+0x4c>
 800964a:	2802      	cmp	r0, #2
 800964c:	d00b      	beq.n	8009666 <sinf+0x56>
 800964e:	b990      	cbnz	r0, 8009676 <sinf+0x66>
 8009650:	2201      	movs	r2, #1
 8009652:	9901      	ldr	r1, [sp, #4]
 8009654:	9800      	ldr	r0, [sp, #0]
 8009656:	f000 f8db 	bl	8009810 <__kernel_sinf>
 800965a:	e7ec      	b.n	8009636 <sinf+0x26>
 800965c:	9901      	ldr	r1, [sp, #4]
 800965e:	9800      	ldr	r0, [sp, #0]
 8009660:	f000 f856 	bl	8009710 <__kernel_cosf>
 8009664:	e7e7      	b.n	8009636 <sinf+0x26>
 8009666:	2201      	movs	r2, #1
 8009668:	9901      	ldr	r1, [sp, #4]
 800966a:	9800      	ldr	r0, [sp, #0]
 800966c:	f000 f8d0 	bl	8009810 <__kernel_sinf>
 8009670:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009674:	e7df      	b.n	8009636 <sinf+0x26>
 8009676:	9901      	ldr	r1, [sp, #4]
 8009678:	9800      	ldr	r0, [sp, #0]
 800967a:	f000 f849 	bl	8009710 <__kernel_cosf>
 800967e:	e7f7      	b.n	8009670 <sinf+0x60>
 8009680:	3f490fd8 	.word	0x3f490fd8

08009684 <round>:
 8009684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009686:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800968a:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800968e:	2a13      	cmp	r2, #19
 8009690:	4604      	mov	r4, r0
 8009692:	460d      	mov	r5, r1
 8009694:	460b      	mov	r3, r1
 8009696:	dc1a      	bgt.n	80096ce <round+0x4a>
 8009698:	2a00      	cmp	r2, #0
 800969a:	da0b      	bge.n	80096b4 <round+0x30>
 800969c:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80096a0:	3201      	adds	r2, #1
 80096a2:	bf04      	itt	eq
 80096a4:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80096a8:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80096ac:	2200      	movs	r2, #0
 80096ae:	461d      	mov	r5, r3
 80096b0:	4614      	mov	r4, r2
 80096b2:	e016      	b.n	80096e2 <round+0x5e>
 80096b4:	4815      	ldr	r0, [pc, #84]	@ (800970c <round+0x88>)
 80096b6:	4110      	asrs	r0, r2
 80096b8:	4001      	ands	r1, r0
 80096ba:	4321      	orrs	r1, r4
 80096bc:	d011      	beq.n	80096e2 <round+0x5e>
 80096be:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80096c2:	fa41 f202 	asr.w	r2, r1, r2
 80096c6:	4413      	add	r3, r2
 80096c8:	ea23 0300 	bic.w	r3, r3, r0
 80096cc:	e7ee      	b.n	80096ac <round+0x28>
 80096ce:	2a33      	cmp	r2, #51	@ 0x33
 80096d0:	dd0a      	ble.n	80096e8 <round+0x64>
 80096d2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80096d6:	d104      	bne.n	80096e2 <round+0x5e>
 80096d8:	4602      	mov	r2, r0
 80096da:	f7f6 fd47 	bl	800016c <__adddf3>
 80096de:	4604      	mov	r4, r0
 80096e0:	460d      	mov	r5, r1
 80096e2:	4620      	mov	r0, r4
 80096e4:	4629      	mov	r1, r5
 80096e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096e8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ec:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80096f0:	40f8      	lsrs	r0, r7
 80096f2:	4220      	tst	r0, r4
 80096f4:	d0f5      	beq.n	80096e2 <round+0x5e>
 80096f6:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80096fa:	2201      	movs	r2, #1
 80096fc:	408a      	lsls	r2, r1
 80096fe:	1912      	adds	r2, r2, r4
 8009700:	bf28      	it	cs
 8009702:	3301      	addcs	r3, #1
 8009704:	ea22 0200 	bic.w	r2, r2, r0
 8009708:	e7d1      	b.n	80096ae <round+0x2a>
 800970a:	bf00      	nop
 800970c:	000fffff 	.word	0x000fffff

08009710 <__kernel_cosf>:
 8009710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009714:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8009718:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800971c:	4606      	mov	r6, r0
 800971e:	4688      	mov	r8, r1
 8009720:	d203      	bcs.n	800972a <__kernel_cosf+0x1a>
 8009722:	f7f7 fcf5 	bl	8001110 <__aeabi_f2iz>
 8009726:	2800      	cmp	r0, #0
 8009728:	d05c      	beq.n	80097e4 <__kernel_cosf+0xd4>
 800972a:	4631      	mov	r1, r6
 800972c:	4630      	mov	r0, r6
 800972e:	f7f7 fb29 	bl	8000d84 <__aeabi_fmul>
 8009732:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009736:	4604      	mov	r4, r0
 8009738:	f7f7 fb24 	bl	8000d84 <__aeabi_fmul>
 800973c:	492b      	ldr	r1, [pc, #172]	@ (80097ec <__kernel_cosf+0xdc>)
 800973e:	4607      	mov	r7, r0
 8009740:	4620      	mov	r0, r4
 8009742:	f7f7 fb1f 	bl	8000d84 <__aeabi_fmul>
 8009746:	492a      	ldr	r1, [pc, #168]	@ (80097f0 <__kernel_cosf+0xe0>)
 8009748:	f7f7 fa14 	bl	8000b74 <__addsf3>
 800974c:	4621      	mov	r1, r4
 800974e:	f7f7 fb19 	bl	8000d84 <__aeabi_fmul>
 8009752:	4928      	ldr	r1, [pc, #160]	@ (80097f4 <__kernel_cosf+0xe4>)
 8009754:	f7f7 fa0c 	bl	8000b70 <__aeabi_fsub>
 8009758:	4621      	mov	r1, r4
 800975a:	f7f7 fb13 	bl	8000d84 <__aeabi_fmul>
 800975e:	4926      	ldr	r1, [pc, #152]	@ (80097f8 <__kernel_cosf+0xe8>)
 8009760:	f7f7 fa08 	bl	8000b74 <__addsf3>
 8009764:	4621      	mov	r1, r4
 8009766:	f7f7 fb0d 	bl	8000d84 <__aeabi_fmul>
 800976a:	4924      	ldr	r1, [pc, #144]	@ (80097fc <__kernel_cosf+0xec>)
 800976c:	f7f7 fa00 	bl	8000b70 <__aeabi_fsub>
 8009770:	4621      	mov	r1, r4
 8009772:	f7f7 fb07 	bl	8000d84 <__aeabi_fmul>
 8009776:	4922      	ldr	r1, [pc, #136]	@ (8009800 <__kernel_cosf+0xf0>)
 8009778:	f7f7 f9fc 	bl	8000b74 <__addsf3>
 800977c:	4621      	mov	r1, r4
 800977e:	f7f7 fb01 	bl	8000d84 <__aeabi_fmul>
 8009782:	4621      	mov	r1, r4
 8009784:	f7f7 fafe 	bl	8000d84 <__aeabi_fmul>
 8009788:	4641      	mov	r1, r8
 800978a:	4604      	mov	r4, r0
 800978c:	4630      	mov	r0, r6
 800978e:	f7f7 faf9 	bl	8000d84 <__aeabi_fmul>
 8009792:	4601      	mov	r1, r0
 8009794:	4620      	mov	r0, r4
 8009796:	f7f7 f9eb 	bl	8000b70 <__aeabi_fsub>
 800979a:	4b1a      	ldr	r3, [pc, #104]	@ (8009804 <__kernel_cosf+0xf4>)
 800979c:	4604      	mov	r4, r0
 800979e:	429d      	cmp	r5, r3
 80097a0:	d80a      	bhi.n	80097b8 <__kernel_cosf+0xa8>
 80097a2:	4601      	mov	r1, r0
 80097a4:	4638      	mov	r0, r7
 80097a6:	f7f7 f9e3 	bl	8000b70 <__aeabi_fsub>
 80097aa:	4601      	mov	r1, r0
 80097ac:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80097b0:	f7f7 f9de 	bl	8000b70 <__aeabi_fsub>
 80097b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b8:	4b13      	ldr	r3, [pc, #76]	@ (8009808 <__kernel_cosf+0xf8>)
 80097ba:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80097be:	429d      	cmp	r5, r3
 80097c0:	bf8c      	ite	hi
 80097c2:	4d12      	ldrhi	r5, [pc, #72]	@ (800980c <__kernel_cosf+0xfc>)
 80097c4:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 80097c8:	4629      	mov	r1, r5
 80097ca:	f7f7 f9d1 	bl	8000b70 <__aeabi_fsub>
 80097ce:	4629      	mov	r1, r5
 80097d0:	4606      	mov	r6, r0
 80097d2:	4638      	mov	r0, r7
 80097d4:	f7f7 f9cc 	bl	8000b70 <__aeabi_fsub>
 80097d8:	4621      	mov	r1, r4
 80097da:	f7f7 f9c9 	bl	8000b70 <__aeabi_fsub>
 80097de:	4601      	mov	r1, r0
 80097e0:	4630      	mov	r0, r6
 80097e2:	e7e5      	b.n	80097b0 <__kernel_cosf+0xa0>
 80097e4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80097e8:	e7e4      	b.n	80097b4 <__kernel_cosf+0xa4>
 80097ea:	bf00      	nop
 80097ec:	ad47d74e 	.word	0xad47d74e
 80097f0:	310f74f6 	.word	0x310f74f6
 80097f4:	3493f27c 	.word	0x3493f27c
 80097f8:	37d00d01 	.word	0x37d00d01
 80097fc:	3ab60b61 	.word	0x3ab60b61
 8009800:	3d2aaaab 	.word	0x3d2aaaab
 8009804:	3e999999 	.word	0x3e999999
 8009808:	3f480000 	.word	0x3f480000
 800980c:	3e900000 	.word	0x3e900000

08009810 <__kernel_sinf>:
 8009810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009814:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009818:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800981c:	4604      	mov	r4, r0
 800981e:	460f      	mov	r7, r1
 8009820:	4691      	mov	r9, r2
 8009822:	d203      	bcs.n	800982c <__kernel_sinf+0x1c>
 8009824:	f7f7 fc74 	bl	8001110 <__aeabi_f2iz>
 8009828:	2800      	cmp	r0, #0
 800982a:	d035      	beq.n	8009898 <__kernel_sinf+0x88>
 800982c:	4621      	mov	r1, r4
 800982e:	4620      	mov	r0, r4
 8009830:	f7f7 faa8 	bl	8000d84 <__aeabi_fmul>
 8009834:	4605      	mov	r5, r0
 8009836:	4601      	mov	r1, r0
 8009838:	4620      	mov	r0, r4
 800983a:	f7f7 faa3 	bl	8000d84 <__aeabi_fmul>
 800983e:	4929      	ldr	r1, [pc, #164]	@ (80098e4 <__kernel_sinf+0xd4>)
 8009840:	4606      	mov	r6, r0
 8009842:	4628      	mov	r0, r5
 8009844:	f7f7 fa9e 	bl	8000d84 <__aeabi_fmul>
 8009848:	4927      	ldr	r1, [pc, #156]	@ (80098e8 <__kernel_sinf+0xd8>)
 800984a:	f7f7 f991 	bl	8000b70 <__aeabi_fsub>
 800984e:	4629      	mov	r1, r5
 8009850:	f7f7 fa98 	bl	8000d84 <__aeabi_fmul>
 8009854:	4925      	ldr	r1, [pc, #148]	@ (80098ec <__kernel_sinf+0xdc>)
 8009856:	f7f7 f98d 	bl	8000b74 <__addsf3>
 800985a:	4629      	mov	r1, r5
 800985c:	f7f7 fa92 	bl	8000d84 <__aeabi_fmul>
 8009860:	4923      	ldr	r1, [pc, #140]	@ (80098f0 <__kernel_sinf+0xe0>)
 8009862:	f7f7 f985 	bl	8000b70 <__aeabi_fsub>
 8009866:	4629      	mov	r1, r5
 8009868:	f7f7 fa8c 	bl	8000d84 <__aeabi_fmul>
 800986c:	4921      	ldr	r1, [pc, #132]	@ (80098f4 <__kernel_sinf+0xe4>)
 800986e:	f7f7 f981 	bl	8000b74 <__addsf3>
 8009872:	4680      	mov	r8, r0
 8009874:	f1b9 0f00 	cmp.w	r9, #0
 8009878:	d111      	bne.n	800989e <__kernel_sinf+0x8e>
 800987a:	4601      	mov	r1, r0
 800987c:	4628      	mov	r0, r5
 800987e:	f7f7 fa81 	bl	8000d84 <__aeabi_fmul>
 8009882:	491d      	ldr	r1, [pc, #116]	@ (80098f8 <__kernel_sinf+0xe8>)
 8009884:	f7f7 f974 	bl	8000b70 <__aeabi_fsub>
 8009888:	4631      	mov	r1, r6
 800988a:	f7f7 fa7b 	bl	8000d84 <__aeabi_fmul>
 800988e:	4601      	mov	r1, r0
 8009890:	4620      	mov	r0, r4
 8009892:	f7f7 f96f 	bl	8000b74 <__addsf3>
 8009896:	4604      	mov	r4, r0
 8009898:	4620      	mov	r0, r4
 800989a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800989e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80098a2:	4638      	mov	r0, r7
 80098a4:	f7f7 fa6e 	bl	8000d84 <__aeabi_fmul>
 80098a8:	4641      	mov	r1, r8
 80098aa:	4681      	mov	r9, r0
 80098ac:	4630      	mov	r0, r6
 80098ae:	f7f7 fa69 	bl	8000d84 <__aeabi_fmul>
 80098b2:	4601      	mov	r1, r0
 80098b4:	4648      	mov	r0, r9
 80098b6:	f7f7 f95b 	bl	8000b70 <__aeabi_fsub>
 80098ba:	4629      	mov	r1, r5
 80098bc:	f7f7 fa62 	bl	8000d84 <__aeabi_fmul>
 80098c0:	4639      	mov	r1, r7
 80098c2:	f7f7 f955 	bl	8000b70 <__aeabi_fsub>
 80098c6:	490c      	ldr	r1, [pc, #48]	@ (80098f8 <__kernel_sinf+0xe8>)
 80098c8:	4605      	mov	r5, r0
 80098ca:	4630      	mov	r0, r6
 80098cc:	f7f7 fa5a 	bl	8000d84 <__aeabi_fmul>
 80098d0:	4601      	mov	r1, r0
 80098d2:	4628      	mov	r0, r5
 80098d4:	f7f7 f94e 	bl	8000b74 <__addsf3>
 80098d8:	4601      	mov	r1, r0
 80098da:	4620      	mov	r0, r4
 80098dc:	f7f7 f948 	bl	8000b70 <__aeabi_fsub>
 80098e0:	e7d9      	b.n	8009896 <__kernel_sinf+0x86>
 80098e2:	bf00      	nop
 80098e4:	2f2ec9d3 	.word	0x2f2ec9d3
 80098e8:	32d72f34 	.word	0x32d72f34
 80098ec:	3638ef1b 	.word	0x3638ef1b
 80098f0:	39500d01 	.word	0x39500d01
 80098f4:	3c088889 	.word	0x3c088889
 80098f8:	3e2aaaab 	.word	0x3e2aaaab

080098fc <__ieee754_rem_pio2f>:
 80098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	4aa4      	ldr	r2, [pc, #656]	@ (8009b94 <__ieee754_rem_pio2f+0x298>)
 8009902:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8009906:	4590      	cmp	r8, r2
 8009908:	460c      	mov	r4, r1
 800990a:	4682      	mov	sl, r0
 800990c:	b087      	sub	sp, #28
 800990e:	d804      	bhi.n	800991a <__ieee754_rem_pio2f+0x1e>
 8009910:	2300      	movs	r3, #0
 8009912:	6008      	str	r0, [r1, #0]
 8009914:	604b      	str	r3, [r1, #4]
 8009916:	2500      	movs	r5, #0
 8009918:	e01d      	b.n	8009956 <__ieee754_rem_pio2f+0x5a>
 800991a:	4a9f      	ldr	r2, [pc, #636]	@ (8009b98 <__ieee754_rem_pio2f+0x29c>)
 800991c:	4590      	cmp	r8, r2
 800991e:	d84f      	bhi.n	80099c0 <__ieee754_rem_pio2f+0xc4>
 8009920:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8009924:	2800      	cmp	r0, #0
 8009926:	499d      	ldr	r1, [pc, #628]	@ (8009b9c <__ieee754_rem_pio2f+0x2a0>)
 8009928:	4f9d      	ldr	r7, [pc, #628]	@ (8009ba0 <__ieee754_rem_pio2f+0x2a4>)
 800992a:	f025 050f 	bic.w	r5, r5, #15
 800992e:	dd24      	ble.n	800997a <__ieee754_rem_pio2f+0x7e>
 8009930:	f7f7 f91e 	bl	8000b70 <__aeabi_fsub>
 8009934:	42bd      	cmp	r5, r7
 8009936:	4606      	mov	r6, r0
 8009938:	d011      	beq.n	800995e <__ieee754_rem_pio2f+0x62>
 800993a:	499a      	ldr	r1, [pc, #616]	@ (8009ba4 <__ieee754_rem_pio2f+0x2a8>)
 800993c:	f7f7 f918 	bl	8000b70 <__aeabi_fsub>
 8009940:	4601      	mov	r1, r0
 8009942:	4605      	mov	r5, r0
 8009944:	4630      	mov	r0, r6
 8009946:	f7f7 f913 	bl	8000b70 <__aeabi_fsub>
 800994a:	4996      	ldr	r1, [pc, #600]	@ (8009ba4 <__ieee754_rem_pio2f+0x2a8>)
 800994c:	f7f7 f910 	bl	8000b70 <__aeabi_fsub>
 8009950:	6025      	str	r5, [r4, #0]
 8009952:	2501      	movs	r5, #1
 8009954:	6060      	str	r0, [r4, #4]
 8009956:	4628      	mov	r0, r5
 8009958:	b007      	add	sp, #28
 800995a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995e:	4992      	ldr	r1, [pc, #584]	@ (8009ba8 <__ieee754_rem_pio2f+0x2ac>)
 8009960:	f7f7 f906 	bl	8000b70 <__aeabi_fsub>
 8009964:	4991      	ldr	r1, [pc, #580]	@ (8009bac <__ieee754_rem_pio2f+0x2b0>)
 8009966:	4606      	mov	r6, r0
 8009968:	f7f7 f902 	bl	8000b70 <__aeabi_fsub>
 800996c:	4601      	mov	r1, r0
 800996e:	4605      	mov	r5, r0
 8009970:	4630      	mov	r0, r6
 8009972:	f7f7 f8fd 	bl	8000b70 <__aeabi_fsub>
 8009976:	498d      	ldr	r1, [pc, #564]	@ (8009bac <__ieee754_rem_pio2f+0x2b0>)
 8009978:	e7e8      	b.n	800994c <__ieee754_rem_pio2f+0x50>
 800997a:	f7f7 f8fb 	bl	8000b74 <__addsf3>
 800997e:	42bd      	cmp	r5, r7
 8009980:	4606      	mov	r6, r0
 8009982:	d00f      	beq.n	80099a4 <__ieee754_rem_pio2f+0xa8>
 8009984:	4987      	ldr	r1, [pc, #540]	@ (8009ba4 <__ieee754_rem_pio2f+0x2a8>)
 8009986:	f7f7 f8f5 	bl	8000b74 <__addsf3>
 800998a:	4601      	mov	r1, r0
 800998c:	4605      	mov	r5, r0
 800998e:	4630      	mov	r0, r6
 8009990:	f7f7 f8ee 	bl	8000b70 <__aeabi_fsub>
 8009994:	4983      	ldr	r1, [pc, #524]	@ (8009ba4 <__ieee754_rem_pio2f+0x2a8>)
 8009996:	f7f7 f8ed 	bl	8000b74 <__addsf3>
 800999a:	6025      	str	r5, [r4, #0]
 800999c:	6060      	str	r0, [r4, #4]
 800999e:	f04f 35ff 	mov.w	r5, #4294967295
 80099a2:	e7d8      	b.n	8009956 <__ieee754_rem_pio2f+0x5a>
 80099a4:	4980      	ldr	r1, [pc, #512]	@ (8009ba8 <__ieee754_rem_pio2f+0x2ac>)
 80099a6:	f7f7 f8e5 	bl	8000b74 <__addsf3>
 80099aa:	4980      	ldr	r1, [pc, #512]	@ (8009bac <__ieee754_rem_pio2f+0x2b0>)
 80099ac:	4606      	mov	r6, r0
 80099ae:	f7f7 f8e1 	bl	8000b74 <__addsf3>
 80099b2:	4601      	mov	r1, r0
 80099b4:	4605      	mov	r5, r0
 80099b6:	4630      	mov	r0, r6
 80099b8:	f7f7 f8da 	bl	8000b70 <__aeabi_fsub>
 80099bc:	497b      	ldr	r1, [pc, #492]	@ (8009bac <__ieee754_rem_pio2f+0x2b0>)
 80099be:	e7ea      	b.n	8009996 <__ieee754_rem_pio2f+0x9a>
 80099c0:	4a7b      	ldr	r2, [pc, #492]	@ (8009bb0 <__ieee754_rem_pio2f+0x2b4>)
 80099c2:	4590      	cmp	r8, r2
 80099c4:	f200 8095 	bhi.w	8009af2 <__ieee754_rem_pio2f+0x1f6>
 80099c8:	f000 f8fe 	bl	8009bc8 <fabsf>
 80099cc:	4979      	ldr	r1, [pc, #484]	@ (8009bb4 <__ieee754_rem_pio2f+0x2b8>)
 80099ce:	4606      	mov	r6, r0
 80099d0:	f7f7 f9d8 	bl	8000d84 <__aeabi_fmul>
 80099d4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80099d8:	f7f7 f8cc 	bl	8000b74 <__addsf3>
 80099dc:	f7f7 fb98 	bl	8001110 <__aeabi_f2iz>
 80099e0:	4605      	mov	r5, r0
 80099e2:	f7f7 f97b 	bl	8000cdc <__aeabi_i2f>
 80099e6:	496d      	ldr	r1, [pc, #436]	@ (8009b9c <__ieee754_rem_pio2f+0x2a0>)
 80099e8:	4681      	mov	r9, r0
 80099ea:	f7f7 f9cb 	bl	8000d84 <__aeabi_fmul>
 80099ee:	4601      	mov	r1, r0
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7f7 f8bd 	bl	8000b70 <__aeabi_fsub>
 80099f6:	496b      	ldr	r1, [pc, #428]	@ (8009ba4 <__ieee754_rem_pio2f+0x2a8>)
 80099f8:	4607      	mov	r7, r0
 80099fa:	4648      	mov	r0, r9
 80099fc:	f7f7 f9c2 	bl	8000d84 <__aeabi_fmul>
 8009a00:	2d1f      	cmp	r5, #31
 8009a02:	4606      	mov	r6, r0
 8009a04:	dc0e      	bgt.n	8009a24 <__ieee754_rem_pio2f+0x128>
 8009a06:	4a6c      	ldr	r2, [pc, #432]	@ (8009bb8 <__ieee754_rem_pio2f+0x2bc>)
 8009a08:	1e69      	subs	r1, r5, #1
 8009a0a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009a0e:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8009a12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d004      	beq.n	8009a24 <__ieee754_rem_pio2f+0x128>
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f7f7 f8a7 	bl	8000b70 <__aeabi_fsub>
 8009a22:	e00b      	b.n	8009a3c <__ieee754_rem_pio2f+0x140>
 8009a24:	4631      	mov	r1, r6
 8009a26:	4638      	mov	r0, r7
 8009a28:	f7f7 f8a2 	bl	8000b70 <__aeabi_fsub>
 8009a2c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009a30:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8009a34:	2b08      	cmp	r3, #8
 8009a36:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8009a3a:	dc01      	bgt.n	8009a40 <__ieee754_rem_pio2f+0x144>
 8009a3c:	6020      	str	r0, [r4, #0]
 8009a3e:	e026      	b.n	8009a8e <__ieee754_rem_pio2f+0x192>
 8009a40:	4959      	ldr	r1, [pc, #356]	@ (8009ba8 <__ieee754_rem_pio2f+0x2ac>)
 8009a42:	4648      	mov	r0, r9
 8009a44:	f7f7 f99e 	bl	8000d84 <__aeabi_fmul>
 8009a48:	4606      	mov	r6, r0
 8009a4a:	4601      	mov	r1, r0
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7f7 f88f 	bl	8000b70 <__aeabi_fsub>
 8009a52:	4601      	mov	r1, r0
 8009a54:	4680      	mov	r8, r0
 8009a56:	4638      	mov	r0, r7
 8009a58:	f7f7 f88a 	bl	8000b70 <__aeabi_fsub>
 8009a5c:	4631      	mov	r1, r6
 8009a5e:	f7f7 f887 	bl	8000b70 <__aeabi_fsub>
 8009a62:	4606      	mov	r6, r0
 8009a64:	4951      	ldr	r1, [pc, #324]	@ (8009bac <__ieee754_rem_pio2f+0x2b0>)
 8009a66:	4648      	mov	r0, r9
 8009a68:	f7f7 f98c 	bl	8000d84 <__aeabi_fmul>
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	f7f7 f87f 	bl	8000b70 <__aeabi_fsub>
 8009a72:	4601      	mov	r1, r0
 8009a74:	4606      	mov	r6, r0
 8009a76:	4640      	mov	r0, r8
 8009a78:	f7f7 f87a 	bl	8000b70 <__aeabi_fsub>
 8009a7c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009a80:	ebab 0b03 	sub.w	fp, fp, r3
 8009a84:	f1bb 0f19 	cmp.w	fp, #25
 8009a88:	dc18      	bgt.n	8009abc <__ieee754_rem_pio2f+0x1c0>
 8009a8a:	4647      	mov	r7, r8
 8009a8c:	6020      	str	r0, [r4, #0]
 8009a8e:	f8d4 8000 	ldr.w	r8, [r4]
 8009a92:	4638      	mov	r0, r7
 8009a94:	4641      	mov	r1, r8
 8009a96:	f7f7 f86b 	bl	8000b70 <__aeabi_fsub>
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	f7f7 f868 	bl	8000b70 <__aeabi_fsub>
 8009aa0:	f1ba 0f00 	cmp.w	sl, #0
 8009aa4:	6060      	str	r0, [r4, #4]
 8009aa6:	f6bf af56 	bge.w	8009956 <__ieee754_rem_pio2f+0x5a>
 8009aaa:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8009aae:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009ab2:	f8c4 8000 	str.w	r8, [r4]
 8009ab6:	6060      	str	r0, [r4, #4]
 8009ab8:	426d      	negs	r5, r5
 8009aba:	e74c      	b.n	8009956 <__ieee754_rem_pio2f+0x5a>
 8009abc:	493f      	ldr	r1, [pc, #252]	@ (8009bbc <__ieee754_rem_pio2f+0x2c0>)
 8009abe:	4648      	mov	r0, r9
 8009ac0:	f7f7 f960 	bl	8000d84 <__aeabi_fmul>
 8009ac4:	4606      	mov	r6, r0
 8009ac6:	4601      	mov	r1, r0
 8009ac8:	4640      	mov	r0, r8
 8009aca:	f7f7 f851 	bl	8000b70 <__aeabi_fsub>
 8009ace:	4601      	mov	r1, r0
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	f7f7 f84c 	bl	8000b70 <__aeabi_fsub>
 8009ad8:	4631      	mov	r1, r6
 8009ada:	f7f7 f849 	bl	8000b70 <__aeabi_fsub>
 8009ade:	4606      	mov	r6, r0
 8009ae0:	4937      	ldr	r1, [pc, #220]	@ (8009bc0 <__ieee754_rem_pio2f+0x2c4>)
 8009ae2:	4648      	mov	r0, r9
 8009ae4:	f7f7 f94e 	bl	8000d84 <__aeabi_fmul>
 8009ae8:	4631      	mov	r1, r6
 8009aea:	f7f7 f841 	bl	8000b70 <__aeabi_fsub>
 8009aee:	4606      	mov	r6, r0
 8009af0:	e793      	b.n	8009a1a <__ieee754_rem_pio2f+0x11e>
 8009af2:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8009af6:	d305      	bcc.n	8009b04 <__ieee754_rem_pio2f+0x208>
 8009af8:	4601      	mov	r1, r0
 8009afa:	f7f7 f839 	bl	8000b70 <__aeabi_fsub>
 8009afe:	6060      	str	r0, [r4, #4]
 8009b00:	6020      	str	r0, [r4, #0]
 8009b02:	e708      	b.n	8009916 <__ieee754_rem_pio2f+0x1a>
 8009b04:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8009b08:	3e86      	subs	r6, #134	@ 0x86
 8009b0a:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8009b0e:	4640      	mov	r0, r8
 8009b10:	f7f7 fafe 	bl	8001110 <__aeabi_f2iz>
 8009b14:	f7f7 f8e2 	bl	8000cdc <__aeabi_i2f>
 8009b18:	4601      	mov	r1, r0
 8009b1a:	9003      	str	r0, [sp, #12]
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	f7f7 f827 	bl	8000b70 <__aeabi_fsub>
 8009b22:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8009b26:	f7f7 f92d 	bl	8000d84 <__aeabi_fmul>
 8009b2a:	4607      	mov	r7, r0
 8009b2c:	f7f7 faf0 	bl	8001110 <__aeabi_f2iz>
 8009b30:	f7f7 f8d4 	bl	8000cdc <__aeabi_i2f>
 8009b34:	4601      	mov	r1, r0
 8009b36:	9004      	str	r0, [sp, #16]
 8009b38:	4605      	mov	r5, r0
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	f7f7 f818 	bl	8000b70 <__aeabi_fsub>
 8009b40:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8009b44:	f7f7 f91e 	bl	8000d84 <__aeabi_fmul>
 8009b48:	2100      	movs	r1, #0
 8009b4a:	9005      	str	r0, [sp, #20]
 8009b4c:	f7f7 faae 	bl	80010ac <__aeabi_fcmpeq>
 8009b50:	b1f0      	cbz	r0, 8009b90 <__ieee754_rem_pio2f+0x294>
 8009b52:	2100      	movs	r1, #0
 8009b54:	4628      	mov	r0, r5
 8009b56:	f7f7 faa9 	bl	80010ac <__aeabi_fcmpeq>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	bf14      	ite	ne
 8009b5e:	2301      	movne	r3, #1
 8009b60:	2302      	moveq	r3, #2
 8009b62:	4a18      	ldr	r2, [pc, #96]	@ (8009bc4 <__ieee754_rem_pio2f+0x2c8>)
 8009b64:	4621      	mov	r1, r4
 8009b66:	9201      	str	r2, [sp, #4]
 8009b68:	2202      	movs	r2, #2
 8009b6a:	a803      	add	r0, sp, #12
 8009b6c:	9200      	str	r2, [sp, #0]
 8009b6e:	4632      	mov	r2, r6
 8009b70:	f000 f82e 	bl	8009bd0 <__kernel_rem_pio2f>
 8009b74:	f1ba 0f00 	cmp.w	sl, #0
 8009b78:	4605      	mov	r5, r0
 8009b7a:	f6bf aeec 	bge.w	8009956 <__ieee754_rem_pio2f+0x5a>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	6863      	ldr	r3, [r4, #4]
 8009b88:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009b8c:	6063      	str	r3, [r4, #4]
 8009b8e:	e793      	b.n	8009ab8 <__ieee754_rem_pio2f+0x1bc>
 8009b90:	2303      	movs	r3, #3
 8009b92:	e7e6      	b.n	8009b62 <__ieee754_rem_pio2f+0x266>
 8009b94:	3f490fd8 	.word	0x3f490fd8
 8009b98:	4016cbe3 	.word	0x4016cbe3
 8009b9c:	3fc90f80 	.word	0x3fc90f80
 8009ba0:	3fc90fd0 	.word	0x3fc90fd0
 8009ba4:	37354443 	.word	0x37354443
 8009ba8:	37354400 	.word	0x37354400
 8009bac:	2e85a308 	.word	0x2e85a308
 8009bb0:	43490f80 	.word	0x43490f80
 8009bb4:	3f22f984 	.word	0x3f22f984
 8009bb8:	0800a658 	.word	0x0800a658
 8009bbc:	2e85a300 	.word	0x2e85a300
 8009bc0:	248d3132 	.word	0x248d3132
 8009bc4:	0800a6d8 	.word	0x0800a6d8

08009bc8 <fabsf>:
 8009bc8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009bcc:	4770      	bx	lr
	...

08009bd0 <__kernel_rem_pio2f>:
 8009bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd4:	b0db      	sub	sp, #364	@ 0x16c
 8009bd6:	9202      	str	r2, [sp, #8]
 8009bd8:	9304      	str	r3, [sp, #16]
 8009bda:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8009bdc:	4bad      	ldr	r3, [pc, #692]	@ (8009e94 <__kernel_rem_pio2f+0x2c4>)
 8009bde:	9005      	str	r0, [sp, #20]
 8009be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be4:	9100      	str	r1, [sp, #0]
 8009be6:	9301      	str	r3, [sp, #4]
 8009be8:	9b04      	ldr	r3, [sp, #16]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	9303      	str	r3, [sp, #12]
 8009bee:	9b02      	ldr	r3, [sp, #8]
 8009bf0:	1d1a      	adds	r2, r3, #4
 8009bf2:	f2c0 8099 	blt.w	8009d28 <__kernel_rem_pio2f+0x158>
 8009bf6:	1edc      	subs	r4, r3, #3
 8009bf8:	bf48      	it	mi
 8009bfa:	1d1c      	addmi	r4, r3, #4
 8009bfc:	10e4      	asrs	r4, r4, #3
 8009bfe:	2500      	movs	r5, #0
 8009c00:	f04f 0b00 	mov.w	fp, #0
 8009c04:	1c67      	adds	r7, r4, #1
 8009c06:	00fb      	lsls	r3, r7, #3
 8009c08:	9306      	str	r3, [sp, #24]
 8009c0a:	9b02      	ldr	r3, [sp, #8]
 8009c0c:	9a03      	ldr	r2, [sp, #12]
 8009c0e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8009c12:	9b01      	ldr	r3, [sp, #4]
 8009c14:	eba4 0802 	sub.w	r8, r4, r2
 8009c18:	eb03 0902 	add.w	r9, r3, r2
 8009c1c:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8009c1e:	ae1e      	add	r6, sp, #120	@ 0x78
 8009c20:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8009c24:	454d      	cmp	r5, r9
 8009c26:	f340 8081 	ble.w	8009d2c <__kernel_rem_pio2f+0x15c>
 8009c2a:	9a04      	ldr	r2, [sp, #16]
 8009c2c:	ab1e      	add	r3, sp, #120	@ 0x78
 8009c2e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8009c32:	f04f 0900 	mov.w	r9, #0
 8009c36:	2300      	movs	r3, #0
 8009c38:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 8009c3c:	9a01      	ldr	r2, [sp, #4]
 8009c3e:	4591      	cmp	r9, r2
 8009c40:	f340 809c 	ble.w	8009d7c <__kernel_rem_pio2f+0x1ac>
 8009c44:	4613      	mov	r3, r2
 8009c46:	aa0a      	add	r2, sp, #40	@ 0x28
 8009c48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c4c:	9308      	str	r3, [sp, #32]
 8009c4e:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8009c50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009c54:	9c01      	ldr	r4, [sp, #4]
 8009c56:	9307      	str	r3, [sp, #28]
 8009c58:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8009c5c:	4646      	mov	r6, r8
 8009c5e:	4625      	mov	r5, r4
 8009c60:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8009c64:	ab5a      	add	r3, sp, #360	@ 0x168
 8009c66:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009c6a:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8009c6e:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8009c72:	2d00      	cmp	r5, #0
 8009c74:	f300 8087 	bgt.w	8009d86 <__kernel_rem_pio2f+0x1b6>
 8009c78:	4639      	mov	r1, r7
 8009c7a:	4658      	mov	r0, fp
 8009c7c:	f000 fa48 	bl	800a110 <scalbnf>
 8009c80:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009c84:	4605      	mov	r5, r0
 8009c86:	f7f7 f87d 	bl	8000d84 <__aeabi_fmul>
 8009c8a:	f000 fa8d 	bl	800a1a8 <floorf>
 8009c8e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8009c92:	f7f7 f877 	bl	8000d84 <__aeabi_fmul>
 8009c96:	4601      	mov	r1, r0
 8009c98:	4628      	mov	r0, r5
 8009c9a:	f7f6 ff69 	bl	8000b70 <__aeabi_fsub>
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	f7f7 fa36 	bl	8001110 <__aeabi_f2iz>
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	f7f7 f819 	bl	8000cdc <__aeabi_i2f>
 8009caa:	4601      	mov	r1, r0
 8009cac:	4628      	mov	r0, r5
 8009cae:	f7f6 ff5f 	bl	8000b70 <__aeabi_fsub>
 8009cb2:	2f00      	cmp	r7, #0
 8009cb4:	4681      	mov	r9, r0
 8009cb6:	f340 8083 	ble.w	8009dc0 <__kernel_rem_pio2f+0x1f0>
 8009cba:	1e62      	subs	r2, r4, #1
 8009cbc:	ab0a      	add	r3, sp, #40	@ 0x28
 8009cbe:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8009cc2:	f1c7 0108 	rsb	r1, r7, #8
 8009cc6:	fa45 f301 	asr.w	r3, r5, r1
 8009cca:	441e      	add	r6, r3
 8009ccc:	408b      	lsls	r3, r1
 8009cce:	1aed      	subs	r5, r5, r3
 8009cd0:	ab0a      	add	r3, sp, #40	@ 0x28
 8009cd2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009cd6:	f1c7 0307 	rsb	r3, r7, #7
 8009cda:	411d      	asrs	r5, r3
 8009cdc:	2d00      	cmp	r5, #0
 8009cde:	dd7c      	ble.n	8009dda <__kernel_rem_pio2f+0x20a>
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4692      	mov	sl, r2
 8009ce4:	3601      	adds	r6, #1
 8009ce6:	4294      	cmp	r4, r2
 8009ce8:	f300 80ac 	bgt.w	8009e44 <__kernel_rem_pio2f+0x274>
 8009cec:	2f00      	cmp	r7, #0
 8009cee:	dd05      	ble.n	8009cfc <__kernel_rem_pio2f+0x12c>
 8009cf0:	2f01      	cmp	r7, #1
 8009cf2:	f000 80b8 	beq.w	8009e66 <__kernel_rem_pio2f+0x296>
 8009cf6:	2f02      	cmp	r7, #2
 8009cf8:	f000 80bf 	beq.w	8009e7a <__kernel_rem_pio2f+0x2aa>
 8009cfc:	2d02      	cmp	r5, #2
 8009cfe:	d16c      	bne.n	8009dda <__kernel_rem_pio2f+0x20a>
 8009d00:	4649      	mov	r1, r9
 8009d02:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009d06:	f7f6 ff33 	bl	8000b70 <__aeabi_fsub>
 8009d0a:	4681      	mov	r9, r0
 8009d0c:	f1ba 0f00 	cmp.w	sl, #0
 8009d10:	d063      	beq.n	8009dda <__kernel_rem_pio2f+0x20a>
 8009d12:	4639      	mov	r1, r7
 8009d14:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009d18:	f000 f9fa 	bl	800a110 <scalbnf>
 8009d1c:	4601      	mov	r1, r0
 8009d1e:	4648      	mov	r0, r9
 8009d20:	f7f6 ff26 	bl	8000b70 <__aeabi_fsub>
 8009d24:	4681      	mov	r9, r0
 8009d26:	e058      	b.n	8009dda <__kernel_rem_pio2f+0x20a>
 8009d28:	2400      	movs	r4, #0
 8009d2a:	e768      	b.n	8009bfe <__kernel_rem_pio2f+0x2e>
 8009d2c:	eb18 0f05 	cmn.w	r8, r5
 8009d30:	d407      	bmi.n	8009d42 <__kernel_rem_pio2f+0x172>
 8009d32:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8009d36:	f7f6 ffd1 	bl	8000cdc <__aeabi_i2f>
 8009d3a:	f846 0b04 	str.w	r0, [r6], #4
 8009d3e:	3501      	adds	r5, #1
 8009d40:	e770      	b.n	8009c24 <__kernel_rem_pio2f+0x54>
 8009d42:	4658      	mov	r0, fp
 8009d44:	e7f9      	b.n	8009d3a <__kernel_rem_pio2f+0x16a>
 8009d46:	9307      	str	r3, [sp, #28]
 8009d48:	9b05      	ldr	r3, [sp, #20]
 8009d4a:	f8da 1000 	ldr.w	r1, [sl]
 8009d4e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009d52:	f7f7 f817 	bl	8000d84 <__aeabi_fmul>
 8009d56:	4601      	mov	r1, r0
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f7f6 ff0b 	bl	8000b74 <__addsf3>
 8009d5e:	4606      	mov	r6, r0
 8009d60:	9b07      	ldr	r3, [sp, #28]
 8009d62:	f108 0801 	add.w	r8, r8, #1
 8009d66:	9a03      	ldr	r2, [sp, #12]
 8009d68:	f1aa 0a04 	sub.w	sl, sl, #4
 8009d6c:	4590      	cmp	r8, r2
 8009d6e:	ddea      	ble.n	8009d46 <__kernel_rem_pio2f+0x176>
 8009d70:	f84b 6b04 	str.w	r6, [fp], #4
 8009d74:	f109 0901 	add.w	r9, r9, #1
 8009d78:	3504      	adds	r5, #4
 8009d7a:	e75f      	b.n	8009c3c <__kernel_rem_pio2f+0x6c>
 8009d7c:	46aa      	mov	sl, r5
 8009d7e:	461e      	mov	r6, r3
 8009d80:	f04f 0800 	mov.w	r8, #0
 8009d84:	e7ef      	b.n	8009d66 <__kernel_rem_pio2f+0x196>
 8009d86:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8009d8a:	4658      	mov	r0, fp
 8009d8c:	f7f6 fffa 	bl	8000d84 <__aeabi_fmul>
 8009d90:	f7f7 f9be 	bl	8001110 <__aeabi_f2iz>
 8009d94:	f7f6 ffa2 	bl	8000cdc <__aeabi_i2f>
 8009d98:	4649      	mov	r1, r9
 8009d9a:	9009      	str	r0, [sp, #36]	@ 0x24
 8009d9c:	f7f6 fff2 	bl	8000d84 <__aeabi_fmul>
 8009da0:	4601      	mov	r1, r0
 8009da2:	4658      	mov	r0, fp
 8009da4:	f7f6 fee4 	bl	8000b70 <__aeabi_fsub>
 8009da8:	f7f7 f9b2 	bl	8001110 <__aeabi_f2iz>
 8009dac:	3d01      	subs	r5, #1
 8009dae:	f846 0b04 	str.w	r0, [r6], #4
 8009db2:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8009db6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009db8:	f7f6 fedc 	bl	8000b74 <__addsf3>
 8009dbc:	4683      	mov	fp, r0
 8009dbe:	e758      	b.n	8009c72 <__kernel_rem_pio2f+0xa2>
 8009dc0:	d105      	bne.n	8009dce <__kernel_rem_pio2f+0x1fe>
 8009dc2:	1e63      	subs	r3, r4, #1
 8009dc4:	aa0a      	add	r2, sp, #40	@ 0x28
 8009dc6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8009dca:	11ed      	asrs	r5, r5, #7
 8009dcc:	e786      	b.n	8009cdc <__kernel_rem_pio2f+0x10c>
 8009dce:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009dd2:	f7f7 f989 	bl	80010e8 <__aeabi_fcmpge>
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	bb90      	cbnz	r0, 8009e40 <__kernel_rem_pio2f+0x270>
 8009dda:	2100      	movs	r1, #0
 8009ddc:	4648      	mov	r0, r9
 8009dde:	f7f7 f965 	bl	80010ac <__aeabi_fcmpeq>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f000 8090 	beq.w	8009f08 <__kernel_rem_pio2f+0x338>
 8009de8:	2200      	movs	r2, #0
 8009dea:	1e63      	subs	r3, r4, #1
 8009dec:	9901      	ldr	r1, [sp, #4]
 8009dee:	428b      	cmp	r3, r1
 8009df0:	da4a      	bge.n	8009e88 <__kernel_rem_pio2f+0x2b8>
 8009df2:	2a00      	cmp	r2, #0
 8009df4:	d076      	beq.n	8009ee4 <__kernel_rem_pio2f+0x314>
 8009df6:	3c01      	subs	r4, #1
 8009df8:	ab0a      	add	r3, sp, #40	@ 0x28
 8009dfa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009dfe:	3f08      	subs	r7, #8
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d0f8      	beq.n	8009df6 <__kernel_rem_pio2f+0x226>
 8009e04:	4639      	mov	r1, r7
 8009e06:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009e0a:	f000 f981 	bl	800a110 <scalbnf>
 8009e0e:	46a2      	mov	sl, r4
 8009e10:	4607      	mov	r7, r0
 8009e12:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8009e16:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8009e1a:	f1ba 0f00 	cmp.w	sl, #0
 8009e1e:	f280 80a1 	bge.w	8009f64 <__kernel_rem_pio2f+0x394>
 8009e22:	4627      	mov	r7, r4
 8009e24:	2200      	movs	r2, #0
 8009e26:	2f00      	cmp	r7, #0
 8009e28:	f2c0 80cb 	blt.w	8009fc2 <__kernel_rem_pio2f+0x3f2>
 8009e2c:	a946      	add	r1, sp, #280	@ 0x118
 8009e2e:	4690      	mov	r8, r2
 8009e30:	f04f 0a00 	mov.w	sl, #0
 8009e34:	4b18      	ldr	r3, [pc, #96]	@ (8009e98 <__kernel_rem_pio2f+0x2c8>)
 8009e36:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8009e3a:	eba4 0907 	sub.w	r9, r4, r7
 8009e3e:	e0b4      	b.n	8009faa <__kernel_rem_pio2f+0x3da>
 8009e40:	2502      	movs	r5, #2
 8009e42:	e74d      	b.n	8009ce0 <__kernel_rem_pio2f+0x110>
 8009e44:	f858 3b04 	ldr.w	r3, [r8], #4
 8009e48:	f1ba 0f00 	cmp.w	sl, #0
 8009e4c:	d108      	bne.n	8009e60 <__kernel_rem_pio2f+0x290>
 8009e4e:	b123      	cbz	r3, 8009e5a <__kernel_rem_pio2f+0x28a>
 8009e50:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8009e54:	f848 3c04 	str.w	r3, [r8, #-4]
 8009e58:	2301      	movs	r3, #1
 8009e5a:	469a      	mov	sl, r3
 8009e5c:	3201      	adds	r2, #1
 8009e5e:	e742      	b.n	8009ce6 <__kernel_rem_pio2f+0x116>
 8009e60:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8009e64:	e7f6      	b.n	8009e54 <__kernel_rem_pio2f+0x284>
 8009e66:	1e62      	subs	r2, r4, #1
 8009e68:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e72:	a90a      	add	r1, sp, #40	@ 0x28
 8009e74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009e78:	e740      	b.n	8009cfc <__kernel_rem_pio2f+0x12c>
 8009e7a:	1e62      	subs	r2, r4, #1
 8009e7c:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e86:	e7f4      	b.n	8009e72 <__kernel_rem_pio2f+0x2a2>
 8009e88:	a90a      	add	r1, sp, #40	@ 0x28
 8009e8a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	430a      	orrs	r2, r1
 8009e92:	e7ab      	b.n	8009dec <__kernel_rem_pio2f+0x21c>
 8009e94:	0800aa1c 	.word	0x0800aa1c
 8009e98:	0800a9f0 	.word	0x0800a9f0
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009ea2:	2900      	cmp	r1, #0
 8009ea4:	d0fa      	beq.n	8009e9c <__kernel_rem_pio2f+0x2cc>
 8009ea6:	9a04      	ldr	r2, [sp, #16]
 8009ea8:	a91e      	add	r1, sp, #120	@ 0x78
 8009eaa:	18a2      	adds	r2, r4, r2
 8009eac:	1c66      	adds	r6, r4, #1
 8009eae:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8009eb2:	441c      	add	r4, r3
 8009eb4:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8009eb8:	42b4      	cmp	r4, r6
 8009eba:	f6ff aecd 	blt.w	8009c58 <__kernel_rem_pio2f+0x88>
 8009ebe:	9b07      	ldr	r3, [sp, #28]
 8009ec0:	46ab      	mov	fp, r5
 8009ec2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009ec6:	f7f6 ff09 	bl	8000cdc <__aeabi_i2f>
 8009eca:	f04f 0a00 	mov.w	sl, #0
 8009ece:	f04f 0800 	mov.w	r8, #0
 8009ed2:	6028      	str	r0, [r5, #0]
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	459a      	cmp	sl, r3
 8009ed8:	dd07      	ble.n	8009eea <__kernel_rem_pio2f+0x31a>
 8009eda:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8009ede:	3504      	adds	r5, #4
 8009ee0:	3601      	adds	r6, #1
 8009ee2:	e7e9      	b.n	8009eb8 <__kernel_rem_pio2f+0x2e8>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	9a08      	ldr	r2, [sp, #32]
 8009ee8:	e7d9      	b.n	8009e9e <__kernel_rem_pio2f+0x2ce>
 8009eea:	9b05      	ldr	r3, [sp, #20]
 8009eec:	f85b 0904 	ldr.w	r0, [fp], #-4
 8009ef0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8009ef4:	f7f6 ff46 	bl	8000d84 <__aeabi_fmul>
 8009ef8:	4601      	mov	r1, r0
 8009efa:	4640      	mov	r0, r8
 8009efc:	f7f6 fe3a 	bl	8000b74 <__addsf3>
 8009f00:	f10a 0a01 	add.w	sl, sl, #1
 8009f04:	4680      	mov	r8, r0
 8009f06:	e7e5      	b.n	8009ed4 <__kernel_rem_pio2f+0x304>
 8009f08:	9b06      	ldr	r3, [sp, #24]
 8009f0a:	9a02      	ldr	r2, [sp, #8]
 8009f0c:	4648      	mov	r0, r9
 8009f0e:	1a99      	subs	r1, r3, r2
 8009f10:	f000 f8fe 	bl	800a110 <scalbnf>
 8009f14:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8009f18:	4680      	mov	r8, r0
 8009f1a:	f7f7 f8e5 	bl	80010e8 <__aeabi_fcmpge>
 8009f1e:	b1f8      	cbz	r0, 8009f60 <__kernel_rem_pio2f+0x390>
 8009f20:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8009f24:	4640      	mov	r0, r8
 8009f26:	f7f6 ff2d 	bl	8000d84 <__aeabi_fmul>
 8009f2a:	f7f7 f8f1 	bl	8001110 <__aeabi_f2iz>
 8009f2e:	f7f6 fed5 	bl	8000cdc <__aeabi_i2f>
 8009f32:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8009f36:	4681      	mov	r9, r0
 8009f38:	f7f6 ff24 	bl	8000d84 <__aeabi_fmul>
 8009f3c:	4601      	mov	r1, r0
 8009f3e:	4640      	mov	r0, r8
 8009f40:	f7f6 fe16 	bl	8000b70 <__aeabi_fsub>
 8009f44:	f7f7 f8e4 	bl	8001110 <__aeabi_f2iz>
 8009f48:	ab0a      	add	r3, sp, #40	@ 0x28
 8009f4a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009f4e:	4648      	mov	r0, r9
 8009f50:	3401      	adds	r4, #1
 8009f52:	3708      	adds	r7, #8
 8009f54:	f7f7 f8dc 	bl	8001110 <__aeabi_f2iz>
 8009f58:	ab0a      	add	r3, sp, #40	@ 0x28
 8009f5a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009f5e:	e751      	b.n	8009e04 <__kernel_rem_pio2f+0x234>
 8009f60:	4640      	mov	r0, r8
 8009f62:	e7f7      	b.n	8009f54 <__kernel_rem_pio2f+0x384>
 8009f64:	ab0a      	add	r3, sp, #40	@ 0x28
 8009f66:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009f6a:	f7f6 feb7 	bl	8000cdc <__aeabi_i2f>
 8009f6e:	4639      	mov	r1, r7
 8009f70:	f7f6 ff08 	bl	8000d84 <__aeabi_fmul>
 8009f74:	4649      	mov	r1, r9
 8009f76:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	f7f6 ff02 	bl	8000d84 <__aeabi_fmul>
 8009f80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f84:	4607      	mov	r7, r0
 8009f86:	e748      	b.n	8009e1a <__kernel_rem_pio2f+0x24a>
 8009f88:	f853 0b04 	ldr.w	r0, [r3], #4
 8009f8c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8009f90:	9203      	str	r2, [sp, #12]
 8009f92:	9302      	str	r3, [sp, #8]
 8009f94:	f7f6 fef6 	bl	8000d84 <__aeabi_fmul>
 8009f98:	4601      	mov	r1, r0
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	f7f6 fdea 	bl	8000b74 <__addsf3>
 8009fa0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	f10a 0a01 	add.w	sl, sl, #1
 8009faa:	9901      	ldr	r1, [sp, #4]
 8009fac:	458a      	cmp	sl, r1
 8009fae:	dc01      	bgt.n	8009fb4 <__kernel_rem_pio2f+0x3e4>
 8009fb0:	45d1      	cmp	r9, sl
 8009fb2:	dae9      	bge.n	8009f88 <__kernel_rem_pio2f+0x3b8>
 8009fb4:	ab5a      	add	r3, sp, #360	@ 0x168
 8009fb6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8009fba:	f849 8ca0 	str.w	r8, [r9, #-160]
 8009fbe:	3f01      	subs	r7, #1
 8009fc0:	e731      	b.n	8009e26 <__kernel_rem_pio2f+0x256>
 8009fc2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	dc07      	bgt.n	8009fd8 <__kernel_rem_pio2f+0x408>
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	dc4e      	bgt.n	800a06a <__kernel_rem_pio2f+0x49a>
 8009fcc:	d02e      	beq.n	800a02c <__kernel_rem_pio2f+0x45c>
 8009fce:	f006 0007 	and.w	r0, r6, #7
 8009fd2:	b05b      	add	sp, #364	@ 0x16c
 8009fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d1f7      	bne.n	8009fce <__kernel_rem_pio2f+0x3fe>
 8009fde:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8009fe2:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8009fe6:	46b8      	mov	r8, r7
 8009fe8:	46a2      	mov	sl, r4
 8009fea:	f1ba 0f00 	cmp.w	sl, #0
 8009fee:	dc49      	bgt.n	800a084 <__kernel_rem_pio2f+0x4b4>
 8009ff0:	46a1      	mov	r9, r4
 8009ff2:	f1b9 0f01 	cmp.w	r9, #1
 8009ff6:	dc60      	bgt.n	800a0ba <__kernel_rem_pio2f+0x4ea>
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	2c01      	cmp	r4, #1
 8009ffc:	dc76      	bgt.n	800a0ec <__kernel_rem_pio2f+0x51c>
 8009ffe:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800a000:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800a002:	2d00      	cmp	r5, #0
 800a004:	d178      	bne.n	800a0f8 <__kernel_rem_pio2f+0x528>
 800a006:	9900      	ldr	r1, [sp, #0]
 800a008:	600a      	str	r2, [r1, #0]
 800a00a:	460a      	mov	r2, r1
 800a00c:	604b      	str	r3, [r1, #4]
 800a00e:	6090      	str	r0, [r2, #8]
 800a010:	e7dd      	b.n	8009fce <__kernel_rem_pio2f+0x3fe>
 800a012:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800a016:	f7f6 fdad 	bl	8000b74 <__addsf3>
 800a01a:	3c01      	subs	r4, #1
 800a01c:	2c00      	cmp	r4, #0
 800a01e:	daf8      	bge.n	800a012 <__kernel_rem_pio2f+0x442>
 800a020:	b10d      	cbz	r5, 800a026 <__kernel_rem_pio2f+0x456>
 800a022:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a026:	9b00      	ldr	r3, [sp, #0]
 800a028:	6018      	str	r0, [r3, #0]
 800a02a:	e7d0      	b.n	8009fce <__kernel_rem_pio2f+0x3fe>
 800a02c:	2000      	movs	r0, #0
 800a02e:	af32      	add	r7, sp, #200	@ 0xc8
 800a030:	e7f4      	b.n	800a01c <__kernel_rem_pio2f+0x44c>
 800a032:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800a036:	f7f6 fd9d 	bl	8000b74 <__addsf3>
 800a03a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a03e:	f1b8 0f00 	cmp.w	r8, #0
 800a042:	daf6      	bge.n	800a032 <__kernel_rem_pio2f+0x462>
 800a044:	b1ad      	cbz	r5, 800a072 <__kernel_rem_pio2f+0x4a2>
 800a046:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800a04a:	9a00      	ldr	r2, [sp, #0]
 800a04c:	4601      	mov	r1, r0
 800a04e:	6013      	str	r3, [r2, #0]
 800a050:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800a052:	f7f6 fd8d 	bl	8000b70 <__aeabi_fsub>
 800a056:	f04f 0801 	mov.w	r8, #1
 800a05a:	4544      	cmp	r4, r8
 800a05c:	da0b      	bge.n	800a076 <__kernel_rem_pio2f+0x4a6>
 800a05e:	b10d      	cbz	r5, 800a064 <__kernel_rem_pio2f+0x494>
 800a060:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a064:	9b00      	ldr	r3, [sp, #0]
 800a066:	6058      	str	r0, [r3, #4]
 800a068:	e7b1      	b.n	8009fce <__kernel_rem_pio2f+0x3fe>
 800a06a:	46a0      	mov	r8, r4
 800a06c:	2000      	movs	r0, #0
 800a06e:	af32      	add	r7, sp, #200	@ 0xc8
 800a070:	e7e5      	b.n	800a03e <__kernel_rem_pio2f+0x46e>
 800a072:	4603      	mov	r3, r0
 800a074:	e7e9      	b.n	800a04a <__kernel_rem_pio2f+0x47a>
 800a076:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800a07a:	f7f6 fd7b 	bl	8000b74 <__addsf3>
 800a07e:	f108 0801 	add.w	r8, r8, #1
 800a082:	e7ea      	b.n	800a05a <__kernel_rem_pio2f+0x48a>
 800a084:	f8d8 3000 	ldr.w	r3, [r8]
 800a088:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	9302      	str	r3, [sp, #8]
 800a092:	9201      	str	r2, [sp, #4]
 800a094:	f7f6 fd6e 	bl	8000b74 <__addsf3>
 800a098:	9a01      	ldr	r2, [sp, #4]
 800a09a:	4601      	mov	r1, r0
 800a09c:	4681      	mov	r9, r0
 800a09e:	4610      	mov	r0, r2
 800a0a0:	f7f6 fd66 	bl	8000b70 <__aeabi_fsub>
 800a0a4:	9b02      	ldr	r3, [sp, #8]
 800a0a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f7f6 fd62 	bl	8000b74 <__addsf3>
 800a0b0:	f848 0904 	str.w	r0, [r8], #-4
 800a0b4:	f8c8 9000 	str.w	r9, [r8]
 800a0b8:	e797      	b.n	8009fea <__kernel_rem_pio2f+0x41a>
 800a0ba:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800a0be:	f8d7 a000 	ldr.w	sl, [r7]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	4651      	mov	r1, sl
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	f7f6 fd54 	bl	8000b74 <__addsf3>
 800a0cc:	9b01      	ldr	r3, [sp, #4]
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	4680      	mov	r8, r0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7f6 fd4c 	bl	8000b70 <__aeabi_fsub>
 800a0d8:	4651      	mov	r1, sl
 800a0da:	f7f6 fd4b 	bl	8000b74 <__addsf3>
 800a0de:	f847 0904 	str.w	r0, [r7], #-4
 800a0e2:	f109 39ff 	add.w	r9, r9, #4294967295
 800a0e6:	f8c7 8000 	str.w	r8, [r7]
 800a0ea:	e782      	b.n	8009ff2 <__kernel_rem_pio2f+0x422>
 800a0ec:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800a0f0:	f7f6 fd40 	bl	8000b74 <__addsf3>
 800a0f4:	3c01      	subs	r4, #1
 800a0f6:	e780      	b.n	8009ffa <__kernel_rem_pio2f+0x42a>
 800a0f8:	9900      	ldr	r1, [sp, #0]
 800a0fa:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800a0fe:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a102:	600a      	str	r2, [r1, #0]
 800a104:	604b      	str	r3, [r1, #4]
 800a106:	460a      	mov	r2, r1
 800a108:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a10c:	e77f      	b.n	800a00e <__kernel_rem_pio2f+0x43e>
 800a10e:	bf00      	nop

0800a110 <scalbnf>:
 800a110:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4603      	mov	r3, r0
 800a118:	460d      	mov	r5, r1
 800a11a:	4604      	mov	r4, r0
 800a11c:	d02e      	beq.n	800a17c <scalbnf+0x6c>
 800a11e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a122:	d304      	bcc.n	800a12e <scalbnf+0x1e>
 800a124:	4601      	mov	r1, r0
 800a126:	f7f6 fd25 	bl	8000b74 <__addsf3>
 800a12a:	4603      	mov	r3, r0
 800a12c:	e026      	b.n	800a17c <scalbnf+0x6c>
 800a12e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800a132:	d118      	bne.n	800a166 <scalbnf+0x56>
 800a134:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800a138:	f7f6 fe24 	bl	8000d84 <__aeabi_fmul>
 800a13c:	4a17      	ldr	r2, [pc, #92]	@ (800a19c <scalbnf+0x8c>)
 800a13e:	4603      	mov	r3, r0
 800a140:	4295      	cmp	r5, r2
 800a142:	db0c      	blt.n	800a15e <scalbnf+0x4e>
 800a144:	4604      	mov	r4, r0
 800a146:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a14a:	3a19      	subs	r2, #25
 800a14c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a150:	428d      	cmp	r5, r1
 800a152:	dd0a      	ble.n	800a16a <scalbnf+0x5a>
 800a154:	4912      	ldr	r1, [pc, #72]	@ (800a1a0 <scalbnf+0x90>)
 800a156:	4618      	mov	r0, r3
 800a158:	f361 001e 	bfi	r0, r1, #0, #31
 800a15c:	e000      	b.n	800a160 <scalbnf+0x50>
 800a15e:	4911      	ldr	r1, [pc, #68]	@ (800a1a4 <scalbnf+0x94>)
 800a160:	f7f6 fe10 	bl	8000d84 <__aeabi_fmul>
 800a164:	e7e1      	b.n	800a12a <scalbnf+0x1a>
 800a166:	0dd2      	lsrs	r2, r2, #23
 800a168:	e7f0      	b.n	800a14c <scalbnf+0x3c>
 800a16a:	1951      	adds	r1, r2, r5
 800a16c:	29fe      	cmp	r1, #254	@ 0xfe
 800a16e:	dcf1      	bgt.n	800a154 <scalbnf+0x44>
 800a170:	2900      	cmp	r1, #0
 800a172:	dd05      	ble.n	800a180 <scalbnf+0x70>
 800a174:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800a178:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800a17c:	4618      	mov	r0, r3
 800a17e:	bd38      	pop	{r3, r4, r5, pc}
 800a180:	f111 0f16 	cmn.w	r1, #22
 800a184:	da01      	bge.n	800a18a <scalbnf+0x7a>
 800a186:	4907      	ldr	r1, [pc, #28]	@ (800a1a4 <scalbnf+0x94>)
 800a188:	e7e5      	b.n	800a156 <scalbnf+0x46>
 800a18a:	f101 0019 	add.w	r0, r1, #25
 800a18e:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800a192:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800a196:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800a19a:	e7e1      	b.n	800a160 <scalbnf+0x50>
 800a19c:	ffff3cb0 	.word	0xffff3cb0
 800a1a0:	7149f2ca 	.word	0x7149f2ca
 800a1a4:	0da24260 	.word	0x0da24260

0800a1a8 <floorf>:
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800a1ae:	3d7f      	subs	r5, #127	@ 0x7f
 800a1b0:	2d16      	cmp	r5, #22
 800a1b2:	4601      	mov	r1, r0
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800a1ba:	dc26      	bgt.n	800a20a <floorf+0x62>
 800a1bc:	2d00      	cmp	r5, #0
 800a1be:	da0f      	bge.n	800a1e0 <floorf+0x38>
 800a1c0:	4917      	ldr	r1, [pc, #92]	@ (800a220 <floorf+0x78>)
 800a1c2:	f7f6 fcd7 	bl	8000b74 <__addsf3>
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	f7f6 ff98 	bl	80010fc <__aeabi_fcmpgt>
 800a1cc:	b130      	cbz	r0, 800a1dc <floorf+0x34>
 800a1ce:	2c00      	cmp	r4, #0
 800a1d0:	da23      	bge.n	800a21a <floorf+0x72>
 800a1d2:	2e00      	cmp	r6, #0
 800a1d4:	4c13      	ldr	r4, [pc, #76]	@ (800a224 <floorf+0x7c>)
 800a1d6:	bf08      	it	eq
 800a1d8:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a1dc:	4621      	mov	r1, r4
 800a1de:	e01a      	b.n	800a216 <floorf+0x6e>
 800a1e0:	4e11      	ldr	r6, [pc, #68]	@ (800a228 <floorf+0x80>)
 800a1e2:	412e      	asrs	r6, r5
 800a1e4:	4230      	tst	r0, r6
 800a1e6:	d016      	beq.n	800a216 <floorf+0x6e>
 800a1e8:	490d      	ldr	r1, [pc, #52]	@ (800a220 <floorf+0x78>)
 800a1ea:	f7f6 fcc3 	bl	8000b74 <__addsf3>
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	f7f6 ff84 	bl	80010fc <__aeabi_fcmpgt>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d0f1      	beq.n	800a1dc <floorf+0x34>
 800a1f8:	2c00      	cmp	r4, #0
 800a1fa:	bfbe      	ittt	lt
 800a1fc:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800a200:	412b      	asrlt	r3, r5
 800a202:	18e4      	addlt	r4, r4, r3
 800a204:	ea24 0406 	bic.w	r4, r4, r6
 800a208:	e7e8      	b.n	800a1dc <floorf+0x34>
 800a20a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800a20e:	d302      	bcc.n	800a216 <floorf+0x6e>
 800a210:	f7f6 fcb0 	bl	8000b74 <__addsf3>
 800a214:	4601      	mov	r1, r0
 800a216:	4608      	mov	r0, r1
 800a218:	bd70      	pop	{r4, r5, r6, pc}
 800a21a:	2400      	movs	r4, #0
 800a21c:	e7de      	b.n	800a1dc <floorf+0x34>
 800a21e:	bf00      	nop
 800a220:	7149f2ca 	.word	0x7149f2ca
 800a224:	bf800000 	.word	0xbf800000
 800a228:	007fffff 	.word	0x007fffff

0800a22c <_init>:
 800a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22e:	bf00      	nop
 800a230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a232:	bc08      	pop	{r3}
 800a234:	469e      	mov	lr, r3
 800a236:	4770      	bx	lr

0800a238 <_fini>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	bf00      	nop
 800a23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23e:	bc08      	pop	{r3}
 800a240:	469e      	mov	lr, r3
 800a242:	4770      	bx	lr
