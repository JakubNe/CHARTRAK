
CHARTRAK2v3_controllerRETARGETED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009688  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  08009798  08009798  00019798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f34  08009f34  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009f34  08009f34  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f34  08009f34  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f34  08009f34  00019f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f38  08009f38  00019f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001d8  0800a114  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  0800a114  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010551  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c1e  00000000  00000000  00030795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  000333b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b30  00000000  00000000  00034230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199e1  00000000  00000000  00034d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013590  00000000  00000000  0004e741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e0f4  00000000  00000000  00061cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004dd8  00000000  00000000  000efdc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f4ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009780 	.word	0x08009780

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08009780 	.word	0x08009780

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr
 800115c:	0000      	movs	r0, r0
	...

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b095      	sub	sp, #84	; 0x54
 8001164:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f000 fd5f 	bl	8001c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f000 f8e7 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116e:	f000 fa0d 	bl	800158c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001172:	f000 f93f 	bl	80013f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001176:	f000 f97b 	bl	8001470 <MX_I2C1_Init>
  MX_SPI1_Init();
 800117a:	f000 f9a7 	bl	80014cc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800117e:	f000 f9db 	bl	8001538 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  	//GPIO SETUP
    HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001188:	485d      	ldr	r0, [pc, #372]	; (8001300 <main+0x1a0>)
 800118a:	f001 fb40 	bl	800280e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 800118e:	2201      	movs	r2, #1
 8001190:	2110      	movs	r1, #16
 8001192:	485c      	ldr	r0, [pc, #368]	; (8001304 <main+0x1a4>)
 8001194:	f001 fb3b 	bl	800280e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800119e:	4858      	ldr	r0, [pc, #352]	; (8001300 <main+0x1a0>)
 80011a0:	f001 fb35 	bl	800280e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, Voltage_output);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011aa:	4857      	ldr	r0, [pc, #348]	; (8001308 <main+0x1a8>)
 80011ac:	f001 fb2f 	bl	800280e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2120      	movs	r1, #32
 80011b4:	4854      	ldr	r0, [pc, #336]	; (8001308 <main+0x1a8>)
 80011b6:	f001 fb2a 	bl	800280e <HAL_GPIO_WritePin>

    // ADC board expander setup
    TCA_Init(0b0100001, hi2c1);
 80011ba:	4c54      	ldr	r4, [pc, #336]	; (800130c <main+0x1ac>)
 80011bc:	4668      	mov	r0, sp
 80011be:	f104 030c 	add.w	r3, r4, #12
 80011c2:	2248      	movs	r2, #72	; 0x48
 80011c4:	4619      	mov	r1, r3
 80011c6:	f005 fed2 	bl	8006f6e <memcpy>
 80011ca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80011ce:	2021      	movs	r0, #33	; 0x21
 80011d0:	f004 ff0a 	bl	8005fe8 <TCA_Init>

    TCA_PinMode(P07, 0);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2007      	movs	r0, #7
 80011d8:	f004 ff2c 	bl	8006034 <TCA_PinMode>
    TCA_PinMode(P11, 0);
 80011dc:	2100      	movs	r1, #0
 80011de:	2009      	movs	r0, #9
 80011e0:	f004 ff28 	bl	8006034 <TCA_PinMode>
    TCA_PinMode(P12, 0);
 80011e4:	2100      	movs	r1, #0
 80011e6:	200a      	movs	r0, #10
 80011e8:	f004 ff24 	bl	8006034 <TCA_PinMode>

    TCA_WritePin(P07, 1);
 80011ec:	2101      	movs	r1, #1
 80011ee:	2007      	movs	r0, #7
 80011f0:	f004 ff78 	bl	80060e4 <TCA_WritePin>
    TCA_WritePin(P11, 0);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2009      	movs	r0, #9
 80011f8:	f004 ff74 	bl	80060e4 <TCA_WritePin>
    TCA_WritePin(P12, 0);
 80011fc:	2100      	movs	r1, #0
 80011fe:	200a      	movs	r0, #10
 8001200:	f004 ff70 	bl	80060e4 <TCA_WritePin>

    // High-speed DAC setup
    DACREF(0.0);
 8001204:	f04f 0000 	mov.w	r0, #0
 8001208:	f004 fd24 	bl	8005c54 <DACREF>
    DACOFFS(0.0);
 800120c:	f04f 0000 	mov.w	r0, #0
 8001210:	f004 fd80 	bl	8005d14 <DACOFFS>

    // High-speed ADC setup
    ADCREF(2.0);
 8001214:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001218:	f004 fde4 	bl	8005de4 <ADCREF>
    ADCOFFS(0.0);
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	f004 fe3c 	bl	8005e9c <ADCOFFS>

    // RS485 receive interrupt setup
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 8001224:	2220      	movs	r2, #32
 8001226:	493a      	ldr	r1, [pc, #232]	; (8001310 <main+0x1b0>)
 8001228:	483a      	ldr	r0, [pc, #232]	; (8001314 <main+0x1b4>)
 800122a:	f003 fad6 	bl	80047da <HAL_UARTEx_ReceiveToIdle_IT>

    //SPARTAN3 SETUP
    HAL_Delay(100);
 800122e:	2064      	movs	r0, #100	; 0x64
 8001230:	f000 fd5c 	bl	8001cec <HAL_Delay>
    LOLA_Reset();
 8001234:	f004 fbe8 	bl	8005a08 <LOLA_Reset>

    RS485_Transmit("awaiting FPGA config\r\n");
 8001238:	4837      	ldr	r0, [pc, #220]	; (8001318 <main+0x1b8>)
 800123a:	f004 fe97 	bl	8005f6c <RS485_Transmit>
    LOLA_Init(JTAG, 50);
 800123e:	2132      	movs	r1, #50	; 0x32
 8001240:	2006      	movs	r0, #6
 8001242:	f004 faff 	bl	8005844 <LOLA_Init>
    RS485_Transmit("FPGA config done\r\n");
 8001246:	4835      	ldr	r0, [pc, #212]	; (800131c <main+0x1bc>)
 8001248:	f004 fe90 	bl	8005f6c <RS485_Transmit>

    //CharTrak setup
    CHT1.Enable = 0;
 800124c:	4b34      	ldr	r3, [pc, #208]	; (8001320 <main+0x1c0>)
 800124e:	2200      	movs	r2, #0
 8001250:	705a      	strb	r2, [r3, #1]
    CHT1.characteristic = Open;
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <main+0x1c0>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
    CHT1.Upp = 0;
 8001258:	4b31      	ldr	r3, [pc, #196]	; (8001320 <main+0x1c0>)
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	605a      	str	r2, [r3, #4]

    // Arbitrary waveform generator setup
    AWG1.Enable = 0;
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <main+0x1c4>)
 8001262:	2200      	movs	r2, #0
 8001264:	705a      	strb	r2, [r3, #1]
    AWG1.waveform = Sine;
 8001266:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <main+0x1c4>)
 8001268:	2202      	movs	r2, #2
 800126a:	701a      	strb	r2, [r3, #0]
    AWG1.Uavg = 0.0;
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <main+0x1c4>)
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
    AWG1.Upp = 5.0;
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <main+0x1c4>)
 8001276:	4a2c      	ldr	r2, [pc, #176]	; (8001328 <main+0x1c8>)
 8001278:	609a      	str	r2, [r3, #8]
    AWG1.DutyCycle = 20.0;
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <main+0x1c4>)
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <main+0x1cc>)
 800127e:	60da      	str	r2, [r3, #12]
    AWG1.Freq = 332.0;
 8001280:	4928      	ldr	r1, [pc, #160]	; (8001324 <main+0x1c4>)
 8001282:	a31b      	add	r3, pc, #108	; (adr r3, 80012f0 <main+0x190>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	e9c1 2304 	strd	r2, r3, [r1, #16]

    // Noise generator setup
    NOISE1.Enable = 0;
 800128c:	4b28      	ldr	r3, [pc, #160]	; (8001330 <main+0x1d0>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
    NOISE1.Freq = 10000.0;
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <main+0x1d0>)
 8001294:	4a27      	ldr	r2, [pc, #156]	; (8001334 <main+0x1d4>)
 8001296:	609a      	str	r2, [r3, #8]
    NOISE1.Upp = 1.0;
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <main+0x1d0>)
 800129a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800129e:	605a      	str	r2, [r3, #4]
    NOISE1.Seed = 0x800f000f000f0001;
 80012a0:	4923      	ldr	r1, [pc, #140]	; (8001330 <main+0x1d0>)
 80012a2:	a315      	add	r3, pc, #84	; (adr r3, 80012f8 <main+0x198>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	e9c1 2304 	strd	r2, r3, [r1, #16]

    LOLA_enable_features(ALL_EN, 0); // disable all features
 80012ac:	2100      	movs	r1, #0
 80012ae:	f04f 30ff 	mov.w	r0, #4294967295
 80012b2:	f004 fbbf 	bl	8005a34 <LOLA_enable_features>
    LOLA_SET_MAX_AMPLITUDE(6.0);
 80012b6:	4820      	ldr	r0, [pc, #128]	; (8001338 <main+0x1d8>)
 80012b8:	f004 fc5a 	bl	8005b70 <LOLA_SET_MAX_AMPLITUDE>
    DAC_DIRECT_DATA(0.0);
 80012bc:	f04f 0000 	mov.w	r0, #0
 80012c0:	f004 fc80 	bl	8005bc4 <DAC_DIRECT_DATA>
    AWG_Load_Waveform(AWG1);
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <main+0x1c4>)
 80012c6:	466c      	mov	r4, sp
 80012c8:	f103 0210 	add.w	r2, r3, #16
 80012cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80012d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d6:	f004 f85b 	bl	8005390 <AWG_Load_Waveform>
	  //AWG_Load_Waveform(AWG1);
	  //LOLA_enable_features(ALL_EN, 0); // disable
	  //LOLA_enable_features(AWG_EN, 0);
	  //AWG_Load_Waveform(AWG1);
	  //LOLA_enable_features(AWG_EN, 1);
	  HAL_Delay(100);
 80012da:	2064      	movs	r0, #100	; 0x64
 80012dc:	f000 fd06 	bl	8001cec <HAL_Delay>
	  uint16_t dataVolake = LOLA_GET_FIRMWAREID();
 80012e0:	f004 fc06 	bl	8005af0 <LOLA_GET_FIRMWAREID>
 80012e4:	4603      	mov	r3, r0
 80012e6:	80fb      	strh	r3, [r7, #6]
  {
 80012e8:	e7f7      	b.n	80012da <main+0x17a>
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	00000000 	.word	0x00000000
 80012f4:	4074c000 	.word	0x4074c000
 80012f8:	000f0001 	.word	0x000f0001
 80012fc:	800f000f 	.word	0x800f000f
 8001300:	40011000 	.word	0x40011000
 8001304:	40010800 	.word	0x40010800
 8001308:	40010c00 	.word	0x40010c00
 800130c:	20000224 	.word	0x20000224
 8001310:	20000364 	.word	0x20000364
 8001314:	200002d0 	.word	0x200002d0
 8001318:	08009798 	.word	0x08009798
 800131c:	080097b0 	.word	0x080097b0
 8001320:	20000348 	.word	0x20000348
 8001324:	20000318 	.word	0x20000318
 8001328:	40a00000 	.word	0x40a00000
 800132c:	41a00000 	.word	0x41a00000
 8001330:	20000330 	.word	0x20000330
 8001334:	461c4000 	.word	0x461c4000
 8001338:	40c00000 	.word	0x40c00000

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	; 0x50
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001346:	2228      	movs	r2, #40	; 0x28
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f005 fd71 	bl	8006e32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136c:	2301      	movs	r3, #1
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137a:	2301      	movs	r3, #1
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137e:	2302      	movs	r3, #2
 8001380:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001386:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001388:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800138c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001392:	4618      	mov	r0, r3
 8001394:	f001 ff00 	bl	8003198 <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800139e:	f000 f9b5 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2101      	movs	r1, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 f96c 	bl	800369c <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013ca:	f000 f99f 	bl	800170c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ce:	2302      	movs	r3, #2
 80013d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80013d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 faec 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013e6:	f000 f991 	bl	800170c <Error_Handler>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3750      	adds	r7, #80	; 0x50
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_ADC1_Init+0x74>)
 8001406:	4a19      	ldr	r2, [pc, #100]	; (800146c <MX_ADC1_Init+0x78>)
 8001408:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_ADC1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_ADC1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_ADC1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_ADC1_Init+0x74>)
 800141e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001422:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <MX_ADC1_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_ADC1_Init+0x74>)
 800142c:	2201      	movs	r2, #1
 800142e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_ADC1_Init+0x74>)
 8001432:	f000 fc7f 	bl	8001d34 <HAL_ADC_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800143c:	f000 f966 	bl	800170c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001444:	2301      	movs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_ADC1_Init+0x74>)
 8001452:	f000 fd47 	bl	8001ee4 <HAL_ADC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800145c:	f000 f956 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200001f4 	.word	0x200001f4
 800146c:	40012400 	.word	0x40012400

08001470 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <MX_I2C1_Init+0x54>)
 8001478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_I2C1_Init+0x50>)
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <MX_I2C1_Init+0x58>)
 800147e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_I2C1_Init+0x50>)
 800148e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001492:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_I2C1_Init+0x50>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <MX_I2C1_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_I2C1_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <MX_I2C1_Init+0x50>)
 80014ae:	f001 f9c7 	bl	8002840 <HAL_I2C_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014b8:	f000 f928 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000224 	.word	0x20000224
 80014c4:	40005400 	.word	0x40005400
 80014c8:	000186a0 	.word	0x000186a0

080014cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_SPI1_Init+0x64>)
 80014d2:	4a18      	ldr	r2, [pc, #96]	; (8001534 <MX_SPI1_Init+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_SPI1_Init+0x64>)
 80014d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_SPI1_Init+0x64>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_SPI1_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_SPI1_Init+0x64>)
 80014ec:	2202      	movs	r2, #2
 80014ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_SPI1_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_SPI1_Init+0x64>)
 80014f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_SPI1_Init+0x64>)
 8001500:	2220      	movs	r2, #32
 8001502:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <MX_SPI1_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_SPI1_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <MX_SPI1_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_SPI1_Init+0x64>)
 8001518:	220a      	movs	r2, #10
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_SPI1_Init+0x64>)
 800151e:	f002 fb01 	bl	8003b24 <HAL_SPI_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001528:	f000 f8f0 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000278 	.word	0x20000278
 8001534:	40013000 	.word	0x40013000

08001538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_USART1_UART_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 8001570:	f003 f860 	bl	8004634 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800157a:	f000 f8c7 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200002d0 	.word	0x200002d0
 8001588:	40013800 	.word	0x40013800

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <MX_GPIO_Init+0x144>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a4a      	ldr	r2, [pc, #296]	; (80016d0 <MX_GPIO_Init+0x144>)
 80015a6:	f043 0310 	orr.w	r3, r3, #16
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <MX_GPIO_Init+0x144>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b8:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <MX_GPIO_Init+0x144>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a44      	ldr	r2, [pc, #272]	; (80016d0 <MX_GPIO_Init+0x144>)
 80015be:	f043 0320 	orr.w	r3, r3, #32
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <MX_GPIO_Init+0x144>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <MX_GPIO_Init+0x144>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a3e      	ldr	r2, [pc, #248]	; (80016d0 <MX_GPIO_Init+0x144>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <MX_GPIO_Init+0x144>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <MX_GPIO_Init+0x144>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a38      	ldr	r2, [pc, #224]	; (80016d0 <MX_GPIO_Init+0x144>)
 80015ee:	f043 0308 	orr.w	r3, r3, #8
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <MX_GPIO_Init+0x144>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_DACS_Pin|LDAC_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001606:	4833      	ldr	r0, [pc, #204]	; (80016d4 <MX_GPIO_Init+0x148>)
 8001608:	f001 f901 	bl	800280e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	211e      	movs	r1, #30
 8001610:	4831      	ldr	r0, [pc, #196]	; (80016d8 <MX_GPIO_Init+0x14c>)
 8001612:	f001 f8fc 	bl	800280e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 8001616:	2200      	movs	r2, #0
 8001618:	f24f 4127 	movw	r1, #62503	; 0xf427
 800161c:	482f      	ldr	r0, [pc, #188]	; (80016dc <MX_GPIO_Init+0x150>)
 800161e:	f001 f8f6 	bl	800280e <HAL_GPIO_WritePin>
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SPI1_DACS_Pin LDAC_Pin */
  GPIO_InitStruct.Pin = SPI1_DACS_Pin|LDAC_Pin;
 8001622:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2302      	movs	r3, #2
 8001632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	4826      	ldr	r0, [pc, #152]	; (80016d4 <MX_GPIO_Init+0x148>)
 800163c:	f000 ff4c 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VselC0_Pin VselC1_Pin PROGB_Pin SPI1_FPGAS_Pin */
  GPIO_InitStruct.Pin = VselC0_Pin|VselC1_Pin|PROGB_Pin|SPI1_FPGAS_Pin;
 8001640:	231e      	movs	r3, #30
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2302      	movs	r3, #2
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	4820      	ldr	r0, [pc, #128]	; (80016d8 <MX_GPIO_Init+0x14c>)
 8001658:	f000 ff3e 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VselB1_Pin VselB0_Pin VselA1_Pin VselA0_Pin
                           MODE_Pin M2_Pin M1_Pin M0_Pin
                           DIR_Pin */
  GPIO_InitStruct.Pin = VselB1_Pin|VselB0_Pin|VselA1_Pin|VselA0_Pin
 800165c:	f24f 4327 	movw	r3, #62503	; 0xf427
 8001660:	613b      	str	r3, [r7, #16]
                          |MODE_Pin|M2_Pin|M1_Pin|M0_Pin
                          |DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2302      	movs	r3, #2
 800166c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4619      	mov	r1, r3
 8001674:	4819      	ldr	r0, [pc, #100]	; (80016dc <MX_GPIO_Init+0x150>)
 8001676:	f000 ff2f 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FPGA_IRQ_Pin USB_detect_Pin */
  GPIO_InitStruct.Pin = FPGA_IRQ_Pin|USB_detect_Pin;
 800167a:	f640 0308 	movw	r3, #2056	; 0x808
 800167e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_GPIO_Init+0x154>)
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	4813      	ldr	r0, [pc, #76]	; (80016dc <MX_GPIO_Init+0x150>)
 8001690:	f000 ff22 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DONE_Pin INITB_Pin */
  GPIO_InitStruct.Pin = DONE_Pin|INITB_Pin;
 8001694:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <MX_GPIO_Init+0x14c>)
 80016aa:	f000 ff15 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_IRQ_Pin */
  GPIO_InitStruct.Pin = UI_IRQ_Pin;
 80016ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <MX_GPIO_Init+0x154>)
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UI_IRQ_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4619      	mov	r1, r3
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_GPIO_Init+0x14c>)
 80016c4:	f000 ff08 	bl	80024d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40011000 	.word	0x40011000
 80016d8:	40010800 	.word	0x40010800
 80016dc:	40010c00 	.word	0x40010c00
 80016e0:	10110000 	.word	0x10110000

080016e4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
	//SCPIencode(TXbuff, RXbuff, AWG1, NOISE1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXbuff, RS485BUFFSIZE);
 80016f0:	2220      	movs	r2, #32
 80016f2:	4904      	ldr	r1, [pc, #16]	; (8001704 <HAL_UARTEx_RxEventCallback+0x20>)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <HAL_UARTEx_RxEventCallback+0x24>)
 80016f6:	f003 f870 	bl	80047da <HAL_UARTEx_ReceiveToIdle_IT>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000364 	.word	0x20000364
 8001708:	200002d0 	.word	0x200002d0

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>
	...

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_MspInit+0x5c>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4a14      	ldr	r2, [pc, #80]	; (8001774 <HAL_MspInit+0x5c>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6193      	str	r3, [r2, #24]
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_MspInit+0x5c>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_MspInit+0x5c>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_MspInit+0x5c>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_MspInit+0x5c>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_MspInit+0x60>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_MspInit+0x60>)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000

0800177c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_ADC_MspInit+0x6c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d121      	bne.n	80017e0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_ADC_MspInit+0x70>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a12      	ldr	r2, [pc, #72]	; (80017ec <HAL_ADC_MspInit+0x70>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_ADC_MspInit+0x70>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_ADC_MspInit+0x70>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <HAL_ADC_MspInit+0x70>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_ADC_MspInit+0x70>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Ain_Pin;
 80017cc:	2301      	movs	r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d0:	2303      	movs	r3, #3
 80017d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Ain_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4619      	mov	r1, r3
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_ADC_MspInit+0x74>)
 80017dc:	f000 fe7c 	bl	80024d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40012400 	.word	0x40012400
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010800 	.word	0x40010800

080017f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_I2C_MspInit+0x90>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d132      	bne.n	800187a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_I2C_MspInit+0x94>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_I2C_MspInit+0x94>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_I2C_MspInit+0x94>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800182c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001832:	2312      	movs	r3, #18
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4812      	ldr	r0, [pc, #72]	; (800188c <HAL_I2C_MspInit+0x98>)
 8001842:	f000 fe49 	bl	80024d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_I2C_MspInit+0x9c>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
 800185c:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <HAL_I2C_MspInit+0x9c>)
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_I2C_MspInit+0x94>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a08      	ldr	r2, [pc, #32]	; (8001888 <HAL_I2C_MspInit+0x94>)
 8001868:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_I2C_MspInit+0x94>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40005400 	.word	0x40005400
 8001888:	40021000 	.word	0x40021000
 800188c:	40010c00 	.word	0x40010c00
 8001890:	40010000 	.word	0x40010000

08001894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1b      	ldr	r2, [pc, #108]	; (800191c <HAL_SPI_MspInit+0x88>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d12f      	bne.n	8001914 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_SPI_MspInit+0x8c>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_SPI_MspInit+0x8c>)
 80018ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_SPI_MspInit+0x8c>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_SPI_MspInit+0x8c>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a13      	ldr	r2, [pc, #76]	; (8001920 <HAL_SPI_MspInit+0x8c>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_SPI_MspInit+0x8c>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018e4:	23a0      	movs	r3, #160	; 0xa0
 80018e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	4619      	mov	r1, r3
 80018f6:	480b      	ldr	r0, [pc, #44]	; (8001924 <HAL_SPI_MspInit+0x90>)
 80018f8:	f000 fdee 	bl	80024d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018fc:	2340      	movs	r3, #64	; 0x40
 80018fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4619      	mov	r1, r3
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <HAL_SPI_MspInit+0x90>)
 8001910:	f000 fde2 	bl	80024d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40013000 	.word	0x40013000
 8001920:	40021000 	.word	0x40021000
 8001924:	40010800 	.word	0x40010800

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a26      	ldr	r2, [pc, #152]	; (80019dc <HAL_UART_MspInit+0xb4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d145      	bne.n	80019d4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_UART_MspInit+0xb8>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <HAL_UART_MspInit+0xb8>)
 800194e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_UART_MspInit+0xb8>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_UART_MspInit+0xb8>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <HAL_UART_MspInit+0xb8>)
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <HAL_UART_MspInit+0xb8>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001978:	2340      	movs	r3, #64	; 0x40
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	4816      	ldr	r0, [pc, #88]	; (80019e4 <HAL_UART_MspInit+0xbc>)
 800198c:	f000 fda4 	bl	80024d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	4810      	ldr	r0, [pc, #64]	; (80019e4 <HAL_UART_MspInit+0xbc>)
 80019a4:	f000 fd98 	bl	80024d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <HAL_UART_MspInit+0xc0>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_UART_MspInit+0xc0>)
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	2025      	movs	r0, #37	; 0x25
 80019ca:	f000 fc9c 	bl	8002306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ce:	2025      	movs	r0, #37	; 0x25
 80019d0:	f000 fcb5 	bl	800233e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40013800 	.word	0x40013800
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010c00 	.word	0x40010c00
 80019e8:	40010000 	.word	0x40010000

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019f0:	e7fe      	b.n	80019f0 <NMI_Handler+0x4>

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <MemManage_Handler+0x4>

080019fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a32:	f000 f93f 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <USART1_IRQHandler+0x10>)
 8001a42:	f002 ff27 	bl	8004894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200002d0 	.word	0x200002d0

08001a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return 1;
 8001a54:	2301      	movs	r3, #1
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <_kill>:

int _kill(int pid, int sig)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a68:	f005 fa46 	bl	8006ef8 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2216      	movs	r2, #22
 8001a70:	601a      	str	r2, [r3, #0]
  return -1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_exit>:

void _exit (int status)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a86:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffe7 	bl	8001a5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a90:	e7fe      	b.n	8001a90 <_exit+0x12>

08001a92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e00a      	b.n	8001aba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	4601      	mov	r1, r0
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	60ba      	str	r2, [r7, #8]
 8001ab0:	b2ca      	uxtb	r2, r1
 8001ab2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	dbf0      	blt.n	8001aa4 <_read+0x12>
  }

  return len;
 8001ac2:	687b      	ldr	r3, [r7, #4]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	e009      	b.n	8001af2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	60ba      	str	r2, [r7, #8]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbf1      	blt.n	8001ade <_write+0x12>
  }
  return len;
 8001afa:	687b      	ldr	r3, [r7, #4]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_close>:

int _close(int file)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <_isatty>:

int _isatty(int file)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b40:	2301      	movs	r3, #1
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b94:	f005 f9b0 	bl	8006ef8 <__errno>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	e009      	b.n	8001bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <_sbrk+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20005000 	.word	0x20005000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	20000350 	.word	0x20000350
 8001bcc:	20000528 	.word	0x20000528

08001bd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bdc:	f7ff fff8 	bl	8001bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be0:	480b      	ldr	r0, [pc, #44]	; (8001c10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001be2:	490c      	ldr	r1, [pc, #48]	; (8001c14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bf8:	4c09      	ldr	r4, [pc, #36]	; (8001c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c06:	f005 f97d 	bl	8006f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c0a:	f7ff faa9 	bl	8001160 <main>
  bx lr
 8001c0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c14:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001c18:	08009f3c 	.word	0x08009f3c
  ldr r2, =_sbss
 8001c1c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c20:	20000528 	.word	0x20000528

08001c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_2_IRQHandler>
	...

08001c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_Init+0x28>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <HAL_Init+0x28>)
 8001c32:	f043 0310 	orr.w	r3, r3, #16
 8001c36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 fb59 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3e:	200f      	movs	r0, #15
 8001c40:	f000 f808 	bl	8001c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c44:	f7ff fd68 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40022000 	.word	0x40022000

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x54>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x58>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 fb71 	bl	800235a <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f000 fb39 	bl	8002306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_InitTick+0x5c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_IncTick+0x1c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	20000354 	.word	0x20000354

08001cd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b02      	ldr	r3, [pc, #8]	; (8001ce8 <HAL_GetTick+0x10>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	20000354 	.word	0x20000354

08001cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff fff0 	bl	8001cd8 <HAL_GetTick>
 8001cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d005      	beq.n	8001d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_Delay+0x44>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d12:	bf00      	nop
 8001d14:	f7ff ffe0 	bl	8001cd8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d8f7      	bhi.n	8001d14 <HAL_Delay+0x28>
  {
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000008 	.word	0x20000008

08001d34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0be      	b.n	8001ed4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fd02 	bl	800177c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f9ab 	bl	80020d4 <ADC_ConversionStop_Disable>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f040 8099 	bne.w	8001ec2 <HAL_ADC_Init+0x18e>
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f040 8095 	bne.w	8001ec2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001da0:	f023 0302 	bic.w	r3, r3, #2
 8001da4:	f043 0202 	orr.w	r2, r3, #2
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001db4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7b1b      	ldrb	r3, [r3, #12]
 8001dba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dbc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dcc:	d003      	beq.n	8001dd6 <HAL_ADC_Init+0xa2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d102      	bne.n	8001ddc <HAL_ADC_Init+0xa8>
 8001dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dda:	e000      	b.n	8001dde <HAL_ADC_Init+0xaa>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7d1b      	ldrb	r3, [r3, #20]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d119      	bne.n	8001e20 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7b1b      	ldrb	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	035a      	lsls	r2, r3, #13
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	e00b      	b.n	8001e20 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	f043 0220 	orr.w	r2, r3, #32
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	f043 0201 	orr.w	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <HAL_ADC_Init+0x1a8>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	68b9      	ldr	r1, [r7, #8]
 8001e44:	430b      	orrs	r3, r1
 8001e46:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e50:	d003      	beq.n	8001e5a <HAL_ADC_Init+0x126>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d104      	bne.n	8001e64 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	051b      	lsls	r3, r3, #20
 8001e62:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_ADC_Init+0x1ac>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d10b      	bne.n	8001ea0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e92:	f023 0303 	bic.w	r3, r3, #3
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e9e:	e018      	b.n	8001ed2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	f023 0312 	bic.w	r3, r3, #18
 8001ea8:	f043 0210 	orr.w	r2, r3, #16
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ec0:	e007      	b.n	8001ed2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	f043 0210 	orr.w	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	ffe1f7fd 	.word	0xffe1f7fd
 8001ee0:	ff1f0efe 	.word	0xff1f0efe

08001ee4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x20>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e0dc      	b.n	80020be <HAL_ADC_ConfigChannel+0x1da>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b06      	cmp	r3, #6
 8001f12:	d81c      	bhi.n	8001f4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	3b05      	subs	r3, #5
 8001f26:	221f      	movs	r2, #31
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	4019      	ands	r1, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3b05      	subs	r3, #5
 8001f40:	fa00 f203 	lsl.w	r2, r0, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f4c:	e03c      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d81c      	bhi.n	8001f90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	3b23      	subs	r3, #35	; 0x23
 8001f68:	221f      	movs	r2, #31
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	4019      	ands	r1, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b23      	subs	r3, #35	; 0x23
 8001f82:	fa00 f203 	lsl.w	r2, r0, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8e:	e01b      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b41      	subs	r3, #65	; 0x41
 8001fa2:	221f      	movs	r2, #31
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4019      	ands	r1, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b41      	subs	r3, #65	; 0x41
 8001fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	d91c      	bls.n	800200a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68d9      	ldr	r1, [r3, #12]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	3b1e      	subs	r3, #30
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	4019      	ands	r1, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6898      	ldr	r0, [r3, #8]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3b1e      	subs	r3, #30
 8001ffc:	fa00 f203 	lsl.w	r2, r0, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	e019      	b.n	800203e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6919      	ldr	r1, [r3, #16]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	2207      	movs	r2, #7
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	4019      	ands	r1, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	6898      	ldr	r0, [r3, #8]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	fa00 f203 	lsl.w	r2, r0, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b10      	cmp	r3, #16
 8002044:	d003      	beq.n	800204e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800204a:	2b11      	cmp	r3, #17
 800204c:	d132      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d125      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d126      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002074:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b10      	cmp	r3, #16
 800207c:	d11a      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <HAL_ADC_ConfigChannel+0x1e8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	0c9a      	lsrs	r2, r3, #18
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002094:	e002      	b.n	800209c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3b01      	subs	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f9      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x1b2>
 80020a2:	e007      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	f043 0220 	orr.w	r2, r3, #32
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	40012400 	.word	0x40012400
 80020cc:	20000000 	.word	0x20000000
 80020d0:	431bde83 	.word	0x431bde83

080020d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d12e      	bne.n	800214c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020fe:	f7ff fdeb 	bl	8001cd8 <HAL_GetTick>
 8002102:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002104:	e01b      	b.n	800213e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002106:	f7ff fde7 	bl	8001cd8 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d914      	bls.n	800213e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d10d      	bne.n	800213e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	f043 0210 	orr.w	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e007      	b.n	800214e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d0dc      	beq.n	8002106 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <__NVIC_GetPriorityGrouping+0x18>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0307 	and.w	r3, r3, #7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db0b      	blt.n	80021e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4906      	ldr	r1, [pc, #24]	; (80021f0 <__NVIC_EnableIRQ+0x34>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2001      	movs	r0, #1
 80021de:	fa00 f202 	lsl.w	r2, r0, r2
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022bc:	d301      	bcc.n	80022c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022be:	2301      	movs	r3, #1
 80022c0:	e00f      	b.n	80022e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <SysTick_Config+0x40>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ca:	210f      	movs	r1, #15
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f7ff ff90 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SysTick_Config+0x40>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SysTick_Config+0x40>)
 80022dc:	2207      	movs	r2, #7
 80022de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff2d 	bl	8002158 <__NVIC_SetPriorityGrouping>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002318:	f7ff ff42 	bl	80021a0 <__NVIC_GetPriorityGrouping>
 800231c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f7ff ff90 	bl	8002248 <NVIC_EncodePriority>
 8002328:	4602      	mov	r2, r0
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff5f 	bl	80021f4 <__NVIC_SetPriority>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff35 	bl	80021bc <__NVIC_EnableIRQ>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffa2 	bl	80022ac <SysTick_Config>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d008      	beq.n	800239c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2204      	movs	r2, #4
 800238e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e020      	b.n	80023de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 020e 	bic.w	r2, r2, #14
 80023aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d005      	beq.n	800240c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2204      	movs	r2, #4
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	e051      	b.n	80024b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 020e 	bic.w	r2, r2, #14
 800241a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a22      	ldr	r2, [pc, #136]	; (80024bc <HAL_DMA_Abort_IT+0xd4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d029      	beq.n	800248a <HAL_DMA_Abort_IT+0xa2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <HAL_DMA_Abort_IT+0xd8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d022      	beq.n	8002486 <HAL_DMA_Abort_IT+0x9e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1f      	ldr	r2, [pc, #124]	; (80024c4 <HAL_DMA_Abort_IT+0xdc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01a      	beq.n	8002480 <HAL_DMA_Abort_IT+0x98>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1e      	ldr	r2, [pc, #120]	; (80024c8 <HAL_DMA_Abort_IT+0xe0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d012      	beq.n	800247a <HAL_DMA_Abort_IT+0x92>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <HAL_DMA_Abort_IT+0xe4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00a      	beq.n	8002474 <HAL_DMA_Abort_IT+0x8c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <HAL_DMA_Abort_IT+0xe8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d102      	bne.n	800246e <HAL_DMA_Abort_IT+0x86>
 8002468:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800246c:	e00e      	b.n	800248c <HAL_DMA_Abort_IT+0xa4>
 800246e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002472:	e00b      	b.n	800248c <HAL_DMA_Abort_IT+0xa4>
 8002474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002478:	e008      	b.n	800248c <HAL_DMA_Abort_IT+0xa4>
 800247a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247e:	e005      	b.n	800248c <HAL_DMA_Abort_IT+0xa4>
 8002480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002484:	e002      	b.n	800248c <HAL_DMA_Abort_IT+0xa4>
 8002486:	2310      	movs	r3, #16
 8002488:	e000      	b.n	800248c <HAL_DMA_Abort_IT+0xa4>
 800248a:	2301      	movs	r3, #1
 800248c:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <HAL_DMA_Abort_IT+0xec>)
 800248e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
    } 
  }
  return status;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40020008 	.word	0x40020008
 80024c0:	4002001c 	.word	0x4002001c
 80024c4:	40020030 	.word	0x40020030
 80024c8:	40020044 	.word	0x40020044
 80024cc:	40020058 	.word	0x40020058
 80024d0:	4002006c 	.word	0x4002006c
 80024d4:	40020000 	.word	0x40020000

080024d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d8:	b480      	push	{r7}
 80024da:	b08b      	sub	sp, #44	; 0x2c
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ea:	e169      	b.n	80027c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024ec:	2201      	movs	r2, #1
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	429a      	cmp	r2, r3
 8002506:	f040 8158 	bne.w	80027ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a9a      	ldr	r2, [pc, #616]	; (8002778 <HAL_GPIO_Init+0x2a0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d05e      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002514:	4a98      	ldr	r2, [pc, #608]	; (8002778 <HAL_GPIO_Init+0x2a0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d875      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 800251a:	4a98      	ldr	r2, [pc, #608]	; (800277c <HAL_GPIO_Init+0x2a4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d058      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002520:	4a96      	ldr	r2, [pc, #600]	; (800277c <HAL_GPIO_Init+0x2a4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d86f      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 8002526:	4a96      	ldr	r2, [pc, #600]	; (8002780 <HAL_GPIO_Init+0x2a8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d052      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 800252c:	4a94      	ldr	r2, [pc, #592]	; (8002780 <HAL_GPIO_Init+0x2a8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d869      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 8002532:	4a94      	ldr	r2, [pc, #592]	; (8002784 <HAL_GPIO_Init+0x2ac>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d04c      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002538:	4a92      	ldr	r2, [pc, #584]	; (8002784 <HAL_GPIO_Init+0x2ac>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d863      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 800253e:	4a92      	ldr	r2, [pc, #584]	; (8002788 <HAL_GPIO_Init+0x2b0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d046      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002544:	4a90      	ldr	r2, [pc, #576]	; (8002788 <HAL_GPIO_Init+0x2b0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d85d      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 800254a:	2b12      	cmp	r3, #18
 800254c:	d82a      	bhi.n	80025a4 <HAL_GPIO_Init+0xcc>
 800254e:	2b12      	cmp	r3, #18
 8002550:	d859      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 8002552:	a201      	add	r2, pc, #4	; (adr r2, 8002558 <HAL_GPIO_Init+0x80>)
 8002554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002558:	080025d3 	.word	0x080025d3
 800255c:	080025ad 	.word	0x080025ad
 8002560:	080025bf 	.word	0x080025bf
 8002564:	08002601 	.word	0x08002601
 8002568:	08002607 	.word	0x08002607
 800256c:	08002607 	.word	0x08002607
 8002570:	08002607 	.word	0x08002607
 8002574:	08002607 	.word	0x08002607
 8002578:	08002607 	.word	0x08002607
 800257c:	08002607 	.word	0x08002607
 8002580:	08002607 	.word	0x08002607
 8002584:	08002607 	.word	0x08002607
 8002588:	08002607 	.word	0x08002607
 800258c:	08002607 	.word	0x08002607
 8002590:	08002607 	.word	0x08002607
 8002594:	08002607 	.word	0x08002607
 8002598:	08002607 	.word	0x08002607
 800259c:	080025b5 	.word	0x080025b5
 80025a0:	080025c9 	.word	0x080025c9
 80025a4:	4a79      	ldr	r2, [pc, #484]	; (800278c <HAL_GPIO_Init+0x2b4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025aa:	e02c      	b.n	8002606 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	623b      	str	r3, [r7, #32]
          break;
 80025b2:	e029      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	3304      	adds	r3, #4
 80025ba:	623b      	str	r3, [r7, #32]
          break;
 80025bc:	e024      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	3308      	adds	r3, #8
 80025c4:	623b      	str	r3, [r7, #32]
          break;
 80025c6:	e01f      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	330c      	adds	r3, #12
 80025ce:	623b      	str	r3, [r7, #32]
          break;
 80025d0:	e01a      	b.n	8002608 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025da:	2304      	movs	r3, #4
 80025dc:	623b      	str	r3, [r7, #32]
          break;
 80025de:	e013      	b.n	8002608 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025e8:	2308      	movs	r3, #8
 80025ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	611a      	str	r2, [r3, #16]
          break;
 80025f2:	e009      	b.n	8002608 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f4:	2308      	movs	r3, #8
 80025f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	615a      	str	r2, [r3, #20]
          break;
 80025fe:	e003      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002600:	2300      	movs	r3, #0
 8002602:	623b      	str	r3, [r7, #32]
          break;
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x130>
          break;
 8002606:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2bff      	cmp	r3, #255	; 0xff
 800260c:	d801      	bhi.n	8002612 <HAL_GPIO_Init+0x13a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	e001      	b.n	8002616 <HAL_GPIO_Init+0x13e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2bff      	cmp	r3, #255	; 0xff
 800261c:	d802      	bhi.n	8002624 <HAL_GPIO_Init+0x14c>
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	e002      	b.n	800262a <HAL_GPIO_Init+0x152>
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	3b08      	subs	r3, #8
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	210f      	movs	r1, #15
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	401a      	ands	r2, r3
 800263c:	6a39      	ldr	r1, [r7, #32]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	431a      	orrs	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80b1 	beq.w	80027ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002658:	4b4d      	ldr	r3, [pc, #308]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a4c      	ldr	r2, [pc, #304]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002670:	4a48      	ldr	r2, [pc, #288]	; (8002794 <HAL_GPIO_Init+0x2bc>)
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a40      	ldr	r2, [pc, #256]	; (8002798 <HAL_GPIO_Init+0x2c0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <HAL_GPIO_Init+0x1ec>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3f      	ldr	r2, [pc, #252]	; (800279c <HAL_GPIO_Init+0x2c4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00d      	beq.n	80026c0 <HAL_GPIO_Init+0x1e8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a3e      	ldr	r2, [pc, #248]	; (80027a0 <HAL_GPIO_Init+0x2c8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d007      	beq.n	80026bc <HAL_GPIO_Init+0x1e4>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a3d      	ldr	r2, [pc, #244]	; (80027a4 <HAL_GPIO_Init+0x2cc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_GPIO_Init+0x1e0>
 80026b4:	2303      	movs	r3, #3
 80026b6:	e006      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026b8:	2304      	movs	r3, #4
 80026ba:	e004      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026bc:	2302      	movs	r3, #2
 80026be:	e002      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026c4:	2300      	movs	r3, #0
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	f002 0203 	and.w	r2, r2, #3
 80026cc:	0092      	lsls	r2, r2, #2
 80026ce:	4093      	lsls	r3, r2
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026d6:	492f      	ldr	r1, [pc, #188]	; (8002794 <HAL_GPIO_Init+0x2bc>)
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	492c      	ldr	r1, [pc, #176]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	43db      	mvns	r3, r3
 8002706:	4928      	ldr	r1, [pc, #160]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002708:	4013      	ands	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002718:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4922      	ldr	r1, [pc, #136]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	43db      	mvns	r3, r3
 800272e:	491e      	ldr	r1, [pc, #120]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002730:	4013      	ands	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4918      	ldr	r1, [pc, #96]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	43db      	mvns	r3, r3
 8002756:	4914      	ldr	r1, [pc, #80]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002758:	4013      	ands	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d021      	beq.n	80027ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	490e      	ldr	r1, [pc, #56]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e021      	b.n	80027ba <HAL_GPIO_Init+0x2e2>
 8002776:	bf00      	nop
 8002778:	10320000 	.word	0x10320000
 800277c:	10310000 	.word	0x10310000
 8002780:	10220000 	.word	0x10220000
 8002784:	10210000 	.word	0x10210000
 8002788:	10120000 	.word	0x10120000
 800278c:	10110000 	.word	0x10110000
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000
 8002798:	40010800 	.word	0x40010800
 800279c:	40010c00 	.word	0x40010c00
 80027a0:	40011000 	.word	0x40011000
 80027a4:	40011400 	.word	0x40011400
 80027a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_GPIO_Init+0x304>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	4909      	ldr	r1, [pc, #36]	; (80027dc <HAL_GPIO_Init+0x304>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	3301      	adds	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f47f ae8e 	bne.w	80024ec <HAL_GPIO_Init+0x14>
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	372c      	adds	r7, #44	; 0x2c
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	887b      	ldrh	r3, [r7, #2]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e001      	b.n	8002802 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002802:	7bfb      	ldrb	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	807b      	strh	r3, [r7, #2]
 800281a:	4613      	mov	r3, r2
 800281c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800281e:	787b      	ldrb	r3, [r7, #1]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002824:	887a      	ldrh	r2, [r7, #2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800282a:	e003      	b.n	8002834 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	041a      	lsls	r2, r3, #16
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	611a      	str	r2, [r3, #16]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
	...

08002840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e12b      	b.n	8002aaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe ffc4 	bl	80017f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	; 0x24
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002892:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028a4:	f001 f842 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 80028a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a81      	ldr	r2, [pc, #516]	; (8002ab4 <HAL_I2C_Init+0x274>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d807      	bhi.n	80028c4 <HAL_I2C_Init+0x84>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a80      	ldr	r2, [pc, #512]	; (8002ab8 <HAL_I2C_Init+0x278>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	bf94      	ite	ls
 80028bc:	2301      	movls	r3, #1
 80028be:	2300      	movhi	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e006      	b.n	80028d2 <HAL_I2C_Init+0x92>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a7d      	ldr	r2, [pc, #500]	; (8002abc <HAL_I2C_Init+0x27c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	bf94      	ite	ls
 80028cc:	2301      	movls	r3, #1
 80028ce:	2300      	movhi	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0e7      	b.n	8002aaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4a78      	ldr	r2, [pc, #480]	; (8002ac0 <HAL_I2C_Init+0x280>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0c9b      	lsrs	r3, r3, #18
 80028e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a6a      	ldr	r2, [pc, #424]	; (8002ab4 <HAL_I2C_Init+0x274>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d802      	bhi.n	8002914 <HAL_I2C_Init+0xd4>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3301      	adds	r3, #1
 8002912:	e009      	b.n	8002928 <HAL_I2C_Init+0xe8>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	4a69      	ldr	r2, [pc, #420]	; (8002ac4 <HAL_I2C_Init+0x284>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	3301      	adds	r3, #1
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	430b      	orrs	r3, r1
 800292e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800293a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	495c      	ldr	r1, [pc, #368]	; (8002ab4 <HAL_I2C_Init+0x274>)
 8002944:	428b      	cmp	r3, r1
 8002946:	d819      	bhi.n	800297c <HAL_I2C_Init+0x13c>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e59      	subs	r1, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fbb1 f3f3 	udiv	r3, r1, r3
 8002956:	1c59      	adds	r1, r3, #1
 8002958:	f640 73fc 	movw	r3, #4092	; 0xffc
 800295c:	400b      	ands	r3, r1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_I2C_Init+0x138>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1e59      	subs	r1, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002970:	3301      	adds	r3, #1
 8002972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002976:	e051      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 8002978:	2304      	movs	r3, #4
 800297a:	e04f      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d111      	bne.n	80029a8 <HAL_I2C_Init+0x168>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e58      	subs	r0, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	440b      	add	r3, r1
 8002992:	fbb0 f3f3 	udiv	r3, r0, r3
 8002996:	3301      	adds	r3, #1
 8002998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e012      	b.n	80029ce <HAL_I2C_Init+0x18e>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1e58      	subs	r0, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	0099      	lsls	r1, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Init+0x196>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e022      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10e      	bne.n	80029fc <HAL_I2C_Init+0x1bc>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1e58      	subs	r0, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	440b      	add	r3, r1
 80029ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fa:	e00f      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	0099      	lsls	r1, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	6809      	ldr	r1, [r1, #0]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6911      	ldr	r1, [r2, #16]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68d2      	ldr	r2, [r2, #12]
 8002a56:	4311      	orrs	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	000186a0 	.word	0x000186a0
 8002ab8:	001e847f 	.word	0x001e847f
 8002abc:	003d08ff 	.word	0x003d08ff
 8002ac0:	431bde83 	.word	0x431bde83
 8002ac4:	10624dd3 	.word	0x10624dd3

08002ac8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	817b      	strh	r3, [r7, #10]
 8002ada:	460b      	mov	r3, r1
 8002adc:	813b      	strh	r3, [r7, #8]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae2:	f7ff f8f9 	bl	8001cd8 <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	f040 80d9 	bne.w	8002ca8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	2319      	movs	r3, #25
 8002afc:	2201      	movs	r2, #1
 8002afe:	496d      	ldr	r1, [pc, #436]	; (8002cb4 <HAL_I2C_Mem_Write+0x1ec>)
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f971 	bl	8002de8 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e0cc      	b.n	8002caa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_I2C_Mem_Write+0x56>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e0c5      	b.n	8002caa <HAL_I2C_Mem_Write+0x1e2>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d007      	beq.n	8002b44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2221      	movs	r2, #33	; 0x21
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2240      	movs	r2, #64	; 0x40
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a4d      	ldr	r2, [pc, #308]	; (8002cb8 <HAL_I2C_Mem_Write+0x1f0>)
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b86:	88f8      	ldrh	r0, [r7, #6]
 8002b88:	893a      	ldrh	r2, [r7, #8]
 8002b8a:	8979      	ldrh	r1, [r7, #10]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	4603      	mov	r3, r0
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f890 	bl	8002cbc <I2C_RequestMemoryWrite>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d052      	beq.n	8002c48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e081      	b.n	8002caa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fa36 	bl	800301c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00d      	beq.n	8002bd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d107      	bne.n	8002bce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e06b      	b.n	8002caa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	781a      	ldrb	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d11b      	bne.n	8002c48 <HAL_I2C_Mem_Write+0x180>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d017      	beq.n	8002c48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	781a      	ldrb	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1aa      	bne.n	8002ba6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fa29 	bl	80030ac <I2C_WaitOnBTFFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d107      	bne.n	8002c78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e016      	b.n	8002caa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e000      	b.n	8002caa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ca8:	2302      	movs	r3, #2
  }
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	00100002 	.word	0x00100002
 8002cb8:	ffff0000 	.word	0xffff0000

08002cbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	817b      	strh	r3, [r7, #10]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	813b      	strh	r3, [r7, #8]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f878 	bl	8002de8 <I2C_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0c:	d103      	bne.n	8002d16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e05f      	b.n	8002dda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	6a3a      	ldr	r2, [r7, #32]
 8002d2e:	492d      	ldr	r1, [pc, #180]	; (8002de4 <I2C_RequestMemoryWrite+0x128>)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f8d3 	bl	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e04c      	b.n	8002dda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	6a39      	ldr	r1, [r7, #32]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f95e 	bl	800301c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d107      	bne.n	8002d7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e02b      	b.n	8002dda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d88:	893b      	ldrh	r3, [r7, #8]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	611a      	str	r2, [r3, #16]
 8002d92:	e021      	b.n	8002dd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d94:	893b      	ldrh	r3, [r7, #8]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f938 	bl	800301c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d107      	bne.n	8002dca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e005      	b.n	8002dda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dce:	893b      	ldrh	r3, [r7, #8]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	00010002 	.word	0x00010002

08002de8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df8:	e048      	b.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d044      	beq.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e02:	f7fe ff69 	bl	8001cd8 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d302      	bcc.n	8002e18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d139      	bne.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	0c1b      	lsrs	r3, r3, #16
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d10d      	bne.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	e00c      	b.n	8002e58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	43da      	mvns	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d116      	bne.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e023      	b.n	8002ed4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	0c1b      	lsrs	r3, r3, #16
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d10d      	bne.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	e00c      	b.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d093      	beq.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eea:	e071      	b.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efa:	d123      	bne.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f043 0204 	orr.w	r2, r3, #4
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e067      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d041      	beq.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4c:	f7fe fec4 	bl	8001cd8 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d302      	bcc.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d136      	bne.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10c      	bne.n	8002f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf14      	ite	ne
 8002f7e:	2301      	movne	r3, #1
 8002f80:	2300      	moveq	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	e00b      	b.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e021      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d10c      	bne.n	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	e00b      	b.n	800300c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	f47f af6d 	bne.w	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003028:	e034      	b.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f886 	bl	800313c <I2C_IsAcknowledgeFailed>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e034      	b.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d028      	beq.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7fe fe49 	bl	8001cd8 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d11d      	bne.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003062:	2b80      	cmp	r3, #128	; 0x80
 8003064:	d016      	beq.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f043 0220 	orr.w	r2, r3, #32
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e007      	b.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309e:	2b80      	cmp	r3, #128	; 0x80
 80030a0:	d1c3      	bne.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030b8:	e034      	b.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f83e 	bl	800313c <I2C_IsAcknowledgeFailed>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e034      	b.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d028      	beq.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d2:	f7fe fe01 	bl	8001cd8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d302      	bcc.n	80030e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11d      	bne.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d016      	beq.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e007      	b.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d1c3      	bne.n	80030ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003152:	d11b      	bne.n	800318c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800315c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f043 0204 	orr.w	r2, r3, #4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e272      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8087 	beq.w	80032c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b8:	4b92      	ldr	r3, [pc, #584]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d00c      	beq.n	80031de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031c4:	4b8f      	ldr	r3, [pc, #572]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d112      	bne.n	80031f6 <HAL_RCC_OscConfig+0x5e>
 80031d0:	4b8c      	ldr	r3, [pc, #560]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031dc:	d10b      	bne.n	80031f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031de:	4b89      	ldr	r3, [pc, #548]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d06c      	beq.n	80032c4 <HAL_RCC_OscConfig+0x12c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d168      	bne.n	80032c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e24c      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x76>
 8003200:	4b80      	ldr	r3, [pc, #512]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a7f      	ldr	r2, [pc, #508]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	e02e      	b.n	800326c <HAL_RCC_OscConfig+0xd4>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x98>
 8003216:	4b7b      	ldr	r3, [pc, #492]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7a      	ldr	r2, [pc, #488]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800321c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b78      	ldr	r3, [pc, #480]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a77      	ldr	r2, [pc, #476]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xd4>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0xbc>
 800323a:	4b72      	ldr	r3, [pc, #456]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a71      	ldr	r2, [pc, #452]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6e      	ldr	r2, [pc, #440]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xd4>
 8003254:	4b6b      	ldr	r3, [pc, #428]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6a      	ldr	r2, [pc, #424]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b68      	ldr	r3, [pc, #416]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a67      	ldr	r2, [pc, #412]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe fd30 	bl	8001cd8 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe fd2c 	bl	8001cd8 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e200      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b5d      	ldr	r3, [pc, #372]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xe4>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fd1c 	bl	8001cd8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe fd18 	bl	8001cd8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1ec      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	4b53      	ldr	r3, [pc, #332]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x10c>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d063      	beq.n	800339a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032d2:	4b4c      	ldr	r3, [pc, #304]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032de:	4b49      	ldr	r3, [pc, #292]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d11c      	bne.n	8003324 <HAL_RCC_OscConfig+0x18c>
 80032ea:	4b46      	ldr	r3, [pc, #280]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	4b43      	ldr	r3, [pc, #268]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_RCC_OscConfig+0x176>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1c0      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330e:	4b3d      	ldr	r3, [pc, #244]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4939      	ldr	r1, [pc, #228]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e03a      	b.n	800339a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332c:	4b36      	ldr	r3, [pc, #216]	; (8003408 <HAL_RCC_OscConfig+0x270>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fe fcd1 	bl	8001cd8 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333a:	f7fe fccd 	bl	8001cd8 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e1a1      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4927      	ldr	r1, [pc, #156]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b26      	ldr	r3, [pc, #152]	; (8003408 <HAL_RCC_OscConfig+0x270>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fcb0 	bl	8001cd8 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337c:	f7fe fcac 	bl	8001cd8 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e180      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d03a      	beq.n	800341c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d019      	beq.n	80033e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <HAL_RCC_OscConfig+0x274>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b4:	f7fe fc90 	bl	8001cd8 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fe fc8c 	bl	8001cd8 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e160      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033da:	2001      	movs	r0, #1
 80033dc:	f000 face 	bl	800397c <RCC_Delay>
 80033e0:	e01c      	b.n	800341c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_OscConfig+0x274>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7fe fc76 	bl	8001cd8 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ee:	e00f      	b.n	8003410 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fe fc72 	bl	8001cd8 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d908      	bls.n	8003410 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e146      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	42420000 	.word	0x42420000
 800340c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	4b92      	ldr	r3, [pc, #584]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e9      	bne.n	80033f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80a6 	beq.w	8003576 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342e:	4b8b      	ldr	r3, [pc, #556]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	4a87      	ldr	r2, [pc, #540]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003444:	61d3      	str	r3, [r2, #28]
 8003446:	4b85      	ldr	r3, [pc, #532]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b82      	ldr	r3, [pc, #520]	; (8003660 <HAL_RCC_OscConfig+0x4c8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d118      	bne.n	8003494 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003462:	4b7f      	ldr	r3, [pc, #508]	; (8003660 <HAL_RCC_OscConfig+0x4c8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7e      	ldr	r2, [pc, #504]	; (8003660 <HAL_RCC_OscConfig+0x4c8>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346e:	f7fe fc33 	bl	8001cd8 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003476:	f7fe fc2f 	bl	8001cd8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b64      	cmp	r3, #100	; 0x64
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e103      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	4b75      	ldr	r3, [pc, #468]	; (8003660 <HAL_RCC_OscConfig+0x4c8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x312>
 800349c:	4b6f      	ldr	r3, [pc, #444]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a6e      	ldr	r2, [pc, #440]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6213      	str	r3, [r2, #32]
 80034a8:	e02d      	b.n	8003506 <HAL_RCC_OscConfig+0x36e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x334>
 80034b2:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4a69      	ldr	r2, [pc, #420]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	6213      	str	r3, [r2, #32]
 80034be:	4b67      	ldr	r3, [pc, #412]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4a66      	ldr	r2, [pc, #408]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	6213      	str	r3, [r2, #32]
 80034ca:	e01c      	b.n	8003506 <HAL_RCC_OscConfig+0x36e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b05      	cmp	r3, #5
 80034d2:	d10c      	bne.n	80034ee <HAL_RCC_OscConfig+0x356>
 80034d4:	4b61      	ldr	r3, [pc, #388]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4a60      	ldr	r2, [pc, #384]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034da:	f043 0304 	orr.w	r3, r3, #4
 80034de:	6213      	str	r3, [r2, #32]
 80034e0:	4b5e      	ldr	r3, [pc, #376]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4a5d      	ldr	r2, [pc, #372]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6213      	str	r3, [r2, #32]
 80034ec:	e00b      	b.n	8003506 <HAL_RCC_OscConfig+0x36e>
 80034ee:	4b5b      	ldr	r3, [pc, #364]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4a5a      	ldr	r2, [pc, #360]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	6213      	str	r3, [r2, #32]
 80034fa:	4b58      	ldr	r3, [pc, #352]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4a57      	ldr	r2, [pc, #348]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d015      	beq.n	800353a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7fe fbe3 	bl	8001cd8 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003514:	e00a      	b.n	800352c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003516:	f7fe fbdf 	bl	8001cd8 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	f241 3288 	movw	r2, #5000	; 0x1388
 8003524:	4293      	cmp	r3, r2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e0b1      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352c:	4b4b      	ldr	r3, [pc, #300]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ee      	beq.n	8003516 <HAL_RCC_OscConfig+0x37e>
 8003538:	e014      	b.n	8003564 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353a:	f7fe fbcd 	bl	8001cd8 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fe fbc9 	bl	8001cd8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003550:	4293      	cmp	r3, r2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e09b      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003558:	4b40      	ldr	r3, [pc, #256]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ee      	bne.n	8003542 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d105      	bne.n	8003576 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356a:	4b3c      	ldr	r3, [pc, #240]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4a3b      	ldr	r2, [pc, #236]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003574:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8087 	beq.w	800368e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003580:	4b36      	ldr	r3, [pc, #216]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b08      	cmp	r3, #8
 800358a:	d061      	beq.n	8003650 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d146      	bne.n	8003622 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003594:	4b33      	ldr	r3, [pc, #204]	; (8003664 <HAL_RCC_OscConfig+0x4cc>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe fb9d 	bl	8001cd8 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a2:	f7fe fb99 	bl	8001cd8 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e06d      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b4:	4b29      	ldr	r3, [pc, #164]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f0      	bne.n	80035a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c8:	d108      	bne.n	80035dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ca:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	4921      	ldr	r1, [pc, #132]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035dc:	4b1f      	ldr	r3, [pc, #124]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a19      	ldr	r1, [r3, #32]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	430b      	orrs	r3, r1
 80035ee:	491b      	ldr	r1, [pc, #108]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f4:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_RCC_OscConfig+0x4cc>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7fe fb6d 	bl	8001cd8 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fe fb69 	bl	8001cd8 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e03d      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003614:	4b11      	ldr	r3, [pc, #68]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x46a>
 8003620:	e035      	b.n	800368e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003622:	4b10      	ldr	r3, [pc, #64]	; (8003664 <HAL_RCC_OscConfig+0x4cc>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe fb56 	bl	8001cd8 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7fe fb52 	bl	8001cd8 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e026      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x498>
 800364e:	e01e      	b.n	800368e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e019      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
 8003664:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_OscConfig+0x500>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	429a      	cmp	r2, r3
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000

0800369c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0d0      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d910      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b67      	ldr	r3, [pc, #412]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	4965      	ldr	r1, [pc, #404]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003702:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a52      	ldr	r2, [pc, #328]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800371a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d040      	beq.n	80037bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d115      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375a:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e073      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06b      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377a:	4b39      	ldr	r3, [pc, #228]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f023 0203 	bic.w	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4936      	ldr	r1, [pc, #216]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800378c:	f7fe faa4 	bl	8001cd8 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	e00a      	b.n	80037aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003794:	f7fe faa0 	bl	8001cd8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e053      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 020c 	and.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d1eb      	bne.n	8003794 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037bc:	4b27      	ldr	r3, [pc, #156]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d210      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 0207 	bic.w	r2, r3, #7
 80037d2:	4922      	ldr	r1, [pc, #136]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	490a      	ldr	r1, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1cc>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1d0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fa02 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40022000 	.word	0x40022000
 8003860:	40021000 	.word	0x40021000
 8003864:	080097c4 	.word	0x080097c4
 8003868:	20000000 	.word	0x20000000
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800388a:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <HAL_RCC_GetSysClockFreq+0x94>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b04      	cmp	r3, #4
 8003898:	d002      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x30>
 800389a:	2b08      	cmp	r3, #8
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0x36>
 800389e:	e027      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_RCC_GetSysClockFreq+0x98>)
 80038a2:	613b      	str	r3, [r7, #16]
      break;
 80038a4:	e027      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	0c9b      	lsrs	r3, r3, #18
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	4a17      	ldr	r2, [pc, #92]	; (800390c <HAL_RCC_GetSysClockFreq+0x9c>)
 80038b0:	5cd3      	ldrb	r3, [r2, r3]
 80038b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <HAL_RCC_GetSysClockFreq+0x94>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	0c5b      	lsrs	r3, r3, #17
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	4a11      	ldr	r2, [pc, #68]	; (8003910 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038ca:	5cd3      	ldrb	r3, [r2, r3]
 80038cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <HAL_RCC_GetSysClockFreq+0x98>)
 80038d2:	fb03 f202 	mul.w	r2, r3, r2
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e004      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a0c      	ldr	r2, [pc, #48]	; (8003914 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038e4:	fb02 f303 	mul.w	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	613b      	str	r3, [r7, #16]
      break;
 80038ee:	e002      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_RCC_GetSysClockFreq+0x98>)
 80038f2:	613b      	str	r3, [r7, #16]
      break;
 80038f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f6:	693b      	ldr	r3, [r7, #16]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	007a1200 	.word	0x007a1200
 800390c:	080097dc 	.word	0x080097dc
 8003910:	080097ec 	.word	0x080097ec
 8003914:	003d0900 	.word	0x003d0900

08003918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800391c:	4b02      	ldr	r3, [pc, #8]	; (8003928 <HAL_RCC_GetHCLKFreq+0x10>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	20000000 	.word	0x20000000

0800392c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003930:	f7ff fff2 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	; (8003950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000
 8003950:	080097d4 	.word	0x080097d4

08003954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003958:	f7ff ffde 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	0adb      	lsrs	r3, r3, #11
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4903      	ldr	r1, [pc, #12]	; (8003978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	080097d4 	.word	0x080097d4

0800397c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <RCC_Delay+0x34>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <RCC_Delay+0x38>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	0a5b      	lsrs	r3, r3, #9
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003998:	bf00      	nop
  }
  while (Delay --);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1e5a      	subs	r2, r3, #1
 800399e:	60fa      	str	r2, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f9      	bne.n	8003998 <RCC_Delay+0x1c>
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	20000000 	.word	0x20000000
 80039b4:	10624dd3 	.word	0x10624dd3

080039b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d07d      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039d4:	2300      	movs	r3, #0
 80039d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d8:	4b4f      	ldr	r3, [pc, #316]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10d      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e4:	4b4c      	ldr	r3, [pc, #304]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4a4b      	ldr	r2, [pc, #300]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ee:	61d3      	str	r3, [r2, #28]
 80039f0:	4b49      	ldr	r3, [pc, #292]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fc:	2301      	movs	r3, #1
 80039fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	4b46      	ldr	r3, [pc, #280]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d118      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0c:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a42      	ldr	r2, [pc, #264]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a18:	f7fe f95e 	bl	8001cd8 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	e008      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a20:	f7fe f95a 	bl	8001cd8 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	; 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e06d      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	4b3a      	ldr	r3, [pc, #232]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a3e:	4b36      	ldr	r3, [pc, #216]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d02e      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d027      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a5c:	4b2e      	ldr	r3, [pc, #184]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a66:	4b2e      	ldr	r3, [pc, #184]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a6c:	4b2c      	ldr	r3, [pc, #176]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a72:	4a29      	ldr	r2, [pc, #164]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d014      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fe f929 	bl	8001cd8 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fe f925 	bl	8001cd8 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e036      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0ee      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aac:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4917      	ldr	r1, [pc, #92]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac4:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	4a13      	ldr	r2, [pc, #76]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ace:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003adc:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	490b      	ldr	r1, [pc, #44]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003afa:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	4904      	ldr	r1, [pc, #16]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	42420440 	.word	0x42420440

08003b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e076      	b.n	8003c24 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d108      	bne.n	8003b50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b46:	d009      	beq.n	8003b5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	61da      	str	r2, [r3, #28]
 8003b4e:	e005      	b.n	8003b5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd fe8c 	bl	8001894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be0:	ea42 0103 	orr.w	r1, r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	0c1a      	lsrs	r2, r3, #16
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f002 0204 	and.w	r2, r2, #4
 8003c02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69da      	ldr	r2, [r3, #28]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_SPI_Transmit+0x22>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e12d      	b.n	8003eaa <HAL_SPI_Transmit+0x27e>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c56:	f7fe f83f 	bl	8001cd8 <HAL_GetTick>
 8003c5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d002      	beq.n	8003c72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c70:	e116      	b.n	8003ea0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_SPI_Transmit+0x52>
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c82:	e10d      	b.n	8003ea0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2203      	movs	r2, #3
 8003c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	88fa      	ldrh	r2, [r7, #6]
 8003ca2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cca:	d10f      	bne.n	8003cec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d007      	beq.n	8003d0a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d12:	d14f      	bne.n	8003db4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_SPI_Transmit+0xf6>
 8003d1c:	8afb      	ldrh	r3, [r7, #22]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d142      	bne.n	8003da8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	881a      	ldrh	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	1c9a      	adds	r2, r3, #2
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d46:	e02f      	b.n	8003da8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d112      	bne.n	8003d7c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	881a      	ldrh	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	1c9a      	adds	r2, r3, #2
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d7a:	e015      	b.n	8003da8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d7c:	f7fd ffac 	bl	8001cd8 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d803      	bhi.n	8003d94 <HAL_SPI_Transmit+0x168>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d92:	d102      	bne.n	8003d9a <HAL_SPI_Transmit+0x16e>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003da6:	e07b      	b.n	8003ea0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1ca      	bne.n	8003d48 <HAL_SPI_Transmit+0x11c>
 8003db2:	e050      	b.n	8003e56 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_SPI_Transmit+0x196>
 8003dbc:	8afb      	ldrh	r3, [r7, #22]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d144      	bne.n	8003e4c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	7812      	ldrb	r2, [r2, #0]
 8003dce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003de8:	e030      	b.n	8003e4c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d113      	bne.n	8003e20 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	7812      	ldrb	r2, [r2, #0]
 8003e04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e1e:	e015      	b.n	8003e4c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e20:	f7fd ff5a 	bl	8001cd8 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d803      	bhi.n	8003e38 <HAL_SPI_Transmit+0x20c>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d102      	bne.n	8003e3e <HAL_SPI_Transmit+0x212>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e4a:	e029      	b.n	8003ea0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1c9      	bne.n	8003dea <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fbcc 	bl	80045f8 <SPI_EndRxTxTransaction>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	77fb      	strb	r3, [r7, #31]
 8003e96:	e003      	b.n	8003ea0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ea8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b088      	sub	sp, #32
 8003eb6:	af02      	add	r7, sp, #8
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d002      	beq.n	8003ed8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ed6:	e0fb      	b.n	80040d0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee0:	d112      	bne.n	8003f08 <HAL_SPI_Receive+0x56>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10e      	bne.n	8003f08 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2204      	movs	r2, #4
 8003eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ef2:	88fa      	ldrh	r2, [r7, #6]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f8ef 	bl	80040e2 <HAL_SPI_TransmitReceive>
 8003f04:	4603      	mov	r3, r0
 8003f06:	e0e8      	b.n	80040da <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_SPI_Receive+0x64>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e0e1      	b.n	80040da <HAL_SPI_Receive+0x228>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f1e:	f7fd fedb 	bl	8001cd8 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_SPI_Receive+0x7e>
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f34:	e0cc      	b.n	80040d0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2204      	movs	r2, #4
 8003f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	88fa      	ldrh	r2, [r7, #6]
 8003f4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	d10f      	bne.n	8003f9e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d007      	beq.n	8003fbc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d16a      	bne.n	800409a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003fc4:	e032      	b.n	800402c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d115      	bne.n	8004000 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f103 020c 	add.w	r2, r3, #12
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	7812      	ldrb	r2, [r2, #0]
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ffe:	e015      	b.n	800402c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004000:	f7fd fe6a 	bl	8001cd8 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d803      	bhi.n	8004018 <HAL_SPI_Receive+0x166>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004016:	d102      	bne.n	800401e <HAL_SPI_Receive+0x16c>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800402a:	e051      	b.n	80040d0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1c7      	bne.n	8003fc6 <HAL_SPI_Receive+0x114>
 8004036:	e035      	b.n	80040a4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d113      	bne.n	800406e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	b292      	uxth	r2, r2
 8004052:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	1c9a      	adds	r2, r3, #2
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800406c:	e015      	b.n	800409a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800406e:	f7fd fe33 	bl	8001cd8 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d803      	bhi.n	8004086 <HAL_SPI_Receive+0x1d4>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d102      	bne.n	800408c <HAL_SPI_Receive+0x1da>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004098:	e01a      	b.n	80040d0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1c9      	bne.n	8004038 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fa53 	bl	8004554 <SPI_EndRxTransaction>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
 80040c6:	e003      	b.n	80040d0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b08c      	sub	sp, #48	; 0x30
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040f0:	2301      	movs	r3, #1
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x26>
 8004104:	2302      	movs	r3, #2
 8004106:	e198      	b.n	800443a <HAL_SPI_TransmitReceive+0x358>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004110:	f7fd fde2 	bl	8001cd8 <HAL_GetTick>
 8004114:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800411c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004126:	887b      	ldrh	r3, [r7, #2]
 8004128:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800412a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800412e:	2b01      	cmp	r3, #1
 8004130:	d00f      	beq.n	8004152 <HAL_SPI_TransmitReceive+0x70>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004138:	d107      	bne.n	800414a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <HAL_SPI_TransmitReceive+0x68>
 8004142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004146:	2b04      	cmp	r3, #4
 8004148:	d003      	beq.n	8004152 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800414a:	2302      	movs	r3, #2
 800414c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004150:	e16d      	b.n	800442e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_SPI_TransmitReceive+0x82>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_SPI_TransmitReceive+0x82>
 800415e:	887b      	ldrh	r3, [r7, #2]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800416a:	e160      	b.n	800442e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b04      	cmp	r3, #4
 8004176:	d003      	beq.n	8004180 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2205      	movs	r2, #5
 800417c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	887a      	ldrh	r2, [r7, #2]
 8004196:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	887a      	ldrh	r2, [r7, #2]
 80041a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d007      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041dc:	d17c      	bne.n	80042d8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_SPI_TransmitReceive+0x10a>
 80041e6:	8b7b      	ldrh	r3, [r7, #26]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d16a      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	881a      	ldrh	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	1c9a      	adds	r2, r3, #2
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004210:	e057      	b.n	80042c2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b02      	cmp	r3, #2
 800421e:	d11b      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x176>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <HAL_SPI_TransmitReceive+0x176>
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d113      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	881a      	ldrh	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	1c9a      	adds	r2, r3, #2
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d119      	bne.n	800429a <HAL_SPI_TransmitReceive+0x1b8>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d014      	beq.n	800429a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	b292      	uxth	r2, r2
 800427c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	1c9a      	adds	r2, r3, #2
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004296:	2301      	movs	r3, #1
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800429a:	f7fd fd1d 	bl	8001cd8 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d80b      	bhi.n	80042c2 <HAL_SPI_TransmitReceive+0x1e0>
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d007      	beq.n	80042c2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80042c0:	e0b5      	b.n	800442e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1a2      	bne.n	8004212 <HAL_SPI_TransmitReceive+0x130>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d19d      	bne.n	8004212 <HAL_SPI_TransmitReceive+0x130>
 80042d6:	e080      	b.n	80043da <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_SPI_TransmitReceive+0x204>
 80042e0:	8b7b      	ldrh	r3, [r7, #26]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d16f      	bne.n	80043c6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	7812      	ldrb	r2, [r2, #0]
 80042f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800430c:	e05b      	b.n	80043c6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b02      	cmp	r3, #2
 800431a:	d11c      	bne.n	8004356 <HAL_SPI_TransmitReceive+0x274>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d017      	beq.n	8004356 <HAL_SPI_TransmitReceive+0x274>
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d114      	bne.n	8004356 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b01      	cmp	r3, #1
 8004362:	d119      	bne.n	8004398 <HAL_SPI_TransmitReceive+0x2b6>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d014      	beq.n	8004398 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004394:	2301      	movs	r3, #1
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004398:	f7fd fc9e 	bl	8001cd8 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d803      	bhi.n	80043b0 <HAL_SPI_TransmitReceive+0x2ce>
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d102      	bne.n	80043b6 <HAL_SPI_TransmitReceive+0x2d4>
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d107      	bne.n	80043c6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80043c4:	e033      	b.n	800442e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d19e      	bne.n	800430e <HAL_SPI_TransmitReceive+0x22c>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d199      	bne.n	800430e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f90a 	bl	80045f8 <SPI_EndRxTxTransaction>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d006      	beq.n	80043f8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043f6:	e01a      	b.n	800442e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004424:	e003      	b.n	800442e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800443a:	4618      	mov	r0, r3
 800443c:	3730      	adds	r7, #48	; 0x30
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004454:	f7fd fc40 	bl	8001cd8 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	4413      	add	r3, r2
 8004462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004464:	f7fd fc38 	bl	8001cd8 <HAL_GetTick>
 8004468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800446a:	4b39      	ldr	r3, [pc, #228]	; (8004550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	015b      	lsls	r3, r3, #5
 8004470:	0d1b      	lsrs	r3, r3, #20
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447a:	e054      	b.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d050      	beq.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004484:	f7fd fc28 	bl	8001cd8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	429a      	cmp	r2, r3
 8004492:	d902      	bls.n	800449a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d13d      	bne.n	8004516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b2:	d111      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044bc:	d004      	beq.n	80044c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c6:	d107      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e0:	d10f      	bne.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e017      	b.n	8004546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3b01      	subs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	429a      	cmp	r2, r3
 8004542:	d19b      	bne.n	800447c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000000 	.word	0x20000000

08004554 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004568:	d111      	bne.n	800458e <SPI_EndRxTransaction+0x3a>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004572:	d004      	beq.n	800457e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457c:	d107      	bne.n	800458e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004596:	d117      	bne.n	80045c8 <SPI_EndRxTransaction+0x74>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a0:	d112      	bne.n	80045c8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2101      	movs	r1, #1
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff ff49 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01a      	beq.n	80045ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e013      	b.n	80045f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2200      	movs	r2, #0
 80045d0:	2180      	movs	r1, #128	; 0x80
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7ff ff36 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f043 0220 	orr.w	r2, r3, #32
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e000      	b.n	80045f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2200      	movs	r2, #0
 800460c:	2180      	movs	r1, #128	; 0x80
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7ff ff18 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461e:	f043 0220 	orr.w	r2, r3, #32
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e000      	b.n	800462c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e042      	b.n	80046cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fd f964 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2224      	movs	r2, #36	; 0x24
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fdfb 	bl	8005274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800468c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695a      	ldr	r2, [r3, #20]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800469c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08a      	sub	sp, #40	; 0x28
 80046d8:	af02      	add	r7, sp, #8
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	4613      	mov	r3, r2
 80046e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d16d      	bne.n	80047d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_UART_Transmit+0x2c>
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e066      	b.n	80047d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2221      	movs	r2, #33	; 0x21
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004712:	f7fd fae1 	bl	8001cd8 <HAL_GetTick>
 8004716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	88fa      	ldrh	r2, [r7, #6]
 8004722:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472c:	d108      	bne.n	8004740 <HAL_UART_Transmit+0x6c>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d104      	bne.n	8004740 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	e003      	b.n	8004748 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004748:	e02a      	b.n	80047a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fb4a 	bl	8004dee <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e036      	b.n	80047d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004778:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	3302      	adds	r3, #2
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	e007      	b.n	8004792 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	781a      	ldrb	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	3301      	adds	r3, #1
 8004790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1cf      	bne.n	800474a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2140      	movs	r1, #64	; 0x40
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fb1a 	bl	8004dee <UART_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e006      	b.n	80047d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b08c      	sub	sp, #48	; 0x30
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	4613      	mov	r3, r2
 80047e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d14a      	bne.n	800488a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e043      	b.n	800488c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004810:	88fb      	ldrh	r3, [r7, #6]
 8004812:	461a      	mov	r2, r3
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fb57 	bl	8004eca <UART_Start_Receive_IT>
 800481c:	4603      	mov	r3, r0
 800481e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004826:	2b00      	cmp	r3, #0
 8004828:	d12c      	bne.n	8004884 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	2b01      	cmp	r3, #1
 8004830:	d125      	bne.n	800487e <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004832:	2300      	movs	r3, #0
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	617b      	str	r3, [r7, #20]
   return(result);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f043 0310 	orr.w	r3, r3, #16
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004868:	627a      	str	r2, [r7, #36]	; 0x24
 800486a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6a39      	ldr	r1, [r7, #32]
 800486e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	61fb      	str	r3, [r7, #28]
   return(result);
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800487c:	e002      	b.n	8004884 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004888:	e000      	b.n	800488c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800488a:	2302      	movs	r3, #2
  }
}
 800488c:	4618      	mov	r0, r3
 800488e:	3730      	adds	r7, #48	; 0x30
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b0ba      	sub	sp, #232	; 0xe8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10f      	bne.n	80048fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_UART_IRQHandler+0x66>
 80048e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fbff 	bl	80050f6 <UART_Receive_IT>
      return;
 80048f8:	e25b      	b.n	8004db2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80de 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x22c>
 8004904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004914:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80d1 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_UART_IRQHandler+0xae>
 800492a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	f043 0201 	orr.w	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_UART_IRQHandler+0xd2>
 800494e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495e:	f043 0202 	orr.w	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <HAL_UART_IRQHandler+0xf6>
 8004972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f043 0204 	orr.w	r2, r3, #4
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800498a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d011      	beq.n	80049ba <HAL_UART_IRQHandler+0x126>
 8004996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d105      	bne.n	80049ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	f043 0208 	orr.w	r2, r3, #8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 81f2 	beq.w	8004da8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_UART_IRQHandler+0x14e>
 80049d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fb8a 	bl	80050f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <HAL_UART_IRQHandler+0x17a>
 8004a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d04f      	beq.n	8004aae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa94 	bl	8004f3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d041      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3314      	adds	r3, #20
 8004a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3314      	adds	r3, #20
 8004a4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1d9      	bne.n	8004a22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d013      	beq.n	8004a9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	4a7e      	ldr	r2, [pc, #504]	; (8004c74 <HAL_UART_IRQHandler+0x3e0>)
 8004a7c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fd fcb0 	bl	80023e8 <HAL_DMA_Abort_IT>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	e00e      	b.n	8004abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f99c 	bl	8004ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	e00a      	b.n	8004abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f998 	bl	8004ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aac:	e006      	b.n	8004abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f994 	bl	8004ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004aba:	e175      	b.n	8004da8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	bf00      	nop
    return;
 8004abe:	e173      	b.n	8004da8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	f040 814f 	bne.w	8004d68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8148 	beq.w	8004d68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8141 	beq.w	8004d68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80b6 	beq.w	8004c78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8145 	beq.w	8004dac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	f080 813e 	bcs.w	8004dac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	f000 8088 	beq.w	8004c54 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b70:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1d9      	bne.n	8004b44 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3314      	adds	r3, #20
 8004b96:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ba2:	f023 0301 	bic.w	r3, r3, #1
 8004ba6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3314      	adds	r3, #20
 8004bb0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bb4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bb8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e1      	bne.n	8004b90 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3314      	adds	r3, #20
 8004bd2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3314      	adds	r3, #20
 8004bec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bf0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bf2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bf6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e3      	bne.n	8004bcc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c24:	f023 0310 	bic.w	r3, r3, #16
 8004c28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c36:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c38:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e3      	bne.n	8004c12 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fd fb8f 	bl	8002372 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc fd3a 	bl	80016e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c70:	e09c      	b.n	8004dac <HAL_UART_IRQHandler+0x518>
 8004c72:	bf00      	nop
 8004c74:	08005001 	.word	0x08005001
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 808e 	beq.w	8004db0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8089 	beq.w	8004db0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cc2:	647a      	str	r2, [r7, #68]	; 0x44
 8004cc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e3      	bne.n	8004c9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3314      	adds	r3, #20
 8004cf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cfa:	633a      	str	r2, [r7, #48]	; 0x30
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e3      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0310 	bic.w	r3, r3, #16
 8004d32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d40:	61fa      	str	r2, [r7, #28]
 8004d42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	69b9      	ldr	r1, [r7, #24]
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e3      	bne.n	8004d1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7fc fcbf 	bl	80016e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d66:	e023      	b.n	8004db0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <HAL_UART_IRQHandler+0x4f4>
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f951 	bl	8005028 <UART_Transmit_IT>
    return;
 8004d86:	e014      	b.n	8004db2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00e      	beq.n	8004db2 <HAL_UART_IRQHandler+0x51e>
 8004d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f990 	bl	80050c6 <UART_EndTransmit_IT>
    return;
 8004da6:	e004      	b.n	8004db2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004da8:	bf00      	nop
 8004daa:	e002      	b.n	8004db2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004dac:	bf00      	nop
 8004dae:	e000      	b.n	8004db2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004db0:	bf00      	nop
  }
}
 8004db2:	37e8      	adds	r7, #232	; 0xe8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr

08004ddc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b090      	sub	sp, #64	; 0x40
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	603b      	str	r3, [r7, #0]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dfe:	e050      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d04c      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x30>
 8004e0e:	f7fc ff63 	bl	8001cd8 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d241      	bcs.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e3e:	637a      	str	r2, [r7, #52]	; 0x34
 8004e40:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e5      	bne.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3314      	adds	r3, #20
 8004e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	613b      	str	r3, [r7, #16]
   return(result);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3314      	adds	r3, #20
 8004e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e72:	623a      	str	r2, [r7, #32]
 8004e74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	69f9      	ldr	r1, [r7, #28]
 8004e78:	6a3a      	ldr	r2, [r7, #32]
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e5      	bne.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e00f      	b.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	bf0c      	ite	eq
 8004eb2:	2301      	moveq	r3, #1
 8004eb4:	2300      	movne	r3, #0
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d09f      	beq.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3740      	adds	r7, #64	; 0x40
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	88fa      	ldrh	r2, [r7, #6]
 8004ee2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	88fa      	ldrh	r2, [r7, #6]
 8004ee8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2222      	movs	r2, #34	; 0x22
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f0e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695a      	ldr	r2, [r3, #20]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0220 	orr.w	r2, r2, #32
 8004f2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b095      	sub	sp, #84	; 0x54
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	330c      	adds	r3, #12
 8004f4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f64:	643a      	str	r2, [r7, #64]	; 0x40
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e5      	bne.n	8004f44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3314      	adds	r3, #20
 8004f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3314      	adds	r3, #20
 8004f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e5      	bne.n	8004f78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d119      	bne.n	8004fe8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f023 0310 	bic.w	r3, r3, #16
 8004fca:	647b      	str	r3, [r7, #68]	; 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd4:	61ba      	str	r2, [r7, #24]
 8004fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	6979      	ldr	r1, [r7, #20]
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e5      	bne.n	8004fb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ff6:	bf00      	nop
 8004ff8:	3754      	adds	r7, #84	; 0x54
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr

08005000 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff fede 	bl	8004ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b21      	cmp	r3, #33	; 0x21
 800503a:	d13e      	bne.n	80050ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005044:	d114      	bne.n	8005070 <UART_Transmit_IT+0x48>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d110      	bne.n	8005070 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005062:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	1c9a      	adds	r2, r3, #2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	621a      	str	r2, [r3, #32]
 800506e:	e008      	b.n	8005082 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	1c59      	adds	r1, r3, #1
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6211      	str	r1, [r2, #32]
 800507a:	781a      	ldrb	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29b      	uxth	r3, r3
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	4619      	mov	r1, r3
 8005090:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	e000      	b.n	80050bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050ba:	2302      	movs	r3, #2
  }
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr

080050c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff fe66 	bl	8004db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b08c      	sub	sp, #48	; 0x30
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b22      	cmp	r3, #34	; 0x22
 8005108:	f040 80ae 	bne.w	8005268 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005114:	d117      	bne.n	8005146 <UART_Receive_IT+0x50>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d113      	bne.n	8005146 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	b29b      	uxth	r3, r3
 8005130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005134:	b29a      	uxth	r2, r3
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	1c9a      	adds	r2, r3, #2
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	629a      	str	r2, [r3, #40]	; 0x28
 8005144:	e026      	b.n	8005194 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005158:	d007      	beq.n	800516a <UART_Receive_IT+0x74>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <UART_Receive_IT+0x82>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	b2da      	uxtb	r2, r3
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	e008      	b.n	800518a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005184:	b2da      	uxtb	r2, r3
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29b      	uxth	r3, r3
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	4619      	mov	r1, r3
 80051a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d15d      	bne.n	8005264 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0220 	bic.w	r2, r2, #32
 80051b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0201 	bic.w	r2, r2, #1
 80051d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d135      	bne.n	800525a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	330c      	adds	r3, #12
 80051fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	e853 3f00 	ldrex	r3, [r3]
 8005202:	613b      	str	r3, [r7, #16]
   return(result);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f023 0310 	bic.w	r3, r3, #16
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	623a      	str	r2, [r7, #32]
 8005216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	69f9      	ldr	r1, [r7, #28]
 800521a:	6a3a      	ldr	r2, [r7, #32]
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	61bb      	str	r3, [r7, #24]
   return(result);
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e5      	bne.n	80051f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	2b10      	cmp	r3, #16
 8005234:	d10a      	bne.n	800524c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fc fa46 	bl	80016e4 <HAL_UARTEx_RxEventCallback>
 8005258:	e002      	b.n	8005260 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fdb5 	bl	8004dca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	e002      	b.n	800526a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	e000      	b.n	800526a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005268:	2302      	movs	r3, #2
  }
}
 800526a:	4618      	mov	r0, r3
 800526c:	3730      	adds	r7, #48	; 0x30
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052ae:	f023 030c 	bic.w	r3, r3, #12
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	430b      	orrs	r3, r1
 80052ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <UART_SetConfig+0x114>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d103      	bne.n	80052e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052dc:	f7fe fb3a 	bl	8003954 <HAL_RCC_GetPCLK2Freq>
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	e002      	b.n	80052ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052e4:	f7fe fb22 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 80052e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009a      	lsls	r2, r3, #2
 80052f4:	441a      	add	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005300:	4a22      	ldr	r2, [pc, #136]	; (800538c <UART_SetConfig+0x118>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	0119      	lsls	r1, r3, #4
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009a      	lsls	r2, r3, #2
 8005314:	441a      	add	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005320:	4b1a      	ldr	r3, [pc, #104]	; (800538c <UART_SetConfig+0x118>)
 8005322:	fba3 0302 	umull	r0, r3, r3, r2
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	2064      	movs	r0, #100	; 0x64
 800532a:	fb00 f303 	mul.w	r3, r0, r3
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	3332      	adds	r3, #50	; 0x32
 8005334:	4a15      	ldr	r2, [pc, #84]	; (800538c <UART_SetConfig+0x118>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005340:	4419      	add	r1, r3
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009a      	lsls	r2, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	fbb2 f2f3 	udiv	r2, r2, r3
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <UART_SetConfig+0x118>)
 800535a:	fba3 0302 	umull	r0, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	2064      	movs	r0, #100	; 0x64
 8005362:	fb00 f303 	mul.w	r3, r0, r3
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	3332      	adds	r3, #50	; 0x32
 800536c:	4a07      	ldr	r2, [pc, #28]	; (800538c <UART_SetConfig+0x118>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f003 020f 	and.w	r2, r3, #15
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	440a      	add	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40013800 	.word	0x40013800
 800538c:	51eb851f 	.word	0x51eb851f

08005390 <AWG_Load_Waveform>:
#include "math.h"

#define MaxDepth 2048 // max AWG samples

void AWG_Load_Waveform(AWG_setup_struct AWG1)
{
 8005390:	b084      	sub	sp, #16
 8005392:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800539e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOLA_enable_features(AWG_EN, 0); // disable AWG
 80053a2:	2100      	movs	r1, #0
 80053a4:	2002      	movs	r0, #2
 80053a6:	f000 fb45 	bl	8005a34 <LOLA_enable_features>

	uint8_t byte[4];
	int16_t data;

	uint16_t depth = trimInt((int)round(DACmaxFreq/AWG1.Freq), 1, (MaxDepth-1));
 80053aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053ae:	a1b0      	add	r1, pc, #704	; (adr r1, 8005670 <AWG_Load_Waveform+0x2e0>)
 80053b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053b4:	f7fb f9ba 	bl	800072c <__aeabi_ddiv>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4610      	mov	r0, r2
 80053be:	4619      	mov	r1, r3
 80053c0:	f003 fc00 	bl	8008bc4 <round>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4610      	mov	r0, r2
 80053ca:	4619      	mov	r1, r3
 80053cc:	f7fb fb34 	bl	8000a38 <__aeabi_d2iz>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80053d6:	2101      	movs	r1, #1
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fedb 	bl	8006194 <trimInt>
 80053de:	4603      	mov	r3, r0
 80053e0:	827b      	strh	r3, [r7, #18]


	uint16_t DepthPos = trimInt((int)round(depth*AWG1.DutyCycle/100), 1, (MaxDepth-1));
 80053e2:	8a7b      	ldrh	r3, [r7, #18]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fb fc79 	bl	8000cdc <__aeabi_i2f>
 80053ea:	4602      	mov	r2, r0
 80053ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f7fb fcc7 	bl	8000d84 <__aeabi_fmul>
 80053f6:	4603      	mov	r3, r0
 80053f8:	49a1      	ldr	r1, [pc, #644]	; (8005680 <AWG_Load_Waveform+0x2f0>)
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fb fd76 	bl	8000eec <__aeabi_fdiv>
 8005400:	4603      	mov	r3, r0
 8005402:	4618      	mov	r0, r3
 8005404:	f7fb f810 	bl	8000428 <__aeabi_f2d>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4610      	mov	r0, r2
 800540e:	4619      	mov	r1, r3
 8005410:	f003 fbd8 	bl	8008bc4 <round>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4610      	mov	r0, r2
 800541a:	4619      	mov	r1, r3
 800541c:	f7fb fb0c 	bl	8000a38 <__aeabi_d2iz>
 8005420:	4603      	mov	r3, r0
 8005422:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005426:	2101      	movs	r1, #1
 8005428:	4618      	mov	r0, r3
 800542a:	f000 feb3 	bl	8006194 <trimInt>
 800542e:	4603      	mov	r3, r0
 8005430:	823b      	strh	r3, [r7, #16]
	uint16_t DepthNeg = trimInt((int)(depth-DepthPos), 1, (MaxDepth-1));
 8005432:	8a7a      	ldrh	r2, [r7, #18]
 8005434:	8a3b      	ldrh	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800543c:	2101      	movs	r1, #1
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fea8 	bl	8006194 <trimInt>
 8005444:	4603      	mov	r3, r0
 8005446:	81fb      	strh	r3, [r7, #14]

	// setting sample count
	byte[0] = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	703b      	strb	r3, [r7, #0]
	byte[1] = (uint8_t)((depth>>8)&0x00ff);
 800544c:	8a7b      	ldrh	r3, [r7, #18]
 800544e:	0a1b      	lsrs	r3, r3, #8
 8005450:	b29b      	uxth	r3, r3
 8005452:	b2db      	uxtb	r3, r3
 8005454:	707b      	strb	r3, [r7, #1]
	byte[2] = (uint8_t)(depth&0x00ff);
 8005456:	8a7b      	ldrh	r3, [r7, #18]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	70bb      	strb	r3, [r7, #2]
	byte[3] = (uint8_t)AWG_MAXADRESS;
 800545c:	2306      	movs	r3, #6
 800545e:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005460:	4639      	mov	r1, r7
 8005462:	2364      	movs	r3, #100	; 0x64
 8005464:	2204      	movs	r2, #4
 8005466:	4887      	ldr	r0, [pc, #540]	; (8005684 <AWG_Load_Waveform+0x2f4>)
 8005468:	f7fe fbe0 	bl	8003c2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 800546c:	2200      	movs	r2, #0
 800546e:	2110      	movs	r1, #16
 8005470:	4885      	ldr	r0, [pc, #532]	; (8005688 <AWG_Load_Waveform+0x2f8>)
 8005472:	f7fd f9cc 	bl	800280e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8005476:	2201      	movs	r2, #1
 8005478:	2110      	movs	r1, #16
 800547a:	4883      	ldr	r0, [pc, #524]	; (8005688 <AWG_Load_Waveform+0x2f8>)
 800547c:	f7fd f9c7 	bl	800280e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005480:	2200      	movs	r2, #0
 8005482:	2110      	movs	r1, #16
 8005484:	4880      	ldr	r0, [pc, #512]	; (8005688 <AWG_Load_Waveform+0x2f8>)
 8005486:	f7fd f9c2 	bl	800280e <HAL_GPIO_WritePin>

	//Setting up clock
	uint32_t D = (uint32_t)round(MCLKfreq/(depth*AWG1.Freq));
 800548a:	8a7b      	ldrh	r3, [r7, #18]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fa ffb9 	bl	8000404 <__aeabi_i2d>
 8005492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005496:	f7fb f81f 	bl	80004d8 <__aeabi_dmul>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	a176      	add	r1, pc, #472	; (adr r1, 8005678 <AWG_Load_Waveform+0x2e8>)
 80054a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054a4:	f7fb f942 	bl	800072c <__aeabi_ddiv>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4610      	mov	r0, r2
 80054ae:	4619      	mov	r1, r3
 80054b0:	f003 fb88 	bl	8008bc4 <round>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4610      	mov	r0, r2
 80054ba:	4619      	mov	r1, r3
 80054bc:	f7fb fae4 	bl	8000a88 <__aeabi_d2uiz>
 80054c0:	4603      	mov	r3, r0
 80054c2:	60bb      	str	r3, [r7, #8]

	data = D;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	82fb      	strh	r3, [r7, #22]

	byte[0] = (uint8_t)((data>>16)&0x00ff);
 80054c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80054cc:	141b      	asrs	r3, r3, #16
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	703b      	strb	r3, [r7, #0]
	byte[1] = (uint8_t)((data>>8)&0x00ff);
 80054d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80054d6:	121b      	asrs	r3, r3, #8
 80054d8:	b21b      	sxth	r3, r3
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	707b      	strb	r3, [r7, #1]
	byte[2] = (uint8_t)(data&0x00ff);
 80054de:	8afb      	ldrh	r3, [r7, #22]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	70bb      	strb	r3, [r7, #2]
	byte[3] = (uint8_t)AWG_D;
 80054e4:	2302      	movs	r3, #2
 80054e6:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80054e8:	4639      	mov	r1, r7
 80054ea:	2364      	movs	r3, #100	; 0x64
 80054ec:	2204      	movs	r2, #4
 80054ee:	4865      	ldr	r0, [pc, #404]	; (8005684 <AWG_Load_Waveform+0x2f4>)
 80054f0:	f7fe fb9c 	bl	8003c2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80054f4:	2201      	movs	r2, #1
 80054f6:	2110      	movs	r1, #16
 80054f8:	4863      	ldr	r0, [pc, #396]	; (8005688 <AWG_Load_Waveform+0x2f8>)
 80054fa:	f7fd f988 	bl	800280e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80054fe:	2200      	movs	r2, #0
 8005500:	2110      	movs	r1, #16
 8005502:	4861      	ldr	r0, [pc, #388]	; (8005688 <AWG_Load_Waveform+0x2f8>)
 8005504:	f7fd f983 	bl	800280e <HAL_GPIO_WritePin>

	// loading waveform
	float relativeDACcode = 2047*AWG1.Upp/(2*MAX_AMPLITUDE); // multiply any number from -1 to 1 and you will get direct code for DAC
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	4960      	ldr	r1, [pc, #384]	; (800568c <AWG_Load_Waveform+0x2fc>)
 800550c:	4618      	mov	r0, r3
 800550e:	f7fb fc39 	bl	8000d84 <__aeabi_fmul>
 8005512:	4603      	mov	r3, r0
 8005514:	461c      	mov	r4, r3
 8005516:	4b5e      	ldr	r3, [pc, #376]	; (8005690 <AWG_Load_Waveform+0x300>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4619      	mov	r1, r3
 800551c:	4618      	mov	r0, r3
 800551e:	f7fb fb29 	bl	8000b74 <__addsf3>
 8005522:	4603      	mov	r3, r0
 8005524:	4619      	mov	r1, r3
 8005526:	4620      	mov	r0, r4
 8005528:	f7fb fce0 	bl	8000eec <__aeabi_fdiv>
 800552c:	4603      	mov	r3, r0
 800552e:	607b      	str	r3, [r7, #4]

	for(int16_t addr = 0; addr < depth; addr++)
 8005530:	2300      	movs	r3, #0
 8005532:	82bb      	strh	r3, [r7, #20]
 8005534:	e16b      	b.n	800580e <AWG_Load_Waveform+0x47e>
	{

		switch(AWG1.waveform)
 8005536:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800553a:	2b03      	cmp	r3, #3
 800553c:	f200 8133 	bhi.w	80057a6 <AWG_Load_Waveform+0x416>
 8005540:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <AWG_Load_Waveform+0x1b8>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	08005559 	.word	0x08005559
 800554c:	080055ed 	.word	0x080055ed
 8005550:	08005723 	.word	0x08005723
 8005554:	080057a7 	.word	0x080057a7
		{
			case Square: data = (int16_t)round((addr>=(depth*AWG1.DutyCycle/100))*relativeDACcode-(relativeDACcode/2.0)); break;
 8005558:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800555c:	4618      	mov	r0, r3
 800555e:	f7fb fbbd 	bl	8000cdc <__aeabi_i2f>
 8005562:	4604      	mov	r4, r0
 8005564:	8a7b      	ldrh	r3, [r7, #18]
 8005566:	4618      	mov	r0, r3
 8005568:	f7fb fbb8 	bl	8000cdc <__aeabi_i2f>
 800556c:	4602      	mov	r2, r0
 800556e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005570:	4619      	mov	r1, r3
 8005572:	4610      	mov	r0, r2
 8005574:	f7fb fc06 	bl	8000d84 <__aeabi_fmul>
 8005578:	4603      	mov	r3, r0
 800557a:	4941      	ldr	r1, [pc, #260]	; (8005680 <AWG_Load_Waveform+0x2f0>)
 800557c:	4618      	mov	r0, r3
 800557e:	f7fb fcb5 	bl	8000eec <__aeabi_fdiv>
 8005582:	4603      	mov	r3, r0
 8005584:	4619      	mov	r1, r3
 8005586:	4620      	mov	r0, r4
 8005588:	f7fb fdae 	bl	80010e8 <__aeabi_fcmpge>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <AWG_Load_Waveform+0x208>
 8005592:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005596:	e001      	b.n	800559c <AWG_Load_Waveform+0x20c>
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fb fbf0 	bl	8000d84 <__aeabi_fmul>
 80055a4:	4603      	mov	r3, r0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fa ff3e 	bl	8000428 <__aeabi_f2d>
 80055ac:	4604      	mov	r4, r0
 80055ae:	460d      	mov	r5, r1
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fa ff39 	bl	8000428 <__aeabi_f2d>
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055be:	f7fb f8b5 	bl	800072c <__aeabi_ddiv>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4620      	mov	r0, r4
 80055c8:	4629      	mov	r1, r5
 80055ca:	f7fa fdcd 	bl	8000168 <__aeabi_dsub>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4610      	mov	r0, r2
 80055d4:	4619      	mov	r1, r3
 80055d6:	f003 faf5 	bl	8008bc4 <round>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	f7fb fa29 	bl	8000a38 <__aeabi_d2iz>
 80055e6:	4603      	mov	r3, r0
 80055e8:	82fb      	strh	r3, [r7, #22]
 80055ea:	e0dc      	b.n	80057a6 <AWG_Load_Waveform+0x416>

			case Triangle:	if(addr <= DepthPos) data = (int16_t)round(relativeDACcode*addr/(DepthPos*1.0)-(relativeDACcode/2.0)); // rising edge
 80055ec:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80055f0:	8a3b      	ldrh	r3, [r7, #16]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	dc4e      	bgt.n	8005694 <AWG_Load_Waveform+0x304>
 80055f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fb fb6e 	bl	8000cdc <__aeabi_i2f>
 8005600:	4603      	mov	r3, r0
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4618      	mov	r0, r3
 8005606:	f7fb fbbd 	bl	8000d84 <__aeabi_fmul>
 800560a:	4603      	mov	r3, r0
 800560c:	4618      	mov	r0, r3
 800560e:	f7fa ff0b 	bl	8000428 <__aeabi_f2d>
 8005612:	4604      	mov	r4, r0
 8005614:	460d      	mov	r5, r1
 8005616:	8a3b      	ldrh	r3, [r7, #16]
 8005618:	4618      	mov	r0, r3
 800561a:	f7fa fef3 	bl	8000404 <__aeabi_i2d>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4620      	mov	r0, r4
 8005624:	4629      	mov	r1, r5
 8005626:	f7fb f881 	bl	800072c <__aeabi_ddiv>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4614      	mov	r4, r2
 8005630:	461d      	mov	r5, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fa fef8 	bl	8000428 <__aeabi_f2d>
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005640:	f7fb f874 	bl	800072c <__aeabi_ddiv>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4620      	mov	r0, r4
 800564a:	4629      	mov	r1, r5
 800564c:	f7fa fd8c 	bl	8000168 <__aeabi_dsub>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4610      	mov	r0, r2
 8005656:	4619      	mov	r1, r3
 8005658:	f003 fab4 	bl	8008bc4 <round>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	f7fb f9e8 	bl	8000a38 <__aeabi_d2iz>
 8005668:	4603      	mov	r3, r0
 800566a:	82fb      	strh	r3, [r7, #22]
							else data = (int16_t)round(relativeDACcode*(1-(addr-DepthPos)/(DepthNeg*1.0))-(relativeDACcode/2.0)); break; // falling edge
 800566c:	e09b      	b.n	80057a6 <AWG_Load_Waveform+0x416>
 800566e:	bf00      	nop
 8005670:	00000000 	.word	0x00000000
 8005674:	417312d0 	.word	0x417312d0
 8005678:	00000000 	.word	0x00000000
 800567c:	41b0b076 	.word	0x41b0b076
 8005680:	42c80000 	.word	0x42c80000
 8005684:	20000278 	.word	0x20000278
 8005688:	40010800 	.word	0x40010800
 800568c:	44ffe000 	.word	0x44ffe000
 8005690:	2000035c 	.word	0x2000035c
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fa fec7 	bl	8000428 <__aeabi_f2d>
 800569a:	4604      	mov	r4, r0
 800569c:	460d      	mov	r5, r1
 800569e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80056a2:	8a3b      	ldrh	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fa feac 	bl	8000404 <__aeabi_i2d>
 80056ac:	4680      	mov	r8, r0
 80056ae:	4689      	mov	r9, r1
 80056b0:	89fb      	ldrh	r3, [r7, #14]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fa fea6 	bl	8000404 <__aeabi_i2d>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4640      	mov	r0, r8
 80056be:	4649      	mov	r1, r9
 80056c0:	f7fb f834 	bl	800072c <__aeabi_ddiv>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	f04f 0000 	mov.w	r0, #0
 80056cc:	495a      	ldr	r1, [pc, #360]	; (8005838 <AWG_Load_Waveform+0x4a8>)
 80056ce:	f7fa fd4b 	bl	8000168 <__aeabi_dsub>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4620      	mov	r0, r4
 80056d8:	4629      	mov	r1, r5
 80056da:	f7fa fefd 	bl	80004d8 <__aeabi_dmul>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4614      	mov	r4, r2
 80056e4:	461d      	mov	r5, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fa fe9e 	bl	8000428 <__aeabi_f2d>
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056f4:	f7fb f81a 	bl	800072c <__aeabi_ddiv>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4620      	mov	r0, r4
 80056fe:	4629      	mov	r1, r5
 8005700:	f7fa fd32 	bl	8000168 <__aeabi_dsub>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4610      	mov	r0, r2
 800570a:	4619      	mov	r1, r3
 800570c:	f003 fa5a 	bl	8008bc4 <round>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4610      	mov	r0, r2
 8005716:	4619      	mov	r1, r3
 8005718:	f7fb f98e 	bl	8000a38 <__aeabi_d2iz>
 800571c:	4603      	mov	r3, r0
 800571e:	82fb      	strh	r3, [r7, #22]
 8005720:	e041      	b.n	80057a6 <AWG_Load_Waveform+0x416>

			case Sine: data = (int16_t)round(relativeDACcode*sinf((addr*3.14159*2)/(1.0*depth))); break;
 8005722:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005726:	4618      	mov	r0, r3
 8005728:	f7fa fe6c 	bl	8000404 <__aeabi_i2d>
 800572c:	a340      	add	r3, pc, #256	; (adr r3, 8005830 <AWG_Load_Waveform+0x4a0>)
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f7fa fed1 	bl	80004d8 <__aeabi_dmul>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4610      	mov	r0, r2
 800573c:	4619      	mov	r1, r3
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	f7fa fd13 	bl	800016c <__adddf3>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4614      	mov	r4, r2
 800574c:	461d      	mov	r5, r3
 800574e:	8a7b      	ldrh	r3, [r7, #18]
 8005750:	4618      	mov	r0, r3
 8005752:	f7fa fe57 	bl	8000404 <__aeabi_i2d>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4620      	mov	r0, r4
 800575c:	4629      	mov	r1, r5
 800575e:	f7fa ffe5 	bl	800072c <__aeabi_ddiv>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	f7fb f9ad 	bl	8000ac8 <__aeabi_d2f>
 800576e:	4603      	mov	r3, r0
 8005770:	4618      	mov	r0, r3
 8005772:	f003 f9ed 	bl	8008b50 <sinf>
 8005776:	4603      	mov	r3, r0
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4618      	mov	r0, r3
 800577c:	f7fb fb02 	bl	8000d84 <__aeabi_fmul>
 8005780:	4603      	mov	r3, r0
 8005782:	4618      	mov	r0, r3
 8005784:	f7fa fe50 	bl	8000428 <__aeabi_f2d>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4610      	mov	r0, r2
 800578e:	4619      	mov	r1, r3
 8005790:	f003 fa18 	bl	8008bc4 <round>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4610      	mov	r0, r2
 800579a:	4619      	mov	r1, r3
 800579c:	f7fb f94c 	bl	8000a38 <__aeabi_d2iz>
 80057a0:	4603      	mov	r3, r0
 80057a2:	82fb      	strh	r3, [r7, #22]
 80057a4:	bf00      	nop

			case Func: break;
		}

		byte[0] = (int8_t)((addr>>4)&0x00ff);
 80057a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057aa:	111b      	asrs	r3, r3, #4
 80057ac:	b21b      	sxth	r3, r3
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	703b      	strb	r3, [r7, #0]
		byte[1] = (int8_t)(((data>>8)&0x000f)|((addr<<4)&0x00f0));
 80057b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80057b6:	121b      	asrs	r3, r3, #8
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	b25b      	sxtb	r3, r3
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	b25a      	sxtb	r2, r3
 80057c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	b25b      	sxtb	r3, r3
 80057ca:	f023 030f 	bic.w	r3, r3, #15
 80057ce:	b25b      	sxtb	r3, r3
 80057d0:	4313      	orrs	r3, r2
 80057d2:	b25b      	sxtb	r3, r3
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	707b      	strb	r3, [r7, #1]
		byte[2] = (int8_t)(data&0x00ff);
 80057d8:	8afb      	ldrh	r3, [r7, #22]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	70bb      	strb	r3, [r7, #2]
		byte[3] = (int8_t)AWG_DATA;
 80057de:	2305      	movs	r3, #5
 80057e0:	70fb      	strb	r3, [r7, #3]

		HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 80057e2:	4639      	mov	r1, r7
 80057e4:	2364      	movs	r3, #100	; 0x64
 80057e6:	2204      	movs	r2, #4
 80057e8:	4814      	ldr	r0, [pc, #80]	; (800583c <AWG_Load_Waveform+0x4ac>)
 80057ea:	f7fe fa1f 	bl	8003c2c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 80057ee:	2201      	movs	r2, #1
 80057f0:	2110      	movs	r1, #16
 80057f2:	4813      	ldr	r0, [pc, #76]	; (8005840 <AWG_Load_Waveform+0x4b0>)
 80057f4:	f7fd f80b 	bl	800280e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 80057f8:	2200      	movs	r2, #0
 80057fa:	2110      	movs	r1, #16
 80057fc:	4810      	ldr	r0, [pc, #64]	; (8005840 <AWG_Load_Waveform+0x4b0>)
 80057fe:	f7fd f806 	bl	800280e <HAL_GPIO_WritePin>
	for(int16_t addr = 0; addr < depth; addr++)
 8005802:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005806:	b29b      	uxth	r3, r3
 8005808:	3301      	adds	r3, #1
 800580a:	b29b      	uxth	r3, r3
 800580c:	82bb      	strh	r3, [r7, #20]
 800580e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005812:	8a7b      	ldrh	r3, [r7, #18]
 8005814:	429a      	cmp	r2, r3
 8005816:	f6ff ae8e 	blt.w	8005536 <AWG_Load_Waveform+0x1a6>
	}
		LOLA_enable_features(AWG_EN, 1); // enable AWG
 800581a:	2101      	movs	r1, #1
 800581c:	2002      	movs	r0, #2
 800581e:	f000 f909 	bl	8005a34 <LOLA_enable_features>
}
 8005822:	bf00      	nop
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 800582c:	b004      	add	sp, #16
 800582e:	4770      	bx	lr
 8005830:	f01b866e 	.word	0xf01b866e
 8005834:	400921f9 	.word	0x400921f9
 8005838:	3ff00000 	.word	0x3ff00000
 800583c:	20000278 	.word	0x20000278
 8005840:	40010800 	.word	0x40010800

08005844 <LOLA_Init>:
#include "main.h"
#include "board.h"
#include "ProgRef.h"

uint8_t LOLA_Init(InitType t, uint16_t maxAtempts) // waits forever if maxatempts > 10000
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	460a      	mov	r2, r1
 800584e:	71fb      	strb	r3, [r7, #7]
 8005850:	4613      	mov	r3, r2
 8005852:	80bb      	strh	r3, [r7, #4]
	DACREF(0.0);
 8005854:	f04f 0000 	mov.w	r0, #0
 8005858:	f000 f9fc 	bl	8005c54 <DACREF>
	DACOFFS(0);
 800585c:	f04f 0000 	mov.w	r0, #0
 8005860:	f000 fa58 	bl	8005d14 <DACOFFS>

	// Reset
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 0);
 8005864:	2200      	movs	r2, #0
 8005866:	2108      	movs	r1, #8
 8005868:	4865      	ldr	r0, [pc, #404]	; (8005a00 <LOLA_Init+0x1bc>)
 800586a:	f7fc ffd0 	bl	800280e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800586e:	2001      	movs	r0, #1
 8005870:	f7fc fa3c 	bl	8001cec <HAL_Delay>
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 1);
 8005874:	2201      	movs	r2, #1
 8005876:	2108      	movs	r1, #8
 8005878:	4861      	ldr	r0, [pc, #388]	; (8005a00 <LOLA_Init+0x1bc>)
 800587a:	f7fc ffc8 	bl	800280e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800587e:	2001      	movs	r0, #1
 8005880:	f7fc fa34 	bl	8001cec <HAL_Delay>

	switch(t)
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	2b05      	cmp	r3, #5
 8005888:	f200 8082 	bhi.w	8005990 <LOLA_Init+0x14c>
 800588c:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <LOLA_Init+0x50>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	080058ad 	.word	0x080058ad
 8005898:	080058d3 	.word	0x080058d3
 800589c:	080058f9 	.word	0x080058f9
 80058a0:	0800591f 	.word	0x0800591f
 80058a4:	08005945 	.word	0x08005945
 80058a8:	0800596b 	.word	0x0800596b
	{
		// reference: http://dangerousprototypes.com/docs/Xilinx_Spartan_3_FPGA_quick_start#Boot_configuration
		case Master_Serial:
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80058ac:	2200      	movs	r2, #0
 80058ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058b2:	4854      	ldr	r0, [pc, #336]	; (8005a04 <LOLA_Init+0x1c0>)
 80058b4:	f7fc ffab 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 80058b8:	2200      	movs	r2, #0
 80058ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058be:	4851      	ldr	r0, [pc, #324]	; (8005a04 <LOLA_Init+0x1c0>)
 80058c0:	f7fc ffa5 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 80058c4:	2200      	movs	r2, #0
 80058c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058ca:	484e      	ldr	r0, [pc, #312]	; (8005a04 <LOLA_Init+0x1c0>)
 80058cc:	f7fc ff9f 	bl	800280e <HAL_GPIO_WritePin>
		break;
 80058d0:	e074      	b.n	80059bc <LOLA_Init+0x178>

		case SPI_FLASH:	// SPI FLASH
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80058d2:	2200      	movs	r2, #0
 80058d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058d8:	484a      	ldr	r0, [pc, #296]	; (8005a04 <LOLA_Init+0x1c0>)
 80058da:	f7fc ff98 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 80058de:	2200      	movs	r2, #0
 80058e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058e4:	4847      	ldr	r0, [pc, #284]	; (8005a04 <LOLA_Init+0x1c0>)
 80058e6:	f7fc ff92 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 80058ea:	2201      	movs	r2, #1
 80058ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058f0:	4844      	ldr	r0, [pc, #272]	; (8005a04 <LOLA_Init+0x1c0>)
 80058f2:	f7fc ff8c 	bl	800280e <HAL_GPIO_WritePin>
		break;
 80058f6:	e061      	b.n	80059bc <LOLA_Init+0x178>

		case BPI_Up:
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 80058f8:	2200      	movs	r2, #0
 80058fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058fe:	4841      	ldr	r0, [pc, #260]	; (8005a04 <LOLA_Init+0x1c0>)
 8005900:	f7fc ff85 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8005904:	2201      	movs	r2, #1
 8005906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800590a:	483e      	ldr	r0, [pc, #248]	; (8005a04 <LOLA_Init+0x1c0>)
 800590c:	f7fc ff7f 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 8005910:	2200      	movs	r2, #0
 8005912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005916:	483b      	ldr	r0, [pc, #236]	; (8005a04 <LOLA_Init+0x1c0>)
 8005918:	f7fc ff79 	bl	800280e <HAL_GPIO_WritePin>
		break;
 800591c:	e04e      	b.n	80059bc <LOLA_Init+0x178>

		case BPI_Down:
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 0);
 800591e:	2200      	movs	r2, #0
 8005920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005924:	4837      	ldr	r0, [pc, #220]	; (8005a04 <LOLA_Init+0x1c0>)
 8005926:	f7fc ff72 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 800592a:	2201      	movs	r2, #1
 800592c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005930:	4834      	ldr	r0, [pc, #208]	; (8005a04 <LOLA_Init+0x1c0>)
 8005932:	f7fc ff6c 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8005936:	2201      	movs	r2, #1
 8005938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800593c:	4831      	ldr	r0, [pc, #196]	; (8005a04 <LOLA_Init+0x1c0>)
 800593e:	f7fc ff66 	bl	800280e <HAL_GPIO_WritePin>
		break;
 8005942:	e03b      	b.n	80059bc <LOLA_Init+0x178>

		case Slave_parallel:
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8005944:	2201      	movs	r2, #1
 8005946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800594a:	482e      	ldr	r0, [pc, #184]	; (8005a04 <LOLA_Init+0x1c0>)
 800594c:	f7fc ff5f 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8005950:	2201      	movs	r2, #1
 8005952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005956:	482b      	ldr	r0, [pc, #172]	; (8005a04 <LOLA_Init+0x1c0>)
 8005958:	f7fc ff59 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 0);
 800595c:	2200      	movs	r2, #0
 800595e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005962:	4828      	ldr	r0, [pc, #160]	; (8005a04 <LOLA_Init+0x1c0>)
 8005964:	f7fc ff53 	bl	800280e <HAL_GPIO_WritePin>
		break;
 8005968:	e028      	b.n	80059bc <LOLA_Init+0x178>

		case Slave_Serial:
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 800596a:	2201      	movs	r2, #1
 800596c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005970:	4824      	ldr	r0, [pc, #144]	; (8005a04 <LOLA_Init+0x1c0>)
 8005972:	f7fc ff4c 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);
 8005976:	2201      	movs	r2, #1
 8005978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800597c:	4821      	ldr	r0, [pc, #132]	; (8005a04 <LOLA_Init+0x1c0>)
 800597e:	f7fc ff46 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 8005982:	2201      	movs	r2, #1
 8005984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005988:	481e      	ldr	r0, [pc, #120]	; (8005a04 <LOLA_Init+0x1c0>)
 800598a:	f7fc ff40 	bl	800280e <HAL_GPIO_WritePin>
		break;
 800598e:	e015      	b.n	80059bc <LOLA_Init+0x178>

		default: // JTAG on default
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);
 8005990:	2201      	movs	r2, #1
 8005992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005996:	481b      	ldr	r0, [pc, #108]	; (8005a04 <LOLA_Init+0x1c0>)
 8005998:	f7fc ff39 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 0);
 800599c:	2200      	movs	r2, #0
 800599e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059a2:	4818      	ldr	r0, [pc, #96]	; (8005a04 <LOLA_Init+0x1c0>)
 80059a4:	f7fc ff33 	bl	800280e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, 1);
 80059a8:	2201      	movs	r2, #1
 80059aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059ae:	4815      	ldr	r0, [pc, #84]	; (8005a04 <LOLA_Init+0x1c0>)
 80059b0:	f7fc ff2d 	bl	800280e <HAL_GPIO_WritePin>
			maxAtempts = 10000; // Unlimited wait time on JTAG configuration
 80059b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80059b8:	80bb      	strh	r3, [r7, #4]
		break;
 80059ba:	bf00      	nop
	}

	while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin) && maxAtempts > 0)
 80059bc:	e00a      	b.n	80059d4 <LOLA_Init+0x190>
	{
		if(maxAtempts < 10000) maxAtempts--;
 80059be:	88bb      	ldrh	r3, [r7, #4]
 80059c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d802      	bhi.n	80059ce <LOLA_Init+0x18a>
 80059c8:	88bb      	ldrh	r3, [r7, #4]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	80bb      	strh	r3, [r7, #4]
		HAL_Delay(100);
 80059ce:	2064      	movs	r0, #100	; 0x64
 80059d0:	f7fc f98c 	bl	8001cec <HAL_Delay>
	while(HAL_GPIO_ReadPin(INITB_GPIO_Port, INITB_Pin) && maxAtempts > 0)
 80059d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059d8:	4809      	ldr	r0, [pc, #36]	; (8005a00 <LOLA_Init+0x1bc>)
 80059da:	f7fc ff01 	bl	80027e0 <HAL_GPIO_ReadPin>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <LOLA_Init+0x1a6>
 80059e4:	88bb      	ldrh	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e9      	bne.n	80059be <LOLA_Init+0x17a>
	}

	if(maxAtempts > 0) return 1;	// sucesfull configuration
 80059ea:	88bb      	ldrh	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <LOLA_Init+0x1b0>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <LOLA_Init+0x1b2>
	else return 0; // timer ran out
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40010800 	.word	0x40010800
 8005a04:	40010c00 	.word	0x40010c00

08005a08 <LOLA_Reset>:

void LOLA_Reset()
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 0);
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2108      	movs	r1, #8
 8005a10:	4807      	ldr	r0, [pc, #28]	; (8005a30 <LOLA_Reset+0x28>)
 8005a12:	f7fc fefc 	bl	800280e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005a16:	2001      	movs	r0, #1
 8005a18:	f7fc f968 	bl	8001cec <HAL_Delay>
	HAL_GPIO_WritePin(PROGB_GPIO_Port, PROGB_Pin, 1);
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	2108      	movs	r1, #8
 8005a20:	4803      	ldr	r0, [pc, #12]	; (8005a30 <LOLA_Reset+0x28>)
 8005a22:	f7fc fef4 	bl	800280e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005a26:	2001      	movs	r0, #1
 8005a28:	f7fc f960 	bl	8001cec <HAL_Delay>
}
 8005a2c:	bf00      	nop
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	40010800 	.word	0x40010800

08005a34 <LOLA_enable_features>:
}*/

uint16_t enablersReg = 0;

void LOLA_enable_features(LOLAfeatures LOLAfeatures1, uint8_t ENABLE)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	460a      	mov	r2, r1
 8005a3e:	71fb      	strb	r3, [r7, #7]
 8005a40:	4613      	mov	r3, r2
 8005a42:	71bb      	strb	r3, [r7, #6]
	uint16_t enablersMask = 0x0001 << LOLAfeatures1;
 8005a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];

	if((uint16_t)LOLAfeatures1 == (uint16_t)ALL_EN) 	enablersMask = 0xffff;
 8005a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d102      	bne.n	8005a64 <LOLA_enable_features+0x30>
 8005a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a62:	81fb      	strh	r3, [r7, #14]

	if(ENABLE) 	enablersReg |= enablersMask;
 8005a64:	79bb      	ldrb	r3, [r7, #6]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d007      	beq.n	8005a7a <LOLA_enable_features+0x46>
 8005a6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <LOLA_enable_features+0xb0>)
 8005a6c:	881a      	ldrh	r2, [r3, #0]
 8005a6e:	89fb      	ldrh	r3, [r7, #14]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <LOLA_enable_features+0xb0>)
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	e00b      	b.n	8005a92 <LOLA_enable_features+0x5e>
	else 		enablersReg &= ~enablersMask;
 8005a7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a7e:	43db      	mvns	r3, r3
 8005a80:	b21a      	sxth	r2, r3
 8005a82:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <LOLA_enable_features+0xb0>)
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b21b      	sxth	r3, r3
 8005a88:	4013      	ands	r3, r2
 8005a8a:	b21b      	sxth	r3, r3
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <LOLA_enable_features+0xb0>)
 8005a90:	801a      	strh	r2, [r3, #0]

	byte[0] = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((enablersReg>>8)&0x00ff);
 8005a96:	4b13      	ldr	r3, [pc, #76]	; (8005ae4 <LOLA_enable_features+0xb0>)
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	0a1b      	lsrs	r3, r3, #8
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)(enablersReg&0x00ff);
 8005aa2:	4b10      	ldr	r3, [pc, #64]	; (8005ae4 <LOLA_enable_features+0xb0>)
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	72bb      	strb	r3, [r7, #10]
	byte[3] = (uint8_t)ENABLERS;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	72fb      	strb	r3, [r7, #11]


	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005aae:	f107 0108 	add.w	r1, r7, #8
 8005ab2:	2364      	movs	r3, #100	; 0x64
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	480c      	ldr	r0, [pc, #48]	; (8005ae8 <LOLA_enable_features+0xb4>)
 8005ab8:	f7fe f8b8 	bl	8003c2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005abc:	2200      	movs	r2, #0
 8005abe:	2110      	movs	r1, #16
 8005ac0:	480a      	ldr	r0, [pc, #40]	; (8005aec <LOLA_enable_features+0xb8>)
 8005ac2:	f7fc fea4 	bl	800280e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	2110      	movs	r1, #16
 8005aca:	4808      	ldr	r0, [pc, #32]	; (8005aec <LOLA_enable_features+0xb8>)
 8005acc:	f7fc fe9f 	bl	800280e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2110      	movs	r1, #16
 8005ad4:	4805      	ldr	r0, [pc, #20]	; (8005aec <LOLA_enable_features+0xb8>)
 8005ad6:	f7fc fe9a 	bl	800280e <HAL_GPIO_WritePin>
}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000358 	.word	0x20000358
 8005ae8:	20000278 	.word	0x20000278
 8005aec:	40010800 	.word	0x40010800

08005af0 <LOLA_GET_FIRMWAREID>:

uint16_t LOLA_GET_FIRMWAREID()
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
	uint16_t FirmwareID = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	81fb      	strh	r3, [r7, #14]
	uint8_t byte[4];
	uint8_t receivedData[4]; // Array to store 4 bytes of received data

	byte[0] = (int8_t)0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)FIRMWARE_ID;
 8005b06:	2313      	movs	r3, #19
 8005b08:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005b0a:	f107 0108 	add.w	r1, r7, #8
 8005b0e:	2364      	movs	r3, #100	; 0x64
 8005b10:	2204      	movs	r2, #4
 8005b12:	4814      	ldr	r0, [pc, #80]	; (8005b64 <LOLA_GET_FIRMWAREID+0x74>)
 8005b14:	f7fe f88a 	bl	8003c2c <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2110      	movs	r1, #16
 8005b1c:	4812      	ldr	r0, [pc, #72]	; (8005b68 <LOLA_GET_FIRMWAREID+0x78>)
 8005b1e:	f7fc fe76 	bl	800280e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8005b22:	2201      	movs	r2, #1
 8005b24:	2110      	movs	r1, #16
 8005b26:	4810      	ldr	r0, [pc, #64]	; (8005b68 <LOLA_GET_FIRMWAREID+0x78>)
 8005b28:	f7fc fe71 	bl	800280e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2110      	movs	r1, #16
 8005b30:	480d      	ldr	r0, [pc, #52]	; (8005b68 <LOLA_GET_FIRMWAREID+0x78>)
 8005b32:	f7fc fe6c 	bl	800280e <HAL_GPIO_WritePin>

	if (HAL_SPI_Receive(&hspi1, receivedData, 4, HAL_MAX_DELAY) == HAL_OK)
 8005b36:	1d39      	adds	r1, r7, #4
 8005b38:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	4809      	ldr	r0, [pc, #36]	; (8005b64 <LOLA_GET_FIRMWAREID+0x74>)
 8005b40:	f7fe f9b7 	bl	8003eb2 <HAL_SPI_Receive>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d107      	bne.n	8005b5a <LOLA_GET_FIRMWAREID+0x6a>
	{
	            // Reconstruct 32-bit data from 4 received bytes
		FirmwareID = ((uint32_t)receivedData[2] << 8) | (uint32_t)receivedData[3];
 8005b4a:	79bb      	ldrb	r3, [r7, #6]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	021b      	lsls	r3, r3, #8
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	4313      	orrs	r3, r2
 8005b58:	81fb      	strh	r3, [r7, #14]
	else
	{
	            // Error handling
	}

	return FirmwareID;
 8005b5a:	89fb      	ldrh	r3, [r7, #14]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20000278 	.word	0x20000278
 8005b68:	40010800 	.word	0x40010800
 8005b6c:	00000000 	.word	0x00000000

08005b70 <LOLA_SET_MAX_AMPLITUDE>:

float MAX_AMPLITUDE = 0;

void LOLA_SET_MAX_AMPLITUDE(float value)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	DACREF((value)*2/6.4);	// setting DAC Voltage reference
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fa fff9 	bl	8000b74 <__addsf3>
 8005b82:	4603      	mov	r3, r0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fa fc4f 	bl	8000428 <__aeabi_f2d>
 8005b8a:	a30b      	add	r3, pc, #44	; (adr r3, 8005bb8 <LOLA_SET_MAX_AMPLITUDE+0x48>)
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f7fa fdcc 	bl	800072c <__aeabi_ddiv>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	f7fa ff94 	bl	8000ac8 <__aeabi_d2f>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f856 	bl	8005c54 <DACREF>
	MAX_AMPLITUDE = value;
 8005ba8:	4a05      	ldr	r2, [pc, #20]	; (8005bc0 <LOLA_SET_MAX_AMPLITUDE+0x50>)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6013      	str	r3, [r2, #0]
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	9999999a 	.word	0x9999999a
 8005bbc:	40199999 	.word	0x40199999
 8005bc0:	2000035c 	.word	0x2000035c

08005bc4 <DAC_DIRECT_DATA>:

void DAC_DIRECT_DATA(float value)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	uint8_t byte[4];

	int16_t data = (int16_t)(2048*value/MAX_AMPLITUDE);
 8005bcc:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7fb f8d7 	bl	8000d84 <__aeabi_fmul>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <DAC_DIRECT_DATA+0x84>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f7fb f983 	bl	8000eec <__aeabi_fdiv>
 8005be6:	4603      	mov	r3, r0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fb fa91 	bl	8001110 <__aeabi_f2iz>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	81fb      	strh	r3, [r7, #14]

	byte[0] = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	723b      	strb	r3, [r7, #8]
	byte[1] = (int8_t)((data>>8)&0x000f);
 8005bf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005bfa:	121b      	asrs	r3, r3, #8
 8005bfc:	b21b      	sxth	r3, r3
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	727b      	strb	r3, [r7, #9]
	byte[2] = (int8_t)(data&0x00ff);
 8005c08:	89fb      	ldrh	r3, [r7, #14]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	72bb      	strb	r3, [r7, #10]
	byte[3] = (int8_t)DAC_DIRECTDATA;
 8005c0e:	2304      	movs	r3, #4
 8005c10:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(&hspi1, byte, 4, 100);
 8005c12:	f107 0108 	add.w	r1, r7, #8
 8005c16:	2364      	movs	r3, #100	; 0x64
 8005c18:	2204      	movs	r2, #4
 8005c1a:	480c      	ldr	r0, [pc, #48]	; (8005c4c <DAC_DIRECT_DATA+0x88>)
 8005c1c:	f7fe f806 	bl	8003c2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005c20:	2200      	movs	r2, #0
 8005c22:	2110      	movs	r1, #16
 8005c24:	480a      	ldr	r0, [pc, #40]	; (8005c50 <DAC_DIRECT_DATA+0x8c>)
 8005c26:	f7fc fdf2 	bl	800280e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 1);
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	2110      	movs	r1, #16
 8005c2e:	4808      	ldr	r0, [pc, #32]	; (8005c50 <DAC_DIRECT_DATA+0x8c>)
 8005c30:	f7fc fded 	bl	800280e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_FPGAS_GPIO_Port, SPI1_FPGAS_Pin, 0);
 8005c34:	2200      	movs	r2, #0
 8005c36:	2110      	movs	r1, #16
 8005c38:	4805      	ldr	r0, [pc, #20]	; (8005c50 <DAC_DIRECT_DATA+0x8c>)
 8005c3a:	f7fc fde8 	bl	800280e <HAL_GPIO_WritePin>
}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	2000035c 	.word	0x2000035c
 8005c4c:	20000278 	.word	0x20000278
 8005c50:	40010800 	.word	0x40010800

08005c54 <DACREF>:
#include "trim.h"

float DACref = 0;

void DACREF(float v) // 0 <= v <= 2.5
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 8005c5c:	4a27      	ldr	r2, [pc, #156]	; (8005cfc <DACREF+0xa8>)
 8005c5e:	f04f 0100 	mov.w	r1, #0
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 faaf 	bl	80061c6 <trimFloat>
 8005c68:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 8005c6a:	4924      	ldr	r1, [pc, #144]	; (8005cfc <DACREF+0xa8>)
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7fb fa1d 	bl	80010ac <__aeabi_fcmpeq>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <DACREF+0x2c>
 8005c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c7c:	81fb      	strh	r3, [r7, #14]
 8005c7e:	e018      	b.n	8005cb2 <DACREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7fa fbd1 	bl	8000428 <__aeabi_f2d>
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <DACREF+0xac>)
 8005c8c:	f7fa fd4e 	bl	800072c <__aeabi_ddiv>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4610      	mov	r0, r2
 8005c96:	4619      	mov	r1, r3
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <DACREF+0xb0>)
 8005c9e:	f7fa fc1b 	bl	80004d8 <__aeabi_dmul>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	4619      	mov	r1, r3
 8005caa:	f7fa feed 	bl	8000a88 <__aeabi_d2uiz>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	81fb      	strh	r3, [r7, #14]

	DACref = v;
 8005cb2:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <DACREF+0xb4>)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6013      	str	r3, [r2, #0]

	uint8_t byte[3];

	byte[0] = (3<<1)|(1<<4);	//3 shifted=channel D	1 shifted=load
 8005cb8:	2316      	movs	r3, #22
 8005cba:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8005cbc:	89fb      	ldrh	r3, [r7, #14]
 8005cbe:	099b      	lsrs	r3, r3, #6
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8005cc6:	89fb      	ldrh	r3, [r7, #14]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cd4:	480d      	ldr	r0, [pc, #52]	; (8005d0c <DACREF+0xb8>)
 8005cd6:	f7fc fd9a 	bl	800280e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8005cda:	f107 0108 	add.w	r1, r7, #8
 8005cde:	2364      	movs	r3, #100	; 0x64
 8005ce0:	2203      	movs	r2, #3
 8005ce2:	480b      	ldr	r0, [pc, #44]	; (8005d10 <DACREF+0xbc>)
 8005ce4:	f7fd ffa2 	bl	8003c2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cee:	4807      	ldr	r0, [pc, #28]	; (8005d0c <DACREF+0xb8>)
 8005cf0:	f7fc fd8d 	bl	800280e <HAL_GPIO_WritePin>
}
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40200000 	.word	0x40200000
 8005d00:	40040000 	.word	0x40040000
 8005d04:	40d00000 	.word	0x40d00000
 8005d08:	20000360 	.word	0x20000360
 8005d0c:	40011000 	.word	0x40011000
 8005d10:	20000278 	.word	0x20000278

08005d14 <DACOFFS>:

void DACOFFS(float v) // -12.5 <= v <= 12.5
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 8005d1c:	4a2a      	ldr	r2, [pc, #168]	; (8005dc8 <DACOFFS+0xb4>)
 8005d1e:	492b      	ldr	r1, [pc, #172]	; (8005dcc <DACOFFS+0xb8>)
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fa50 	bl	80061c6 <trimFloat>
 8005d26:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 8005d28:	4927      	ldr	r1, [pc, #156]	; (8005dc8 <DACOFFS+0xb4>)
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fb f9be 	bl	80010ac <__aeabi_fcmpeq>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <DACOFFS+0x2a>
 8005d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d3a:	81fb      	strh	r3, [r7, #14]
 8005d3c:	e021      	b.n	8005d82 <DACOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fa fb72 	bl	8000428 <__aeabi_f2d>
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	4b21      	ldr	r3, [pc, #132]	; (8005dd0 <DACOFFS+0xbc>)
 8005d4a:	f7fa fa0f 	bl	800016c <__adddf3>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	4b1e      	ldr	r3, [pc, #120]	; (8005dd4 <DACOFFS+0xc0>)
 8005d5c:	f7fa fce6 	bl	800072c <__aeabi_ddiv>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4610      	mov	r0, r2
 8005d66:	4619      	mov	r1, r3
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <DACOFFS+0xc4>)
 8005d6e:	f7fa fbb3 	bl	80004d8 <__aeabi_dmul>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4610      	mov	r0, r2
 8005d78:	4619      	mov	r1, r3
 8005d7a:	f7fa fe85 	bl	8000a88 <__aeabi_d2uiz>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (2<<1)|(1<<4);	//2 shifted=channel C	1 shifted=load
 8005d82:	2314      	movs	r3, #20
 8005d84:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8005d86:	89fb      	ldrh	r3, [r7, #14]
 8005d88:	099b      	lsrs	r3, r3, #6
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8005d90:	89fb      	ldrh	r3, [r7, #14]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d9e:	480f      	ldr	r0, [pc, #60]	; (8005ddc <DACOFFS+0xc8>)
 8005da0:	f7fc fd35 	bl	800280e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8005da4:	f107 0108 	add.w	r1, r7, #8
 8005da8:	2364      	movs	r3, #100	; 0x64
 8005daa:	2203      	movs	r2, #3
 8005dac:	480c      	ldr	r0, [pc, #48]	; (8005de0 <DACOFFS+0xcc>)
 8005dae:	f7fd ff3d 	bl	8003c2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8005db2:	2201      	movs	r2, #1
 8005db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005db8:	4808      	ldr	r0, [pc, #32]	; (8005ddc <DACOFFS+0xc8>)
 8005dba:	f7fc fd28 	bl	800280e <HAL_GPIO_WritePin>
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	41480000 	.word	0x41480000
 8005dcc:	c1480000 	.word	0xc1480000
 8005dd0:	40290000 	.word	0x40290000
 8005dd4:	40390000 	.word	0x40390000
 8005dd8:	40d00000 	.word	0x40d00000
 8005ddc:	40011000 	.word	0x40011000
 8005de0:	20000278 	.word	0x20000278

08005de4 <ADCREF>:

void ADCREF(float v) // 0 <= v <= 2.5
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, 0, 2.5);
 8005dec:	4a26      	ldr	r2, [pc, #152]	; (8005e88 <ADCREF+0xa4>)
 8005dee:	f04f 0100 	mov.w	r1, #0
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f9e7 	bl	80061c6 <trimFloat>
 8005df8:	6078      	str	r0, [r7, #4]
	if(v==2.5) DATA = 0xffff;
 8005dfa:	4923      	ldr	r1, [pc, #140]	; (8005e88 <ADCREF+0xa4>)
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7fb f955 	bl	80010ac <__aeabi_fcmpeq>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <ADCREF+0x2c>
 8005e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e0c:	81fb      	strh	r3, [r7, #14]
 8005e0e:	e018      	b.n	8005e42 <ADCREF+0x5e>
	else DATA = (uint16_t)(16384*(v/2.5));
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7fa fb09 	bl	8000428 <__aeabi_f2d>
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	4b1c      	ldr	r3, [pc, #112]	; (8005e8c <ADCREF+0xa8>)
 8005e1c:	f7fa fc86 	bl	800072c <__aeabi_ddiv>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4610      	mov	r0, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	4b18      	ldr	r3, [pc, #96]	; (8005e90 <ADCREF+0xac>)
 8005e2e:	f7fa fb53 	bl	80004d8 <__aeabi_dmul>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4610      	mov	r0, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	f7fa fe25 	bl	8000a88 <__aeabi_d2uiz>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<1)|(1<<4); //1 shifted=channel B	1 shifted=load
 8005e42:	2312      	movs	r3, #18
 8005e44:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8005e46:	89fb      	ldrh	r3, [r7, #14]
 8005e48:	099b      	lsrs	r3, r3, #6
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8005e50:	89fb      	ldrh	r3, [r7, #14]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e5e:	480d      	ldr	r0, [pc, #52]	; (8005e94 <ADCREF+0xb0>)
 8005e60:	f7fc fcd5 	bl	800280e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8005e64:	f107 0108 	add.w	r1, r7, #8
 8005e68:	2364      	movs	r3, #100	; 0x64
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	480a      	ldr	r0, [pc, #40]	; (8005e98 <ADCREF+0xb4>)
 8005e6e:	f7fd fedd 	bl	8003c2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8005e72:	2201      	movs	r2, #1
 8005e74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e78:	4806      	ldr	r0, [pc, #24]	; (8005e94 <ADCREF+0xb0>)
 8005e7a:	f7fc fcc8 	bl	800280e <HAL_GPIO_WritePin>
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40200000 	.word	0x40200000
 8005e8c:	40040000 	.word	0x40040000
 8005e90:	40d00000 	.word	0x40d00000
 8005e94:	40011000 	.word	0x40011000
 8005e98:	20000278 	.word	0x20000278

08005e9c <ADCOFFS>:

void ADCOFFS(float v) // -12.5 <= v <= 12.5
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
	uint16_t DATA;
	v = trimFloat(v, -12.5, 12.5);
 8005ea4:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <ADCOFFS+0xb4>)
 8005ea6:	492b      	ldr	r1, [pc, #172]	; (8005f54 <ADCOFFS+0xb8>)
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f98c 	bl	80061c6 <trimFloat>
 8005eae:	6078      	str	r0, [r7, #4]
	if(v==12.5) DATA = 0xffff;
 8005eb0:	4927      	ldr	r1, [pc, #156]	; (8005f50 <ADCOFFS+0xb4>)
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fb f8fa 	bl	80010ac <__aeabi_fcmpeq>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <ADCOFFS+0x2a>
 8005ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ec2:	81fb      	strh	r3, [r7, #14]
 8005ec4:	e021      	b.n	8005f0a <ADCOFFS+0x6e>
	else DATA = (uint16_t)(16384*((v+12.5)/25));
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fa faae 	bl	8000428 <__aeabi_f2d>
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	4b21      	ldr	r3, [pc, #132]	; (8005f58 <ADCOFFS+0xbc>)
 8005ed2:	f7fa f94b 	bl	800016c <__adddf3>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4610      	mov	r0, r2
 8005edc:	4619      	mov	r1, r3
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	4b1e      	ldr	r3, [pc, #120]	; (8005f5c <ADCOFFS+0xc0>)
 8005ee4:	f7fa fc22 	bl	800072c <__aeabi_ddiv>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4610      	mov	r0, r2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <ADCOFFS+0xc4>)
 8005ef6:	f7fa faef 	bl	80004d8 <__aeabi_dmul>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4610      	mov	r0, r2
 8005f00:	4619      	mov	r1, r3
 8005f02:	f7fa fdc1 	bl	8000a88 <__aeabi_d2uiz>
 8005f06:	4603      	mov	r3, r0
 8005f08:	81fb      	strh	r3, [r7, #14]

	uint8_t byte[3];

	byte[0] = (1<<4); //none shifted=channel A	1 shifted=load
 8005f0a:	2310      	movs	r3, #16
 8005f0c:	723b      	strb	r3, [r7, #8]
	byte[1] = (uint8_t)((DATA >> 6)&0x00ff);
 8005f0e:	89fb      	ldrh	r3, [r7, #14]
 8005f10:	099b      	lsrs	r3, r3, #6
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	727b      	strb	r3, [r7, #9]
	byte[2] = (uint8_t)((DATA << 2)&0x00ff);
 8005f18:	89fb      	ldrh	r3, [r7, #14]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 0);
 8005f20:	2200      	movs	r2, #0
 8005f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f26:	480f      	ldr	r0, [pc, #60]	; (8005f64 <ADCOFFS+0xc8>)
 8005f28:	f7fc fc71 	bl	800280e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, byte, 3, 100);
 8005f2c:	f107 0108 	add.w	r1, r7, #8
 8005f30:	2364      	movs	r3, #100	; 0x64
 8005f32:	2203      	movs	r2, #3
 8005f34:	480c      	ldr	r0, [pc, #48]	; (8005f68 <ADCOFFS+0xcc>)
 8005f36:	f7fd fe79 	bl	8003c2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_DACS_GPIO_Port, SPI1_DACS_Pin, 1);
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f40:	4808      	ldr	r0, [pc, #32]	; (8005f64 <ADCOFFS+0xc8>)
 8005f42:	f7fc fc64 	bl	800280e <HAL_GPIO_WritePin>
}
 8005f46:	bf00      	nop
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	41480000 	.word	0x41480000
 8005f54:	c1480000 	.word	0xc1480000
 8005f58:	40290000 	.word	0x40290000
 8005f5c:	40390000 	.word	0x40390000
 8005f60:	40d00000 	.word	0x40d00000
 8005f64:	40011000 	.word	0x40011000
 8005f68:	20000278 	.word	0x20000278

08005f6c <RS485_Transmit>:

char TXbuff[RS485BUFFSIZE] = {0};
char RXbuff[RS485BUFFSIZE] = {0};

void RS485_Transmit(char *message)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
	//strcat(message, "\r\n");

	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);	// Enable Driver
 8005f74:	2201      	movs	r2, #1
 8005f76:	2120      	movs	r1, #32
 8005f78:	480a      	ldr	r0, [pc, #40]	; (8005fa4 <RS485_Transmit+0x38>)
 8005f7a:	f7fc fc48 	bl	800280e <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, message, strlen(message), 100);	// Transmit
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fa f8e6 	bl	8000150 <strlen>
 8005f84:	4603      	mov	r3, r0
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	2364      	movs	r3, #100	; 0x64
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	4806      	ldr	r0, [pc, #24]	; (8005fa8 <RS485_Transmit+0x3c>)
 8005f8e:	f7fe fba1 	bl	80046d4 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);	// Disable Driver
 8005f92:	2200      	movs	r2, #0
 8005f94:	2120      	movs	r1, #32
 8005f96:	4803      	ldr	r0, [pc, #12]	; (8005fa4 <RS485_Transmit+0x38>)
 8005f98:	f7fc fc39 	bl	800280e <HAL_GPIO_WritePin>
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40010c00 	.word	0x40010c00
 8005fa8:	200002d0 	.word	0x200002d0

08005fac <writeToRegister>:
uint8_t is_initialised = 0;

I2C_HandleTypeDef I2CHandle;

void writeToRegister(uint16_t device_address, uint16_t memory_address, uint8_t *data)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af04      	add	r7, sp, #16
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	603a      	str	r2, [r7, #0]
 8005fb6:	80fb      	strh	r3, [r7, #6]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&I2CHandle, (device_address<<1), memory_address, 1, data, 1, 1000);
 8005fbc:	88fb      	ldrh	r3, [r7, #6]
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	b299      	uxth	r1, r3
 8005fc2:	88ba      	ldrh	r2, [r7, #4]
 8005fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fc8:	9302      	str	r3, [sp, #8]
 8005fca:	2301      	movs	r3, #1
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4803      	ldr	r0, [pc, #12]	; (8005fe4 <writeToRegister+0x38>)
 8005fd6:	f7fc fd77 	bl	8002ac8 <HAL_I2C_Mem_Write>
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000388 	.word	0x20000388

08005fe8 <TCA_Init>:

void TCA_Init(uint8_t address, I2C_HandleTypeDef handle)
{
 8005fe8:	b084      	sub	sp, #16
 8005fea:	b590      	push	{r4, r7, lr}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	f107 001c 	add.w	r0, r7, #28
 8005ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005ffa:	4623      	mov	r3, r4
 8005ffc:	71fb      	strb	r3, [r7, #7]
	TCA_address = address;
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <TCA_Init+0x40>)
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	7013      	strb	r3, [r2, #0]
	I2CHandle = handle;
 8006004:	4b09      	ldr	r3, [pc, #36]	; (800602c <TCA_Init+0x44>)
 8006006:	4618      	mov	r0, r3
 8006008:	f107 031c 	add.w	r3, r7, #28
 800600c:	2254      	movs	r2, #84	; 0x54
 800600e:	4619      	mov	r1, r3
 8006010:	f000 ffad 	bl	8006f6e <memcpy>
	is_initialised = 1;
 8006014:	4b06      	ldr	r3, [pc, #24]	; (8006030 <TCA_Init+0x48>)
 8006016:	2201      	movs	r2, #1
 8006018:	701a      	strb	r2, [r3, #0]
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006024:	b004      	add	sp, #16
 8006026:	4770      	bx	lr
 8006028:	2000000d 	.word	0x2000000d
 800602c:	20000388 	.word	0x20000388
 8006030:	20000384 	.word	0x20000384

08006034 <TCA_PinMode>:

void TCA_PinMode(uint32_t pin, uint32_t mode)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 800603e:	4b25      	ldr	r3, [pc, #148]	; (80060d4 <TCA_PinMode+0xa0>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d03d      	beq.n	80060c2 <TCA_PinMode+0x8e>
	if(pin > 15) return;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b0f      	cmp	r3, #15
 800604a:	d83c      	bhi.n	80060c6 <TCA_PinMode+0x92>
	if(mode != 0 && mode != 1) return;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <TCA_PinMode+0x24>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d138      	bne.n	80060ca <TCA_PinMode+0x96>

	uint8_t mask =  1 << (pin % 8);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	2201      	movs	r2, #1
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? PINMODE_REGISTER_LOW : PINMODE_REGISTER_HIGH;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b07      	cmp	r3, #7
 800606a:	d801      	bhi.n	8006070 <TCA_PinMode+0x3c>
 800606c:	2306      	movs	r3, #6
 800606e:	e000      	b.n	8006072 <TCA_PinMode+0x3e>
 8006070:	2307      	movs	r3, #7
 8006072:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &pinmode_register_state_low : &pinmode_register_state_high;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b07      	cmp	r3, #7
 8006078:	d801      	bhi.n	800607e <TCA_PinMode+0x4a>
 800607a:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <TCA_PinMode+0xa4>)
 800607c:	e000      	b.n	8006080 <TCA_PinMode+0x4c>
 800607e:	4b17      	ldr	r3, [pc, #92]	; (80060dc <TCA_PinMode+0xa8>)
 8006080:	60bb      	str	r3, [r7, #8]

	if (mode) 	*data |= mask;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <TCA_PinMode+0x64>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	781a      	ldrb	r2, [r3, #0]
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	4313      	orrs	r3, r2
 8006090:	b2da      	uxtb	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	e00b      	b.n	80060b0 <TCA_PinMode+0x7c>
	else 		*data &= ~mask;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b25a      	sxtb	r2, r3
 800609e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a2:	43db      	mvns	r3, r3
 80060a4:	b25b      	sxtb	r3, r3
 80060a6:	4013      	ands	r3, r2
 80060a8:	b25b      	sxtb	r3, r3
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <TCA_PinMode+0xac>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	89b9      	ldrh	r1, [r7, #12]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff ff76 	bl	8005fac <writeToRegister>
 80060c0:	e004      	b.n	80060cc <TCA_PinMode+0x98>
	if(!is_initialised) return;
 80060c2:	bf00      	nop
 80060c4:	e002      	b.n	80060cc <TCA_PinMode+0x98>
	if(pin > 15) return;
 80060c6:	bf00      	nop
 80060c8:	e000      	b.n	80060cc <TCA_PinMode+0x98>
	if(mode != 0 && mode != 1) return;
 80060ca:	bf00      	nop
}
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000384 	.word	0x20000384
 80060d8:	2000000b 	.word	0x2000000b
 80060dc:	2000000c 	.word	0x2000000c
 80060e0:	2000000d 	.word	0x2000000d

080060e4 <TCA_WritePin>:

	writeToRegister(TCA_address, memory_address, data);
}

void TCA_WritePin(uint32_t pin, uint32_t value)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
	if(!is_initialised) return;
 80060ee:	4b25      	ldr	r3, [pc, #148]	; (8006184 <TCA_WritePin+0xa0>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d03d      	beq.n	8006172 <TCA_WritePin+0x8e>
	if(pin > 15) return;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b0f      	cmp	r3, #15
 80060fa:	d83c      	bhi.n	8006176 <TCA_WritePin+0x92>
	if(value != 0 && value != 1) return;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <TCA_WritePin+0x24>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d138      	bne.n	800617a <TCA_WritePin+0x96>

	uint8_t mask =  1 << (pin % 8);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	2201      	movs	r2, #1
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	73fb      	strb	r3, [r7, #15]

	uint16_t memory_address = pin < 8 ? OUTPUT_REGISTER_LOW : OUTPUT_REGISTER_HIGH;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b07      	cmp	r3, #7
 800611a:	d801      	bhi.n	8006120 <TCA_WritePin+0x3c>
 800611c:	2302      	movs	r3, #2
 800611e:	e000      	b.n	8006122 <TCA_WritePin+0x3e>
 8006120:	2303      	movs	r3, #3
 8006122:	81bb      	strh	r3, [r7, #12]
	uint8_t *data = pin < 8 ? &output_register_state_low : &output_register_state_high;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b07      	cmp	r3, #7
 8006128:	d801      	bhi.n	800612e <TCA_WritePin+0x4a>
 800612a:	4b17      	ldr	r3, [pc, #92]	; (8006188 <TCA_WritePin+0xa4>)
 800612c:	e000      	b.n	8006130 <TCA_WritePin+0x4c>
 800612e:	4b17      	ldr	r3, [pc, #92]	; (800618c <TCA_WritePin+0xa8>)
 8006130:	60bb      	str	r3, [r7, #8]

	if (value)	*data |= mask;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <TCA_WritePin+0x64>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	781a      	ldrb	r2, [r3, #0]
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	4313      	orrs	r3, r2
 8006140:	b2da      	uxtb	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	e00b      	b.n	8006160 <TCA_WritePin+0x7c>
	else 		*data &= ~mask;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	b25a      	sxtb	r2, r3
 800614e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006152:	43db      	mvns	r3, r3
 8006154:	b25b      	sxtb	r3, r3
 8006156:	4013      	ands	r3, r2
 8006158:	b25b      	sxtb	r3, r3
 800615a:	b2da      	uxtb	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	701a      	strb	r2, [r3, #0]

	writeToRegister(TCA_address, memory_address, data);
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <TCA_WritePin+0xac>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	b29b      	uxth	r3, r3
 8006166:	89b9      	ldrh	r1, [r7, #12]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff ff1e 	bl	8005fac <writeToRegister>
 8006170:	e004      	b.n	800617c <TCA_WritePin+0x98>
	if(!is_initialised) return;
 8006172:	bf00      	nop
 8006174:	e002      	b.n	800617c <TCA_WritePin+0x98>
	if(pin > 15) return;
 8006176:	bf00      	nop
 8006178:	e000      	b.n	800617c <TCA_WritePin+0x98>
	if(value != 0 && value != 1) return;
 800617a:	bf00      	nop
}
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000384 	.word	0x20000384
 8006188:	20000009 	.word	0x20000009
 800618c:	2000000a 	.word	0x2000000a
 8006190:	2000000d 	.word	0x2000000d

08006194 <trimInt>:
 */

#include "stdint.h"

int trimInt(int integer, int min, int max)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
	if(integer>max) integer = max;
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	dd02      	ble.n	80061ae <trimInt+0x1a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e005      	b.n	80061ba <trimInt+0x26>
	else if(integer<min) integer = min;
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	da01      	bge.n	80061ba <trimInt+0x26>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	60fb      	str	r3, [r7, #12]
	return integer;
 80061ba:	68fb      	ldr	r3, [r7, #12]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <trimFloat>:

float trimFloat(float floating, float min, float max)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	607a      	str	r2, [r7, #4]
	if(floating>max) floating = max;
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7fa ff91 	bl	80010fc <__aeabi_fcmpgt>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <trimFloat+0x20>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	e008      	b.n	80061f8 <trimFloat+0x32>
	else if(floating<min) floating = min;
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7fa ff69 	bl	80010c0 <__aeabi_fcmplt>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <trimFloat+0x32>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	60fb      	str	r3, [r7, #12]
	return floating;
 80061f8:	68fb      	ldr	r3, [r7, #12]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <malloc>:
 8006204:	4b02      	ldr	r3, [pc, #8]	; (8006210 <malloc+0xc>)
 8006206:	4601      	mov	r1, r0
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	f000 b823 	b.w	8006254 <_malloc_r>
 800620e:	bf00      	nop
 8006210:	20000068 	.word	0x20000068

08006214 <sbrk_aligned>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	4e0e      	ldr	r6, [pc, #56]	; (8006250 <sbrk_aligned+0x3c>)
 8006218:	460c      	mov	r4, r1
 800621a:	6831      	ldr	r1, [r6, #0]
 800621c:	4605      	mov	r5, r0
 800621e:	b911      	cbnz	r1, 8006226 <sbrk_aligned+0x12>
 8006220:	f000 fe48 	bl	8006eb4 <_sbrk_r>
 8006224:	6030      	str	r0, [r6, #0]
 8006226:	4621      	mov	r1, r4
 8006228:	4628      	mov	r0, r5
 800622a:	f000 fe43 	bl	8006eb4 <_sbrk_r>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	d00a      	beq.n	8006248 <sbrk_aligned+0x34>
 8006232:	1cc4      	adds	r4, r0, #3
 8006234:	f024 0403 	bic.w	r4, r4, #3
 8006238:	42a0      	cmp	r0, r4
 800623a:	d007      	beq.n	800624c <sbrk_aligned+0x38>
 800623c:	1a21      	subs	r1, r4, r0
 800623e:	4628      	mov	r0, r5
 8006240:	f000 fe38 	bl	8006eb4 <_sbrk_r>
 8006244:	3001      	adds	r0, #1
 8006246:	d101      	bne.n	800624c <sbrk_aligned+0x38>
 8006248:	f04f 34ff 	mov.w	r4, #4294967295
 800624c:	4620      	mov	r0, r4
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	200003e0 	.word	0x200003e0

08006254 <_malloc_r>:
 8006254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006258:	1ccd      	adds	r5, r1, #3
 800625a:	f025 0503 	bic.w	r5, r5, #3
 800625e:	3508      	adds	r5, #8
 8006260:	2d0c      	cmp	r5, #12
 8006262:	bf38      	it	cc
 8006264:	250c      	movcc	r5, #12
 8006266:	2d00      	cmp	r5, #0
 8006268:	4607      	mov	r7, r0
 800626a:	db01      	blt.n	8006270 <_malloc_r+0x1c>
 800626c:	42a9      	cmp	r1, r5
 800626e:	d905      	bls.n	800627c <_malloc_r+0x28>
 8006270:	230c      	movs	r3, #12
 8006272:	2600      	movs	r6, #0
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	4630      	mov	r0, r6
 8006278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006350 <_malloc_r+0xfc>
 8006280:	f000 f868 	bl	8006354 <__malloc_lock>
 8006284:	f8d8 3000 	ldr.w	r3, [r8]
 8006288:	461c      	mov	r4, r3
 800628a:	bb5c      	cbnz	r4, 80062e4 <_malloc_r+0x90>
 800628c:	4629      	mov	r1, r5
 800628e:	4638      	mov	r0, r7
 8006290:	f7ff ffc0 	bl	8006214 <sbrk_aligned>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	4604      	mov	r4, r0
 8006298:	d155      	bne.n	8006346 <_malloc_r+0xf2>
 800629a:	f8d8 4000 	ldr.w	r4, [r8]
 800629e:	4626      	mov	r6, r4
 80062a0:	2e00      	cmp	r6, #0
 80062a2:	d145      	bne.n	8006330 <_malloc_r+0xdc>
 80062a4:	2c00      	cmp	r4, #0
 80062a6:	d048      	beq.n	800633a <_malloc_r+0xe6>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	4631      	mov	r1, r6
 80062ac:	4638      	mov	r0, r7
 80062ae:	eb04 0903 	add.w	r9, r4, r3
 80062b2:	f000 fdff 	bl	8006eb4 <_sbrk_r>
 80062b6:	4581      	cmp	r9, r0
 80062b8:	d13f      	bne.n	800633a <_malloc_r+0xe6>
 80062ba:	6821      	ldr	r1, [r4, #0]
 80062bc:	4638      	mov	r0, r7
 80062be:	1a6d      	subs	r5, r5, r1
 80062c0:	4629      	mov	r1, r5
 80062c2:	f7ff ffa7 	bl	8006214 <sbrk_aligned>
 80062c6:	3001      	adds	r0, #1
 80062c8:	d037      	beq.n	800633a <_malloc_r+0xe6>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	442b      	add	r3, r5
 80062ce:	6023      	str	r3, [r4, #0]
 80062d0:	f8d8 3000 	ldr.w	r3, [r8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d038      	beq.n	800634a <_malloc_r+0xf6>
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	42a2      	cmp	r2, r4
 80062dc:	d12b      	bne.n	8006336 <_malloc_r+0xe2>
 80062de:	2200      	movs	r2, #0
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	e00f      	b.n	8006304 <_malloc_r+0xb0>
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	1b52      	subs	r2, r2, r5
 80062e8:	d41f      	bmi.n	800632a <_malloc_r+0xd6>
 80062ea:	2a0b      	cmp	r2, #11
 80062ec:	d917      	bls.n	800631e <_malloc_r+0xca>
 80062ee:	1961      	adds	r1, r4, r5
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	6025      	str	r5, [r4, #0]
 80062f4:	bf18      	it	ne
 80062f6:	6059      	strne	r1, [r3, #4]
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	bf08      	it	eq
 80062fc:	f8c8 1000 	streq.w	r1, [r8]
 8006300:	5162      	str	r2, [r4, r5]
 8006302:	604b      	str	r3, [r1, #4]
 8006304:	4638      	mov	r0, r7
 8006306:	f104 060b 	add.w	r6, r4, #11
 800630a:	f000 f829 	bl	8006360 <__malloc_unlock>
 800630e:	f026 0607 	bic.w	r6, r6, #7
 8006312:	1d23      	adds	r3, r4, #4
 8006314:	1af2      	subs	r2, r6, r3
 8006316:	d0ae      	beq.n	8006276 <_malloc_r+0x22>
 8006318:	1b9b      	subs	r3, r3, r6
 800631a:	50a3      	str	r3, [r4, r2]
 800631c:	e7ab      	b.n	8006276 <_malloc_r+0x22>
 800631e:	42a3      	cmp	r3, r4
 8006320:	6862      	ldr	r2, [r4, #4]
 8006322:	d1dd      	bne.n	80062e0 <_malloc_r+0x8c>
 8006324:	f8c8 2000 	str.w	r2, [r8]
 8006328:	e7ec      	b.n	8006304 <_malloc_r+0xb0>
 800632a:	4623      	mov	r3, r4
 800632c:	6864      	ldr	r4, [r4, #4]
 800632e:	e7ac      	b.n	800628a <_malloc_r+0x36>
 8006330:	4634      	mov	r4, r6
 8006332:	6876      	ldr	r6, [r6, #4]
 8006334:	e7b4      	b.n	80062a0 <_malloc_r+0x4c>
 8006336:	4613      	mov	r3, r2
 8006338:	e7cc      	b.n	80062d4 <_malloc_r+0x80>
 800633a:	230c      	movs	r3, #12
 800633c:	4638      	mov	r0, r7
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	f000 f80e 	bl	8006360 <__malloc_unlock>
 8006344:	e797      	b.n	8006276 <_malloc_r+0x22>
 8006346:	6025      	str	r5, [r4, #0]
 8006348:	e7dc      	b.n	8006304 <_malloc_r+0xb0>
 800634a:	605b      	str	r3, [r3, #4]
 800634c:	deff      	udf	#255	; 0xff
 800634e:	bf00      	nop
 8006350:	200003dc 	.word	0x200003dc

08006354 <__malloc_lock>:
 8006354:	4801      	ldr	r0, [pc, #4]	; (800635c <__malloc_lock+0x8>)
 8006356:	f000 bdfa 	b.w	8006f4e <__retarget_lock_acquire_recursive>
 800635a:	bf00      	nop
 800635c:	20000524 	.word	0x20000524

08006360 <__malloc_unlock>:
 8006360:	4801      	ldr	r0, [pc, #4]	; (8006368 <__malloc_unlock+0x8>)
 8006362:	f000 bdf5 	b.w	8006f50 <__retarget_lock_release_recursive>
 8006366:	bf00      	nop
 8006368:	20000524 	.word	0x20000524

0800636c <__cvt>:
 800636c:	2b00      	cmp	r3, #0
 800636e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006372:	461f      	mov	r7, r3
 8006374:	bfbb      	ittet	lt
 8006376:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800637a:	461f      	movlt	r7, r3
 800637c:	2300      	movge	r3, #0
 800637e:	232d      	movlt	r3, #45	; 0x2d
 8006380:	b088      	sub	sp, #32
 8006382:	4614      	mov	r4, r2
 8006384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006386:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006388:	7013      	strb	r3, [r2, #0]
 800638a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800638c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006390:	f023 0820 	bic.w	r8, r3, #32
 8006394:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006398:	d005      	beq.n	80063a6 <__cvt+0x3a>
 800639a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800639e:	d100      	bne.n	80063a2 <__cvt+0x36>
 80063a0:	3501      	adds	r5, #1
 80063a2:	2302      	movs	r3, #2
 80063a4:	e000      	b.n	80063a8 <__cvt+0x3c>
 80063a6:	2303      	movs	r3, #3
 80063a8:	aa07      	add	r2, sp, #28
 80063aa:	9204      	str	r2, [sp, #16]
 80063ac:	aa06      	add	r2, sp, #24
 80063ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80063b2:	e9cd 3500 	strd	r3, r5, [sp]
 80063b6:	4622      	mov	r2, r4
 80063b8:	463b      	mov	r3, r7
 80063ba:	f000 fe71 	bl	80070a0 <_dtoa_r>
 80063be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063c2:	4606      	mov	r6, r0
 80063c4:	d102      	bne.n	80063cc <__cvt+0x60>
 80063c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063c8:	07db      	lsls	r3, r3, #31
 80063ca:	d522      	bpl.n	8006412 <__cvt+0xa6>
 80063cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063d0:	eb06 0905 	add.w	r9, r6, r5
 80063d4:	d110      	bne.n	80063f8 <__cvt+0x8c>
 80063d6:	7833      	ldrb	r3, [r6, #0]
 80063d8:	2b30      	cmp	r3, #48	; 0x30
 80063da:	d10a      	bne.n	80063f2 <__cvt+0x86>
 80063dc:	2200      	movs	r2, #0
 80063de:	2300      	movs	r3, #0
 80063e0:	4620      	mov	r0, r4
 80063e2:	4639      	mov	r1, r7
 80063e4:	f7fa fae0 	bl	80009a8 <__aeabi_dcmpeq>
 80063e8:	b918      	cbnz	r0, 80063f2 <__cvt+0x86>
 80063ea:	f1c5 0501 	rsb	r5, r5, #1
 80063ee:	f8ca 5000 	str.w	r5, [sl]
 80063f2:	f8da 3000 	ldr.w	r3, [sl]
 80063f6:	4499      	add	r9, r3
 80063f8:	2200      	movs	r2, #0
 80063fa:	2300      	movs	r3, #0
 80063fc:	4620      	mov	r0, r4
 80063fe:	4639      	mov	r1, r7
 8006400:	f7fa fad2 	bl	80009a8 <__aeabi_dcmpeq>
 8006404:	b108      	cbz	r0, 800640a <__cvt+0x9e>
 8006406:	f8cd 901c 	str.w	r9, [sp, #28]
 800640a:	2230      	movs	r2, #48	; 0x30
 800640c:	9b07      	ldr	r3, [sp, #28]
 800640e:	454b      	cmp	r3, r9
 8006410:	d307      	bcc.n	8006422 <__cvt+0xb6>
 8006412:	4630      	mov	r0, r6
 8006414:	9b07      	ldr	r3, [sp, #28]
 8006416:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006418:	1b9b      	subs	r3, r3, r6
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	b008      	add	sp, #32
 800641e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006422:	1c59      	adds	r1, r3, #1
 8006424:	9107      	str	r1, [sp, #28]
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	e7f0      	b.n	800640c <__cvt+0xa0>

0800642a <__exponent>:
 800642a:	4603      	mov	r3, r0
 800642c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800642e:	2900      	cmp	r1, #0
 8006430:	f803 2b02 	strb.w	r2, [r3], #2
 8006434:	bfb6      	itet	lt
 8006436:	222d      	movlt	r2, #45	; 0x2d
 8006438:	222b      	movge	r2, #43	; 0x2b
 800643a:	4249      	neglt	r1, r1
 800643c:	2909      	cmp	r1, #9
 800643e:	7042      	strb	r2, [r0, #1]
 8006440:	dd2a      	ble.n	8006498 <__exponent+0x6e>
 8006442:	f10d 0207 	add.w	r2, sp, #7
 8006446:	4617      	mov	r7, r2
 8006448:	260a      	movs	r6, #10
 800644a:	fb91 f5f6 	sdiv	r5, r1, r6
 800644e:	4694      	mov	ip, r2
 8006450:	fb06 1415 	mls	r4, r6, r5, r1
 8006454:	3430      	adds	r4, #48	; 0x30
 8006456:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800645a:	460c      	mov	r4, r1
 800645c:	2c63      	cmp	r4, #99	; 0x63
 800645e:	4629      	mov	r1, r5
 8006460:	f102 32ff 	add.w	r2, r2, #4294967295
 8006464:	dcf1      	bgt.n	800644a <__exponent+0x20>
 8006466:	3130      	adds	r1, #48	; 0x30
 8006468:	f1ac 0402 	sub.w	r4, ip, #2
 800646c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006470:	4622      	mov	r2, r4
 8006472:	1c41      	adds	r1, r0, #1
 8006474:	42ba      	cmp	r2, r7
 8006476:	d30a      	bcc.n	800648e <__exponent+0x64>
 8006478:	f10d 0209 	add.w	r2, sp, #9
 800647c:	eba2 020c 	sub.w	r2, r2, ip
 8006480:	42bc      	cmp	r4, r7
 8006482:	bf88      	it	hi
 8006484:	2200      	movhi	r2, #0
 8006486:	4413      	add	r3, r2
 8006488:	1a18      	subs	r0, r3, r0
 800648a:	b003      	add	sp, #12
 800648c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006492:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006496:	e7ed      	b.n	8006474 <__exponent+0x4a>
 8006498:	2330      	movs	r3, #48	; 0x30
 800649a:	3130      	adds	r1, #48	; 0x30
 800649c:	7083      	strb	r3, [r0, #2]
 800649e:	70c1      	strb	r1, [r0, #3]
 80064a0:	1d03      	adds	r3, r0, #4
 80064a2:	e7f1      	b.n	8006488 <__exponent+0x5e>

080064a4 <_printf_float>:
 80064a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a8:	b091      	sub	sp, #68	; 0x44
 80064aa:	460c      	mov	r4, r1
 80064ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80064b0:	4616      	mov	r6, r2
 80064b2:	461f      	mov	r7, r3
 80064b4:	4605      	mov	r5, r0
 80064b6:	f000 fcc5 	bl	8006e44 <_localeconv_r>
 80064ba:	6803      	ldr	r3, [r0, #0]
 80064bc:	4618      	mov	r0, r3
 80064be:	9309      	str	r3, [sp, #36]	; 0x24
 80064c0:	f7f9 fe46 	bl	8000150 <strlen>
 80064c4:	2300      	movs	r3, #0
 80064c6:	930e      	str	r3, [sp, #56]	; 0x38
 80064c8:	f8d8 3000 	ldr.w	r3, [r8]
 80064cc:	900a      	str	r0, [sp, #40]	; 0x28
 80064ce:	3307      	adds	r3, #7
 80064d0:	f023 0307 	bic.w	r3, r3, #7
 80064d4:	f103 0208 	add.w	r2, r3, #8
 80064d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80064dc:	f8d4 b000 	ldr.w	fp, [r4]
 80064e0:	f8c8 2000 	str.w	r2, [r8]
 80064e4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80064e8:	4652      	mov	r2, sl
 80064ea:	4643      	mov	r3, r8
 80064ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064f0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80064f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80064f6:	f04f 32ff 	mov.w	r2, #4294967295
 80064fa:	4650      	mov	r0, sl
 80064fc:	4b9c      	ldr	r3, [pc, #624]	; (8006770 <_printf_float+0x2cc>)
 80064fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006500:	f7fa fa84 	bl	8000a0c <__aeabi_dcmpun>
 8006504:	bb70      	cbnz	r0, 8006564 <_printf_float+0xc0>
 8006506:	f04f 32ff 	mov.w	r2, #4294967295
 800650a:	4650      	mov	r0, sl
 800650c:	4b98      	ldr	r3, [pc, #608]	; (8006770 <_printf_float+0x2cc>)
 800650e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006510:	f7fa fa5e 	bl	80009d0 <__aeabi_dcmple>
 8006514:	bb30      	cbnz	r0, 8006564 <_printf_float+0xc0>
 8006516:	2200      	movs	r2, #0
 8006518:	2300      	movs	r3, #0
 800651a:	4650      	mov	r0, sl
 800651c:	4641      	mov	r1, r8
 800651e:	f7fa fa4d 	bl	80009bc <__aeabi_dcmplt>
 8006522:	b110      	cbz	r0, 800652a <_printf_float+0x86>
 8006524:	232d      	movs	r3, #45	; 0x2d
 8006526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800652a:	4a92      	ldr	r2, [pc, #584]	; (8006774 <_printf_float+0x2d0>)
 800652c:	4b92      	ldr	r3, [pc, #584]	; (8006778 <_printf_float+0x2d4>)
 800652e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006532:	bf94      	ite	ls
 8006534:	4690      	movls	r8, r2
 8006536:	4698      	movhi	r8, r3
 8006538:	2303      	movs	r3, #3
 800653a:	f04f 0a00 	mov.w	sl, #0
 800653e:	6123      	str	r3, [r4, #16]
 8006540:	f02b 0304 	bic.w	r3, fp, #4
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	4633      	mov	r3, r6
 8006548:	4621      	mov	r1, r4
 800654a:	4628      	mov	r0, r5
 800654c:	9700      	str	r7, [sp, #0]
 800654e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006550:	f000 f9d6 	bl	8006900 <_printf_common>
 8006554:	3001      	adds	r0, #1
 8006556:	f040 8090 	bne.w	800667a <_printf_float+0x1d6>
 800655a:	f04f 30ff 	mov.w	r0, #4294967295
 800655e:	b011      	add	sp, #68	; 0x44
 8006560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006564:	4652      	mov	r2, sl
 8006566:	4643      	mov	r3, r8
 8006568:	4650      	mov	r0, sl
 800656a:	4641      	mov	r1, r8
 800656c:	f7fa fa4e 	bl	8000a0c <__aeabi_dcmpun>
 8006570:	b148      	cbz	r0, 8006586 <_printf_float+0xe2>
 8006572:	f1b8 0f00 	cmp.w	r8, #0
 8006576:	bfb8      	it	lt
 8006578:	232d      	movlt	r3, #45	; 0x2d
 800657a:	4a80      	ldr	r2, [pc, #512]	; (800677c <_printf_float+0x2d8>)
 800657c:	bfb8      	it	lt
 800657e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006582:	4b7f      	ldr	r3, [pc, #508]	; (8006780 <_printf_float+0x2dc>)
 8006584:	e7d3      	b.n	800652e <_printf_float+0x8a>
 8006586:	6863      	ldr	r3, [r4, #4]
 8006588:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	d142      	bne.n	8006616 <_printf_float+0x172>
 8006590:	2306      	movs	r3, #6
 8006592:	6063      	str	r3, [r4, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	9206      	str	r2, [sp, #24]
 8006598:	aa0e      	add	r2, sp, #56	; 0x38
 800659a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800659e:	aa0d      	add	r2, sp, #52	; 0x34
 80065a0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80065a4:	9203      	str	r2, [sp, #12]
 80065a6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80065aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	6863      	ldr	r3, [r4, #4]
 80065b2:	4652      	mov	r2, sl
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	4628      	mov	r0, r5
 80065b8:	4643      	mov	r3, r8
 80065ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80065bc:	f7ff fed6 	bl	800636c <__cvt>
 80065c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065c2:	4680      	mov	r8, r0
 80065c4:	2947      	cmp	r1, #71	; 0x47
 80065c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065c8:	d108      	bne.n	80065dc <_printf_float+0x138>
 80065ca:	1cc8      	adds	r0, r1, #3
 80065cc:	db02      	blt.n	80065d4 <_printf_float+0x130>
 80065ce:	6863      	ldr	r3, [r4, #4]
 80065d0:	4299      	cmp	r1, r3
 80065d2:	dd40      	ble.n	8006656 <_printf_float+0x1b2>
 80065d4:	f1a9 0902 	sub.w	r9, r9, #2
 80065d8:	fa5f f989 	uxtb.w	r9, r9
 80065dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80065e0:	d81f      	bhi.n	8006622 <_printf_float+0x17e>
 80065e2:	464a      	mov	r2, r9
 80065e4:	3901      	subs	r1, #1
 80065e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065ea:	910d      	str	r1, [sp, #52]	; 0x34
 80065ec:	f7ff ff1d 	bl	800642a <__exponent>
 80065f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065f2:	4682      	mov	sl, r0
 80065f4:	1813      	adds	r3, r2, r0
 80065f6:	2a01      	cmp	r2, #1
 80065f8:	6123      	str	r3, [r4, #16]
 80065fa:	dc02      	bgt.n	8006602 <_printf_float+0x15e>
 80065fc:	6822      	ldr	r2, [r4, #0]
 80065fe:	07d2      	lsls	r2, r2, #31
 8006600:	d501      	bpl.n	8006606 <_printf_float+0x162>
 8006602:	3301      	adds	r3, #1
 8006604:	6123      	str	r3, [r4, #16]
 8006606:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800660a:	2b00      	cmp	r3, #0
 800660c:	d09b      	beq.n	8006546 <_printf_float+0xa2>
 800660e:	232d      	movs	r3, #45	; 0x2d
 8006610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006614:	e797      	b.n	8006546 <_printf_float+0xa2>
 8006616:	2947      	cmp	r1, #71	; 0x47
 8006618:	d1bc      	bne.n	8006594 <_printf_float+0xf0>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1ba      	bne.n	8006594 <_printf_float+0xf0>
 800661e:	2301      	movs	r3, #1
 8006620:	e7b7      	b.n	8006592 <_printf_float+0xee>
 8006622:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006626:	d118      	bne.n	800665a <_printf_float+0x1b6>
 8006628:	2900      	cmp	r1, #0
 800662a:	6863      	ldr	r3, [r4, #4]
 800662c:	dd0b      	ble.n	8006646 <_printf_float+0x1a2>
 800662e:	6121      	str	r1, [r4, #16]
 8006630:	b913      	cbnz	r3, 8006638 <_printf_float+0x194>
 8006632:	6822      	ldr	r2, [r4, #0]
 8006634:	07d0      	lsls	r0, r2, #31
 8006636:	d502      	bpl.n	800663e <_printf_float+0x19a>
 8006638:	3301      	adds	r3, #1
 800663a:	440b      	add	r3, r1
 800663c:	6123      	str	r3, [r4, #16]
 800663e:	f04f 0a00 	mov.w	sl, #0
 8006642:	65a1      	str	r1, [r4, #88]	; 0x58
 8006644:	e7df      	b.n	8006606 <_printf_float+0x162>
 8006646:	b913      	cbnz	r3, 800664e <_printf_float+0x1aa>
 8006648:	6822      	ldr	r2, [r4, #0]
 800664a:	07d2      	lsls	r2, r2, #31
 800664c:	d501      	bpl.n	8006652 <_printf_float+0x1ae>
 800664e:	3302      	adds	r3, #2
 8006650:	e7f4      	b.n	800663c <_printf_float+0x198>
 8006652:	2301      	movs	r3, #1
 8006654:	e7f2      	b.n	800663c <_printf_float+0x198>
 8006656:	f04f 0967 	mov.w	r9, #103	; 0x67
 800665a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800665c:	4299      	cmp	r1, r3
 800665e:	db05      	blt.n	800666c <_printf_float+0x1c8>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	6121      	str	r1, [r4, #16]
 8006664:	07d8      	lsls	r0, r3, #31
 8006666:	d5ea      	bpl.n	800663e <_printf_float+0x19a>
 8006668:	1c4b      	adds	r3, r1, #1
 800666a:	e7e7      	b.n	800663c <_printf_float+0x198>
 800666c:	2900      	cmp	r1, #0
 800666e:	bfcc      	ite	gt
 8006670:	2201      	movgt	r2, #1
 8006672:	f1c1 0202 	rsble	r2, r1, #2
 8006676:	4413      	add	r3, r2
 8006678:	e7e0      	b.n	800663c <_printf_float+0x198>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	055a      	lsls	r2, r3, #21
 800667e:	d407      	bmi.n	8006690 <_printf_float+0x1ec>
 8006680:	6923      	ldr	r3, [r4, #16]
 8006682:	4642      	mov	r2, r8
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	d12b      	bne.n	80066e6 <_printf_float+0x242>
 800668e:	e764      	b.n	800655a <_printf_float+0xb6>
 8006690:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006694:	f240 80dd 	bls.w	8006852 <_printf_float+0x3ae>
 8006698:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800669c:	2200      	movs	r2, #0
 800669e:	2300      	movs	r3, #0
 80066a0:	f7fa f982 	bl	80009a8 <__aeabi_dcmpeq>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d033      	beq.n	8006710 <_printf_float+0x26c>
 80066a8:	2301      	movs	r3, #1
 80066aa:	4631      	mov	r1, r6
 80066ac:	4628      	mov	r0, r5
 80066ae:	4a35      	ldr	r2, [pc, #212]	; (8006784 <_printf_float+0x2e0>)
 80066b0:	47b8      	blx	r7
 80066b2:	3001      	adds	r0, #1
 80066b4:	f43f af51 	beq.w	800655a <_printf_float+0xb6>
 80066b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066bc:	429a      	cmp	r2, r3
 80066be:	db02      	blt.n	80066c6 <_printf_float+0x222>
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	07d8      	lsls	r0, r3, #31
 80066c4:	d50f      	bpl.n	80066e6 <_printf_float+0x242>
 80066c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	f43f af42 	beq.w	800655a <_printf_float+0xb6>
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	f104 091a 	add.w	r9, r4, #26
 80066de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066e0:	3b01      	subs	r3, #1
 80066e2:	4543      	cmp	r3, r8
 80066e4:	dc09      	bgt.n	80066fa <_printf_float+0x256>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	079b      	lsls	r3, r3, #30
 80066ea:	f100 8104 	bmi.w	80068f6 <_printf_float+0x452>
 80066ee:	68e0      	ldr	r0, [r4, #12]
 80066f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066f2:	4298      	cmp	r0, r3
 80066f4:	bfb8      	it	lt
 80066f6:	4618      	movlt	r0, r3
 80066f8:	e731      	b.n	800655e <_printf_float+0xba>
 80066fa:	2301      	movs	r3, #1
 80066fc:	464a      	mov	r2, r9
 80066fe:	4631      	mov	r1, r6
 8006700:	4628      	mov	r0, r5
 8006702:	47b8      	blx	r7
 8006704:	3001      	adds	r0, #1
 8006706:	f43f af28 	beq.w	800655a <_printf_float+0xb6>
 800670a:	f108 0801 	add.w	r8, r8, #1
 800670e:	e7e6      	b.n	80066de <_printf_float+0x23a>
 8006710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006712:	2b00      	cmp	r3, #0
 8006714:	dc38      	bgt.n	8006788 <_printf_float+0x2e4>
 8006716:	2301      	movs	r3, #1
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	4a19      	ldr	r2, [pc, #100]	; (8006784 <_printf_float+0x2e0>)
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	f43f af1a 	beq.w	800655a <_printf_float+0xb6>
 8006726:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800672a:	4313      	orrs	r3, r2
 800672c:	d102      	bne.n	8006734 <_printf_float+0x290>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	07d9      	lsls	r1, r3, #31
 8006732:	d5d8      	bpl.n	80066e6 <_printf_float+0x242>
 8006734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	f43f af0b 	beq.w	800655a <_printf_float+0xb6>
 8006744:	f04f 0900 	mov.w	r9, #0
 8006748:	f104 0a1a 	add.w	sl, r4, #26
 800674c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800674e:	425b      	negs	r3, r3
 8006750:	454b      	cmp	r3, r9
 8006752:	dc01      	bgt.n	8006758 <_printf_float+0x2b4>
 8006754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006756:	e794      	b.n	8006682 <_printf_float+0x1de>
 8006758:	2301      	movs	r3, #1
 800675a:	4652      	mov	r2, sl
 800675c:	4631      	mov	r1, r6
 800675e:	4628      	mov	r0, r5
 8006760:	47b8      	blx	r7
 8006762:	3001      	adds	r0, #1
 8006764:	f43f aef9 	beq.w	800655a <_printf_float+0xb6>
 8006768:	f109 0901 	add.w	r9, r9, #1
 800676c:	e7ee      	b.n	800674c <_printf_float+0x2a8>
 800676e:	bf00      	nop
 8006770:	7fefffff 	.word	0x7fefffff
 8006774:	080098ef 	.word	0x080098ef
 8006778:	080098f3 	.word	0x080098f3
 800677c:	080098f7 	.word	0x080098f7
 8006780:	080098fb 	.word	0x080098fb
 8006784:	080098ff 	.word	0x080098ff
 8006788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800678a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800678c:	429a      	cmp	r2, r3
 800678e:	bfa8      	it	ge
 8006790:	461a      	movge	r2, r3
 8006792:	2a00      	cmp	r2, #0
 8006794:	4691      	mov	r9, r2
 8006796:	dc37      	bgt.n	8006808 <_printf_float+0x364>
 8006798:	f04f 0b00 	mov.w	fp, #0
 800679c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067a0:	f104 021a 	add.w	r2, r4, #26
 80067a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80067a8:	ebaa 0309 	sub.w	r3, sl, r9
 80067ac:	455b      	cmp	r3, fp
 80067ae:	dc33      	bgt.n	8006818 <_printf_float+0x374>
 80067b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067b4:	429a      	cmp	r2, r3
 80067b6:	db3b      	blt.n	8006830 <_printf_float+0x38c>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	07da      	lsls	r2, r3, #31
 80067bc:	d438      	bmi.n	8006830 <_printf_float+0x38c>
 80067be:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80067c2:	eba2 0903 	sub.w	r9, r2, r3
 80067c6:	eba2 020a 	sub.w	r2, r2, sl
 80067ca:	4591      	cmp	r9, r2
 80067cc:	bfa8      	it	ge
 80067ce:	4691      	movge	r9, r2
 80067d0:	f1b9 0f00 	cmp.w	r9, #0
 80067d4:	dc34      	bgt.n	8006840 <_printf_float+0x39c>
 80067d6:	f04f 0800 	mov.w	r8, #0
 80067da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067de:	f104 0a1a 	add.w	sl, r4, #26
 80067e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067e6:	1a9b      	subs	r3, r3, r2
 80067e8:	eba3 0309 	sub.w	r3, r3, r9
 80067ec:	4543      	cmp	r3, r8
 80067ee:	f77f af7a 	ble.w	80066e6 <_printf_float+0x242>
 80067f2:	2301      	movs	r3, #1
 80067f4:	4652      	mov	r2, sl
 80067f6:	4631      	mov	r1, r6
 80067f8:	4628      	mov	r0, r5
 80067fa:	47b8      	blx	r7
 80067fc:	3001      	adds	r0, #1
 80067fe:	f43f aeac 	beq.w	800655a <_printf_float+0xb6>
 8006802:	f108 0801 	add.w	r8, r8, #1
 8006806:	e7ec      	b.n	80067e2 <_printf_float+0x33e>
 8006808:	4613      	mov	r3, r2
 800680a:	4631      	mov	r1, r6
 800680c:	4642      	mov	r2, r8
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	d1c0      	bne.n	8006798 <_printf_float+0x2f4>
 8006816:	e6a0      	b.n	800655a <_printf_float+0xb6>
 8006818:	2301      	movs	r3, #1
 800681a:	4631      	mov	r1, r6
 800681c:	4628      	mov	r0, r5
 800681e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006820:	47b8      	blx	r7
 8006822:	3001      	adds	r0, #1
 8006824:	f43f ae99 	beq.w	800655a <_printf_float+0xb6>
 8006828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800682a:	f10b 0b01 	add.w	fp, fp, #1
 800682e:	e7b9      	b.n	80067a4 <_printf_float+0x300>
 8006830:	4631      	mov	r1, r6
 8006832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006836:	4628      	mov	r0, r5
 8006838:	47b8      	blx	r7
 800683a:	3001      	adds	r0, #1
 800683c:	d1bf      	bne.n	80067be <_printf_float+0x31a>
 800683e:	e68c      	b.n	800655a <_printf_float+0xb6>
 8006840:	464b      	mov	r3, r9
 8006842:	4631      	mov	r1, r6
 8006844:	4628      	mov	r0, r5
 8006846:	eb08 020a 	add.w	r2, r8, sl
 800684a:	47b8      	blx	r7
 800684c:	3001      	adds	r0, #1
 800684e:	d1c2      	bne.n	80067d6 <_printf_float+0x332>
 8006850:	e683      	b.n	800655a <_printf_float+0xb6>
 8006852:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006854:	2a01      	cmp	r2, #1
 8006856:	dc01      	bgt.n	800685c <_printf_float+0x3b8>
 8006858:	07db      	lsls	r3, r3, #31
 800685a:	d539      	bpl.n	80068d0 <_printf_float+0x42c>
 800685c:	2301      	movs	r3, #1
 800685e:	4642      	mov	r2, r8
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	f43f ae77 	beq.w	800655a <_printf_float+0xb6>
 800686c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006870:	4631      	mov	r1, r6
 8006872:	4628      	mov	r0, r5
 8006874:	47b8      	blx	r7
 8006876:	3001      	adds	r0, #1
 8006878:	f43f ae6f 	beq.w	800655a <_printf_float+0xb6>
 800687c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006880:	2200      	movs	r2, #0
 8006882:	2300      	movs	r3, #0
 8006884:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006888:	f7fa f88e 	bl	80009a8 <__aeabi_dcmpeq>
 800688c:	b9d8      	cbnz	r0, 80068c6 <_printf_float+0x422>
 800688e:	f109 33ff 	add.w	r3, r9, #4294967295
 8006892:	f108 0201 	add.w	r2, r8, #1
 8006896:	4631      	mov	r1, r6
 8006898:	4628      	mov	r0, r5
 800689a:	47b8      	blx	r7
 800689c:	3001      	adds	r0, #1
 800689e:	d10e      	bne.n	80068be <_printf_float+0x41a>
 80068a0:	e65b      	b.n	800655a <_printf_float+0xb6>
 80068a2:	2301      	movs	r3, #1
 80068a4:	464a      	mov	r2, r9
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	f43f ae54 	beq.w	800655a <_printf_float+0xb6>
 80068b2:	f108 0801 	add.w	r8, r8, #1
 80068b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b8:	3b01      	subs	r3, #1
 80068ba:	4543      	cmp	r3, r8
 80068bc:	dcf1      	bgt.n	80068a2 <_printf_float+0x3fe>
 80068be:	4653      	mov	r3, sl
 80068c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068c4:	e6de      	b.n	8006684 <_printf_float+0x1e0>
 80068c6:	f04f 0800 	mov.w	r8, #0
 80068ca:	f104 091a 	add.w	r9, r4, #26
 80068ce:	e7f2      	b.n	80068b6 <_printf_float+0x412>
 80068d0:	2301      	movs	r3, #1
 80068d2:	4642      	mov	r2, r8
 80068d4:	e7df      	b.n	8006896 <_printf_float+0x3f2>
 80068d6:	2301      	movs	r3, #1
 80068d8:	464a      	mov	r2, r9
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f ae3a 	beq.w	800655a <_printf_float+0xb6>
 80068e6:	f108 0801 	add.w	r8, r8, #1
 80068ea:	68e3      	ldr	r3, [r4, #12]
 80068ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80068ee:	1a5b      	subs	r3, r3, r1
 80068f0:	4543      	cmp	r3, r8
 80068f2:	dcf0      	bgt.n	80068d6 <_printf_float+0x432>
 80068f4:	e6fb      	b.n	80066ee <_printf_float+0x24a>
 80068f6:	f04f 0800 	mov.w	r8, #0
 80068fa:	f104 0919 	add.w	r9, r4, #25
 80068fe:	e7f4      	b.n	80068ea <_printf_float+0x446>

08006900 <_printf_common>:
 8006900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006904:	4616      	mov	r6, r2
 8006906:	4699      	mov	r9, r3
 8006908:	688a      	ldr	r2, [r1, #8]
 800690a:	690b      	ldr	r3, [r1, #16]
 800690c:	4607      	mov	r7, r0
 800690e:	4293      	cmp	r3, r2
 8006910:	bfb8      	it	lt
 8006912:	4613      	movlt	r3, r2
 8006914:	6033      	str	r3, [r6, #0]
 8006916:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800691a:	460c      	mov	r4, r1
 800691c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006920:	b10a      	cbz	r2, 8006926 <_printf_common+0x26>
 8006922:	3301      	adds	r3, #1
 8006924:	6033      	str	r3, [r6, #0]
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	0699      	lsls	r1, r3, #26
 800692a:	bf42      	ittt	mi
 800692c:	6833      	ldrmi	r3, [r6, #0]
 800692e:	3302      	addmi	r3, #2
 8006930:	6033      	strmi	r3, [r6, #0]
 8006932:	6825      	ldr	r5, [r4, #0]
 8006934:	f015 0506 	ands.w	r5, r5, #6
 8006938:	d106      	bne.n	8006948 <_printf_common+0x48>
 800693a:	f104 0a19 	add.w	sl, r4, #25
 800693e:	68e3      	ldr	r3, [r4, #12]
 8006940:	6832      	ldr	r2, [r6, #0]
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	42ab      	cmp	r3, r5
 8006946:	dc2b      	bgt.n	80069a0 <_printf_common+0xa0>
 8006948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800694c:	1e13      	subs	r3, r2, #0
 800694e:	6822      	ldr	r2, [r4, #0]
 8006950:	bf18      	it	ne
 8006952:	2301      	movne	r3, #1
 8006954:	0692      	lsls	r2, r2, #26
 8006956:	d430      	bmi.n	80069ba <_printf_common+0xba>
 8006958:	4649      	mov	r1, r9
 800695a:	4638      	mov	r0, r7
 800695c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006960:	47c0      	blx	r8
 8006962:	3001      	adds	r0, #1
 8006964:	d023      	beq.n	80069ae <_printf_common+0xae>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	6922      	ldr	r2, [r4, #16]
 800696a:	f003 0306 	and.w	r3, r3, #6
 800696e:	2b04      	cmp	r3, #4
 8006970:	bf14      	ite	ne
 8006972:	2500      	movne	r5, #0
 8006974:	6833      	ldreq	r3, [r6, #0]
 8006976:	f04f 0600 	mov.w	r6, #0
 800697a:	bf08      	it	eq
 800697c:	68e5      	ldreq	r5, [r4, #12]
 800697e:	f104 041a 	add.w	r4, r4, #26
 8006982:	bf08      	it	eq
 8006984:	1aed      	subeq	r5, r5, r3
 8006986:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800698a:	bf08      	it	eq
 800698c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006990:	4293      	cmp	r3, r2
 8006992:	bfc4      	itt	gt
 8006994:	1a9b      	subgt	r3, r3, r2
 8006996:	18ed      	addgt	r5, r5, r3
 8006998:	42b5      	cmp	r5, r6
 800699a:	d11a      	bne.n	80069d2 <_printf_common+0xd2>
 800699c:	2000      	movs	r0, #0
 800699e:	e008      	b.n	80069b2 <_printf_common+0xb2>
 80069a0:	2301      	movs	r3, #1
 80069a2:	4652      	mov	r2, sl
 80069a4:	4649      	mov	r1, r9
 80069a6:	4638      	mov	r0, r7
 80069a8:	47c0      	blx	r8
 80069aa:	3001      	adds	r0, #1
 80069ac:	d103      	bne.n	80069b6 <_printf_common+0xb6>
 80069ae:	f04f 30ff 	mov.w	r0, #4294967295
 80069b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b6:	3501      	adds	r5, #1
 80069b8:	e7c1      	b.n	800693e <_printf_common+0x3e>
 80069ba:	2030      	movs	r0, #48	; 0x30
 80069bc:	18e1      	adds	r1, r4, r3
 80069be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069c8:	4422      	add	r2, r4
 80069ca:	3302      	adds	r3, #2
 80069cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069d0:	e7c2      	b.n	8006958 <_printf_common+0x58>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4622      	mov	r2, r4
 80069d6:	4649      	mov	r1, r9
 80069d8:	4638      	mov	r0, r7
 80069da:	47c0      	blx	r8
 80069dc:	3001      	adds	r0, #1
 80069de:	d0e6      	beq.n	80069ae <_printf_common+0xae>
 80069e0:	3601      	adds	r6, #1
 80069e2:	e7d9      	b.n	8006998 <_printf_common+0x98>

080069e4 <_printf_i>:
 80069e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	7e0f      	ldrb	r7, [r1, #24]
 80069ea:	4691      	mov	r9, r2
 80069ec:	2f78      	cmp	r7, #120	; 0x78
 80069ee:	4680      	mov	r8, r0
 80069f0:	460c      	mov	r4, r1
 80069f2:	469a      	mov	sl, r3
 80069f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069fa:	d807      	bhi.n	8006a0c <_printf_i+0x28>
 80069fc:	2f62      	cmp	r7, #98	; 0x62
 80069fe:	d80a      	bhi.n	8006a16 <_printf_i+0x32>
 8006a00:	2f00      	cmp	r7, #0
 8006a02:	f000 80d5 	beq.w	8006bb0 <_printf_i+0x1cc>
 8006a06:	2f58      	cmp	r7, #88	; 0x58
 8006a08:	f000 80c1 	beq.w	8006b8e <_printf_i+0x1aa>
 8006a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a14:	e03a      	b.n	8006a8c <_printf_i+0xa8>
 8006a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a1a:	2b15      	cmp	r3, #21
 8006a1c:	d8f6      	bhi.n	8006a0c <_printf_i+0x28>
 8006a1e:	a101      	add	r1, pc, #4	; (adr r1, 8006a24 <_printf_i+0x40>)
 8006a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a24:	08006a7d 	.word	0x08006a7d
 8006a28:	08006a91 	.word	0x08006a91
 8006a2c:	08006a0d 	.word	0x08006a0d
 8006a30:	08006a0d 	.word	0x08006a0d
 8006a34:	08006a0d 	.word	0x08006a0d
 8006a38:	08006a0d 	.word	0x08006a0d
 8006a3c:	08006a91 	.word	0x08006a91
 8006a40:	08006a0d 	.word	0x08006a0d
 8006a44:	08006a0d 	.word	0x08006a0d
 8006a48:	08006a0d 	.word	0x08006a0d
 8006a4c:	08006a0d 	.word	0x08006a0d
 8006a50:	08006b97 	.word	0x08006b97
 8006a54:	08006abd 	.word	0x08006abd
 8006a58:	08006b51 	.word	0x08006b51
 8006a5c:	08006a0d 	.word	0x08006a0d
 8006a60:	08006a0d 	.word	0x08006a0d
 8006a64:	08006bb9 	.word	0x08006bb9
 8006a68:	08006a0d 	.word	0x08006a0d
 8006a6c:	08006abd 	.word	0x08006abd
 8006a70:	08006a0d 	.word	0x08006a0d
 8006a74:	08006a0d 	.word	0x08006a0d
 8006a78:	08006b59 	.word	0x08006b59
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	1d1a      	adds	r2, r3, #4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	602a      	str	r2, [r5, #0]
 8006a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0a0      	b.n	8006bd2 <_printf_i+0x1ee>
 8006a90:	6820      	ldr	r0, [r4, #0]
 8006a92:	682b      	ldr	r3, [r5, #0]
 8006a94:	0607      	lsls	r7, r0, #24
 8006a96:	f103 0104 	add.w	r1, r3, #4
 8006a9a:	6029      	str	r1, [r5, #0]
 8006a9c:	d501      	bpl.n	8006aa2 <_printf_i+0xbe>
 8006a9e:	681e      	ldr	r6, [r3, #0]
 8006aa0:	e003      	b.n	8006aaa <_printf_i+0xc6>
 8006aa2:	0646      	lsls	r6, r0, #25
 8006aa4:	d5fb      	bpl.n	8006a9e <_printf_i+0xba>
 8006aa6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006aaa:	2e00      	cmp	r6, #0
 8006aac:	da03      	bge.n	8006ab6 <_printf_i+0xd2>
 8006aae:	232d      	movs	r3, #45	; 0x2d
 8006ab0:	4276      	negs	r6, r6
 8006ab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab6:	230a      	movs	r3, #10
 8006ab8:	4859      	ldr	r0, [pc, #356]	; (8006c20 <_printf_i+0x23c>)
 8006aba:	e012      	b.n	8006ae2 <_printf_i+0xfe>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	6820      	ldr	r0, [r4, #0]
 8006ac0:	1d19      	adds	r1, r3, #4
 8006ac2:	6029      	str	r1, [r5, #0]
 8006ac4:	0605      	lsls	r5, r0, #24
 8006ac6:	d501      	bpl.n	8006acc <_printf_i+0xe8>
 8006ac8:	681e      	ldr	r6, [r3, #0]
 8006aca:	e002      	b.n	8006ad2 <_printf_i+0xee>
 8006acc:	0641      	lsls	r1, r0, #25
 8006ace:	d5fb      	bpl.n	8006ac8 <_printf_i+0xe4>
 8006ad0:	881e      	ldrh	r6, [r3, #0]
 8006ad2:	2f6f      	cmp	r7, #111	; 0x6f
 8006ad4:	bf0c      	ite	eq
 8006ad6:	2308      	moveq	r3, #8
 8006ad8:	230a      	movne	r3, #10
 8006ada:	4851      	ldr	r0, [pc, #324]	; (8006c20 <_printf_i+0x23c>)
 8006adc:	2100      	movs	r1, #0
 8006ade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ae2:	6865      	ldr	r5, [r4, #4]
 8006ae4:	2d00      	cmp	r5, #0
 8006ae6:	bfa8      	it	ge
 8006ae8:	6821      	ldrge	r1, [r4, #0]
 8006aea:	60a5      	str	r5, [r4, #8]
 8006aec:	bfa4      	itt	ge
 8006aee:	f021 0104 	bicge.w	r1, r1, #4
 8006af2:	6021      	strge	r1, [r4, #0]
 8006af4:	b90e      	cbnz	r6, 8006afa <_printf_i+0x116>
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	d04b      	beq.n	8006b92 <_printf_i+0x1ae>
 8006afa:	4615      	mov	r5, r2
 8006afc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b00:	fb03 6711 	mls	r7, r3, r1, r6
 8006b04:	5dc7      	ldrb	r7, [r0, r7]
 8006b06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b0a:	4637      	mov	r7, r6
 8006b0c:	42bb      	cmp	r3, r7
 8006b0e:	460e      	mov	r6, r1
 8006b10:	d9f4      	bls.n	8006afc <_printf_i+0x118>
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d10b      	bne.n	8006b2e <_printf_i+0x14a>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	07de      	lsls	r6, r3, #31
 8006b1a:	d508      	bpl.n	8006b2e <_printf_i+0x14a>
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	6861      	ldr	r1, [r4, #4]
 8006b20:	4299      	cmp	r1, r3
 8006b22:	bfde      	ittt	le
 8006b24:	2330      	movle	r3, #48	; 0x30
 8006b26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b2e:	1b52      	subs	r2, r2, r5
 8006b30:	6122      	str	r2, [r4, #16]
 8006b32:	464b      	mov	r3, r9
 8006b34:	4621      	mov	r1, r4
 8006b36:	4640      	mov	r0, r8
 8006b38:	f8cd a000 	str.w	sl, [sp]
 8006b3c:	aa03      	add	r2, sp, #12
 8006b3e:	f7ff fedf 	bl	8006900 <_printf_common>
 8006b42:	3001      	adds	r0, #1
 8006b44:	d14a      	bne.n	8006bdc <_printf_i+0x1f8>
 8006b46:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4a:	b004      	add	sp, #16
 8006b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	f043 0320 	orr.w	r3, r3, #32
 8006b56:	6023      	str	r3, [r4, #0]
 8006b58:	2778      	movs	r7, #120	; 0x78
 8006b5a:	4832      	ldr	r0, [pc, #200]	; (8006c24 <_printf_i+0x240>)
 8006b5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	6829      	ldr	r1, [r5, #0]
 8006b64:	061f      	lsls	r7, r3, #24
 8006b66:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b6a:	d402      	bmi.n	8006b72 <_printf_i+0x18e>
 8006b6c:	065f      	lsls	r7, r3, #25
 8006b6e:	bf48      	it	mi
 8006b70:	b2b6      	uxthmi	r6, r6
 8006b72:	07df      	lsls	r7, r3, #31
 8006b74:	bf48      	it	mi
 8006b76:	f043 0320 	orrmi.w	r3, r3, #32
 8006b7a:	6029      	str	r1, [r5, #0]
 8006b7c:	bf48      	it	mi
 8006b7e:	6023      	strmi	r3, [r4, #0]
 8006b80:	b91e      	cbnz	r6, 8006b8a <_printf_i+0x1a6>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	f023 0320 	bic.w	r3, r3, #32
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	2310      	movs	r3, #16
 8006b8c:	e7a6      	b.n	8006adc <_printf_i+0xf8>
 8006b8e:	4824      	ldr	r0, [pc, #144]	; (8006c20 <_printf_i+0x23c>)
 8006b90:	e7e4      	b.n	8006b5c <_printf_i+0x178>
 8006b92:	4615      	mov	r5, r2
 8006b94:	e7bd      	b.n	8006b12 <_printf_i+0x12e>
 8006b96:	682b      	ldr	r3, [r5, #0]
 8006b98:	6826      	ldr	r6, [r4, #0]
 8006b9a:	1d18      	adds	r0, r3, #4
 8006b9c:	6961      	ldr	r1, [r4, #20]
 8006b9e:	6028      	str	r0, [r5, #0]
 8006ba0:	0635      	lsls	r5, r6, #24
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	d501      	bpl.n	8006baa <_printf_i+0x1c6>
 8006ba6:	6019      	str	r1, [r3, #0]
 8006ba8:	e002      	b.n	8006bb0 <_printf_i+0x1cc>
 8006baa:	0670      	lsls	r0, r6, #25
 8006bac:	d5fb      	bpl.n	8006ba6 <_printf_i+0x1c2>
 8006bae:	8019      	strh	r1, [r3, #0]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	4615      	mov	r5, r2
 8006bb4:	6123      	str	r3, [r4, #16]
 8006bb6:	e7bc      	b.n	8006b32 <_printf_i+0x14e>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	2100      	movs	r1, #0
 8006bbc:	1d1a      	adds	r2, r3, #4
 8006bbe:	602a      	str	r2, [r5, #0]
 8006bc0:	681d      	ldr	r5, [r3, #0]
 8006bc2:	6862      	ldr	r2, [r4, #4]
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f000 f9c4 	bl	8006f52 <memchr>
 8006bca:	b108      	cbz	r0, 8006bd0 <_printf_i+0x1ec>
 8006bcc:	1b40      	subs	r0, r0, r5
 8006bce:	6060      	str	r0, [r4, #4]
 8006bd0:	6863      	ldr	r3, [r4, #4]
 8006bd2:	6123      	str	r3, [r4, #16]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bda:	e7aa      	b.n	8006b32 <_printf_i+0x14e>
 8006bdc:	462a      	mov	r2, r5
 8006bde:	4649      	mov	r1, r9
 8006be0:	4640      	mov	r0, r8
 8006be2:	6923      	ldr	r3, [r4, #16]
 8006be4:	47d0      	blx	sl
 8006be6:	3001      	adds	r0, #1
 8006be8:	d0ad      	beq.n	8006b46 <_printf_i+0x162>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	079b      	lsls	r3, r3, #30
 8006bee:	d413      	bmi.n	8006c18 <_printf_i+0x234>
 8006bf0:	68e0      	ldr	r0, [r4, #12]
 8006bf2:	9b03      	ldr	r3, [sp, #12]
 8006bf4:	4298      	cmp	r0, r3
 8006bf6:	bfb8      	it	lt
 8006bf8:	4618      	movlt	r0, r3
 8006bfa:	e7a6      	b.n	8006b4a <_printf_i+0x166>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	4632      	mov	r2, r6
 8006c00:	4649      	mov	r1, r9
 8006c02:	4640      	mov	r0, r8
 8006c04:	47d0      	blx	sl
 8006c06:	3001      	adds	r0, #1
 8006c08:	d09d      	beq.n	8006b46 <_printf_i+0x162>
 8006c0a:	3501      	adds	r5, #1
 8006c0c:	68e3      	ldr	r3, [r4, #12]
 8006c0e:	9903      	ldr	r1, [sp, #12]
 8006c10:	1a5b      	subs	r3, r3, r1
 8006c12:	42ab      	cmp	r3, r5
 8006c14:	dcf2      	bgt.n	8006bfc <_printf_i+0x218>
 8006c16:	e7eb      	b.n	8006bf0 <_printf_i+0x20c>
 8006c18:	2500      	movs	r5, #0
 8006c1a:	f104 0619 	add.w	r6, r4, #25
 8006c1e:	e7f5      	b.n	8006c0c <_printf_i+0x228>
 8006c20:	08009901 	.word	0x08009901
 8006c24:	08009912 	.word	0x08009912

08006c28 <std>:
 8006c28:	2300      	movs	r3, #0
 8006c2a:	b510      	push	{r4, lr}
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c36:	6083      	str	r3, [r0, #8]
 8006c38:	8181      	strh	r1, [r0, #12]
 8006c3a:	6643      	str	r3, [r0, #100]	; 0x64
 8006c3c:	81c2      	strh	r2, [r0, #14]
 8006c3e:	6183      	str	r3, [r0, #24]
 8006c40:	4619      	mov	r1, r3
 8006c42:	2208      	movs	r2, #8
 8006c44:	305c      	adds	r0, #92	; 0x5c
 8006c46:	f000 f8f4 	bl	8006e32 <memset>
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <std+0x58>)
 8006c4c:	6224      	str	r4, [r4, #32]
 8006c4e:	6263      	str	r3, [r4, #36]	; 0x24
 8006c50:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <std+0x5c>)
 8006c52:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c54:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <std+0x60>)
 8006c56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c58:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <std+0x64>)
 8006c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c5c:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <std+0x68>)
 8006c5e:	429c      	cmp	r4, r3
 8006c60:	d006      	beq.n	8006c70 <std+0x48>
 8006c62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006c66:	4294      	cmp	r4, r2
 8006c68:	d002      	beq.n	8006c70 <std+0x48>
 8006c6a:	33d0      	adds	r3, #208	; 0xd0
 8006c6c:	429c      	cmp	r4, r3
 8006c6e:	d105      	bne.n	8006c7c <std+0x54>
 8006c70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c78:	f000 b968 	b.w	8006f4c <__retarget_lock_init_recursive>
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	bf00      	nop
 8006c80:	08006dad 	.word	0x08006dad
 8006c84:	08006dcf 	.word	0x08006dcf
 8006c88:	08006e07 	.word	0x08006e07
 8006c8c:	08006e2b 	.word	0x08006e2b
 8006c90:	200003e4 	.word	0x200003e4

08006c94 <stdio_exit_handler>:
 8006c94:	4a02      	ldr	r2, [pc, #8]	; (8006ca0 <stdio_exit_handler+0xc>)
 8006c96:	4903      	ldr	r1, [pc, #12]	; (8006ca4 <stdio_exit_handler+0x10>)
 8006c98:	4803      	ldr	r0, [pc, #12]	; (8006ca8 <stdio_exit_handler+0x14>)
 8006c9a:	f000 b869 	b.w	8006d70 <_fwalk_sglue>
 8006c9e:	bf00      	nop
 8006ca0:	20000010 	.word	0x20000010
 8006ca4:	080084ed 	.word	0x080084ed
 8006ca8:	2000001c 	.word	0x2000001c

08006cac <cleanup_stdio>:
 8006cac:	6841      	ldr	r1, [r0, #4]
 8006cae:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <cleanup_stdio+0x34>)
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	4299      	cmp	r1, r3
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	d001      	beq.n	8006cbc <cleanup_stdio+0x10>
 8006cb8:	f001 fc18 	bl	80084ec <_fflush_r>
 8006cbc:	68a1      	ldr	r1, [r4, #8]
 8006cbe:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <cleanup_stdio+0x38>)
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	d002      	beq.n	8006cca <cleanup_stdio+0x1e>
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f001 fc11 	bl	80084ec <_fflush_r>
 8006cca:	68e1      	ldr	r1, [r4, #12]
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <cleanup_stdio+0x3c>)
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	d004      	beq.n	8006cdc <cleanup_stdio+0x30>
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd8:	f001 bc08 	b.w	80084ec <_fflush_r>
 8006cdc:	bd10      	pop	{r4, pc}
 8006cde:	bf00      	nop
 8006ce0:	200003e4 	.word	0x200003e4
 8006ce4:	2000044c 	.word	0x2000044c
 8006ce8:	200004b4 	.word	0x200004b4

08006cec <global_stdio_init.part.0>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <global_stdio_init.part.0+0x30>)
 8006cf0:	4c0b      	ldr	r4, [pc, #44]	; (8006d20 <global_stdio_init.part.0+0x34>)
 8006cf2:	4a0c      	ldr	r2, [pc, #48]	; (8006d24 <global_stdio_init.part.0+0x38>)
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	2104      	movs	r1, #4
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f7ff ff94 	bl	8006c28 <std>
 8006d00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006d04:	2201      	movs	r2, #1
 8006d06:	2109      	movs	r1, #9
 8006d08:	f7ff ff8e 	bl	8006c28 <std>
 8006d0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d10:	2202      	movs	r2, #2
 8006d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d16:	2112      	movs	r1, #18
 8006d18:	f7ff bf86 	b.w	8006c28 <std>
 8006d1c:	2000051c 	.word	0x2000051c
 8006d20:	200003e4 	.word	0x200003e4
 8006d24:	08006c95 	.word	0x08006c95

08006d28 <__sfp_lock_acquire>:
 8006d28:	4801      	ldr	r0, [pc, #4]	; (8006d30 <__sfp_lock_acquire+0x8>)
 8006d2a:	f000 b910 	b.w	8006f4e <__retarget_lock_acquire_recursive>
 8006d2e:	bf00      	nop
 8006d30:	20000525 	.word	0x20000525

08006d34 <__sfp_lock_release>:
 8006d34:	4801      	ldr	r0, [pc, #4]	; (8006d3c <__sfp_lock_release+0x8>)
 8006d36:	f000 b90b 	b.w	8006f50 <__retarget_lock_release_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	20000525 	.word	0x20000525

08006d40 <__sinit>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	4604      	mov	r4, r0
 8006d44:	f7ff fff0 	bl	8006d28 <__sfp_lock_acquire>
 8006d48:	6a23      	ldr	r3, [r4, #32]
 8006d4a:	b11b      	cbz	r3, 8006d54 <__sinit+0x14>
 8006d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d50:	f7ff bff0 	b.w	8006d34 <__sfp_lock_release>
 8006d54:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <__sinit+0x28>)
 8006d56:	6223      	str	r3, [r4, #32]
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <__sinit+0x2c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1f5      	bne.n	8006d4c <__sinit+0xc>
 8006d60:	f7ff ffc4 	bl	8006cec <global_stdio_init.part.0>
 8006d64:	e7f2      	b.n	8006d4c <__sinit+0xc>
 8006d66:	bf00      	nop
 8006d68:	08006cad 	.word	0x08006cad
 8006d6c:	2000051c 	.word	0x2000051c

08006d70 <_fwalk_sglue>:
 8006d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d74:	4607      	mov	r7, r0
 8006d76:	4688      	mov	r8, r1
 8006d78:	4614      	mov	r4, r2
 8006d7a:	2600      	movs	r6, #0
 8006d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d80:	f1b9 0901 	subs.w	r9, r9, #1
 8006d84:	d505      	bpl.n	8006d92 <_fwalk_sglue+0x22>
 8006d86:	6824      	ldr	r4, [r4, #0]
 8006d88:	2c00      	cmp	r4, #0
 8006d8a:	d1f7      	bne.n	8006d7c <_fwalk_sglue+0xc>
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d92:	89ab      	ldrh	r3, [r5, #12]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d907      	bls.n	8006da8 <_fwalk_sglue+0x38>
 8006d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	d003      	beq.n	8006da8 <_fwalk_sglue+0x38>
 8006da0:	4629      	mov	r1, r5
 8006da2:	4638      	mov	r0, r7
 8006da4:	47c0      	blx	r8
 8006da6:	4306      	orrs	r6, r0
 8006da8:	3568      	adds	r5, #104	; 0x68
 8006daa:	e7e9      	b.n	8006d80 <_fwalk_sglue+0x10>

08006dac <__sread>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	460c      	mov	r4, r1
 8006db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db4:	f000 f86c 	bl	8006e90 <_read_r>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	bfab      	itete	ge
 8006dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8006dc0:	181b      	addge	r3, r3, r0
 8006dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dc6:	bfac      	ite	ge
 8006dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dca:	81a3      	strhlt	r3, [r4, #12]
 8006dcc:	bd10      	pop	{r4, pc}

08006dce <__swrite>:
 8006dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd2:	461f      	mov	r7, r3
 8006dd4:	898b      	ldrh	r3, [r1, #12]
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	05db      	lsls	r3, r3, #23
 8006dda:	460c      	mov	r4, r1
 8006ddc:	4616      	mov	r6, r2
 8006dde:	d505      	bpl.n	8006dec <__swrite+0x1e>
 8006de0:	2302      	movs	r3, #2
 8006de2:	2200      	movs	r2, #0
 8006de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de8:	f000 f840 	bl	8006e6c <_lseek_r>
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	4632      	mov	r2, r6
 8006df0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006df4:	81a3      	strh	r3, [r4, #12]
 8006df6:	4628      	mov	r0, r5
 8006df8:	463b      	mov	r3, r7
 8006dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e02:	f000 b867 	b.w	8006ed4 <_write_r>

08006e06 <__sseek>:
 8006e06:	b510      	push	{r4, lr}
 8006e08:	460c      	mov	r4, r1
 8006e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0e:	f000 f82d 	bl	8006e6c <_lseek_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	bf15      	itete	ne
 8006e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e22:	81a3      	strheq	r3, [r4, #12]
 8006e24:	bf18      	it	ne
 8006e26:	81a3      	strhne	r3, [r4, #12]
 8006e28:	bd10      	pop	{r4, pc}

08006e2a <__sclose>:
 8006e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2e:	f000 b80d 	b.w	8006e4c <_close_r>

08006e32 <memset>:
 8006e32:	4603      	mov	r3, r0
 8006e34:	4402      	add	r2, r0
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d100      	bne.n	8006e3c <memset+0xa>
 8006e3a:	4770      	bx	lr
 8006e3c:	f803 1b01 	strb.w	r1, [r3], #1
 8006e40:	e7f9      	b.n	8006e36 <memset+0x4>
	...

08006e44 <_localeconv_r>:
 8006e44:	4800      	ldr	r0, [pc, #0]	; (8006e48 <_localeconv_r+0x4>)
 8006e46:	4770      	bx	lr
 8006e48:	2000015c 	.word	0x2000015c

08006e4c <_close_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	2300      	movs	r3, #0
 8006e50:	4d05      	ldr	r5, [pc, #20]	; (8006e68 <_close_r+0x1c>)
 8006e52:	4604      	mov	r4, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	602b      	str	r3, [r5, #0]
 8006e58:	f7fa fe54 	bl	8001b04 <_close>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_close_r+0x1a>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_close_r+0x1a>
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	20000520 	.word	0x20000520

08006e6c <_lseek_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	4611      	mov	r1, r2
 8006e74:	2200      	movs	r2, #0
 8006e76:	4d05      	ldr	r5, [pc, #20]	; (8006e8c <_lseek_r+0x20>)
 8006e78:	602a      	str	r2, [r5, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f7fa fe66 	bl	8001b4c <_lseek>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_lseek_r+0x1e>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_lseek_r+0x1e>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	20000520 	.word	0x20000520

08006e90 <_read_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4604      	mov	r4, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4d05      	ldr	r5, [pc, #20]	; (8006eb0 <_read_r+0x20>)
 8006e9c:	602a      	str	r2, [r5, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f7fa fdf7 	bl	8001a92 <_read>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_read_r+0x1e>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_read_r+0x1e>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	20000520 	.word	0x20000520

08006eb4 <_sbrk_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	4d05      	ldr	r5, [pc, #20]	; (8006ed0 <_sbrk_r+0x1c>)
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	602b      	str	r3, [r5, #0]
 8006ec0:	f7fa fe50 	bl	8001b64 <_sbrk>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_sbrk_r+0x1a>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_sbrk_r+0x1a>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	20000520 	.word	0x20000520

08006ed4 <_write_r>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	4608      	mov	r0, r1
 8006eda:	4611      	mov	r1, r2
 8006edc:	2200      	movs	r2, #0
 8006ede:	4d05      	ldr	r5, [pc, #20]	; (8006ef4 <_write_r+0x20>)
 8006ee0:	602a      	str	r2, [r5, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f7fa fdf2 	bl	8001acc <_write>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_write_r+0x1e>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_write_r+0x1e>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	20000520 	.word	0x20000520

08006ef8 <__errno>:
 8006ef8:	4b01      	ldr	r3, [pc, #4]	; (8006f00 <__errno+0x8>)
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000068 	.word	0x20000068

08006f04 <__libc_init_array>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	2600      	movs	r6, #0
 8006f08:	4d0c      	ldr	r5, [pc, #48]	; (8006f3c <__libc_init_array+0x38>)
 8006f0a:	4c0d      	ldr	r4, [pc, #52]	; (8006f40 <__libc_init_array+0x3c>)
 8006f0c:	1b64      	subs	r4, r4, r5
 8006f0e:	10a4      	asrs	r4, r4, #2
 8006f10:	42a6      	cmp	r6, r4
 8006f12:	d109      	bne.n	8006f28 <__libc_init_array+0x24>
 8006f14:	f002 fc34 	bl	8009780 <_init>
 8006f18:	2600      	movs	r6, #0
 8006f1a:	4d0a      	ldr	r5, [pc, #40]	; (8006f44 <__libc_init_array+0x40>)
 8006f1c:	4c0a      	ldr	r4, [pc, #40]	; (8006f48 <__libc_init_array+0x44>)
 8006f1e:	1b64      	subs	r4, r4, r5
 8006f20:	10a4      	asrs	r4, r4, #2
 8006f22:	42a6      	cmp	r6, r4
 8006f24:	d105      	bne.n	8006f32 <__libc_init_array+0x2e>
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2c:	4798      	blx	r3
 8006f2e:	3601      	adds	r6, #1
 8006f30:	e7ee      	b.n	8006f10 <__libc_init_array+0xc>
 8006f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f36:	4798      	blx	r3
 8006f38:	3601      	adds	r6, #1
 8006f3a:	e7f2      	b.n	8006f22 <__libc_init_array+0x1e>
 8006f3c:	08009f34 	.word	0x08009f34
 8006f40:	08009f34 	.word	0x08009f34
 8006f44:	08009f34 	.word	0x08009f34
 8006f48:	08009f38 	.word	0x08009f38

08006f4c <__retarget_lock_init_recursive>:
 8006f4c:	4770      	bx	lr

08006f4e <__retarget_lock_acquire_recursive>:
 8006f4e:	4770      	bx	lr

08006f50 <__retarget_lock_release_recursive>:
 8006f50:	4770      	bx	lr

08006f52 <memchr>:
 8006f52:	4603      	mov	r3, r0
 8006f54:	b510      	push	{r4, lr}
 8006f56:	b2c9      	uxtb	r1, r1
 8006f58:	4402      	add	r2, r0
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	d101      	bne.n	8006f64 <memchr+0x12>
 8006f60:	2000      	movs	r0, #0
 8006f62:	e003      	b.n	8006f6c <memchr+0x1a>
 8006f64:	7804      	ldrb	r4, [r0, #0]
 8006f66:	3301      	adds	r3, #1
 8006f68:	428c      	cmp	r4, r1
 8006f6a:	d1f6      	bne.n	8006f5a <memchr+0x8>
 8006f6c:	bd10      	pop	{r4, pc}

08006f6e <memcpy>:
 8006f6e:	440a      	add	r2, r1
 8006f70:	4291      	cmp	r1, r2
 8006f72:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f76:	d100      	bne.n	8006f7a <memcpy+0xc>
 8006f78:	4770      	bx	lr
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f80:	4291      	cmp	r1, r2
 8006f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f86:	d1f9      	bne.n	8006f7c <memcpy+0xe>
 8006f88:	bd10      	pop	{r4, pc}

08006f8a <quorem>:
 8006f8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8e:	6903      	ldr	r3, [r0, #16]
 8006f90:	690c      	ldr	r4, [r1, #16]
 8006f92:	4607      	mov	r7, r0
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	db7f      	blt.n	8007098 <quorem+0x10e>
 8006f98:	3c01      	subs	r4, #1
 8006f9a:	f100 0514 	add.w	r5, r0, #20
 8006f9e:	f101 0814 	add.w	r8, r1, #20
 8006fa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006fbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fc0:	d331      	bcc.n	8007026 <quorem+0x9c>
 8006fc2:	f04f 0e00 	mov.w	lr, #0
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	46ac      	mov	ip, r5
 8006fca:	46f2      	mov	sl, lr
 8006fcc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fd0:	b293      	uxth	r3, r2
 8006fd2:	fb06 e303 	mla	r3, r6, r3, lr
 8006fd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fda:	0c1a      	lsrs	r2, r3, #16
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	fb06 220e 	mla	r2, r6, lr, r2
 8006fe2:	ebaa 0303 	sub.w	r3, sl, r3
 8006fe6:	f8dc a000 	ldr.w	sl, [ip]
 8006fea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fee:	fa1f fa8a 	uxth.w	sl, sl
 8006ff2:	4453      	add	r3, sl
 8006ff4:	f8dc a000 	ldr.w	sl, [ip]
 8006ff8:	b292      	uxth	r2, r2
 8006ffa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006ffe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007002:	b29b      	uxth	r3, r3
 8007004:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007008:	4581      	cmp	r9, r0
 800700a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800700e:	f84c 3b04 	str.w	r3, [ip], #4
 8007012:	d2db      	bcs.n	8006fcc <quorem+0x42>
 8007014:	f855 300b 	ldr.w	r3, [r5, fp]
 8007018:	b92b      	cbnz	r3, 8007026 <quorem+0x9c>
 800701a:	9b01      	ldr	r3, [sp, #4]
 800701c:	3b04      	subs	r3, #4
 800701e:	429d      	cmp	r5, r3
 8007020:	461a      	mov	r2, r3
 8007022:	d32d      	bcc.n	8007080 <quorem+0xf6>
 8007024:	613c      	str	r4, [r7, #16]
 8007026:	4638      	mov	r0, r7
 8007028:	f001 f8e0 	bl	80081ec <__mcmp>
 800702c:	2800      	cmp	r0, #0
 800702e:	db23      	blt.n	8007078 <quorem+0xee>
 8007030:	4629      	mov	r1, r5
 8007032:	2000      	movs	r0, #0
 8007034:	3601      	adds	r6, #1
 8007036:	f858 2b04 	ldr.w	r2, [r8], #4
 800703a:	f8d1 c000 	ldr.w	ip, [r1]
 800703e:	b293      	uxth	r3, r2
 8007040:	1ac3      	subs	r3, r0, r3
 8007042:	0c12      	lsrs	r2, r2, #16
 8007044:	fa1f f08c 	uxth.w	r0, ip
 8007048:	4403      	add	r3, r0
 800704a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800704e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007052:	b29b      	uxth	r3, r3
 8007054:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007058:	45c1      	cmp	r9, r8
 800705a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800705e:	f841 3b04 	str.w	r3, [r1], #4
 8007062:	d2e8      	bcs.n	8007036 <quorem+0xac>
 8007064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007068:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800706c:	b922      	cbnz	r2, 8007078 <quorem+0xee>
 800706e:	3b04      	subs	r3, #4
 8007070:	429d      	cmp	r5, r3
 8007072:	461a      	mov	r2, r3
 8007074:	d30a      	bcc.n	800708c <quorem+0x102>
 8007076:	613c      	str	r4, [r7, #16]
 8007078:	4630      	mov	r0, r6
 800707a:	b003      	add	sp, #12
 800707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007080:	6812      	ldr	r2, [r2, #0]
 8007082:	3b04      	subs	r3, #4
 8007084:	2a00      	cmp	r2, #0
 8007086:	d1cd      	bne.n	8007024 <quorem+0x9a>
 8007088:	3c01      	subs	r4, #1
 800708a:	e7c8      	b.n	800701e <quorem+0x94>
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	3b04      	subs	r3, #4
 8007090:	2a00      	cmp	r2, #0
 8007092:	d1f0      	bne.n	8007076 <quorem+0xec>
 8007094:	3c01      	subs	r4, #1
 8007096:	e7eb      	b.n	8007070 <quorem+0xe6>
 8007098:	2000      	movs	r0, #0
 800709a:	e7ee      	b.n	800707a <quorem+0xf0>
 800709c:	0000      	movs	r0, r0
	...

080070a0 <_dtoa_r>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	4616      	mov	r6, r2
 80070a6:	461f      	mov	r7, r3
 80070a8:	69c4      	ldr	r4, [r0, #28]
 80070aa:	b099      	sub	sp, #100	; 0x64
 80070ac:	4605      	mov	r5, r0
 80070ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80070b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80070b6:	b974      	cbnz	r4, 80070d6 <_dtoa_r+0x36>
 80070b8:	2010      	movs	r0, #16
 80070ba:	f7ff f8a3 	bl	8006204 <malloc>
 80070be:	4602      	mov	r2, r0
 80070c0:	61e8      	str	r0, [r5, #28]
 80070c2:	b920      	cbnz	r0, 80070ce <_dtoa_r+0x2e>
 80070c4:	21ef      	movs	r1, #239	; 0xef
 80070c6:	4bac      	ldr	r3, [pc, #688]	; (8007378 <_dtoa_r+0x2d8>)
 80070c8:	48ac      	ldr	r0, [pc, #688]	; (800737c <_dtoa_r+0x2dc>)
 80070ca:	f001 fa37 	bl	800853c <__assert_func>
 80070ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070d2:	6004      	str	r4, [r0, #0]
 80070d4:	60c4      	str	r4, [r0, #12]
 80070d6:	69eb      	ldr	r3, [r5, #28]
 80070d8:	6819      	ldr	r1, [r3, #0]
 80070da:	b151      	cbz	r1, 80070f2 <_dtoa_r+0x52>
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	2301      	movs	r3, #1
 80070e0:	4093      	lsls	r3, r2
 80070e2:	604a      	str	r2, [r1, #4]
 80070e4:	608b      	str	r3, [r1, #8]
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 fe46 	bl	8007d78 <_Bfree>
 80070ec:	2200      	movs	r2, #0
 80070ee:	69eb      	ldr	r3, [r5, #28]
 80070f0:	601a      	str	r2, [r3, #0]
 80070f2:	1e3b      	subs	r3, r7, #0
 80070f4:	bfaf      	iteee	ge
 80070f6:	2300      	movge	r3, #0
 80070f8:	2201      	movlt	r2, #1
 80070fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070fe:	9305      	strlt	r3, [sp, #20]
 8007100:	bfa8      	it	ge
 8007102:	f8c8 3000 	strge.w	r3, [r8]
 8007106:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800710a:	4b9d      	ldr	r3, [pc, #628]	; (8007380 <_dtoa_r+0x2e0>)
 800710c:	bfb8      	it	lt
 800710e:	f8c8 2000 	strlt.w	r2, [r8]
 8007112:	ea33 0309 	bics.w	r3, r3, r9
 8007116:	d119      	bne.n	800714c <_dtoa_r+0xac>
 8007118:	f242 730f 	movw	r3, #9999	; 0x270f
 800711c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007124:	4333      	orrs	r3, r6
 8007126:	f000 8589 	beq.w	8007c3c <_dtoa_r+0xb9c>
 800712a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800712c:	b953      	cbnz	r3, 8007144 <_dtoa_r+0xa4>
 800712e:	4b95      	ldr	r3, [pc, #596]	; (8007384 <_dtoa_r+0x2e4>)
 8007130:	e023      	b.n	800717a <_dtoa_r+0xda>
 8007132:	4b95      	ldr	r3, [pc, #596]	; (8007388 <_dtoa_r+0x2e8>)
 8007134:	9303      	str	r3, [sp, #12]
 8007136:	3308      	adds	r3, #8
 8007138:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	9803      	ldr	r0, [sp, #12]
 800713e:	b019      	add	sp, #100	; 0x64
 8007140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007144:	4b8f      	ldr	r3, [pc, #572]	; (8007384 <_dtoa_r+0x2e4>)
 8007146:	9303      	str	r3, [sp, #12]
 8007148:	3303      	adds	r3, #3
 800714a:	e7f5      	b.n	8007138 <_dtoa_r+0x98>
 800714c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007150:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007158:	2200      	movs	r2, #0
 800715a:	2300      	movs	r3, #0
 800715c:	f7f9 fc24 	bl	80009a8 <__aeabi_dcmpeq>
 8007160:	4680      	mov	r8, r0
 8007162:	b160      	cbz	r0, 800717e <_dtoa_r+0xde>
 8007164:	2301      	movs	r3, #1
 8007166:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8562 	beq.w	8007c36 <_dtoa_r+0xb96>
 8007172:	4b86      	ldr	r3, [pc, #536]	; (800738c <_dtoa_r+0x2ec>)
 8007174:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	3b01      	subs	r3, #1
 800717a:	9303      	str	r3, [sp, #12]
 800717c:	e7de      	b.n	800713c <_dtoa_r+0x9c>
 800717e:	ab16      	add	r3, sp, #88	; 0x58
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	ab17      	add	r3, sp, #92	; 0x5c
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	4628      	mov	r0, r5
 8007188:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800718c:	f001 f8d6 	bl	800833c <__d2b>
 8007190:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007194:	4682      	mov	sl, r0
 8007196:	2c00      	cmp	r4, #0
 8007198:	d07e      	beq.n	8007298 <_dtoa_r+0x1f8>
 800719a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800719e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80071a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80071ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80071b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80071b4:	4619      	mov	r1, r3
 80071b6:	2200      	movs	r2, #0
 80071b8:	4b75      	ldr	r3, [pc, #468]	; (8007390 <_dtoa_r+0x2f0>)
 80071ba:	f7f8 ffd5 	bl	8000168 <__aeabi_dsub>
 80071be:	a368      	add	r3, pc, #416	; (adr r3, 8007360 <_dtoa_r+0x2c0>)
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f7f9 f988 	bl	80004d8 <__aeabi_dmul>
 80071c8:	a367      	add	r3, pc, #412	; (adr r3, 8007368 <_dtoa_r+0x2c8>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f8 ffcd 	bl	800016c <__adddf3>
 80071d2:	4606      	mov	r6, r0
 80071d4:	4620      	mov	r0, r4
 80071d6:	460f      	mov	r7, r1
 80071d8:	f7f9 f914 	bl	8000404 <__aeabi_i2d>
 80071dc:	a364      	add	r3, pc, #400	; (adr r3, 8007370 <_dtoa_r+0x2d0>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f7f9 f979 	bl	80004d8 <__aeabi_dmul>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4630      	mov	r0, r6
 80071ec:	4639      	mov	r1, r7
 80071ee:	f7f8 ffbd 	bl	800016c <__adddf3>
 80071f2:	4606      	mov	r6, r0
 80071f4:	460f      	mov	r7, r1
 80071f6:	f7f9 fc1f 	bl	8000a38 <__aeabi_d2iz>
 80071fa:	2200      	movs	r2, #0
 80071fc:	4683      	mov	fp, r0
 80071fe:	2300      	movs	r3, #0
 8007200:	4630      	mov	r0, r6
 8007202:	4639      	mov	r1, r7
 8007204:	f7f9 fbda 	bl	80009bc <__aeabi_dcmplt>
 8007208:	b148      	cbz	r0, 800721e <_dtoa_r+0x17e>
 800720a:	4658      	mov	r0, fp
 800720c:	f7f9 f8fa 	bl	8000404 <__aeabi_i2d>
 8007210:	4632      	mov	r2, r6
 8007212:	463b      	mov	r3, r7
 8007214:	f7f9 fbc8 	bl	80009a8 <__aeabi_dcmpeq>
 8007218:	b908      	cbnz	r0, 800721e <_dtoa_r+0x17e>
 800721a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800721e:	f1bb 0f16 	cmp.w	fp, #22
 8007222:	d857      	bhi.n	80072d4 <_dtoa_r+0x234>
 8007224:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007228:	4b5a      	ldr	r3, [pc, #360]	; (8007394 <_dtoa_r+0x2f4>)
 800722a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	f7f9 fbc3 	bl	80009bc <__aeabi_dcmplt>
 8007236:	2800      	cmp	r0, #0
 8007238:	d04e      	beq.n	80072d8 <_dtoa_r+0x238>
 800723a:	2300      	movs	r3, #0
 800723c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007240:	930f      	str	r3, [sp, #60]	; 0x3c
 8007242:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007244:	1b1b      	subs	r3, r3, r4
 8007246:	1e5a      	subs	r2, r3, #1
 8007248:	bf46      	itte	mi
 800724a:	f1c3 0901 	rsbmi	r9, r3, #1
 800724e:	2300      	movmi	r3, #0
 8007250:	f04f 0900 	movpl.w	r9, #0
 8007254:	9209      	str	r2, [sp, #36]	; 0x24
 8007256:	bf48      	it	mi
 8007258:	9309      	strmi	r3, [sp, #36]	; 0x24
 800725a:	f1bb 0f00 	cmp.w	fp, #0
 800725e:	db3d      	blt.n	80072dc <_dtoa_r+0x23c>
 8007260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007262:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007266:	445b      	add	r3, fp
 8007268:	9309      	str	r3, [sp, #36]	; 0x24
 800726a:	2300      	movs	r3, #0
 800726c:	930a      	str	r3, [sp, #40]	; 0x28
 800726e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007270:	2b09      	cmp	r3, #9
 8007272:	d867      	bhi.n	8007344 <_dtoa_r+0x2a4>
 8007274:	2b05      	cmp	r3, #5
 8007276:	bfc4      	itt	gt
 8007278:	3b04      	subgt	r3, #4
 800727a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800727c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800727e:	bfc8      	it	gt
 8007280:	2400      	movgt	r4, #0
 8007282:	f1a3 0302 	sub.w	r3, r3, #2
 8007286:	bfd8      	it	le
 8007288:	2401      	movle	r4, #1
 800728a:	2b03      	cmp	r3, #3
 800728c:	f200 8086 	bhi.w	800739c <_dtoa_r+0x2fc>
 8007290:	e8df f003 	tbb	[pc, r3]
 8007294:	5637392c 	.word	0x5637392c
 8007298:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800729c:	441c      	add	r4, r3
 800729e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	bfc1      	itttt	gt
 80072a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80072ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80072b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80072b6:	bfd6      	itet	le
 80072b8:	f1c3 0320 	rsble	r3, r3, #32
 80072bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80072c0:	fa06 f003 	lslle.w	r0, r6, r3
 80072c4:	f7f9 f88e 	bl	80003e4 <__aeabi_ui2d>
 80072c8:	2201      	movs	r2, #1
 80072ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80072ce:	3c01      	subs	r4, #1
 80072d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80072d2:	e76f      	b.n	80071b4 <_dtoa_r+0x114>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e7b3      	b.n	8007240 <_dtoa_r+0x1a0>
 80072d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80072da:	e7b2      	b.n	8007242 <_dtoa_r+0x1a2>
 80072dc:	f1cb 0300 	rsb	r3, fp, #0
 80072e0:	930a      	str	r3, [sp, #40]	; 0x28
 80072e2:	2300      	movs	r3, #0
 80072e4:	eba9 090b 	sub.w	r9, r9, fp
 80072e8:	930e      	str	r3, [sp, #56]	; 0x38
 80072ea:	e7c0      	b.n	800726e <_dtoa_r+0x1ce>
 80072ec:	2300      	movs	r3, #0
 80072ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80072f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	dc55      	bgt.n	80073a2 <_dtoa_r+0x302>
 80072f6:	2301      	movs	r3, #1
 80072f8:	461a      	mov	r2, r3
 80072fa:	9306      	str	r3, [sp, #24]
 80072fc:	9308      	str	r3, [sp, #32]
 80072fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8007300:	e00b      	b.n	800731a <_dtoa_r+0x27a>
 8007302:	2301      	movs	r3, #1
 8007304:	e7f3      	b.n	80072ee <_dtoa_r+0x24e>
 8007306:	2300      	movs	r3, #0
 8007308:	930b      	str	r3, [sp, #44]	; 0x2c
 800730a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800730c:	445b      	add	r3, fp
 800730e:	9306      	str	r3, [sp, #24]
 8007310:	3301      	adds	r3, #1
 8007312:	2b01      	cmp	r3, #1
 8007314:	9308      	str	r3, [sp, #32]
 8007316:	bfb8      	it	lt
 8007318:	2301      	movlt	r3, #1
 800731a:	2100      	movs	r1, #0
 800731c:	2204      	movs	r2, #4
 800731e:	69e8      	ldr	r0, [r5, #28]
 8007320:	f102 0614 	add.w	r6, r2, #20
 8007324:	429e      	cmp	r6, r3
 8007326:	d940      	bls.n	80073aa <_dtoa_r+0x30a>
 8007328:	6041      	str	r1, [r0, #4]
 800732a:	4628      	mov	r0, r5
 800732c:	f000 fce4 	bl	8007cf8 <_Balloc>
 8007330:	9003      	str	r0, [sp, #12]
 8007332:	2800      	cmp	r0, #0
 8007334:	d13c      	bne.n	80073b0 <_dtoa_r+0x310>
 8007336:	4602      	mov	r2, r0
 8007338:	f240 11af 	movw	r1, #431	; 0x1af
 800733c:	4b16      	ldr	r3, [pc, #88]	; (8007398 <_dtoa_r+0x2f8>)
 800733e:	e6c3      	b.n	80070c8 <_dtoa_r+0x28>
 8007340:	2301      	movs	r3, #1
 8007342:	e7e1      	b.n	8007308 <_dtoa_r+0x268>
 8007344:	2401      	movs	r4, #1
 8007346:	2300      	movs	r3, #0
 8007348:	940b      	str	r4, [sp, #44]	; 0x2c
 800734a:	9322      	str	r3, [sp, #136]	; 0x88
 800734c:	f04f 33ff 	mov.w	r3, #4294967295
 8007350:	2200      	movs	r2, #0
 8007352:	9306      	str	r3, [sp, #24]
 8007354:	9308      	str	r3, [sp, #32]
 8007356:	2312      	movs	r3, #18
 8007358:	e7d1      	b.n	80072fe <_dtoa_r+0x25e>
 800735a:	bf00      	nop
 800735c:	f3af 8000 	nop.w
 8007360:	636f4361 	.word	0x636f4361
 8007364:	3fd287a7 	.word	0x3fd287a7
 8007368:	8b60c8b3 	.word	0x8b60c8b3
 800736c:	3fc68a28 	.word	0x3fc68a28
 8007370:	509f79fb 	.word	0x509f79fb
 8007374:	3fd34413 	.word	0x3fd34413
 8007378:	08009930 	.word	0x08009930
 800737c:	08009947 	.word	0x08009947
 8007380:	7ff00000 	.word	0x7ff00000
 8007384:	0800992c 	.word	0x0800992c
 8007388:	08009923 	.word	0x08009923
 800738c:	08009900 	.word	0x08009900
 8007390:	3ff80000 	.word	0x3ff80000
 8007394:	08009a38 	.word	0x08009a38
 8007398:	0800999f 	.word	0x0800999f
 800739c:	2301      	movs	r3, #1
 800739e:	930b      	str	r3, [sp, #44]	; 0x2c
 80073a0:	e7d4      	b.n	800734c <_dtoa_r+0x2ac>
 80073a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073a4:	9306      	str	r3, [sp, #24]
 80073a6:	9308      	str	r3, [sp, #32]
 80073a8:	e7b7      	b.n	800731a <_dtoa_r+0x27a>
 80073aa:	3101      	adds	r1, #1
 80073ac:	0052      	lsls	r2, r2, #1
 80073ae:	e7b7      	b.n	8007320 <_dtoa_r+0x280>
 80073b0:	69eb      	ldr	r3, [r5, #28]
 80073b2:	9a03      	ldr	r2, [sp, #12]
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	9b08      	ldr	r3, [sp, #32]
 80073b8:	2b0e      	cmp	r3, #14
 80073ba:	f200 80a8 	bhi.w	800750e <_dtoa_r+0x46e>
 80073be:	2c00      	cmp	r4, #0
 80073c0:	f000 80a5 	beq.w	800750e <_dtoa_r+0x46e>
 80073c4:	f1bb 0f00 	cmp.w	fp, #0
 80073c8:	dd34      	ble.n	8007434 <_dtoa_r+0x394>
 80073ca:	4b9a      	ldr	r3, [pc, #616]	; (8007634 <_dtoa_r+0x594>)
 80073cc:	f00b 020f 	and.w	r2, fp, #15
 80073d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80073d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80073e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80073e4:	d016      	beq.n	8007414 <_dtoa_r+0x374>
 80073e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073ea:	4b93      	ldr	r3, [pc, #588]	; (8007638 <_dtoa_r+0x598>)
 80073ec:	2703      	movs	r7, #3
 80073ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073f2:	f7f9 f99b 	bl	800072c <__aeabi_ddiv>
 80073f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073fa:	f004 040f 	and.w	r4, r4, #15
 80073fe:	4e8e      	ldr	r6, [pc, #568]	; (8007638 <_dtoa_r+0x598>)
 8007400:	b954      	cbnz	r4, 8007418 <_dtoa_r+0x378>
 8007402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800740a:	f7f9 f98f 	bl	800072c <__aeabi_ddiv>
 800740e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007412:	e029      	b.n	8007468 <_dtoa_r+0x3c8>
 8007414:	2702      	movs	r7, #2
 8007416:	e7f2      	b.n	80073fe <_dtoa_r+0x35e>
 8007418:	07e1      	lsls	r1, r4, #31
 800741a:	d508      	bpl.n	800742e <_dtoa_r+0x38e>
 800741c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007420:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007424:	f7f9 f858 	bl	80004d8 <__aeabi_dmul>
 8007428:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800742c:	3701      	adds	r7, #1
 800742e:	1064      	asrs	r4, r4, #1
 8007430:	3608      	adds	r6, #8
 8007432:	e7e5      	b.n	8007400 <_dtoa_r+0x360>
 8007434:	f000 80a5 	beq.w	8007582 <_dtoa_r+0x4e2>
 8007438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800743c:	f1cb 0400 	rsb	r4, fp, #0
 8007440:	4b7c      	ldr	r3, [pc, #496]	; (8007634 <_dtoa_r+0x594>)
 8007442:	f004 020f 	and.w	r2, r4, #15
 8007446:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	f7f9 f843 	bl	80004d8 <__aeabi_dmul>
 8007452:	2702      	movs	r7, #2
 8007454:	2300      	movs	r3, #0
 8007456:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800745a:	4e77      	ldr	r6, [pc, #476]	; (8007638 <_dtoa_r+0x598>)
 800745c:	1124      	asrs	r4, r4, #4
 800745e:	2c00      	cmp	r4, #0
 8007460:	f040 8084 	bne.w	800756c <_dtoa_r+0x4cc>
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1d2      	bne.n	800740e <_dtoa_r+0x36e>
 8007468:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800746c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 8087 	beq.w	8007586 <_dtoa_r+0x4e6>
 8007478:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800747c:	2200      	movs	r2, #0
 800747e:	4b6f      	ldr	r3, [pc, #444]	; (800763c <_dtoa_r+0x59c>)
 8007480:	f7f9 fa9c 	bl	80009bc <__aeabi_dcmplt>
 8007484:	2800      	cmp	r0, #0
 8007486:	d07e      	beq.n	8007586 <_dtoa_r+0x4e6>
 8007488:	9b08      	ldr	r3, [sp, #32]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d07b      	beq.n	8007586 <_dtoa_r+0x4e6>
 800748e:	9b06      	ldr	r3, [sp, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	dd38      	ble.n	8007506 <_dtoa_r+0x466>
 8007494:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007498:	2200      	movs	r2, #0
 800749a:	4b69      	ldr	r3, [pc, #420]	; (8007640 <_dtoa_r+0x5a0>)
 800749c:	f7f9 f81c 	bl	80004d8 <__aeabi_dmul>
 80074a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074a4:	9c06      	ldr	r4, [sp, #24]
 80074a6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80074aa:	3701      	adds	r7, #1
 80074ac:	4638      	mov	r0, r7
 80074ae:	f7f8 ffa9 	bl	8000404 <__aeabi_i2d>
 80074b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074b6:	f7f9 f80f 	bl	80004d8 <__aeabi_dmul>
 80074ba:	2200      	movs	r2, #0
 80074bc:	4b61      	ldr	r3, [pc, #388]	; (8007644 <_dtoa_r+0x5a4>)
 80074be:	f7f8 fe55 	bl	800016c <__adddf3>
 80074c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80074c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074ca:	9611      	str	r6, [sp, #68]	; 0x44
 80074cc:	2c00      	cmp	r4, #0
 80074ce:	d15d      	bne.n	800758c <_dtoa_r+0x4ec>
 80074d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074d4:	2200      	movs	r2, #0
 80074d6:	4b5c      	ldr	r3, [pc, #368]	; (8007648 <_dtoa_r+0x5a8>)
 80074d8:	f7f8 fe46 	bl	8000168 <__aeabi_dsub>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074e4:	4633      	mov	r3, r6
 80074e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074e8:	f7f9 fa86 	bl	80009f8 <__aeabi_dcmpgt>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f040 8295 	bne.w	8007a1c <_dtoa_r+0x97c>
 80074f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80074fc:	f7f9 fa5e 	bl	80009bc <__aeabi_dcmplt>
 8007500:	2800      	cmp	r0, #0
 8007502:	f040 8289 	bne.w	8007a18 <_dtoa_r+0x978>
 8007506:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800750a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800750e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007510:	2b00      	cmp	r3, #0
 8007512:	f2c0 8151 	blt.w	80077b8 <_dtoa_r+0x718>
 8007516:	f1bb 0f0e 	cmp.w	fp, #14
 800751a:	f300 814d 	bgt.w	80077b8 <_dtoa_r+0x718>
 800751e:	4b45      	ldr	r3, [pc, #276]	; (8007634 <_dtoa_r+0x594>)
 8007520:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007524:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007528:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800752c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800752e:	2b00      	cmp	r3, #0
 8007530:	f280 80da 	bge.w	80076e8 <_dtoa_r+0x648>
 8007534:	9b08      	ldr	r3, [sp, #32]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f300 80d6 	bgt.w	80076e8 <_dtoa_r+0x648>
 800753c:	f040 826b 	bne.w	8007a16 <_dtoa_r+0x976>
 8007540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007544:	2200      	movs	r2, #0
 8007546:	4b40      	ldr	r3, [pc, #256]	; (8007648 <_dtoa_r+0x5a8>)
 8007548:	f7f8 ffc6 	bl	80004d8 <__aeabi_dmul>
 800754c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007550:	f7f9 fa48 	bl	80009e4 <__aeabi_dcmpge>
 8007554:	9c08      	ldr	r4, [sp, #32]
 8007556:	4626      	mov	r6, r4
 8007558:	2800      	cmp	r0, #0
 800755a:	f040 8241 	bne.w	80079e0 <_dtoa_r+0x940>
 800755e:	2331      	movs	r3, #49	; 0x31
 8007560:	9f03      	ldr	r7, [sp, #12]
 8007562:	f10b 0b01 	add.w	fp, fp, #1
 8007566:	f807 3b01 	strb.w	r3, [r7], #1
 800756a:	e23d      	b.n	80079e8 <_dtoa_r+0x948>
 800756c:	07e2      	lsls	r2, r4, #31
 800756e:	d505      	bpl.n	800757c <_dtoa_r+0x4dc>
 8007570:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007574:	f7f8 ffb0 	bl	80004d8 <__aeabi_dmul>
 8007578:	2301      	movs	r3, #1
 800757a:	3701      	adds	r7, #1
 800757c:	1064      	asrs	r4, r4, #1
 800757e:	3608      	adds	r6, #8
 8007580:	e76d      	b.n	800745e <_dtoa_r+0x3be>
 8007582:	2702      	movs	r7, #2
 8007584:	e770      	b.n	8007468 <_dtoa_r+0x3c8>
 8007586:	46d8      	mov	r8, fp
 8007588:	9c08      	ldr	r4, [sp, #32]
 800758a:	e78f      	b.n	80074ac <_dtoa_r+0x40c>
 800758c:	9903      	ldr	r1, [sp, #12]
 800758e:	4b29      	ldr	r3, [pc, #164]	; (8007634 <_dtoa_r+0x594>)
 8007590:	4421      	add	r1, r4
 8007592:	9112      	str	r1, [sp, #72]	; 0x48
 8007594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007596:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800759a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800759e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075a2:	2900      	cmp	r1, #0
 80075a4:	d054      	beq.n	8007650 <_dtoa_r+0x5b0>
 80075a6:	2000      	movs	r0, #0
 80075a8:	4928      	ldr	r1, [pc, #160]	; (800764c <_dtoa_r+0x5ac>)
 80075aa:	f7f9 f8bf 	bl	800072c <__aeabi_ddiv>
 80075ae:	463b      	mov	r3, r7
 80075b0:	4632      	mov	r2, r6
 80075b2:	f7f8 fdd9 	bl	8000168 <__aeabi_dsub>
 80075b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075ba:	9f03      	ldr	r7, [sp, #12]
 80075bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075c0:	f7f9 fa3a 	bl	8000a38 <__aeabi_d2iz>
 80075c4:	4604      	mov	r4, r0
 80075c6:	f7f8 ff1d 	bl	8000404 <__aeabi_i2d>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075d2:	f7f8 fdc9 	bl	8000168 <__aeabi_dsub>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	3430      	adds	r4, #48	; 0x30
 80075dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075e4:	f807 4b01 	strb.w	r4, [r7], #1
 80075e8:	f7f9 f9e8 	bl	80009bc <__aeabi_dcmplt>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d173      	bne.n	80076d8 <_dtoa_r+0x638>
 80075f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075f4:	2000      	movs	r0, #0
 80075f6:	4911      	ldr	r1, [pc, #68]	; (800763c <_dtoa_r+0x59c>)
 80075f8:	f7f8 fdb6 	bl	8000168 <__aeabi_dsub>
 80075fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007600:	f7f9 f9dc 	bl	80009bc <__aeabi_dcmplt>
 8007604:	2800      	cmp	r0, #0
 8007606:	f040 80b6 	bne.w	8007776 <_dtoa_r+0x6d6>
 800760a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800760c:	429f      	cmp	r7, r3
 800760e:	f43f af7a 	beq.w	8007506 <_dtoa_r+0x466>
 8007612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007616:	2200      	movs	r2, #0
 8007618:	4b09      	ldr	r3, [pc, #36]	; (8007640 <_dtoa_r+0x5a0>)
 800761a:	f7f8 ff5d 	bl	80004d8 <__aeabi_dmul>
 800761e:	2200      	movs	r2, #0
 8007620:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <_dtoa_r+0x5a0>)
 800762a:	f7f8 ff55 	bl	80004d8 <__aeabi_dmul>
 800762e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007632:	e7c3      	b.n	80075bc <_dtoa_r+0x51c>
 8007634:	08009a38 	.word	0x08009a38
 8007638:	08009a10 	.word	0x08009a10
 800763c:	3ff00000 	.word	0x3ff00000
 8007640:	40240000 	.word	0x40240000
 8007644:	401c0000 	.word	0x401c0000
 8007648:	40140000 	.word	0x40140000
 800764c:	3fe00000 	.word	0x3fe00000
 8007650:	4630      	mov	r0, r6
 8007652:	4639      	mov	r1, r7
 8007654:	f7f8 ff40 	bl	80004d8 <__aeabi_dmul>
 8007658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800765a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800765e:	9c03      	ldr	r4, [sp, #12]
 8007660:	9314      	str	r3, [sp, #80]	; 0x50
 8007662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007666:	f7f9 f9e7 	bl	8000a38 <__aeabi_d2iz>
 800766a:	9015      	str	r0, [sp, #84]	; 0x54
 800766c:	f7f8 feca 	bl	8000404 <__aeabi_i2d>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007678:	f7f8 fd76 	bl	8000168 <__aeabi_dsub>
 800767c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800767e:	4606      	mov	r6, r0
 8007680:	3330      	adds	r3, #48	; 0x30
 8007682:	f804 3b01 	strb.w	r3, [r4], #1
 8007686:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007688:	460f      	mov	r7, r1
 800768a:	429c      	cmp	r4, r3
 800768c:	f04f 0200 	mov.w	r2, #0
 8007690:	d124      	bne.n	80076dc <_dtoa_r+0x63c>
 8007692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007696:	4baf      	ldr	r3, [pc, #700]	; (8007954 <_dtoa_r+0x8b4>)
 8007698:	f7f8 fd68 	bl	800016c <__adddf3>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4630      	mov	r0, r6
 80076a2:	4639      	mov	r1, r7
 80076a4:	f7f9 f9a8 	bl	80009f8 <__aeabi_dcmpgt>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d163      	bne.n	8007774 <_dtoa_r+0x6d4>
 80076ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076b0:	2000      	movs	r0, #0
 80076b2:	49a8      	ldr	r1, [pc, #672]	; (8007954 <_dtoa_r+0x8b4>)
 80076b4:	f7f8 fd58 	bl	8000168 <__aeabi_dsub>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	4630      	mov	r0, r6
 80076be:	4639      	mov	r1, r7
 80076c0:	f7f9 f97c 	bl	80009bc <__aeabi_dcmplt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	f43f af1e 	beq.w	8007506 <_dtoa_r+0x466>
 80076ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80076cc:	1e7b      	subs	r3, r7, #1
 80076ce:	9314      	str	r3, [sp, #80]	; 0x50
 80076d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80076d4:	2b30      	cmp	r3, #48	; 0x30
 80076d6:	d0f8      	beq.n	80076ca <_dtoa_r+0x62a>
 80076d8:	46c3      	mov	fp, r8
 80076da:	e03b      	b.n	8007754 <_dtoa_r+0x6b4>
 80076dc:	4b9e      	ldr	r3, [pc, #632]	; (8007958 <_dtoa_r+0x8b8>)
 80076de:	f7f8 fefb 	bl	80004d8 <__aeabi_dmul>
 80076e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076e6:	e7bc      	b.n	8007662 <_dtoa_r+0x5c2>
 80076e8:	9f03      	ldr	r7, [sp, #12]
 80076ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80076ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076f2:	4640      	mov	r0, r8
 80076f4:	4649      	mov	r1, r9
 80076f6:	f7f9 f819 	bl	800072c <__aeabi_ddiv>
 80076fa:	f7f9 f99d 	bl	8000a38 <__aeabi_d2iz>
 80076fe:	4604      	mov	r4, r0
 8007700:	f7f8 fe80 	bl	8000404 <__aeabi_i2d>
 8007704:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007708:	f7f8 fee6 	bl	80004d8 <__aeabi_dmul>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4640      	mov	r0, r8
 8007712:	4649      	mov	r1, r9
 8007714:	f7f8 fd28 	bl	8000168 <__aeabi_dsub>
 8007718:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800771c:	f807 6b01 	strb.w	r6, [r7], #1
 8007720:	9e03      	ldr	r6, [sp, #12]
 8007722:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007726:	1bbe      	subs	r6, r7, r6
 8007728:	45b4      	cmp	ip, r6
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	d136      	bne.n	800779e <_dtoa_r+0x6fe>
 8007730:	f7f8 fd1c 	bl	800016c <__adddf3>
 8007734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007738:	4680      	mov	r8, r0
 800773a:	4689      	mov	r9, r1
 800773c:	f7f9 f95c 	bl	80009f8 <__aeabi_dcmpgt>
 8007740:	bb58      	cbnz	r0, 800779a <_dtoa_r+0x6fa>
 8007742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007746:	4640      	mov	r0, r8
 8007748:	4649      	mov	r1, r9
 800774a:	f7f9 f92d 	bl	80009a8 <__aeabi_dcmpeq>
 800774e:	b108      	cbz	r0, 8007754 <_dtoa_r+0x6b4>
 8007750:	07e3      	lsls	r3, r4, #31
 8007752:	d422      	bmi.n	800779a <_dtoa_r+0x6fa>
 8007754:	4651      	mov	r1, sl
 8007756:	4628      	mov	r0, r5
 8007758:	f000 fb0e 	bl	8007d78 <_Bfree>
 800775c:	2300      	movs	r3, #0
 800775e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007760:	703b      	strb	r3, [r7, #0]
 8007762:	f10b 0301 	add.w	r3, fp, #1
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800776a:	2b00      	cmp	r3, #0
 800776c:	f43f ace6 	beq.w	800713c <_dtoa_r+0x9c>
 8007770:	601f      	str	r7, [r3, #0]
 8007772:	e4e3      	b.n	800713c <_dtoa_r+0x9c>
 8007774:	4627      	mov	r7, r4
 8007776:	463b      	mov	r3, r7
 8007778:	461f      	mov	r7, r3
 800777a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800777e:	2a39      	cmp	r2, #57	; 0x39
 8007780:	d107      	bne.n	8007792 <_dtoa_r+0x6f2>
 8007782:	9a03      	ldr	r2, [sp, #12]
 8007784:	429a      	cmp	r2, r3
 8007786:	d1f7      	bne.n	8007778 <_dtoa_r+0x6d8>
 8007788:	2230      	movs	r2, #48	; 0x30
 800778a:	9903      	ldr	r1, [sp, #12]
 800778c:	f108 0801 	add.w	r8, r8, #1
 8007790:	700a      	strb	r2, [r1, #0]
 8007792:	781a      	ldrb	r2, [r3, #0]
 8007794:	3201      	adds	r2, #1
 8007796:	701a      	strb	r2, [r3, #0]
 8007798:	e79e      	b.n	80076d8 <_dtoa_r+0x638>
 800779a:	46d8      	mov	r8, fp
 800779c:	e7eb      	b.n	8007776 <_dtoa_r+0x6d6>
 800779e:	2200      	movs	r2, #0
 80077a0:	4b6d      	ldr	r3, [pc, #436]	; (8007958 <_dtoa_r+0x8b8>)
 80077a2:	f7f8 fe99 	bl	80004d8 <__aeabi_dmul>
 80077a6:	2200      	movs	r2, #0
 80077a8:	2300      	movs	r3, #0
 80077aa:	4680      	mov	r8, r0
 80077ac:	4689      	mov	r9, r1
 80077ae:	f7f9 f8fb 	bl	80009a8 <__aeabi_dcmpeq>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d09b      	beq.n	80076ee <_dtoa_r+0x64e>
 80077b6:	e7cd      	b.n	8007754 <_dtoa_r+0x6b4>
 80077b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077ba:	2a00      	cmp	r2, #0
 80077bc:	f000 80c4 	beq.w	8007948 <_dtoa_r+0x8a8>
 80077c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80077c2:	2a01      	cmp	r2, #1
 80077c4:	f300 80a8 	bgt.w	8007918 <_dtoa_r+0x878>
 80077c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077ca:	2a00      	cmp	r2, #0
 80077cc:	f000 80a0 	beq.w	8007910 <_dtoa_r+0x870>
 80077d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077d4:	464f      	mov	r7, r9
 80077d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077da:	2101      	movs	r1, #1
 80077dc:	441a      	add	r2, r3
 80077de:	4628      	mov	r0, r5
 80077e0:	4499      	add	r9, r3
 80077e2:	9209      	str	r2, [sp, #36]	; 0x24
 80077e4:	f000 fb7e 	bl	8007ee4 <__i2b>
 80077e8:	4606      	mov	r6, r0
 80077ea:	b15f      	cbz	r7, 8007804 <_dtoa_r+0x764>
 80077ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	dd08      	ble.n	8007804 <_dtoa_r+0x764>
 80077f2:	42bb      	cmp	r3, r7
 80077f4:	bfa8      	it	ge
 80077f6:	463b      	movge	r3, r7
 80077f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077fa:	eba9 0903 	sub.w	r9, r9, r3
 80077fe:	1aff      	subs	r7, r7, r3
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	9309      	str	r3, [sp, #36]	; 0x24
 8007804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007806:	b1f3      	cbz	r3, 8007846 <_dtoa_r+0x7a6>
 8007808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 80a0 	beq.w	8007950 <_dtoa_r+0x8b0>
 8007810:	2c00      	cmp	r4, #0
 8007812:	dd10      	ble.n	8007836 <_dtoa_r+0x796>
 8007814:	4631      	mov	r1, r6
 8007816:	4622      	mov	r2, r4
 8007818:	4628      	mov	r0, r5
 800781a:	f000 fc21 	bl	8008060 <__pow5mult>
 800781e:	4652      	mov	r2, sl
 8007820:	4601      	mov	r1, r0
 8007822:	4606      	mov	r6, r0
 8007824:	4628      	mov	r0, r5
 8007826:	f000 fb73 	bl	8007f10 <__multiply>
 800782a:	4680      	mov	r8, r0
 800782c:	4651      	mov	r1, sl
 800782e:	4628      	mov	r0, r5
 8007830:	f000 faa2 	bl	8007d78 <_Bfree>
 8007834:	46c2      	mov	sl, r8
 8007836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007838:	1b1a      	subs	r2, r3, r4
 800783a:	d004      	beq.n	8007846 <_dtoa_r+0x7a6>
 800783c:	4651      	mov	r1, sl
 800783e:	4628      	mov	r0, r5
 8007840:	f000 fc0e 	bl	8008060 <__pow5mult>
 8007844:	4682      	mov	sl, r0
 8007846:	2101      	movs	r1, #1
 8007848:	4628      	mov	r0, r5
 800784a:	f000 fb4b 	bl	8007ee4 <__i2b>
 800784e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007850:	4604      	mov	r4, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	f340 8082 	ble.w	800795c <_dtoa_r+0x8bc>
 8007858:	461a      	mov	r2, r3
 800785a:	4601      	mov	r1, r0
 800785c:	4628      	mov	r0, r5
 800785e:	f000 fbff 	bl	8008060 <__pow5mult>
 8007862:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007864:	4604      	mov	r4, r0
 8007866:	2b01      	cmp	r3, #1
 8007868:	dd7b      	ble.n	8007962 <_dtoa_r+0x8c2>
 800786a:	f04f 0800 	mov.w	r8, #0
 800786e:	6923      	ldr	r3, [r4, #16]
 8007870:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007874:	6918      	ldr	r0, [r3, #16]
 8007876:	f000 fae7 	bl	8007e48 <__hi0bits>
 800787a:	f1c0 0020 	rsb	r0, r0, #32
 800787e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007880:	4418      	add	r0, r3
 8007882:	f010 001f 	ands.w	r0, r0, #31
 8007886:	f000 8092 	beq.w	80079ae <_dtoa_r+0x90e>
 800788a:	f1c0 0320 	rsb	r3, r0, #32
 800788e:	2b04      	cmp	r3, #4
 8007890:	f340 8085 	ble.w	800799e <_dtoa_r+0x8fe>
 8007894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007896:	f1c0 001c 	rsb	r0, r0, #28
 800789a:	4403      	add	r3, r0
 800789c:	4481      	add	r9, r0
 800789e:	4407      	add	r7, r0
 80078a0:	9309      	str	r3, [sp, #36]	; 0x24
 80078a2:	f1b9 0f00 	cmp.w	r9, #0
 80078a6:	dd05      	ble.n	80078b4 <_dtoa_r+0x814>
 80078a8:	4651      	mov	r1, sl
 80078aa:	464a      	mov	r2, r9
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 fc31 	bl	8008114 <__lshift>
 80078b2:	4682      	mov	sl, r0
 80078b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	dd05      	ble.n	80078c6 <_dtoa_r+0x826>
 80078ba:	4621      	mov	r1, r4
 80078bc:	461a      	mov	r2, r3
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 fc28 	bl	8008114 <__lshift>
 80078c4:	4604      	mov	r4, r0
 80078c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d072      	beq.n	80079b2 <_dtoa_r+0x912>
 80078cc:	4621      	mov	r1, r4
 80078ce:	4650      	mov	r0, sl
 80078d0:	f000 fc8c 	bl	80081ec <__mcmp>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	da6c      	bge.n	80079b2 <_dtoa_r+0x912>
 80078d8:	2300      	movs	r3, #0
 80078da:	4651      	mov	r1, sl
 80078dc:	220a      	movs	r2, #10
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 fa6c 	bl	8007dbc <__multadd>
 80078e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078e6:	4682      	mov	sl, r0
 80078e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 81ac 	beq.w	8007c4a <_dtoa_r+0xbaa>
 80078f2:	2300      	movs	r3, #0
 80078f4:	4631      	mov	r1, r6
 80078f6:	220a      	movs	r2, #10
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 fa5f 	bl	8007dbc <__multadd>
 80078fe:	9b06      	ldr	r3, [sp, #24]
 8007900:	4606      	mov	r6, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	f300 8093 	bgt.w	8007a2e <_dtoa_r+0x98e>
 8007908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800790a:	2b02      	cmp	r3, #2
 800790c:	dc59      	bgt.n	80079c2 <_dtoa_r+0x922>
 800790e:	e08e      	b.n	8007a2e <_dtoa_r+0x98e>
 8007910:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007912:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007916:	e75d      	b.n	80077d4 <_dtoa_r+0x734>
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	1e5c      	subs	r4, r3, #1
 800791c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800791e:	42a3      	cmp	r3, r4
 8007920:	bfbf      	itttt	lt
 8007922:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007924:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007926:	1ae3      	sublt	r3, r4, r3
 8007928:	18d2      	addlt	r2, r2, r3
 800792a:	bfa8      	it	ge
 800792c:	1b1c      	subge	r4, r3, r4
 800792e:	9b08      	ldr	r3, [sp, #32]
 8007930:	bfbe      	ittt	lt
 8007932:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007934:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007936:	2400      	movlt	r4, #0
 8007938:	2b00      	cmp	r3, #0
 800793a:	bfb5      	itete	lt
 800793c:	eba9 0703 	sublt.w	r7, r9, r3
 8007940:	464f      	movge	r7, r9
 8007942:	2300      	movlt	r3, #0
 8007944:	9b08      	ldrge	r3, [sp, #32]
 8007946:	e747      	b.n	80077d8 <_dtoa_r+0x738>
 8007948:	464f      	mov	r7, r9
 800794a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800794c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800794e:	e74c      	b.n	80077ea <_dtoa_r+0x74a>
 8007950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007952:	e773      	b.n	800783c <_dtoa_r+0x79c>
 8007954:	3fe00000 	.word	0x3fe00000
 8007958:	40240000 	.word	0x40240000
 800795c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800795e:	2b01      	cmp	r3, #1
 8007960:	dc18      	bgt.n	8007994 <_dtoa_r+0x8f4>
 8007962:	9b04      	ldr	r3, [sp, #16]
 8007964:	b9b3      	cbnz	r3, 8007994 <_dtoa_r+0x8f4>
 8007966:	9b05      	ldr	r3, [sp, #20]
 8007968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800796c:	b993      	cbnz	r3, 8007994 <_dtoa_r+0x8f4>
 800796e:	9b05      	ldr	r3, [sp, #20]
 8007970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007974:	0d1b      	lsrs	r3, r3, #20
 8007976:	051b      	lsls	r3, r3, #20
 8007978:	b17b      	cbz	r3, 800799a <_dtoa_r+0x8fa>
 800797a:	f04f 0801 	mov.w	r8, #1
 800797e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007980:	f109 0901 	add.w	r9, r9, #1
 8007984:	3301      	adds	r3, #1
 8007986:	9309      	str	r3, [sp, #36]	; 0x24
 8007988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800798a:	2b00      	cmp	r3, #0
 800798c:	f47f af6f 	bne.w	800786e <_dtoa_r+0x7ce>
 8007990:	2001      	movs	r0, #1
 8007992:	e774      	b.n	800787e <_dtoa_r+0x7de>
 8007994:	f04f 0800 	mov.w	r8, #0
 8007998:	e7f6      	b.n	8007988 <_dtoa_r+0x8e8>
 800799a:	4698      	mov	r8, r3
 800799c:	e7f4      	b.n	8007988 <_dtoa_r+0x8e8>
 800799e:	d080      	beq.n	80078a2 <_dtoa_r+0x802>
 80079a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079a2:	331c      	adds	r3, #28
 80079a4:	441a      	add	r2, r3
 80079a6:	4499      	add	r9, r3
 80079a8:	441f      	add	r7, r3
 80079aa:	9209      	str	r2, [sp, #36]	; 0x24
 80079ac:	e779      	b.n	80078a2 <_dtoa_r+0x802>
 80079ae:	4603      	mov	r3, r0
 80079b0:	e7f6      	b.n	80079a0 <_dtoa_r+0x900>
 80079b2:	9b08      	ldr	r3, [sp, #32]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	dc34      	bgt.n	8007a22 <_dtoa_r+0x982>
 80079b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	dd31      	ble.n	8007a22 <_dtoa_r+0x982>
 80079be:	9b08      	ldr	r3, [sp, #32]
 80079c0:	9306      	str	r3, [sp, #24]
 80079c2:	9b06      	ldr	r3, [sp, #24]
 80079c4:	b963      	cbnz	r3, 80079e0 <_dtoa_r+0x940>
 80079c6:	4621      	mov	r1, r4
 80079c8:	2205      	movs	r2, #5
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 f9f6 	bl	8007dbc <__multadd>
 80079d0:	4601      	mov	r1, r0
 80079d2:	4604      	mov	r4, r0
 80079d4:	4650      	mov	r0, sl
 80079d6:	f000 fc09 	bl	80081ec <__mcmp>
 80079da:	2800      	cmp	r0, #0
 80079dc:	f73f adbf 	bgt.w	800755e <_dtoa_r+0x4be>
 80079e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079e2:	9f03      	ldr	r7, [sp, #12]
 80079e4:	ea6f 0b03 	mvn.w	fp, r3
 80079e8:	f04f 0800 	mov.w	r8, #0
 80079ec:	4621      	mov	r1, r4
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 f9c2 	bl	8007d78 <_Bfree>
 80079f4:	2e00      	cmp	r6, #0
 80079f6:	f43f aead 	beq.w	8007754 <_dtoa_r+0x6b4>
 80079fa:	f1b8 0f00 	cmp.w	r8, #0
 80079fe:	d005      	beq.n	8007a0c <_dtoa_r+0x96c>
 8007a00:	45b0      	cmp	r8, r6
 8007a02:	d003      	beq.n	8007a0c <_dtoa_r+0x96c>
 8007a04:	4641      	mov	r1, r8
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 f9b6 	bl	8007d78 <_Bfree>
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f000 f9b2 	bl	8007d78 <_Bfree>
 8007a14:	e69e      	b.n	8007754 <_dtoa_r+0x6b4>
 8007a16:	2400      	movs	r4, #0
 8007a18:	4626      	mov	r6, r4
 8007a1a:	e7e1      	b.n	80079e0 <_dtoa_r+0x940>
 8007a1c:	46c3      	mov	fp, r8
 8007a1e:	4626      	mov	r6, r4
 8007a20:	e59d      	b.n	800755e <_dtoa_r+0x4be>
 8007a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 80c8 	beq.w	8007bba <_dtoa_r+0xb1a>
 8007a2a:	9b08      	ldr	r3, [sp, #32]
 8007a2c:	9306      	str	r3, [sp, #24]
 8007a2e:	2f00      	cmp	r7, #0
 8007a30:	dd05      	ble.n	8007a3e <_dtoa_r+0x99e>
 8007a32:	4631      	mov	r1, r6
 8007a34:	463a      	mov	r2, r7
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 fb6c 	bl	8008114 <__lshift>
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	f1b8 0f00 	cmp.w	r8, #0
 8007a42:	d05b      	beq.n	8007afc <_dtoa_r+0xa5c>
 8007a44:	4628      	mov	r0, r5
 8007a46:	6871      	ldr	r1, [r6, #4]
 8007a48:	f000 f956 	bl	8007cf8 <_Balloc>
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	b928      	cbnz	r0, 8007a5c <_dtoa_r+0x9bc>
 8007a50:	4602      	mov	r2, r0
 8007a52:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007a56:	4b81      	ldr	r3, [pc, #516]	; (8007c5c <_dtoa_r+0xbbc>)
 8007a58:	f7ff bb36 	b.w	80070c8 <_dtoa_r+0x28>
 8007a5c:	6932      	ldr	r2, [r6, #16]
 8007a5e:	f106 010c 	add.w	r1, r6, #12
 8007a62:	3202      	adds	r2, #2
 8007a64:	0092      	lsls	r2, r2, #2
 8007a66:	300c      	adds	r0, #12
 8007a68:	f7ff fa81 	bl	8006f6e <memcpy>
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	4639      	mov	r1, r7
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 fb4f 	bl	8008114 <__lshift>
 8007a76:	46b0      	mov	r8, r6
 8007a78:	4606      	mov	r6, r0
 8007a7a:	9b03      	ldr	r3, [sp, #12]
 8007a7c:	9a03      	ldr	r2, [sp, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	9308      	str	r3, [sp, #32]
 8007a82:	9b06      	ldr	r3, [sp, #24]
 8007a84:	4413      	add	r3, r2
 8007a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a88:	9b04      	ldr	r3, [sp, #16]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a90:	9b08      	ldr	r3, [sp, #32]
 8007a92:	4621      	mov	r1, r4
 8007a94:	3b01      	subs	r3, #1
 8007a96:	4650      	mov	r0, sl
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	f7ff fa76 	bl	8006f8a <quorem>
 8007a9e:	4641      	mov	r1, r8
 8007aa0:	9006      	str	r0, [sp, #24]
 8007aa2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007aa6:	4650      	mov	r0, sl
 8007aa8:	f000 fba0 	bl	80081ec <__mcmp>
 8007aac:	4632      	mov	r2, r6
 8007aae:	9009      	str	r0, [sp, #36]	; 0x24
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 fbb6 	bl	8008224 <__mdiff>
 8007ab8:	68c2      	ldr	r2, [r0, #12]
 8007aba:	4607      	mov	r7, r0
 8007abc:	bb02      	cbnz	r2, 8007b00 <_dtoa_r+0xa60>
 8007abe:	4601      	mov	r1, r0
 8007ac0:	4650      	mov	r0, sl
 8007ac2:	f000 fb93 	bl	80081ec <__mcmp>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	4639      	mov	r1, r7
 8007aca:	4628      	mov	r0, r5
 8007acc:	920c      	str	r2, [sp, #48]	; 0x30
 8007ace:	f000 f953 	bl	8007d78 <_Bfree>
 8007ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad6:	9f08      	ldr	r7, [sp, #32]
 8007ad8:	ea43 0102 	orr.w	r1, r3, r2
 8007adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ade:	4319      	orrs	r1, r3
 8007ae0:	d110      	bne.n	8007b04 <_dtoa_r+0xa64>
 8007ae2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ae6:	d029      	beq.n	8007b3c <_dtoa_r+0xa9c>
 8007ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	dd02      	ble.n	8007af4 <_dtoa_r+0xa54>
 8007aee:	9b06      	ldr	r3, [sp, #24]
 8007af0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	f883 9000 	strb.w	r9, [r3]
 8007afa:	e777      	b.n	80079ec <_dtoa_r+0x94c>
 8007afc:	4630      	mov	r0, r6
 8007afe:	e7ba      	b.n	8007a76 <_dtoa_r+0x9d6>
 8007b00:	2201      	movs	r2, #1
 8007b02:	e7e1      	b.n	8007ac8 <_dtoa_r+0xa28>
 8007b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	db04      	blt.n	8007b14 <_dtoa_r+0xa74>
 8007b0a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b10:	430b      	orrs	r3, r1
 8007b12:	d120      	bne.n	8007b56 <_dtoa_r+0xab6>
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	dded      	ble.n	8007af4 <_dtoa_r+0xa54>
 8007b18:	4651      	mov	r1, sl
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f000 faf9 	bl	8008114 <__lshift>
 8007b22:	4621      	mov	r1, r4
 8007b24:	4682      	mov	sl, r0
 8007b26:	f000 fb61 	bl	80081ec <__mcmp>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	dc03      	bgt.n	8007b36 <_dtoa_r+0xa96>
 8007b2e:	d1e1      	bne.n	8007af4 <_dtoa_r+0xa54>
 8007b30:	f019 0f01 	tst.w	r9, #1
 8007b34:	d0de      	beq.n	8007af4 <_dtoa_r+0xa54>
 8007b36:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b3a:	d1d8      	bne.n	8007aee <_dtoa_r+0xa4e>
 8007b3c:	2339      	movs	r3, #57	; 0x39
 8007b3e:	9a04      	ldr	r2, [sp, #16]
 8007b40:	7013      	strb	r3, [r2, #0]
 8007b42:	463b      	mov	r3, r7
 8007b44:	461f      	mov	r7, r3
 8007b46:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	2a39      	cmp	r2, #57	; 0x39
 8007b4e:	d06b      	beq.n	8007c28 <_dtoa_r+0xb88>
 8007b50:	3201      	adds	r2, #1
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	e74a      	b.n	80079ec <_dtoa_r+0x94c>
 8007b56:	2a00      	cmp	r2, #0
 8007b58:	dd07      	ble.n	8007b6a <_dtoa_r+0xaca>
 8007b5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b5e:	d0ed      	beq.n	8007b3c <_dtoa_r+0xa9c>
 8007b60:	9a04      	ldr	r2, [sp, #16]
 8007b62:	f109 0301 	add.w	r3, r9, #1
 8007b66:	7013      	strb	r3, [r2, #0]
 8007b68:	e740      	b.n	80079ec <_dtoa_r+0x94c>
 8007b6a:	9b08      	ldr	r3, [sp, #32]
 8007b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b6e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d042      	beq.n	8007bfc <_dtoa_r+0xb5c>
 8007b76:	4651      	mov	r1, sl
 8007b78:	2300      	movs	r3, #0
 8007b7a:	220a      	movs	r2, #10
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f000 f91d 	bl	8007dbc <__multadd>
 8007b82:	45b0      	cmp	r8, r6
 8007b84:	4682      	mov	sl, r0
 8007b86:	f04f 0300 	mov.w	r3, #0
 8007b8a:	f04f 020a 	mov.w	r2, #10
 8007b8e:	4641      	mov	r1, r8
 8007b90:	4628      	mov	r0, r5
 8007b92:	d107      	bne.n	8007ba4 <_dtoa_r+0xb04>
 8007b94:	f000 f912 	bl	8007dbc <__multadd>
 8007b98:	4680      	mov	r8, r0
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	9b08      	ldr	r3, [sp, #32]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	9308      	str	r3, [sp, #32]
 8007ba2:	e775      	b.n	8007a90 <_dtoa_r+0x9f0>
 8007ba4:	f000 f90a 	bl	8007dbc <__multadd>
 8007ba8:	4631      	mov	r1, r6
 8007baa:	4680      	mov	r8, r0
 8007bac:	2300      	movs	r3, #0
 8007bae:	220a      	movs	r2, #10
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 f903 	bl	8007dbc <__multadd>
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	e7f0      	b.n	8007b9c <_dtoa_r+0xafc>
 8007bba:	9b08      	ldr	r3, [sp, #32]
 8007bbc:	9306      	str	r3, [sp, #24]
 8007bbe:	9f03      	ldr	r7, [sp, #12]
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4650      	mov	r0, sl
 8007bc4:	f7ff f9e1 	bl	8006f8a <quorem>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007bce:	f807 9b01 	strb.w	r9, [r7], #1
 8007bd2:	1afa      	subs	r2, r7, r3
 8007bd4:	9b06      	ldr	r3, [sp, #24]
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	dd07      	ble.n	8007bea <_dtoa_r+0xb4a>
 8007bda:	4651      	mov	r1, sl
 8007bdc:	2300      	movs	r3, #0
 8007bde:	220a      	movs	r2, #10
 8007be0:	4628      	mov	r0, r5
 8007be2:	f000 f8eb 	bl	8007dbc <__multadd>
 8007be6:	4682      	mov	sl, r0
 8007be8:	e7ea      	b.n	8007bc0 <_dtoa_r+0xb20>
 8007bea:	9b06      	ldr	r3, [sp, #24]
 8007bec:	f04f 0800 	mov.w	r8, #0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bfcc      	ite	gt
 8007bf4:	461f      	movgt	r7, r3
 8007bf6:	2701      	movle	r7, #1
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	441f      	add	r7, r3
 8007bfc:	4651      	mov	r1, sl
 8007bfe:	2201      	movs	r2, #1
 8007c00:	4628      	mov	r0, r5
 8007c02:	f000 fa87 	bl	8008114 <__lshift>
 8007c06:	4621      	mov	r1, r4
 8007c08:	4682      	mov	sl, r0
 8007c0a:	f000 faef 	bl	80081ec <__mcmp>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	dc97      	bgt.n	8007b42 <_dtoa_r+0xaa2>
 8007c12:	d102      	bne.n	8007c1a <_dtoa_r+0xb7a>
 8007c14:	f019 0f01 	tst.w	r9, #1
 8007c18:	d193      	bne.n	8007b42 <_dtoa_r+0xaa2>
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	461f      	mov	r7, r3
 8007c1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c22:	2a30      	cmp	r2, #48	; 0x30
 8007c24:	d0fa      	beq.n	8007c1c <_dtoa_r+0xb7c>
 8007c26:	e6e1      	b.n	80079ec <_dtoa_r+0x94c>
 8007c28:	9a03      	ldr	r2, [sp, #12]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d18a      	bne.n	8007b44 <_dtoa_r+0xaa4>
 8007c2e:	2331      	movs	r3, #49	; 0x31
 8007c30:	f10b 0b01 	add.w	fp, fp, #1
 8007c34:	e797      	b.n	8007b66 <_dtoa_r+0xac6>
 8007c36:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <_dtoa_r+0xbc0>)
 8007c38:	f7ff ba9f 	b.w	800717a <_dtoa_r+0xda>
 8007c3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f47f aa77 	bne.w	8007132 <_dtoa_r+0x92>
 8007c44:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <_dtoa_r+0xbc4>)
 8007c46:	f7ff ba98 	b.w	800717a <_dtoa_r+0xda>
 8007c4a:	9b06      	ldr	r3, [sp, #24]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dcb6      	bgt.n	8007bbe <_dtoa_r+0xb1e>
 8007c50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	f73f aeb5 	bgt.w	80079c2 <_dtoa_r+0x922>
 8007c58:	e7b1      	b.n	8007bbe <_dtoa_r+0xb1e>
 8007c5a:	bf00      	nop
 8007c5c:	0800999f 	.word	0x0800999f
 8007c60:	080098ff 	.word	0x080098ff
 8007c64:	08009923 	.word	0x08009923

08007c68 <_free_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	d040      	beq.n	8007cf2 <_free_r+0x8a>
 8007c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c74:	1f0c      	subs	r4, r1, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfb8      	it	lt
 8007c7a:	18e4      	addlt	r4, r4, r3
 8007c7c:	f7fe fb6a 	bl	8006354 <__malloc_lock>
 8007c80:	4a1c      	ldr	r2, [pc, #112]	; (8007cf4 <_free_r+0x8c>)
 8007c82:	6813      	ldr	r3, [r2, #0]
 8007c84:	b933      	cbnz	r3, 8007c94 <_free_r+0x2c>
 8007c86:	6063      	str	r3, [r4, #4]
 8007c88:	6014      	str	r4, [r2, #0]
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c90:	f7fe bb66 	b.w	8006360 <__malloc_unlock>
 8007c94:	42a3      	cmp	r3, r4
 8007c96:	d908      	bls.n	8007caa <_free_r+0x42>
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	1821      	adds	r1, r4, r0
 8007c9c:	428b      	cmp	r3, r1
 8007c9e:	bf01      	itttt	eq
 8007ca0:	6819      	ldreq	r1, [r3, #0]
 8007ca2:	685b      	ldreq	r3, [r3, #4]
 8007ca4:	1809      	addeq	r1, r1, r0
 8007ca6:	6021      	streq	r1, [r4, #0]
 8007ca8:	e7ed      	b.n	8007c86 <_free_r+0x1e>
 8007caa:	461a      	mov	r2, r3
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	b10b      	cbz	r3, 8007cb4 <_free_r+0x4c>
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	d9fa      	bls.n	8007caa <_free_r+0x42>
 8007cb4:	6811      	ldr	r1, [r2, #0]
 8007cb6:	1850      	adds	r0, r2, r1
 8007cb8:	42a0      	cmp	r0, r4
 8007cba:	d10b      	bne.n	8007cd4 <_free_r+0x6c>
 8007cbc:	6820      	ldr	r0, [r4, #0]
 8007cbe:	4401      	add	r1, r0
 8007cc0:	1850      	adds	r0, r2, r1
 8007cc2:	4283      	cmp	r3, r0
 8007cc4:	6011      	str	r1, [r2, #0]
 8007cc6:	d1e0      	bne.n	8007c8a <_free_r+0x22>
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	4408      	add	r0, r1
 8007cce:	6010      	str	r0, [r2, #0]
 8007cd0:	6053      	str	r3, [r2, #4]
 8007cd2:	e7da      	b.n	8007c8a <_free_r+0x22>
 8007cd4:	d902      	bls.n	8007cdc <_free_r+0x74>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	602b      	str	r3, [r5, #0]
 8007cda:	e7d6      	b.n	8007c8a <_free_r+0x22>
 8007cdc:	6820      	ldr	r0, [r4, #0]
 8007cde:	1821      	adds	r1, r4, r0
 8007ce0:	428b      	cmp	r3, r1
 8007ce2:	bf01      	itttt	eq
 8007ce4:	6819      	ldreq	r1, [r3, #0]
 8007ce6:	685b      	ldreq	r3, [r3, #4]
 8007ce8:	1809      	addeq	r1, r1, r0
 8007cea:	6021      	streq	r1, [r4, #0]
 8007cec:	6063      	str	r3, [r4, #4]
 8007cee:	6054      	str	r4, [r2, #4]
 8007cf0:	e7cb      	b.n	8007c8a <_free_r+0x22>
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	200003dc 	.word	0x200003dc

08007cf8 <_Balloc>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	69c6      	ldr	r6, [r0, #28]
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	460d      	mov	r5, r1
 8007d00:	b976      	cbnz	r6, 8007d20 <_Balloc+0x28>
 8007d02:	2010      	movs	r0, #16
 8007d04:	f7fe fa7e 	bl	8006204 <malloc>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	61e0      	str	r0, [r4, #28]
 8007d0c:	b920      	cbnz	r0, 8007d18 <_Balloc+0x20>
 8007d0e:	216b      	movs	r1, #107	; 0x6b
 8007d10:	4b17      	ldr	r3, [pc, #92]	; (8007d70 <_Balloc+0x78>)
 8007d12:	4818      	ldr	r0, [pc, #96]	; (8007d74 <_Balloc+0x7c>)
 8007d14:	f000 fc12 	bl	800853c <__assert_func>
 8007d18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d1c:	6006      	str	r6, [r0, #0]
 8007d1e:	60c6      	str	r6, [r0, #12]
 8007d20:	69e6      	ldr	r6, [r4, #28]
 8007d22:	68f3      	ldr	r3, [r6, #12]
 8007d24:	b183      	cbz	r3, 8007d48 <_Balloc+0x50>
 8007d26:	69e3      	ldr	r3, [r4, #28]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d2e:	b9b8      	cbnz	r0, 8007d60 <_Balloc+0x68>
 8007d30:	2101      	movs	r1, #1
 8007d32:	fa01 f605 	lsl.w	r6, r1, r5
 8007d36:	1d72      	adds	r2, r6, #5
 8007d38:	4620      	mov	r0, r4
 8007d3a:	0092      	lsls	r2, r2, #2
 8007d3c:	f000 fc1c 	bl	8008578 <_calloc_r>
 8007d40:	b160      	cbz	r0, 8007d5c <_Balloc+0x64>
 8007d42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d46:	e00e      	b.n	8007d66 <_Balloc+0x6e>
 8007d48:	2221      	movs	r2, #33	; 0x21
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f000 fc13 	bl	8008578 <_calloc_r>
 8007d52:	69e3      	ldr	r3, [r4, #28]
 8007d54:	60f0      	str	r0, [r6, #12]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e4      	bne.n	8007d26 <_Balloc+0x2e>
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	6802      	ldr	r2, [r0, #0]
 8007d62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d66:	2300      	movs	r3, #0
 8007d68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d6c:	e7f7      	b.n	8007d5e <_Balloc+0x66>
 8007d6e:	bf00      	nop
 8007d70:	08009930 	.word	0x08009930
 8007d74:	080099b0 	.word	0x080099b0

08007d78 <_Bfree>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	69c6      	ldr	r6, [r0, #28]
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	b976      	cbnz	r6, 8007da0 <_Bfree+0x28>
 8007d82:	2010      	movs	r0, #16
 8007d84:	f7fe fa3e 	bl	8006204 <malloc>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	61e8      	str	r0, [r5, #28]
 8007d8c:	b920      	cbnz	r0, 8007d98 <_Bfree+0x20>
 8007d8e:	218f      	movs	r1, #143	; 0x8f
 8007d90:	4b08      	ldr	r3, [pc, #32]	; (8007db4 <_Bfree+0x3c>)
 8007d92:	4809      	ldr	r0, [pc, #36]	; (8007db8 <_Bfree+0x40>)
 8007d94:	f000 fbd2 	bl	800853c <__assert_func>
 8007d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d9c:	6006      	str	r6, [r0, #0]
 8007d9e:	60c6      	str	r6, [r0, #12]
 8007da0:	b13c      	cbz	r4, 8007db2 <_Bfree+0x3a>
 8007da2:	69eb      	ldr	r3, [r5, #28]
 8007da4:	6862      	ldr	r2, [r4, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007dac:	6021      	str	r1, [r4, #0]
 8007dae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007db2:	bd70      	pop	{r4, r5, r6, pc}
 8007db4:	08009930 	.word	0x08009930
 8007db8:	080099b0 	.word	0x080099b0

08007dbc <__multadd>:
 8007dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	461e      	mov	r6, r3
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	690d      	ldr	r5, [r1, #16]
 8007dca:	f101 0c14 	add.w	ip, r1, #20
 8007dce:	f8dc 3000 	ldr.w	r3, [ip]
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	b299      	uxth	r1, r3
 8007dd6:	fb02 6101 	mla	r1, r2, r1, r6
 8007dda:	0c1e      	lsrs	r6, r3, #16
 8007ddc:	0c0b      	lsrs	r3, r1, #16
 8007dde:	fb02 3306 	mla	r3, r2, r6, r3
 8007de2:	b289      	uxth	r1, r1
 8007de4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007de8:	4285      	cmp	r5, r0
 8007dea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007dee:	f84c 1b04 	str.w	r1, [ip], #4
 8007df2:	dcec      	bgt.n	8007dce <__multadd+0x12>
 8007df4:	b30e      	cbz	r6, 8007e3a <__multadd+0x7e>
 8007df6:	68a3      	ldr	r3, [r4, #8]
 8007df8:	42ab      	cmp	r3, r5
 8007dfa:	dc19      	bgt.n	8007e30 <__multadd+0x74>
 8007dfc:	6861      	ldr	r1, [r4, #4]
 8007dfe:	4638      	mov	r0, r7
 8007e00:	3101      	adds	r1, #1
 8007e02:	f7ff ff79 	bl	8007cf8 <_Balloc>
 8007e06:	4680      	mov	r8, r0
 8007e08:	b928      	cbnz	r0, 8007e16 <__multadd+0x5a>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	21ba      	movs	r1, #186	; 0xba
 8007e0e:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <__multadd+0x84>)
 8007e10:	480c      	ldr	r0, [pc, #48]	; (8007e44 <__multadd+0x88>)
 8007e12:	f000 fb93 	bl	800853c <__assert_func>
 8007e16:	6922      	ldr	r2, [r4, #16]
 8007e18:	f104 010c 	add.w	r1, r4, #12
 8007e1c:	3202      	adds	r2, #2
 8007e1e:	0092      	lsls	r2, r2, #2
 8007e20:	300c      	adds	r0, #12
 8007e22:	f7ff f8a4 	bl	8006f6e <memcpy>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4638      	mov	r0, r7
 8007e2a:	f7ff ffa5 	bl	8007d78 <_Bfree>
 8007e2e:	4644      	mov	r4, r8
 8007e30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e34:	3501      	adds	r5, #1
 8007e36:	615e      	str	r6, [r3, #20]
 8007e38:	6125      	str	r5, [r4, #16]
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e40:	0800999f 	.word	0x0800999f
 8007e44:	080099b0 	.word	0x080099b0

08007e48 <__hi0bits>:
 8007e48:	0c02      	lsrs	r2, r0, #16
 8007e4a:	0412      	lsls	r2, r2, #16
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	b9ca      	cbnz	r2, 8007e84 <__hi0bits+0x3c>
 8007e50:	0403      	lsls	r3, r0, #16
 8007e52:	2010      	movs	r0, #16
 8007e54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007e58:	bf04      	itt	eq
 8007e5a:	021b      	lsleq	r3, r3, #8
 8007e5c:	3008      	addeq	r0, #8
 8007e5e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007e62:	bf04      	itt	eq
 8007e64:	011b      	lsleq	r3, r3, #4
 8007e66:	3004      	addeq	r0, #4
 8007e68:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007e6c:	bf04      	itt	eq
 8007e6e:	009b      	lsleq	r3, r3, #2
 8007e70:	3002      	addeq	r0, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	db05      	blt.n	8007e82 <__hi0bits+0x3a>
 8007e76:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007e7a:	f100 0001 	add.w	r0, r0, #1
 8007e7e:	bf08      	it	eq
 8007e80:	2020      	moveq	r0, #32
 8007e82:	4770      	bx	lr
 8007e84:	2000      	movs	r0, #0
 8007e86:	e7e5      	b.n	8007e54 <__hi0bits+0xc>

08007e88 <__lo0bits>:
 8007e88:	6803      	ldr	r3, [r0, #0]
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	f013 0007 	ands.w	r0, r3, #7
 8007e90:	d00b      	beq.n	8007eaa <__lo0bits+0x22>
 8007e92:	07d9      	lsls	r1, r3, #31
 8007e94:	d421      	bmi.n	8007eda <__lo0bits+0x52>
 8007e96:	0798      	lsls	r0, r3, #30
 8007e98:	bf49      	itett	mi
 8007e9a:	085b      	lsrmi	r3, r3, #1
 8007e9c:	089b      	lsrpl	r3, r3, #2
 8007e9e:	2001      	movmi	r0, #1
 8007ea0:	6013      	strmi	r3, [r2, #0]
 8007ea2:	bf5c      	itt	pl
 8007ea4:	2002      	movpl	r0, #2
 8007ea6:	6013      	strpl	r3, [r2, #0]
 8007ea8:	4770      	bx	lr
 8007eaa:	b299      	uxth	r1, r3
 8007eac:	b909      	cbnz	r1, 8007eb2 <__lo0bits+0x2a>
 8007eae:	2010      	movs	r0, #16
 8007eb0:	0c1b      	lsrs	r3, r3, #16
 8007eb2:	b2d9      	uxtb	r1, r3
 8007eb4:	b909      	cbnz	r1, 8007eba <__lo0bits+0x32>
 8007eb6:	3008      	adds	r0, #8
 8007eb8:	0a1b      	lsrs	r3, r3, #8
 8007eba:	0719      	lsls	r1, r3, #28
 8007ebc:	bf04      	itt	eq
 8007ebe:	091b      	lsreq	r3, r3, #4
 8007ec0:	3004      	addeq	r0, #4
 8007ec2:	0799      	lsls	r1, r3, #30
 8007ec4:	bf04      	itt	eq
 8007ec6:	089b      	lsreq	r3, r3, #2
 8007ec8:	3002      	addeq	r0, #2
 8007eca:	07d9      	lsls	r1, r3, #31
 8007ecc:	d403      	bmi.n	8007ed6 <__lo0bits+0x4e>
 8007ece:	085b      	lsrs	r3, r3, #1
 8007ed0:	f100 0001 	add.w	r0, r0, #1
 8007ed4:	d003      	beq.n	8007ede <__lo0bits+0x56>
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	4770      	bx	lr
 8007eda:	2000      	movs	r0, #0
 8007edc:	4770      	bx	lr
 8007ede:	2020      	movs	r0, #32
 8007ee0:	4770      	bx	lr
	...

08007ee4 <__i2b>:
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	2101      	movs	r1, #1
 8007eea:	f7ff ff05 	bl	8007cf8 <_Balloc>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	b928      	cbnz	r0, 8007efe <__i2b+0x1a>
 8007ef2:	f240 1145 	movw	r1, #325	; 0x145
 8007ef6:	4b04      	ldr	r3, [pc, #16]	; (8007f08 <__i2b+0x24>)
 8007ef8:	4804      	ldr	r0, [pc, #16]	; (8007f0c <__i2b+0x28>)
 8007efa:	f000 fb1f 	bl	800853c <__assert_func>
 8007efe:	2301      	movs	r3, #1
 8007f00:	6144      	str	r4, [r0, #20]
 8007f02:	6103      	str	r3, [r0, #16]
 8007f04:	bd10      	pop	{r4, pc}
 8007f06:	bf00      	nop
 8007f08:	0800999f 	.word	0x0800999f
 8007f0c:	080099b0 	.word	0x080099b0

08007f10 <__multiply>:
 8007f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	4691      	mov	r9, r2
 8007f16:	690a      	ldr	r2, [r1, #16]
 8007f18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	bfbe      	ittt	lt
 8007f22:	460b      	movlt	r3, r1
 8007f24:	464c      	movlt	r4, r9
 8007f26:	4699      	movlt	r9, r3
 8007f28:	6927      	ldr	r7, [r4, #16]
 8007f2a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f2e:	68a3      	ldr	r3, [r4, #8]
 8007f30:	6861      	ldr	r1, [r4, #4]
 8007f32:	eb07 060a 	add.w	r6, r7, sl
 8007f36:	42b3      	cmp	r3, r6
 8007f38:	b085      	sub	sp, #20
 8007f3a:	bfb8      	it	lt
 8007f3c:	3101      	addlt	r1, #1
 8007f3e:	f7ff fedb 	bl	8007cf8 <_Balloc>
 8007f42:	b930      	cbnz	r0, 8007f52 <__multiply+0x42>
 8007f44:	4602      	mov	r2, r0
 8007f46:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007f4a:	4b43      	ldr	r3, [pc, #268]	; (8008058 <__multiply+0x148>)
 8007f4c:	4843      	ldr	r0, [pc, #268]	; (800805c <__multiply+0x14c>)
 8007f4e:	f000 faf5 	bl	800853c <__assert_func>
 8007f52:	f100 0514 	add.w	r5, r0, #20
 8007f56:	462b      	mov	r3, r5
 8007f58:	2200      	movs	r2, #0
 8007f5a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f5e:	4543      	cmp	r3, r8
 8007f60:	d321      	bcc.n	8007fa6 <__multiply+0x96>
 8007f62:	f104 0314 	add.w	r3, r4, #20
 8007f66:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f6a:	f109 0314 	add.w	r3, r9, #20
 8007f6e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f72:	9202      	str	r2, [sp, #8]
 8007f74:	1b3a      	subs	r2, r7, r4
 8007f76:	3a15      	subs	r2, #21
 8007f78:	f022 0203 	bic.w	r2, r2, #3
 8007f7c:	3204      	adds	r2, #4
 8007f7e:	f104 0115 	add.w	r1, r4, #21
 8007f82:	428f      	cmp	r7, r1
 8007f84:	bf38      	it	cc
 8007f86:	2204      	movcc	r2, #4
 8007f88:	9201      	str	r2, [sp, #4]
 8007f8a:	9a02      	ldr	r2, [sp, #8]
 8007f8c:	9303      	str	r3, [sp, #12]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d80c      	bhi.n	8007fac <__multiply+0x9c>
 8007f92:	2e00      	cmp	r6, #0
 8007f94:	dd03      	ble.n	8007f9e <__multiply+0x8e>
 8007f96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d05a      	beq.n	8008054 <__multiply+0x144>
 8007f9e:	6106      	str	r6, [r0, #16]
 8007fa0:	b005      	add	sp, #20
 8007fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa6:	f843 2b04 	str.w	r2, [r3], #4
 8007faa:	e7d8      	b.n	8007f5e <__multiply+0x4e>
 8007fac:	f8b3 a000 	ldrh.w	sl, [r3]
 8007fb0:	f1ba 0f00 	cmp.w	sl, #0
 8007fb4:	d023      	beq.n	8007ffe <__multiply+0xee>
 8007fb6:	46a9      	mov	r9, r5
 8007fb8:	f04f 0c00 	mov.w	ip, #0
 8007fbc:	f104 0e14 	add.w	lr, r4, #20
 8007fc0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007fc4:	f8d9 1000 	ldr.w	r1, [r9]
 8007fc8:	fa1f fb82 	uxth.w	fp, r2
 8007fcc:	b289      	uxth	r1, r1
 8007fce:	fb0a 110b 	mla	r1, sl, fp, r1
 8007fd2:	4461      	add	r1, ip
 8007fd4:	f8d9 c000 	ldr.w	ip, [r9]
 8007fd8:	0c12      	lsrs	r2, r2, #16
 8007fda:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007fde:	fb0a c202 	mla	r2, sl, r2, ip
 8007fe2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fe6:	b289      	uxth	r1, r1
 8007fe8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fec:	4577      	cmp	r7, lr
 8007fee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ff2:	f849 1b04 	str.w	r1, [r9], #4
 8007ff6:	d8e3      	bhi.n	8007fc0 <__multiply+0xb0>
 8007ff8:	9a01      	ldr	r2, [sp, #4]
 8007ffa:	f845 c002 	str.w	ip, [r5, r2]
 8007ffe:	9a03      	ldr	r2, [sp, #12]
 8008000:	3304      	adds	r3, #4
 8008002:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008006:	f1b9 0f00 	cmp.w	r9, #0
 800800a:	d021      	beq.n	8008050 <__multiply+0x140>
 800800c:	46ae      	mov	lr, r5
 800800e:	f04f 0a00 	mov.w	sl, #0
 8008012:	6829      	ldr	r1, [r5, #0]
 8008014:	f104 0c14 	add.w	ip, r4, #20
 8008018:	f8bc b000 	ldrh.w	fp, [ip]
 800801c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008020:	b289      	uxth	r1, r1
 8008022:	fb09 220b 	mla	r2, r9, fp, r2
 8008026:	4452      	add	r2, sl
 8008028:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800802c:	f84e 1b04 	str.w	r1, [lr], #4
 8008030:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008034:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008038:	f8be 1000 	ldrh.w	r1, [lr]
 800803c:	4567      	cmp	r7, ip
 800803e:	fb09 110a 	mla	r1, r9, sl, r1
 8008042:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008046:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800804a:	d8e5      	bhi.n	8008018 <__multiply+0x108>
 800804c:	9a01      	ldr	r2, [sp, #4]
 800804e:	50a9      	str	r1, [r5, r2]
 8008050:	3504      	adds	r5, #4
 8008052:	e79a      	b.n	8007f8a <__multiply+0x7a>
 8008054:	3e01      	subs	r6, #1
 8008056:	e79c      	b.n	8007f92 <__multiply+0x82>
 8008058:	0800999f 	.word	0x0800999f
 800805c:	080099b0 	.word	0x080099b0

08008060 <__pow5mult>:
 8008060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008064:	4615      	mov	r5, r2
 8008066:	f012 0203 	ands.w	r2, r2, #3
 800806a:	4606      	mov	r6, r0
 800806c:	460f      	mov	r7, r1
 800806e:	d007      	beq.n	8008080 <__pow5mult+0x20>
 8008070:	4c25      	ldr	r4, [pc, #148]	; (8008108 <__pow5mult+0xa8>)
 8008072:	3a01      	subs	r2, #1
 8008074:	2300      	movs	r3, #0
 8008076:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800807a:	f7ff fe9f 	bl	8007dbc <__multadd>
 800807e:	4607      	mov	r7, r0
 8008080:	10ad      	asrs	r5, r5, #2
 8008082:	d03d      	beq.n	8008100 <__pow5mult+0xa0>
 8008084:	69f4      	ldr	r4, [r6, #28]
 8008086:	b97c      	cbnz	r4, 80080a8 <__pow5mult+0x48>
 8008088:	2010      	movs	r0, #16
 800808a:	f7fe f8bb 	bl	8006204 <malloc>
 800808e:	4602      	mov	r2, r0
 8008090:	61f0      	str	r0, [r6, #28]
 8008092:	b928      	cbnz	r0, 80080a0 <__pow5mult+0x40>
 8008094:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008098:	4b1c      	ldr	r3, [pc, #112]	; (800810c <__pow5mult+0xac>)
 800809a:	481d      	ldr	r0, [pc, #116]	; (8008110 <__pow5mult+0xb0>)
 800809c:	f000 fa4e 	bl	800853c <__assert_func>
 80080a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080a4:	6004      	str	r4, [r0, #0]
 80080a6:	60c4      	str	r4, [r0, #12]
 80080a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80080ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080b0:	b94c      	cbnz	r4, 80080c6 <__pow5mult+0x66>
 80080b2:	f240 2171 	movw	r1, #625	; 0x271
 80080b6:	4630      	mov	r0, r6
 80080b8:	f7ff ff14 	bl	8007ee4 <__i2b>
 80080bc:	2300      	movs	r3, #0
 80080be:	4604      	mov	r4, r0
 80080c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80080c4:	6003      	str	r3, [r0, #0]
 80080c6:	f04f 0900 	mov.w	r9, #0
 80080ca:	07eb      	lsls	r3, r5, #31
 80080cc:	d50a      	bpl.n	80080e4 <__pow5mult+0x84>
 80080ce:	4639      	mov	r1, r7
 80080d0:	4622      	mov	r2, r4
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7ff ff1c 	bl	8007f10 <__multiply>
 80080d8:	4680      	mov	r8, r0
 80080da:	4639      	mov	r1, r7
 80080dc:	4630      	mov	r0, r6
 80080de:	f7ff fe4b 	bl	8007d78 <_Bfree>
 80080e2:	4647      	mov	r7, r8
 80080e4:	106d      	asrs	r5, r5, #1
 80080e6:	d00b      	beq.n	8008100 <__pow5mult+0xa0>
 80080e8:	6820      	ldr	r0, [r4, #0]
 80080ea:	b938      	cbnz	r0, 80080fc <__pow5mult+0x9c>
 80080ec:	4622      	mov	r2, r4
 80080ee:	4621      	mov	r1, r4
 80080f0:	4630      	mov	r0, r6
 80080f2:	f7ff ff0d 	bl	8007f10 <__multiply>
 80080f6:	6020      	str	r0, [r4, #0]
 80080f8:	f8c0 9000 	str.w	r9, [r0]
 80080fc:	4604      	mov	r4, r0
 80080fe:	e7e4      	b.n	80080ca <__pow5mult+0x6a>
 8008100:	4638      	mov	r0, r7
 8008102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008106:	bf00      	nop
 8008108:	08009b00 	.word	0x08009b00
 800810c:	08009930 	.word	0x08009930
 8008110:	080099b0 	.word	0x080099b0

08008114 <__lshift>:
 8008114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008118:	460c      	mov	r4, r1
 800811a:	4607      	mov	r7, r0
 800811c:	4691      	mov	r9, r2
 800811e:	6923      	ldr	r3, [r4, #16]
 8008120:	6849      	ldr	r1, [r1, #4]
 8008122:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008126:	68a3      	ldr	r3, [r4, #8]
 8008128:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800812c:	f108 0601 	add.w	r6, r8, #1
 8008130:	42b3      	cmp	r3, r6
 8008132:	db0b      	blt.n	800814c <__lshift+0x38>
 8008134:	4638      	mov	r0, r7
 8008136:	f7ff fddf 	bl	8007cf8 <_Balloc>
 800813a:	4605      	mov	r5, r0
 800813c:	b948      	cbnz	r0, 8008152 <__lshift+0x3e>
 800813e:	4602      	mov	r2, r0
 8008140:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008144:	4b27      	ldr	r3, [pc, #156]	; (80081e4 <__lshift+0xd0>)
 8008146:	4828      	ldr	r0, [pc, #160]	; (80081e8 <__lshift+0xd4>)
 8008148:	f000 f9f8 	bl	800853c <__assert_func>
 800814c:	3101      	adds	r1, #1
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	e7ee      	b.n	8008130 <__lshift+0x1c>
 8008152:	2300      	movs	r3, #0
 8008154:	f100 0114 	add.w	r1, r0, #20
 8008158:	f100 0210 	add.w	r2, r0, #16
 800815c:	4618      	mov	r0, r3
 800815e:	4553      	cmp	r3, sl
 8008160:	db33      	blt.n	80081ca <__lshift+0xb6>
 8008162:	6920      	ldr	r0, [r4, #16]
 8008164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008168:	f104 0314 	add.w	r3, r4, #20
 800816c:	f019 091f 	ands.w	r9, r9, #31
 8008170:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008174:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008178:	d02b      	beq.n	80081d2 <__lshift+0xbe>
 800817a:	468a      	mov	sl, r1
 800817c:	2200      	movs	r2, #0
 800817e:	f1c9 0e20 	rsb	lr, r9, #32
 8008182:	6818      	ldr	r0, [r3, #0]
 8008184:	fa00 f009 	lsl.w	r0, r0, r9
 8008188:	4310      	orrs	r0, r2
 800818a:	f84a 0b04 	str.w	r0, [sl], #4
 800818e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008192:	459c      	cmp	ip, r3
 8008194:	fa22 f20e 	lsr.w	r2, r2, lr
 8008198:	d8f3      	bhi.n	8008182 <__lshift+0x6e>
 800819a:	ebac 0304 	sub.w	r3, ip, r4
 800819e:	3b15      	subs	r3, #21
 80081a0:	f023 0303 	bic.w	r3, r3, #3
 80081a4:	3304      	adds	r3, #4
 80081a6:	f104 0015 	add.w	r0, r4, #21
 80081aa:	4584      	cmp	ip, r0
 80081ac:	bf38      	it	cc
 80081ae:	2304      	movcc	r3, #4
 80081b0:	50ca      	str	r2, [r1, r3]
 80081b2:	b10a      	cbz	r2, 80081b8 <__lshift+0xa4>
 80081b4:	f108 0602 	add.w	r6, r8, #2
 80081b8:	3e01      	subs	r6, #1
 80081ba:	4638      	mov	r0, r7
 80081bc:	4621      	mov	r1, r4
 80081be:	612e      	str	r6, [r5, #16]
 80081c0:	f7ff fdda 	bl	8007d78 <_Bfree>
 80081c4:	4628      	mov	r0, r5
 80081c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80081ce:	3301      	adds	r3, #1
 80081d0:	e7c5      	b.n	800815e <__lshift+0x4a>
 80081d2:	3904      	subs	r1, #4
 80081d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80081d8:	459c      	cmp	ip, r3
 80081da:	f841 2f04 	str.w	r2, [r1, #4]!
 80081de:	d8f9      	bhi.n	80081d4 <__lshift+0xc0>
 80081e0:	e7ea      	b.n	80081b8 <__lshift+0xa4>
 80081e2:	bf00      	nop
 80081e4:	0800999f 	.word	0x0800999f
 80081e8:	080099b0 	.word	0x080099b0

080081ec <__mcmp>:
 80081ec:	4603      	mov	r3, r0
 80081ee:	690a      	ldr	r2, [r1, #16]
 80081f0:	6900      	ldr	r0, [r0, #16]
 80081f2:	b530      	push	{r4, r5, lr}
 80081f4:	1a80      	subs	r0, r0, r2
 80081f6:	d10d      	bne.n	8008214 <__mcmp+0x28>
 80081f8:	3314      	adds	r3, #20
 80081fa:	3114      	adds	r1, #20
 80081fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008200:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008204:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008208:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800820c:	4295      	cmp	r5, r2
 800820e:	d002      	beq.n	8008216 <__mcmp+0x2a>
 8008210:	d304      	bcc.n	800821c <__mcmp+0x30>
 8008212:	2001      	movs	r0, #1
 8008214:	bd30      	pop	{r4, r5, pc}
 8008216:	42a3      	cmp	r3, r4
 8008218:	d3f4      	bcc.n	8008204 <__mcmp+0x18>
 800821a:	e7fb      	b.n	8008214 <__mcmp+0x28>
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	e7f8      	b.n	8008214 <__mcmp+0x28>
	...

08008224 <__mdiff>:
 8008224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	460d      	mov	r5, r1
 800822a:	4607      	mov	r7, r0
 800822c:	4611      	mov	r1, r2
 800822e:	4628      	mov	r0, r5
 8008230:	4614      	mov	r4, r2
 8008232:	f7ff ffdb 	bl	80081ec <__mcmp>
 8008236:	1e06      	subs	r6, r0, #0
 8008238:	d111      	bne.n	800825e <__mdiff+0x3a>
 800823a:	4631      	mov	r1, r6
 800823c:	4638      	mov	r0, r7
 800823e:	f7ff fd5b 	bl	8007cf8 <_Balloc>
 8008242:	4602      	mov	r2, r0
 8008244:	b928      	cbnz	r0, 8008252 <__mdiff+0x2e>
 8008246:	f240 2137 	movw	r1, #567	; 0x237
 800824a:	4b3a      	ldr	r3, [pc, #232]	; (8008334 <__mdiff+0x110>)
 800824c:	483a      	ldr	r0, [pc, #232]	; (8008338 <__mdiff+0x114>)
 800824e:	f000 f975 	bl	800853c <__assert_func>
 8008252:	2301      	movs	r3, #1
 8008254:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008258:	4610      	mov	r0, r2
 800825a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825e:	bfa4      	itt	ge
 8008260:	4623      	movge	r3, r4
 8008262:	462c      	movge	r4, r5
 8008264:	4638      	mov	r0, r7
 8008266:	6861      	ldr	r1, [r4, #4]
 8008268:	bfa6      	itte	ge
 800826a:	461d      	movge	r5, r3
 800826c:	2600      	movge	r6, #0
 800826e:	2601      	movlt	r6, #1
 8008270:	f7ff fd42 	bl	8007cf8 <_Balloc>
 8008274:	4602      	mov	r2, r0
 8008276:	b918      	cbnz	r0, 8008280 <__mdiff+0x5c>
 8008278:	f240 2145 	movw	r1, #581	; 0x245
 800827c:	4b2d      	ldr	r3, [pc, #180]	; (8008334 <__mdiff+0x110>)
 800827e:	e7e5      	b.n	800824c <__mdiff+0x28>
 8008280:	f102 0814 	add.w	r8, r2, #20
 8008284:	46c2      	mov	sl, r8
 8008286:	f04f 0c00 	mov.w	ip, #0
 800828a:	6927      	ldr	r7, [r4, #16]
 800828c:	60c6      	str	r6, [r0, #12]
 800828e:	692e      	ldr	r6, [r5, #16]
 8008290:	f104 0014 	add.w	r0, r4, #20
 8008294:	f105 0914 	add.w	r9, r5, #20
 8008298:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800829c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80082a0:	3410      	adds	r4, #16
 80082a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80082a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80082aa:	fa1f f18b 	uxth.w	r1, fp
 80082ae:	4461      	add	r1, ip
 80082b0:	fa1f fc83 	uxth.w	ip, r3
 80082b4:	0c1b      	lsrs	r3, r3, #16
 80082b6:	eba1 010c 	sub.w	r1, r1, ip
 80082ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80082c2:	b289      	uxth	r1, r1
 80082c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80082c8:	454e      	cmp	r6, r9
 80082ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80082ce:	f84a 1b04 	str.w	r1, [sl], #4
 80082d2:	d8e6      	bhi.n	80082a2 <__mdiff+0x7e>
 80082d4:	1b73      	subs	r3, r6, r5
 80082d6:	3b15      	subs	r3, #21
 80082d8:	f023 0303 	bic.w	r3, r3, #3
 80082dc:	3515      	adds	r5, #21
 80082de:	3304      	adds	r3, #4
 80082e0:	42ae      	cmp	r6, r5
 80082e2:	bf38      	it	cc
 80082e4:	2304      	movcc	r3, #4
 80082e6:	4418      	add	r0, r3
 80082e8:	4443      	add	r3, r8
 80082ea:	461e      	mov	r6, r3
 80082ec:	4605      	mov	r5, r0
 80082ee:	4575      	cmp	r5, lr
 80082f0:	d30e      	bcc.n	8008310 <__mdiff+0xec>
 80082f2:	f10e 0103 	add.w	r1, lr, #3
 80082f6:	1a09      	subs	r1, r1, r0
 80082f8:	f021 0103 	bic.w	r1, r1, #3
 80082fc:	3803      	subs	r0, #3
 80082fe:	4586      	cmp	lr, r0
 8008300:	bf38      	it	cc
 8008302:	2100      	movcc	r1, #0
 8008304:	440b      	add	r3, r1
 8008306:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800830a:	b189      	cbz	r1, 8008330 <__mdiff+0x10c>
 800830c:	6117      	str	r7, [r2, #16]
 800830e:	e7a3      	b.n	8008258 <__mdiff+0x34>
 8008310:	f855 8b04 	ldr.w	r8, [r5], #4
 8008314:	fa1f f188 	uxth.w	r1, r8
 8008318:	4461      	add	r1, ip
 800831a:	140c      	asrs	r4, r1, #16
 800831c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008320:	b289      	uxth	r1, r1
 8008322:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008326:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800832a:	f846 1b04 	str.w	r1, [r6], #4
 800832e:	e7de      	b.n	80082ee <__mdiff+0xca>
 8008330:	3f01      	subs	r7, #1
 8008332:	e7e8      	b.n	8008306 <__mdiff+0xe2>
 8008334:	0800999f 	.word	0x0800999f
 8008338:	080099b0 	.word	0x080099b0

0800833c <__d2b>:
 800833c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800833e:	2101      	movs	r1, #1
 8008340:	4617      	mov	r7, r2
 8008342:	461c      	mov	r4, r3
 8008344:	9e08      	ldr	r6, [sp, #32]
 8008346:	f7ff fcd7 	bl	8007cf8 <_Balloc>
 800834a:	4605      	mov	r5, r0
 800834c:	b930      	cbnz	r0, 800835c <__d2b+0x20>
 800834e:	4602      	mov	r2, r0
 8008350:	f240 310f 	movw	r1, #783	; 0x30f
 8008354:	4b22      	ldr	r3, [pc, #136]	; (80083e0 <__d2b+0xa4>)
 8008356:	4823      	ldr	r0, [pc, #140]	; (80083e4 <__d2b+0xa8>)
 8008358:	f000 f8f0 	bl	800853c <__assert_func>
 800835c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008360:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008364:	bb24      	cbnz	r4, 80083b0 <__d2b+0x74>
 8008366:	2f00      	cmp	r7, #0
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	d026      	beq.n	80083ba <__d2b+0x7e>
 800836c:	4668      	mov	r0, sp
 800836e:	9700      	str	r7, [sp, #0]
 8008370:	f7ff fd8a 	bl	8007e88 <__lo0bits>
 8008374:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008378:	b1e8      	cbz	r0, 80083b6 <__d2b+0x7a>
 800837a:	f1c0 0320 	rsb	r3, r0, #32
 800837e:	fa02 f303 	lsl.w	r3, r2, r3
 8008382:	430b      	orrs	r3, r1
 8008384:	40c2      	lsrs	r2, r0
 8008386:	616b      	str	r3, [r5, #20]
 8008388:	9201      	str	r2, [sp, #4]
 800838a:	9b01      	ldr	r3, [sp, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	bf14      	ite	ne
 8008390:	2102      	movne	r1, #2
 8008392:	2101      	moveq	r1, #1
 8008394:	61ab      	str	r3, [r5, #24]
 8008396:	6129      	str	r1, [r5, #16]
 8008398:	b1bc      	cbz	r4, 80083ca <__d2b+0x8e>
 800839a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800839e:	4404      	add	r4, r0
 80083a0:	6034      	str	r4, [r6, #0]
 80083a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a8:	6018      	str	r0, [r3, #0]
 80083aa:	4628      	mov	r0, r5
 80083ac:	b003      	add	sp, #12
 80083ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083b4:	e7d7      	b.n	8008366 <__d2b+0x2a>
 80083b6:	6169      	str	r1, [r5, #20]
 80083b8:	e7e7      	b.n	800838a <__d2b+0x4e>
 80083ba:	a801      	add	r0, sp, #4
 80083bc:	f7ff fd64 	bl	8007e88 <__lo0bits>
 80083c0:	9b01      	ldr	r3, [sp, #4]
 80083c2:	2101      	movs	r1, #1
 80083c4:	616b      	str	r3, [r5, #20]
 80083c6:	3020      	adds	r0, #32
 80083c8:	e7e5      	b.n	8008396 <__d2b+0x5a>
 80083ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083ce:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80083d2:	6030      	str	r0, [r6, #0]
 80083d4:	6918      	ldr	r0, [r3, #16]
 80083d6:	f7ff fd37 	bl	8007e48 <__hi0bits>
 80083da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80083de:	e7e2      	b.n	80083a6 <__d2b+0x6a>
 80083e0:	0800999f 	.word	0x0800999f
 80083e4:	080099b0 	.word	0x080099b0

080083e8 <__sflush_r>:
 80083e8:	898a      	ldrh	r2, [r1, #12]
 80083ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ec:	4605      	mov	r5, r0
 80083ee:	0710      	lsls	r0, r2, #28
 80083f0:	460c      	mov	r4, r1
 80083f2:	d457      	bmi.n	80084a4 <__sflush_r+0xbc>
 80083f4:	684b      	ldr	r3, [r1, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	dc04      	bgt.n	8008404 <__sflush_r+0x1c>
 80083fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	dc01      	bgt.n	8008404 <__sflush_r+0x1c>
 8008400:	2000      	movs	r0, #0
 8008402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008406:	2e00      	cmp	r6, #0
 8008408:	d0fa      	beq.n	8008400 <__sflush_r+0x18>
 800840a:	2300      	movs	r3, #0
 800840c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008410:	682f      	ldr	r7, [r5, #0]
 8008412:	6a21      	ldr	r1, [r4, #32]
 8008414:	602b      	str	r3, [r5, #0]
 8008416:	d032      	beq.n	800847e <__sflush_r+0x96>
 8008418:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	075a      	lsls	r2, r3, #29
 800841e:	d505      	bpl.n	800842c <__sflush_r+0x44>
 8008420:	6863      	ldr	r3, [r4, #4]
 8008422:	1ac0      	subs	r0, r0, r3
 8008424:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008426:	b10b      	cbz	r3, 800842c <__sflush_r+0x44>
 8008428:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800842a:	1ac0      	subs	r0, r0, r3
 800842c:	2300      	movs	r3, #0
 800842e:	4602      	mov	r2, r0
 8008430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008432:	4628      	mov	r0, r5
 8008434:	6a21      	ldr	r1, [r4, #32]
 8008436:	47b0      	blx	r6
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	d106      	bne.n	800844c <__sflush_r+0x64>
 800843e:	6829      	ldr	r1, [r5, #0]
 8008440:	291d      	cmp	r1, #29
 8008442:	d82b      	bhi.n	800849c <__sflush_r+0xb4>
 8008444:	4a28      	ldr	r2, [pc, #160]	; (80084e8 <__sflush_r+0x100>)
 8008446:	410a      	asrs	r2, r1
 8008448:	07d6      	lsls	r6, r2, #31
 800844a:	d427      	bmi.n	800849c <__sflush_r+0xb4>
 800844c:	2200      	movs	r2, #0
 800844e:	6062      	str	r2, [r4, #4]
 8008450:	6922      	ldr	r2, [r4, #16]
 8008452:	04d9      	lsls	r1, r3, #19
 8008454:	6022      	str	r2, [r4, #0]
 8008456:	d504      	bpl.n	8008462 <__sflush_r+0x7a>
 8008458:	1c42      	adds	r2, r0, #1
 800845a:	d101      	bne.n	8008460 <__sflush_r+0x78>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b903      	cbnz	r3, 8008462 <__sflush_r+0x7a>
 8008460:	6560      	str	r0, [r4, #84]	; 0x54
 8008462:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008464:	602f      	str	r7, [r5, #0]
 8008466:	2900      	cmp	r1, #0
 8008468:	d0ca      	beq.n	8008400 <__sflush_r+0x18>
 800846a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800846e:	4299      	cmp	r1, r3
 8008470:	d002      	beq.n	8008478 <__sflush_r+0x90>
 8008472:	4628      	mov	r0, r5
 8008474:	f7ff fbf8 	bl	8007c68 <_free_r>
 8008478:	2000      	movs	r0, #0
 800847a:	6360      	str	r0, [r4, #52]	; 0x34
 800847c:	e7c1      	b.n	8008402 <__sflush_r+0x1a>
 800847e:	2301      	movs	r3, #1
 8008480:	4628      	mov	r0, r5
 8008482:	47b0      	blx	r6
 8008484:	1c41      	adds	r1, r0, #1
 8008486:	d1c8      	bne.n	800841a <__sflush_r+0x32>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0c5      	beq.n	800841a <__sflush_r+0x32>
 800848e:	2b1d      	cmp	r3, #29
 8008490:	d001      	beq.n	8008496 <__sflush_r+0xae>
 8008492:	2b16      	cmp	r3, #22
 8008494:	d101      	bne.n	800849a <__sflush_r+0xb2>
 8008496:	602f      	str	r7, [r5, #0]
 8008498:	e7b2      	b.n	8008400 <__sflush_r+0x18>
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a0:	81a3      	strh	r3, [r4, #12]
 80084a2:	e7ae      	b.n	8008402 <__sflush_r+0x1a>
 80084a4:	690f      	ldr	r7, [r1, #16]
 80084a6:	2f00      	cmp	r7, #0
 80084a8:	d0aa      	beq.n	8008400 <__sflush_r+0x18>
 80084aa:	0793      	lsls	r3, r2, #30
 80084ac:	bf18      	it	ne
 80084ae:	2300      	movne	r3, #0
 80084b0:	680e      	ldr	r6, [r1, #0]
 80084b2:	bf08      	it	eq
 80084b4:	694b      	ldreq	r3, [r1, #20]
 80084b6:	1bf6      	subs	r6, r6, r7
 80084b8:	600f      	str	r7, [r1, #0]
 80084ba:	608b      	str	r3, [r1, #8]
 80084bc:	2e00      	cmp	r6, #0
 80084be:	dd9f      	ble.n	8008400 <__sflush_r+0x18>
 80084c0:	4633      	mov	r3, r6
 80084c2:	463a      	mov	r2, r7
 80084c4:	4628      	mov	r0, r5
 80084c6:	6a21      	ldr	r1, [r4, #32]
 80084c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80084cc:	47e0      	blx	ip
 80084ce:	2800      	cmp	r0, #0
 80084d0:	dc06      	bgt.n	80084e0 <__sflush_r+0xf8>
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	e790      	b.n	8008402 <__sflush_r+0x1a>
 80084e0:	4407      	add	r7, r0
 80084e2:	1a36      	subs	r6, r6, r0
 80084e4:	e7ea      	b.n	80084bc <__sflush_r+0xd4>
 80084e6:	bf00      	nop
 80084e8:	dfbffffe 	.word	0xdfbffffe

080084ec <_fflush_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	690b      	ldr	r3, [r1, #16]
 80084f0:	4605      	mov	r5, r0
 80084f2:	460c      	mov	r4, r1
 80084f4:	b913      	cbnz	r3, 80084fc <_fflush_r+0x10>
 80084f6:	2500      	movs	r5, #0
 80084f8:	4628      	mov	r0, r5
 80084fa:	bd38      	pop	{r3, r4, r5, pc}
 80084fc:	b118      	cbz	r0, 8008506 <_fflush_r+0x1a>
 80084fe:	6a03      	ldr	r3, [r0, #32]
 8008500:	b90b      	cbnz	r3, 8008506 <_fflush_r+0x1a>
 8008502:	f7fe fc1d 	bl	8006d40 <__sinit>
 8008506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0f3      	beq.n	80084f6 <_fflush_r+0xa>
 800850e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008510:	07d0      	lsls	r0, r2, #31
 8008512:	d404      	bmi.n	800851e <_fflush_r+0x32>
 8008514:	0599      	lsls	r1, r3, #22
 8008516:	d402      	bmi.n	800851e <_fflush_r+0x32>
 8008518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800851a:	f7fe fd18 	bl	8006f4e <__retarget_lock_acquire_recursive>
 800851e:	4628      	mov	r0, r5
 8008520:	4621      	mov	r1, r4
 8008522:	f7ff ff61 	bl	80083e8 <__sflush_r>
 8008526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008528:	4605      	mov	r5, r0
 800852a:	07da      	lsls	r2, r3, #31
 800852c:	d4e4      	bmi.n	80084f8 <_fflush_r+0xc>
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	059b      	lsls	r3, r3, #22
 8008532:	d4e1      	bmi.n	80084f8 <_fflush_r+0xc>
 8008534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008536:	f7fe fd0b 	bl	8006f50 <__retarget_lock_release_recursive>
 800853a:	e7dd      	b.n	80084f8 <_fflush_r+0xc>

0800853c <__assert_func>:
 800853c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800853e:	4614      	mov	r4, r2
 8008540:	461a      	mov	r2, r3
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <__assert_func+0x2c>)
 8008544:	4605      	mov	r5, r0
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68d8      	ldr	r0, [r3, #12]
 800854a:	b14c      	cbz	r4, 8008560 <__assert_func+0x24>
 800854c:	4b07      	ldr	r3, [pc, #28]	; (800856c <__assert_func+0x30>)
 800854e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008552:	9100      	str	r1, [sp, #0]
 8008554:	462b      	mov	r3, r5
 8008556:	4906      	ldr	r1, [pc, #24]	; (8008570 <__assert_func+0x34>)
 8008558:	f000 f842 	bl	80085e0 <fiprintf>
 800855c:	f000 f852 	bl	8008604 <abort>
 8008560:	4b04      	ldr	r3, [pc, #16]	; (8008574 <__assert_func+0x38>)
 8008562:	461c      	mov	r4, r3
 8008564:	e7f3      	b.n	800854e <__assert_func+0x12>
 8008566:	bf00      	nop
 8008568:	20000068 	.word	0x20000068
 800856c:	08009b16 	.word	0x08009b16
 8008570:	08009b23 	.word	0x08009b23
 8008574:	08009b51 	.word	0x08009b51

08008578 <_calloc_r>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	fba1 5402 	umull	r5, r4, r1, r2
 800857e:	b934      	cbnz	r4, 800858e <_calloc_r+0x16>
 8008580:	4629      	mov	r1, r5
 8008582:	f7fd fe67 	bl	8006254 <_malloc_r>
 8008586:	4606      	mov	r6, r0
 8008588:	b928      	cbnz	r0, 8008596 <_calloc_r+0x1e>
 800858a:	4630      	mov	r0, r6
 800858c:	bd70      	pop	{r4, r5, r6, pc}
 800858e:	220c      	movs	r2, #12
 8008590:	2600      	movs	r6, #0
 8008592:	6002      	str	r2, [r0, #0]
 8008594:	e7f9      	b.n	800858a <_calloc_r+0x12>
 8008596:	462a      	mov	r2, r5
 8008598:	4621      	mov	r1, r4
 800859a:	f7fe fc4a 	bl	8006e32 <memset>
 800859e:	e7f4      	b.n	800858a <_calloc_r+0x12>

080085a0 <__ascii_mbtowc>:
 80085a0:	b082      	sub	sp, #8
 80085a2:	b901      	cbnz	r1, 80085a6 <__ascii_mbtowc+0x6>
 80085a4:	a901      	add	r1, sp, #4
 80085a6:	b142      	cbz	r2, 80085ba <__ascii_mbtowc+0x1a>
 80085a8:	b14b      	cbz	r3, 80085be <__ascii_mbtowc+0x1e>
 80085aa:	7813      	ldrb	r3, [r2, #0]
 80085ac:	600b      	str	r3, [r1, #0]
 80085ae:	7812      	ldrb	r2, [r2, #0]
 80085b0:	1e10      	subs	r0, r2, #0
 80085b2:	bf18      	it	ne
 80085b4:	2001      	movne	r0, #1
 80085b6:	b002      	add	sp, #8
 80085b8:	4770      	bx	lr
 80085ba:	4610      	mov	r0, r2
 80085bc:	e7fb      	b.n	80085b6 <__ascii_mbtowc+0x16>
 80085be:	f06f 0001 	mvn.w	r0, #1
 80085c2:	e7f8      	b.n	80085b6 <__ascii_mbtowc+0x16>

080085c4 <__ascii_wctomb>:
 80085c4:	4603      	mov	r3, r0
 80085c6:	4608      	mov	r0, r1
 80085c8:	b141      	cbz	r1, 80085dc <__ascii_wctomb+0x18>
 80085ca:	2aff      	cmp	r2, #255	; 0xff
 80085cc:	d904      	bls.n	80085d8 <__ascii_wctomb+0x14>
 80085ce:	228a      	movs	r2, #138	; 0x8a
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	4770      	bx	lr
 80085d8:	2001      	movs	r0, #1
 80085da:	700a      	strb	r2, [r1, #0]
 80085dc:	4770      	bx	lr
	...

080085e0 <fiprintf>:
 80085e0:	b40e      	push	{r1, r2, r3}
 80085e2:	b503      	push	{r0, r1, lr}
 80085e4:	4601      	mov	r1, r0
 80085e6:	ab03      	add	r3, sp, #12
 80085e8:	4805      	ldr	r0, [pc, #20]	; (8008600 <fiprintf+0x20>)
 80085ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ee:	6800      	ldr	r0, [r0, #0]
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	f000 f835 	bl	8008660 <_vfiprintf_r>
 80085f6:	b002      	add	sp, #8
 80085f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085fc:	b003      	add	sp, #12
 80085fe:	4770      	bx	lr
 8008600:	20000068 	.word	0x20000068

08008604 <abort>:
 8008604:	2006      	movs	r0, #6
 8008606:	b508      	push	{r3, lr}
 8008608:	f000 fa02 	bl	8008a10 <raise>
 800860c:	2001      	movs	r0, #1
 800860e:	f7f9 fa36 	bl	8001a7e <_exit>

08008612 <__sfputc_r>:
 8008612:	6893      	ldr	r3, [r2, #8]
 8008614:	b410      	push	{r4}
 8008616:	3b01      	subs	r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	6093      	str	r3, [r2, #8]
 800861c:	da07      	bge.n	800862e <__sfputc_r+0x1c>
 800861e:	6994      	ldr	r4, [r2, #24]
 8008620:	42a3      	cmp	r3, r4
 8008622:	db01      	blt.n	8008628 <__sfputc_r+0x16>
 8008624:	290a      	cmp	r1, #10
 8008626:	d102      	bne.n	800862e <__sfputc_r+0x1c>
 8008628:	bc10      	pop	{r4}
 800862a:	f000 b933 	b.w	8008894 <__swbuf_r>
 800862e:	6813      	ldr	r3, [r2, #0]
 8008630:	1c58      	adds	r0, r3, #1
 8008632:	6010      	str	r0, [r2, #0]
 8008634:	7019      	strb	r1, [r3, #0]
 8008636:	4608      	mov	r0, r1
 8008638:	bc10      	pop	{r4}
 800863a:	4770      	bx	lr

0800863c <__sfputs_r>:
 800863c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863e:	4606      	mov	r6, r0
 8008640:	460f      	mov	r7, r1
 8008642:	4614      	mov	r4, r2
 8008644:	18d5      	adds	r5, r2, r3
 8008646:	42ac      	cmp	r4, r5
 8008648:	d101      	bne.n	800864e <__sfputs_r+0x12>
 800864a:	2000      	movs	r0, #0
 800864c:	e007      	b.n	800865e <__sfputs_r+0x22>
 800864e:	463a      	mov	r2, r7
 8008650:	4630      	mov	r0, r6
 8008652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008656:	f7ff ffdc 	bl	8008612 <__sfputc_r>
 800865a:	1c43      	adds	r3, r0, #1
 800865c:	d1f3      	bne.n	8008646 <__sfputs_r+0xa>
 800865e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008660 <_vfiprintf_r>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	460d      	mov	r5, r1
 8008666:	4614      	mov	r4, r2
 8008668:	4698      	mov	r8, r3
 800866a:	4606      	mov	r6, r0
 800866c:	b09d      	sub	sp, #116	; 0x74
 800866e:	b118      	cbz	r0, 8008678 <_vfiprintf_r+0x18>
 8008670:	6a03      	ldr	r3, [r0, #32]
 8008672:	b90b      	cbnz	r3, 8008678 <_vfiprintf_r+0x18>
 8008674:	f7fe fb64 	bl	8006d40 <__sinit>
 8008678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800867a:	07d9      	lsls	r1, r3, #31
 800867c:	d405      	bmi.n	800868a <_vfiprintf_r+0x2a>
 800867e:	89ab      	ldrh	r3, [r5, #12]
 8008680:	059a      	lsls	r2, r3, #22
 8008682:	d402      	bmi.n	800868a <_vfiprintf_r+0x2a>
 8008684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008686:	f7fe fc62 	bl	8006f4e <__retarget_lock_acquire_recursive>
 800868a:	89ab      	ldrh	r3, [r5, #12]
 800868c:	071b      	lsls	r3, r3, #28
 800868e:	d501      	bpl.n	8008694 <_vfiprintf_r+0x34>
 8008690:	692b      	ldr	r3, [r5, #16]
 8008692:	b99b      	cbnz	r3, 80086bc <_vfiprintf_r+0x5c>
 8008694:	4629      	mov	r1, r5
 8008696:	4630      	mov	r0, r6
 8008698:	f000 f93a 	bl	8008910 <__swsetup_r>
 800869c:	b170      	cbz	r0, 80086bc <_vfiprintf_r+0x5c>
 800869e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086a0:	07dc      	lsls	r4, r3, #31
 80086a2:	d504      	bpl.n	80086ae <_vfiprintf_r+0x4e>
 80086a4:	f04f 30ff 	mov.w	r0, #4294967295
 80086a8:	b01d      	add	sp, #116	; 0x74
 80086aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ae:	89ab      	ldrh	r3, [r5, #12]
 80086b0:	0598      	lsls	r0, r3, #22
 80086b2:	d4f7      	bmi.n	80086a4 <_vfiprintf_r+0x44>
 80086b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086b6:	f7fe fc4b 	bl	8006f50 <__retarget_lock_release_recursive>
 80086ba:	e7f3      	b.n	80086a4 <_vfiprintf_r+0x44>
 80086bc:	2300      	movs	r3, #0
 80086be:	9309      	str	r3, [sp, #36]	; 0x24
 80086c0:	2320      	movs	r3, #32
 80086c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086c6:	2330      	movs	r3, #48	; 0x30
 80086c8:	f04f 0901 	mov.w	r9, #1
 80086cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80086d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008880 <_vfiprintf_r+0x220>
 80086d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086d8:	4623      	mov	r3, r4
 80086da:	469a      	mov	sl, r3
 80086dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e0:	b10a      	cbz	r2, 80086e6 <_vfiprintf_r+0x86>
 80086e2:	2a25      	cmp	r2, #37	; 0x25
 80086e4:	d1f9      	bne.n	80086da <_vfiprintf_r+0x7a>
 80086e6:	ebba 0b04 	subs.w	fp, sl, r4
 80086ea:	d00b      	beq.n	8008704 <_vfiprintf_r+0xa4>
 80086ec:	465b      	mov	r3, fp
 80086ee:	4622      	mov	r2, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	4630      	mov	r0, r6
 80086f4:	f7ff ffa2 	bl	800863c <__sfputs_r>
 80086f8:	3001      	adds	r0, #1
 80086fa:	f000 80a9 	beq.w	8008850 <_vfiprintf_r+0x1f0>
 80086fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008700:	445a      	add	r2, fp
 8008702:	9209      	str	r2, [sp, #36]	; 0x24
 8008704:	f89a 3000 	ldrb.w	r3, [sl]
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 80a1 	beq.w	8008850 <_vfiprintf_r+0x1f0>
 800870e:	2300      	movs	r3, #0
 8008710:	f04f 32ff 	mov.w	r2, #4294967295
 8008714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008718:	f10a 0a01 	add.w	sl, sl, #1
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	9307      	str	r3, [sp, #28]
 8008720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008724:	931a      	str	r3, [sp, #104]	; 0x68
 8008726:	4654      	mov	r4, sl
 8008728:	2205      	movs	r2, #5
 800872a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872e:	4854      	ldr	r0, [pc, #336]	; (8008880 <_vfiprintf_r+0x220>)
 8008730:	f7fe fc0f 	bl	8006f52 <memchr>
 8008734:	9a04      	ldr	r2, [sp, #16]
 8008736:	b9d8      	cbnz	r0, 8008770 <_vfiprintf_r+0x110>
 8008738:	06d1      	lsls	r1, r2, #27
 800873a:	bf44      	itt	mi
 800873c:	2320      	movmi	r3, #32
 800873e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008742:	0713      	lsls	r3, r2, #28
 8008744:	bf44      	itt	mi
 8008746:	232b      	movmi	r3, #43	; 0x2b
 8008748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800874c:	f89a 3000 	ldrb.w	r3, [sl]
 8008750:	2b2a      	cmp	r3, #42	; 0x2a
 8008752:	d015      	beq.n	8008780 <_vfiprintf_r+0x120>
 8008754:	4654      	mov	r4, sl
 8008756:	2000      	movs	r0, #0
 8008758:	f04f 0c0a 	mov.w	ip, #10
 800875c:	9a07      	ldr	r2, [sp, #28]
 800875e:	4621      	mov	r1, r4
 8008760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008764:	3b30      	subs	r3, #48	; 0x30
 8008766:	2b09      	cmp	r3, #9
 8008768:	d94d      	bls.n	8008806 <_vfiprintf_r+0x1a6>
 800876a:	b1b0      	cbz	r0, 800879a <_vfiprintf_r+0x13a>
 800876c:	9207      	str	r2, [sp, #28]
 800876e:	e014      	b.n	800879a <_vfiprintf_r+0x13a>
 8008770:	eba0 0308 	sub.w	r3, r0, r8
 8008774:	fa09 f303 	lsl.w	r3, r9, r3
 8008778:	4313      	orrs	r3, r2
 800877a:	46a2      	mov	sl, r4
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	e7d2      	b.n	8008726 <_vfiprintf_r+0xc6>
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	1d19      	adds	r1, r3, #4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	9103      	str	r1, [sp, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	bfbb      	ittet	lt
 800878c:	425b      	neglt	r3, r3
 800878e:	f042 0202 	orrlt.w	r2, r2, #2
 8008792:	9307      	strge	r3, [sp, #28]
 8008794:	9307      	strlt	r3, [sp, #28]
 8008796:	bfb8      	it	lt
 8008798:	9204      	strlt	r2, [sp, #16]
 800879a:	7823      	ldrb	r3, [r4, #0]
 800879c:	2b2e      	cmp	r3, #46	; 0x2e
 800879e:	d10c      	bne.n	80087ba <_vfiprintf_r+0x15a>
 80087a0:	7863      	ldrb	r3, [r4, #1]
 80087a2:	2b2a      	cmp	r3, #42	; 0x2a
 80087a4:	d134      	bne.n	8008810 <_vfiprintf_r+0x1b0>
 80087a6:	9b03      	ldr	r3, [sp, #12]
 80087a8:	3402      	adds	r4, #2
 80087aa:	1d1a      	adds	r2, r3, #4
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	9203      	str	r2, [sp, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	bfb8      	it	lt
 80087b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80087b8:	9305      	str	r3, [sp, #20]
 80087ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008884 <_vfiprintf_r+0x224>
 80087be:	2203      	movs	r2, #3
 80087c0:	4650      	mov	r0, sl
 80087c2:	7821      	ldrb	r1, [r4, #0]
 80087c4:	f7fe fbc5 	bl	8006f52 <memchr>
 80087c8:	b138      	cbz	r0, 80087da <_vfiprintf_r+0x17a>
 80087ca:	2240      	movs	r2, #64	; 0x40
 80087cc:	9b04      	ldr	r3, [sp, #16]
 80087ce:	eba0 000a 	sub.w	r0, r0, sl
 80087d2:	4082      	lsls	r2, r0
 80087d4:	4313      	orrs	r3, r2
 80087d6:	3401      	adds	r4, #1
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087de:	2206      	movs	r2, #6
 80087e0:	4829      	ldr	r0, [pc, #164]	; (8008888 <_vfiprintf_r+0x228>)
 80087e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087e6:	f7fe fbb4 	bl	8006f52 <memchr>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d03f      	beq.n	800886e <_vfiprintf_r+0x20e>
 80087ee:	4b27      	ldr	r3, [pc, #156]	; (800888c <_vfiprintf_r+0x22c>)
 80087f0:	bb1b      	cbnz	r3, 800883a <_vfiprintf_r+0x1da>
 80087f2:	9b03      	ldr	r3, [sp, #12]
 80087f4:	3307      	adds	r3, #7
 80087f6:	f023 0307 	bic.w	r3, r3, #7
 80087fa:	3308      	adds	r3, #8
 80087fc:	9303      	str	r3, [sp, #12]
 80087fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008800:	443b      	add	r3, r7
 8008802:	9309      	str	r3, [sp, #36]	; 0x24
 8008804:	e768      	b.n	80086d8 <_vfiprintf_r+0x78>
 8008806:	460c      	mov	r4, r1
 8008808:	2001      	movs	r0, #1
 800880a:	fb0c 3202 	mla	r2, ip, r2, r3
 800880e:	e7a6      	b.n	800875e <_vfiprintf_r+0xfe>
 8008810:	2300      	movs	r3, #0
 8008812:	f04f 0c0a 	mov.w	ip, #10
 8008816:	4619      	mov	r1, r3
 8008818:	3401      	adds	r4, #1
 800881a:	9305      	str	r3, [sp, #20]
 800881c:	4620      	mov	r0, r4
 800881e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008822:	3a30      	subs	r2, #48	; 0x30
 8008824:	2a09      	cmp	r2, #9
 8008826:	d903      	bls.n	8008830 <_vfiprintf_r+0x1d0>
 8008828:	2b00      	cmp	r3, #0
 800882a:	d0c6      	beq.n	80087ba <_vfiprintf_r+0x15a>
 800882c:	9105      	str	r1, [sp, #20]
 800882e:	e7c4      	b.n	80087ba <_vfiprintf_r+0x15a>
 8008830:	4604      	mov	r4, r0
 8008832:	2301      	movs	r3, #1
 8008834:	fb0c 2101 	mla	r1, ip, r1, r2
 8008838:	e7f0      	b.n	800881c <_vfiprintf_r+0x1bc>
 800883a:	ab03      	add	r3, sp, #12
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	462a      	mov	r2, r5
 8008840:	4630      	mov	r0, r6
 8008842:	4b13      	ldr	r3, [pc, #76]	; (8008890 <_vfiprintf_r+0x230>)
 8008844:	a904      	add	r1, sp, #16
 8008846:	f7fd fe2d 	bl	80064a4 <_printf_float>
 800884a:	4607      	mov	r7, r0
 800884c:	1c78      	adds	r0, r7, #1
 800884e:	d1d6      	bne.n	80087fe <_vfiprintf_r+0x19e>
 8008850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008852:	07d9      	lsls	r1, r3, #31
 8008854:	d405      	bmi.n	8008862 <_vfiprintf_r+0x202>
 8008856:	89ab      	ldrh	r3, [r5, #12]
 8008858:	059a      	lsls	r2, r3, #22
 800885a:	d402      	bmi.n	8008862 <_vfiprintf_r+0x202>
 800885c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800885e:	f7fe fb77 	bl	8006f50 <__retarget_lock_release_recursive>
 8008862:	89ab      	ldrh	r3, [r5, #12]
 8008864:	065b      	lsls	r3, r3, #25
 8008866:	f53f af1d 	bmi.w	80086a4 <_vfiprintf_r+0x44>
 800886a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800886c:	e71c      	b.n	80086a8 <_vfiprintf_r+0x48>
 800886e:	ab03      	add	r3, sp, #12
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	462a      	mov	r2, r5
 8008874:	4630      	mov	r0, r6
 8008876:	4b06      	ldr	r3, [pc, #24]	; (8008890 <_vfiprintf_r+0x230>)
 8008878:	a904      	add	r1, sp, #16
 800887a:	f7fe f8b3 	bl	80069e4 <_printf_i>
 800887e:	e7e4      	b.n	800884a <_vfiprintf_r+0x1ea>
 8008880:	08009b52 	.word	0x08009b52
 8008884:	08009b58 	.word	0x08009b58
 8008888:	08009b5c 	.word	0x08009b5c
 800888c:	080064a5 	.word	0x080064a5
 8008890:	0800863d 	.word	0x0800863d

08008894 <__swbuf_r>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	460e      	mov	r6, r1
 8008898:	4614      	mov	r4, r2
 800889a:	4605      	mov	r5, r0
 800889c:	b118      	cbz	r0, 80088a6 <__swbuf_r+0x12>
 800889e:	6a03      	ldr	r3, [r0, #32]
 80088a0:	b90b      	cbnz	r3, 80088a6 <__swbuf_r+0x12>
 80088a2:	f7fe fa4d 	bl	8006d40 <__sinit>
 80088a6:	69a3      	ldr	r3, [r4, #24]
 80088a8:	60a3      	str	r3, [r4, #8]
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	071a      	lsls	r2, r3, #28
 80088ae:	d525      	bpl.n	80088fc <__swbuf_r+0x68>
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	b31b      	cbz	r3, 80088fc <__swbuf_r+0x68>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	6922      	ldr	r2, [r4, #16]
 80088b8:	b2f6      	uxtb	r6, r6
 80088ba:	1a98      	subs	r0, r3, r2
 80088bc:	6963      	ldr	r3, [r4, #20]
 80088be:	4637      	mov	r7, r6
 80088c0:	4283      	cmp	r3, r0
 80088c2:	dc04      	bgt.n	80088ce <__swbuf_r+0x3a>
 80088c4:	4621      	mov	r1, r4
 80088c6:	4628      	mov	r0, r5
 80088c8:	f7ff fe10 	bl	80084ec <_fflush_r>
 80088cc:	b9e0      	cbnz	r0, 8008908 <__swbuf_r+0x74>
 80088ce:	68a3      	ldr	r3, [r4, #8]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	60a3      	str	r3, [r4, #8]
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	6022      	str	r2, [r4, #0]
 80088da:	701e      	strb	r6, [r3, #0]
 80088dc:	6962      	ldr	r2, [r4, #20]
 80088de:	1c43      	adds	r3, r0, #1
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d004      	beq.n	80088ee <__swbuf_r+0x5a>
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	07db      	lsls	r3, r3, #31
 80088e8:	d506      	bpl.n	80088f8 <__swbuf_r+0x64>
 80088ea:	2e0a      	cmp	r6, #10
 80088ec:	d104      	bne.n	80088f8 <__swbuf_r+0x64>
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f7ff fdfb 	bl	80084ec <_fflush_r>
 80088f6:	b938      	cbnz	r0, 8008908 <__swbuf_r+0x74>
 80088f8:	4638      	mov	r0, r7
 80088fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088fc:	4621      	mov	r1, r4
 80088fe:	4628      	mov	r0, r5
 8008900:	f000 f806 	bl	8008910 <__swsetup_r>
 8008904:	2800      	cmp	r0, #0
 8008906:	d0d5      	beq.n	80088b4 <__swbuf_r+0x20>
 8008908:	f04f 37ff 	mov.w	r7, #4294967295
 800890c:	e7f4      	b.n	80088f8 <__swbuf_r+0x64>
	...

08008910 <__swsetup_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4b2a      	ldr	r3, [pc, #168]	; (80089bc <__swsetup_r+0xac>)
 8008914:	4605      	mov	r5, r0
 8008916:	6818      	ldr	r0, [r3, #0]
 8008918:	460c      	mov	r4, r1
 800891a:	b118      	cbz	r0, 8008924 <__swsetup_r+0x14>
 800891c:	6a03      	ldr	r3, [r0, #32]
 800891e:	b90b      	cbnz	r3, 8008924 <__swsetup_r+0x14>
 8008920:	f7fe fa0e 	bl	8006d40 <__sinit>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800892a:	0718      	lsls	r0, r3, #28
 800892c:	d422      	bmi.n	8008974 <__swsetup_r+0x64>
 800892e:	06d9      	lsls	r1, r3, #27
 8008930:	d407      	bmi.n	8008942 <__swsetup_r+0x32>
 8008932:	2309      	movs	r3, #9
 8008934:	602b      	str	r3, [r5, #0]
 8008936:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800893a:	f04f 30ff 	mov.w	r0, #4294967295
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	e034      	b.n	80089ac <__swsetup_r+0x9c>
 8008942:	0758      	lsls	r0, r3, #29
 8008944:	d512      	bpl.n	800896c <__swsetup_r+0x5c>
 8008946:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008948:	b141      	cbz	r1, 800895c <__swsetup_r+0x4c>
 800894a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800894e:	4299      	cmp	r1, r3
 8008950:	d002      	beq.n	8008958 <__swsetup_r+0x48>
 8008952:	4628      	mov	r0, r5
 8008954:	f7ff f988 	bl	8007c68 <_free_r>
 8008958:	2300      	movs	r3, #0
 800895a:	6363      	str	r3, [r4, #52]	; 0x34
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008962:	81a3      	strh	r3, [r4, #12]
 8008964:	2300      	movs	r3, #0
 8008966:	6063      	str	r3, [r4, #4]
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	6023      	str	r3, [r4, #0]
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f043 0308 	orr.w	r3, r3, #8
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	6923      	ldr	r3, [r4, #16]
 8008976:	b94b      	cbnz	r3, 800898c <__swsetup_r+0x7c>
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800897e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008982:	d003      	beq.n	800898c <__swsetup_r+0x7c>
 8008984:	4621      	mov	r1, r4
 8008986:	4628      	mov	r0, r5
 8008988:	f000 f883 	bl	8008a92 <__smakebuf_r>
 800898c:	89a0      	ldrh	r0, [r4, #12]
 800898e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008992:	f010 0301 	ands.w	r3, r0, #1
 8008996:	d00a      	beq.n	80089ae <__swsetup_r+0x9e>
 8008998:	2300      	movs	r3, #0
 800899a:	60a3      	str	r3, [r4, #8]
 800899c:	6963      	ldr	r3, [r4, #20]
 800899e:	425b      	negs	r3, r3
 80089a0:	61a3      	str	r3, [r4, #24]
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	b943      	cbnz	r3, 80089b8 <__swsetup_r+0xa8>
 80089a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089aa:	d1c4      	bne.n	8008936 <__swsetup_r+0x26>
 80089ac:	bd38      	pop	{r3, r4, r5, pc}
 80089ae:	0781      	lsls	r1, r0, #30
 80089b0:	bf58      	it	pl
 80089b2:	6963      	ldrpl	r3, [r4, #20]
 80089b4:	60a3      	str	r3, [r4, #8]
 80089b6:	e7f4      	b.n	80089a2 <__swsetup_r+0x92>
 80089b8:	2000      	movs	r0, #0
 80089ba:	e7f7      	b.n	80089ac <__swsetup_r+0x9c>
 80089bc:	20000068 	.word	0x20000068

080089c0 <_raise_r>:
 80089c0:	291f      	cmp	r1, #31
 80089c2:	b538      	push	{r3, r4, r5, lr}
 80089c4:	4604      	mov	r4, r0
 80089c6:	460d      	mov	r5, r1
 80089c8:	d904      	bls.n	80089d4 <_raise_r+0x14>
 80089ca:	2316      	movs	r3, #22
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	f04f 30ff 	mov.w	r0, #4294967295
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089d6:	b112      	cbz	r2, 80089de <_raise_r+0x1e>
 80089d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089dc:	b94b      	cbnz	r3, 80089f2 <_raise_r+0x32>
 80089de:	4620      	mov	r0, r4
 80089e0:	f000 f830 	bl	8008a44 <_getpid_r>
 80089e4:	462a      	mov	r2, r5
 80089e6:	4601      	mov	r1, r0
 80089e8:	4620      	mov	r0, r4
 80089ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ee:	f000 b817 	b.w	8008a20 <_kill_r>
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d00a      	beq.n	8008a0c <_raise_r+0x4c>
 80089f6:	1c59      	adds	r1, r3, #1
 80089f8:	d103      	bne.n	8008a02 <_raise_r+0x42>
 80089fa:	2316      	movs	r3, #22
 80089fc:	6003      	str	r3, [r0, #0]
 80089fe:	2001      	movs	r0, #1
 8008a00:	e7e7      	b.n	80089d2 <_raise_r+0x12>
 8008a02:	2400      	movs	r4, #0
 8008a04:	4628      	mov	r0, r5
 8008a06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a0a:	4798      	blx	r3
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	e7e0      	b.n	80089d2 <_raise_r+0x12>

08008a10 <raise>:
 8008a10:	4b02      	ldr	r3, [pc, #8]	; (8008a1c <raise+0xc>)
 8008a12:	4601      	mov	r1, r0
 8008a14:	6818      	ldr	r0, [r3, #0]
 8008a16:	f7ff bfd3 	b.w	80089c0 <_raise_r>
 8008a1a:	bf00      	nop
 8008a1c:	20000068 	.word	0x20000068

08008a20 <_kill_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	2300      	movs	r3, #0
 8008a24:	4d06      	ldr	r5, [pc, #24]	; (8008a40 <_kill_r+0x20>)
 8008a26:	4604      	mov	r4, r0
 8008a28:	4608      	mov	r0, r1
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	602b      	str	r3, [r5, #0]
 8008a2e:	f7f9 f816 	bl	8001a5e <_kill>
 8008a32:	1c43      	adds	r3, r0, #1
 8008a34:	d102      	bne.n	8008a3c <_kill_r+0x1c>
 8008a36:	682b      	ldr	r3, [r5, #0]
 8008a38:	b103      	cbz	r3, 8008a3c <_kill_r+0x1c>
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	bd38      	pop	{r3, r4, r5, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000520 	.word	0x20000520

08008a44 <_getpid_r>:
 8008a44:	f7f9 b804 	b.w	8001a50 <_getpid>

08008a48 <__swhatbuf_r>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a50:	4615      	mov	r5, r2
 8008a52:	2900      	cmp	r1, #0
 8008a54:	461e      	mov	r6, r3
 8008a56:	b096      	sub	sp, #88	; 0x58
 8008a58:	da0c      	bge.n	8008a74 <__swhatbuf_r+0x2c>
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a62:	bf0c      	ite	eq
 8008a64:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a68:	2340      	movne	r3, #64	; 0x40
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	6031      	str	r1, [r6, #0]
 8008a6e:	602b      	str	r3, [r5, #0]
 8008a70:	b016      	add	sp, #88	; 0x58
 8008a72:	bd70      	pop	{r4, r5, r6, pc}
 8008a74:	466a      	mov	r2, sp
 8008a76:	f000 f849 	bl	8008b0c <_fstat_r>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	dbed      	blt.n	8008a5a <__swhatbuf_r+0x12>
 8008a7e:	9901      	ldr	r1, [sp, #4]
 8008a80:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a84:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a88:	4259      	negs	r1, r3
 8008a8a:	4159      	adcs	r1, r3
 8008a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a90:	e7eb      	b.n	8008a6a <__swhatbuf_r+0x22>

08008a92 <__smakebuf_r>:
 8008a92:	898b      	ldrh	r3, [r1, #12]
 8008a94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a96:	079d      	lsls	r5, r3, #30
 8008a98:	4606      	mov	r6, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	d507      	bpl.n	8008aae <__smakebuf_r+0x1c>
 8008a9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	6123      	str	r3, [r4, #16]
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	6163      	str	r3, [r4, #20]
 8008aaa:	b002      	add	sp, #8
 8008aac:	bd70      	pop	{r4, r5, r6, pc}
 8008aae:	466a      	mov	r2, sp
 8008ab0:	ab01      	add	r3, sp, #4
 8008ab2:	f7ff ffc9 	bl	8008a48 <__swhatbuf_r>
 8008ab6:	9900      	ldr	r1, [sp, #0]
 8008ab8:	4605      	mov	r5, r0
 8008aba:	4630      	mov	r0, r6
 8008abc:	f7fd fbca 	bl	8006254 <_malloc_r>
 8008ac0:	b948      	cbnz	r0, 8008ad6 <__smakebuf_r+0x44>
 8008ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac6:	059a      	lsls	r2, r3, #22
 8008ac8:	d4ef      	bmi.n	8008aaa <__smakebuf_r+0x18>
 8008aca:	f023 0303 	bic.w	r3, r3, #3
 8008ace:	f043 0302 	orr.w	r3, r3, #2
 8008ad2:	81a3      	strh	r3, [r4, #12]
 8008ad4:	e7e3      	b.n	8008a9e <__smakebuf_r+0xc>
 8008ad6:	89a3      	ldrh	r3, [r4, #12]
 8008ad8:	6020      	str	r0, [r4, #0]
 8008ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	9b00      	ldr	r3, [sp, #0]
 8008ae2:	6120      	str	r0, [r4, #16]
 8008ae4:	6163      	str	r3, [r4, #20]
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	b15b      	cbz	r3, 8008b02 <__smakebuf_r+0x70>
 8008aea:	4630      	mov	r0, r6
 8008aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008af0:	f000 f81e 	bl	8008b30 <_isatty_r>
 8008af4:	b128      	cbz	r0, 8008b02 <__smakebuf_r+0x70>
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	f023 0303 	bic.w	r3, r3, #3
 8008afc:	f043 0301 	orr.w	r3, r3, #1
 8008b00:	81a3      	strh	r3, [r4, #12]
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	431d      	orrs	r5, r3
 8008b06:	81a5      	strh	r5, [r4, #12]
 8008b08:	e7cf      	b.n	8008aaa <__smakebuf_r+0x18>
	...

08008b0c <_fstat_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	2300      	movs	r3, #0
 8008b10:	4d06      	ldr	r5, [pc, #24]	; (8008b2c <_fstat_r+0x20>)
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	4611      	mov	r1, r2
 8008b18:	602b      	str	r3, [r5, #0]
 8008b1a:	f7f8 fffe 	bl	8001b1a <_fstat>
 8008b1e:	1c43      	adds	r3, r0, #1
 8008b20:	d102      	bne.n	8008b28 <_fstat_r+0x1c>
 8008b22:	682b      	ldr	r3, [r5, #0]
 8008b24:	b103      	cbz	r3, 8008b28 <_fstat_r+0x1c>
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	bd38      	pop	{r3, r4, r5, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000520 	.word	0x20000520

08008b30 <_isatty_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	2300      	movs	r3, #0
 8008b34:	4d05      	ldr	r5, [pc, #20]	; (8008b4c <_isatty_r+0x1c>)
 8008b36:	4604      	mov	r4, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	602b      	str	r3, [r5, #0]
 8008b3c:	f7f8 fffc 	bl	8001b38 <_isatty>
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d102      	bne.n	8008b4a <_isatty_r+0x1a>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	b103      	cbz	r3, 8008b4a <_isatty_r+0x1a>
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	bd38      	pop	{r3, r4, r5, pc}
 8008b4c:	20000520 	.word	0x20000520

08008b50 <sinf>:
 8008b50:	b507      	push	{r0, r1, r2, lr}
 8008b52:	4a1b      	ldr	r2, [pc, #108]	; (8008bc0 <sinf+0x70>)
 8008b54:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	dc06      	bgt.n	8008b6c <sinf+0x1c>
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2100      	movs	r1, #0
 8008b62:	b003      	add	sp, #12
 8008b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b68:	f000 b8f2 	b.w	8008d50 <__kernel_sinf>
 8008b6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008b70:	db04      	blt.n	8008b7c <sinf+0x2c>
 8008b72:	f7f7 fffd 	bl	8000b70 <__aeabi_fsub>
 8008b76:	b003      	add	sp, #12
 8008b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b7c:	4669      	mov	r1, sp
 8008b7e:	f000 f95d 	bl	8008e3c <__ieee754_rem_pio2f>
 8008b82:	f000 0003 	and.w	r0, r0, #3
 8008b86:	2801      	cmp	r0, #1
 8008b88:	d008      	beq.n	8008b9c <sinf+0x4c>
 8008b8a:	2802      	cmp	r0, #2
 8008b8c:	d00b      	beq.n	8008ba6 <sinf+0x56>
 8008b8e:	b990      	cbnz	r0, 8008bb6 <sinf+0x66>
 8008b90:	2201      	movs	r2, #1
 8008b92:	9901      	ldr	r1, [sp, #4]
 8008b94:	9800      	ldr	r0, [sp, #0]
 8008b96:	f000 f8db 	bl	8008d50 <__kernel_sinf>
 8008b9a:	e7ec      	b.n	8008b76 <sinf+0x26>
 8008b9c:	9901      	ldr	r1, [sp, #4]
 8008b9e:	9800      	ldr	r0, [sp, #0]
 8008ba0:	f000 f856 	bl	8008c50 <__kernel_cosf>
 8008ba4:	e7e7      	b.n	8008b76 <sinf+0x26>
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	9901      	ldr	r1, [sp, #4]
 8008baa:	9800      	ldr	r0, [sp, #0]
 8008bac:	f000 f8d0 	bl	8008d50 <__kernel_sinf>
 8008bb0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008bb4:	e7df      	b.n	8008b76 <sinf+0x26>
 8008bb6:	9901      	ldr	r1, [sp, #4]
 8008bb8:	9800      	ldr	r0, [sp, #0]
 8008bba:	f000 f849 	bl	8008c50 <__kernel_cosf>
 8008bbe:	e7f7      	b.n	8008bb0 <sinf+0x60>
 8008bc0:	3f490fd8 	.word	0x3f490fd8

08008bc4 <round>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008bca:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 8008bce:	2a13      	cmp	r2, #19
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	dc18      	bgt.n	8008c0a <round+0x46>
 8008bd8:	2a00      	cmp	r2, #0
 8008bda:	da09      	bge.n	8008bf0 <round+0x2c>
 8008bdc:	3201      	adds	r2, #1
 8008bde:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008be2:	d103      	bne.n	8008bec <round+0x28>
 8008be4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008be8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008bec:	2200      	movs	r2, #0
 8008bee:	e029      	b.n	8008c44 <round+0x80>
 8008bf0:	4816      	ldr	r0, [pc, #88]	; (8008c4c <round+0x88>)
 8008bf2:	4110      	asrs	r0, r2
 8008bf4:	4001      	ands	r1, r0
 8008bf6:	4329      	orrs	r1, r5
 8008bf8:	d011      	beq.n	8008c1e <round+0x5a>
 8008bfa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008bfe:	fa41 f202 	asr.w	r2, r1, r2
 8008c02:	4413      	add	r3, r2
 8008c04:	ea23 0300 	bic.w	r3, r3, r0
 8008c08:	e7f0      	b.n	8008bec <round+0x28>
 8008c0a:	2a33      	cmp	r2, #51	; 0x33
 8008c0c:	dd0a      	ble.n	8008c24 <round+0x60>
 8008c0e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008c12:	d104      	bne.n	8008c1e <round+0x5a>
 8008c14:	4602      	mov	r2, r0
 8008c16:	f7f7 faa9 	bl	800016c <__adddf3>
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	4628      	mov	r0, r5
 8008c20:	4621      	mov	r1, r4
 8008c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008c2c:	40f8      	lsrs	r0, r7
 8008c2e:	4228      	tst	r0, r5
 8008c30:	d0f5      	beq.n	8008c1e <round+0x5a>
 8008c32:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8008c36:	2201      	movs	r2, #1
 8008c38:	408a      	lsls	r2, r1
 8008c3a:	1952      	adds	r2, r2, r5
 8008c3c:	bf28      	it	cs
 8008c3e:	3301      	addcs	r3, #1
 8008c40:	ea22 0200 	bic.w	r2, r2, r0
 8008c44:	4619      	mov	r1, r3
 8008c46:	4610      	mov	r0, r2
 8008c48:	e7e7      	b.n	8008c1a <round+0x56>
 8008c4a:	bf00      	nop
 8008c4c:	000fffff 	.word	0x000fffff

08008c50 <__kernel_cosf>:
 8008c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c54:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8008c58:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	4688      	mov	r8, r1
 8008c60:	da03      	bge.n	8008c6a <__kernel_cosf+0x1a>
 8008c62:	f7f8 fa55 	bl	8001110 <__aeabi_f2iz>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d05c      	beq.n	8008d24 <__kernel_cosf+0xd4>
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7f8 f889 	bl	8000d84 <__aeabi_fmul>
 8008c72:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008c76:	4605      	mov	r5, r0
 8008c78:	f7f8 f884 	bl	8000d84 <__aeabi_fmul>
 8008c7c:	492b      	ldr	r1, [pc, #172]	; (8008d2c <__kernel_cosf+0xdc>)
 8008c7e:	4607      	mov	r7, r0
 8008c80:	4628      	mov	r0, r5
 8008c82:	f7f8 f87f 	bl	8000d84 <__aeabi_fmul>
 8008c86:	492a      	ldr	r1, [pc, #168]	; (8008d30 <__kernel_cosf+0xe0>)
 8008c88:	f7f7 ff74 	bl	8000b74 <__addsf3>
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	f7f8 f879 	bl	8000d84 <__aeabi_fmul>
 8008c92:	4928      	ldr	r1, [pc, #160]	; (8008d34 <__kernel_cosf+0xe4>)
 8008c94:	f7f7 ff6c 	bl	8000b70 <__aeabi_fsub>
 8008c98:	4629      	mov	r1, r5
 8008c9a:	f7f8 f873 	bl	8000d84 <__aeabi_fmul>
 8008c9e:	4926      	ldr	r1, [pc, #152]	; (8008d38 <__kernel_cosf+0xe8>)
 8008ca0:	f7f7 ff68 	bl	8000b74 <__addsf3>
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	f7f8 f86d 	bl	8000d84 <__aeabi_fmul>
 8008caa:	4924      	ldr	r1, [pc, #144]	; (8008d3c <__kernel_cosf+0xec>)
 8008cac:	f7f7 ff60 	bl	8000b70 <__aeabi_fsub>
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f7f8 f867 	bl	8000d84 <__aeabi_fmul>
 8008cb6:	4922      	ldr	r1, [pc, #136]	; (8008d40 <__kernel_cosf+0xf0>)
 8008cb8:	f7f7 ff5c 	bl	8000b74 <__addsf3>
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	f7f8 f861 	bl	8000d84 <__aeabi_fmul>
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	f7f8 f85e 	bl	8000d84 <__aeabi_fmul>
 8008cc8:	4641      	mov	r1, r8
 8008cca:	4605      	mov	r5, r0
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f7f8 f859 	bl	8000d84 <__aeabi_fmul>
 8008cd2:	4601      	mov	r1, r0
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f7f7 ff4b 	bl	8000b70 <__aeabi_fsub>
 8008cda:	4b1a      	ldr	r3, [pc, #104]	; (8008d44 <__kernel_cosf+0xf4>)
 8008cdc:	4605      	mov	r5, r0
 8008cde:	429c      	cmp	r4, r3
 8008ce0:	dc0a      	bgt.n	8008cf8 <__kernel_cosf+0xa8>
 8008ce2:	4601      	mov	r1, r0
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	f7f7 ff43 	bl	8000b70 <__aeabi_fsub>
 8008cea:	4601      	mov	r1, r0
 8008cec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008cf0:	f7f7 ff3e 	bl	8000b70 <__aeabi_fsub>
 8008cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf8:	4b13      	ldr	r3, [pc, #76]	; (8008d48 <__kernel_cosf+0xf8>)
 8008cfa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008cfe:	429c      	cmp	r4, r3
 8008d00:	bfcc      	ite	gt
 8008d02:	4c12      	ldrgt	r4, [pc, #72]	; (8008d4c <__kernel_cosf+0xfc>)
 8008d04:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8008d08:	4621      	mov	r1, r4
 8008d0a:	f7f7 ff31 	bl	8000b70 <__aeabi_fsub>
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4606      	mov	r6, r0
 8008d12:	4638      	mov	r0, r7
 8008d14:	f7f7 ff2c 	bl	8000b70 <__aeabi_fsub>
 8008d18:	4629      	mov	r1, r5
 8008d1a:	f7f7 ff29 	bl	8000b70 <__aeabi_fsub>
 8008d1e:	4601      	mov	r1, r0
 8008d20:	4630      	mov	r0, r6
 8008d22:	e7e5      	b.n	8008cf0 <__kernel_cosf+0xa0>
 8008d24:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008d28:	e7e4      	b.n	8008cf4 <__kernel_cosf+0xa4>
 8008d2a:	bf00      	nop
 8008d2c:	ad47d74e 	.word	0xad47d74e
 8008d30:	310f74f6 	.word	0x310f74f6
 8008d34:	3493f27c 	.word	0x3493f27c
 8008d38:	37d00d01 	.word	0x37d00d01
 8008d3c:	3ab60b61 	.word	0x3ab60b61
 8008d40:	3d2aaaab 	.word	0x3d2aaaab
 8008d44:	3e999999 	.word	0x3e999999
 8008d48:	3f480000 	.word	0x3f480000
 8008d4c:	3e900000 	.word	0x3e900000

08008d50 <__kernel_sinf>:
 8008d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d54:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008d58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	460f      	mov	r7, r1
 8008d60:	4691      	mov	r9, r2
 8008d62:	da03      	bge.n	8008d6c <__kernel_sinf+0x1c>
 8008d64:	f7f8 f9d4 	bl	8001110 <__aeabi_f2iz>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d035      	beq.n	8008dd8 <__kernel_sinf+0x88>
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f7f8 f808 	bl	8000d84 <__aeabi_fmul>
 8008d74:	4605      	mov	r5, r0
 8008d76:	4601      	mov	r1, r0
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f7f8 f803 	bl	8000d84 <__aeabi_fmul>
 8008d7e:	4929      	ldr	r1, [pc, #164]	; (8008e24 <__kernel_sinf+0xd4>)
 8008d80:	4606      	mov	r6, r0
 8008d82:	4628      	mov	r0, r5
 8008d84:	f7f7 fffe 	bl	8000d84 <__aeabi_fmul>
 8008d88:	4927      	ldr	r1, [pc, #156]	; (8008e28 <__kernel_sinf+0xd8>)
 8008d8a:	f7f7 fef1 	bl	8000b70 <__aeabi_fsub>
 8008d8e:	4629      	mov	r1, r5
 8008d90:	f7f7 fff8 	bl	8000d84 <__aeabi_fmul>
 8008d94:	4925      	ldr	r1, [pc, #148]	; (8008e2c <__kernel_sinf+0xdc>)
 8008d96:	f7f7 feed 	bl	8000b74 <__addsf3>
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	f7f7 fff2 	bl	8000d84 <__aeabi_fmul>
 8008da0:	4923      	ldr	r1, [pc, #140]	; (8008e30 <__kernel_sinf+0xe0>)
 8008da2:	f7f7 fee5 	bl	8000b70 <__aeabi_fsub>
 8008da6:	4629      	mov	r1, r5
 8008da8:	f7f7 ffec 	bl	8000d84 <__aeabi_fmul>
 8008dac:	4921      	ldr	r1, [pc, #132]	; (8008e34 <__kernel_sinf+0xe4>)
 8008dae:	f7f7 fee1 	bl	8000b74 <__addsf3>
 8008db2:	4680      	mov	r8, r0
 8008db4:	f1b9 0f00 	cmp.w	r9, #0
 8008db8:	d111      	bne.n	8008dde <__kernel_sinf+0x8e>
 8008dba:	4601      	mov	r1, r0
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	f7f7 ffe1 	bl	8000d84 <__aeabi_fmul>
 8008dc2:	491d      	ldr	r1, [pc, #116]	; (8008e38 <__kernel_sinf+0xe8>)
 8008dc4:	f7f7 fed4 	bl	8000b70 <__aeabi_fsub>
 8008dc8:	4631      	mov	r1, r6
 8008dca:	f7f7 ffdb 	bl	8000d84 <__aeabi_fmul>
 8008dce:	4601      	mov	r1, r0
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f7f7 fecf 	bl	8000b74 <__addsf3>
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4620      	mov	r0, r4
 8008dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dde:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008de2:	4638      	mov	r0, r7
 8008de4:	f7f7 ffce 	bl	8000d84 <__aeabi_fmul>
 8008de8:	4641      	mov	r1, r8
 8008dea:	4681      	mov	r9, r0
 8008dec:	4630      	mov	r0, r6
 8008dee:	f7f7 ffc9 	bl	8000d84 <__aeabi_fmul>
 8008df2:	4601      	mov	r1, r0
 8008df4:	4648      	mov	r0, r9
 8008df6:	f7f7 febb 	bl	8000b70 <__aeabi_fsub>
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	f7f7 ffc2 	bl	8000d84 <__aeabi_fmul>
 8008e00:	4639      	mov	r1, r7
 8008e02:	f7f7 feb5 	bl	8000b70 <__aeabi_fsub>
 8008e06:	490c      	ldr	r1, [pc, #48]	; (8008e38 <__kernel_sinf+0xe8>)
 8008e08:	4605      	mov	r5, r0
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f7f7 ffba 	bl	8000d84 <__aeabi_fmul>
 8008e10:	4601      	mov	r1, r0
 8008e12:	4628      	mov	r0, r5
 8008e14:	f7f7 feae 	bl	8000b74 <__addsf3>
 8008e18:	4601      	mov	r1, r0
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f7f7 fea8 	bl	8000b70 <__aeabi_fsub>
 8008e20:	e7d9      	b.n	8008dd6 <__kernel_sinf+0x86>
 8008e22:	bf00      	nop
 8008e24:	2f2ec9d3 	.word	0x2f2ec9d3
 8008e28:	32d72f34 	.word	0x32d72f34
 8008e2c:	3638ef1b 	.word	0x3638ef1b
 8008e30:	39500d01 	.word	0x39500d01
 8008e34:	3c088889 	.word	0x3c088889
 8008e38:	3e2aaaab 	.word	0x3e2aaaab

08008e3c <__ieee754_rem_pio2f>:
 8008e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e40:	4aa0      	ldr	r2, [pc, #640]	; (80090c4 <__ieee754_rem_pio2f+0x288>)
 8008e42:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8008e46:	4296      	cmp	r6, r2
 8008e48:	460c      	mov	r4, r1
 8008e4a:	4682      	mov	sl, r0
 8008e4c:	b087      	sub	sp, #28
 8008e4e:	dc04      	bgt.n	8008e5a <__ieee754_rem_pio2f+0x1e>
 8008e50:	2300      	movs	r3, #0
 8008e52:	6008      	str	r0, [r1, #0]
 8008e54:	604b      	str	r3, [r1, #4]
 8008e56:	2500      	movs	r5, #0
 8008e58:	e01a      	b.n	8008e90 <__ieee754_rem_pio2f+0x54>
 8008e5a:	4a9b      	ldr	r2, [pc, #620]	; (80090c8 <__ieee754_rem_pio2f+0x28c>)
 8008e5c:	4296      	cmp	r6, r2
 8008e5e:	dc4b      	bgt.n	8008ef8 <__ieee754_rem_pio2f+0xbc>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	499a      	ldr	r1, [pc, #616]	; (80090cc <__ieee754_rem_pio2f+0x290>)
 8008e64:	4f9a      	ldr	r7, [pc, #616]	; (80090d0 <__ieee754_rem_pio2f+0x294>)
 8008e66:	f026 060f 	bic.w	r6, r6, #15
 8008e6a:	dd23      	ble.n	8008eb4 <__ieee754_rem_pio2f+0x78>
 8008e6c:	f7f7 fe80 	bl	8000b70 <__aeabi_fsub>
 8008e70:	42be      	cmp	r6, r7
 8008e72:	4605      	mov	r5, r0
 8008e74:	d010      	beq.n	8008e98 <__ieee754_rem_pio2f+0x5c>
 8008e76:	4997      	ldr	r1, [pc, #604]	; (80090d4 <__ieee754_rem_pio2f+0x298>)
 8008e78:	f7f7 fe7a 	bl	8000b70 <__aeabi_fsub>
 8008e7c:	4601      	mov	r1, r0
 8008e7e:	6020      	str	r0, [r4, #0]
 8008e80:	4628      	mov	r0, r5
 8008e82:	f7f7 fe75 	bl	8000b70 <__aeabi_fsub>
 8008e86:	4993      	ldr	r1, [pc, #588]	; (80090d4 <__ieee754_rem_pio2f+0x298>)
 8008e88:	f7f7 fe72 	bl	8000b70 <__aeabi_fsub>
 8008e8c:	2501      	movs	r5, #1
 8008e8e:	6060      	str	r0, [r4, #4]
 8008e90:	4628      	mov	r0, r5
 8008e92:	b007      	add	sp, #28
 8008e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e98:	498f      	ldr	r1, [pc, #572]	; (80090d8 <__ieee754_rem_pio2f+0x29c>)
 8008e9a:	f7f7 fe69 	bl	8000b70 <__aeabi_fsub>
 8008e9e:	498f      	ldr	r1, [pc, #572]	; (80090dc <__ieee754_rem_pio2f+0x2a0>)
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	f7f7 fe65 	bl	8000b70 <__aeabi_fsub>
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	6020      	str	r0, [r4, #0]
 8008eaa:	4628      	mov	r0, r5
 8008eac:	f7f7 fe60 	bl	8000b70 <__aeabi_fsub>
 8008eb0:	498a      	ldr	r1, [pc, #552]	; (80090dc <__ieee754_rem_pio2f+0x2a0>)
 8008eb2:	e7e9      	b.n	8008e88 <__ieee754_rem_pio2f+0x4c>
 8008eb4:	f7f7 fe5e 	bl	8000b74 <__addsf3>
 8008eb8:	42be      	cmp	r6, r7
 8008eba:	4605      	mov	r5, r0
 8008ebc:	d00e      	beq.n	8008edc <__ieee754_rem_pio2f+0xa0>
 8008ebe:	4985      	ldr	r1, [pc, #532]	; (80090d4 <__ieee754_rem_pio2f+0x298>)
 8008ec0:	f7f7 fe58 	bl	8000b74 <__addsf3>
 8008ec4:	4601      	mov	r1, r0
 8008ec6:	6020      	str	r0, [r4, #0]
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f7f7 fe51 	bl	8000b70 <__aeabi_fsub>
 8008ece:	4981      	ldr	r1, [pc, #516]	; (80090d4 <__ieee754_rem_pio2f+0x298>)
 8008ed0:	f7f7 fe50 	bl	8000b74 <__addsf3>
 8008ed4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ed8:	6060      	str	r0, [r4, #4]
 8008eda:	e7d9      	b.n	8008e90 <__ieee754_rem_pio2f+0x54>
 8008edc:	497e      	ldr	r1, [pc, #504]	; (80090d8 <__ieee754_rem_pio2f+0x29c>)
 8008ede:	f7f7 fe49 	bl	8000b74 <__addsf3>
 8008ee2:	497e      	ldr	r1, [pc, #504]	; (80090dc <__ieee754_rem_pio2f+0x2a0>)
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	f7f7 fe45 	bl	8000b74 <__addsf3>
 8008eea:	4601      	mov	r1, r0
 8008eec:	6020      	str	r0, [r4, #0]
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f7f7 fe3e 	bl	8000b70 <__aeabi_fsub>
 8008ef4:	4979      	ldr	r1, [pc, #484]	; (80090dc <__ieee754_rem_pio2f+0x2a0>)
 8008ef6:	e7eb      	b.n	8008ed0 <__ieee754_rem_pio2f+0x94>
 8008ef8:	4a79      	ldr	r2, [pc, #484]	; (80090e0 <__ieee754_rem_pio2f+0x2a4>)
 8008efa:	4296      	cmp	r6, r2
 8008efc:	f300 8091 	bgt.w	8009022 <__ieee754_rem_pio2f+0x1e6>
 8008f00:	f000 f8fa 	bl	80090f8 <fabsf>
 8008f04:	4977      	ldr	r1, [pc, #476]	; (80090e4 <__ieee754_rem_pio2f+0x2a8>)
 8008f06:	4607      	mov	r7, r0
 8008f08:	f7f7 ff3c 	bl	8000d84 <__aeabi_fmul>
 8008f0c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008f10:	f7f7 fe30 	bl	8000b74 <__addsf3>
 8008f14:	f7f8 f8fc 	bl	8001110 <__aeabi_f2iz>
 8008f18:	4605      	mov	r5, r0
 8008f1a:	f7f7 fedf 	bl	8000cdc <__aeabi_i2f>
 8008f1e:	496b      	ldr	r1, [pc, #428]	; (80090cc <__ieee754_rem_pio2f+0x290>)
 8008f20:	4681      	mov	r9, r0
 8008f22:	f7f7 ff2f 	bl	8000d84 <__aeabi_fmul>
 8008f26:	4601      	mov	r1, r0
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7f7 fe21 	bl	8000b70 <__aeabi_fsub>
 8008f2e:	4969      	ldr	r1, [pc, #420]	; (80090d4 <__ieee754_rem_pio2f+0x298>)
 8008f30:	4680      	mov	r8, r0
 8008f32:	4648      	mov	r0, r9
 8008f34:	f7f7 ff26 	bl	8000d84 <__aeabi_fmul>
 8008f38:	2d1f      	cmp	r5, #31
 8008f3a:	4607      	mov	r7, r0
 8008f3c:	dc0c      	bgt.n	8008f58 <__ieee754_rem_pio2f+0x11c>
 8008f3e:	4a6a      	ldr	r2, [pc, #424]	; (80090e8 <__ieee754_rem_pio2f+0x2ac>)
 8008f40:	1e69      	subs	r1, r5, #1
 8008f42:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008f46:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d004      	beq.n	8008f58 <__ieee754_rem_pio2f+0x11c>
 8008f4e:	4639      	mov	r1, r7
 8008f50:	4640      	mov	r0, r8
 8008f52:	f7f7 fe0d 	bl	8000b70 <__aeabi_fsub>
 8008f56:	e00b      	b.n	8008f70 <__ieee754_rem_pio2f+0x134>
 8008f58:	4639      	mov	r1, r7
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	f7f7 fe08 	bl	8000b70 <__aeabi_fsub>
 8008f60:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008f64:	ebc3 53d6 	rsb	r3, r3, r6, lsr #23
 8008f68:	2b08      	cmp	r3, #8
 8008f6a:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8008f6e:	dc01      	bgt.n	8008f74 <__ieee754_rem_pio2f+0x138>
 8008f70:	6020      	str	r0, [r4, #0]
 8008f72:	e026      	b.n	8008fc2 <__ieee754_rem_pio2f+0x186>
 8008f74:	4958      	ldr	r1, [pc, #352]	; (80090d8 <__ieee754_rem_pio2f+0x29c>)
 8008f76:	4648      	mov	r0, r9
 8008f78:	f7f7 ff04 	bl	8000d84 <__aeabi_fmul>
 8008f7c:	4607      	mov	r7, r0
 8008f7e:	4601      	mov	r1, r0
 8008f80:	4640      	mov	r0, r8
 8008f82:	f7f7 fdf5 	bl	8000b70 <__aeabi_fsub>
 8008f86:	4601      	mov	r1, r0
 8008f88:	4606      	mov	r6, r0
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	f7f7 fdf0 	bl	8000b70 <__aeabi_fsub>
 8008f90:	4639      	mov	r1, r7
 8008f92:	f7f7 fded 	bl	8000b70 <__aeabi_fsub>
 8008f96:	4607      	mov	r7, r0
 8008f98:	4950      	ldr	r1, [pc, #320]	; (80090dc <__ieee754_rem_pio2f+0x2a0>)
 8008f9a:	4648      	mov	r0, r9
 8008f9c:	f7f7 fef2 	bl	8000d84 <__aeabi_fmul>
 8008fa0:	4639      	mov	r1, r7
 8008fa2:	f7f7 fde5 	bl	8000b70 <__aeabi_fsub>
 8008fa6:	4601      	mov	r1, r0
 8008fa8:	4607      	mov	r7, r0
 8008faa:	4630      	mov	r0, r6
 8008fac:	f7f7 fde0 	bl	8000b70 <__aeabi_fsub>
 8008fb0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008fb4:	ebab 0b03 	sub.w	fp, fp, r3
 8008fb8:	f1bb 0f19 	cmp.w	fp, #25
 8008fbc:	dc16      	bgt.n	8008fec <__ieee754_rem_pio2f+0x1b0>
 8008fbe:	46b0      	mov	r8, r6
 8008fc0:	6020      	str	r0, [r4, #0]
 8008fc2:	6826      	ldr	r6, [r4, #0]
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	f7f7 fdd2 	bl	8000b70 <__aeabi_fsub>
 8008fcc:	4639      	mov	r1, r7
 8008fce:	f7f7 fdcf 	bl	8000b70 <__aeabi_fsub>
 8008fd2:	f1ba 0f00 	cmp.w	sl, #0
 8008fd6:	6060      	str	r0, [r4, #4]
 8008fd8:	f6bf af5a 	bge.w	8008e90 <__ieee754_rem_pio2f+0x54>
 8008fdc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8008fe0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008fe4:	6026      	str	r6, [r4, #0]
 8008fe6:	6060      	str	r0, [r4, #4]
 8008fe8:	426d      	negs	r5, r5
 8008fea:	e751      	b.n	8008e90 <__ieee754_rem_pio2f+0x54>
 8008fec:	493f      	ldr	r1, [pc, #252]	; (80090ec <__ieee754_rem_pio2f+0x2b0>)
 8008fee:	4648      	mov	r0, r9
 8008ff0:	f7f7 fec8 	bl	8000d84 <__aeabi_fmul>
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7f7 fdb9 	bl	8000b70 <__aeabi_fsub>
 8008ffe:	4601      	mov	r1, r0
 8009000:	4680      	mov	r8, r0
 8009002:	4630      	mov	r0, r6
 8009004:	f7f7 fdb4 	bl	8000b70 <__aeabi_fsub>
 8009008:	4639      	mov	r1, r7
 800900a:	f7f7 fdb1 	bl	8000b70 <__aeabi_fsub>
 800900e:	4606      	mov	r6, r0
 8009010:	4937      	ldr	r1, [pc, #220]	; (80090f0 <__ieee754_rem_pio2f+0x2b4>)
 8009012:	4648      	mov	r0, r9
 8009014:	f7f7 feb6 	bl	8000d84 <__aeabi_fmul>
 8009018:	4631      	mov	r1, r6
 800901a:	f7f7 fda9 	bl	8000b70 <__aeabi_fsub>
 800901e:	4607      	mov	r7, r0
 8009020:	e795      	b.n	8008f4e <__ieee754_rem_pio2f+0x112>
 8009022:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009026:	db05      	blt.n	8009034 <__ieee754_rem_pio2f+0x1f8>
 8009028:	4601      	mov	r1, r0
 800902a:	f7f7 fda1 	bl	8000b70 <__aeabi_fsub>
 800902e:	6060      	str	r0, [r4, #4]
 8009030:	6020      	str	r0, [r4, #0]
 8009032:	e710      	b.n	8008e56 <__ieee754_rem_pio2f+0x1a>
 8009034:	15f7      	asrs	r7, r6, #23
 8009036:	3f86      	subs	r7, #134	; 0x86
 8009038:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800903c:	4630      	mov	r0, r6
 800903e:	f7f8 f867 	bl	8001110 <__aeabi_f2iz>
 8009042:	f7f7 fe4b 	bl	8000cdc <__aeabi_i2f>
 8009046:	4601      	mov	r1, r0
 8009048:	9003      	str	r0, [sp, #12]
 800904a:	4630      	mov	r0, r6
 800904c:	f7f7 fd90 	bl	8000b70 <__aeabi_fsub>
 8009050:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009054:	f7f7 fe96 	bl	8000d84 <__aeabi_fmul>
 8009058:	4606      	mov	r6, r0
 800905a:	f7f8 f859 	bl	8001110 <__aeabi_f2iz>
 800905e:	f7f7 fe3d 	bl	8000cdc <__aeabi_i2f>
 8009062:	4601      	mov	r1, r0
 8009064:	9004      	str	r0, [sp, #16]
 8009066:	4605      	mov	r5, r0
 8009068:	4630      	mov	r0, r6
 800906a:	f7f7 fd81 	bl	8000b70 <__aeabi_fsub>
 800906e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009072:	f7f7 fe87 	bl	8000d84 <__aeabi_fmul>
 8009076:	2100      	movs	r1, #0
 8009078:	9005      	str	r0, [sp, #20]
 800907a:	f7f8 f817 	bl	80010ac <__aeabi_fcmpeq>
 800907e:	b1f0      	cbz	r0, 80090be <__ieee754_rem_pio2f+0x282>
 8009080:	2100      	movs	r1, #0
 8009082:	4628      	mov	r0, r5
 8009084:	f7f8 f812 	bl	80010ac <__aeabi_fcmpeq>
 8009088:	2800      	cmp	r0, #0
 800908a:	bf14      	ite	ne
 800908c:	2301      	movne	r3, #1
 800908e:	2302      	moveq	r3, #2
 8009090:	4a18      	ldr	r2, [pc, #96]	; (80090f4 <__ieee754_rem_pio2f+0x2b8>)
 8009092:	4621      	mov	r1, r4
 8009094:	9201      	str	r2, [sp, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	a803      	add	r0, sp, #12
 800909a:	9200      	str	r2, [sp, #0]
 800909c:	463a      	mov	r2, r7
 800909e:	f000 f82f 	bl	8009100 <__kernel_rem_pio2f>
 80090a2:	f1ba 0f00 	cmp.w	sl, #0
 80090a6:	4605      	mov	r5, r0
 80090a8:	f6bf aef2 	bge.w	8008e90 <__ieee754_rem_pio2f+0x54>
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	6863      	ldr	r3, [r4, #4]
 80090b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80090ba:	6063      	str	r3, [r4, #4]
 80090bc:	e794      	b.n	8008fe8 <__ieee754_rem_pio2f+0x1ac>
 80090be:	2303      	movs	r3, #3
 80090c0:	e7e6      	b.n	8009090 <__ieee754_rem_pio2f+0x254>
 80090c2:	bf00      	nop
 80090c4:	3f490fd8 	.word	0x3f490fd8
 80090c8:	4016cbe3 	.word	0x4016cbe3
 80090cc:	3fc90f80 	.word	0x3fc90f80
 80090d0:	3fc90fd0 	.word	0x3fc90fd0
 80090d4:	37354443 	.word	0x37354443
 80090d8:	37354400 	.word	0x37354400
 80090dc:	2e85a308 	.word	0x2e85a308
 80090e0:	43490f80 	.word	0x43490f80
 80090e4:	3f22f984 	.word	0x3f22f984
 80090e8:	08009b64 	.word	0x08009b64
 80090ec:	2e85a300 	.word	0x2e85a300
 80090f0:	248d3132 	.word	0x248d3132
 80090f4:	08009be4 	.word	0x08009be4

080090f8 <fabsf>:
 80090f8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80090fc:	4770      	bx	lr
	...

08009100 <__kernel_rem_pio2f>:
 8009100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	b0db      	sub	sp, #364	; 0x16c
 8009106:	9202      	str	r2, [sp, #8]
 8009108:	9304      	str	r3, [sp, #16]
 800910a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800910c:	4bbb      	ldr	r3, [pc, #748]	; (80093fc <__kernel_rem_pio2f+0x2fc>)
 800910e:	9005      	str	r0, [sp, #20]
 8009110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009114:	9100      	str	r1, [sp, #0]
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	9b04      	ldr	r3, [sp, #16]
 800911a:	3b01      	subs	r3, #1
 800911c:	9303      	str	r3, [sp, #12]
 800911e:	9b02      	ldr	r3, [sp, #8]
 8009120:	1d1a      	adds	r2, r3, #4
 8009122:	f2c0 809b 	blt.w	800925c <__kernel_rem_pio2f+0x15c>
 8009126:	1edc      	subs	r4, r3, #3
 8009128:	bf48      	it	mi
 800912a:	1d1c      	addmi	r4, r3, #4
 800912c:	10e4      	asrs	r4, r4, #3
 800912e:	2500      	movs	r5, #0
 8009130:	f04f 0b00 	mov.w	fp, #0
 8009134:	1c67      	adds	r7, r4, #1
 8009136:	00fb      	lsls	r3, r7, #3
 8009138:	9306      	str	r3, [sp, #24]
 800913a:	9b02      	ldr	r3, [sp, #8]
 800913c:	9a03      	ldr	r2, [sp, #12]
 800913e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8009142:	9b01      	ldr	r3, [sp, #4]
 8009144:	eba4 0802 	sub.w	r8, r4, r2
 8009148:	eb03 0902 	add.w	r9, r3, r2
 800914c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800914e:	ae1e      	add	r6, sp, #120	; 0x78
 8009150:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8009154:	454d      	cmp	r5, r9
 8009156:	f340 8083 	ble.w	8009260 <__kernel_rem_pio2f+0x160>
 800915a:	9a04      	ldr	r2, [sp, #16]
 800915c:	ab1e      	add	r3, sp, #120	; 0x78
 800915e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8009162:	f04f 0900 	mov.w	r9, #0
 8009166:	2300      	movs	r3, #0
 8009168:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 800916c:	9a01      	ldr	r2, [sp, #4]
 800916e:	4591      	cmp	r9, r2
 8009170:	f340 809e 	ble.w	80092b0 <__kernel_rem_pio2f+0x1b0>
 8009174:	4613      	mov	r3, r2
 8009176:	aa0a      	add	r2, sp, #40	; 0x28
 8009178:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800917c:	9308      	str	r3, [sp, #32]
 800917e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009180:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009188:	9307      	str	r3, [sp, #28]
 800918a:	ac0a      	add	r4, sp, #40	; 0x28
 800918c:	4626      	mov	r6, r4
 800918e:	46c3      	mov	fp, r8
 8009190:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8009194:	ab5a      	add	r3, sp, #360	; 0x168
 8009196:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800919a:	f853 5c50 	ldr.w	r5, [r3, #-80]
 800919e:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80091a2:	f1bb 0f00 	cmp.w	fp, #0
 80091a6:	f300 8088 	bgt.w	80092ba <__kernel_rem_pio2f+0x1ba>
 80091aa:	4639      	mov	r1, r7
 80091ac:	4628      	mov	r0, r5
 80091ae:	f000 fa5b 	bl	8009668 <scalbnf>
 80091b2:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80091b6:	4605      	mov	r5, r0
 80091b8:	f7f7 fde4 	bl	8000d84 <__aeabi_fmul>
 80091bc:	f000 faa0 	bl	8009700 <floorf>
 80091c0:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80091c4:	f7f7 fdde 	bl	8000d84 <__aeabi_fmul>
 80091c8:	4601      	mov	r1, r0
 80091ca:	4628      	mov	r0, r5
 80091cc:	f7f7 fcd0 	bl	8000b70 <__aeabi_fsub>
 80091d0:	4605      	mov	r5, r0
 80091d2:	f7f7 ff9d 	bl	8001110 <__aeabi_f2iz>
 80091d6:	4606      	mov	r6, r0
 80091d8:	f7f7 fd80 	bl	8000cdc <__aeabi_i2f>
 80091dc:	4601      	mov	r1, r0
 80091de:	4628      	mov	r0, r5
 80091e0:	f7f7 fcc6 	bl	8000b70 <__aeabi_fsub>
 80091e4:	2f00      	cmp	r7, #0
 80091e6:	4681      	mov	r9, r0
 80091e8:	f340 8086 	ble.w	80092f8 <__kernel_rem_pio2f+0x1f8>
 80091ec:	f108 32ff 	add.w	r2, r8, #4294967295
 80091f0:	ab0a      	add	r3, sp, #40	; 0x28
 80091f2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80091f6:	f1c7 0108 	rsb	r1, r7, #8
 80091fa:	fa45 f301 	asr.w	r3, r5, r1
 80091fe:	441e      	add	r6, r3
 8009200:	408b      	lsls	r3, r1
 8009202:	1aed      	subs	r5, r5, r3
 8009204:	ab0a      	add	r3, sp, #40	; 0x28
 8009206:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800920a:	f1c7 0307 	rsb	r3, r7, #7
 800920e:	411d      	asrs	r5, r3
 8009210:	2d00      	cmp	r5, #0
 8009212:	dd7f      	ble.n	8009314 <__kernel_rem_pio2f+0x214>
 8009214:	2200      	movs	r2, #0
 8009216:	4692      	mov	sl, r2
 8009218:	3601      	adds	r6, #1
 800921a:	4590      	cmp	r8, r2
 800921c:	f300 80b0 	bgt.w	8009380 <__kernel_rem_pio2f+0x280>
 8009220:	2f00      	cmp	r7, #0
 8009222:	dd05      	ble.n	8009230 <__kernel_rem_pio2f+0x130>
 8009224:	2f01      	cmp	r7, #1
 8009226:	f000 80bd 	beq.w	80093a4 <__kernel_rem_pio2f+0x2a4>
 800922a:	2f02      	cmp	r7, #2
 800922c:	f000 80c5 	beq.w	80093ba <__kernel_rem_pio2f+0x2ba>
 8009230:	2d02      	cmp	r5, #2
 8009232:	d16f      	bne.n	8009314 <__kernel_rem_pio2f+0x214>
 8009234:	4649      	mov	r1, r9
 8009236:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800923a:	f7f7 fc99 	bl	8000b70 <__aeabi_fsub>
 800923e:	4681      	mov	r9, r0
 8009240:	f1ba 0f00 	cmp.w	sl, #0
 8009244:	d066      	beq.n	8009314 <__kernel_rem_pio2f+0x214>
 8009246:	4639      	mov	r1, r7
 8009248:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800924c:	f000 fa0c 	bl	8009668 <scalbnf>
 8009250:	4601      	mov	r1, r0
 8009252:	4648      	mov	r0, r9
 8009254:	f7f7 fc8c 	bl	8000b70 <__aeabi_fsub>
 8009258:	4681      	mov	r9, r0
 800925a:	e05b      	b.n	8009314 <__kernel_rem_pio2f+0x214>
 800925c:	2400      	movs	r4, #0
 800925e:	e766      	b.n	800912e <__kernel_rem_pio2f+0x2e>
 8009260:	eb18 0f05 	cmn.w	r8, r5
 8009264:	d407      	bmi.n	8009276 <__kernel_rem_pio2f+0x176>
 8009266:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800926a:	f7f7 fd37 	bl	8000cdc <__aeabi_i2f>
 800926e:	f846 0b04 	str.w	r0, [r6], #4
 8009272:	3501      	adds	r5, #1
 8009274:	e76e      	b.n	8009154 <__kernel_rem_pio2f+0x54>
 8009276:	4658      	mov	r0, fp
 8009278:	e7f9      	b.n	800926e <__kernel_rem_pio2f+0x16e>
 800927a:	9307      	str	r3, [sp, #28]
 800927c:	9b05      	ldr	r3, [sp, #20]
 800927e:	f8da 1000 	ldr.w	r1, [sl]
 8009282:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009286:	f7f7 fd7d 	bl	8000d84 <__aeabi_fmul>
 800928a:	4601      	mov	r1, r0
 800928c:	4630      	mov	r0, r6
 800928e:	f7f7 fc71 	bl	8000b74 <__addsf3>
 8009292:	4606      	mov	r6, r0
 8009294:	9b07      	ldr	r3, [sp, #28]
 8009296:	f108 0801 	add.w	r8, r8, #1
 800929a:	9a03      	ldr	r2, [sp, #12]
 800929c:	f1aa 0a04 	sub.w	sl, sl, #4
 80092a0:	4590      	cmp	r8, r2
 80092a2:	ddea      	ble.n	800927a <__kernel_rem_pio2f+0x17a>
 80092a4:	f84b 6b04 	str.w	r6, [fp], #4
 80092a8:	f109 0901 	add.w	r9, r9, #1
 80092ac:	3504      	adds	r5, #4
 80092ae:	e75d      	b.n	800916c <__kernel_rem_pio2f+0x6c>
 80092b0:	46aa      	mov	sl, r5
 80092b2:	461e      	mov	r6, r3
 80092b4:	f04f 0800 	mov.w	r8, #0
 80092b8:	e7ef      	b.n	800929a <__kernel_rem_pio2f+0x19a>
 80092ba:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80092be:	4628      	mov	r0, r5
 80092c0:	f7f7 fd60 	bl	8000d84 <__aeabi_fmul>
 80092c4:	f7f7 ff24 	bl	8001110 <__aeabi_f2iz>
 80092c8:	f7f7 fd08 	bl	8000cdc <__aeabi_i2f>
 80092cc:	4649      	mov	r1, r9
 80092ce:	9009      	str	r0, [sp, #36]	; 0x24
 80092d0:	f7f7 fd58 	bl	8000d84 <__aeabi_fmul>
 80092d4:	4601      	mov	r1, r0
 80092d6:	4628      	mov	r0, r5
 80092d8:	f7f7 fc4a 	bl	8000b70 <__aeabi_fsub>
 80092dc:	f7f7 ff18 	bl	8001110 <__aeabi_f2iz>
 80092e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092e6:	f846 0b04 	str.w	r0, [r6], #4
 80092ea:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7f7 fc40 	bl	8000b74 <__addsf3>
 80092f4:	4605      	mov	r5, r0
 80092f6:	e754      	b.n	80091a2 <__kernel_rem_pio2f+0xa2>
 80092f8:	d106      	bne.n	8009308 <__kernel_rem_pio2f+0x208>
 80092fa:	f108 33ff 	add.w	r3, r8, #4294967295
 80092fe:	aa0a      	add	r2, sp, #40	; 0x28
 8009300:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8009304:	11ed      	asrs	r5, r5, #7
 8009306:	e783      	b.n	8009210 <__kernel_rem_pio2f+0x110>
 8009308:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800930c:	f7f7 feec 	bl	80010e8 <__aeabi_fcmpge>
 8009310:	4605      	mov	r5, r0
 8009312:	bb98      	cbnz	r0, 800937c <__kernel_rem_pio2f+0x27c>
 8009314:	2100      	movs	r1, #0
 8009316:	4648      	mov	r0, r9
 8009318:	f7f7 fec8 	bl	80010ac <__aeabi_fcmpeq>
 800931c:	2800      	cmp	r0, #0
 800931e:	f000 8098 	beq.w	8009452 <__kernel_rem_pio2f+0x352>
 8009322:	f108 34ff 	add.w	r4, r8, #4294967295
 8009326:	4623      	mov	r3, r4
 8009328:	2200      	movs	r2, #0
 800932a:	9901      	ldr	r1, [sp, #4]
 800932c:	428b      	cmp	r3, r1
 800932e:	da4c      	bge.n	80093ca <__kernel_rem_pio2f+0x2ca>
 8009330:	2a00      	cmp	r2, #0
 8009332:	d067      	beq.n	8009404 <__kernel_rem_pio2f+0x304>
 8009334:	ab0a      	add	r3, sp, #40	; 0x28
 8009336:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800933a:	3f08      	subs	r7, #8
 800933c:	2b00      	cmp	r3, #0
 800933e:	f000 8086 	beq.w	800944e <__kernel_rem_pio2f+0x34e>
 8009342:	4639      	mov	r1, r7
 8009344:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009348:	f000 f98e 	bl	8009668 <scalbnf>
 800934c:	46a2      	mov	sl, r4
 800934e:	4681      	mov	r9, r0
 8009350:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8009354:	af46      	add	r7, sp, #280	; 0x118
 8009356:	f1ba 0f00 	cmp.w	sl, #0
 800935a:	f280 80af 	bge.w	80094bc <__kernel_rem_pio2f+0x3bc>
 800935e:	4627      	mov	r7, r4
 8009360:	2200      	movs	r2, #0
 8009362:	2f00      	cmp	r7, #0
 8009364:	f2c0 80d9 	blt.w	800951a <__kernel_rem_pio2f+0x41a>
 8009368:	a946      	add	r1, sp, #280	; 0x118
 800936a:	4690      	mov	r8, r2
 800936c:	f04f 0a00 	mov.w	sl, #0
 8009370:	4b23      	ldr	r3, [pc, #140]	; (8009400 <__kernel_rem_pio2f+0x300>)
 8009372:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8009376:	eba4 0907 	sub.w	r9, r4, r7
 800937a:	e0c2      	b.n	8009502 <__kernel_rem_pio2f+0x402>
 800937c:	2502      	movs	r5, #2
 800937e:	e749      	b.n	8009214 <__kernel_rem_pio2f+0x114>
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	f1ba 0f00 	cmp.w	sl, #0
 8009386:	d108      	bne.n	800939a <__kernel_rem_pio2f+0x29a>
 8009388:	b11b      	cbz	r3, 8009392 <__kernel_rem_pio2f+0x292>
 800938a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800938e:	6023      	str	r3, [r4, #0]
 8009390:	2301      	movs	r3, #1
 8009392:	469a      	mov	sl, r3
 8009394:	3201      	adds	r2, #1
 8009396:	3404      	adds	r4, #4
 8009398:	e73f      	b.n	800921a <__kernel_rem_pio2f+0x11a>
 800939a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800939e:	6023      	str	r3, [r4, #0]
 80093a0:	4653      	mov	r3, sl
 80093a2:	e7f6      	b.n	8009392 <__kernel_rem_pio2f+0x292>
 80093a4:	f108 32ff 	add.w	r2, r8, #4294967295
 80093a8:	ab0a      	add	r3, sp, #40	; 0x28
 80093aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b2:	a90a      	add	r1, sp, #40	; 0x28
 80093b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80093b8:	e73a      	b.n	8009230 <__kernel_rem_pio2f+0x130>
 80093ba:	f108 32ff 	add.w	r2, r8, #4294967295
 80093be:	ab0a      	add	r3, sp, #40	; 0x28
 80093c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093c8:	e7f3      	b.n	80093b2 <__kernel_rem_pio2f+0x2b2>
 80093ca:	a90a      	add	r1, sp, #40	; 0x28
 80093cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	430a      	orrs	r2, r1
 80093d4:	e7a9      	b.n	800932a <__kernel_rem_pio2f+0x22a>
 80093d6:	3401      	adds	r4, #1
 80093d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80093dc:	2a00      	cmp	r2, #0
 80093de:	d0fa      	beq.n	80093d6 <__kernel_rem_pio2f+0x2d6>
 80093e0:	9b04      	ldr	r3, [sp, #16]
 80093e2:	aa1e      	add	r2, sp, #120	; 0x78
 80093e4:	4443      	add	r3, r8
 80093e6:	f108 0601 	add.w	r6, r8, #1
 80093ea:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80093ee:	4444      	add	r4, r8
 80093f0:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 80093f4:	42b4      	cmp	r4, r6
 80093f6:	da08      	bge.n	800940a <__kernel_rem_pio2f+0x30a>
 80093f8:	46a0      	mov	r8, r4
 80093fa:	e6c6      	b.n	800918a <__kernel_rem_pio2f+0x8a>
 80093fc:	08009f28 	.word	0x08009f28
 8009400:	08009efc 	.word	0x08009efc
 8009404:	2401      	movs	r4, #1
 8009406:	9b08      	ldr	r3, [sp, #32]
 8009408:	e7e6      	b.n	80093d8 <__kernel_rem_pio2f+0x2d8>
 800940a:	9b07      	ldr	r3, [sp, #28]
 800940c:	46ab      	mov	fp, r5
 800940e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009412:	f7f7 fc63 	bl	8000cdc <__aeabi_i2f>
 8009416:	f04f 0a00 	mov.w	sl, #0
 800941a:	f04f 0800 	mov.w	r8, #0
 800941e:	6028      	str	r0, [r5, #0]
 8009420:	9b03      	ldr	r3, [sp, #12]
 8009422:	459a      	cmp	sl, r3
 8009424:	dd04      	ble.n	8009430 <__kernel_rem_pio2f+0x330>
 8009426:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800942a:	3504      	adds	r5, #4
 800942c:	3601      	adds	r6, #1
 800942e:	e7e1      	b.n	80093f4 <__kernel_rem_pio2f+0x2f4>
 8009430:	9b05      	ldr	r3, [sp, #20]
 8009432:	f85b 0904 	ldr.w	r0, [fp], #-4
 8009436:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800943a:	f7f7 fca3 	bl	8000d84 <__aeabi_fmul>
 800943e:	4601      	mov	r1, r0
 8009440:	4640      	mov	r0, r8
 8009442:	f7f7 fb97 	bl	8000b74 <__addsf3>
 8009446:	f10a 0a01 	add.w	sl, sl, #1
 800944a:	4680      	mov	r8, r0
 800944c:	e7e8      	b.n	8009420 <__kernel_rem_pio2f+0x320>
 800944e:	3c01      	subs	r4, #1
 8009450:	e770      	b.n	8009334 <__kernel_rem_pio2f+0x234>
 8009452:	9b06      	ldr	r3, [sp, #24]
 8009454:	9a02      	ldr	r2, [sp, #8]
 8009456:	4648      	mov	r0, r9
 8009458:	1a99      	subs	r1, r3, r2
 800945a:	f000 f905 	bl	8009668 <scalbnf>
 800945e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009462:	4604      	mov	r4, r0
 8009464:	f7f7 fe40 	bl	80010e8 <__aeabi_fcmpge>
 8009468:	b300      	cbz	r0, 80094ac <__kernel_rem_pio2f+0x3ac>
 800946a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800946e:	4620      	mov	r0, r4
 8009470:	f7f7 fc88 	bl	8000d84 <__aeabi_fmul>
 8009474:	f7f7 fe4c 	bl	8001110 <__aeabi_f2iz>
 8009478:	f7f7 fc30 	bl	8000cdc <__aeabi_i2f>
 800947c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009480:	4681      	mov	r9, r0
 8009482:	f7f7 fc7f 	bl	8000d84 <__aeabi_fmul>
 8009486:	4601      	mov	r1, r0
 8009488:	4620      	mov	r0, r4
 800948a:	f7f7 fb71 	bl	8000b70 <__aeabi_fsub>
 800948e:	f7f7 fe3f 	bl	8001110 <__aeabi_f2iz>
 8009492:	ab0a      	add	r3, sp, #40	; 0x28
 8009494:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009498:	4648      	mov	r0, r9
 800949a:	f7f7 fe39 	bl	8001110 <__aeabi_f2iz>
 800949e:	f108 0401 	add.w	r4, r8, #1
 80094a2:	ab0a      	add	r3, sp, #40	; 0x28
 80094a4:	3708      	adds	r7, #8
 80094a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80094aa:	e74a      	b.n	8009342 <__kernel_rem_pio2f+0x242>
 80094ac:	4620      	mov	r0, r4
 80094ae:	f7f7 fe2f 	bl	8001110 <__aeabi_f2iz>
 80094b2:	ab0a      	add	r3, sp, #40	; 0x28
 80094b4:	4644      	mov	r4, r8
 80094b6:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80094ba:	e742      	b.n	8009342 <__kernel_rem_pio2f+0x242>
 80094bc:	ab0a      	add	r3, sp, #40	; 0x28
 80094be:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80094c2:	f7f7 fc0b 	bl	8000cdc <__aeabi_i2f>
 80094c6:	4649      	mov	r1, r9
 80094c8:	f7f7 fc5c 	bl	8000d84 <__aeabi_fmul>
 80094cc:	4641      	mov	r1, r8
 80094ce:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 80094d2:	4648      	mov	r0, r9
 80094d4:	f7f7 fc56 	bl	8000d84 <__aeabi_fmul>
 80094d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094dc:	4681      	mov	r9, r0
 80094de:	e73a      	b.n	8009356 <__kernel_rem_pio2f+0x256>
 80094e0:	f853 0b04 	ldr.w	r0, [r3], #4
 80094e4:	f85b 1b04 	ldr.w	r1, [fp], #4
 80094e8:	9203      	str	r2, [sp, #12]
 80094ea:	9302      	str	r3, [sp, #8]
 80094ec:	f7f7 fc4a 	bl	8000d84 <__aeabi_fmul>
 80094f0:	4601      	mov	r1, r0
 80094f2:	4640      	mov	r0, r8
 80094f4:	f7f7 fb3e 	bl	8000b74 <__addsf3>
 80094f8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80094fc:	4680      	mov	r8, r0
 80094fe:	f10a 0a01 	add.w	sl, sl, #1
 8009502:	9901      	ldr	r1, [sp, #4]
 8009504:	458a      	cmp	sl, r1
 8009506:	dc01      	bgt.n	800950c <__kernel_rem_pio2f+0x40c>
 8009508:	45ca      	cmp	sl, r9
 800950a:	dde9      	ble.n	80094e0 <__kernel_rem_pio2f+0x3e0>
 800950c:	ab5a      	add	r3, sp, #360	; 0x168
 800950e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8009512:	f849 8ca0 	str.w	r8, [r9, #-160]
 8009516:	3f01      	subs	r7, #1
 8009518:	e723      	b.n	8009362 <__kernel_rem_pio2f+0x262>
 800951a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800951c:	2b02      	cmp	r3, #2
 800951e:	dc07      	bgt.n	8009530 <__kernel_rem_pio2f+0x430>
 8009520:	2b00      	cmp	r3, #0
 8009522:	dc4e      	bgt.n	80095c2 <__kernel_rem_pio2f+0x4c2>
 8009524:	d02e      	beq.n	8009584 <__kernel_rem_pio2f+0x484>
 8009526:	f006 0007 	and.w	r0, r6, #7
 800952a:	b05b      	add	sp, #364	; 0x16c
 800952c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009530:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8009532:	2b03      	cmp	r3, #3
 8009534:	d1f7      	bne.n	8009526 <__kernel_rem_pio2f+0x426>
 8009536:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800953a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800953e:	46b8      	mov	r8, r7
 8009540:	46a2      	mov	sl, r4
 8009542:	f1ba 0f00 	cmp.w	sl, #0
 8009546:	dc49      	bgt.n	80095dc <__kernel_rem_pio2f+0x4dc>
 8009548:	46a1      	mov	r9, r4
 800954a:	f1b9 0f01 	cmp.w	r9, #1
 800954e:	dc60      	bgt.n	8009612 <__kernel_rem_pio2f+0x512>
 8009550:	2000      	movs	r0, #0
 8009552:	2c01      	cmp	r4, #1
 8009554:	dc76      	bgt.n	8009644 <__kernel_rem_pio2f+0x544>
 8009556:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8009558:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800955a:	2d00      	cmp	r5, #0
 800955c:	d178      	bne.n	8009650 <__kernel_rem_pio2f+0x550>
 800955e:	9900      	ldr	r1, [sp, #0]
 8009560:	600a      	str	r2, [r1, #0]
 8009562:	460a      	mov	r2, r1
 8009564:	604b      	str	r3, [r1, #4]
 8009566:	6090      	str	r0, [r2, #8]
 8009568:	e7dd      	b.n	8009526 <__kernel_rem_pio2f+0x426>
 800956a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800956e:	f7f7 fb01 	bl	8000b74 <__addsf3>
 8009572:	3c01      	subs	r4, #1
 8009574:	2c00      	cmp	r4, #0
 8009576:	daf8      	bge.n	800956a <__kernel_rem_pio2f+0x46a>
 8009578:	b10d      	cbz	r5, 800957e <__kernel_rem_pio2f+0x47e>
 800957a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800957e:	9b00      	ldr	r3, [sp, #0]
 8009580:	6018      	str	r0, [r3, #0]
 8009582:	e7d0      	b.n	8009526 <__kernel_rem_pio2f+0x426>
 8009584:	2000      	movs	r0, #0
 8009586:	af32      	add	r7, sp, #200	; 0xc8
 8009588:	e7f4      	b.n	8009574 <__kernel_rem_pio2f+0x474>
 800958a:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800958e:	f7f7 faf1 	bl	8000b74 <__addsf3>
 8009592:	f108 38ff 	add.w	r8, r8, #4294967295
 8009596:	f1b8 0f00 	cmp.w	r8, #0
 800959a:	daf6      	bge.n	800958a <__kernel_rem_pio2f+0x48a>
 800959c:	b1ad      	cbz	r5, 80095ca <__kernel_rem_pio2f+0x4ca>
 800959e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80095a2:	9a00      	ldr	r2, [sp, #0]
 80095a4:	4601      	mov	r1, r0
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80095aa:	f7f7 fae1 	bl	8000b70 <__aeabi_fsub>
 80095ae:	f04f 0801 	mov.w	r8, #1
 80095b2:	4544      	cmp	r4, r8
 80095b4:	da0b      	bge.n	80095ce <__kernel_rem_pio2f+0x4ce>
 80095b6:	b10d      	cbz	r5, 80095bc <__kernel_rem_pio2f+0x4bc>
 80095b8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80095bc:	9b00      	ldr	r3, [sp, #0]
 80095be:	6058      	str	r0, [r3, #4]
 80095c0:	e7b1      	b.n	8009526 <__kernel_rem_pio2f+0x426>
 80095c2:	46a0      	mov	r8, r4
 80095c4:	2000      	movs	r0, #0
 80095c6:	af32      	add	r7, sp, #200	; 0xc8
 80095c8:	e7e5      	b.n	8009596 <__kernel_rem_pio2f+0x496>
 80095ca:	4603      	mov	r3, r0
 80095cc:	e7e9      	b.n	80095a2 <__kernel_rem_pio2f+0x4a2>
 80095ce:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80095d2:	f7f7 facf 	bl	8000b74 <__addsf3>
 80095d6:	f108 0801 	add.w	r8, r8, #1
 80095da:	e7ea      	b.n	80095b2 <__kernel_rem_pio2f+0x4b2>
 80095dc:	f8d8 3000 	ldr.w	r3, [r8]
 80095e0:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	9302      	str	r3, [sp, #8]
 80095ea:	9201      	str	r2, [sp, #4]
 80095ec:	f7f7 fac2 	bl	8000b74 <__addsf3>
 80095f0:	9a01      	ldr	r2, [sp, #4]
 80095f2:	4601      	mov	r1, r0
 80095f4:	4681      	mov	r9, r0
 80095f6:	4610      	mov	r0, r2
 80095f8:	f7f7 faba 	bl	8000b70 <__aeabi_fsub>
 80095fc:	9b02      	ldr	r3, [sp, #8]
 80095fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009602:	4619      	mov	r1, r3
 8009604:	f7f7 fab6 	bl	8000b74 <__addsf3>
 8009608:	f848 0904 	str.w	r0, [r8], #-4
 800960c:	f8c8 9000 	str.w	r9, [r8]
 8009610:	e797      	b.n	8009542 <__kernel_rem_pio2f+0x442>
 8009612:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8009616:	f8d7 a000 	ldr.w	sl, [r7]
 800961a:	4618      	mov	r0, r3
 800961c:	4651      	mov	r1, sl
 800961e:	9301      	str	r3, [sp, #4]
 8009620:	f7f7 faa8 	bl	8000b74 <__addsf3>
 8009624:	9b01      	ldr	r3, [sp, #4]
 8009626:	4601      	mov	r1, r0
 8009628:	4680      	mov	r8, r0
 800962a:	4618      	mov	r0, r3
 800962c:	f7f7 faa0 	bl	8000b70 <__aeabi_fsub>
 8009630:	4651      	mov	r1, sl
 8009632:	f7f7 fa9f 	bl	8000b74 <__addsf3>
 8009636:	f847 0904 	str.w	r0, [r7], #-4
 800963a:	f109 39ff 	add.w	r9, r9, #4294967295
 800963e:	f8c7 8000 	str.w	r8, [r7]
 8009642:	e782      	b.n	800954a <__kernel_rem_pio2f+0x44a>
 8009644:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8009648:	f7f7 fa94 	bl	8000b74 <__addsf3>
 800964c:	3c01      	subs	r4, #1
 800964e:	e780      	b.n	8009552 <__kernel_rem_pio2f+0x452>
 8009650:	9900      	ldr	r1, [sp, #0]
 8009652:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8009656:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800965a:	600a      	str	r2, [r1, #0]
 800965c:	604b      	str	r3, [r1, #4]
 800965e:	460a      	mov	r2, r1
 8009660:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009664:	e77f      	b.n	8009566 <__kernel_rem_pio2f+0x466>
 8009666:	bf00      	nop

08009668 <scalbnf>:
 8009668:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4603      	mov	r3, r0
 8009670:	460d      	mov	r5, r1
 8009672:	4604      	mov	r4, r0
 8009674:	d02e      	beq.n	80096d4 <scalbnf+0x6c>
 8009676:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800967a:	d304      	bcc.n	8009686 <scalbnf+0x1e>
 800967c:	4601      	mov	r1, r0
 800967e:	f7f7 fa79 	bl	8000b74 <__addsf3>
 8009682:	4603      	mov	r3, r0
 8009684:	e026      	b.n	80096d4 <scalbnf+0x6c>
 8009686:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800968a:	d118      	bne.n	80096be <scalbnf+0x56>
 800968c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009690:	f7f7 fb78 	bl	8000d84 <__aeabi_fmul>
 8009694:	4a17      	ldr	r2, [pc, #92]	; (80096f4 <scalbnf+0x8c>)
 8009696:	4603      	mov	r3, r0
 8009698:	4295      	cmp	r5, r2
 800969a:	db0c      	blt.n	80096b6 <scalbnf+0x4e>
 800969c:	4604      	mov	r4, r0
 800969e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80096a2:	3a19      	subs	r2, #25
 80096a4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80096a8:	428d      	cmp	r5, r1
 80096aa:	dd0a      	ble.n	80096c2 <scalbnf+0x5a>
 80096ac:	4912      	ldr	r1, [pc, #72]	; (80096f8 <scalbnf+0x90>)
 80096ae:	4618      	mov	r0, r3
 80096b0:	f361 001e 	bfi	r0, r1, #0, #31
 80096b4:	e000      	b.n	80096b8 <scalbnf+0x50>
 80096b6:	4911      	ldr	r1, [pc, #68]	; (80096fc <scalbnf+0x94>)
 80096b8:	f7f7 fb64 	bl	8000d84 <__aeabi_fmul>
 80096bc:	e7e1      	b.n	8009682 <scalbnf+0x1a>
 80096be:	0dd2      	lsrs	r2, r2, #23
 80096c0:	e7f0      	b.n	80096a4 <scalbnf+0x3c>
 80096c2:	1951      	adds	r1, r2, r5
 80096c4:	29fe      	cmp	r1, #254	; 0xfe
 80096c6:	dcf1      	bgt.n	80096ac <scalbnf+0x44>
 80096c8:	2900      	cmp	r1, #0
 80096ca:	dd05      	ble.n	80096d8 <scalbnf+0x70>
 80096cc:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 80096d0:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 80096d4:	4618      	mov	r0, r3
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	f111 0f16 	cmn.w	r1, #22
 80096dc:	da01      	bge.n	80096e2 <scalbnf+0x7a>
 80096de:	4907      	ldr	r1, [pc, #28]	; (80096fc <scalbnf+0x94>)
 80096e0:	e7e5      	b.n	80096ae <scalbnf+0x46>
 80096e2:	f101 0019 	add.w	r0, r1, #25
 80096e6:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 80096ea:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80096ee:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 80096f2:	e7e1      	b.n	80096b8 <scalbnf+0x50>
 80096f4:	ffff3cb0 	.word	0xffff3cb0
 80096f8:	7149f2ca 	.word	0x7149f2ca
 80096fc:	0da24260 	.word	0x0da24260

08009700 <floorf>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009706:	3d7f      	subs	r5, #127	; 0x7f
 8009708:	2d16      	cmp	r5, #22
 800970a:	4601      	mov	r1, r0
 800970c:	4604      	mov	r4, r0
 800970e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009712:	dc25      	bgt.n	8009760 <floorf+0x60>
 8009714:	2d00      	cmp	r5, #0
 8009716:	da0e      	bge.n	8009736 <floorf+0x36>
 8009718:	4916      	ldr	r1, [pc, #88]	; (8009774 <floorf+0x74>)
 800971a:	f7f7 fa2b 	bl	8000b74 <__addsf3>
 800971e:	2100      	movs	r1, #0
 8009720:	f7f7 fcec 	bl	80010fc <__aeabi_fcmpgt>
 8009724:	b128      	cbz	r0, 8009732 <floorf+0x32>
 8009726:	2c00      	cmp	r4, #0
 8009728:	da22      	bge.n	8009770 <floorf+0x70>
 800972a:	4b13      	ldr	r3, [pc, #76]	; (8009778 <floorf+0x78>)
 800972c:	2e00      	cmp	r6, #0
 800972e:	bf18      	it	ne
 8009730:	461c      	movne	r4, r3
 8009732:	4621      	mov	r1, r4
 8009734:	e01a      	b.n	800976c <floorf+0x6c>
 8009736:	4e11      	ldr	r6, [pc, #68]	; (800977c <floorf+0x7c>)
 8009738:	412e      	asrs	r6, r5
 800973a:	4230      	tst	r0, r6
 800973c:	d016      	beq.n	800976c <floorf+0x6c>
 800973e:	490d      	ldr	r1, [pc, #52]	; (8009774 <floorf+0x74>)
 8009740:	f7f7 fa18 	bl	8000b74 <__addsf3>
 8009744:	2100      	movs	r1, #0
 8009746:	f7f7 fcd9 	bl	80010fc <__aeabi_fcmpgt>
 800974a:	2800      	cmp	r0, #0
 800974c:	d0f1      	beq.n	8009732 <floorf+0x32>
 800974e:	2c00      	cmp	r4, #0
 8009750:	bfbe      	ittt	lt
 8009752:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8009756:	412b      	asrlt	r3, r5
 8009758:	18e4      	addlt	r4, r4, r3
 800975a:	ea24 0406 	bic.w	r4, r4, r6
 800975e:	e7e8      	b.n	8009732 <floorf+0x32>
 8009760:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009764:	d302      	bcc.n	800976c <floorf+0x6c>
 8009766:	f7f7 fa05 	bl	8000b74 <__addsf3>
 800976a:	4601      	mov	r1, r0
 800976c:	4608      	mov	r0, r1
 800976e:	bd70      	pop	{r4, r5, r6, pc}
 8009770:	2400      	movs	r4, #0
 8009772:	e7de      	b.n	8009732 <floorf+0x32>
 8009774:	7149f2ca 	.word	0x7149f2ca
 8009778:	bf800000 	.word	0xbf800000
 800977c:	007fffff 	.word	0x007fffff

08009780 <_init>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	bf00      	nop
 8009784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009786:	bc08      	pop	{r3}
 8009788:	469e      	mov	lr, r3
 800978a:	4770      	bx	lr

0800978c <_fini>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	bf00      	nop
 8009790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009792:	bc08      	pop	{r3}
 8009794:	469e      	mov	lr, r3
 8009796:	4770      	bx	lr
